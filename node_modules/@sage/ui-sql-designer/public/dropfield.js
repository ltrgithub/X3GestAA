'use strict';

let _base = require('./base');

class DropField {
	constructor(field, parent, parent_class) {
		this.syra_id = field.$.Expr;
		this.syra_parent_item = parent;
		this.syra_item = null;
		this.syra_parent_class = parent_class;
		this._isDirty = false;
		this.sortDirection = 1;
		this.sortColumnID = '';
		this.width;
		this.height;

		this.create(field);
		this.makeDraggable();
		this.makeDroppable();
		this.setEvents();

		this.test = JSON.parse('{"$":{"Expr":"[PSD]TEST","Lbl":"hello","Vis":"Y","Bounds":"Y","Sum":"N","Sort":"A","Level":"1"},"Grants":{"Grant":[{"$":{"Prop":"Sort","Val":"Y"}},{"$":{"Prop":"Bounds","Val":"Y"}},{"$":{"Prop":"Sum","Val":"N"}},{"$":{"Prop":"Level","Val":"Y"}}]}}');
	}
	create(field) {
		this.syra_id = field.$.Expr;
		this.dropfieldname = field.$.Expr;
		this.dropfieldlabel = field.$.Lbl;
		let t = this.syra_parent_class.getTable(this.dropfieldname.slice(1, this.dropfieldname.indexOf(']')));
		if (t) {
			this.tablename = t.tablename;
			this.tablelabel = t.tablelabel;
		} else {
			this.tablename = '';
			this.tablelabel = '';
		}
		this.syra_item = _base.createElement('li', this.syra_parent_item, `li_${this.dropfieldname}`, 'sqldropfieldlistitem');
		this.droppanelleft = _base.createElement('div', this.syra_item, null, 'dropfield-left-panel');
		this.droppanelright = _base.createElement('div', this.syra_item, null, 'dropfield-right-panel');
		this.dropfielditem = _base.createElement('div', this.syra_item, `dfi_${this.dropfieldname}`, 'sqldropfielditem');
		this.toolbartop = _base.createElement('div', null, null, 'sqltable-toolbar');
		let el = _base.createElement('a', this.toolbartop, 'dropfieldclose', 'icon-toolbar-close sqltable-toolbar-btn');
		el.setAttribute('href', '#');
		//el.setAttribute('title', '@close');
		this.toolbarbottom = _base.createElement('div', null, null, 'dropfield-toolbar');
		this.dropfieldboundary = _base.createElement('a', this.toolbarbottom, 'dropfieldboundary', 'icon-field-boundary sqltable-toolbar-btn');
		this.dropfieldboundary.setAttribute('href', '#');
		this.dropfieldboundary.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_fieldBoundary);
		this.dropfieldadd = _base.createElement('a', this.toolbarbottom, 'dropfieldadd', 'icon-add-field sqltable-toolbar-btn');
		this.dropfieldadd.setAttribute('href', '#');
		this.dropfieldadd.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_fieldAdd);
		this.dropfieldsort = _base.createElement('a', this.toolbarbottom, 'dropfieldsort', 'icon-sort-ascending sqltable-toolbar-btn');
		this.dropfieldsort.setAttribute('href', '#');
		this.dropfieldsort.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_fieldSort);
		this.dropfieldvisible = _base.createElement('a', this.toolbarbottom, 'dropfieldvisible', 'icon-visible sqltable-toolbar-btn');
		this.dropfieldvisible.setAttribute('href', '#');
		this.dropfieldvisible.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_fieldVisible);
		_base.createElement('div', this.dropfielditem, null, 'icon-dropfield-label sqldropfield-handle').appendChild(this.toolbartop);
		el = _base.createElement('a', this.dropfielditem, 'dropfieldlabel', null, this.dropfieldlabel);
		el.setAttribute('href', '#');
		// el.setAttribute('title', '@close');
		_base.createElement('div', this.dropfielditem, null, null, this.tablename);
		_base.createElement('div', this.dropfielditem, null, null, this.tablelabel);
		_base.createElement('div', this.dropfielditem, null, null).appendChild(this.toolbarbottom);
		this.setLevel(field.$.Level);
		this.toggleSort(field.$.Sort);
		this.toggleSumField(field.$.Sum);
		this.toggleBoundary(field.$.Bounds);
		this.toggleVisible(field.$.Vis);
		let grant;
		for (let i = 0; i < field.Grants.Grant.length; i++) {
			grant = field.Grants.Grant[i].$;
			switch (grant.Prop) {
				case 'Sort':
					this.toggleSort(field.$.Sort, grant);
					break;
				case 'Bounds':
					this.toggleBoundary(field.$.Bounds, grant);
					break;
				case 'Sum':
					this.toggleSumField(field.$.Sum, grant);
					break;
				case 'Level':
					break;
			}
		}
		$(this.syra_item).disableSelection();
	}
	setLevel(level) {
		this.level = parseInt(level, 10);
		this.newLevel = level;
		this.syra_item.style.top = `${parseInt(this.level * 20)}px `;
	}
	removeDropField() {
		$(this.syra_item).remove();
	}
	makeDraggable() {
		let that = this;
		$(this.syra_item).draggable({
			handle: '.sqldropfield-handle',
			revert: 'invalid',
			// helper: 'clone',
			scope: 'cart-item',
			start: function() {
				if (!that.isOnlyDropFieldOnLevel(that.level)) {
					let rect = this.getBoundingClientRect();
					this.sqlgrouptop = _base.createElement('div', that.syra_parent_class.sqldropfieldbench, 'sqlgroupdroptop', 'sqlgroupdroptop', that.syra_parent_class.locale.sqlDesigner_fieldCreateGroup);
					let sqlgrouprect = this.sqlgrouptop.getBoundingClientRect();
					this.sqlgrouptop.style.top = `${rect.top - sqlgrouprect.top - 20}px`;
					this.sqlgrouptop.style.left = `${rect.left - sqlgrouprect.left + 6}px`;
					this.sqlgroupbottom = _base.createElement('div', that.syra_parent_class.sqldropfieldbench, 'sqlgroupdropbottom', 'sqlgroupdropbottom', that.syra_parent_class.locale.sqlDesigner_fieldCreateGroup);
					sqlgrouprect = this.sqlgroupbottom.getBoundingClientRect();
					this.sqlgroupbottom.style.bottom = `${sqlgrouprect.bottom - rect.bottom - 20}px`;
					this.sqlgroupbottom.style.left = `${rect.left - sqlgrouprect.left + 6}px`;
					that.makeGroupDroppable(this.sqlgrouptop);
					that.makeGroupDroppable(this.sqlgroupbottom);
					that.dropfielditem.classList.add('drag-shadow');
				}
			},
			stop: function() {
				$(this.sqlgrouptop).remove();
				$(this.sqlgroupbottom).remove();
				that.dropfielditem.classList.remove('drag-shadow');
			}
		});
	}
	dragEnableChange(enable) {
		$(this.syra_item).draggable({
			disabled: !enable
		});
	}
	makeGroupDroppable(sqlgroup) {
		let that = this;
		let req;
		$(sqlgroup).droppable({
			tolerance: 'pointer',
			scope: 'cart-item',
			drop: function() {
				let df = that;
				let grp = this;
				let dfsIndex = that.syra_parent_class.getDropFieldIndex(df.syra_id);
				let dfLevel = grp.getAttribute('id') === 'sqlgroupdroptop' ? parseInt(df.level, 10) : parseInt(df.level, 10) + 1;
				let dftIndex = that.findChangeOfLevelIndex(dfsIndex, df.level,  grp.getAttribute('id') === 'sqlgroupdroptop') + 1;
				let params = {
					dfs: df,
					level: dfLevel + 1,
					sibling: that.syra_parent_class.dropfieldlist[dftIndex] ? that.syra_parent_class.dropfieldlist[dftIndex].syra_item : undefined,
					onlyDropFieldOnLevel: false
				}
				//move field to new level
				that.syra_parent_class.createNewLevels(_base.changefieldType.MOVE, df, dfsIndex, dftIndex, dfLevel, true);
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MOVEFIELD}</AT>
<SK>${dfsIndex + 1}</SK><TK>${dftIndex + 1}</TK></ACT> `
				for (let i = 0; i < that.syra_parent_class.dropfieldtemplist.length; i++) {
					req += `<ACT><AT>${_base.requestTypes.LEVELFIELD}</AT><SK>${i + 1}</SK><P1>${that.syra_parent_class.dropfieldtemplist[i].level}</P1></ACT>`;
				}
				req += `</LINES></INTERFL>`

				that.syra_parent_class.makeAjaxCall(_base.requestTypes.MOVEFIELD, null, {
					'params': params
				}, req);
			},
			over: function() {
				this.classList.add('draggable-hover');
			},
			out: function() {
				this.classList.remove('draggable-hover');
			},
			accept: function() {
				return true;
			}
		});
	}
	isOnlyDropFieldOnLevel(dfsLevel) {
		let cnt = 0;
		for (let i = 0; i < this.syra_parent_class.dropfieldlist.length; i++) {
			if (this.syra_parent_class.dropfieldlist[i].level == dfsLevel)
				cnt++;
		}
		return cnt == 1;
	}
	findChangeOfLevelIndex(dfsIndex, dfsLevel, back) {
		back = typeof back === 'undefined' ? true : back;
		if (back) {
			for (let i = dfsIndex; i >= 0; i--) {
				if (this.syra_parent_class.dropfieldlist[i].level != dfsLevel)
					return i;
			}
			return -1;
		} else {
			for (let i = dfsIndex; i < this.syra_parent_class.dropfieldlist.length; i++) {
				if (this.syra_parent_class.dropfieldlist[i].level != dfsLevel)
					return i;
			}
			return this.syra_parent_class.dropfieldlist.length - 1;
		}
	}
	makeDroppable() {
		let that = this;
		let req;
		$(this.droppanelleft).droppable({
			tolerance: 'pointer',
			scope: 'cart-item',
			drop: function(event, ui) {
				if (ui.draggable[0].tagName.toUpperCase() === 'TR') {
					//drop from table
					let dfnItem = ui.draggable[0].getAttribute('id');
					let dflItem = $(ui.draggable[0]).children('td').eq(2).text();
					let level = parseInt(that.level, 10);
					let params = {
						dfnItem: dfnItem,
						dflItem: dflItem,
						level: level,
						sibling: that.syra_item,
						index: that.syra_parent_class.getDropFieldIndex(that.syra_id)
					}
					req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.ADDFIELD}</AT>
<SK>${that.syra_parent_class.getDropFieldIndex(that.syra_id) + 1}</SK>
<P1>${dfnItem}</P1><P2>${that.level}</P2></ACT></LINES></INTERFL>`;
					that.syra_parent_class.makeAjaxCall(_base.requestTypes.ADDFIELD, null, {
						'params': params
					}, req);
				} else {
					let dfs = that.syra_parent_class.getDropField(ui.draggable[0].getAttribute('id').replace('li_', ''));
					let dft = that;
					let level = parseInt(that.level, 10)
					let params = {
						dfs: dfs,
						dft: dft,
						level: level,
						sibling: that.syra_item,
						onlyDropFieldOnLevel: true
					}
					let dfsIndex = that.syra_parent_class.getDropFieldIndex(dfs.syra_id);
					let dftIndex = that.syra_parent_class.getDropFieldIndex(dft.syra_id)
					dftIndex = dfsIndex > dftIndex ? dftIndex : dftIndex - 1;
					if (dfs && dft && dfs.level !== dft.level) { //&& !that.onlyDropFieldOnLevel(dfs)) {
						//move field to new level
						that.syra_parent_class.createNewLevels(_base.changefieldType.MOVE, dfs, dfsIndex, dftIndex, dft.level);
						params.onlyDropFieldOnLevel = false;
						req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MOVEFIELD}</AT>
<SK>${dfsIndex + 1}</SK><TK>${dftIndex + 1}</TK></ACT> `
						for (let i = 0; i < that.syra_parent_class.dropfieldtemplist.length; i++) {
							req += `<ACT><AT>${_base.requestTypes.LEVELFIELD}</AT><SK>${i + 1}</SK><P1>${that.syra_parent_class.dropfieldtemplist[i].level}</P1></ACT>`;
						}
						req += `</LINES></INTERFL>`
					} else {
						//move field on same level
						that.syra_parent_class.createNewLevels(_base.changefieldType.MOVE, dfs, dfsIndex, dftIndex, dft.level);
						req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MOVEFIELD}</AT>
<SK>${dfsIndex + 1}</SK><TK>${dftIndex + 1}</TK></ACT> </LINES></INTERFL>`
					}
					that.syra_parent_class.makeAjaxCall(_base.requestTypes.MOVEFIELD, null, {
						'params': params
					}, req);
				}
				that.syra_item.classList.remove('draggable-hover-left');
			},
			over: function() {
				that.syra_item.classList.add('draggable-hover-left');
			},
			out: function() {
				that.syra_item.classList.remove('draggable-hover-left');
			},
			accept: function() {
				return true;
			}
		});
		$(this.droppanelright).droppable({
			tolerance: 'pointer',
			scope: 'cart-item',
			drop: function(event, ui) {
				if (ui.draggable[0].tagName.toUpperCase() === 'TR') {
					let dfnItem = ui.draggable[0].getAttribute('id');
					let dflItem = $(ui.draggable[0]).children('td').eq(2).text();
					let level = parseInt(that.level, 10)
					let params = {
						dfnItem: dfnItem,
						dflItem: dflItem,
						level: level,
						sibling: that.syra_item.nextElementSibling,
						index: that.syra_parent_class.getDropFieldIndex(that.syra_id) + 1
					}
					req = `<INTERFL> <TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER >< LINES >< ACT >< AT > ${_base.requestTypes.ADDFIELD}</AT>
<SK>${that.syra_parent_class.getDropFieldIndex(that.syra_id) + 2}</SK>
<P1>${dfnItem}</P1><P2>${that.level}</P2></ACT></LINES></INTERFL>`
					that.syra_parent_class.makeAjaxCall(_base.requestTypes.ADDFIELD, null, {
						'params': params
					}, req);
				} else {
					let dfs = that.syra_parent_class.getDropField(ui.draggable[0].getAttribute('id').replace('li_', ''));
					let dft = that;
					let level = parseInt(that.level, 10)
					let params = {
						dfs: dfs,
						dft: dft,
						level: level,
						sibling: that.syra_item.nextElementSibling,
						onlyDropFieldOnLevel: true
					}
					let dfsIndex = that.syra_parent_class.getDropFieldIndex(dfs.syra_id);
					let dftIndex = that.syra_parent_class.getDropFieldIndex(dft.syra_id)
					dftIndex = dfsIndex < dftIndex ? dftIndex : dftIndex + 1
					if (dfs && dft && dfs.level !== dft.level) { //&& !that.onlyDropFieldOnLevel(dfs)) {
						//move field to new level
						that.syra_parent_class.createNewLevels(_base.changefieldType.MOVE, dfs, dfsIndex, dftIndex, dft.level);
						params.onlyDropFieldOnLevel = false;
						req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MOVEFIELD}</AT>
<SK>${dfsIndex + 1}</SK><TK>${dftIndex + 1}</TK></ACT> `
						for (let i = 0; i < that.syra_parent_class.dropfieldtemplist.length; i++) {
							req += `<ACT><AT>${_base.requestTypes.LEVELFIELD}</AT><SK>${i + 1}</SK><P1>${that.syra_parent_class.dropfieldtemplist[i].level}</P1></ACT>`;
						}
						req += `</LINES></INTERFL>`
					} else {
						//move field on same level
						that.syra_parent_class.createNewLevels(_base.changefieldType.MOVE, dfs, dfsIndex, dftIndex, dft.level);
						req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MOVEFIELD}</AT>
<SK>${dfsIndex + 1}</SK><TK>${dftIndex + 1}</TK></ACT> </LINES></INTERFL>`
					}
					that.syra_parent_class.makeAjaxCall(_base.requestTypes.MOVEFIELD, null, {
						'params': params
					}, req);
				}
				that.syra_item.classList.remove('draggable-hover-right');
			},
			over: function() {
				that.syra_item.classList.add('draggable-hover-right');
			},
			out: function() {
				that.syra_item.classList.remove('draggable-hover-right');
			},
			accept: function() {
				return true;
			}
		});
	}
	setEvents() {
		let that = this;
		this.syra_item.addEventListener('click', (ev) => {
			this.onClick(ev, that);
		}, false);
	}
	onClick(ev, that) {
		let req;
		let params = {
			dropField: that
		}
		switch (ev.target.getAttribute('id')) {
			case 'dropfieldclose':
				that.syra_parent_class.createNewLevels(_base.changefieldType.DELETE, that);
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.DELETEFIELD}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.DELETEFIELD, null, {
					'params': params
				}, req);
				break;
			case 'dropfieldboundary':
				params.fieldPropertyType = _base.changeFieldProperty.BOUNDS;
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT>
<AT>${_base.requestTypes.CHANGEFIELDPROPERTY}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK>
<P1>${_base.changeFieldProperty.BOUNDS}</P1><P2>${this.boundary === 'Y' ? 'N' : 'Y'}</P2></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.CHANGEFIELDPROPERTY, null, {
					'params': params
				}, req);
				break;
			case 'dropfieldadd':
				params.fieldPropertyType = _base.changeFieldProperty.SUM;
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT>
<AT>${_base.requestTypes.CHANGEFIELDPROPERTY}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK>
<P1>${_base.changeFieldProperty.SUM}</P1><P2>${this.sum === 'Y' ? 'N' : 'Y'}</P2></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.CHANGEFIELDPROPERTY, null, {
					'params': params
				}, req);
				break;
			case 'dropfieldsort':
				params.fieldPropertyType = _base.changeFieldProperty.SORT;
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT>
<AT>${_base.requestTypes.CHANGEFIELDPROPERTY}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK>
<P1>${_base.changeFieldProperty.SORT}</P1><P2>${this.getNextDropFieldSort()}</P2></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.CHANGEFIELDPROPERTY, null, {
					'params': params
				}, req);
				break;
			case 'dropfieldvisible':
				params.fieldPropertyType = _base.changeFieldProperty.VISIBLE;
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT>
<AT>${_base.requestTypes.CHANGEFIELDPROPERTY}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK>
<P1>${_base.changeFieldProperty.VISIBLE}</P1><P2>${this.visible === 'Y' ? 'N' : 'Y'}</P2></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.CHANGEFIELDPROPERTY, null, {
					'params': params
				}, req);
				break;
			case 'dropfieldlabel':
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.MODIFYEXPRESSION}</AT><SK>${that.syra_parent_class.dropfieldlist.indexOf(that) + 1}</SK></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.MODIFYEXPRESSION, null, that, req);
				break;
		}
		ev.preventDefault();
		ev.stopPropagation();
	}
	onDropFieldBoundary() {
		this.boundary === 'Y' ? this.toggleBoundary('N') : this.toggleBoundary('Y');
	}
	toggleBoundary(boundary, grant) {
		this.boundary = boundary;
		this.boundary === 'Y' ? this.dropfieldboundary.classList.remove('half-opacity') : this.dropfieldboundary.classList.add('half-opacity');
		if (grant && grant.Val === 'N')
			$(this.dropfieldboundary).remove();
	}
	onDropFieldSumField() {
		this.sum === 'Y' ? this.toggleSumField('N') : this.toggleSumField('Y');
	}
	toggleSumField(sum, grant) {
		this.sum = sum;
		this.sum === 'Y' ? this.dropfieldadd.classList.remove('half-opacity') : this.dropfieldadd.classList.add('half-opacity');
		if (grant && grant.Val === 'N')
			$(this.dropfieldadd).remove();
	}
	getNextDropFieldSort() {
		switch (this.sort) {
			case 'A':
				return 'D';
			case 'D':
				return 'N';
			case 'N':
				return 'A';
		}
	}
	toggleSort(sort, grant) {
		this.sort = sort;
		this.dropfieldsort.classList.remove('icon-sort-ascending-blue');
		this.dropfieldsort.classList.remove('icon-sort-descending-blue');
		this.dropfieldsort.classList.remove('half-opacity');
		switch (this.sort) {
			case 'A':
				this.dropfieldsort.classList.add('icon-sort-ascending-blue');
				break;
			case 'D':
				this.dropfieldsort.classList.add('icon-sort-descending-blue');
				break;
			case 'N':
				this.dropfieldsort.classList.add('icon-sort-ascending-blue');
				this.dropfieldsort.classList.add('half-opacity');
				break;
		}

		if (grant && grant.Val === 'N')
			$(this.dropfieldsort).remove();
	}
	onDropFieldVisible() {
		this.visible === 'Y' ? this.toggleVisible('N') : this.toggleVisible('Y');
	}
	toggleVisible(visible, grant) {
		this.visible = visible;
		this.visible === 'Y' ? this.dropfieldvisible.classList.remove('half-opacity') : this.dropfieldvisible.classList.add('half-opacity');
		this.visible === 'Y' ? this.dropfieldsort.classList.remove('hide') : this.dropfieldsort.classList.add('hide');
		this.visible === 'Y' ? this.dropfieldadd.classList.remove('hide') : this.dropfieldadd.classList.add('hide');

		if (grant && grant.Val === 'N')
			$(this.dropfieldvisible).remove();
	}
	onlyDropFieldOnLevel(df) {
		let v = 0;
		for (let i = 0; i < this.syra_parent_class.dropfieldlist.length; i++) {
			if (this.syra_parent_class.dropfieldlist[i].syra_id !== df.syra_id && this.syra_parent_class.dropfieldlist[i].level === df.level) {
				v++
				break;
			}
		}
		return v == 0;
	}
	isDirty() {
		return this._isDirty;
	}
	onDirtyChanged(isDirty) {
		this._isDirty = isDirty;
	}
}

exports.DropField = DropField;