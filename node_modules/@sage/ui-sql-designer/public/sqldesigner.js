'use strict';

let _ext = require('@sage/syracuse-ui/lib/extend/extendGateway');
let _base = require('./base');
let JSXml = require('js-xml');
let Toolbar = require('./toolbar').Toolbar;
let Plumb = require('./plumb').Plumb;
let Table = require('./table').Table;
let DropField = require('./dropfield').DropField;

class SQLDesigner {
    constructor(data, context, locale) {
        this.syra_id = 'sqldesigner';
        this.syra_parent_item = context.div;
        this.syra_item = null;
        this.syra_parent_class = parent;
        this._isDirty = false;
        this.load = true;
        this.context = context;
        this.data = data;
        this.connectionCount = 0;
        this.locale = locale;
        this.create();
        this.load = false;
    }
    create() {
        //let docFrag = document.createDocumentFragment();
        let docFrag = this.syra_parent_item;
        this.syra_item = _base.createElement('div', docFrag, 'sqldesigner', null);
        this.syra_item.setAttribute("contenteditable", "false");
        this.data.Config = this.data.Config || `{"ShowCodes":false,"ToolboxPos":{"y":0,"x":0,"length":30},"MapOrigin":{"y":0,"x":0,"length":0},"Build":"1.6.1.17"}`;
        this.config = JSON.parse(this.data.Config);
        this.toolbar = new Toolbar('toolbar', this.syra_item, this, this.config);
        this.sqlworkbench = _base.createElement('div', this.syra_item, 'sqlworkbench', null);
        this.sqlsplitter = _base.createElement('div', this.syra_item, 'sqlsplitter', null);
        this.sqldropfieldbench = _base.createElement('div', this.syra_item, 'sqldropfieldbench', null);
        // this.sqldropfieldbench.style.top = this.data.y + 'px';
        // this.sqldropfieldbench.style.top = this.data.x + 'px';
        // this.sqldropfieldbench.style.width = this.data.length + 'px';
        this.sqldropfieldunorderedlist = _base.createElement('ul', this.sqldropfieldbench, 'sqldropfieldunorderedlist', null);
        this.plumb = new Plumb('plumb', this.syra_item, this);
        this.plumbInstance = this.plumb.plumbInstance;
        this.tablelist = new Array;
        this.dropfieldlist = new Array;
        this.dropfieldtemplist = new Array;
        this.makeDropFieldBenchDroppable(this.sqldropfieldbench);
        this.addTables(this.data);
        this.addDropFields(this.data);
        this.plumbInstance.doWhileSuspended(() => {
            this.addConnections(this.data);
        });
        this.setEvents(true);
        this.localise();
        this.makeSplitterResizable();
        this.context.facet == "$test" ? this.onDirtyChanged(true) : this.onDirtyChanged(false);
        // $(this.sqldropfieldunorderedlist).disableSelection();
        // $(this.sqldropfieldunorderedlist).disableSelection();
        //this.syra_parent_item.appendChild(docFrag);
    }
    makeDropFieldBenchDroppable(dfb) {
        let that = this;
        let req;
        $(dfb).droppable({
            tolerance: 'pointer',
            scope: 'cart-item',
            hoverClass: 'draghover',
            accept: function() {
                return that.dropfieldlist.length == 0;
            },
            drop: function(event, ui) {
                if (ui.draggable[0].tagName.toUpperCase() === 'TR') {
                    let dfnItem = ui.draggable[0].getAttribute('id');
                    let dflItem = $(ui.draggable[0]).children('td').eq(2).text();
                    let level = 1;
                    let params = {
                        dfnItem: dfnItem,
                        dflItem: dflItem,
                        level: level,
                        sibling: null,
                        index: 1
                    }
                    req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.ADDFIELD}</AT><SK>1</SK><P1>${dfnItem}</P1><P2>1</P2></ACT></LINES></INTERFL>`;
                    that.makeAjaxCall(_base.requestTypes.ADDFIELD, null, {
                        'params': params
                    }, req);
                }
            }
        });
    }
    removeAll() {
        this.removeTables();
        this.removeDropFields();
    }
    checkAllConnections() {
        for (let i = 0; i < this.tablelist.length; i++) {
            this.tablelist[i].checkConnections();
        }
    }
    addTables(data) {
        if (data.Tables && data.Tables.Table) {
            if (!data.Tables.Table.length) {
                this.addTable(data.Tables.Table);
            } else {
                for (let i = 0; i < data.Tables.Table.length; i++) {
                    this.addTable(data.Tables.Table[i]);
                }
            }
        }
    }
    addTable(data) {
        this.tablelist.push(new Table(data, this.sqlworkbench, this));
        this.toolbar.addTable(data);
    }
    removeTables() {
        for (let i = this.tablelist.length - 1; i >= 0; i--) {
            this.removeTable(this.tablelist[i]);
        }
    }
    removeTable(table) {
        this.tablelist.splice(this.tablelist.indexOf(table), 1);
        this.toolbar.removeTable(table.syra_item);
        table.removeTable();
    }
    getTable(id) {
        let v = null;
        for (let i = 0; i < this.tablelist.length; i++) {
            if (this.tablelist[i].syra_id === id) {
                v = this.tablelist[i];
                break;
            }
        }
        return v;
        //return this.tablelist.find(t => t.syra_id === id);//does not work ???
    }
    bringTableToFront(id) {
        for (let i = 0; i < this.tablelist.length; i++) {
            if (this.tablelist[i].syra_id === id)
                this.tablelist[i].syra_item.style.zIndex = '4';
            else
                this.tablelist[i].syra_item.style.zIndex = '3';
        }
    }
    addDropFields(data) {
        if (data.DroppedFields && data.DroppedFields.DroppedField) {
            if (!data.DroppedFields.DroppedField.length) {
                this.addDropField(data.DroppedFields.DroppedField);
            } else {
                for (let i = 0; i < data.DroppedFields.DroppedField.length; i++) {
                    this.addDropField(data.DroppedFields.DroppedField[i]);
                }
            }
        }
        if (data.DroppedField) {
            this.addDropField(data.DroppedField);
        }
    }
    addDropField(data, index) {
        let df = new DropField(data, this.sqldropfieldunorderedlist, this);
        if (index)
            this.dropfieldlist.splice(index, 0, df);
        else
            this.dropfieldlist.push(df);
        return df;
    }
    removeDropFields() {
        for (let i = this.dropfieldlist.length - 1; i >= 0; i--) {
            this.removeDropField(this.dropfieldlist[i]);
        }
    }
    removeDropField(dropfield) {
        this.dropfieldlist.splice(this.dropfieldlist.indexOf(dropfield), 1);
        dropfield.removeDropField();
    }
    getDropField(id) {
        let v = null;
        for (let i = 0; i < this.dropfieldlist.length; i++) {
            if (this.dropfieldlist[i].syra_id === id) {
                v = this.dropfieldlist[i];
                break;
            }
        }
        return v;
        //return this.dropfieldlist.find(t => t.syra_id === id);//does not work ???
    }
    buildDropField(dropfieldname, dropfieldlabel, level) {
        return JSON.parse(`{"$":{"Expr":"${dropfieldname}","Lbl":"${dropfieldlabel}","Vis":"Y","Bounds":"Y","Sum":"N","Sort":"A","Level":"${level}"},"Grants":{"Grant":[{"$":{"Prop":"Sort","Val":"Y"}},{"$":{"Prop":"Bounds","Val":"Y"}},{"$":{"Prop":"Sum","Val":"N"}},{"$":{"Prop":"Level","Val":"Y"}}]}}`);
    }
    getDropFieldIndex(id) {
        let v = -1;
        for (let i = 0; i < this.dropfieldlist.length; i++) {
            if (this.dropfieldlist[i].syra_id === id) {
                v = i;
                break;
            }
        }
        return v;
        //return this.tablelist.find(t => t.syra_id === id);//does not work ???
    }
    getCurrentMaxLevel() {
        return this.dropfieldlist.length > 0 ? this.dropfieldlist[this.dropfieldlist.length - 1].level : 1;
    }
    setLevels() {
        for (let i = 0; i < this.dropfieldlist.length; i++) {
            this.dropfieldlist[i].setLevel(this.dropfieldlist[i].newLevel)
        }
    }
    setNewLevel() {
        for (let i = 0; i < this.dropfieldlist.length; i++) {
            this.dropfieldlist[i].setLevel(this.dropfieldlist[i].newLevel)
        }
    }
    getCountPerTable(table) {
        let cnt = 0;
        for (let i = 0; i < this.dropfieldlist.length; i++) {
            if (this.dropfieldlist[i].tablename === table.tablename)
                cnt++;
        }
        return cnt;
    }
    changeFieldProperty(myData) {
        switch (myData.params.fieldPropertyType) {
            case _base.changeFieldProperty.VISIBLE:
                myData.params.dropField.onDropFieldVisible();
                break;
            case _base.changeFieldProperty.BOUNDS:
                myData.params.dropField.onDropFieldBoundary();
                break;
            case _base.changeFieldProperty.SORT:
                myData.params.dropField.toggleSort(myData.params.dropField.getNextDropFieldSort());
                break;
            case _base.changeFieldProperty.SUM:
                myData.params.dropField.onDropFieldSumField();
                break;
            case _base.changeFieldProperty.GROUP:
                break;
            case _base.changeFieldProperty.LEVEL:
                break;
        }
    }

    localise() {

    }
    makeSplitterResizable() {
        let that = this;
        return syra_drag.add({
            handle: that.sqlsplitter,
            topSlot: that.sqlworkbench,
            bottomSlot: that.sqldropfieldbench,
            slot: that.syra_item,
            start: function() {
                syra_dom.getBoundingClientRect(this.slot, this);
                this.startY = this.handle.getBoundingClientRect().top;
            },
            drag: function(event) {
                var newH = this.height + this.top - (that.getMousePos(event).y);
                this.bottomSlot.style.height = (this.newH = newH) + "px";
            },
            stop: function() { }
        });
    }
    getMousePos(e) {
        var pos = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        };
        if (typeof e.clientX === 'number') {
            pos.x = e.clientX;
            pos.y = e.clientY;
        } else if (e.originalEvent.touches) {
            pos.x = e.originalEvent.touches[0].clientX;
            pos.y = e.originalEvent.touches[0].clientY;
        } else
            return null;

        return pos;
    }
    setEvents(bind) {
        var that = this;
        if (that.context && that.context.div) {
            if (bind) {
                $(that.context.div).delegate(that.syra_item, "mousedown keydown", function(event) {
                    that.context.field.page.externalAdapter.onFieldEvent({
                        field: that.context.field,
                        event: event,
                        doEvent: function doEvent() { }
                    });
                    event.stopPropagation();
                });
            }
        } else {
            $(that.context.div).undelegate();
        }
    }
    addConnections(data) {
        if (data.Links && data.Links.Link) {
            if (!data.Links.Link.length) {
                this.addConnection(data.Links.Link.$.Sid, data.Links.Link.$.Tid, data.Links.Link.$.Join, data.Links.Link.$.Id, false);
                this.connectionCount = data.Links.Link.$.Id && parseInt(data.Links.Link.$.Id, 10) ? parseInt(data.Links.Link.$.Id, 10) > this.connectionCount ? parseInt(data.Links.Link.$.Id, 10) : this.connectionCount : this.connectionCount++;
            } else {
                for (let i = 0; i < data.Links.Link.length; i++) {
                    this.addConnection(data.Links.Link[i].$.Sid, data.Links.Link[i].$.Tid, data.Links.Link[i].$.Join, data.Links.Link[i].$.Id, false);
                    this.connectionCount = data.Links.Link[i].$.Id && parseInt(data.Links.Link[i].$.Id, 10) ? parseInt(data.Links.Link[i].$.Id, 10) > this.connectionCount ? parseInt(data.Links.Link[i].$.Id, 10) : this.connectionCount : this.connectionCount++;
                }
            }
        }
        this.plumbInstance.repaintEverything();
        this.checkAllConnections();
    }
    addConnection(source, target, join, x3_id, refresh) {
        let overlays = join === 'I' ? [this.plumb.customDotTargetOverlay, this.plumb.customDotSourceOverlay, this.plumb.customMenuOverlay] : [this.plumb.arrowOverlay, this.plumb.customDotSourceOverlay, this.plumb.customMenuOverlay];
        this.plumbInstance.connect({
            source: source,
            target: target,
            overlays: overlays,
            parameters: {
                'x3_id': x3_id,
                'source_visible': true,
                'target_visible': true,
                'source_scroll': '',
                'target_scroll': '',
                'isShadow': false
            }
        });
        if (refresh)
            this.plumbInstance.repaintEverything();
    }
    removeConnection(myData) {
        if (myData.params.component.getParameter('isShadow')) {
            myData.params.component.getParameter('parentConnection').shadow = null;
            this.plumbInstance.detach(myData.params.component.getParameter('parentConnection'));
            this.plumbInstance.detach(myData.params.component);
        } else {
            this.plumbInstance.detach(myData.params.component);
        }
    }
    changeLinkType(myData) {
        switch (myData.params.linktype) {
            case _base.linkType.INNER_JOIN:
                if (myData.params.realcon.getOverlay('arrow')) {
                    myData.params.realcon.removeOverlay('arrow');
                    myData.params.realcon.addOverlay(this.plumb.customDotTargetOverlay);
                    if (myData.params.shadow) {
                        myData.params.shadow.removeOverlay('arrow');
                        myData.params.shadow.addOverlay(this.plumb.customDotTargetOverlay);
                    }
                }
                break;
            case _base.linkType.LEFT_JOIN:
                if (myData.params.realcon.getOverlay('custom-dot-target')) {
                    myData.params.realcon.removeOverlay('custom-dot-target');
                    myData.params.realcon.addOverlay(this.plumb.arrowOverlay);
                    if (myData.params.shadow) {
                        myData.params.shadow.removeOverlay('custom-dot-target');
                        myData.params.shadow.addOverlay(this.plumb.arrowOverlay);
                    }
                }
                break;
        }
    }
    serialize() {
        let req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES>`;
        for (let i = 0; i < this.tablelist.length; i++) {
            let table = this.tablelist[i];
            if (table.isDirty()) {
                req += `<ACT><AT>${_base.requestTypes.PLACETABLE}</AT><SK>${table.syra_id}</SK><P1>${parseInt(table.syra_item.style.left, 10)}</P1>
				<P2>${parseInt(table.syra_item.style.top, 10)}</P2><P3>${parseInt(table.syra_item.style.width, 10)}</P3><P4>${parseInt(table.syra_item.style.height, 10)}</P4></ACT>`;
            }
        }
        if (this.toolbar.isDirty()) {
            this.config.ToolboxPos.length = parseInt(this.toolbar.syra_item.style.width, 10);
            this.config.ToolboxPos.x = parseInt(this.toolbar.syra_item.style.left, 10);
            this.config.ToolboxPos.y = parseInt(this.toolbar.syra_item.style.top, 10);
        }
        req += `<ACT><AT>${_base.requestTypes.SAVECONFIG}</AT><P1>${JSON.stringify(this.config)}</P1></ACT></LINES></INTERFL>`;
        return req;
    }
    makeAjaxCall(requestType, callback, myData, request) {
        let self = this;
        if (!callback)
            callback = this.fxOnStdSvcDone;

        let _result = function _result(res) {
            let err = !res ? {
                "$message": "error"
            } : res.$diagnoses || null;
            let reply = {};
            if (!err) {
                // reply.data = self.wrapper.rawData;
                reply.result = {
                    "data": res.argsModified[0],
                    "$diagnoses": {
                        "$message": res.argsModified[1],
                        "$severity": res.argsModified[2]
                    },
                    "status": res.argsModified[3]
                };
            }
            self.fxOnStdSvcDone(requestType, err, reply, myData);
        };

        _ext.classic.onBlockExRpc(this.context, "AINTERFL", [request], {
            isErrorIgnore: true,
            callback: _result,
            onError: function onError() {
                _result({
                    "argsModified": ["", [""],
                        [""], 1
                    ]
                });
            }
        });
    }
    fxOnStdSvcDone(requestType, err, reply, myData) {
		/**
		 * Format : xdata="<X3PORTAL><Data><Result><vv>www</vv><xx>yyy</xx></Result><Message><Mess>xxxx</Mess></Message></Data></X3PORTAL>"
		 *          or
		 *          xdata="<X3PORTAL>...full data flow...</X3PORTAL>"
		 */
        let preserveNL = false,
            xmlResult = [],
            xmlMess = [],
            i,
            len,
            diagnoses,
            severity,
            dataRes = false,
            arrayRes = true,
            ptlTag = "X3PORTAL>",
            messTag = "Messages>";
        if (err) {
            // this.fxOnError(err);
        } else {
            if (reply.result) {
                if (!reply.result.data) {
                    xmlResult = ["<", ptlTag, "</", ptlTag];
                } else {
                    dataRes = true;
                }
                if ((diagnoses = reply.result.$diagnoses) && (len = diagnoses.$message.length) > 0) {
                    for (i = 0; i < len; i++) {
                        if (diagnoses.$message[i]) {
                            severity = diagnoses.$severity[i] == 3 ? "Error" : "Warning";
                            xmlMess.push("<", severity, ">", "<Mes>", diagnoses.$message[i], "</Mes>", "</", severity, ">");
                        }
                    }
                    if (xmlMess.length > 0) {
                        severity = "<" + ptlTag;
                        if (!dataRes || (i = reply.result.data.indexOf(severity, 0)) < 0) {
                            xmlResult = ["<", ptlTag, "<", messTag].concat(xmlMess, ["</", messTag, "</", ptlTag]);
                            dataRes = false;
                        } else
                            if (i >= 0) {
                                i += severity.length;
                                reply.result.data = [reply.result.data.substr(0, i), (["<", messTag].concat(xmlMess, ["</", messTag])).join(""), reply.result.data.substr(i + 1)].join("");
                            }
                        preserveNL = true;
                    }
                }
            } else
                if (reply.data) {
                    arrayRes = false;
                    //xmlResult = this._processDataIn(reply.data, null);
                }
            let jsonX, data, error;
            if (xmlResult.length > 0 || dataRes) {
                jsonX = JSXml.parse(dataRes ? reply.result.data : arrayRes ? xmlResult.join("") : xmlResult);
                data = jsonX.X3PORTAL.Data && jsonX.X3PORTAL.Data.Result ? jsonX.X3PORTAL.Data.Result : null;
                error = jsonX.X3PORTAL.Messages && jsonX.X3PORTAL.Messages.Error ? jsonX.X3PORTAL.Messages.Error : null;
                if (error) {
                    let opts = {
                        $title: "Field error ",
                        $message: jsonX.X3PORTAL.Messages.Error.Mes,
                        $type: "error"
                    }
                    syra_alert.modal(opts);
                } else {
                    switch (requestType) {
                        case _base.requestTypes.ADDTABLE:
                            if (data) {
                                this.addTables(data);
                                this.addConnections(data);
                            }
                            break;
                        case _base.requestTypes.DELETETABLE:
                            if (myData) {
                                this.removeTable(myData.params.table);
                            }
                            break;
                        case _base.requestTypes.CREATELINK:
                            this.addConnection(myData.s, myData.t, 'L', this.connectionCount++, true);
                            break;
                        case _base.requestTypes.DELETELINK:
                            if (myData)
                                this.removeConnection(myData);
                            break;
                        case _base.requestTypes.LINKTYPE:
                            if (myData)
                                this.changeLinkType(myData);
                            break;
                        case _base.requestTypes.ENTEREXPRESSION:
                            if (data)
                                this.addDropFields(data);
                            break;
                        case _base.requestTypes.MODIFYEXPRESSION:
                            if (data && data.DroppedField && myData) {
                                let df = this.addDropField(data.DroppedField, this.dropfieldlist.indexOf(myData));
                                this.sqldropfieldunorderedlist.insertBefore(df.syra_item, myData.syra_item);
                                this.removeDropField(myData);
                            }
                            break;
                        case _base.requestTypes.ADDFIELD:
                            if (myData) {
                                let df = this.addDropField(this.buildDropField(myData.params.dfnItem, myData.params.dflItem, myData.params.level), myData.params.index);
                                this.sqldropfieldunorderedlist.insertBefore(df.syra_item, myData.params.sibling);
                            }
                            break;
                        case _base.requestTypes.MOVEFIELD:
                            if (myData) {
                                myData.params.dfs.syra_item.removeAttribute("style");
                                for (let i = 0; i < this.dropfieldlist.length; i++) {
                                    this.dropfieldlist[i] = this.dropfieldtemplist[i];
                                    this.dropfieldlist[i].setLevel(this.dropfieldtemplist[i].level);
                                }
                                if (myData.params.sibling)
                                    this.sqldropfieldunorderedlist.insertBefore(myData.params.dfs.syra_item, myData.params.sibling);
                                else
                                    $(this.sqldropfieldunorderedlist).append(myData.params.dfs.syra_item)
                            }
                            break;
                        case _base.requestTypes.DELETEFIELD:
                            if (myData) {
                                this.removeDropField(myData.params.dropField);
                                myData.params.dropField.syra_item.removeAttribute("style");
                                for (let i = 0; i < this.dropfieldlist.length; i++) {
                                    this.dropfieldlist[i].setLevel(this.dropfieldtemplist[i].level);
                                }
                            }
                            break;
                        case _base.requestTypes.CHANGEFIELDPROPERTY:
                            if (myData) {
                                this.changeFieldProperty(myData);
                            }
                            break;
                        case _base.requestTypes.DELETEALL:
                            this.removeAll();
                            break;
                        default:
                    }
                }
            } else {
                // this.fxOnError({
                // 	"$message": "TO TRANSLATE : Bad response from server",
                // 	"$severity": "error"
                // });
            }
        }
    }
    createNewLevels(changefieldType, dfs, dfsIndex, dftIndex, dfNewLevel, createNewLevel) {
        createNewLevel = createNewLevel || false;
        let levelHld = 1;
        let moveLevel = false

        if (this.dropfieldtemplist)
            this.dropfieldtemplist = null;
        this.dropfieldtemplist = new Array();

        for (let i = 0; i < this.dropfieldlist.length; i++) {
            //create list excluding moved/deleted field
            if (this.dropfieldlist[i].syra_id !== dfs.syra_id) {
                this.dropfieldtemplist.push(this.dropfieldlist[i]);
            }
        }
        if (changefieldType === _base.changefieldType.MOVE) {
            dfsIndex = dfsIndex >= dftIndex ? dftIndex : dftIndex - 1;
            this.dropfieldtemplist.splice(dfsIndex, 0, dfs);
            this.dropfieldtemplist[dfsIndex].level = parseInt(dfNewLevel, 10);
        }
        //fix levels
        for (let i = 0; i < this.dropfieldtemplist.length; i++) {
            if (this.dropfieldtemplist[i].level - levelHld == 2)
                moveLevel = true;
            if (moveLevel)
                this.dropfieldtemplist[i].level = parseInt(this.dropfieldtemplist[i].level, 10) - 1;
            levelHld = this.dropfieldtemplist[i].level;
        }
        if (createNewLevel) {
            for (let i = dfsIndex + 1; i < this.dropfieldtemplist.length; i++) {
                this.dropfieldtemplist[i].level = parseInt(this.dropfieldtemplist[i].level, 10) + 1;
            }
        }
    }
    setInputFocus() {
        this.onDirtyChanged(true);
        return true;
    }
    isDirty() {
        return this._isDirty;
    }
    onDirtyChanged(isDirty) {
        if (this.load || this.isDirty() != isDirty) {
            this._isDirty = isDirty;
            for (let i = 0; i < this.tablelist.length; i++) {
                this.tablelist[i].dragEnableChange(isDirty);
                //Clean Records
                if (!isDirty)
                    this.tablelist[i].onDirtyChanged(isDirty);
            }
            for (let i = 0; i < this.dropfieldlist.length; i++) {
                this.dropfieldlist[i].dragEnableChange(isDirty);
                //Clean Records
                if (!isDirty)
                    this.dropfieldlist[i].onDirtyChanged(isDirty);
            }
            this.toolbar.dragEnableChange(isDirty);
            //Clean Records
            if (!isDirty)
                this.toolbar.onDirtyChanged(isDirty);
        }
        $('.ui-state-disabled').removeClass('ui-state-disabled');
        $('.aria-disabled').removeClass('aria-disabled');
    }
    resize() {
        for (let i = 0; i < this.tablelist.length; i++) {
            this.tablelist[i].onResizeStop();
        }
    }
    dispose() {
        this.setEvents(false);
        //this.syra_item.remove();
        $(this.syra_item).remove();
    }
}

exports.SQLDesigner = SQLDesigner;