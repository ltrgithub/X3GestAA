'use strict';

let _base = require('./base');

class Toolbar {
    constructor(id, parent, parent_class, data) {
        this.syra_id = id;
        this.syra_parent_item = parent;
        this.syra_item = null;
        this.syra_parent_class = parent_class;
        this._isDirty = false
        this.data = data;
        this.create();
        this.makeDraggable();
        this.setEvents();
    }
    create() {
        let toolboxPos = this.data && this.data.ToolboxRect ? this.data.ToolboxRect : this.data.ToolboxPos;
        this.syra_item = this.syra_item = _base.createElement('div', this.syra_parent_item, this.syra_id, 'toolbar');
        this.syra_item.style.left = toolboxPos.x + 'px';
        this.syra_item.style.top = toolboxPos.y + 'px';
        //this.syra_item.style.width = toolboxPos.length + 'px';
        _base.createElement('div', this.syra_item, 'toolbar-grip');
        let el = _base.createElement('a', this.syra_item, 'toolbar-add-table', 'toolbar-btn');
        el.setAttribute('href', '#');
        el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_toolbarAddTable);
        el = _base.createElement('a', this.syra_item, 'toolbar-add-expression', 'toolbar-btn');
        el.setAttribute('href', '#');
        el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_toolbarAddExpression);
        el = _base.createElement('a', this.syra_item, 'toolbar-delete-all', 'toolbar-btn');
        el.setAttribute('href', '#');
        el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_toolbarDeleteAll);
        el = _base.createElement('a', this.syra_item, 'toolbar-recenter', 'toolbar-btn');
        el.setAttribute('href', '#');
        el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_toolbarrRecenter);
        this.dropdown = _base.createElement('select', this.syra_item, 'toolbar-dropdown', 'toolbar-dropdown');
        _base.createElement('option', this.dropdown, 'disabled', 'selected disabled').setAttribute('value', '0');
        this.dropdown.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_toolbarCenterDisplay);
        this.syra_item.style.width = this.data.length + 'px';
    }
    addTable(data) {
        _base.createElement('option', this.dropdown, `option${data.$.Id}`, 'toolbar-dropdown-item', data.$.Lbl).setAttribute('value', data.$.Id);
    }
    removeTable(item) {
        $(`#option${item.getAttribute('id')}`).remove();
    }
    makeDraggable() {
        let that = this;
        $(this.syra_item).draggable({
            handle: '#toolbar-grip',
            containment: '#sqldesigner',
            cursorAt: {
                left: 0,
                top: 0
            },
            cursor: 'move',
            distance: 10,
            delay: 100,
            start: function(event, ui) {
                that.syra_item.classList.add('drag-shadow');
            },
            stop: function(event, ui) {
                that.onDirtyChanged(true);
                that.syra_item.classList.remove('drag-shadow');
            }
        });
        // $(this.syra_item).draggable('disable');
    }
    dragEnableChange(enable) {
        $(this.syra_item).draggable({
            disabled: !enable
        });
    }
    setEvents() {
        let that = this;
        this.syra_item.addEventListener('click', function(ev) {
            that.onClick(ev, this);
        }, false);
        //flash the table to find it
        this.dropdown.addEventListener('change', function(ev) {
            that.onChange(ev, this);
        }, false);
    }
    onChange(ev, that) {
        let t = this.syra_parent_class.getTable(that.value);
        if (t) {
            this.syra_parent_class.sqlworkbench.scrollLeft = parseInt(t.syra_item.style.left, 10);
            this.syra_parent_class.sqlworkbench.scrollTop = parseInt(t.syra_item.style.top, 10);
            t.flash();
        }
        ev.preventDefault();
        ev.stopPropagation();
    }
    onClick(ev) {
        let req;
        switch (ev.target.getAttribute('id')) {
            case 'toolbar-add-table':
                req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.ADDTABLE}</AT></ACT></LINES></INTERFL>`;
                this.syra_parent_class.makeAjaxCall(_base.requestTypes.ADDTABLE, null, null, req);
                break;
            case 'toolbar-add-expression':
                req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.ENTEREXPRESSION}</AT><SK>12</SK></ACT></LINES></INTERFL>`;
                this.syra_parent_class.makeAjaxCall(_base.requestTypes.ENTEREXPRESSION, null, null, req);
                break;
            case 'toolbar-delete-all':
                req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.DELETEALL}</AT></ACT></LINES></INTERFL>`;
                this.syra_parent_class.makeAjaxCall(_base.requestTypes.DELETEALL, null, null, req);
                break;
            case 'toolbar-recenter':
                this.syra_parent_class.sqlworkbench.scrollLeft = 0;
                this.syra_parent_class.sqlworkbench.scrollTop = 0;
                break;
            default:
                return;
        }
        ev.preventDefault();
        ev.stopPropagation();
    }
    isDirty() {
        return this._isDirty;
    }
    onDirtyChanged(isDirty) {
        this._isDirty = isDirty;
    }
}

exports.Toolbar = Toolbar;