'use strict';

let _ext = require('@sage/syracuse-ui/lib/extend/extendGateway');
let JSXml = require('js-xml');
let _locale = require('streamline-locale');
let SQLDesigner = require('./sqldesigner').SQLDesigner;
let sqlDesigner;

exports.create = function(context) {
	context = context || {};
	let self = this;
	context.prototype.$properties = context.prototype.$item && context.prototype.$item.$properties;
	this.domItem = context.div;
	this.locale = _locale.resources(module)();
	return {
		resize: function resize() {
			var self = this;
			context.div.style.height = parseInt(_ext.page.getBodySize(context).height, 10) - 170 + "px";
			if (sqlDesigner) {
				clearTimeout(self.resizeTimeout);
				self.resizeTimeout = setTimeout(function() {
					sqlDesigner.syra_item.style.height = context.div.style.height;
					sqlDesigner.resize();
				}, 200);
			}
		},
		getValue: function getValue() {
			if (sqlDesigner)
				return sqlDesigner.serialize();
			return null;
		},
		getInputValue: function getValue() {
			if (sqlDesigner)
				return sqlDesigner.serialize();
			return null;
		},
		setValue: function setValue(data) {
			if (data) {
				this.dataset = data;
				let jsonX = JSXml.parse(data)
				let linedata = jsonX.X3PORTAL.Data.Lines;
				if (sqlDesigner) {
					sqlDesigner.dispose();
					sqlDesigner = null;
				}
				sqlDesigner = new SQLDesigner(linedata, context, self.locale);
			}
		},
		setInputFocus: function(select) {
			if (sqlDesigner) {
				sqlDesigner.setInputFocus(select);
			}
		},
		isDirty: function() {
			return sqlDesigner.isDirty();
		},
		onDirtyChanged: function(isDirty) {
			sqlDesigner.onDirtyChanged(isDirty);
		},
		dispose: function() {
			if (sqlDesigner) {
				sqlDesigner.dispose();
				sqlDesigner = null;
			}
		}
	};

};