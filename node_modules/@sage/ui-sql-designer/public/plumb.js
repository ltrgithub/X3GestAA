'use strict';

let _base = require('./base');
let jsPlumb = require('./deps/jsPlumb-2.1.7');

class Plumb {
	constructor(id, parent, parent_class) {
		this.syra_id = id
		this.syra_parent_item = parent;
		this.syra_item = null;
		this.syra_parent_class = parent_class;
		this._isDirty = false;
		this.setupPaintStyles();
		this.plumbInstance = window.jsp = jsPlumb.getInstance(this.getDefaults());
		this.setupOverlays();
		this.setup();
	}
	getDefaults() {
		return {
			Anchor: ['Continuous', [
				[0, 0.5, -1, 0, -2, 0],
				[1, 0.5, 1, 0, 3, 0]
			]],
			Container: this.syra_parent_class.sqlworkbench,
			ConnectionsDetachable: false,
			Connector: ['Straight', {
				stub: 30,
				gap: 1,
				alwaysRespectStubs: true
			}],
			// Connector: ['Flowchart', {
			//     stub: [10, 10],
			//     gap: 3,
			//     cornerRadius: 0,
			//     alwaysRespectStubs: true
			// }],
			DragOptions: {
				cursor: 'pointer',
				zIndex: 2000
			},
			EndpointStyle: ['Blank', 'Blank'],
			HoverPaintStyle: this.hoverStyle,
			// EndpointHoverStyle: {fillStyle: "#ec9f2e" },
			PaintStyle: this.paintStyle
		};
	}
	setupPaintStyles() {
		this.hoverStyle = {
			lineWidth: 2,
			fillStyle: '#285DC8',
			strokeStyle: '#285DC8'
			//outlineWidth: 2
		};
		this.paintStyle = {
			fillStyle: '#D8D9DC',
			strokeStyle: '#D8D9DC',
			radius: 4,
			lineWidth: 2
		};
	}
	createPopupMenu(params) {
		var realcon = params.component.getParameter('isShadow') ? params.component.getParameter('parentConnection') : params.component;
		this.popupmenu = _base.createElement('div', this.syra_parent_item, null, 'popup-menu');
		let el;
		if (realcon.getOverlay('arrow')) {
			el = _base.createElement('a', this.popupmenu, _base.linkType.INNER_JOIN, null, this.syra_parent_class.locale.sqlDesigner_linkInnerJoin);
			el.setAttribute('href', '#');
			el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_linkInnerJoin);
		} else {
			el = _base.createElement('a', this.popupmenu, _base.linkType.LEFT_JOIN, null, this.syra_parent_class.locale.sqlDesigner_linkLeftJoin);
			el.setAttribute('href', '#');
			el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_linkLeftJoin);
		}
		el = _base.createElement('a', this.popupmenu, _base.requestTypes.DELETELINK, null, this.syra_parent_class.locale.sqlDesigner_linkRemove);
		el.setAttribute('href', '#');
		el.setAttribute('title', this.syra_parent_class.locale.sqlDesigner_linkRemove);
		this.setEvents(params);
		this.popupmenu.style.left = params.getElement().style.left;
		this.popupmenu.style.top = params.getElement().style.top;
	}
	setEvents(params) {
		let that = this;
		// this.syra_parent_item.addEventListener('click', (ev) => {
		// 	this.onClick(ev, that, params);
		// }, false);
		this.clickit = (ev) => {
			this.onClick(ev, that, params);
		}
		this.syra_parent_item.addEventListener('click', this.clickit, false);
	}
	onClick(ev, that, params) {
		let shadow = params.component.getParameter('isShadow') ? params.component : params.component.shadow;
		let realcon = params.component.getParameter('isShadow') ? params.component.getParameter('parentConnection') : params.component;
		params.shadow = shadow;
		params.realcon = realcon;
		params.linktype = ev.target.getAttribute('id');
		let req;
		switch (params.linktype) {
			case _base.linkType.INNER_JOIN:
			case _base.linkType.LEFT_JOIN:
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.LINKTYPE}</AT>
					<SK>${realcon.getParameter('x3_id')}</SK><P1>${params.linktype}</P1></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.LINKTYPE, null, {
					'params': params
				}, req);
				break;
			case _base.requestTypes.DELETELINK:
				req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.DELETELINK}</AT><SK>${realcon.getParameter('x3_id')}</SK></ACT></LINES></INTERFL>`
				that.syra_parent_class.makeAjaxCall(_base.requestTypes.DELETELINK, null, {
					'params': params
				}, req);
				break;
			// default:					
		}
		if (!ev.target.classList.contains('edit-connection-btn-blue')) {
			let pop = document.getElementsByClassName('popup-menu');
			for (let i = 0; i < pop.length; i++) {
				$(pop).remove();
			}
			this.syra_parent_item.removeEventListener('click', this.clickit, false);
		}
		ev.preventDefault();
		ev.stopPropagation();
	}
	setupOverlays() {
		let that = this;
		this.arrowOverlay = ['Arrow', {
			id: 'arrow',
			location: 1,
			length: 10,
			width: 10
		}];
		//inner join
		this.customDotTargetOverlay = ['Custom', {
			id: 'custom-dot-target',
			location: -5,
			// length: 10,
			// width: 10,
			create: function() {
				return $('<div><i class = "custom-dot"></i></div>');
			}
		}];
		this.customDotSourceOverlay = ['Custom', {
			id: 'custom-dot-source',
			location: 5,
			// length: 10,
			// width: 10,
			create: function() {
				return $('<div><i class = "custom-dot"></i></div>');
			}
		}];
		this.customMenuOverlay = ['Custom', {
			thisOverlay: this,
			id: 'custom-menu-overlay',
			location: 0.5,
			create: function() {
				return $('<div><i class = "edit-connection-btn"></i></div>');
			},
			events: {
				'click': (params) => {
					that.createPopupMenu(params);
				}
			}
		}];
		this.sourceConnection = {
			// paintStyle: paintStyle,
			// hoverPaintStyle: endpointHoverStyle,
			filter: function(event) {
				return !that.hasClass(event.currentTarget.className, 'source-target') && !this.hasClass(event.currentTarget.className, 'source');
			}
		};
	}
	hasClass(classes, cls) {
		return (' ' + classes + ' ').indexOf(' ' + cls + ' ') > -1;
	}
	setup() {
		let that = this;
		this.plumbInstance.bind('connection', function(info) {
			that.setupConnectionEvents(info.connection);
		});
	}
	setupConnectionEvents(connection) {
		connection.bind('mouseover', function(ob) {
			var conn = ob.type ? ob.component : ob;
			var connItem = conn.getOverlay('custom-dot-source').getElement();
			connItem.childNodes[0].classList.remove('custom-dot');
			connItem.childNodes[0].classList.add('custom-dot-blue');
			if (conn.getOverlay('custom-dot-target')) {
				connItem = conn.getOverlay('custom-dot-target').getElement();
				connItem.childNodes[0].classList.remove('custom-dot');
				connItem.childNodes[0].classList.add('custom-dot-blue');
			}
			connItem = conn.getOverlay('custom-menu-overlay').getElement();
			connItem.childNodes[0].classList.remove('edit-connection-btn');
			connItem.childNodes[0].classList.add('edit-connection-btn-blue');
		});
		connection.bind('mouseout', function(ob) {
			var conn = ob.type ? ob.component : ob;
			var connItem = conn.getOverlay('custom-dot-source').getElement();
			connItem.childNodes[0].classList.remove('custom-dot-blue');
			connItem.childNodes[0].classList.add('custom-dot');
			if (conn.getOverlay('custom-dot-target')) {
				connItem = conn.getOverlay('custom-dot-target').getElement();
				connItem.childNodes[0].classList.remove('custom-dot-blue');
				connItem.childNodes[0].classList.add('custom-dot');
			}
			connItem = conn.getOverlay('custom-menu-overlay').getElement();
			connItem.childNodes[0].classList.remove('edit-connection-btn-blue');
			connItem.childNodes[0].classList.add('edit-connection-btn');
		});
		// connection.bind('contextmenu', function(ob, originalEvent) {});
	}
	isDirty() {
		return this._isDirty;
	}
	onDirtyChanged(isDirty) {
		this._isDirty = isDirty;
	}
}
exports.Plumb = Plumb;