#!groovy

node {
    def runBuild = false;
    if("${BRANCH_NAME}" == 'integration' || "${BRANCH_NAME}" =~ /^release\//) {
        runBuild = true;
    }

    if (runBuild == true) {
        print "Build for branch: " + "${BRANCH_NAME}")
        git url: 'https://github.com/Sage-ERP-X3/Syracuse.git', credentialsId: 'sagex3ci', branch: "${BRANCH_NAME}", doGenerateSubmoduleConfigurations: true
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sagex3ci', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
            docker.image('node:6').inside {
                sh ('echo "https://$GIT_USERNAME:$GIT_PASSWORD@github.com" >> ~/.git-credentials && git config --replace-all --global credential.https://github.com/Sage-ERP-X3/Syracuse.git sagex3ci && git config --replace-all --global credential.helper store --file')
                stage('Build syracuse-react') {
                    def reactCommitMessage = "Automated build of syracuse-react"; 
                    def latestCommitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B -- node_modules/@sage/syracuse-react').trim();
                    if (latestCommitMessage == reactCommitMessage)
                    {
                        sh('echo "Build of syracuse-react skipped, no new commits"')
                    }
                    else 
                    {
                        sh ('rm -rf node_modules/@sage/syracuse-react/dist/*')
                        sh ('npm install -g npm@5')
                        sh ('cd node_modules/@sage/syracuse-react && npm install && npm prune && npm run dist')
                        sh ('git status')
                        sh ('git config --global user.email sagex3ci@sage.com')
                        sh ('git config --global user.name "Jenkins"')                    
                        sh ('git add node_modules/@sage/syracuse-react/dist/**')
                        sh ("git commit -m '"+ reactCommitMessage + "'")
                        sh ('git push origin ' + "${BRANCH_NAME}")
                    }
                }
            }
        }
    } else {
        print "Skip build for branch: " + "${BRANCH_NAME}") 
    }
}