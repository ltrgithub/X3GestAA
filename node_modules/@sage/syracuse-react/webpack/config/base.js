"use strict";

var path = require('path');
var Webpack = require('webpack');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
var buildTimeStampBanner = require('./buildtime').buildTimeStampBanner;
var fs = require("fs");

var nodelocal = path.resolve(__dirname, "../../../../../nodelocal");
var config = null;
if (fs.existsSync(nodelocal + ".js")) {
	config = require(nodelocal).config;
}
var devMode = (config && config.react && config.react.devMode);
if (devMode) {
	console.log("***********************************************");
	console.log("* Using local development build output folder *");
	console.log("***********************************************");

}
var distDir = devMode ? "devTemp" : "dist";

var config = {
	stats: {
		"errors-only": true,
		// Avoid extract-text-webpack-plugin dumping 1000ds of lines of debug code
		"children": false
	},
	context: path.resolve(__dirname, '../../src'),
	/*
	app.ts is entry point of application. Webpack will recursively 
	go through reuire statements
	*/
	entry: "./application/application.tsx",

	/*
	Combination of path and filename tells webpack where and what 
	to name bundled output file
	*/
	output: {
		path: path.resolve(__dirname, "../../" + distDir + "/"),
		publicPath: '../../' + distDir + '/'
			// ,
			// filename: "app.js"
	},

	/*
	resolve tell webpack what type of files to use in require
	*/
	resolve: {
		extensions: ['.ts', '.js', '.json', '.tsx', 'less'],
		/*
         * MW 2017-03-29: Could be used to require "old" modules directly so they are bundled with webpack
         * unfortunately, the shadow-modules ones are not perfectly structured and have dependencies which will
         * not resolve/work for client side
        modules: [
        	"node_modules",
        	path.resolve(__dirname, "../../../../node_modules"),
        	path.resolve(__dirname, "../../../../shadow-modules/win32-x64-v8-5.1/node_modules"),
    	]
    	*/
	},
	/*
	Each loader needs a regex test that goes through each of the files 
	and finds all the files that pass the test. Then it will apply 
	the loader to that file
	*/
	module: {
		rules: [{
			test: /\.tsx?$/,
			use: [{
				loader: "babel-loader"
			}, {
				loader: "ts-loader"
			}],
			exclude: path.resolve(__dirname, "./node_modules/")
		}, {
			test: /\.jpeg|gif|jpg|png$/,
			loader: "file-loader?name=/styles/assets/images/[name].[ext]"
		}, {
			test: /\.svg/,
			use: {
				loader: 'svg-url-loader',
				options: {
					limit: 1
				}
			}
		}, {
			test: /\.less$/,
			use: ExtractTextPlugin.extract({
				fallback: 'style-loader',
				use: ['css-loader', 'less-loader']
			}),
			exclude: path.resolve(__dirname, "./node_modules/")
		}]
	},
	plugins: [
		// Since we develop on windows, we may run into issue when building on linux later
		// this plugin ensures path are resolved case sensitive all the time
		// so we notice issues on windows too
		new CaseSensitivePathsPlugin(),

		new Webpack.ProvidePlugin({
			"React": "react",
			"ReactDOM": "react-dom"
		}),

		new Webpack.BannerPlugin({
			banner: buildTimeStampBanner,
			raw: true,
			entryOnly: true
		})
	]
};
module.exports = config;