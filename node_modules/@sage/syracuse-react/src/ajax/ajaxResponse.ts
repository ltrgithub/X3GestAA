"use strict";
import { getLocalString } from '../culture/localString';
import * as Sdata from '../dataStore/sdata';
import { Ajax } from './ajax';

function parseHeaders(xhr: JQueryXHR): any {
    let headers: any = {};
    let httpHeader = xhr.getAllResponseHeaders();
    if ((httpHeader = httpHeader.trim())) {
        let parts = httpHeader.split("\n");
        for (let part of parts) {
            let header = part.trim();
            if (header) {
                let separatorIndex = header.indexOf(":");
                headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
            }
        }
    }
    return headers;
}

export class Response {
    readonly status: number;
    readonly ok: boolean;
    readonly url: string;
    private _headers: any;
    private _error: ResponseError;

    constructor(private request: Ajax, xhr: JQueryXHR, readonly data: any, ok: boolean, errorThrown?: any) {
        this._headers = parseHeaders(xhr);
        this.status = xhr.status;
        this.url = request.url;
        if (this.status == 0 && xhr.statusText === "abort") {
            request.props.isAborted = true;
        }
        else {
            this.ok = ok;
            if (!ok) {
                this._error = new ResponseError(request, this.headers, xhr, errorThrown);
            }
        }
    }
    get ajax(): Ajax {
        return this.request;
    }
    get aborted(): boolean {
        return this.request.props.isAborted;
    }
    get headers(): any {
        return this._headers;
    }
    get error(): ResponseError {
        return this._error;
    }
    dispose() {
        this.error && this._error.dispose();
        this._headers = this._error = null;
    }
}

export class ResponseError {
    diagnoses: Sdata.IDiagnose[];
    jsonData: any;
    readonly data: any;

    constructor(private request: Ajax, headers: any, private xhr: JQueryXHR, errorThrown?: any) {
        this.data = xhr.responseText
        if (this.data && this.data.length) {
            if ((headers["content-type"] && headers["content-type"] === "application/json")
                || this.data.indexOf("diagnoses") >= 0) {
                this.jsonData = JSON.parse(this.data);
                this.diagnoses = this.jsonData.$diagnoses || this.jsonData.diagnoses;
            }
        }

        let authenticateMethode = headers["www-authenticate"];
        if (authenticateMethode) {
            authenticateMethode = ((authenticateMethode.split(" ")[0]) || "").toLowerCase();
        }
        if (!this.diagnoses && errorThrown) {
            if (errorThrown.message) {
                this.diagnoses = this.diagnoses || [{
                    $message: errorThrown.message,
                    $stackTrace: errorThrown.stackTrace
                }];
            }
        }
        this.diagnoses = this.diagnoses || [{
            $message: getLocalString("default_err_msg"),
            $stackTrace: this.data
        }];
        if (xhr.status == 400 && authenticateMethode) {
            let next = this.jsonData && this.jsonData.$location && this.jsonData.$location.$url;
            if (next) {
                window.location.href = (next || "/index.html") + "?callbackUrl=" + encodeURIComponent(window.location.href);
            }
        }
    }
    dispose() {
        this.request = this.xhr = null;
    }
}