"use strict";

export class UploadResponse {
    readonly status: number;
    readonly success: any;
    readonly error: any;
    constructor(xhr: XMLHttpRequest) {
        this.status = xhr.status;
        let data = (xhr.response && (typeof xhr.response !== "object")) ? JSON.parse(xhr.response) : xhr.response
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223) {
            this.success = data;
        }
        else {
            this.error = data;
        }
    }
}

export class Uploader {
    private xhr: XMLHttpRequest;
    private reader: FileReader;
    private _onEnd: (response: UploadResponse) => void;

    constructor(readonly url: string,
        readonly file: any,
        readonly contentType: string,
        private onProgress: (progress: number, loaded: boolean) => void) {
    }
    abort(){
        this.xhr.abort();
    }
    upload(onEnd: (response: UploadResponse) => void) {
        this._onEnd = onEnd;

        this.xhr = new XMLHttpRequest();
        this.xhr.open("PUT", this.url);
        this.xhr.setRequestHeader("accept", "application/json;vnd.sage=syracuse");
        this.xhr.setRequestHeader("content-type", this.contentType || "application/octet-stream");
        this.xhr.setRequestHeader("x-file-name", encodeURIComponent(this.file.name));

        this.xhr.onreadystatechange = this.handleOnreadystatechange;

        this.xhr.upload.addEventListener("progress", this.handleProgress, false);
        this.xhr.upload.addEventListener("load", this.handleLoad, false);
        this.reader = new FileReader();
        this.reader.onload = this.handleReaderOnLoad;
        this.reader.readAsArrayBuffer(this.file);
    }
    private handleOnreadystatechange = () => {
        if (this.xhr.readyState == 4) {
            // IE misinterpret 204 as 1223
            this._onEnd && this._onEnd(new UploadResponse(this.xhr));
        }
    }
    private handleProgress = (event: ProgressEvent) => {
        if (event.lengthComputable) {
            this.onProgress(Math.round((event.loaded * 100) / event.total), false);
        }
    }
    private handleLoad = () => {
        this.onProgress(100, true);
    }
    private handleReaderOnLoad = (event: Event) => {
        this.xhr.send((event.target as any).result);
    }
    dispose() {
        if (this.xhr) {
            this.xhr.onreadystatechange = null;
            if (this.onProgress) {
                this.xhr.upload.removeEventListener("progress", this.handleProgress);
                this.xhr.upload.removeEventListener("load", this.handleLoad);
            }
            if (this.reader) {
                this.reader.onload = null;
            }
            this.xhr = this.reader = this.onProgress = this._onEnd = null;
        }
    }
}