"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as overHelper from '../overHelper';
import './tip.less';

const DELAY = 300;

export interface ITip {
    className?: string,
    of?: React.ReactInstance,
    syraof?: HTMLElement // temp for syragate
}

export class TipHtmlContent extends React.Component<{
    node: HTMLElement
}, {}> {
    root: HTMLElement
    componentDidMount() {
        this.fill();
    }
    componentDidUpdate() {
        this.fill();
    }
    fill() {
        this.root.appendChild(this.props.node);
    }
    componentWillUnmount() {
        this.root = null;
    }
    render() {
        return <div ref={(node) => this.root = node}></div>;
    }
}

export class TipTitle extends React.Component<{
    text: string
}, {}> {
    render() {
        if (this.props.text) {
            return <div className="s_tip_title">{this.props.text}</div>;
        }
        return <noscript />;
    }
}
export class TipDescription extends React.Component<{
    text: string
}, {}> {
    render() {
        if (this.props.text) {
            return <em className="s_tip_desc">{this.props.text}</em>;
        }
        return <noscript />;
    }
}

export class Tip extends React.Component<ITip, {}> {
    private root: HTMLElement;
    private showTimeout: number;

    componentDidMount() {
        this.showTimeout = window.setTimeout(this.delayRender, DELAY);
    }
    componentDidUpdate() {
        this.delayRender();
    }
    componentWillUnmount() {
        clearTimeout(this.showTimeout);
        this.root = overHelper.removeOverRoot(this.root);
    }
    private delayRender = () => {
        let css = this.props.className || "s_tip";
        if (!this.root) {
            this.root = overHelper.createOverRoot(css);
            this.root.setAttribute("role", "tooltip");
        }
        ReactDom.render(<div className={css + "_body"}>{this.props.children}</div>, this.root);
        overHelper.position(this.root, {
            my: "left top",
            at: "left bottom+14",
            of: this.props.syraof || ReactDom.findDOMNode(this.props.of) as HTMLElement
        });
    }
    render() {
        return <noscript />;
    }
}