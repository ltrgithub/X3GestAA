"use strict";
export const BLACK_HOLE_ID = "s_lock_black_hole";

export enum LockStatus {
    off,
    on,
    long
};

export interface ILockState {
    status: LockStatus,
    forceFocusLoss?: boolean
}

let changeComponentState: (newState: ILockState) => void;
let classicEvtBuffering: any;
let state: ILockState;

export function bindComponent(onChange: (newState: ILockState) => void) {
    changeComponentState = onChange;
}

export function lock(forceFocusLoss?: boolean, evtBuffering?: any) {
    classicEvtBuffering = evtBuffering;
    changeComponentState(state = {
        status: LockStatus.on,
        forceFocusLoss: forceFocusLoss
    });
}

export function enableLong() {
    changeComponentState({
        status: state.status = LockStatus.long
    });
}

export function unlock() {
    classicEvtBuffering = null;
    changeComponentState(state = {
        status: LockStatus.off,
        forceFocusLoss: false
    });
}

export function onLockRecordKeyEvent(event: KeyboardEvent, type: string, playbackMode: boolean,isEscPress?:boolean) {
    if (!isEscPress && classicEvtBuffering && state && state.status != LockStatus.off) {
        if (!playbackMode && (event.target as any).id == BLACK_HOLE_ID) {
            classicEvtBuffering.push({
                from: "locker",
                nativeEvt: event,
                type: type
            });
        }
    }
}