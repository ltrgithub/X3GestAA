"use strict";
import * as React from 'react';
import { bindComponent, ILockState, LockStatus, BLACK_HOLE_ID } from './lockController'
import { logLock } from '../../quality/qualityController';
import Overlay from '../overlay/overlay';
import './lock.less';

export default class Lock extends React.Component<{}, ILockState>{
    blackHole: HTMLAnchorElement;
    constructor(props: any, context: any) {
        super(props, context);
        this.state = {
            status: LockStatus.off
        };
    }
    componentDidMount() {
        bindComponent(this.onLockChange);
    }
    onLockChange = (newState: ILockState) => {
        logLock(newState.status);
        if (newState.status === LockStatus.off) {
            this.setState({
                status: LockStatus.off,
                forceFocusLoss: false
            });
        }
        else {
            this.setState(newState);
        }
    }
    componentDidUpdate(prevProps: any, prevState: ILockState) {
        if (!prevState.forceFocusLoss && this.state.forceFocusLoss) {
            this.blackHole.focus();
        }
    }
    componentWillUnmount() {
        bindComponent(null);
    }
    render() {
        if (this.state.status != LockStatus.off) {
            let css = (this.state.status == LockStatus.on) ? "s_lock_on" : "s_lock_long";
            return <Overlay className={css} transparent={this.state.status == LockStatus.on}>
                {this.state.status == LockStatus.long && <div id="s_lock_long_spin"/>}
                <a id={BLACK_HOLE_ID} href="#" ref={(node) => this.blackHole = node} />
            </Overlay>;
        }
        return null;
    }
}