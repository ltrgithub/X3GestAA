"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { Tip, TipTitle, TipDescription, TipHtmlContent } from './tip/tip';
import  {getLocalString} from '../culture/localString';
import { culture } from '../culture/culture';
import * as Dom from '../utility/html/dom';

interface IProps {
    node: HTMLElement,
    title: string,
    description: string,
    of: HTMLElement
}

class SyraTip {
    root: HTMLDivElement;
    render(props: IProps) {
        this.remove();
        let tip: any;
        if (!this.root) {
            this.root = Dom.div("s_popup_syra", document.body);
        }
        if (props.node) {
            tip = <Tip syraof={props.of}>
                <TipHtmlContent node={props.node} />
            </Tip>;
        }
        else {
            tip = <Tip syraof={props.of}>
                <TipTitle text={props.title} />
                <TipDescription text={props.description} />
            </Tip>;
        }
        ReactDom.render(tip, this.root);
    }
    remove() {
        this.root && ReactDom.unmountComponentAtNode(this.root);
    }
    dispose() {
        this.remove();
        document.body.removeChild(this.root);
        this.root = null;
    }
}
const syraTip = new SyraTip();


class TitleTip {
    private showTimeOut: number;
    protected target: HTMLElement;

    _show(config: any) {
        syraTip.render({
            node: config.node,
            title: utcTip.replaceUTC(config.text) || config.text,
            description: config.target.syraShortCutTip,
            of: config.target
        });
    }
    showNode(node: HTMLElement, target: HTMLElement) {
        this.clear();
        this.target = target;
        (target as any).syraTipTitle = target.title;
        target.title = "";
        this.showTimeOut = window.setTimeout(() => {
            this._show({
                node: node,
                target: target
            });
        }, 200);
    }
    show(text: string, target: HTMLElement, check?: boolean) {
        this.clear();
        if (text) {
            this.target = target;
            (target as any).syraTipTitle = target.title;
            target.title = "";
            if (!check ||
                ((target as any).syraShortCutTip
                    || (target as any).syraTip == 2
                    || ((target.scrollWidth - target.clientWidth) > 1))
                || utcTip.hasUTC(text)) {
                this.showTimeOut = window.setTimeout(() => {
                    this._show({
                        text: text,
                        target: target
                    });
                }, 800);
            }
        }
    }
    clear() {
        if (this.target) {
            if ((this.target as any).syraTipTitle) {
                this.target.title = (this.target as any).syraTipTitle;
            }
            delete this.target;
        }
        this.hide();
    }
    hide() {
        this.showTimeOut && clearTimeout(this.showTimeOut);
        syraTip.remove();
        this.showTimeOut = null;
    }
}

class FieldTip extends TitleTip {
    private hasMaxLengthWarn: boolean;
    onKeyUp(field: any, event: KeyboardEvent) {
        if (!field.isFieldTipDisabled) {
            let target = event.target;
            let value = target && (target as any).value;
            if (this.hasMaxLengthWarn && field.input && value !== undefined) {
                if (field.$field.$maxLength && !(value && value.length >= field.$field.$maxLength)) {
                    this.clear();
                    delete this.hasMaxLengthWarn;
                }
            }
        }
    }
    onKeyPress(field: any, event: KeyboardEvent, charCode: any) {
        if (!field.isFieldTipDisabled) {
            let target = event.target;
            let value = target && (target as any).value;
            if (field.input && target && value !== undefined && field.$field.$type !== "application/x-boolean") {
                if (field.$field.$maxLength) {
                    if (charCode && value && value.length >= field.$field.$maxLength) {
                        this.hasMaxLengthWarn = true;
                        this._show({
                            text: getLocalString("field_warn_limit_input"),
                            target: this.target = target as HTMLElement
                        });
                    }
                    else {
                        if (this.hasMaxLengthWarn) {
                            this.clear();
                            delete this.hasMaxLengthWarn;
                        }
                    }
                }
            }
        }
    }
    onItemInOut(field: any, on: boolean) {
        if (!field.isFieldTipDisabled) {
            if (on) {
                if (field.input) {
                    this.show(field.getInputValue(), field.input, true);
                }
                else {
                    this.show(field.displayText || field._dataValue.textContent, field._dataValue, true);
                }
            }
            else {
                this.clear();
            }
        }
    }
}

class UtcTip {
    public readonly pattern = /(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})(Z|\s*GMT)/;
    hasUTC(value: string) {
        if (value && value.length >= 20) {
            if (this.pattern.test(value)) {
                return true;
            }
        }
        return false;
    }
    replaceUTC(value: string, useEmphasis?: boolean) {
        /*if (useEmphasis && value) {
         value += "2012-06-23T08:22:45Z"; // " 2014-10-28 13:18:21 GMT";
         }*/
        if (this.hasUTC(value)) {
            let matches = value.match(this.pattern);
            for (let match of matches) {
                if (match.length > 10) {
                    if (useEmphasis) {
                        value = value.replace(match, "<em class='s-dt-utc'>" + match + "</em>");
                    }
                    else {
                        value = value.replace(match, culture.utcToLocal(match));
                    }
                }
            }
            return value;
        }
    }
    emphasis(value: string) {
        return this.replaceUTC(value, true);
    }
    onInout(onEnter: boolean, event: MouseEvent, target: HTMLElement) {
        var className = target && target.className;
        var isUTC = className && className.indexOf && className.indexOf("s-dt-utc") >= 0;
        if (isUTC) {
            let field = (window as any).syra_item.findField(target);
            if (field && onEnter) {
                titleTip.show(target.textContent, target);
            }
        }
    }
}

export const titleTip = new TitleTip();
export const fieldTip = new FieldTip();
export const utcTip = new UtcTip();