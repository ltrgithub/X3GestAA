"use strict";
import * as React from 'react';
import * as overHelper from '../../over/overHelper';
import * as Events from '../../event/events';
import './overlay.less';

export default class Overlay extends React.Component<{
    transparent?: boolean,
    className?: string
}, {}> {
    zIndex: number;
    overlay: HTMLDivElement;
    constructor(props: any, context: any) {
        super(props, context);
        this.zIndex = overHelper.bindZindex();
    }
    componentDidMount() {
        this.overlay.style.zIndex = this.zIndex.toString();
        Events.click.subscribe(this.onGlobalEvent);
        Events.mouseover.subscribe(this.onGlobalEvent);
    }
    onGlobalEvent=()=>{
        return false; // stop propagation
    }
    onClick = (event: React.MouseEvent<HTMLDivElement>) => {
        if (event.target == this.overlay) {
            event.preventDefault();
            event.stopPropagation();
            return false;
        }
        else{
            event.stopPropagation();
        }
    }
    componentWillUnmount() {
        overHelper.unbindZindex();
        this.overlay = null;
        Events.click.unsubscribe(this.onGlobalEvent);
		Events.mouseover.unsubscribe(this.onGlobalEvent);
    }
    render() {
        let css = this.props.transparent ? "s_overlay_transparent" : "s_overlay";
        if (this.props.className) {
            css += " " + this.props.className;
        }
        return <div className={css} ref={(node) => this.overlay = node} onClick={this.onClick}>
            {this.props.children}
        </div>;
    }
}