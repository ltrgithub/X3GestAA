"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as SyraModal from '../syraModal';
import { PageModal, IPageModalProps } from './pageModal';
import { SyraDrag } from '../../../syra/utility/syra_drag';
import { syra_menus } from '../../../syra/utility/syra_menus';
import * as Dom from '../../../utility/html/dom';
import { syra_item } from '../../../syra/utility/syra_item';
import { getLocalString } from '../../../culture/localString';
import *  as syra_router from '../../../route/syra_router';
import { syra_pageBuilder } from '../../../syra/utility/syra_pageBuilder';
import { page_endChange } from '../../../quality/qualityController';
import { PageLoader, IPageLoadError } from '../../../page/pageLoader'
import { Url } from '../../../route/url';
import * as Sdata from '../../../dataStore/sdata';
import { showDiagnoses } from '../../../alert/alert';
import * as syra_expression from '../../../syra/utility/syra_expression';
import * as overHelper from '../../overHelper';
import { SyraFormDataQueue } from '../../../syra/utility/syra_formDataQueue';

export interface IPageOptions {
    multiSelect?: boolean,
    onValidateSelection?: (selected: any[]) => void,
    onSelectRecord?: (records: any[]) => any[],

    authoringDisabled?: boolean,
    onValidate?: any,
    onServerSaved?: (page: any) => void,
    onPageLoaded?: (page: any) => void,
    close?: (canceled: boolean, dispose: any, pn: SyraPageModal) => boolean
}

export interface IFormProps {
    authoringDisabled?: boolean,
    article: any,
    url?: string,
    method?: string,
    onLoadRepresentation: (diagnoses: Sdata.IDiagnose[], representation?: any) => void,
    onServerSaved: (page: any) => void,
    onValidate?: any,
    onPageLoaded?: (page: any) => void,
    close?: (canceled: boolean, dispose: any, pn: SyraPageModal) => boolean,
}
export function openFormModal(props: IFormProps) {
    syra_router.postQuery({
        menu: {
            article: props.article,
            $url: props.url,
            $method: props.method,
        },
        article: props.article,
        end: (response, workingCopyUrl) => {
            if (response.ok) {
                let loader = new PageLoader(new Url(syra_expression.parse(props.article, workingCopyUrl)));
                loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
                    props.onLoadRepresentation(error && error.diagnoses, representation);
                    if (!error) {
                        syra_pageBuilder.load({
                            $itemPage: {
                                inModal: true,
                                authoringDisabled: props.authoringDisabled,
                                urlSeg: loader.sdataUrl,
                                initData: response.data,
                                isMenuBarDisabled: true,
                                $representation: representation
                            },
                            success: (page: any) => renderPageModal(page, props)
                        });
                    }
                });
            }
            else {
                props.onLoadRepresentation(response.error.diagnoses);
            }
        }
    });
}
export interface ISelectProps {
    authoringDisabled?: boolean,
    url?: string,
    onLoadRepresentation: (diagnoses: Sdata.IDiagnose[], representation?: any) => void,
    onValidateSelection: (selected: any[]) => void,
    onSelectRecord?: (records: any[]) => any[],
    multiSelect?: boolean,
    close?: (canceled: boolean, dispose: any, pn: SyraPageModal) => boolean
}
export function openSelectModal(props: ISelectProps) {
    let loader = new PageLoader(new Url(props.url));
    loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
        props.onLoadRepresentation(error && error.diagnoses, representation);
        if (!error) {
            if (props.multiSelect == undefined) {
                props.multiSelect = loader.sdataUrl.$facet == "$select";
            }
            syra_pageBuilder.load({
                $itemPage: {
                    inModal: true,
                    authoringDisabled: props.authoringDisabled,
                    isMenuBarDisabled: true,
                    urlSeg: loader.sdataUrl,
                    $representation: representation
                },
                success: (page: any) => renderPageModal(page, props)
            });
        }
    });
}

export interface IDetailProps {
    authoringDisabled?: boolean,
    url?: string,
    onLoadRepresentation: (diagnoses: Sdata.IDiagnose[], representation?: any) => void,
    close?: (canceled: boolean, dispose: any, pn: SyraPageModal) => boolean
}
export function openDetailModal(props: IDetailProps) {
    let loader = new PageLoader(new Url(props.url));
    loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
        props.onLoadRepresentation(error && error.diagnoses, representation);
        if (!error) {
            syra_pageBuilder.load({
                $itemPage: {
                    inModal: true,
                    authoringDisabled: props.authoringDisabled,
                    isMenuBarDisabled: true,
                    urlSeg: loader.sdataUrl,
                    $representation: representation
                },
                success: (page: any) => renderPageModal(page, props)
            });
        }
    });
}




export function loadModal($itemPage: any, props: IPageOptions, openerBox?: any) {
    $itemPage.authoringDisabled = props.authoringDisabled;
    $itemPage.inModal = true;
    syra_pageBuilder.load({
        $itemPage: $itemPage,
        success: (page: any) => renderPageModal(page, props, openerBox)
    });
}

export function renderPageModal(page: any, props: IPageOptions, openerBox?: any) {
    SyraModal.push(new SyraPageModal(page, props, openerBox));
}

class SyraPageModal implements SyraModal.ISyraModal {
    disposed: boolean;
    root: HTMLElement;
    content: any;
    private drag: SyraDrag;
    deactivated: boolean;
    id: string;

    constructor(readonly page: any, public props: IPageOptions, public openerBox: any) {
        this.root = overHelper.createOverRoot("s_modal");
        page.inModal = true;
        page.overPanel = this;
        this.page = this.content = page;
        this.id = page.id + "-over";

        this.page.formDataQueue = new SyraFormDataQueue(this.page);
        if (props.onServerSaved) {
            page.onServerSaved = () => {
                props.onServerSaved(this.page);
                this.close(true);
            }
        }
        syra_item.register(this);
        if (page.scrollview) {
            page.scrollview.className = "s_modal_page_scrollview";
        }
        if (page.header) {
            page.header.className = "s_modal_page_head";
        }
        if (page.headerBottom) {
            page.headerBottom.className = "s_modal_page_head_bottom";
        }
        if (page.contentSlot) {
            page.contentSlot.className = "s_modal_page_content_slot";
        }
        page.body.className = "s_modal_page_body";
        page.domItem.className = "s_modal_page";
        if (page.domTitle) {
            page.domTitle.className = "s_modal_page_title";
        }
        // this.overSlot.setAttribute("tabindex", "2");
        if (this.props.multiSelect !== undefined) {
            page.onSelectRecord = (selectedRecords: any) => {
                page.selectedDataRecords = [];
                if (this.props.onSelectRecord) {
                    page.selectedDataRecords = this.props.onSelectRecord(selectedRecords);
                }
                else {
                    for (let uuid in selectedRecords) {
                        page.selectedDataRecords.push(selectedRecords[uuid].dataset);
                    }
                }
                if (!this.props.multiSelect) {
                    this.onOk();
                }
            };
        }
        //this.addDraggable();
        this.render();
        page.resizeItem(true); //Resize as page already resize on preload
        page_endChange(page);
    }
    onDidMount = (body: HTMLElement) => {
        (this.page.layoutSlot = body).appendChild(this.page.domItem);
        this.props.onPageLoaded && this.props.onPageLoaded(this.page);
        syra_pageBuilder.activateQueryList(this.page);
    }
    private render() {
        let props: IPageModalProps = {
            onDidMount: this.onDidMount,
            onClose: this.onCloseClick,
            deactivated: this.deactivated,
            onResize: this.onResize
        }
        if (this.props.onValidateSelection) {
            props.pageMode = "select";
            if (this.props.multiSelect) {
                props.onOk = this.onOk;
            }
        }
        else {
            if (this.props.onValidate || this.props.onServerSaved) {
                props.onOk = this.onOk;
            }
        }
        switch (this.page.$facet) {
            case "$lookup":
            case "$select":
                props.pageMode = "select";
                break;
            default:
                props.pageMode = "form";
                break;
        }
        ReactDom.render(<PageModal {...props} />, this.root);
    }
    onResize = (maxHeight: number) => {
        if (this.page) {
            this.page.domItem.style.maxHeight = maxHeight + "px";
            this.page.contentSlot.style.maxHeight = maxHeight + "px";
            this.page.resizeItem(true);
        }
    }
    onOk = () => {
        if ((this.props.onValidate && this.props.onValidate(this.page, this) !== false)
            || this.props.onServerSaved) {
            if (this.props.onServerSaved) {
                syra_menus.applyChange(this.page, {
                    $actions: {
                        $save: {
                            $isDisabled: false
                        }
                    }
                });
                syra_menus.click.save(this.page);
            }
            else {
                this.close(true);
            }
        }
        if (this.props.onValidateSelection) {
            this.props.onValidateSelection(this.page.selectedDataRecords);
            this.close(true);
        }

    }
    activate(activated: boolean) {
        this.deactivated = !activated;
        this.render();
    }
    onCloseClick = () => {
        this.close();
    }
    close = (validated?: boolean, dispose?: any) => {
        if (!this.disposed && this.props) {
            if (!this.props.close || this.props.close(validated !== true, dispose, this) !== false) {
                setTimeout(() => this.dispose(), 100);
            }
        }
    }
    dispose() {
        this.disposed = true;
        this.openerBox = null;
        if (this.page && this.page.formDataQueue) {
            this.page && this.page.formDataQueue.dispose();
        }
        SyraModal.remove(this);
        if (this.props) {
            if (this.page) {
                delete this.page.overPanel;
                this.page.dispose();
            }
        }
        this.root = overHelper.removeOverRoot(this.root);
        this.props = null;
    }
} 