import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../../utility/html/dom';
import * as Events from '../../../event/events';
import { Link } from '../../../link/link';
import Overlay from '../../overlay/overlay';
import { getLocalString } from '../../../culture/localString';
import { KeySpot } from '../../../shortcut/keySpot';

import '../modal.less';

const BODY_MARGIN = 48;

export class PageModalDom {
    body: HTMLElement;
    dialog: HTMLElement;
    private _header: HTMLElement;
    private _footer: HTMLElement;
    yMargin: number;
    xMargin: number;
    _maxHeight: number;

    get maxHeight(): number {
        return this._maxHeight;
    }
    get header(): HTMLElement {
        if (!this._header) {
            this._header = this.body.previousSibling as HTMLElement;
        }
        return this._header;
    }
    get footer(): HTMLElement {
        if (!this._footer) {
            this._footer = this.body.nextSibling as HTMLElement;
        }
        return this._footer;
    }
    setMaxHeight() {
        this._maxHeight = document.body.clientHeight * 0.9;
        this.yMargin = BODY_MARGIN;
        this.xMargin = BODY_MARGIN;
        this._maxHeight -= (this.yMargin + (this.header.getBoundingClientRect().height + this.footer.getBoundingClientRect().height));
        this.body.style.maxHeight = this._maxHeight + "px";
    }
    dispose() {
        this.body = this.dialog = this._header = this._footer = null;
    }
}

export interface IPageModalProps {
    deactivated: boolean, //classicPage compatibility
    onDidMount?: (body: HTMLElement) => void,
    onResize?: (modDom: PageModalDom) => void,
    onOk?: () => void,
    onClose: () => void,
    pageMode?: string,
    className?: string,
    title?: string
}


export class PageModal extends React.Component<IPageModalProps, {}> {
    keySpot: KeySpot;
    modDom: PageModalDom;

    constructor(props: IPageModalProps, context: any) {
        super(props, context);
        this.modDom = new PageModalDom();
    }

    componentDidMount() {
        this.props.onDidMount && this.props.onDidMount(this.modDom.body);
        Events.resize.subscribe(this.onResize);
        this.keySpot = new KeySpot("PageModal");
        this.keySpot.bindEscape(() => {
            if (!this.props.deactivated) {
                this.props.onClose();
                return true;
            }
        });
    }
    componentDidUpdate(prevProps: IPageModalProps) {
        if (this.props.deactivated != (prevProps && prevProps.deactivated)) {
            Dom.hide(ReactDom.findDOMNode(this) as HTMLElement, this.props.deactivated);
        }
    }
    onResize = () => {
        this.modDom.setMaxHeight();
        this.props.onResize && this.props.onResize(this.modDom);
    }
    componentWillUnmount() {
        this.keySpot && this.keySpot.dispose();
        Events.resize.unsubscribe(this.onResize);
        this.modDom.dispose();
        this.modDom = null;
    }
    onReferenceDialogNode = (node:HTMLDivElement)=>{
        if(this.modDom){
            this.modDom.dialog = node;
        }        
    }
    onReferenceBodyNode = (node:HTMLDivElement)=>{
        if(this.modDom){
            this.modDom.body = node;
        }        
    }
    render(): any {
        return <Overlay >
            <div className={(this.props.className ? this.props.className : "") + " s_modal_dialog"} 
            data-s-dialog={this.props.pageMode} 
            data-s-dialog-modal="true" 
            ref={this.onReferenceDialogNode}>
                <article className="s_modal_content">
                    <div className="s_modal_header">
                        {this.props.title}
                        <Link
                            className="s_modal_close"
                            icon={"close"}
                            title={getLocalString("diag_close")}
                            onClick={this.props.onClose} />

                    </div>
                    <div className="s_modal_body" ref={this.onReferenceBodyNode}>
                        {this.props.children}
                    </div>
                    <footer className={"s_modal_footer"}>
                        <Link
                            className="s_modal_footer_link"
                            title={this.props.onOk ? getLocalString("over_cancel") : getLocalString("over_close")}
                            onClick={this.props.onClose} />
                        {this.props.onOk && <Link
                            className="s_modal_footer_link OkLink"
                            title={getLocalString("over_ok")}
                            onClick={this.props.onOk} />}
                    </footer>
                </article>
            </div>
        </Overlay>;
    }
}