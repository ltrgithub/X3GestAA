import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../../utility/html/dom';
import * as Events from '../../../event/events';
import { Link } from '../../../link/link';
import Overlay from '../../overlay/overlay';
import { getLocalString } from '../../../culture/localString';
import { KeySpot } from '../../../shortcut/keySpot';
import { Resizer, IResizing } from '../../../common/resizer/resizer'
import { Dragger, IDraggerProps, IDragging } from '../../../common/drag/dragger'
import '../modal.less';

export interface IPageModalProps {
    deactivated: boolean, //classicPage compatibility
    onDidMount?: (body: HTMLElement) => void,
    onResize?: (maxHeight: number) => void,
    onOk?: () => void,
    onClose: () => void,
    pageMode?: string,
    className?: string,
    title?: string
}

const BODY_MARGIN = 48;

export class PageModal extends React.Component<IPageModalProps, {}> {
    keySpot: KeySpot;
    body: HTMLElement;
    dialog: HTMLElement;
    modalContent: HTMLElement;
    yMargin: number;
    xMargin: number;
    private xStartDrag: number;
    private yStartDrag: number;

    componentDidMount() {
        this.props.onDidMount && this.props.onDidMount(this.body);
        Events.resize.subscribe(this.onResize);
        this.keySpot = new KeySpot("PageModal");
        this.keySpot.bindEscape(() => {
            if (!this.props.deactivated) {
                this.props.onClose();
                return true;
            }
        });
        this.dialog.style.left = ((Dom.site.slot.clientWidth - this.dialog.clientWidth) / 2) + 'px';
        this.dialog.style.top = ((Dom.site.slot.clientHeight - this.dialog.clientHeight) / 2) + 'px';
    }
    componentDidUpdate(prevProps: IPageModalProps) {
        if (this.props.deactivated != (prevProps && prevProps.deactivated)) {
            Dom.hide(ReactDom.findDOMNode(this) as HTMLElement, this.props.deactivated);
        }
    }
    onResize = (height?: number) => {
        let header = this.body.previousSibling as HTMLElement;
        let footer = this.body.nextSibling as HTMLElement;
        console.log("Header height: " + header.getBoundingClientRect().height);
        console.log("footer height: " + footer.getBoundingClientRect().height);
        console.log("Body height: " + this.body.clientHeight);
        console.log("Body height: " + this.body.getBoundingClientRect().height);
        
        let maxHeight = document.body.clientHeight * 0.9;
        if(height && height < maxHeight) {
            maxHeight = height;
        }
        this.yMargin = BODY_MARGIN;
        this.xMargin = BODY_MARGIN;
        // maxHeight -= (this.yMargin + (header.getBoundingClientRect().height + footer.getBoundingClientRect().height));
        maxHeight -= (header.getBoundingClientRect().height + footer.getBoundingClientRect().height);
        this.body.style.maxHeight = maxHeight + "px";
        this.props.onResize && this.props.onResize(maxHeight);
        // let dialogWidth = this.dialog.getBoundingClientRect().width;
        // this.dialog.style.width = dialogWidth + "px";
    }


    componentWillUnmount() {
        this.keySpot && this.keySpot.dispose();
        Events.resize.unsubscribe(this.onResize);
        this.body = this.keySpot = null;
    }

    onResizerDrag = (ev: any) => {
        
        console.log(ev);
        if(ev.dir=='w' || ev.dir=='e'){
            let newWidth = ev.width + (ev.dir =='w' ? ev.deltaX * -1 : ev.deltaX);
            this.modalContent.style.width = newWidth + 'px';
            
            this.dialog.style.left = (ev.dir =='w' ? (Math.max(0, (ev.pageX + ev.deltaX))) : (Math.max(0, ((ev.pageX - newWidth) + ev.deltaX)))) + "px";

        } else if(ev.dir=='n' || ev.dir=='s'){
            let newHeight = ev.height + (ev.dir =='n' ? ev.deltaY * -1 : ev.deltaY);
            if(newHeight < (document.body.clientHeight * 0.9)){
                this.modalContent.style.height = newHeight + 'px';
            
                this.dialog.style.top = (ev.dir =='n' ? (Math.max(0, (ev.pageY + ev.deltaY))) : (Math.max(0, ((ev.pageY - newHeight) + ev.deltaY)))) + "px";

            }

        }
        this.onResize(this.dialog.clientHeight);
        // this.pn.overSlot.style.left = (Math.max(0, this.left + (event.pageX - this.startX))) + "px";
        var position = {

        };
        
    }
    onDrag = (dragging: IDragging) => {
        // console.log(" X: " +dragging.pageX + " Y: " + dragging.pageY);
        
        this.dialog.style.left = (this.xStartDrag + dragging.deltaX) + 'px';
        this.dialog.style.top = (this.yStartDrag + dragging.deltaY) + 'px';

    }
    onStopDrag = (dragging: IDragging) => {
        // console.log(" X: " +dragging.pageX + " Y: " + dragging.pageY);
        // this.dialog.style.left = dragging.pageX + 'px';
        // this.dialog.style.top = dragging.pageY + 'px';
        // console.log("PageModal Drag Stop");
    }
    onStartDrag = (dragging: IDragging) => {
        // console.log(this.dialog.getBoundingClientRect());
        let pos = this.dialog.getBoundingClientRect();
        console.log("Left:" + pos.left);
        console.log("Top:" + pos.top);
        this.xStartDrag = pos.left;
        this.yStartDrag = pos.top;
    }

    render(): any {
        return <Overlay >
            <div className={(this.props.className ? this.props.className : "") + " s_modal_dialog"} data-s-dialog={this.props.pageMode} data-s-dialog-modal="true" ref={(node) => this.dialog = node}>
                <Resizer directions={["n", "ne", "e", "se", "s", "sw", "w", "nw"]} onDrag={this.onResizerDrag}>
                    <article className="s_modal_content" ref={(node) => this.modalContent = node}>
                        <Dragger onDrag={this.onDrag} onStop={this.onStopDrag} onStart={this.onStartDrag}>
                        <div className="s_modal_header">
                            {this.props.title}
                            <Link
                                className="s_modal_close"
                                icon={"close"}
                                title={getLocalString("diag_close")}
                                onClick={this.props.onClose} />

                        </div>
                        </Dragger>
                        <div className="s_modal_body" ref={(node) => this.body = node}>
                            {this.props.children}
                        </div>
                        <footer className={"s_modal_footer"}>
                            <Link
                                className="s_modal_footer_link"
                                title={this.props.onOk ? getLocalString("over_cancel") : getLocalString("over_close")}
                                onClick={this.props.onClose} />
                            {this.props.onOk && <Link
                                className="s_modal_footer_link OkLink"
                                title={getLocalString("over_ok")}
                                onClick={this.props.onOk} />}
                        </footer>
                    </article>
                </Resizer>
            </div>
        </Overlay>;
    }
}