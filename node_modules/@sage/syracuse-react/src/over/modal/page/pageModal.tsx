import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../../utility/html/dom';
import * as Events from '../../../event/events';
import { Link } from '../../../link/link';
import Overlay from '../../overlay/overlay';
import { getLocalString } from '../../../culture/localString';
import { KeySpot } from '../../../shortcut/keySpot';
import { Resizer, IResizing } from '../../../common/resizer/resizer'
import { Dragger, IDraggerProps, IDragging } from '../../../common/drag/dragger'
import '../modal.less';

export interface IPageModalProps {
    deactivated: boolean, //classicPage compatibility
    onDidMount?: (modal: PageModal) => void,
    onResize?: (modal: PageModal) => void,
    onResizeStop?: (modal: PageModal) => void,
    onOk?: () => void,
    onClose: () => void,
    pageMode?: string,
    className?: string,
    title?: string
}

const BODY_MARGIN = 48;
const MAX_WIDTH_RATIO = 0.8;
const MIN_WIDTH = 200;
const MAX_HEIGHT_RATIO = 0.9;
const MIN_HEIGHT = 300;

export class PageModal extends React.Component<IPageModalProps, {}> {
    keySpot: KeySpot;
    body: HTMLElement;
    dialog: HTMLElement;
    modalContent: HTMLElement;
    private xStartDrag: number;
    private yStartDrag: number;
    maxBodyHeight: number;
    resized: boolean;
    private _footer: HTMLElement;
    siteWidth: number;
    siteHeight: number;

    get footer(): HTMLElement {
        if (!this._footer) {
            this._footer = this.body.nextSibling as HTMLElement;
        }
        return this._footer;
    }
    get width(): number {
        return this.dialog.getBoundingClientRect().width;
    }
    set width(value: number) {
        this.dialog.style.width = value + "px";
    }
    get maxWidth(): number {
        let max = document.body.clientWidth;
        return this.resized ? max : (max * MAX_WIDTH_RATIO);
    }
    get maxHeight(): number {
        let max = document.body.clientHeight;
        return this.resized ? max : (max * MAX_HEIGHT_RATIO);
    }
    onMaximizeChildItem(maximized: boolean) {
        let resizerNode = this.modalContent.parentNode as HTMLElement;
        if (resizerNode) {
            resizerNode.style.position = maximized ? "static" : "";
        }
    }
    componentDidMount() {
        this.props.onDidMount && this.props.onDidMount(this);
        Events.resize.subscribe(this.onResizeEvent);
        this.keySpot = new KeySpot("PageModal");
        this.keySpot.bindEscape(() => {
            if (!this.props.deactivated) {
                this.props.onClose();
                return true;
            }
        });
    }
    componentDidUpdate(prevProps: IPageModalProps) {
        if (this.props.deactivated != (prevProps && prevProps.deactivated)) {
            Dom.hide(ReactDom.findDOMNode(this) as HTMLElement, this.props.deactivated);
        }
    }
    onResizeEvent = () => {
        this.fixMaxSize();
        this.maxBodyHeight = this.siteHeight;
        this.onResize(this.siteHeight);
    }
    onResize = (height: number) => {
        this.maxBodyHeight = Math.min(this.siteHeight, height);
        this.maxBodyHeight -= (this.body.offsetTop + this.footer.getBoundingClientRect().height);
        this.body.style.maxHeight = this.maxBodyHeight + "px";
        this.props.onResize && this.props.onResize(this);
    }
    fixMaxSize() {
        this.siteWidth = this.maxWidth;
        this.siteHeight = this.maxHeight;
        this.dialog.style.maxWidth = this.siteWidth + "px";
        this.dialog.style.maxHeight = this.siteHeight + "px";
    }
    componentWillUnmount() {
        this.keySpot && this.keySpot.dispose();
        Events.resize.unsubscribe(this.onResizeEvent);
        this.body = this.dialog = this._footer = null;
    }
    private resizeVertically(ev: any) {
        let isNortherly = ev.dir[0] == "n";
        let deltaY = (isNortherly ? ev.deltaY * -1 : ev.deltaY);
        let newHeight = ev.height + deltaY;
        if ((newHeight > MIN_HEIGHT) && (newHeight < this.siteHeight)) {
            let top: number;
            this.modalContent.style.height = newHeight + 'px';
            if (isNortherly) {
                top = Math.max(0, (ev.pageY + ev.deltaY));
            } else {
                top = Math.max(0, ((ev.pageY - newHeight) + ev.deltaY));
            }
            this.dialog.style.marginTop = Math.max(top, 0) + 'px';
        }
    }
    private resizeHorizontally(ev: any) {
        let isWesterly = ev.dir[ev.dir.length - 1] == "w"; //w is always at end
        let deltaX = (isWesterly ? ev.deltaX * -1 : ev.deltaX);
        let newWidth = ev.width + deltaX;
        if ((newWidth > MIN_WIDTH) && (newWidth < this.siteWidth)) {
            let left: number;
            this.modalContent.style.width = newWidth + 'px';
            this.dialog.style.minWidth = newWidth + 'px';
            if (isWesterly) {
                left = Math.max(0, (ev.pageX + ev.deltaX));
            } else {
                left = Math.max(0, ((ev.pageX - newWidth) + ev.deltaX));
            }
            this.dialog.style.marginLeft = Math.max(left, 0) + 'px';
        }

    }
    onResizerStart = () => {
        this.resized = true;
        this.fixMaxSize();
    }
    onResizerDrag = (ev: any) => {
        if (ev.dir == 'w' || ev.dir == 'e') {
            this.resizeHorizontally(ev);
        } else if (ev.dir == 'n' || ev.dir == 's') {
            this.resizeVertically(ev);
        } else {
            this.resizeVertically(ev);
            this.resizeHorizontally(ev);
        }
        this.onResize(this.dialog.clientHeight);
    }
    onResizerStop = () => {
        this.props.onResizeStop && this.props.onResizeStop(this);
    }
    onStartDrag = (dragging: IDragging) => {
        let pos = this.dialog.getBoundingClientRect();
        this.xStartDrag = pos.left;
        this.yStartDrag = pos.top;
    }
    onDrag = (dragging: IDragging) => {
        let left = this.xStartDrag + dragging.deltaX;
        this.dialog.style.marginLeft = Math.max(left, 0) + 'px';
        let top = this.yStartDrag + dragging.deltaY;
        this.dialog.style.marginTop = Math.max(top, 0) + 'px';
    }
    onStopDrag = (dragging: IDragging) => {

    }
    render(): any {
        return <Overlay >
            <div className={(this.props.className ? this.props.className : "") + " s_modal_dialog"}
                data-s-dialog={this.props.pageMode}
                data-s-dialog-modal="true"
                ref={(node) => this.dialog = node}>
                <Resizer directions={["n", "ne", "e", "se", "s", "sw", "w", "nw"]}
                    onStart={this.onResizerStart}
                    onDrag={this.onResizerDrag}
                    onStop={this.onResizerStop}>
                    <article className="s_modal_content"
                        ref={(node) => this.modalContent = node}>
                        <Dragger onDrag={this.onDrag} onStop={this.onStopDrag} onStart={this.onStartDrag}>
                            <div className="s_modal_header">
                                {this.props.title}
                                <Link
                                    className="s_modal_close"
                                    icon={"close"}
                                    title={getLocalString("diag_close")}
                                    onClick={this.props.onClose} />
                            </div>
                        </Dragger>
                        <div className="s_modal_body"
                            ref={(node) => this.body = node}>
                            {this.props.children}
                        </div>
                        <footer className={"s_modal_footer"}>
                            <Link
                                className="s_modal_footer_link"
                                title={this.props.onOk ? getLocalString("over_cancel") : getLocalString("over_close")}
                                onClick={this.props.onClose} />
                            {this.props.onOk && <Link
                                className="s_modal_footer_link OkLink"
                                title={getLocalString("over_ok")}
                                onClick={this.props.onOk} />}
                        </footer>
                    </article>
                </Resizer>
            </div>
        </Overlay>;
    }
}