import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../../utility/html/dom';
import * as Events from '../../../event/events';
import { Link } from '../../../link/link';
import Overlay from '../../overlay/overlay';
import { getLocalString } from '../../../culture/localString';
import { KeySpot } from '../../../shortcut/keySpot';
import { Resizer, IResizing } from '../../../common/resizer/resizer'
import { Dragger, IDraggerProps, IDragging } from '../../../common/drag/dragger'
import '../modal.less';

export interface IPageModalProps {
    deactivated: boolean, //classicPage compatibility
    onDidMount?: (body: HTMLElement) => void,
    onResize?: (modDom: PageModalDom) => void,
    onOk?: () => void,
    onClose: () => void,
    pageMode?: string,
    className?: string,
    title?: string
}

const BODY_MARGIN = 48;
const MAX_WIDTH_RATIO = 0.8;
const MIN_WIDTH = 200;
const MAX_HEIGHT_RATIO = 0.9;
const MIN_HEIGHT = 300;

export class PageModalDom {
    body: HTMLElement;
    dialog: HTMLElement;
    modalContent: HTMLElement;
    private _header: HTMLElement;
    private _footer: HTMLElement;
    private xStartDrag: number;
    private yStartDrag: number;
    yMargin: number;
    xMargin: number;
    _maxHeight: number;

    get maxHeight(): number {
        return this._maxHeight;
    }
    get header(): HTMLElement {
        if (!this._header) {
            this._header = this.body.previousSibling as HTMLElement;
        }
        return this._header;
    }
    get footer(): HTMLElement {
        if (!this._footer) {
            this._footer = this.body.nextSibling as HTMLElement;
        }
        return this._footer;
    }

    initializePosition() {
        this.dialog.style.left = ((Dom.site.slot.clientWidth - this.dialog.clientWidth) / 2) + 'px';
        this.dialog.style.top = ((Dom.site.slot.clientHeight - this.dialog.clientHeight) / 2) + 'px';
    }
    onStartDrag = (dragging: IDragging) => {
        let pos = this.dialog.getBoundingClientRect();
        this.xStartDrag = pos.left;
        this.yStartDrag = pos.top;
    }
    onDrag = (dragging: IDragging) => {
        this.dialog.style.left = (this.xStartDrag + dragging.deltaX) + 'px';
        this.dialog.style.top = (this.yStartDrag + dragging.deltaY) + 'px';

    }
    onResizerDrag = (ev: any) => {
        if (ev.dir == 'w' || ev.dir == 'e') {
            let deltaX = (ev.dir == 'w' ? ev.deltaX * -1 : ev.deltaX);
            let newWidth = ev.width + deltaX;
            if ((newWidth > MIN_WIDTH) && (newWidth < document.body.clientWidth * MAX_WIDTH_RATIO)) {
                this.modalContent.style.width = newWidth + 'px';
                this.dialog.style.left = (ev.dir == 'w' ? (Math.max(0, (ev.pageX + ev.deltaX))) : (Math.max(0, ((ev.pageX - newWidth) + ev.deltaX)))) + "px";
            }
        } else { // vertical resize: dir = 'n' or dir ='s'
            let deltaY = (ev.dir == 'n' ? ev.deltaY * -1 : ev.deltaY);

            let newHeight = ev.height + deltaY;
            if ((newHeight > MIN_HEIGHT) && (newHeight < document.body.clientHeight * MAX_HEIGHT_RATIO)) {
                this.modalContent.style.height = newHeight + 'px';
                this.dialog.style.top = (ev.dir == 'n' ? (Math.max(0, (ev.pageY + ev.deltaY))) : (Math.max(0, ((ev.pageY - newHeight) + ev.deltaY)))) + "px";
            }
        }
    }
    setMaxHeight(height?: number) {
        this._maxHeight = document.body.clientHeight * 0.9;
        //this.yMargin = BODY_MARGIN;
        //this.xMargin = BODY_MARGIN;
        if (height && height < this._maxHeight) {
            this._maxHeight = height;
        }
        //this._maxHeight -= (this.yMargin + (this.header.getBoundingClientRect().height + this.footer.getBoundingClientRect().height));
        this._maxHeight -= (this.header.getBoundingClientRect().height + this.footer.getBoundingClientRect().height);
        this.body.style.maxHeight = this._maxHeight + "px";
    }
    dispose() {
        this.body = this.dialog = this._header = this._footer = null;
    }
}


export class PageModal extends React.Component<IPageModalProps, {}> {
    keySpot: KeySpot;
    modDom: PageModalDom;

    constructor(props: IPageModalProps, context: any) {
        super(props, context);
        this.modDom = new PageModalDom();
    }

    componentDidMount() {
        this.props.onDidMount && this.props.onDidMount(this.modDom.body);
        Events.resize.subscribe(this.onResize);
        this.keySpot = new KeySpot("PageModal");
        this.keySpot.bindEscape(() => {
            if (!this.props.deactivated) {
                this.props.onClose();
                return true;
            }
        });
        this.modDom.initializePosition();
    }
    componentDidUpdate(prevProps: IPageModalProps) {
        if (this.props.deactivated != (prevProps && prevProps.deactivated)) {
            Dom.hide(ReactDom.findDOMNode(this) as HTMLElement, this.props.deactivated);
        }
    }
    onResize = (height?: number) => {
        this.modDom.setMaxHeight(height);
        this.props.onResize && this.props.onResize(this.modDom);
    }

    componentWillUnmount() {
        this.keySpot && this.keySpot.dispose();
        Events.resize.unsubscribe(this.onResize);
        this.modDom.dispose();
        this.modDom = this.keySpot = null;
    }
    onResizerDrag = (ev: any) => {
        this.modDom.onResizerDrag(ev);
        this.onResize(this.modDom.dialog.clientHeight);
    }
    onStartDrag = (dragging: IDragging) => {
        this.modDom.onStartDrag(dragging);
    }
    onDrag = (dragging: IDragging) => {
        this.modDom.onDrag(dragging);
    }
    onStopDrag = (dragging: IDragging) => {

    }
    onReferenceDialog = (node: HTMLDivElement) => {
        if (this.modDom) {
            this.modDom.dialog = node;
        }
    }
    onReferenceBody = (node: HTMLDivElement) => {
        if (this.modDom) {
            this.modDom.body = node;
        }
    }
    onReferenceContent = (node: HTMLDivElement) => {
        if (this.modDom) {
            this.modDom.modalContent = node;
        }
    }
    render(): any {
        return <Overlay >
            <div className={(this.props.className ? this.props.className : "") + " s_modal_dialog"}
                data-s-dialog={this.props.pageMode}
                data-s-dialog-modal="true"
                ref={this.onReferenceDialog}>
                <Resizer directions={["n", "ne", "e", "se", "s", "sw", "w", "nw"]} onDrag={this.onResizerDrag}>
                    <article className="s_modal_content" ref={this.onReferenceContent}>
                        <Dragger onDrag={this.onDrag} onStop={this.onStopDrag} onStart={this.onStartDrag}>
                            <div className="s_modal_header">
                                {this.props.title}
                                <Link
                                    className="s_modal_close"
                                    icon={"close"}
                                    title={getLocalString("diag_close")}
                                    onClick={this.props.onClose} />

                            </div>
                        </Dragger>
                        <div className="s_modal_body" ref={this.onReferenceBody}>
                            {this.props.children}
                        </div>
                        <footer className={"s_modal_footer"}>
                            <Link
                                className="s_modal_footer_link"
                                title={this.props.onOk ? getLocalString("over_cancel") : getLocalString("over_close")}
                                onClick={this.props.onClose} />
                            {this.props.onOk && <Link
                                className="s_modal_footer_link OkLink"
                                title={getLocalString("over_ok")}
                                onClick={this.props.onOk} />}
                        </footer>
                    </article>
                </Resizer>
            </div>
        </Overlay>;
    }
}