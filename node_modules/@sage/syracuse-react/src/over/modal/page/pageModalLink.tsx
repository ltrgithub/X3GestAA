"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { Link, ILinkProp } from '../../../link/link';
import { PageModal, IPageModalProps,PageModalDom } from './pageModal';
import * as overHelper from '../../overHelper';

interface IPageModalLinkBody {
    onClose?: () => void,
    onResize?: (dom:PageModalDom) => void,
    render: () => any,
    className?: string,
    onClick?: () => void,
    onOk?: () => void,
    title?: string
}

interface IPageModalLinkProps extends ILinkProp {
    modal: IPageModalLinkBody
}

export class PageModalLink extends React.Component<IPageModalLinkProps, {
    opened: boolean
}>{
    private root: HTMLElement;
    onClose = () => {
        window.setTimeout(() => {
            this.closeModal();
            this.setState({
                opened: false
            });
            this.props.modal.onClose && this.props.modal.onClose();
        }, 100);
    }
    onOk = () => {
        this.props.modal.onOk && this.props.modal.onOk();
        this.onClose();
    }

    onOpen = () => {
        this.root = overHelper.createOverRoot("s_modal");
        ReactDom.render(<PageModal
            title={this.props.modal.title}
            deactivated={false}
            onClose={this.onClose}
            onOk={this.props.modal.onOk ? this.onOk : null}
            className={this.props.modal.className}
            onResize={this.props.modal.onResize}  >{this.props.modal.render()}
        </PageModal>,
            this.root);
        this.setState({
            opened: true
        });
    }
    closeModal() {
        if (this.root) {
            overHelper.removeOverRoot(this.root);
            this.root = null;
        }
    }
    componentWillUnmount() {
        this.closeModal();
    }
    render() {
        return <Link {...this.props as ILinkProp} onClick={this.onOpen} disabled={this.state && this.state.opened} />
    }
}