"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../../utility/html/dom';
import { getLocalString } from '../../../culture/localString';
import { syra_item } from '../../../syra/utility/syra_item';
import { syra_menus } from '../../../syra/utility/syra_menus';
import { syra_site } from '../../../syra/utility/syra_site';
import * as SyraModal from '../syraModal';
import { CardModal, ICardModalProps } from './recordCardModal';
import { SyraDrag } from '../../../syra/utility/syra_drag';
import { Url } from '../../../route/url';
import * as overHelper from '../../overHelper'

function _hasPopupCardCapability(list: any) {
    if (list.hasPopupCard === undefined) {
        list.hasPopupCard = list.$field.$isEntityFusionList || !!list.$item.$popupCard;
        if (!list.hasPopupCard) {
            let $fields = list.$field.$item.$properties;
            let binds = Object.keys($fields);
            for (let bind of binds) {
                switch ($fields[bind].$viewScope || "") {
                    case "popup":
                    case "both":
                        list.hasPopupCard = true;
                        return list.hasPopupCard;
                }
            }
        }
    }
    return list.hasPopupCard;
}

function _setFocus(slot: HTMLElement) {
    let focusLink = document.createElement("a");
    focusLink.className = "s-dialog-focus-anchor";
    focusLink.setAttribute('href', '#');
    slot.appendChild(focusLink);
    focusLink.focus();
    (slot as any).syraOnClick = "onSelectorClick";
}

function _makeLayout(list: any) {
    let $fields = list.$field.$item.$properties;
    let $binds = Object.keys($fields);
    let hasViewScope;
    for (let bind of $binds) {
        hasViewScope = $fields[bind].$viewScope !== undefined;
        if (hasViewScope) {
            break;
        }
    }
    if (hasViewScope) {
        delete list.$item.$popupCard;
        let $popupFields = [];
        let $meta = list.getMetaData();
        let $metaFields = ($meta && $meta.$item && $meta.$item.$properties) || {};
        for (let bind of $binds) {
            let $field = $fields[bind];
            let $isHidden = $metaFields[bind] && $metaFields[bind].$isHidden;
            $isHidden = $isHidden === undefined ? $field.$isHidden : $isHidden;
            if (!$isHidden && !$field.$isExcluded) {
                switch ($field.$viewScope) {
                    case "popup":
                    case "both":
                        $popupFields.push(bind);
                        break;
                }
            }
        }
        let maxByCol = Math.ceil($popupFields.length / 4);
        let colIndex = 0, $cols = [], $col;
        for (let popupField of $popupFields) {
            if (colIndex == 0) {
                $cols.push($col = {
                    $layoutType: "stack",
                    $items: []
                });
            }
            $col.$items.push({
                $bind: popupField
            });
            if ((++colIndex) == maxByCol) {
                colIndex = 0;
            }
        }
        list.$popupCard = {
            $layout: {
                $layoutType: "row",
                $items: $cols
            }
        };
    }
    return list.$popupCard;
}



function _activatePopupCard(record: any, bind?: string) {
    if (!record._isOnApplyingChange) {
        if (record.list == record.list.cardActiveList) {
            if (record.list.cardActiveRecord && record.list.cardActiveRecord.popupCard) {
                record.list.cardActiveRecord.popupCard.switchOff();
            }
            if (!record.popupCard) {
                record.popupCard = new CardModalBox(record, bind);
            }
            else {
                record.popupCard.switchOn(bind);
            }
        }
    }
}

export function isOpened(list: any) {
    return list && (list == list.cardActiveList);
}

export function togglePopup(record: any) {
    if (record) {
        let list = record.list;
        if (!(list.cardActiveList == list && list.cardActiveRecord == record)) {
            if (list.cardActiveList == list) {
                _activatePopupCard(record);
                list.cardModalController && list.cardModalController.close();
            }
            else {
                list.cardActiveList = list;
                list.page.externalAdapter.onFieldClickPicker({
                    field: record,
                    pickerType: "openCard",
                    doEvent: () => {
                        list.cardSlotCard = Dom.div("s_cardmodal_slot");
                        !record.popupCard && _activatePopupCard(record);
                        list.cardModalController = new CardModalController(record);
                    }
                });
            }
        }
    }
}


class CardModalBox {
    content: any;
    pagerSlot: any;
    list: any;
    picker_menus: any;

    constructor(public record: any, bind: string) {
        this.list = record.list;
        this.switchOn(bind);
    }
    switchOn(bind: string) {
        Dom.empty(this.list.cardSlotCard);
        this.list.cardActiveRecord = this.record;
        if (!this.content) {
            let $popupCard = null;
            if (this.list.isClientFetch || this.list.$field.$treeview) { // treeview is not isClientFetch but popupcard is available
                $popupCard = _makeLayout(this.list);
                $popupCard.$isTitleHidden = !($popupCard.$title && $popupCard.$title != "-");
                $popupCard = {
                    $layout: {
                        $items: [$popupCard]
                    }
                };
            }
            this.record.onSelectorClick = function () {
                this.list.cardSlotCard && _setFocus(this.list.cardSlotCard);
            };
            this.content = this.record.page.addItem(this.list.cardSlotCard, $popupCard || this.list.$popupCard, this.record);
            this.pagerSlot = Dom.div("s_cardmodal_pager_slot");
            this.list.paging.addPagerStepLinks(this.record, this.pagerSlot);
            this.content.body.parentNode.insertBefore(this.pagerSlot, this.content.body);
        }
        else {
            this.list.cardSlotCard.appendChild(this.content.domItem);
        }
        this.activate(bind);
    }
    switchOff() {
        this.hightlight(false);
        Dom.remove(this.content.domItem);
    }
    hightlight(show: boolean) {
        this.record.dataRow && Dom.toggleClass(this.record.dataRow, "s_cardmodal_record", show);
        this.record.fixedRow && Dom.toggleClass(this.record.fixedRow, "s_cardmodal_record", show);
    }
    private activate(bind: string) {
        this.hightlight(true);
        let recordIndex = this.record.getRecordIndex();
        this.list.cardSlotCard.syraItem = this.record.id;
        this.list.cardSlotCard.setAttribute("data-s-record", this.record.$uuid);
        if (this.list.cardModalController) {
            this.list.cardModalController.content = this.content;
        }
        this.record._isOnApplyingChange = true;
        this.record.applyChange(this.list.ensureGlobalMetaRecord());
        this.record.applyChange(this.record.dataset);
        if (this.record.$menusPopup && !this.picker_menus) {
            this.picker_menus = syra_menus.picker.add(this.record);
            this.picker_menus.link.className += " s_cardmodal_picker", this.pagerSlot.insertBefore(this.picker_menus.link, this.pagerSlot.firstChild);
        }
        this.record._isOnApplyingChange = false;
        syra_menus.applyChange(this.record, {
            $actions: {
                $first: {
                    $isHidden: this.list.dataset.length < 2,
                    $isDisabled: this.list.paging.$startIndex == 1 && recordIndex == 0
                },
                $previous: {
                    $isHidden: this.list.dataset.length <= 2,
                    $isDisabled: this.list.paging.$startIndex == 1 && recordIndex == 0
                },
                $next: {
                    $isHidden: this.list.dataset.length <= 2,
                    $isDisabled: (this.list.paging.$startIndex + recordIndex) == this.list.dataset.length
                },
                $last: {
                    $isHidden: this.list.dataset.length < 2,
                    $isDisabled: (this.list.paging.$startIndex + recordIndex) == this.list.dataset.length
                }
            }
        });

        if (bind && this.record.menuItems && this.record.menuItems) {
            let externalAdapter = this.record.page && this.record.page.externalAdapter;
            let recordLinks: any = {};
            if (externalAdapter.getGridRecordLinks(this.record, bind, recordLinks)) {
                let cap = this.list && this.record && this.list.$capability;
                if (cap && (cap.insert || cap["delete"]) && this.record.$capability) {
                    let canCreate = this.record.$capability.insert && recordLinks.$create && recordLinks.$create.$isHidden !== true;
                    let canDelete = this.record.$capability["delete"] && recordLinks.$delete && recordLinks.$delete.$isHidden !== true;
                    if (canCreate || canDelete) {
                        syra_menus.open({
                            scope: this.record,
                            picker: null
                        });
                    }
                }
            }
        }
        this.list.builder.menuItems = this.record.menuItems;
        (window as any).syra_layout.ensureArticleVisibility(this.content, true);
    }
    dispose() {
        this.hightlight(false);
        let fields = this.content.layoutContent.getFields();
        for (let field of fields) {
            syra_item.remove(field, false, true);
        }
        syra_item.remove(this.content, true, true);
        this.record = this.content = this.pagerSlot = null;
    }
}

class CardModalController {
    disposed: boolean;
    openerBox: any;
    root: HTMLElement;
    deactivated: boolean;
    content: any;
    id: string;
    list: any

    constructor(public record: any) {
        this.openerBox = record.page;
        this.root = overHelper.createOverRoot("s_popup_syra");
        this.list = record.list;
        this.id = record.page.id + "-over";
        this.content = record.popupCard.content;
        SyraModal.push(this);
        syra_item.register(this);
        this.render();
    }
    private render() {
        ReactDom.render(<CardModal onDidMount={this.onDidMount} onClose={this.close} deactivated={this.deactivated} />, this.root);
    }
    onDidMount = (body: HTMLElement) => {
        body.appendChild(this.list.cardSlotCard);
        this.list.page.externalAdapter.onFieldClickPicker({
            field: this.record,
            pickerType: "openedCard",
            doEvent: () => { }
        });
        this.record.applyChange(this.list.ensureGlobalMetaRecord());
        this.record.applyChange(this.list.cardActiveRecord.dataset);
    }
    activate(activated: boolean) {
        this.deactivated = !activated;
        this.render();
    }
    close = () => {
        delete this.list.$popupCard;
        if (syra_site.selectedList == this.list) {
            //list.checkUniqueSelection = false; //to avoir call to checkUniqueSelection in global click
        }
        if (this.list) {
            this.list.page.externalAdapter.onFieldClickPicker({
                field: this.list.cardActiveRecord,
                pickerType: "closeCard",
                doEvent: () => {
                    this.list.cardActiveList = this.list.cardActiveRecord = this.list.cardSlotCard = this.list.cardModalController = null;
                    for (let record of this.list.records) {
                        if (record.popupCard) {
                            record.popupCard.dispose();
                            record.popupCard = null;
                        }
                    }
                }
            });
        }
        setTimeout(() => this.dispose(), 100);
    }
    dispose() {
        this.disposed = true;
        SyraModal.remove(this);
        this.root = overHelper.removeOverRoot(this.root);
        this.openerBox = this.list = null;
    }
}

export function getRecord(list: any) {
    return (list.cardActiveRecord && list.cardActiveRecord.list == list) ? list.cardActiveRecord : null;
}

export function dispose(list: any) {
    if (list.cardActiveList == list) {
        list.cardActiveList = list.cardActiveRecord = list.cardSlotCard = list.cardModalController = null;
    }
}

export function load(builder: any) {
    builder.findPopupCardField = function (name: string, record: any) {
        if (record.popupCard && record.list.cardActiveRecord == record) {
            if (isOpened(record.list) && record.list.cardModalController && !record.list.cardModalController.disposed) {
                let fields = record.boundFields[name];
                if (fields) {
                    for (let field of fields) {
                        let boxParent = field.boxParent;
                        while (boxParent && boxParent != record) {
                            if (boxParent == record.popupCard.content) {
                                return field;
                            }
                            boxParent = boxParent.boxParent;
                        }
                    }
                }
            }
        }
        return null;
    };
    builder.record_onMenuClick = function (record: any, options: any) {
        if (!record.disposed) {
            let newIndex: number;
            let startIndex: number;
            switch (options.menu.$sourceBind) {
                case "$recordCard":
                    togglePopup(record);
                    this.list.cardSlotCard && _setFocus(record.list.cardSlotCard);
                    return false;
                case "$first":
                    startIndex = 1;
                    newIndex = 0;
                    break;
                case "$previous":
                    newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() - 1);
                    break;
                case "$next":
                    newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() + 1);
                    break;
                case "$last":
                    newIndex = this.list.dataset.length - 1;
                    break;
                default:
                    return true;
            }
            startIndex = (Math.floor(newIndex / this.list.paging.getItemsPerPage()) * this.list.paging.getItemsPerPage()) + 1;
            if (startIndex != this.list.paging.$startIndex) {
                let options = this.list.clientFetchOptions || {};
                (options.params = options.params || {}).startIndex = startIndex;
                this.list.filler.fetchClientRecordSet(this.list, options);
            }
            _activatePopupCard(this.list.recordsMap[this.list.clientDataset[newIndex].$uuid]);
            return false;
        }
    };
    builder.onFocusFieldChange = function (select: any, name: string, $serverIndex: number) {
        if (isOpened(this.list)) {
            let focusRecord = this.list.recordsMap[this.list.clientDataset[$serverIndex].$uuid];
            if (focusRecord && (!this.list.cardActiveRecord || (this.list.cardActiveRecord.$uuid != focusRecord.$uuid))) {
                _activatePopupCard(focusRecord, name);
            }
        }
    };
    builder.onAfterAddRecord = function (record: any) {
        if (_hasPopupCardCapability(record.list)) {
            if (!record.list.$popupCard) {
                _makeLayout(record.list);
            }
            if (record.list.$popupCard && record.list.$popupCard.$layout.$items.length) {
                syra_menus.applyChange(record, {
                    $links: {
                        $recordCard: {
                            $title: getLocalString("flPopupView")
                        }
                    }
                });
            }
        }
    };
};
