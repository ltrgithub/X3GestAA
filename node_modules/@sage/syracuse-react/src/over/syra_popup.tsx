"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { Popup } from './popup/popup';
import { SyraDrag } from '../syra/utility/syra_drag';
import * as overHelper from './overHelper';

interface ISyraPopupProps {
    slot: HTMLElement,
    picker: HTMLElement,
    my: string,
    at: string,
    of: HTMLElement,
    onResize: (maxHeight: number) => void,
    close: () => void
}

const stack: SyraPopup[] = [];

class SyraPopup {
    root: HTMLElement;
    constructor(private props: ISyraPopupProps) {
        stack.push(this);
        this.root = overHelper.createOverRoot("s_popup_syra");
        this.resize();
    }
    resize() {
        ReactDom.render(<Popup
            my={this.props.my}
            at={this.props.at}
            of={this.props.of}
            onResize={this.props.onResize}
            onClose={this.close}
            htmlBody={this.props.slot}
        />, this.root);
    }
    close = () => {
        if (this.props) { //test on props is manadatory as there is timeout in syra for the close of popup (profile, traacker...)
            this.props.close && this.props.close();
            this.root = overHelper.removeOverRoot(this.root);
            this.props = null;
        }
        let index = stack.indexOf(this);
        if (index >= 0) {
            stack.splice(index, 1);
        }
    }
}

export function open(options: ISyraPopupProps) {
    return new SyraPopup(options);
}

export function closeAll() {
    while (stack.length) {
        stack[stack.length - 1].close();
    }
}