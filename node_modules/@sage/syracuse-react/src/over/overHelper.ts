"use strict";
import * as ReactDom from 'react-dom';
import * as Dom from '../utility/html/dom';
export const OVER_ROOT_ID = "s_app_over";

let _root: HTMLElement;

function getRoot(): HTMLElement {
    if (!_root) {
        _root = document.getElementById(OVER_ROOT_ID);
    }
    return _root;
}

export function createOverRoot(className: string): HTMLElement {
    let root = Dom.div(className, getRoot());
    bindZindex(root);
    return root;
}
export function removeOverRoot(root: HTMLElement): any {
    if (root) {
        ReactDom.unmountComponentAtNode(root);
        getRoot().removeChild(root);
        unbindZindex();
    }
    return null;
}

export interface IPosition {
    my: string,
    at: string,
    of: HTMLElement,
    within?: HTMLElement
}

export function position(node: HTMLElement, options: IPosition) {
    if (options.of) {
        ($(node) as any).position({
            my: Dom.rtl.apply(options.my),
            at: Dom.rtl.apply(options.at),
            of: $(options.of),
            collision: "flipfit",
            within: $(options.within || Dom.site.body.node)
        });
    }
}


const ZINDEX_START = 100;
let zIndex: number = ZINDEX_START;
let zindexCount = 0;
export function bindZindex(node?: HTMLElement): number {
    ++zindexCount;
    zIndex = (zindexCount == 1) ? ZINDEX_START : ++zIndex;
    if (node) {
        node.style.zIndex = zIndex.toString();
    }
    return zIndex;
}

export function unbindZindex() {
    zindexCount = Math.max(0, --zindexCount);
}