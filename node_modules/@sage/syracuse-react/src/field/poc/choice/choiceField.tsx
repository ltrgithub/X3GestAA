"use strict";
import * as React from 'react';
import * as Sdata from '../../../dataStore/sdata';
import { IFieldProps, IDetailFieldProps, getFieldId, DetailField, IFieldState } from '../field';
import { Diagnose } from '../common/diagnose';
import { Description } from '../common/description';
import { Radio } from './radio';


export class ChoiceField extends React.Component<IFieldProps, {}> {
	static get sdataType() {
		return Sdata.type.choice;
	}
	render() {
		if (this.props.hidden) {
			return <noscript />;
		}
		let choices = this.props.meta && this.props.meta.$value;
		choices = choices && choices.$enum
		if (this.props.editable) {
			return <ChoiceRadios {...this.props} choices={choices} />;
		}
		let valueTitle: string;
		if (choices) {
			for (let choice of choices) {
				if (choice.$value == this.props.value) {
					valueTitle = choice.$title;
					break;
				}
			}
		}
		return <DetailField {...this.props as IDetailFieldProps}>{valueTitle}</DetailField>;
	}
}

interface IChoiceRadiosProps extends IFieldProps {
	choices: Sdata.IChoiceEnumItem[]
}

export class ChoiceRadios extends React.Component<IChoiceRadiosProps, IFieldState> {
	id: string;
	constructor(props: IChoiceRadiosProps, context: any) {
		super(props, context);
		this.id = getFieldId();
		this.state = {
			value: props.value
		};
	}
	shouldComponentUpdate(nextProps: any, nextState: any) {
		return true;
	}
	componentWillReceiveProps(nextProps: any) {
		if (nextProps.value != this.state.value) {
			this.setState({
				value: nextProps.value
			});
		}
	}
	handleRadioChange = (value: any) => {
		this.props.onChange && this.props.onChange(value);
		this.setState({
			value: value
		});
	}
	render() {
		let css = this.props.className || "";
		if (this.props.disabled) {
			css += " s_disabled";
		}
		let bottom: any;
		let diagnose = this.props.diagnoses && this.props.diagnoses[0];
		if (diagnose) {
			css += " s_has_" + diagnose.$severity;
			bottom = <Diagnose diagnose={diagnose} />;
		}
		else {
			if (this.props.description) {
				bottom = <Description description={this.props.description} />;
			}
		}
		let radios: any[];
		if (this.props.choices) {
			radios = []
			for (let choice of this.props.choices) {
				radios.push(<Radio
					key={"choice_" + choice.$value}
					id={this.id + "_" + choice.$value}
					value={choice.$value}
					title={choice.$title}
					checked={choice.$value == this.state.value}
					disabled={this.props.disabled}
					readOnly={this.props.readOnly}
					onChange={this.handleRadioChange}
				/>);
			}
		}
		return <div className={"s_edit " + css}>
			<label className={"s_choice_label " + css}>{this.props.title}</label>
			<form action="#">{radios}</form>
			{bottom}
		</div>;
	}
}