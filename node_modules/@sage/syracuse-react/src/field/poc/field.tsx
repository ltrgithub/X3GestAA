"use strict";
import * as React from 'react';
import * as Sdata from '../../dataStore/sdata';
import { Icon } from '../../common/icon/icon';
import { Diagnose } from './common/diagnose';
import { Description } from './common/description';
import Store from '../../dataStore/store';
export interface IFieldProps {
    key?: string,
    store?: Store,
    useFlowLayout?: boolean,
    className?: string,
    title?: string,
    description?: string,
    hidden?: boolean
    mandatory?: boolean,
    disabled?: boolean,
    readOnly?: boolean,
    diagnoses?: Sdata.IDiagnose[],
    editable?: boolean,
    floatingTitle?: boolean,
    bind?: string,
    meta?: any,
    value?: any,
    onChange?: (value: any) => boolean
}

export interface IFieldState {
    value?: any,
    focused?: boolean,
}

interface IEditFieldProps extends IFieldProps {
    inputType: string
    titleIcon?: string;
}

interface IState extends IFieldState {
    active?: boolean
}

let _lastId = 0;
export function getFieldId() {
    return "field" + (++_lastId);
}
export function getCssStatus(disabled: boolean, focused: boolean, active?: boolean) {
    let css = ""
    if (active) {
        css += " s_active";
    }
    if (disabled) {
        css += " s_disabled";
    }
    else {
        if (focused) {
            css += " s_focused";
        }
    }
    return css;
}

export interface IEditFieldLabelProps {
    className: string,
    id?: string,
    title: string,
    titleIcon?: string,
    floatingTitle?: boolean,
    mandatory?: boolean
    active?: boolean
    disabled?: boolean
    focused?: boolean
}
export class EditFieldLabel extends React.Component<IEditFieldLabelProps, {}> {
    render() {
        let status = getCssStatus(this.props.disabled, this.props.focused, this.props.active);
        let css = "s_edit_label " + this.props.className + status;
        if (this.props.floatingTitle !== false) {
            css += " s_edit_label_floating";
        }
        return <label htmlFor={this.props.id} className={css}>
            {this.props.titleIcon && <Icon name={this.props.titleIcon} />}
            {this.props.titleIcon ? (" " + this.props.title) : this.props.title}
            {this.props.mandatory && <Icon name="asterisk" className={"s_field_mandatory" + status} />}
        </label>;
    }
}

export class EditField extends React.Component<IEditFieldProps, IState> {
    id: string;
    constructor(props: IEditFieldProps, context: any) {
        super(props, context);
        this.id = getFieldId();
        this.state = {
            value: props.value
        };
    }
    componentWillReceiveProps(nextProps: any) {
        if (nextProps.value != this.state.value) {
            this.setState({
                value: nextProps.value
            });
        }
        if (!this.state.active && nextProps.value !== "") {
            this.setState({
                active: true
            });
        }
    }
    onFocus = () => {
        this.setState({
            focused: true
        });
    }
    onChange = (event: any) => {
        let value = event.target.value;
        this.setState({
            value: value
        });
        this.props.onChange && this.props.onChange(value);
    }
    onBlur = (event: any) => {
        this.setState({
            focused: false,
            active: event.currentTarget.value.length > 0
        });
    }
    renderInput(css: string) {
        let props: React.AllHTMLAttributes<{}> = {
            id: this.id,
            type: this.props.inputType,
            spellCheck: false,
            autoCorrect: "off",
            value: this.state.value != null ? this.state.value : "",
            disabled: this.props.disabled,
            readOnly: this.props.readOnly,
            className: css
        }
        if (!props.disabled && !props.readOnly) {
            props.onChange = this.onChange;
        }
        if (!props.disabled) {
            props.onFocus = this.onFocus;
            props.onBlur = this.onBlur;
        }
        return React.createElement("input", props);
    }
    render() {
        let status = getCssStatus(this.props.disabled, this.state.focused, this.state.active);
        let css = (this.props.className || "") + status;
        let bottom: any;
        let diagnose = this.props.diagnoses && this.props.diagnoses[0];
        if (diagnose) {
            css += " s_has_" + diagnose.$severity;
            bottom = <Diagnose diagnose={diagnose} />;
        }
        else {
            if (this.props.description) {
                bottom = <Description description={this.props.description} />;
            }
        }
        return <div className={"s_edit " + css}>
            {this.renderInput("s_edit_input " + css)}
            <EditFieldLabel {...this.props as IEditFieldLabelProps} active={this.state.active} focused={this.state.focused} />
            {bottom}
        </div>
    }
}


export interface IDetailFieldProps {
    className: string,
    useFlowLayout: boolean,
    value: any,
    title: string,
    description: string,
}

export class DetailField extends React.Component<IDetailFieldProps, {}> {
    render() {
        let cssSlot: string, cssLabel: string, cssValue: string;
        let css = this.props.className || "";
        if (this.props.useFlowLayout) {
            cssSlot = "s_flow_field" + css;
            cssLabel = "s_flow_field_label" + css;
            cssValue = "s_flow_field_value" + css + css;
        }
        else {
            cssSlot = "s_field row" + css;
            cssLabel = "s_field_label col-sm-3" + css;
            cssValue = "s_field_value col-sm-9" + css;
        }
        let value = this.props.children;
        return <div className={cssSlot}>
            <div className={cssLabel}>{this.props.title + ":"}</div>
            <div className={cssValue}>{value}{value && <Description description={this.props.description} />}</div>
        </div>;
    }
}