"use strict";
import * as React from 'react';
import Scrollbar from '../../../common/scroll/scrollbar/scrollbar';
import * as Dom from '../../../utility/html/dom';
import { IFieldProps, getFieldId, DetailField } from '../field';

interface IRowProps {
	selected: boolean,
	css: string
	value: any,
	onClick?: (record: any, row: Row, event: React.MouseEvent<{}>) => void,
	onSelection?: (record: any) => void
}

export class Row extends React.Component<IRowProps, {}> {
	onClick = (event: React.MouseEvent<{}>) => {
		this.props.onClick && this.props.onClick(this.props.value, this, event);
	}
	render() {
		let record = this.props.value;
		return <li key={"arra_li" + record.$uuid} className={this.props.css + "_li"} >
			<a onClick={this.onClick}
				key={record.$uuid}
				className={this.props.css + "_btn_default " + (this.props.selected ? Dom.css.selected : "")}>{record.$value}
			</a>
		</li>;
	}
}
interface ArrayFieldProps extends IFieldProps {
	selectedRecord: any,
	onRecordSelected?: (record: any) => void;
	height: string;
}
export default class ArrayField extends React.Component<ArrayFieldProps, {}> {
	private css: string;
	constructor(props: any, context: any) {
		super(props, context);
		this.css = props.className || "s_list_primary";
	}
	onRowClick = (selected: any) => {
		this.setState({
			value: this.props.value
		});
		this.props.onRecordSelected && this.props.onRecordSelected(selected);
	}
	onSelection = (selected: any) => {
		this.props.onRecordSelected && this.props.onRecordSelected(selected)
	}
	render() {
		let rows: any[] = [];
		if (this.props.value) {
			let records: Array<any> = this.props.value as Array<any>;
			for (let record of records) {
				rows.push(<Row
					key={record.$uuid}
					css={this.css}
					value={record}
					onClick={this.onRowClick}
					selected={this.props.selectedRecord == record}
					onSelection={this.onSelection} />);
			}
		}
		return <Scrollbar height={this.props.height}>
			<ul className={"s_list_ul " + this.css + "_ul"}>
				{rows}
			</ul>
		</Scrollbar>;
	}
}