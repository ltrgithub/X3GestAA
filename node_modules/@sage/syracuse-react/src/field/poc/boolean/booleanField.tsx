"use strict";
import * as React from 'react';
import * as Sdata from '../../../dataStore/sdata';
import { IFieldProps, IDetailFieldProps, IFieldState, DetailField, getFieldId, getCssStatus } from '../field';
import { Icon } from '../../../common/icon/icon';
import { Diagnose } from '../common/diagnose';
import { Description } from '../common/description';
import './booleanField.less';
export class BooleanEdit extends React.Component<IFieldProps, IFieldState> {
	id: string;
	constructor(props: IFieldProps, context: any) {
		super(props, context);
		this.id = getFieldId();
		this.state = {
			value: props.value
		};
	}
	componentWillReceiveProps(nextProps: any) {
		if (nextProps.value != this.state.value) {
			this.setState({
				value: nextProps.value
			});
		}
	}
	onFocus = () => {
		this.setState({
			focused: true
		});
	}
	onChange = (event: any) => {
		let value = event.target.checked;
		this.setState({
			value: value
		});
		this.props.onChange && this.props.onChange(value);
	}
	onBlur = () => {
		this.setState({
			focused: false
		});
	}
	renderInput() {
		let props: React.HTMLAttributes<{}> = {
			id: this.id,
			type: "checkbox",
			checked: this.state.value || false,
			className: "s_boolean_input",
			disabled: this.props.disabled,
			readOnly: this.props.readOnly
		}
		if (!props.disabled && !props.readOnly) {
			props.onChange = this.onChange;
		}
		if (!props.disabled) {
			props.onFocus = this.onFocus;
			props.onBlur = this.onBlur;
		}
		return React.createElement("input", props);
	}
	render() {
		let status = getCssStatus(this.props.disabled, this.state.focused);
		let css = (this.props.className || "") + status;
		let bottom: any;
		let diagnose = this.props.diagnoses && this.props.diagnoses[0];
		if (diagnose) {
			css += " s_has_" + diagnose.$severity;
			bottom = <Diagnose diagnose={diagnose} />;
		}
		else {
			if (this.props.description) {
				bottom = <Description description={this.props.description} />;
			}
		}
		let cssValue = "s_boolean_check " + css;
		if (this.state.value) {
			cssValue += " s_checked";
		}
		return <div className={"s_boolean_edit " + css}>
			{this.renderInput()}
			<label htmlFor={this.id} className={"s_boolean_label " + css}>
				<i className={cssValue}>{" "}</i>
				<i className={"s_boolean_focus" + status}>{" "}</i>
				{this.props.title}
			</label>
			{bottom}
		</div>;
	}
}

export class BooleanField extends React.Component<IFieldProps, {}> {
	static get sdataType() {
		return Sdata.type.boolean;
	}
	render() {
		if (this.props.hidden) {
			return <noscript />;
		}
		if (this.props.editable) {
			return <BooleanEdit {...this.props} />
		}
		//{false && FontIcon.render(this.state.value ? "done" : "crop_square", "s_boolean_check" + (this.state.value ? " s_checked" : "")) }
		return <DetailField {...this.props as IDetailFieldProps}>
			<Icon name={this.props.value ? "check" : "close"} />
		</DetailField>;
	}
}