"use strict";
import * as Utility from './utility';
import { core } from '../syra/utility/core';

function logArray(field: any) {
    if (field.$field.$isFusionNavigationList) {
        field.domItem.setAttribute("data-s-left-list", "1");
    }
    if (field.builder.allColumns) {
        for (let mm = 0, kk = field.builder.allColumns.length; mm < kk; mm++) {
            let col = field.builder.allColumns[mm];
            if (col.titleCell) {
                Utility.logHidden(col.titleCell, col.$isHidden);
                col.titleCell.setAttribute("data-s-list-col", mm);
                col.titleCell.setAttribute("data-s-list-col-title", col.titleText);
                if (col.$bind !== undefined) {
                    col.titleCell.setAttribute("data-s-list-col-bind", col.$bind);
                }
                if (col.key !== undefined) {
                    col.titleCell.setAttribute("data-s-list-col-key", col.key);
                }
            }
        }
    }
    if (field.$item.$format) {
        field.domItem.setAttribute("data-s-list-format", field.$item.$format);
    }
    field.treeDecorator && logTree(field);
}

function logTree(list: any) {
    if (list.treeDecorator) {
        let nodes = list.treeDecorator._nodes;
        if (nodes) {
            for (let id in nodes) {
                let node = nodes[id];
                if (node && node.slot && node.parentUiid !== undefined) {
                    node.slot.setAttribute("data-s-tree-parent-node", node.parentUiid);
                }
            }
        }
    }
}

export function logValue(field: any, target: HTMLElement) {
    if (target) {
        field.getValue && target.setAttribute("data-s-value", field.getInputValue ? field.getInputValue() : field.getValue());
        field.getDisplayText && target.setAttribute("data-s-value-display", field.getDisplayText());
    }
}

export function logField(field: any) {
    if (field.domItem) {
        Utility.logHidden(field.domItem, field.$isHidden);
        field.domItem.setAttribute("data-s-field", field.id);
        field.textArea && field.textArea.setAttribute("data-s-field", field.id);
        field.confirmInput && field.confirmInput.setAttribute("data-s-field", field.id);
        if (field.$isMandatory !== undefined) {
            if (field.$isMandatory) {
                field.domItem.setAttribute("data-s-mandatory", 1);
            }
            else {
                if (field.domItem.hasAttribute("data-s-mandatory")) {
                    field.domItem.removeAttribute("data-s-mandatory");
                }
            }
        }

        if (field.getTitle) {
            field.domTitle && field.domTitle.setAttribute("data-s-field-title", field.getTitle());
            field.domItem.setAttribute("data-s-title", field.domItem.syra_field_title = field.getTitle());
        }

        field.domItem.setAttribute("data-s-field-edit-mode", field.$isEditMode ? 1 : 0);
        field.domItem.id = field.id;
        field.domItem.setAttribute("data-s-type", field.$field.$type);
        if (field.$field.$type == "application/x-reference") {
            if (field.refDescriptionItem) {
                field.refDescriptionItem.setAttribute("data-s-ref-desc", "1");
            }
        }

        field.domItem.setAttribute("data-s-field-bind", field.$item.$bind || "");
        field.$field.$X3Name && field.domItem.setAttribute("data-s-field-x3Name", field.$field.$X3Name);

        field.descriptionItem && field.descriptionItem.setAttribute("data-s-description", field.descriptionText);

        logValue(field, field.domItem);
        logValue(field, field.input || field._dataValue);

        var target = field.$isEditMode ? field.input : field._dataValue;
        if (target) {
            target.setAttribute("data-s-bind", field.$item.$bind || "");
            field.$field.$X3Name && target.setAttribute("data-s-x3Name", field.$field.$X3Name);
        }
        Utility.logPickers(field);
        field.choiceFormat && logChoice(field);

        if (field.$valueStyle) {
            var target = field.customStyleTarget || (field.input ? field.input : field._dataValue);
            target && target.setAttribute("data-s-value-style", field.$valueStyle);
        }
        field.isArrayField && logArray(field);

        switch (field.$field.$type) {
            case "text/rtf":
            case "text/html":
                if (!field.qualityText) {
                    var div = field.qualityText = document.createElement("div");
                    div.setAttribute("data-s-rich-edit", field.$item.$bind);
                    div.style.display = "none"
                    field.domItem.appendChild(div);
                }
                var $area = field.extendWidget._editor;
                $area = $area && $area.$area;
                if ($area) {
                    field.qualityText.innerHTML = core.escape($area.val());
                }
                break;
        }
    }
}

export function logChoice(field: any) {
    if (field.choiceFormat) {
        field.domItem.setAttribute("data-s-choice-format", field.$item.$format);
        if (field.$item.$format == "$combo") {
            if (field.combo.list) {
                field.combo.list.scrollSlot.setAttribute("data-s-choice-popup", field.id);
                for (let item of field.combo.list.allItems) {
                    logChoiceItem(item.link, item.$enum);
                }
            }
        }
        else {
            if (field._choices) {
                for (let ii = 0, jj = field._choices.length; ii < jj; ii++) {
                    logChoiceItem(field._choices[ii].checkBox.input, field.$enum[ii]);
                }
            }
        }
    }
}

function logChoiceItem(target: any, $enum: any) {
    target.setAttribute("data-s-choice-item-value", $enum.$value);
    target.setAttribute("data-s-choice-item-title", $enum.$title);
}
