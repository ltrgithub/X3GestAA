"use strict";
import * as Utility from './utility';
import * as Dom from '../utility/html/dom';
import * as Field from './field';
import * as Page from './page';

export let enabled: boolean;
export let robotMode: boolean;
let component: any;

export function bindComponent(comp: any) {
    component = comp;
}

export function activate(robot: boolean, on?: boolean) {
    robotMode = robot;
    enabled = on || robotMode;
}
export function logRequestCount(count?: number) {
    enabled && component.setState({
        requestCount: count
    });
}
export function logLock(value?: number) {
    enabled && component.setState({
        lock: value
    });
}
export function logFocus(field: any) {
    enabled && component.setState({
        foucusId: field.id
    });
}

export function listFilter(field: any, btns: any) {
    if (enabled && field.page && field.page.filter_popup) {
        field.page.filter_popup.root.setAttribute("data-s-dialog", "filter");
        for (let btn of btns) {
            if (btn.link) {
                if (btn.operator == field.filter_selectedOperator) {
                    btn.link.setAttribute("data-s-list-filter-selected", btn.operator);
                }
                btn.link.setAttribute("data-s-list-filter-op", btn.operator);
                btn.link.setAttribute("data-s-list-filter-title", btn.text);
            }
        }
    }
}
export function page_fetch(page: any, status: any) {
    enabled && Page.logFetch(page, status);
}
export function page_endChange(page: any) {
    enabled && Page.logEndChange(page);
}
export function page_onAfterLoad(page: any) {
    if (enabled) {
        page.qualityIsLoaded = true;
        Page.logEndChange(page);
    }
}


export function logChoice(field: any) {
    enabled && Field.logChoice(field);
}
export function openPopupMenu(group: any) {
    if (enabled) {
        group.body.setAttribute("data-s-menu-popup", group.contextField.id);
        let items = group.getMenuItems();
        for (let item of items) {
            this.logMenu(item);
        }
    }
}
export function logMenu(menu: any) {
    enabled && Utility.logMenu(menu);
}
export function logSection(section: any) {
    enabled && Utility.logSection(section);
}


export function copyDataProps(sourceProps: any, targetProps: any) {
    for (let key in sourceProps) {
        if (key.indexOf("data-s-") >= 0) {
            targetProps[key] = (sourceProps as any)[key];
        }
    }
}