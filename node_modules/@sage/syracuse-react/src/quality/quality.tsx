"use strict";
import * as React from 'react';
import * as qualityController from './qualityController';
import { Profile } from '../profile/profile';

export default class Quality extends React.Component<{
    profile: Profile,
    robotMode: boolean,
    onSwitchRobotMode: () => void
}, {
        robotOn?: boolean,
        requestCount?: number
        lock?: number,
        foucusId?: string
    }> {
    onSwitchRobotMode = () => {
        this.props.onSwitchRobotMode();
        //security for synchrone problem with robot test
        qualityController.activate(true, this.props.profile && this.props.profile.enableTestRobot);
        this.setState({
            robotOn: true
        });
    }
    componentDidMount() {
        qualityController.bindComponent(this);
    }
    componentWillUnmount() {
        qualityController.bindComponent(null);
    }
    render() {
        let robotOn = this.props.robotMode || (this.state && this.state.robotOn);
        qualityController.activate(robotOn, this.props.profile && this.props.profile.enableTestRobot);
        if (qualityController.enabled) {
            let profile = this.props.profile;
            return <aside
                id="s-site-quality"
                data-s-robot-on={robotOn ? 1 : 0}
                onClick={this.onSwitchRobotMode}
                data-s-local={profile.selectedLocale && (profile.selectedLocale.description + " " + profile.selectedLocale.code) || ""}
                data-s-role={(profile.selectedRole && profile.selectedRole.description) || ""}
                data-s-endpoint={(profile.selectedEndpoint && profile.selectedEndpoint.description) || ""}
                data-s-request-count={this.state && this.state.requestCount || 0}
                data-s-uilock={this.state && this.state.lock || 0}
                data-s-focus={this.state && this.state.foucusId}
            />;
        }
        return null;
    }
}