"use strict";
import * as Events from '../../event/events';
import { syra_site } from '../../syra/utility/syra_site';

export interface IDragProps {
    delay?: boolean,
    isDragging?: boolean,
    handle: HTMLElement,
    exclude?: HTMLElement[],
    mousedown?: (event: MouseEvent) => void,
    mousemove?: (event: MouseEvent) => void,
    start: (event: MouseEvent) => void,
    drag: (event: MouseEvent) => void,
    stop?: (event: MouseEvent) => void
}

export class Drag {
    private timeout: number;
    constructor(private props: IDragProps) {
        this.subscribeEvents(true);
    }
    private onMousemove = (event: MouseEvent) => {
        event.preventDefault();
        this.props && this.props.drag(event);
    }
    private onMouseup = (event: MouseEvent) => {
        this.subscribeEvents(false);
        let isDragging = this.props.isDragging !== false;
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
            this.props.drag(event);
        }
        this.props.stop && this.props.stop(event);
        this.dispose();
        if (isDragging) {
            syra_site.ignoreClick = event.target;
        }
    }
    subscribeEvents(subscribe: boolean) {
        if (subscribe) {
            this.timeout = window.setTimeout(() => {
                Events.mousemove.subscribe(this.onMousemove);
            });
            Events.mouseup.subscribe(this.onMouseup);
        }
        else {
            Events.mousemove.unsubscribe(this.onMousemove);
            Events.mouseup.unsubscribe(this.onMouseup);
        }
    }

    dispose() {
        this.timeout && clearTimeout(this.timeout);
        this.subscribeEvents(false);
    }
}