"use strict";
import { ScrollAxe } from './scrollAxe';
import { browser } from '../../../utility/browser/browser';

export class Axes {
    private y: ScrollAxe;
    private x: ScrollAxe;
    private listener_wheel: (ev: WheelEvent) => any;
    private listener_scroll: (ev: UIEvent) => any;
    private content: HTMLElement;

    constructor(private onScrollHandler: (ev: UIEvent) => void, css: string) {
        if (!browser.isSafari) {
            this.y = new ScrollAxe("y", css);
            this.x = new ScrollAxe("x", css);
        }
    }
    onWheel = (ev: WheelEvent) => {
        if (ev.deltaMode === 0) //pixel
        {
            this.content.scrollTop += ev.deltaY;
            this.content.scrollLeft += ev.deltaX;
        }
        else { //line
            let htmlEl = ev.target as HTMLElement;
            let h = htmlEl ? parseInt(window.getComputedStyle(htmlEl).lineHeight, 10) : 20;
            this.content.scrollTop += ev.deltaY * h;
            this.content.scrollLeft += ev.deltaX * h;
        }
    }
    private listen_wheel(on: boolean) {
        if (this.content) {
            if (on) {
                if (!this.listener_wheel) {
                    this.content.addEventListener("wheel", this.listener_wheel = this.onWheel, false);
                }
            } else {
                this.listener_wheel && this.content.removeEventListener("wheel", this.listener_wheel);
                delete this.listener_wheel;
            }
        }
    }
    onScroll = (ev: UIEvent) => {
        if (this.y) {
            this.y.moveThumb();
            this.x.moveThumb();
        }
        this.onScrollHandler(ev);
    }
    listen_scroll(on: boolean) {
        if (this.content) {
            if (on) {
                if (!this.listener_scroll) {
                    this.content.addEventListener("scroll", this.listener_scroll = this.onScroll, false);
                }
            } else {
                this.listener_scroll && this.content.removeEventListener("scroll", this.onScroll);
                delete this.listener_scroll;
            }
        }
    }
    resize(content: HTMLElement) {
        if (this.content != content) {
            this.content = content;
            this.content.style.overflow = browser.isSafari ? "auto" : "hidden";
        }
        if (this.y) {
            this.y.resize(this.content);
            this.x.resize(this.content);
            this.listen_wheel(this.visible);
        }
        this.listen_scroll(this.visible);
    }
    get visible(): boolean {
        if (this.y) {
            return this.x.visible || this.y.visible;
        }
        else {
            return (this.content.clientHeight != this.content.scrollHeight) || (this.content.clientWidth != this.content.scrollWidth);
        }
    }
    highlight(on: boolean) {
        if (this.y) {
            this.y.highlight(on);
            this.x.highlight(on);
        }
    }
    renderX() {
        return this.x && this.x.render()
    }
    renderY() {
        return this.y && this.y.render()
    }
    dispose() {
        if (this.y) {
            this.y.dispose();
            this.x.dispose();
            this.listen_wheel(false);
        }
        this.listen_scroll(false);
        this.content = this.onScrollHandler = null;
    }
}
