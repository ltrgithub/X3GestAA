"use strict";
import * as React from 'react';
import * as Events from '../../../event/events';
import { Axes } from './axes';
import './scrollbar.less';

interface IProps {
	onScroll?: (ev: UIEvent) => any;
	width?: string;
	height?: string;
	cssAxe?: string
}

export default class Scrollbar extends React.Component<IProps, {}> {
	private slot: HTMLElement;
	private content: HTMLElement;
	private timeout_resize: number;
	private axes: Axes;

	constructor(props: IProps, context: any) {
		super(props, context);
		this.axes = new Axes(this.onScroll, props.cssAxe);
	}
	onScroll = (ev: UIEvent) => {
		this.props.onScroll && this.props.onScroll(ev);
	}
	resize = () => {
		clearTimeout(this.timeout_resize);
		this.timeout_resize = window.setTimeout(() => {
			if (!this.content || !this.content.parentNode) {
				this.content = this.slot.childNodes[0] as HTMLElement;				
			}
			this.axes.resize(this.content);
		}, 100);
	}
	componentWillUpdate() {
		clearTimeout(this.timeout_resize);
	}
	componentDidUpdate() {
		this.resize();
	}
	componentDidMount() {
		Events.resize.subscribe(this.resize);
	}
	componentWillUnmount() {
		clearTimeout(this.timeout_resize);
		Events.resize.unsubscribe(this.resize);
		this.axes.dispose();
	}
	onMouseEnter = () => {
		this.axes.highlight(true);
	}
	onMouseLeave = () => {
		this.axes.highlight(false);
	}
	render() {
		let style: any = {};
		if (this.props.width) {
			style.width = this.props.width;
		}
		if (this.props.height) {
			style.height = this.props.height;
		}
		return <div className='s_scrollbar_slot'
			onMouseEnter={this.onMouseEnter}
			onMouseLeave={this.onMouseLeave}
			ref={(node) => this.slot = node}
			style={style}>
			{this.props.children}
			{this.axes.renderY()}
			{this.axes.renderX()}
		</div>
	}
}