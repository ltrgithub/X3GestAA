"use strict";
import * as React from 'react';
import  {getLocalString} from '../../../culture/localString';
import { Link } from '../../../link/link';
import * as Events from '../../../event/events';
import './caroussel.less';

interface ICarousselIcons {
	up: string,
	down: string
}

interface IProps {
	xAxis?: Boolean
}
interface IState {
	upVisible?: boolean,
	downVisible?: boolean,
	upDisabled?: boolean,
	downDisabled?: boolean
}

export class Caroussel extends React.Component<IProps, IState> {
	body: HTMLElement;
	mouseTimer: number;
	clickDisabled: boolean;
	clickCount: number;
	increment: number;
	constructor(props: any, context: any) {
		super(props, context);
		this.state = {};
		this.clickCount = this.increment = 0;
	}
	handleMouseUp = () => {
		this.clearMouseTimer();
		if (this.clickCount) {
			this.clickDisabled = true;
		}
	}
	handleUpMouseDown = () => {
		this.onMouseDown(true);
	}
	handleUpClick = () => {
		this.onClick(true);
	}
	handleDownMouseDown = () => {
		this.onMouseDown(false);
	}
	handleDownClick = () => {
		this.onClick(false);
	}
	clearMouseTimer() {
		if (this.mouseTimer) {
			clearInterval(this.mouseTimer);
			this.mouseTimer = null;
		}
	}
	onMouseDown(up: boolean) {
		this.clearMouseTimer();
		if (this.clickDisabled) {
			delete this.clickDisabled;
		}
		this.onClick(up);
		this.clickCount = 1;

		this.mouseTimer = window.setInterval(() => {
			this.clickCount++;
			this.onClick(up);
		}, 500);
	}
	onClick(up: boolean) {
		if (!this.clickDisabled) {
			if (this.props.xAxis) {
				if (up) {
					this.body.scrollLeft -= this.increment;
				}
				else {
					this.body.scrollLeft += this.increment;
				}
			}
			else {
				if (up) {
					this.body.scrollTop -= this.increment;
				}
				else {
					this.body.scrollTop += this.increment;
				}

			}
			this.checkButtons();
		}
		delete this.clickDisabled;
	}
	checkButtons() {
		let diff = (this.props.xAxis) ? (this.body.scrollWidth - this.body.clientWidth) : (this.body.scrollHeight - this.body.clientHeight);
		let value = (this.props.xAxis) ? this.body.scrollLeft : Math.ceil(this.body.scrollTop);
		this.setState({
			upVisible: diff > 0,
			downVisible: diff > 0,
			upDisabled: value == 0,
			downDisabled: (value - diff) >= 0
		});
	}
	resize = () => {
		if (this.body) {
			let node = this.body.childNodes[0] as HTMLElement;
			var rect = node.getBoundingClientRect();
			var style = window.getComputedStyle(node, null);
			this.increment = this.props.xAxis ? rect.width : rect.height + parseFloat(style.getPropertyValue("margin-bottom"));
			this.checkButtons();
		}
	}
	componentDidMount() {
		if (this.body) {
			Events.resize.subscribe(this.resize);
			setTimeout(() => {
				this.resize();
			}, 300);
		}
	}
	componentWillUnmount() {
		this.clearMouseTimer();
		if (this.body) {
			Events.resize.unsubscribe(this.resize);
			this.body = null;
		}
	}
	handleWheel = (event: React.WheelEvent<{}>) => {
		if (this.props.xAxis) {
			this.body.scrollLeft += event.deltaX;
		} else {
			if (this.increment) {
				if (event.deltaY > 0) {
					this.body.scrollTop += this.increment;
				} else
					if (event.deltaY < 0) {
						this.body.scrollTop -= this.increment;
					}
			} else {
				this.body.scrollTop += event.deltaY;
			}

		}
		this.checkButtons();
	}
	renderUp() {
		if (this.state.upVisible) {
			return <Link title={getLocalString("caroussel_up")}
				disabled={this.state.upDisabled}
				icon={this.props.xAxis ? "prev" : "dir_up"}
				className="s_caroussel_btn_up"
				onClick={this.handleUpClick}
				onMouseDown={this.handleUpMouseDown}
				onMouseUp={this.handleMouseUp} />;
		}
	}
	renderDown() {
		if (this.state.downVisible) {
			return <Link title={getLocalString("caroussel_down")}
				disabled={this.state.downDisabled}
				icon={this.props.xAxis ? "next" : "dir_down"}
				className="s_caroussel_btn_down"
				onClick={this.handleDownClick}
				onMouseDown={this.handleDownMouseDown}
				onMouseUp={this.handleMouseUp} />;
		}
	}
	render() {
		return <div className="s_carousel">
			{this.renderUp()}
			<div className="s_carousel_body"
				ref={(node) => this.body = node}
				onWheel={this.handleWheel}>
				{this.props.children}
			</div>
			{this.renderDown()}
		</div>
	}
}