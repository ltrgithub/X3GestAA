"use strict";
import * as React from 'react';
import * as Dom from '../../utility/html/dom';
import * as Events from '../../event/events';
import { SplitterOpener, Position } from './splitterOpener';
import './splitter.less';

const FLOATING_MAX_WIDTH = 992;

export default class Splitter extends React.Component<{
    position?: Position,
    onCollapse?: (collapsed: boolean, floating: boolean) => void
}, {
        collapsed: boolean,
        floating?: boolean
    }> {
    private root: HTMLElement;
    private opener: SplitterOpener;

    constructor(props: any, options: any) {
        super(props, options);
        this.state = {
            collapsed: false,
            floating: false
        };
    }
    handlerResize = () => {
        let floating = FLOATING_MAX_WIDTH > document.body.clientWidth;
        if (floating != this.state.floating) {
            if (!this.props.onCollapse || this.props.onCollapse(!this.state.collapsed, floating)) {
                this.setState({
                    collapsed: floating,
                    floating: floating
                });
                if (floating) {
                    Events.click.subscribe(this.onGlobalClick);
                }
                else {
                    Events.click.unsubscribe(this.onGlobalClick);
                }
            }
        }
    }
    componentDidMount() {
        Events.resize.subscribe(this.handlerResize);
    }
    onGlobalClick = (ev: MouseEvent) => {
        if (this.opener && !Dom.isParent(this.opener.root, ev.target as HTMLElement)
            && !Dom.isParent(this.root, ev.target as HTMLElement)) {
            this.collapseBar(true);
        }
    }
    componentWillUnmount() {
        Events.click.unsubscribe(this.onGlobalClick);
        Events.resize.unsubscribe(this.handlerResize);
        this.root = this.opener = null;
    }
    collapseBar(collapse: boolean) {
        if (this.state.collapsed != collapse) {
            if (!this.props.onCollapse || this.props.onCollapse(collapse, this.state.floating)) {
                this.setState({
                    collapsed: collapse
                });
            }
        }
    }
    renderOpener() {
        return <SplitterOpener ref={(item) => this.opener = item} position={this.props.position}
            collapsed={this.state.collapsed}
            floating={this.state.floating} onClick={() => {
                this.collapseBar(!this.state.collapsed);
            }} />;
    }
    render() {
        let navcss = "s_splitter_nav_" + this.props.position;
        let contentCss = "s_splitter_content";
        if (this.state.collapsed || this.state.floating) {
            if (this.state.collapsed) {
                navcss += " s_collapsed";
            }
            if (this.state.floating) {
                navcss += " s_splitter_nav_float";
            }
        }
        else {
            contentCss += " s_has_left_sidebar";
        }
        let children: any[] = this.props.children as any[]
        let content = children.slice(1);
        return <div className="s_splitter">
            <nav ref={(item) => this.root = item} className={navcss}>
                <div className="s_splitter_nav_header" />
                <div className="s_splitter_nav_body">
                    {this.renderOpener()}
                    {children[0]}
                </div>
            </nav>
            <div className={contentCss}>{content}</div>
        </div>;
    }
}