"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Events from '../../event/events';
import './resizer.less';
export type Direction = "n" | "ne" | "e" | "se" | "s" | "sw" | "w" | "nw";

const DEFAULT: Direction[] = ["n", "e", "s", "w"];

export interface IResizing {
	dir: string,
	deltaX: number,
	deltaY: number,
	pageX: number,
	pageY: number,
	width: number,
	height: number,
	newWidth: number,
	newHeight: number
};


class ResizerController implements IResizing {
	private onStop: () => void;
	private body: HTMLElement;
	public deltaX: number = 0;
	public deltaY: number = 0;
	public width: number;
	public height: number;
	public newWidth: number;
	public newHeight: number;
	public pageX: number;
	public pageY: number;

	constructor(private axe: Axe) {
		let node = ReactDom.findDOMNode(this.axe);
		this.body = node.parentNode.childNodes[0] as HTMLElement;
	}
	get dir(): string {
		return this.axe.props.dir;
	}
	subscribeEvents(subscribe: boolean) {
		if (subscribe) {
			Events.mousemove.subscribe(this.onMousemove);
			Events.mouseup.subscribe(this.onMouseup);
		}
		else {
			Events.mousemove.unsubscribe(this.onMousemove);
			Events.mouseup.unsubscribe(this.onMouseup);
		}
	}
	start(pageX: number, pageY: number, onStop: () => void) {
		if (this.body) {
			this.onStop = onStop;
			this.pageX = pageX;
			this.pageY = pageY;
			let rect = this.body.getBoundingClientRect();
			this.newWidth = this.width = rect.width;
			this.newHeight = this.height = rect.height;
			if (this.body) {
				this.body.style.pointerEvents = "none";
			}
			this.subscribeEvents(true);
		}
	}
	private onMousemove = (ev: MouseEvent) => {
		ev.preventDefault();
		delete this.deltaY;
		delete this.deltaX;
		let dir = this.axe.props.dir;

		if (dir != "n" && dir != "s") {
			this.deltaX = ev.pageX - this.pageX;
			this.newWidth = this.width + this.deltaX;
		}
		if (dir != "e" && dir != "w") {
			this.deltaY = ev.pageY - this.pageY;
			this.newHeight = this.height + this.deltaY;
		}
		if (this.axe.props.onDrag) {
			this.axe.props.onDrag(this);
		}
		else {
			if (this.deltaX != undefined) {
				this.body.style.width = this.newWidth + "px";
			}
			if (this.deltaY != undefined) {
				this.body.style.height = this.newHeight + "px";
			}
		}
	}
	private onMouseup = () => {
		this.subscribeEvents(false);
		this.body.style.pointerEvents = "auto";
		this.body = null;
		this.onStop();
	}
	dispose() {
		this.subscribeEvents(false);
		this.onStop = this.body = null;
	}
}

interface IResizerEvents {
	onStart?: (resizing: IResizing) => void,
	onDrag?: (resizing: IResizing) => void,
	onStop?: (resizing: IResizing) => void
}
interface IAxeProps extends IResizerEvents {
	dir: Direction
}

class Axe extends React.Component<IAxeProps, {
	resizing: boolean
}>{
	controller: ResizerController;
	onMousedown = (event: React.MouseEvent<HTMLDivElement>) => {
		event.preventDefault();
		this.controller = new ResizerController(this);
		this.controller.start(event.pageX, event.pageY, this.onStop);
		document.body.style.cursor = this.props.dir + "-resize";
		this.setState({
			resizing: true
		});
		this.props.onStart && this.props.onStart(this.controller);
		event.stopPropagation();
	}
	onStop = () => {
		this.props.onStop && this.props.onStop(this.controller);
		this.setState({
			resizing: false
		});
		document.body.style.cursor = "";
		this.disposeController();
	}
	componentWillUnmount() {
		this.disposeController();
	}
	disposeController() {
		this.controller && this.controller.dispose();
		this.controller = null;
	}
	render() {
		let css = "s_resizer_axe s_resizer_" + this.props.dir;
		if (this.state && this.state.resizing) {
			css += " s_resizer_drag";
		}
		return <div className={css} onMouseDown={this.onMousedown} />;
	}
}

export interface IResizerProps extends IResizerEvents {
	directions?: Direction[]
}
export class Resizer extends React.Component<IResizerProps, {}>  {
	render() {
		let axes = []
		let directions = this.props.directions || DEFAULT;
		for (let dir of directions) {
			axes.push(<Axe key={axes.length}
				dir={dir}
				onStart={this.props.onStart}
				onDrag={this.props.onDrag}
				onStop={this.props.onStop} />);
		}
		return <div className='s_resizer'>
			{this.props.children}
			{axes}
		</div>;
	}
}