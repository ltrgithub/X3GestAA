import * as React from 'react';
import * as Enzyme from 'enzyme';

import { Link, ILinkProp } from '../link';

import { LinkTip } from '../linkTip';
describe("Link", () => {

    let defaultProps: ILinkProp

    beforeEach(() => {
        defaultProps = {
            className: "testclass",
            url: "?url=url",
            title: "Text",
            highlightClassName: "testhighlight_class",
        };
    })

    describe("Render", () => {


        const render: (props: ILinkProp) => Cheerio = (props) => Enzyme.render(<Link {...props} />)

        it("should compare to not highlighted Link snapshot", () => {
            const wrapper = render({ ...defaultProps, highlightText: "Tea" });
            expect(wrapper).toMatchSnapshot();
            expect(wrapper.find("a").children("span").length).toBe(0);
        });

        it("should compare to highlighted Link snapshot", () => {
            const wrapper = render({ ...defaultProps, highlightText: "Tex" });
            expect(wrapper).toMatchSnapshot();
            expect(wrapper.find("a").children("span").length).toBe(1);
            expect(wrapper.find("a").text()).toBe("Text");
            expect(wrapper.find("a").children("span").text()).toBe("Tex");
            expect(wrapper.find("a").children("span").hasClass(defaultProps.highlightClassName)).toBe(true);
            expect(wrapper.find("a").hasClass(defaultProps.className)).toBe(true);
        });

        it("should compare to highlighted Link snapshot", () => {
            const wrapper = render({ ...defaultProps, highlightText: "Tex" });
            expect(wrapper).toMatchSnapshot();
            expect(wrapper.find("a").children("span").length).toBe(1);
            expect(wrapper.find("a").text()).toBe("Text");
            expect(wrapper.find("a").children("span").text()).toBe("Tex");
            expect(wrapper.find("a").children("span").hasClass(defaultProps.highlightClassName)).toBe(true);
            expect(wrapper.find("a").hasClass(defaultProps.className)).toBe(true);
        });


        it('should not render the element if "hidden" props set to true ', () => {
            const wrapper = render({ ...defaultProps, hidden: true });
            expect(wrapper.html()).toEqual('');
        });
    });

    describe('Interactions', () => {
        const mount: (props: ILinkProp) => Enzyme.ReactWrapper<any, any> = (props) => Enzyme.mount(<Link {...props} />)

        it('should call the "onClick" prop callback with the provided "value" prop', () => {
            let callback = jest.fn();
            let value = { randomKey: 'randomValue' };
            const wrapper = mount({ ...defaultProps, onClick: callback, value });

            expect(callback).not.toBeCalled();
            wrapper.find('a').first().simulate('click');
            expect(callback).toHaveBeenCalledTimes(1);
            expect(callback.mock.calls[0][0]).toBe(value);
        });

        it('should toggle the tooltip on hover if no mouseenter and mouseleave props provied', function () {
            let value = { randomKey: 'randomValue' }, description = 'Link Description Text';
            const wrapper = mount({ ...defaultProps, value, description });

            expect(wrapper.find(LinkTip).length).toBe(0);
            wrapper.find('a').first().simulate('mouseenter');
            expect(wrapper.find(LinkTip).length).toBe(1);
            wrapper.find('a').first().simulate('mouseleave');
            expect(wrapper.find(LinkTip).length).toBe(0);
        });

        it('should call mouseenter and mouseleave props if they provided', function () {
            let value = { randomKey: 'randomValue' }, mouseenterCallback = jest.fn(), mouseleaveCallback = jest.fn();

            const wrapper = mount({ ...defaultProps, value, onMouseEnter: mouseenterCallback, onMouseLeave: mouseleaveCallback });

            expect(mouseenterCallback).not.toBeCalled();
            expect(mouseleaveCallback).not.toBeCalled();
            expect(wrapper.find(LinkTip).length).toBe(0);

            wrapper.find('a').first().simulate('mouseenter');
            expect(mouseenterCallback).toHaveBeenCalledTimes(1);
            expect(mouseleaveCallback).not.toBeCalled();
            expect(wrapper.find(LinkTip).length).toBe(0);

            wrapper.find('a').first().simulate('mouseleave');
            expect(wrapper.find(LinkTip).length).toBe(0);
            expect(mouseenterCallback).toHaveBeenCalledTimes(1);
            expect(mouseleaveCallback).toHaveBeenCalledTimes(1);
        });
    });
});