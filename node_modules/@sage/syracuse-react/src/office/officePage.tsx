"use strict";
import * as React from 'react';
import { Url } from '../route/url';
import { IPageLoadError } from '../page/pageLoader';
import { AlertPage } from '../alert/page/alertPage';
import { IPageProps } from '../page/page';
import { ISyraPageState } from '../page/syraPage';
import { SyraMainPage } from '../page/syraMainPage';
import { syra_pageBuilder } from '../syra/utility/syra_pageBuilder';
import { getLocalString } from '../culture/localString';
import { showException } from '../alert/alert';
import { syra_site } from '../syra/utility/syra_site';

interface IOfficeExcelState extends ISyraPageState {
	officeLoaded?: boolean
}

let _logon_done: boolean;

export class OfficePage extends React.Component<IPageProps, IOfficeExcelState> {
	syraPage: any;
	componentDidMount() {
		switch (this.props.office.product) {
			case "excel":
				if (!_logon_done) {
					(window as any).syra_office.excel.checkLogon();
					_logon_done = true;
				}
				if (syra_site.isExcelOfficeConfig) {
					syra_pageBuilder.load({
						$itemPage: {
							$category: "excelDatasource",
							urlSeg: this.props.sdataUrl,
							$representation: {
								$prototype: {}
							}
						},
						success: (syraPage: any) => {
							(this.syraPage = syraPage).urlSeg = this.props.sdataUrl;
							(window as any).syra_office.excel.onMainPageLoaded(this.syraPage);
							this.setState({
								officeLoaded: true
							});
						}
					});
				}
				else {
					syra_site.excelInterface.onLogin();
					this.setState({
						officeLoaded: true
					});
				}
				break;

			case "word":
			case "ppt":
				try {
					if (!_logon_done) {
						(window as any).syra_office[this.props.office.product].checkLogon();
						_logon_done = true;
					}
				}
				catch (error) {
					showException({
						message: error.message,
						stackTrace: error.stackTrace
					});
				}
				finally {
					this.setState({
						officeLoaded: true
					});
				}
				break;
		}
	}
	onViewMount = (body: HTMLElement) => {
		(this.syraPage.layoutSlot = body).appendChild(this.syraPage.domItem);
		if (this.props.onMainPageLoaded) {
			this.props.onMainPageLoaded(null, null, this.syraPage);
		}
	}
	onResize = (maxHeight?: number) => {
		this.syraPage && this.syraPage.resizeItem();
	}
	componentWillUnmount() {
		this.syraPage && this.syraPage.dispose();
		this.syraPage = null;
	}
	render() {
		if (this.state) {
			if (this.state.loadError) {
				return <AlertPage {...this.state.loadError} />;
			}
			else {
				if (this.state.officeLoaded) {
					if (this.syraPage) {
						return <SyraMainPage onDidMount={this.onViewMount} onResize={this.onResize} />;
					}
					else {
						return <div className="s_syra_page"><div className="s_page_title">{getLocalString("excel_connecting")}</div></div>;
					}
				}
			}
		}
		return null;
	}
}