"use strict";
import * as React from 'react';
import Section from '../../section/section';
import { Trackers } from '../../tracker/component/trackers';
import { Link } from '../../link/link';
import { searchIndex } from './searchIndex';
import { samples } from './samples';
import { addTracker, Tracker } from '../../tracker/trackerController';
import * as Delta from '../../dataStore/delta';

export default class TrackerTes extends React.Component<{}, {
    step: number,
    mode?: string,
    running?: boolean
}>{
    static representationName: string = "tracker";
    tracker: Tracker
    constructor(props: any, context: any) {
        super(props, context);
        this.state = {
            step: 0
        };
    }
    releaseTracker() {
        this.tracker && this.tracker.dispose();
        this.tracker = null;
    }
    onSearchIndexClick = (mode: string) => {
        if (mode == "search_auto") {
            this.releaseTracker();
            let interval = setInterval(() => {
                let data: any = searchIndex[this.state.running ? this.state.step : 0];
                data.isTestCase = true;
                if (!this.state.running) {
                    this.tracker = addTracker(data);
                }
                else {
                    this.tracker.applyChange(data, this.state.step == (searchIndex.length - 1));
                }
                if (this.state.step == (samples.length - 1)) {
                    clearInterval(interval);
                    interval = null;
                    this.setState({
                        running: false,
                        step: this.state.step + 1
                    });
                }
                else {
                    this.setState({
                        mode: mode,
                        running: true,
                        step: (this.state.running ? this.state.step : 0) + 1
                    });
                }
            }, 800);
        }
        else {
            if (this.state.running) {
                let data: any = searchIndex[this.state.step];
                data.isTestCase = true;
                this.tracker.applyChange(data, this.state.step == (searchIndex.length - 1));
            }
            else {
                this.releaseTracker();
                let data: any = searchIndex[0];
                data.isTestCase = true;
                this.tracker = addTracker(data);
            }
            if (this.state.step == (samples.length - 1)) {
                this.setState({
                    running: false,
                    step: this.state.step + 1
                });
            }
            else {
                this.setState({
                    mode: mode,
                    running: true,
                    step: (this.state.running ? this.state.step : 0) + 1
                });
            }
        }
    }
    onSamplesClick = (mode: string) => {
        let step = 0;
        this.releaseTracker();
        let interval = setInterval(() => {
            let data: any = samples[step];
            data.isTestCase = true;
            addTracker(data);
            if (step == (samples.length - 1)) {
                clearInterval(interval);
                step = interval = null;
                this.setState({
                    running: false
                });
            }
            else {
                this.setState({
                    mode: mode,
                    running: true,
                    step: step++
                });
            }
        }, 800);
    }
    render() {
        return <div className="row">
            <div className="col-lg-9">
                <Section title="Tracker">
                    <Trackers list={searchIndex.map((record: any, index: number) => {
                        let newRec = Delta.clone(record);
                        newRec.$uuid = index + 1;
                        return newRec;
                    })} onLinkClick={() => { }} onDelete={() => { }} />
                </Section>
            </div>
            <div className="col-lg-3">
                <Section title="Run test cases">
                    <Link
                        className="s_textLink"
                        disabled={this.state.running}
                        value="search_auto"
                        title={"SearchIndex AutoRun {0}/4".replace("{0}", (this.state.mode == "search_auto" ? this.state.step : 0).toString())}
                        onClick={this.onSearchIndexClick} />
                    <Link
                        className="s_textLink"
                        disabled={this.state.running && this.state.mode != "search_manu"}
                        value="search_manu"
                        title={"SearchIndex ManualRun {0}/4".replace("{0}", (this.state.mode == "search_manu" ? this.state.step : 0).toString())}
                        onClick={this.onSearchIndexClick} />
                    <Link
                        className="s_textLink"
                        disabled={this.state.running}
                        value="samples"
                        title="Samples"
                        onClick={this.onSamplesClick} />
                </Section>
            </div>
        </div>;
    }
}