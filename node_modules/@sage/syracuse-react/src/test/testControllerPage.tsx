"use strict";
import * as React from 'react';
import { groups, IGroup, IItem } from './testCases';
import * as Sdata from '../dataStore/sdata';
import Splitter from '../common/splitter/splitter';
import { PageFrame, PageHeader, PageBody } from '../page/page';
import { ScrollList } from '../common/list/list';
import { Link } from '../link/link';
import { route } from '../route/route';
import * as Events from '../event/events';
import { syra_pageBuilder } from '../syra/utility/syra_pageBuilder';
import * as Dom from '../utility/html/dom';
import './testControllerPage.less';

import FieldsTest from './field/fieldsTest';
import AlertTest from './alert/alertTest';
import OverTest from './over/overTest';
import BookmarkTest from './navigation/bookmarkTest';
import BreadcrumbTest from './navigation/breadcrumbTest';
import SitemapTest from './navigation/sitemap/sitemapTest';
import ResizerTest from './common/resizerTest';
import TrackerTest from './tracker/trackerTest';
import { IPageProps } from '../page/page';


class Group extends React.Component<{
    title: string
    records: IItem[],
    onClick: (item: IItem) => void
}, {}>{
    render() {
        let rows: any[] = this.props.records.map((item: IItem, index: number) => {
            return <Link
                key={index}
                className="s_uitest_mn"
                title={item.title}
                url={item.url}
                value={item}
                onClick={this.props.onClick} />
        });
        return <div className="s_uitest_group_mn">
            <div className="s_uitest_group_head_mn">{this.props.title}</div>
            {rows}
        </div>;
    }
}

class SyraTest extends React.Component<IPageProps, {}>{
    private slot: HTMLElement;
    private syraPage: any;

    resize = () => {
        this.syraPage && this.syraPage.resizeItem();
    }
    componentDidMount() {
        let $itemPage = {
            layoutSlot: this.slot,
            $representation: {
                $prototype: {
                    $testName: this.props.sdataUrl.params.name.replace("_", "/"),
                    $testCategory: this.props.sdataUrl.params.category,
                    $properties: {},
                    $links: {},
                    $actions: {}
                },
                $article: {}
            },
            urlSeg: this.props.sdataUrl
        };
        syra_pageBuilder.load({
            $itemPage: $itemPage,
            success: (syraPage: any) => {
                this.syraPage = syraPage;
                if (this.props.onMainPageLoaded) {
                    syraPage.urlSeg = $itemPage.urlSeg;
                    this.props.onMainPageLoaded("TestPage", null, syraPage);
                }
                Events.resize.subscribe(this.resize);
            }
        });
    }
    componentWillUnmount() {
        if (this.syraPage) {
            Events.resize.unsubscribe(this.resize);
            this.syraPage.dispose();
            this.syraPage = null;
        }
        Dom.empty(this.slot);
        this.slot = null;
    }
    render() {
        return <div className="s_syra_page" ref={(node) => this.slot = node}></div>;
    }
}


class TestPageController extends React.Component<IPageProps, {}>{
    getTestComponent() {
        switch (this.props.sdataUrl.representationRoot) {
            case BookmarkTest.representationName:
                return BookmarkTest;
            case BreadcrumbTest.representationName:
                return BreadcrumbTest;
            case FieldsTest.representationName:
                return FieldsTest;
            case AlertTest.representationName:
                return AlertTest;
            case OverTest.representationName:
                return OverTest;
            case TrackerTest.representationName:
                return TrackerTest;
            case ResizerTest.representationName:
                return ResizerTest;
            case SitemapTest.representationName:
                return SitemapTest;
        }
    }
    render() {
        let page = this.getTestComponent();
        return page ? React.createElement(page, this.props) : null;
    }
}

export default class TestControllerPage extends React.Component<IPageProps, {}> {
    onGroupClick = (item: IItem) => {
        route.push(item.url);
    }
    render() {
        return < PageFrame>
            <Splitter position="left">
                <ScrollList className="s_uitest_group_list">
                    {groups.map((group: IGroup, index: number) => {
                        return <Group key={index} title={group.title} records={group.records} onClick={this.onGroupClick} />
                    })}
                </ScrollList>
                <PageFrame>
                    <PageHeader title="" />
                    <PageBody>
                        {(this.props.sdataUrl.$facet == Sdata.Facet.syraTest) ? <SyraTest {...this.props} /> : <TestPageController {...this.props} />}
                    </PageBody>
                </PageFrame>
            </Splitter>
        </ PageFrame>;
    }
}