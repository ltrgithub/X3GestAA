"use strict";
import * as React from 'react';
import Section from '../../section/section';
import Store from '../../dataStore/store';
import * as Sdata from '../../dataStore/sdata';
import * as stringUnit from './units/string';
import * as booleanUnit from './units/boolean';
import * as choiceUnit from './units/choice';
import * as FieldFactory from '../../field/fieldFactory';
import { IFieldProps } from '../../field/poc/field'
import { FieldStates } from './fieldStates';
import { IPageProps } from '../../page/page';

interface IUnit {
    $prototype: any,
    dataset: any
    $items: any
}
export default class FieldsTest extends React.Component<IPageProps, {
    selectedUnit?: IUnit,
    $isHidden?: boolean,
    $isDisabled?: boolean,
    $isReadOnly?: boolean,
    $isMandatory?: boolean,
    $description?: string,
    $diagnoses?: number
}>  {
    static representationName: string = "fields";
    store: Store = new Store();
    deltaTest = {};
    getUnit($type: string) {
        switch ($type) {
            case "string":
                return stringUnit;
            case "boolean":
                return booleanUnit;
            case "choice":
                return choiceUnit;
        }
    }
    constructor(props: IPageProps, context: any) {
        super(props, context);
        this.state = {
            selectedUnit: this.getUnit(props.sdataUrl.params.type)
        };
    }
    applyDeltaTest($delta: any) {
        let binds = Object.keys(this.store.getMeta());
        let delta: any = {};
        for (let bind of binds) {
            delta[bind] = $delta;
        }
        this.store.applyDelta({
            $properties: delta
        });
    }
    runTest = (delta: any, newState?: any) => {
        this.store.merge(this.deltaTest, delta);
        this.applyDeltaTest(delta);
        this.setState(newState || delta);
        return true
    }
    onFieldChange = (value: any) => {
    }
    renderProperty(rows: any[], bind: string, fields: any[]) {
        let width = 12 / fields.length;
        let cols: any[] = [];
        for (let ii = 0, jj = fields.length; ii < jj; ii++) {
            cols.push(<div key={ii} className={"col-sm-" + width}>{fields[ii]}</div>);
        }
        rows.push(<div key={rows.length} className="row">{cols}</div>);
    }
    createField(bind: string, props?: IFieldProps) {
        props = props || {};
        let meta = props.meta = this.store.getMeta(bind);
        if (meta) {
            props.store = this.store;
            props.bind = bind;
            props.value = this.store.getValue(bind);
            props.hidden = meta.$isHidden;
            props.readOnly = meta.$isReadOnly;
            props.disabled = meta.$isDisabled;
            props.mandatory = meta.$isMandatory;
            props.title = this.store.parse(meta.$title);
            props.description = this.store.parse(meta.$description);
            props.diagnoses = meta.$diagnoses;
            return FieldFactory.create(props.meta.$type, props);
        }
    }
    renderProperties(): any {
        let unit = this.state.selectedUnit;
        this.store.dataset = {};
        this.store.$prototype = unit.$prototype;
        this.store.applyDelta(unit.dataset);
        this.applyDeltaTest(this.deltaTest);
        let rows: any[] = [];
        let binds = Object.keys(this.store.getMeta());
        for (let bind of binds) {
            let fields: any[] = [];
            for (let fieldProps of unit.$items) {
                fieldProps.key = bind + unit.$items.indexOf(fieldProps);
                if (fieldProps.editable) {
                    fieldProps.onChange = this.onFieldChange;
                }
                fields.push(this.createField(bind, fieldProps));
            }
            this.renderProperty(rows, bind, fields);
        }
        return <Section>{rows}</Section>;
    }
    render() {
        return <div className="row">
            <div className="col-lg-9">
                {this.renderProperties()}
            </div>
            <div className="col-lg-3">
                <FieldStates
                    $isHidden={this.state.$isHidden}
                    $isDisabled={this.state.$isDisabled}
                    $isReadOnly={this.state.$isReadOnly}
                    $isMandatory={this.state.$isMandatory}
                    $description={this.state.$description}
                    $diagnoses={this.state.$diagnoses}
                    onChange={this.runTest}/>
            </div>
        </div>;
    }
}