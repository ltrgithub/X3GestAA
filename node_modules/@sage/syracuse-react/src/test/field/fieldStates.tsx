"use strict";
import * as React from 'react';
import Section from '../../section/section';
import { BooleanField } from '../../field/poc/boolean/booleanField';
import { DiagnoseState } from './diagnoseState';

export class FieldStates extends React.Component<{
    $isHidden?: boolean,
    $isDisabled?: boolean,
    $isReadOnly?: boolean,
    $isMandatory?: boolean,
    $description?: string,
    $diagnoses?: number
    onChange: (meta: any) => void
}, {}>{
    onChange = (meta: any) => {
        this.props.onChange(meta);
        return true;
    }
    render() {
        return <Section>
            <BooleanField
                title="$isHidden"
                editable={true}
                value={this.props.$isHidden}
                onChange={(value: any) => this.onChange({ $isHidden: value })} />
            <BooleanField
                title="$isDisabled"
                editable={true}
                value={this.props.$isDisabled}
                onChange={(value: any) => this.onChange({ $isDisabled: value })} />
            <BooleanField
                title="$isReadOnly"
                editable={true}
                value={this.props.$isReadOnly}
                onChange={(value: any) => this.onChange({ $isReadOnly: value })} />
            <BooleanField
                title="$isMandatory"
                editable={true}
                value={this.props.$isMandatory}
                onChange={(value: any) => this.onChange({ $isMandatory: value })} />
            <BooleanField
                title="$description"
                editable={true}
                value={this.props.$description}
                onChange={(value: any) => this.onChange({ $description: value ? "this is a description" : null })} />
            <DiagnoseState
                onChange={this.onChange} />
        </Section>;
    }
}