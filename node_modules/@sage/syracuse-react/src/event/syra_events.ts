"use strict";
import { syra_site } from '../syra/utility/syra_site';
import { syra_item } from '../syra/utility/syra_item';
import { syra_fusion } from '../syra/utility/syra_fusion';
import * as syra_tip from '../over/syra_tip';
import { syra_form } from '../syra/utility/syra_form';
import { showException } from '../alert/alert';
import * as syra_expression from '../syra/utility/syra_expression';

let _clickTarget: any;
let _ignoreUnloadEvent: boolean;

function _emulateEvent(event: any) {
    var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
    if (mainTouch) {
        event.pageX = mainTouch.pageX;
        event.pageY = mainTouch.pageY;
    }
    return event;
}

export class NodeEvents {
    constructor(public root: HTMLElement) {
        let $$root = $(root);
        $$root.delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", this.handleInput);
        $$root.delegate("a[data-s-field-extra]", "focusin focusout", this.handleComplexInput)
        $$root.delegate("textarea", "input", this.handleComplexInput);
        this.root.addEventListener("drop", this.drop, false);
        this.root.addEventListener("focusin", this.focusin, false);
        this.root.addEventListener("focusout", this.focusout, false);
        this.root.addEventListener("mouseover", this.mouseover, false);
        this.root.addEventListener("mouseout", this.mouseout, false);
        this.root.addEventListener("click", this.click, false);
    }
    handleInput = (event: JQueryEventObject) => {
        let item = (event.target as any).syraOnInput ? syra_item.findItem(event.target) : syra_item.findField(event.target);
        item && item.onFieldInputEvent && item.onFieldInputEvent(event);
        event.stopPropagation();
    }
    handleComplexInput = (event: JQueryEventObject) => {
        let field = syra_item.findField(event.target);
        if (field && field.onFieldInputEvent) {
            field.onFieldInputEvent(event);
            event.stopPropagation();
        }
        return false;
    }
    click = (event: MouseEvent) => {
        if (_clickTarget != event.target) {
            _clickTarget = event.target;
            let res = this._click(event.currentTarget, event);
            window.setTimeout(() => {
                _clickTarget = null;
            }, 500);
            return res;
        } else {
            event.preventDefault();
            event.stopPropagation();
            return false;
        }
    }
    drop = (event: MouseEvent) => {
        let target: HTMLElement = event.target as HTMLElement;
        if (target && target.tagName) {
            if (target.getAttribute("contenteditable") || ["INPUT", "SELECT", "TEXTAREA"].indexOf(target.tagName) >= 0) {
                event.preventDefault();
                event.stopPropagation();
                return false;
            }
        }
    }
    onFocusInOut = (event: FocusEvent) => {
        let onEnter = event.type == "focusin";
        let target: any = event.target as HTMLElement;
        let related: HTMLElement = event.relatedTarget as HTMLElement;
        let item;
        while (target && target != this.root) {
            if (target.syrafocusinout) {
                if (!related || (related !== target && !target.contains(related))) {
                    item = syra_item.get(target.syrafocusinout);
                    item && item.onItemInOut(onEnter, event, target);
                }
            }
            target = target.parentNode;
        }
    }
    mouseover_out(event: MouseEvent) {
        let onEnter = event.type == "mouseover";
        let target: any = event.target;
        syra_tip.utcTip.onInout(onEnter, event, target);
        var related = event.relatedTarget;
        var item;
        while (target && target != this.root) {
            if (target.syrainout || target.syraBtn) {
                if (!related || (related !== target && !target.contains(related))) {
                    if (target.syraBtn) {
                        (window as any).syra_button.onItemInOut(target.syraBtn, onEnter);
                    }
                    item = syra_item.get(target.syrainout);
                    if (item) {
                        var designer = item.articleParent && item.articleParent.designer;
                        if (designer && designer.toggleOverItem) {
                            designer.toggleOverItem(item, onEnter);
                        }
                        item.onItemInOut(onEnter, event, target);
                    }
                }
            } else {
                if (onEnter && target.syraTip) {
                    syra_tip.titleTip.show(target.title, target, true);
                }
            }
            target = target.parentNode;
        }
        if (!onEnter) {
            syra_tip.titleTip.clear();
        }
    }
    mouseover = (event: MouseEvent) => {
        this.mouseover_out(event);
    }
    mouseout = (event: MouseEvent) => {
        this.mouseover_out(event);
    }
    focusin = (event: FocusEvent) => {
        this.onFocusInOut(event);
    }
    focusout = (event: FocusEvent) => {
        this.onFocusInOut(event);
    }
    _click(currentTarget: any, event: MouseEvent) {
        try {
            let target: any = event.target;
            let eventTarget: any = event.target;
            if (syra_site.ignoreClick) {
                if (target && (syra_site.ignoreClick == eventTarget) || target.contains(syra_site.ignoreClick)) {
                    delete syra_site.ignoreClick;
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
                delete syra_site.ignoreClick;
            }

            //fix which event    
            if (!event.which && event.button) {
                (event as any).which = (event.button & 1) ? 1 : ((event.button & 4) ? 2 : 3);
            }

            if (target.syraIsOverlay ||target.id=="s_lock") {
                event.preventDefault();
                event.stopPropagation();
                return false;
            }

            var item;
            if (target.syraIsDefaultLink) {
                _ignoreUnloadEvent = true;
                var href = target.href;
                item = syra_item.findItem(target);
                if (/^tel:/.test(href) && item && item.ctiCall === true) {
                    event.preventDefault();
                    event.stopPropagation();
                    let url = syra_expression.parse(syra_site.userProfile, syra_site.userProfile.ctiMakeCall.$url);
                    url += "?ctiId=" + syra_site.userProfile.dataset.user.ctiId;
                    url += "&tel=" + href.substring(4);
                    (window as any).syra_ajax.get({
                        page: syra_site.userProfile,
                        url: url,
                        success: () => { }
                    });
                    return false;
                }
                return;
            }
            var article;
            var site = syra_site;
            var done, isDesignSelected;
            let syraOnClickTarget: any;
            while (target && target != currentTarget) {
                if (target.syraBtnclick) {
                    let btn = (window as any).syra_button.getButton(target.syraBtnclick);
                    this._ensureDesignItemSelection(target);
                    item = syra_item.findItem(target);
                    if (btn && !btn.$isDisabled) {
                        if (!(btn.pickerId && item && item.page && item.page.designer)) {
                            if (btn.checkWorkingCopy) {
                                syra_form.onBeforeUnloadPage(() => {
                                    btn.click(event, target);
                                }, btn.parent && btn.parent.page);
                            } else {
                                btn.click(event, target);
                            }
                        }
                    }
                    done = true;
                    break;
                }

                if (target.syraOnClick && !syraOnClickTarget) {
                    syraOnClickTarget = target;
                }
                if (target.syraItem) {
                    var observer = item = syra_item.findItem(target);
                    article = item && (item.articleParent || item.page);
                    if (!isDesignSelected) {
                        isDesignSelected = this._ensureDesignItemSelection(target, item, article);
                    }
                    if (observer && observer.$isDisabled && observer.isMenuItem) {
                        done = true; //important conitune loop to trigger possible selection
                    } else {
                        if (observer && syraOnClickTarget) {
                            if (!observer.$isDisabled) {
                                let maker = syraOnClickTarget.syraOnClickMaker;
                                maker = maker ? observer[maker] : observer;
                                let syraOnClick = syraOnClickTarget.syraOnClick;
                                if (maker && maker[syraOnClick]) {
                                    maker[syraOnClick](event, syraOnClickTarget);
                                    done = true;
                                }
                            }
                            if (done) {
                                syraOnClickTarget = null;
                                break;
                            }
                        }
                    }
                    if (item && item.page == item) {
                        break;
                    }
                }
                target = target.parentNode;
            }
            syra_site.checkUniqueSelection(item);
            if (!done) {
                var mainPage = syra_site.mainPage;
                if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
                    target = event.target;
                    while (target) {
                        if (target.syraItem) {
                            return mainPage.externalAdapter.onGlobalClick(event);
                        }
                        target = target.parentNode;
                    }
                }
            }

            if (!(event as any).syraRetValue) {
                if (eventTarget.href) {
                    if (eventTarget.target == "_blank") {
                        return;
                    }
                }
                if (done && (eventTarget.tagName != "INPUT" && !eventTarget.for)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }

        } catch (error) {
            onUncaughtError({
                error: error,
                url: error.fileName,
                lineNumber: error.lineNumber
            });
        } finally {
            syra_tip.titleTip.hide();
            let anchor = event.target as HTMLAnchorElement;
            if (anchor.href === "#" || (anchor.parentNode && (anchor.parentNode as HTMLAnchorElement).href == "#")) {
                event.preventDefault();
                event.stopPropagation();
                return false;
            }
        }
    }
    private _ensureDesignItemSelection(target: any, item?: any, article?: any) {
        item = item || syra_item.findItem(target);
        article = article || (item && (item.articleParent || item.page));
        if (article && article.designer && article.designer.isTopPageDesigner) {
            let designer = article.designer;
            if (item.isDesigning && item.page != designer && item.page != designer.pageStorage) {
                if (designer.isTopPageDesigner()) {
                    if (!item.isMenuItem) {
                        designer.selectItem(item, true);
                    }
                    return true;
                }
            }
        }
    }
    dispose() {
        $(this.root).undelegate();
        this.root.removeEventListener("drop", this.drop);
        this.root.removeEventListener("focusin", this.focusin);
        this.root.removeEventListener("focusout", this.focusout);
        this.root.removeEventListener("click", this.click);
        this.root.removeEventListener("mouseover", this.mouseover);
        this.root.removeEventListener("mouseout", this.mouseout);
        this.root = null;
    }
}

export class GlobalEvents {
    private rootEvents: NodeEvents;
    constructor() {        
        this.rootEvents = new NodeEvents(document.body);
        window.addEventListener("unload", this.unload);
        window.onerror = function (errorMsg, url, lineNumber, column, error) {
            onUncaughtError({
                error: error,
                url: url,
                lineNumber: lineNumber
            });
        };
    }
    unload = () => {
        syra_fusion && syra_fusion.detachAllBooksPanic();
        syra_site.dispose();
    }
    dispose() {
        window.removeEventListener("unload", this.unload);
        window.onerror = window.onbeforeunload = null;
        this.rootEvents && this.rootEvents.dispose();
        _clickTarget = null;
    }

}

function onUncaughtError(options: any) {
    var mainPage = syra_site.mainPage;
    if (mainPage && mainPage.onUncaughtError) {
        options.message = options.error.message;
        options.doEvent = ()=> {
            showException({
                message: options.message, //can be overrided in page handler 
                stackTrace: options.error.stackTrace
            });
        };
        mainPage.onUncaughtError(options);
        return;
    }
    showException(options.error);
}