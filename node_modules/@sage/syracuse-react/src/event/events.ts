"use strict";
import { EventObserver } from './eventObserver';

export type MouseHandler = (event: MouseEvent) => void;
class MouseEventObserver extends EventObserver<MouseHandler> {
    constructor(private eventName: string) {
        super();
    }
    listen(on: boolean) {
        if (on) {
            document.addEventListener(this.eventName, this.dispatch, false);
        }
        else {
            document.removeEventListener(this.eventName, this.dispatch);
        }
    }
}

export type ResizeHandler = () => void;
class Resize extends EventObserver<ResizeHandler> {
    constructor() {
        super(true);
    }
    subscribe(handler: ResizeHandler) {
        super.subscribe(handler);
        handler();
    }
    listen(on: boolean) {
        if (on) {
            window.addEventListener("resize", this.dispatch, false);
        }
        else {
            window.removeEventListener("resize", this.dispatch);
        }
    }
}


export const click = new MouseEventObserver("click");
export const mouseup = new MouseEventObserver("mouseup");
export const mousemove = new MouseEventObserver("mousemove");
export const mouseover = new MouseEventObserver("mouseover");
export const resize = new Resize();


export function dispose() {
    click.dispose();
    mouseover.dispose();
    resize.dispose();
}