"use strict";

export abstract class EventObserver<F extends Function> {
    handlers: F[] = [];
    constructor(private fromFirst?: boolean) { }
    dispatch = (args: any) => {
        if (this.fromFirst) {
            for (let handler of this.handlers) {
                if (handler(args) === false) {
                    break;
                }
            }
        }
        else {
            for (let ii = this.handlers.length - 1; ii >= 0; ii--) {
                if (this.handlers[ii](args) === false) {
                    break;
                }
            }
        }
    }
    subscribe(handler: F) {
        if (!this.handlers.length) {
            this.listen(true);
        }
        if (this.handlers.indexOf(handler) < 0) {
            this.handlers.push(handler);
        }
    }
    unsubscribe(handler: F) {
        let index = this.handlers.indexOf(handler);
        (index >= 0) && this.handlers.splice(index, 1);
        if (!this.handlers.length) {
            this.listen(false)
        }
    }
    abstract listen(enabled: boolean): void
    dispose() {
        this.listen(false);
    }
}