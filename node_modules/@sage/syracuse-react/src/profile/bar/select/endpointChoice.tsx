"use strict";
import * as React from 'react';
import { PopupLink } from '../../../over/popup/popupLink'
import { Link } from '../../../link/link';
import { ScrollList } from '../../../common/list/list';
import { HotKeyLinks } from '../../../shortcut/hotKeyLinks';
import * as SyraPageModal from '../../../over/modal/page/syraPageModal';
import { showDiagnoses } from '../../../alert/alert';
import { Profile } from '../../profile';
import { getLocalString } from '../../../culture/localString';
import { Icon } from '../../../common/icon/icon';
import { IEndpoint } from '../../endpoint';
import './endpointChoice.less';

class EndpointItem extends React.Component<{
    endpoint: IEndpoint,
    emptyNatureHidden?: boolean,
    className?: string
}, {}>{
    render() {
        let endpoint = this.props.endpoint;
        if (endpoint) {
            let nature: any;
            if (!this.props.emptyNatureHidden || endpoint.nature) {
                nature = <Icon name="video_stop" className={"s_endpoint_nature s_endpoint_nature_" + (endpoint.nature || "null")} />;
            }
            return <div className={"s_endpoint " + (this.props.className || "")}>{nature}{endpoint.description}</div>;
        }
        return <noscript />;
    }
}

export class EndpointChoice extends React.Component<{
    profile: Profile,
    onTogglePopup?: (opened: boolean) => void,
    onSelect: (endpoint: IEndpoint) => void
}, {}> {
    popupLink: PopupLink;
    list: ScrollList;
    onPopupResize = (maxHeight: number) => {
        if (this.list) {
            let node = this.list.rootNode.previousSibling as HTMLElement;
            if (node) {
                maxHeight -= node.clientHeight;
            }
            node = this.list.rootNode.nextSibling as HTMLElement;
            if (node) {
                maxHeight -= node.clientHeight;
            }
            this.list.listHeight = maxHeight;
        }
    }
    onMoreClick = () => {
        this.popupLink && this.popupLink.togglePopup();
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            url: this.props.profile.endPointLookupUrl,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onValidateSelection: (selected: any[]) => this.props.onSelect(selected[0])
        });
    }
    renderMore() {
        return <div className="s_profile_bar_list_item_primary_bottom">
            <Link
                data-s-profile-select-more="1"
                className="s_profile_bar_list_item s_primary"
                title={getLocalString("profile_endpoint_details")}
                onClick={this.onMoreClick} />
        </div>
    }
    componentWillUnmount() {
        this.list = this.popupLink = null;
    }
    onSelectedClick = () => {
        this.popupLink && this.popupLink.togglePopup();
    }
    renderPopup = () => {
        let selectedEndpoint = this.props.profile.selectedEndpoint;
        let records: any[] = [];
        if (this.props.profile.endpoints) {
            let selectedUuid = selectedEndpoint && selectedEndpoint.$uuid;
            for (let endpoint of this.props.profile.endpoints) {
                if (selectedUuid != endpoint.$uuid) {
                    records.push(
                        <Link
                            className="s_profile_bar_list_item"
                            key={endpoint.$uuid}
                            value={endpoint}
                            onClick={this.props.onSelect}>
                            <EndpointItem endpoint={endpoint} />
                        </Link>);
                }
            }
        }
        return <HotKeyLinks>
            {selectedEndpoint &&
                <Link
                    className="s_profile_bar_list_item s_selected"
                    value={selectedEndpoint}
                    onClick={this.onSelectedClick}>
                    <EndpointItem endpoint={selectedEndpoint} />
                </Link>}
            <ScrollList className="s_profile_bar_list" ref={(node) => this.list = node}>
                {records}
            </ScrollList>
            {this.props.profile.endPointLookupUrl && this.renderMore()}
        </HotKeyLinks>;
    }
    componentDidUpdate(prevProps: any) {
        if (this.popupLink && this.popupLink.popup) {
            this.popupLink.popup.onResize();
        }
    }
    render() {
        let profile = this.props.profile;
        return <PopupLink
            ref={(node) => { this.popupLink = node }}
            data-s-profile-tab="selectedEndpoint"
            className="s_profile_bar_textlink"
            onTogglePopup={this.props.onTogglePopup}
            popup={{
                onResize: this.onPopupResize,
                render: this.renderPopup
            }}>
            <EndpointItem endpoint={profile.selectedEndpoint}
                emptyNatureHidden={true}
                className="s_profile_bar_endpoint" />
        </PopupLink>;
    }
}