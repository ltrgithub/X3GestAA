"use strict";
import * as React from 'react';
import { PopupLink } from '../../../over/popup/popupLink'
import { Link } from '../../../link/link';
import { ScrollList } from '../../../common/list/list';
import { HotKeyLinks } from '../../../shortcut/hotKeyLinks';
import * as SyraPageModal from '../../../over/modal/page/syraPageModal';
import { showDiagnoses } from '../../../alert/alert';

export interface IQuickRecords {
    titleProperty: string,
    selected: any,
    unselected: any[]
};

export class Dropdown extends React.Component<{
    qualityBind: string,
    title?: string,
    popupMy?: string,
    popupAt?: string
    className: string,
    renderItem: (record: any) => any,
    getRecords: () => any,
    moreUrl?: string, //if not defined, no button to open lookup page
    onSelected: (record: any) => void,
    moreTitle?: string
}, {}> {
    popupLink: PopupLink;
    list: ScrollList;
    onPopupResize = (maxHeight: number) => {
        if (this.list) {
            let node = this.list.rootNode.previousSibling as HTMLElement;
            if (node) {
                maxHeight -= node.clientHeight;
            }
            node = this.list.rootNode.nextSibling as HTMLElement;
            if (node) {
                maxHeight -= node.clientHeight;
            }
            this.list.listHeight = maxHeight;
        }
    }
    onMoreClick = () => {
        this.popupLink && this.popupLink.toggle();
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            url: this.props.moreUrl,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onValidateSelection: (selected: any[]) => this.props.onSelected(selected[0])
        });
    }
    renderMore() {
        return <div className="s_profile_bar_list_item_primary_bottom">
            <Link
                data-s-profile-select-more="1"
                className="s_profile_bar_list_item s_primary"
                title={this.props.moreTitle}
                onClick={this.onMoreClick} />
        </div>
    }
    renderList(records: IQuickRecords) {
        return <ScrollList className="s_profile_bar_list" ref={(node) => this.list = node}>
            {records.unselected.map((record: any, index: number) =>
                <Link
                    className="s_profile_bar_list_item"
                    key={index}
                    title={record[records.titleProperty]}
                    value={record}
                    onClick={this.props.onSelected}>
                    {this.props.renderItem(record)}
                </Link>)}
        </ScrollList>;
    }
    componentWillUnmount() {
        this.list = this.popupLink = null;
    }
    onSelectedClick = () => {
        this.popupLink && this.popupLink.toggle();
    }
    renderPopup = () => {
        let records = this.props.getRecords();
        return <HotKeyLinks>
            {records.selected && <Link
                className="s_profile_bar_list_item s_selected"
                title={records.selected[records.titleProperty]}
                value={records.selected}
                onClick={this.onSelectedClick}>
                {this.props.renderItem(records.selected)}
            </Link>}
            {this.renderList(records)}
            {this.props.moreUrl && this.renderMore()}
        </HotKeyLinks>;
    }
    render() {
        return <PopupLink
            ref={(node) => { this.popupLink = node }}
            data-s-profile-tab={this.props.qualityBind}
            title={this.props.title}
            className={this.props.className}
            popup={{
                my: this.props.popupMy,
                at: this.props.popupAt,
                onResize: this.onPopupResize,
                render: this.renderPopup
            }}>
            {this.props.children}
        </PopupLink>;
    }
}