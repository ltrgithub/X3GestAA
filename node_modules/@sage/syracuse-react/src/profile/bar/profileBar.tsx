"use strict";
import * as React from 'react';
import { SearchField } from '../../search/searchField';
import { ProfilePanelLink } from '../panel/profilePanel';
import { IProfilePanelProps } from '../bar/profileBarProps';
import { TrackersController } from '../../tracker/component/trackersController';
import { TechnicalLinks } from '../temp/technicalLinks';
import { HelpLink } from './helpLink';
import { BookmarkBar } from '../../navigation/bookmark/bookmarkBar';
import { SitemapLink } from '../../navigation/sitemap/sitemapLink';
import * as SplitterOpener from '../../common/splitter/splitterOpener';
import { Link } from '../../link/link';
import { keyCommands, KeySpot } from '../../shortcut/keySpot';
import { getLocalString } from '../../culture/localString';
import { LogoLink } from './logo';
import { IProfileBarProps } from './profileBarProps';
import AppConn from '../applicationConnection/appConn';
import { EndpointChoice } from './select/endpointChoice';
import { RoleChoice } from './select/roleChoice';
import { IEndpoint } from '../endpoint';
import { IRole } from '../profile';

import './profileBar.less';


export class ProfileBar extends React.Component<IProfileBarProps, {
	searchValue?: string
}>{
	keySpot: KeySpot;
	constructor(props: IProfileBarProps, context: any) {
		super(props, context);
		this.state = {};
	}
	componentDidMount() {
		if (!this.keySpot) {
			this.keySpot = new KeySpot("ProfileController");
			this.keySpot.bind(keyCommands.goToDefaultHome, () => { this.props.onGoHome(); return true; });
			this.keySpot.bind(keyCommands.goToSitemap, () => { this.props.onToggleSitemap; return true; });
			this.keySpot.bind(keyCommands.toggleSearchField, () => { this.props.onToggleSearch(); return true; });
		}
	}
	componentWillUnmount() {
		this.keySpot && this.keySpot.dispose();
		this.keySpot = null;
	}
	onSearchFieldHidden = (value: string) => {
		this.setState({
			searchValue: value
		});
		this.props.onToggleSearch();
	}
	renderSearch() {
		if (this.props.searchFieldVisible) {
			return <SearchField onHidden={this.onSearchFieldHidden} value={this.state.searchValue} />
		}
		else {
			return <Link
				icon="magnifying_glass"
				shortcuts={keyCommands.toggleSearchField}
				title={getLocalString(this.props.classicMode ? "profile_classic_search" : "profile_search")}
				className='s_profile_bar_iconlink'
				onClick={this.props.onToggleSearch} />;
		}
	}
	render() {
		let profile = this.props.profile;
		return <header className="s_profile_bar" onClick={this.props.onHeaderClick}>
			<ul className="s_profile_bar_bar">
				<li id={SplitterOpener.SlotId} />
				<li><LogoLink
					title={getLocalString("profile_home")}
					productName={profile.productName}
					onGoHome={this.props.onGoHome} />
				</li>
				<li><AppConn appConnFields={this.props.appConnFields} onEditAppConn={this.props.onEditAppConn} /></li>
				<li className="s_profile_bar_space_fill" />
				<li><TrackersController /></li>
				<li><ProfilePanelLink {...this.props as IProfilePanelProps} /></li>
				<li><RoleChoice
					profile={this.props.profile}
					onTogglePopup={this.props.onToggleRolesPopup}
					onSelect={this.props.onSelectRole} /></li>
				<li><EndpointChoice
					profile={this.props.profile}
					onTogglePopup={this.props.onToggleEndpointsPopup}
					onSelect={this.props.onSelectEndpoint} /></li>
				<li><HelpLink onGotoHelpCenter={this.props.onGotoHelpCenter} onGotoHelpShortcuts={this.props.onGotoHelpShortcuts} /></li>
				<li><BookmarkBar
					profile={profile}
					bookmarks={profile.bookmarks}
					onBookmarkClick={this.props.onBookmarkClick}
					bookmarkDisabled={this.props.bookmarkDisabled}
					mainPageBookmark={this.props.mainPageBookmark}
					onBookmarked={this.props.onBookmarked} /></li>
				<li><TechnicalLinks developpementMode={profile.developpementMode} technicalLinks={profile.technicalLinks} /></li>
				<SitemapLink opener={true} profile={this.props.profile} opened={this.props.sitemapOpened} onClick={this.props.onToggleSitemap} />
				<li>{this.renderSearch()}</li>
				<SitemapLink css={'s_profile_bar_close_button ' + (this.props.sitemapOpened ? '': 's_profile_bar_close_button_hidden')} profile={this.props.profile} opened={this.props.sitemapOpened} onClick={this.props.onToggleSitemap} />
			</ul>
		</header>;
	}
}