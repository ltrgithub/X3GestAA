"use strict";
import * as React from 'react';
import * as Sdata from '../../dataStore/sdata';
import { getLocalString } from '../../culture/localString';
import { IAppConnProps } from '../bar/profileBarProps';
import { Tip, TipTitle } from '../../over/tip/tip';

class AppConnItem extends React.Component<{
    title: string,
    text: string
}, {
        showTip: boolean
    }>{
    onMouseEnter = () => {
        this.setState({
            showTip: true
        });
    }
    onMouseLeave = () => {
        this.setState({
            showTip: false
        });
    }
    renderTip(): any {
        if (this.state && this.state.showTip) {
            return <Tip of={this}>{this.props.title}</Tip>;
        }
    }
    render() {
        let props: any = {};
        let text = this.props.text;
        if (!text) {
            text = getLocalString("profile_app_conn_no").replace("{0}", this.props.title);
        }
        else {
            props.onMouseEnter = this.onMouseEnter;
            props.onMouseLeave = this.onMouseLeave;
        }
        return <div className="s_profile_appConn_field" {...props}>{text}{this.renderTip()}</div>;
    }

}

export default class AppConn extends React.Component<IAppConnProps, {}>{
    render() {
        if (this.props.appConnFields && this.props.appConnFields.length) {
            let items = [];
            for (let field of this.props.appConnFields) {
                let text: string;
                if (field.value) {
                    text = field.value;
                    if (field.$field.$type == Sdata.type.reference) {
                        text = field.value.$value
                    }
                }
                items.push(<AppConnItem key={field.bind} text={text} title={field.title} />);
            }
            return <a className="s_profile_bar_textlink s_profile_appConn" onClick={this.props.onEditAppConn}>
                {items}
            </a>;
        }
        return null;
    }
}