"use strict";
import * as Sdata from '../../dataStore/sdata';
import { culture } from '../../culture/culture';
import { getLocalString } from '../../culture/localString';
import { Url } from '../../route/url';
import { PageLoader, IPageLoadError } from '../../page/pageLoader'; 1
import { showDiagnoses } from '../../alert/alert';
import Store from '../../dataStore/store';
import { AppConnField } from '../../profile/bar/profileBarProps'
import * as SyraPageModal from '../../over/modal/page/syraPageModal';

export default class AppConnController {
	private sdataUrl: Url;
	private loader: PageLoader;
	private store: Store;
	private wcUrl: string
	private _fields: AppConnField[];
	private updated: any;
	private resetConnection: boolean;

	load(url: string, end: (store: Store) => void) {
		this.loader = new PageLoader(this.sdataUrl = new Url(url));
		this.loader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
			if (error) {
				showDiagnoses(error.diagnoses, getLocalString("profile_load_appConn"));
				end(null);
			}
			else {
				representation.$diagnoses && showDiagnoses(representation.$diagnoses, getLocalString("profile_load_appConn"));
				delete representation.$prototype.$article;
				this.store = new Store(representation.$prototype);
				end(this.store);
			}
		});
	}
	get fields(): AppConnField[] {
		this._fields = [];
		if (this.store) {
			for (let bind of this.store.binds) {
				let $field = this.store.getMeta(bind);
				if (!$field.$isExcluded && !$field.$isHidden) {
					let value = this.store.getDisplayValue(bind);
					/*if (!value && $field.$type == Sdata.type.date) {
						let today = culture.date.today();
						this.store.setValue(bind,today.toString());
						value = today.toString(culture.date_short);
					}*/
					this._fields.push({
						bind: bind,
						$field: $field,
						title: this.store.parse($field.$title),
						value: value
					});
				}
			}
		}
		return this._fields;
	}
	onEdit = (done: (updated: any, resetConnection: boolean) => void) => {
		var url = this.sdataUrl.url;
		let ii = url.indexOf("?");
		this.wcUrl = url.substr(0, ii) + "/$workingCopies" + url.substr(ii);
		SyraPageModal.openFormModal({
			authoringDisabled: true,
			url: this.wcUrl,
			article: {},
			onLoadRepresentation: (diagnoses, representation) => {
				diagnoses && showDiagnoses(diagnoses)
				if (representation) {
					delete representation.$article;
					delete representation.$prototype.$article;
				}
			},
			onServerSaved: (page: any) => {
				let $meta: any;
				this.updated= {};
				for (let bind in page.dataset) {
					let $field: any = this.store.getMeta(bind);
					if ($field) {
						if ($field.$isPersistent !== undefined) {
							($meta = $meta || {})[bind] = {
								$isPersistent: $field.$isPersistent
							}
						}
						if ($field.$resetConnection !== undefined) {
							if (page.dataset[bind] != this.store.getValue(bind)) {
								($meta = $meta || {})[bind] = {
									$resetConnection: $field.$resetConnection
								}
								if ($field.$resetConnection) {
									this.resetConnection = true;
								}
							}
						}
						this.updated[bind] = page.dataset[bind];
					}
				}
				if ($meta) {
					this.updated.$properties = $meta;
				}
			},
			onDisposed: () => {
				this.updated && done(this.updated, this.resetConnection);
			}
		});
	}
	dispose() {
		this.loader && this.loader.dispose();
		this._fields = null;
	}
}