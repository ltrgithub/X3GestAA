"use strict";
import * as Sdata from '../dataStore/sdata';
import { Url } from '../route/url';
import { culture, ILocalePreferences, format } from '../culture/culture';
import { getLocalString, setLocalStrings } from '../culture/localString';
import * as Delta from '../dataStore/delta';
import { syra_site } from '../syra/utility/syra_site';
import { syra_fusion } from '../syra/utility/syra_fusion';
import { Profile, IRole } from './profile';
import { IEndpoint } from './endpoint';
import { applyTheme, ITheme, DEFAULT_THEME_UUID } from '../style/styleSheet';
import { route } from '../route/route';
import { Ajax, AjaxResponse } from '../ajax/ajax';
import { PageLoader, IPageLoadError } from '../page/pageLoader';
import { syra_form } from '../syra/utility/syra_form';
import * as Endpoint from './endpoint';
import * as JsurlConverter from './jsurlConverter';
import * as Expression from '../dataStore/expression';
import { Sitemap } from '../navigation/sitemap/sitemap';
import { alertBox, showDiagnoses, showException } from '../alert/alert';
import AppConnController from './applicationConnection/appConnController';

const userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit";
export const sitemapUrl = "?representation=home.$navigation&profile={$userprofile}";
let ajax: Ajax;
let sitemapLoader: PageLoader;


export function getRoles(profile: Profile): Promise<IRole[]> {
	return new Promise<IRole[]>((res, rej) => {
		ajax && ajax.dispose();
		ajax = new Ajax();
		ajax.get({
			lock: true,
			url: profile.roleLookupUrl + "&count=500",
			end: (response: AjaxResponse) => {
				if (response.ok) {
					res(response.data.$resources);
				}
				else {
					rej(response.error.diagnoses);
				}
			}
		});
	}).catch(showDiagnoses);
}

export function getEndpoints(profile: Profile): Promise<IEndpoint[]> {
	return new Promise<IEndpoint[]>((res, rej) => {
		ajax && ajax.dispose();
		ajax = new Ajax();
		ajax.get({
			lock: true,
			url: profile.endPointLookupUrl + "&count=500",
			end: (response: AjaxResponse) => {
				response.ok ? res(response.data.$resources) : rej(response.error.diagnoses);
			}
		});
	}).catch(showDiagnoses);

}

export function getSitemap(profile: Profile) {
	if (!profile.sitemap) {
		sitemapLoader && sitemapLoader.dispose();
		sitemapLoader = new PageLoader(new Url(Expression.parse({}, sitemapUrl)));
		sitemapLoader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
			if (error) {
				showDiagnoses(error.diagnoses, getLocalString("profile_sitemap_load_failed"));
			}
			else {
				if (representation.$diagnoses) {
					showDiagnoses(representation.$diagnoses, getLocalString("profile_sitemap_load_failed"));
				}
				let $prototype = representation.$prototype;
				let dataset: any = {};
				let keys = Object.keys(representation);
				for (let key of keys) {
					if (key != "$prototype" && key != "$article") {
						dataset[key] = (representation as any)[key];
					}
				}
				profile.sitemap = new Sitemap($prototype, dataset);
			}
		});
	}
}

export function getProfile(): Promise<Profile> {
	return new Promise<any>((res, rej) => {
		let url = userProfileUrl
		let data: any;
		let currentUrl: Url = new Url(route.currentUrl);
		let endpoint: string, role: string;
		let jsProfile = JsurlConverter.parse(currentUrl.params && currentUrl.params.profile);
		if (jsProfile) {
			role = jsProfile.role && ("\'" + jsProfile.role + "\'");
			endpoint = jsProfile.ep && ("\'" + jsProfile.ep + "\'");
			jsProfile.loc && Ajax.setup(jsProfile.loc);
		}
		if (currentUrl.endpoint && !endpoint) {
			if (!Endpoint.matchContract(Endpoint.administration, currentUrl.endpoint)
				&& !Endpoint.matchContract(Endpoint.search, currentUrl.endpoint)) {
				endpoint = "dataset eq \'" + currentUrl.endpoint.dataset + "\'";
			}
		}
		if (role || endpoint) {
			data = {
				$etag: 0
			};
			if (role) {
				url += "&role=" + role;
				data.selectedRole = {
					$url: Endpoint.toUrlString(Endpoint.administration) + "/roles(" + role + ")"
				};
			}
			if (endpoint) {
				data.selectedEndpoint = {
					$url: Endpoint.toUrlString(Endpoint.administration) + "/endPoints(" + endpoint + ")"
				};
			}
		}
		ajax = new Ajax();
		ajax.post({
			url: url,
			data: data,
			end: (response: AjaxResponse) => {
				ajax = null;
				if (response.ok) {
					let code = response.data.selectedLocale && response.data.selectedLocale.code;
					code && Ajax.setup(code);
					let loader = new PageLoader(new Url(url));
					loader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
						if (error) {
							rej(error.diagnoses)
						}
						else {
							res(new Profile(representation.$prototype, response.data));
						}
					});
				}
				else {
					rej(response.error.diagnoses);
				}
			}
		});
	}).catch(manageProfileLoadFail);
}

function manageProfileLoadFail(diagnoses: Sdata.IDiagnose[]) {
	showDiagnoses(diagnoses, getLocalString("profile_load_failed"), () => {
		route.gotoLogon();
	});
}

export interface IConfirmChangePops {
	title?: string,
	message: string,
}

function confirmChange(props: IConfirmChangePops): Promise<void> {
	return new Promise<void>((res, rej) => {
		if (syra_fusion.book) {
			alertBox({
				message: (props.message || getLocalString("profile_change_default")) + "\n" + getLocalString("profile_change_confirm"),
				title: props.title || getLocalString("profile_change_box_title"),
				severity: "warning",
				autoClose: 40000,
				buttons: {
					mode: "yes,no"
				},
				onClose: (closeBy: string) => {
					(closeBy === "yes") ? syra_fusion.onUserActionUnloadEx(res) : rej();
				}
			});
		}
		else {
			syra_form.onBeforeUnloadPage(res);
		}
	});
}

export function changeTheme(profile: Profile, theme: ITheme, end: () => void) {
	return put(profile, {
		selectedTheme: theme.$uuid == DEFAULT_THEME_UUID ? null : {
			$uuid: theme.$uuid
		}
	}).then(() => {
		applyTheme(profile.selectedTheme);
	});
}

export function changeLocale(profile: Profile, locale: ILocalePreferences): Promise<void> {
	return confirmChange({
		message: getLocalString("profile_change_locale") + "\n" + getLocalString("profile_change_warn")
	}).then(() => {
		return put(profile, {
			selectedLocale: {
				$uuid: locale.$uuid
			}
		}).then(loadLocalStrings);
	});
}

export function changeRole(profile: Profile, role: IRole): Promise<void> {
	return confirmChange({
		message: getLocalString("profile_change_role") + "\n" + getLocalString("profile_change_warn"),
	}).then(() => {
		return put(profile, { selectedRole: { $uuid: role.$uuid } });
	});
}

export function changeEndpoint(profile: Profile, endpoint: Endpoint.IEndpoint): Promise<void> {
	return confirmChange({
		message: getLocalString("profile_change_endpoint") + "\n" + getLocalString("profile_change_warn")
	}).then(() => {
		return put(profile, { selectedEndpoint: { $uuid: endpoint.$uuid } });
	});
}

export function changeApplicationConnection(profile: Profile, applConnController: AppConnController, end: () => void) {
	applConnController.onEdit((updated: any, resetConnection: boolean) => {
		if (resetConnection) {
			confirmChange({
				message: getLocalString("profile_change_application_connection") + "\n" + getLocalString("profile_change_warn")
			}).then(() => {
				putAppConnChange(profile, updated, end);
			});
		}
		else {
			putAppConnChange(profile, updated, end);
		}
	});
}

function putAppConnChange(profile: Profile, updated: any, end: () => void) {
	return put(profile, { applicationConnection: { data: JSON.stringify(updated) } });
}

export function changeContext(profile: Profile) {
	let dirty: boolean;
	culture.localePreferences = profile.selectedLocale;
	Ajax.setup(culture.languageCode, profile.retryOnError);
	PageLoader.defaultEndpoint = Endpoint.toString(profile.selectedEndpoint || Endpoint.administration);
	let suffix = "";

	if (profile.selectedRole) {
		suffix += " (" + profile.selectedRole.description + ")";
	}
	if (profile.selectedEndpoint) {
		suffix += " (" + profile.selectedEndpoint.description + ")";
	}
	route.currentTitleSuffix = suffix;

	let jsUrlProfile = JsurlConverter.stringify(culture.languageCode, profile.selectedRoleUuid, profile.selectedEndpoinUuid);

	Expression.setGlobalSetting(culture.languageCode,
		profile.selectedRoleUuid,
		profile.selectedEndpoinUuid,
		jsUrlProfile);

	let url: Url = new Url(route.currentUrl);
	if (url.role && url.role != profile.selectedRoleUuid) {
		url.role = profile.selectedRoleUuid;
		dirty = true;
	}
	if (url.profile && url.profile != jsUrlProfile) {
		url.profile = jsUrlProfile;
		dirty = true;
	}
	if (url.endpoint && Endpoint.matchContract(url.endpoint, profile.selectedEndpoint)) {
		url.endpoint = Endpoint.cloneKey(profile.selectedEndpoint);
		dirty = true;
	}
	dirty && route.replaceState(url.stringify());
}

export function logout(before: () => void) {
	confirmChange({
		title: getLocalString("profile_confirm_logout_title"),
		message: getLocalString("profile_confirm_logout"),
	}).then(() => {
		ajax && ajax.dispose();
		ajax = new Ajax();
		ajax.post({
			url: "/logout",
			headers: {
				authorization: "basic"
			},
			end: (response: AjaxResponse) => {
				ajax = null;
				if (response.ok) {
					before();
					window.open(response.headers.location, "_self");
				}
				else {
					if (response.status == 404) {
						route.gotoLogon();
						return false;
					}
					showDiagnoses(response.error.diagnoses);
				}
			}
		})
	});
}

function put(profile: Profile, delta: any): Promise<any> {
	return new Promise<any>((res, rej) => {
		ajax && ajax.dispose();
		ajax = new Ajax();
		ajax.put({
			lock: true,
			url: profile.dataset.$url,
			data: Delta.merge({
				$etag: profile.dataset.$etag || 1,
				$url: profile.dataset.$url,
				$uuid: profile.$uuid,
				$actions: {
					$save: {
						$isRequested: true
					}
				}
			}, delta),
			end: (response: AjaxResponse) => { response.ok ? res(response.data) : rej(response.error.diagnoses) }
		});
	}).then((responseData) => {
		profile.reset();
		profile.applyDelta(responseData);
		profile.saveRestorePoint();
		changeContext(profile);
	}).catch((diagnoses) => {
		profile.restorePoint();
		showDiagnoses(diagnoses);
	});

}

export function loadLocalStrings(): Promise<void> {
	return new Promise<void>((res, rej) => {
		syra_site.locale_loadStrings(culture, format, (newMap: any, error: any) => {
			if (!!error) {
				rej(error);
			} else {
				setLocalStrings(newMap);
				res();
			}
		});
	}).catch((error) => {
		showException(error, getLocalString("profile_load_locale_failed"));
	});
}

export function loadDefaultLocalStrings() {
	setLocalStrings(syra_site.locale_loadDefault());
}

export function dispose() {
	sitemapLoader && sitemapLoader.dispose();
	ajax && ajax.dispose();
}