"use strict";
import * as Sdata from '../dataStore/sdata';
import { Url } from '../route/url';
import { culture, ILocalePreferences, format } from '../culture/culture';
import { getLocalString, setLocalStrings } from '../culture/localString';
import * as Delta from '../dataStore/delta';
import { syra_site } from '../syra/utility/syra_site';
import { syra_fusion } from '../syra/utility/syra_fusion';
import { Profile, IRole } from './profile';
import { applyTheme, ITheme, DEFAULT_THEME_UUID } from '../style/styleSheet';
import { route } from '../route/route';
import { Ajax, AjaxResponse } from '../ajax/ajax';
import { PageLoader, IPageLoadError } from '../page/pageLoader';
import { syra_form } from '../syra/utility/syra_form';
import * as Endpoint from './endpoint';
import * as JsurlConverter from './jsurlConverter';
import * as Expression from '../dataStore/expression';
import { Sitemap } from '../navigation/sitemap/sitemap';
import { alertBox, showDiagnoses, showException } from '../alert/alert';
import AppConnController from './applicationConnection/appConnController';

const userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit";
export const sitemapUrl = "?representation=home.$navigation&profile={$userprofile}";
let ajax: Ajax;
let sitemapLoader: PageLoader;

export function getSitemap(profile: Profile) {
	if (!profile.sitemap) {
		sitemapLoader && sitemapLoader.dispose();
		sitemapLoader = new PageLoader(new Url(Expression.parse({}, sitemapUrl)));
		sitemapLoader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
			if (error) {
				showDiagnoses(error.diagnoses, getLocalString("profile_sitemap_load_failed"));
			}
			else {
				if (representation.$diagnoses) {
					showDiagnoses(representation.$diagnoses, getLocalString("profile_sitemap_load_failed"));
				}
				let $prototype = representation.$prototype;
				let dataset: any = {};
				let keys = Object.keys(representation);
				for (let key of keys) {
					if (key != "$prototype" && key != "$article") {
						dataset[key] = (representation as any)[key];
					}
				}
				profile.sitemap = new Sitemap($prototype, dataset);
			}
		});
	}
}

export function getProfile(end: (profile: Profile) => void) {
	let url = userProfileUrl
	let data: any;
	let currentUrl: Url = new Url(route.currentUrl);
	let endpoint: string, role: string;
	let jsProfile = JsurlConverter.parse(currentUrl.params && currentUrl.params.profile);
	if (jsProfile) {
		role = jsProfile.role && ("\'" + jsProfile.role + "\'");
		endpoint = jsProfile.ep && ("\'" + jsProfile.ep + "\'");
		jsProfile.loc && Ajax.setup(jsProfile.loc);
	}
	if (currentUrl.endpoint && !endpoint) {
		if (!Endpoint.matchContract(Endpoint.administration, currentUrl.endpoint)
			&& !Endpoint.matchContract(Endpoint.search, currentUrl.endpoint)) {
			endpoint = "dataset eq \'" + currentUrl.endpoint.dataset + "\'";
		}
	}
	if (role || endpoint) {
		data = {
			$etag: 0
		};
		if (role) {
			url += "&role=" + role;
			data.selectedRole = {
				$url: Endpoint.toUrlString(Endpoint.administration) + "/roles(" + role + ")"
			};
		}
		if (endpoint) {
			data.selectedEndpoint = {
				$url: Endpoint.toUrlString(Endpoint.administration) + "/endPoints(" + endpoint + ")"
			};
		}
	}
	ajax = new Ajax();
	ajax.post({
		url: url,
		data: data,
		end: (response: AjaxResponse) => {
			ajax = null;
			if (response.ok) {
				let code = response.data.selectedLocale && response.data.selectedLocale.code;
				code && Ajax.setup(code);
				let loader = new PageLoader(new Url(url));
				loader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
					if (error) {
						manageProfileLoadFail(error.diagnoses);
					}
					else {
						end(new Profile(representation.$prototype, response.data));
					}
				});
			}
			else {
				manageProfileLoadFail(response.error.diagnoses);
			}
		}
	});
}

function manageProfileLoadFail(diagnoses: Sdata.IDiagnose[]) {
	showDiagnoses(diagnoses, getLocalString("profile_load_failed"), () => {
		route.gotoLogon();
	});
}

export interface IConfirmChangePops {
	title?: string,
	message: string,
	do: (yes?: boolean) => void
}

function confirmChange(props: IConfirmChangePops) {
	if (syra_fusion.book) {
		alertBox({
			message: (props.message || getLocalString("profile_change_default")) + "\n" + getLocalString("profile_change_confirm"),
			title: props.title || getLocalString("profile_change_box_title"),
			severity: "warning",
			autoClose: 40000,
			buttons: {
				mode: "yes,no"
			},
			onClose: (closeBy: string) => {
				if (closeBy == "yes") {
					syra_fusion.onUserActionUnloadEx(props.do);
				}
				else {
					props.do(false);
				}
			}
		});
	}
	else {
		syra_form.onBeforeUnloadPage(() => props.do());
	}
}

export function changeTheme(profile: Profile, theme: ITheme, end: () => void) {
	put(profile, {
		selectedTheme: theme.$uuid == DEFAULT_THEME_UUID ? null : {
			$uuid: theme.$uuid
		}
	}, (ok: boolean) => {
		ok && applyTheme(profile.selectedTheme);
		end();
	});
}

export function changeLocale(profile: Profile, locale: ILocalePreferences, end: (ok: boolean) => void) {
	confirmChange({
		message: getLocalString("profile_change_locale") + "\n" + getLocalString("profile_change_warn"),
		do: (yes?: boolean) => {
			if (yes !== false) {
				put(profile, {
					selectedLocale: {
						$uuid: locale.$uuid
					}
				}, (ok: boolean) => {
					ok && loadLocalStrings(end);
				})
			}
		}
	});
}

export function changeRole(profile: Profile, role: IRole, end: () => void) {
	confirmChange({
		message: getLocalString("profile_change_role") + "\n" + getLocalString("profile_change_warn"),
		do: (yes?: boolean) => {
			if (yes !== false) {
				put(profile, {
					selectedRole: {
						$uuid: role.$uuid
					}
				}, end)
			}
		}
	});
}

export function changeEndpoint(profile: Profile, endpoint: Endpoint.IEndpoint, end: () => void) {
	confirmChange({
		message: getLocalString("profile_change_endpoint") + "\n" + getLocalString("profile_change_warn"),
		do: (yes?: boolean) => {
			if (yes !== false) {
				put(profile, {
					selectedEndpoint: {
						$uuid: endpoint.$uuid
					}
				}, end)
			}
		}
	});
}

export function changeApplicationConnection(profile: Profile, applConnController: AppConnController, end: () => void) {
	applConnController.onEdit((updated: any, resetConnection: boolean) => {
		if (resetConnection) {
			confirmChange({
				message: getLocalString("profile_change_application_connection") + "\n" + getLocalString("profile_change_warn"),
				do: (yes?: boolean) => {
					if (yes !== false) {
						putAppConnChange(profile, updated, end);
					}
				}
			});
		}
		else {
			putAppConnChange(profile, updated, end);
		}
	});
}

function putAppConnChange(profile: Profile, updated: any, end: () => void) {
	put(profile, {
		applicationConnection: {
			data: JSON.stringify(updated)
		}
	}, end);
}

export function changeContext(profile: Profile) {
	let dirty: boolean;
	culture.localePreferences = profile.selectedLocale;
	Ajax.setup(culture.languageCode, profile.retryOnError);
	PageLoader.defaultEndpoint = Endpoint.toString(profile.selectedEndpoint || Endpoint.administration);
	let suffix = "";

	if (profile.selectedRole) {
		suffix += " (" + profile.selectedRole.description + ")";
	}
	if (profile.selectedEndpoint) {
		suffix += " (" + profile.selectedEndpoint.description + ")";
	}
	route.currentTitleSuffix = suffix;

	let jsUrlProfile = JsurlConverter.stringify(culture.languageCode, profile.selectedRoleUuid, profile.selectedEndpoinUuid);

	Expression.setGlobalSetting(culture.languageCode,
		profile.selectedRoleUuid,
		profile.selectedEndpoinUuid,
		jsUrlProfile);

	let url: Url = new Url(route.currentUrl);
	if (url.role && url.role != profile.selectedRoleUuid) {
		url.role = profile.selectedRoleUuid;
		dirty = true;
	}
	if (url.profile && url.profile != jsUrlProfile) {
		url.profile = jsUrlProfile;
		dirty = true;
	}
	if (url.endpoint && Endpoint.matchContract(url.endpoint, profile.selectedEndpoint)) {
		url.endpoint = Endpoint.cloneKey(profile.selectedEndpoint);
		dirty = true;
	}
	dirty && route.replaceState(url.stringify());
}

export function logout(before: () => void) {
	confirmChange({
		title: getLocalString("profile_confirm_logout_title"),
		message: getLocalString("profile_confirm_logout"),
		do: (yes?: boolean) => {
			if (yes !== false) {
				ajax && ajax.dispose();
				ajax = new Ajax();
				ajax.post({
					url: "/logout",
					headers: {
						authorization: "basic"
					},
					end: (response: AjaxResponse) => {
						ajax = null;
						if (response.ok) {
							before();
							window.open(response.headers.location, "_self");
						}
						else {
							if (response.status == 404) {
								route.gotoLogon();
								return false;
							}
							showDiagnoses(response.error.diagnoses);
						}
					}
				})
			}
		}
	});
}

function put(profile: Profile, delta: any, end: (ok: boolean) => void) {
	ajax && ajax.dispose();
	ajax = new Ajax();
	ajax.put({
		lock: true,
		url: profile.dataset.$url,
		data: Delta.merge({
			$etag: profile.dataset.$etag || 1,
			$url: profile.dataset.$url,
			$uuid: profile.$uuid,
			$actions: {
				$save: {
					$isRequested: true
				}
			}
		}, delta),
		end: (response: AjaxResponse) => {
			if (response.ok) {
				profile.reset();
				profile.applyDelta(response.data);
				profile.saveRestorePoint();
				changeContext(profile);
				end(true);
			}
			else {
				profile.restorePoint();
				showDiagnoses(response.error.diagnoses);
				end(false);
			}
		}
	});
}

export function loadLocalStrings(end: (ok: boolean) => void) {
	syra_site.locale_loadStrings(culture, format, (newMap: any, error: any) => {
		error ? showException(error, getLocalString("profile_load_locale_failed")) : setLocalStrings(newMap);
		end(!!error);
	});
}

export function loadDefaultLocalStrings() {
	setLocalStrings(syra_site.locale_loadDefault());
}

export function dispose() {
	sitemapLoader && sitemapLoader.dispose();
	ajax && ajax.dispose();
}