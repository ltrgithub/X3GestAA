"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Sdata from '../dataStore/sdata';
import { culture, ILocalePreferences } from '../culture/culture';
import * as Cookie from '../utility/storage/cookie';
import { applyTheme, ITheme } from '../style/styleSheet';
import { Profile, IRole } from './profile';
import * as Actions from './actions';
import { IEndpoint } from './endpoint';
import { Ajax } from '../ajax/ajax';
import { route } from '../route/route';
import { syra_site } from '../syra/utility/syra_site';
import { syra_help } from '../syra/utility/syra_help';
import { ProfileBar } from './bar/profileBar';
import { OfficeController } from '../office/officeController';
import { OfficeProfileBar } from '../office/officeProfileBar';
import * as BookmarkController from '../navigation/bookmark/bookmarkController';
import { SitemapPageController } from '../navigation/sitemap/page/sitemapPageController';
import AppConnController from './applicationConnection/appConnController';
import { IProfileBookmark } from './bar/profileBarProps';
import { showDiagnoses } from '../alert/alert';
import { getLocalString } from '../culture/localString';
import { syra_fusion } from '../syra/utility/syra_fusion';
import * as clientSettings from '../utility/clientSettings';
import * as overHelper from '../over/overHelper'
import * as Pendo from '../utility/vendor/pendo';

export interface IProps extends IProfileBookmark {
    office: OfficeController,
    searchFacet: boolean,
    classicMode: boolean,
    profile: Profile
    onLogout: () => void,
    onReady: (profile: Profile) => void,
    onSwitchApplicationMode: (event: React.MouseEvent<HTMLElement>) => void
}
interface IState {
    searchFieldVisible: boolean,
    sitemapOpened: boolean
}

export class ProfileController extends React.Component<IProps, IState>{
    appConnController: AppConnController;
    applicationConnectionUrl: string;
    navigationPopupRoot: HTMLElement;
    sitemapPageController: SitemapPageController;
    sitemapTransitionInProgress: boolean = false;

    constructor(props: IProps, context: any) {
        super(props, context);
        this.state = {
            searchFieldVisible: false,
            sitemapOpened: false
        };
        Ajax.setup(culture.languageCode);
        Actions.loadDefaultLocalStrings();
    }

    get sessionId(): string {
        return Cookie.get("syracuse.sid." + window.location.port) || "";
    }

    getNavigationContext(profile: Profile): Promise<void> {
        profile.bookmarks = profile.sitemap = null;
        Actions.dispose();
        return BookmarkController.fetch(profile).then(() => {
            Actions.getSitemap(profile);
        }).catch((diagnoses) => {
            diagnoses && showDiagnoses(diagnoses, getLocalString("profile_bookmarks_fetch_failed"));
        });
    }

    onToggleRolesPopup = (opened: boolean) => {
        if (opened && !this.props.profile.roles) {
            Actions.getRoles(this.props.profile).then((roles: IRole[]) => {
                this.props.profile.roles = roles;
                this.setState({});
            });
        }
    }

    onToggleEndpointsPopup = (opened: boolean) => {
        if (opened && !this.props.profile.endpoints) {
            Actions.getEndpoints(this.props.profile).then((endpopints: IEndpoint[]) => {
                this.props.profile.endpoints = endpopints;
                this.setState({});
            });
        }
    }

    componentDidMount() {
        Actions.getProfile().then((profile: Profile) => {
            profile.saveRestorePoint();
            Actions.changeContext(profile);
            syra_site.userProfile = profile;
            //to improve for moment used only by ui-text
            (window as any).syra_context.developpementMode = profile.developpementMode;
            clientSettings.traverseClientSettings(profile.clientSettings, { "userProfile": profile.dataset });
            Actions.loadLocalStrings().then((ok) => {
                applyTheme(profile.selectedTheme);
                profile.clientSettings.pendo && Pendo.loadPendo(profile.clientSettings.pendo);
                this.getNavigationContext(profile).then(() => { this.props.onReady(profile) });
                //compatibility with v11. Used by cti extension
                syra_site.showExtensions(profile);
            });
        });
    }

    componentDidUpdate(prevProps: IProps, prevState: IState) {
        if (this.props.profile) {
            let curAppConnUrl = this.props.profile.applicationConnectionUrl;
            if (curAppConnUrl != this.applicationConnectionUrl) {
                this.appConnController && this.appConnController.dispose();
                this.appConnController = null;
                this.applicationConnectionUrl = curAppConnUrl;
                if (curAppConnUrl) {
                    this.appConnController = new AppConnController();
                    this.appConnController.load(curAppConnUrl, (appConn) => {
                        if (appConn) { //null if error
                            appConn.applyDelta(this.props.profile.applicationConnectionData);
                        }
                        this.forceUpdate();
                    });
                }
                else {
                    this.setState({});
                }
            }

            if (!this.navigationPopupRoot && this.props.profile.sitemap && this.props.profile.sitemap.modules) {
                this.navigationPopupRoot = overHelper.createOverRoot("s_sitemap_popup_root");
                this.navigationPopupRoot.classList.add('s_sitemap_popup_root_hidden');
                ReactDom.render(<SitemapPageController ref={(sitemapPageController) => { this.sitemapPageController = sitemapPageController }} profile={this.props.profile} />, this.navigationPopupRoot);
            }

            if (prevState.sitemapOpened != this.state.sitemapOpened) {
                this.sitemapTransitionInProgress = true;
                if (this.state.sitemapOpened) {
                    this.navigationPopupRoot.classList.remove('s_sitemap_popup_root_hidden');
                    this.sitemapPageController.rollDown().then(() => {
                        this.sitemapTransitionInProgress = false;
                    });
                } else {
                    this.sitemapPageController.rollUp().then(() => {
                        this.navigationPopupRoot.classList.add('s_sitemap_popup_root_hidden');
                        this.sitemapTransitionInProgress = false;
                    });
                }
            }
        }
    }

    onSelectTheme = (theme: ITheme) => {
        Actions.changeTheme(this.props.profile, theme).then(route.renderCurrentUrl);
    }
    onSelectLocale = (locale: ILocalePreferences) => {
        Actions.changeLocale(this.props.profile, locale).then(route.reload);
    }
    onSelectRole = (role: IRole) => {
        Actions.changeRole(this.props.profile, role).then(route.renderCurrentUrl);
    }
    onSelectEndpoint = (endpoint: IEndpoint) => {
        Actions.changeEndpoint(this.props.profile, endpoint).then(() => {
            this.getNavigationContext(this.props.profile).then(() => route.gotoHome(true)); //force page replacement
        });
    }
    onEditAppConn = () => {
        Actions.changeApplicationConnection(this.props.profile, this.appConnController, route.reload);
    }
    onGoToLegal = () => {
        syra_help.openLegalPage();
    }
    onGoToUser = () => {
        route.push(this.props.profile.userUrl);
    }
    onUploadPhoto = () => {
        alert("To do");
    }
    onGotoHelpCenter = () => {
        route.openNewWindow("/help/" + culture.languageCode + "/index.htm?format=text/html$ep=" + this.props.profile.selectedEndpoinUuid);
    }
    onGotoHelpShortcuts = () => {
        route.openNewWindow("/help/" + culture.languageCode + "/KEYS/index.htm?format=text/html");
    }
    onToggleSearch = () => {
        if (this.props.classicMode) {
            syra_fusion.runGoTo();
        }
        else {
            this.setState({
                searchFieldVisible: !this.state.searchFieldVisible
            });
        }
    }
    componentWillUnmount() {
        this.appConnController && this.appConnController.dispose();
        this.navigationPopupRoot = overHelper.removeOverRoot(this.navigationPopupRoot);
        this.navigationPopupRoot = null;
        Actions.dispose();
    }
    renderOfficeBar() {
        return <OfficeProfileBar profile={this.props.profile} />;
    }
    onToggleSitemap = () => {
        if (!this.sitemapTransitionInProgress) {
            this.setState({
                sitemapOpened: !this.state.sitemapOpened
            });
        }
    }
    renderDefaultBar() {
        return <ProfileBar
            onHeaderClick={this.props.onSwitchApplicationMode}
            onGoHome={route.gotoHome}
            sitemapOpened={this.state.sitemapOpened}
            onToggleSitemap={this.onToggleSitemap}
            onGotoHelpCenter={this.onGotoHelpCenter}
            onGotoHelpShortcuts={this.onGotoHelpShortcuts}
            onToggleRolesPopup={this.onToggleRolesPopup}
            onSelectRole={this.onSelectRole}
            onToggleEndpointsPopup={this.onToggleEndpointsPopup}
            onSelectEndpoint={this.onSelectEndpoint}
            onSelectLocale={this.onSelectLocale}
            onSelectTheme={this.onSelectTheme}
            onGoToLegal={this.onGoToLegal}
            onGoToUser={this.onGoToUser}
            searchFieldVisible={!this.props.classicMode && (this.props.searchFacet || this.state.searchFieldVisible)}
            onToggleSearch={this.onToggleSearch}
            onUploadPhoto={this.onUploadPhoto}
            appConnFields={this.appConnController && this.appConnController.fields}
            onEditAppConn={this.onEditAppConn}
            classicMode={this.props.classicMode}
            profile={this.props.profile}
            onLogout={this.props.onLogout}
            bookmarkDisabled={this.props.bookmarkDisabled}
            mainPageBookmark={this.props.mainPageBookmark}
            onBookmarked={this.props.onBookmarked}
            onBookmarkClick={this.props.onBookmarkClick}
        />;
    }
    render() {
        if (this.props.profile) {
            return this.props.office ? this.renderOfficeBar() : this.renderDefaultBar();
        }
        return null;
    }
}