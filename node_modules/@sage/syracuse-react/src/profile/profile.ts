"use strict";
import { culture, ILocalePreferences, } from '../culture/culture';
import * as Endpoint from './endpoint';
import * as Sdata from '../dataStore/sdata';
import { tecnhicalLinks } from '../context/tecnhicalLinks';
import { Bookmarks } from '../navigation/bookmark/bookmarks';
import { Sitemap } from '../navigation/sitemap/sitemap';
import Store from '../dataStore/store';
import { ITheme } from '../style/styleSheet';
import { Url } from '../route/url';
import * as Expression from '../dataStore/expression';

export interface IRole extends Sdata.IEntity {
    description: string
}

export class Profile extends Store {
    private _locales: ILocalePreferences[];
    private _bookmarks: Bookmarks;
    private _sitemap: Sitemap;

    constructor(prototype: Sdata.IPrototype, data: any) {
        super(prototype, data);
        currentProfile = this;
    }
    get greeting(): string {
        let greeting = "";
        if(this.dataset.user.lastName) {
            if(this.dataset.user.title){
                greeting = this.dataset.user.title.charAt(0).toUpperCase() + this.dataset.user.title.slice(1) + " ";
            }
            greeting += this.dataset.user.lastName;
        }
        return greeting;
    }
    get title(): string {
        return this.dataset.user.title || "";
    }
    get login(): string {
        return this.dataset.user.login || "";
    }
    get firstName(): string {
        return this.dataset.user.firstName || "";
    }
    get lastName(): string {
        return this.dataset.user.lastName || "";
    }
    get fullName(): string {
        let name = this.firstName;
        if (name) {
            name += " ";
        }
        return name + this.lastName;
    }
    get selectedLocale(): ILocalePreferences {
        return this.dataset.selectedLocale;
    }
    get selectedRole(): IRole {
        return this.dataset.selectedRole;
    }
    get selectedRoleUuid(): string {
        return this.selectedRole && this.selectedRole.$uuid;
    }
    get roles(): IRole[] {
        return this.dataset.roles;
    }
    get selectedEndpoint(): Endpoint.IEndpoint {
        return this.dataset.selectedEndpoint;
    }
    get selectedEndpoinUuid(): string {
        return this.selectedEndpoint && this.selectedEndpoint.$uuid;
    }
    get endpoints(): Endpoint.IEndpoint[] {
        return this.dataset.endpoints;
    }
    get selectedTheme(): ITheme {
        return this.dataset.selectedTheme;
    }
    get security(): any {
        return this.dataset.security || {};
    }
    get themes(): ITheme[] {
        return this.dataset.themes;
    }
    get retryOnError(): number {
        return this.dataset.retryOnError || 3;
    }
    get sessionTimeOut(): number {
        return (this.dataset.sessionTimeout || 2) * 60 * 1000; // converting minutes into milliseconds
        //return 186000; // 3.1 minutes for test
    }
    get enableTestRobot(): boolean {
        return this.dataset.enableTestRobot;
    }
    get developpementMode(): boolean {
        return this.dataset.developpementMode;
    }
    get productName(): string {
        return this.dataset.productName;
    }
    get authoringAllowed(): boolean {
        return (this.dataset.authoringLevel || "none") != "none";
    }
    get endPointLookupUrl(): string {
        return this.parse(this.dataset.$properties.selectedEndpoint.$item.$links.$lookup.$url);
    }
    get roleLookupUrl(): string {
        return this.parse(this.dataset.$properties.selectedRole.$item.$links.$lookup.$url);
    }
    get applicationConnectionUrl(): string {
        if (this.links.$applicationConnection) {
            return this.parse(this.links.$applicationConnection.$url.replace("{$baseUrl}", "/sdata/" + Endpoint.toUrlString(this.selectedEndpoint)));
        }
    }
    get applicationConnectionData(): any {
        let data = this.dataset.applicationConnectionData || (this.dataset.applicationConnection && this.dataset.applicationConnection.data);
        return data && JSON.parse(data);
    }
    get localeLookupUrl(): string {
        return this.parse(this.dataset.$properties.selectedLocale.$item.$links.$lookup.$url);
    }
    get ctiMakeCall(): Sdata.IMenu {
        return this.getMenu("$ctiMakeCall");
    }
    get shellWidgets(): any[] {
        return this.dataset.shellWidgets;
    }
    get bookmarkUrl(): string {
        return this.parse(this.links.$bookmarks.$url);
    }
    get userUrl(): string {
        return this.dataset.user.$url;
    }
    get technicalLinks(): Sdata.IMenu[] {
        let links: Sdata.IMenu[] = [];
        for (let link of tecnhicalLinks) {
            if (!link.developpementMode || this.developpementMode) {
                links.push(link)
            }
        }
        return links;
    }
    get bookmarks(): Bookmarks {
        return this._bookmarks;
    }
    set bookmarks(newBookmarks: Bookmarks) {
        if (this._bookmarks) {
            this._bookmarks.dispose();
            this._bookmarks = null;
        }
        this._bookmarks = newBookmarks;
    }
    get sitemap(): Sitemap {
        return this._sitemap;
    }
    set sitemap(newSitemap: Sitemap) {
        if (this._sitemap) {
            this._sitemap.dispose();
            this._sitemap = null;
        }
        this._sitemap = newSitemap;
    }
    get locales(): ILocalePreferences[] {
        return this._locales;
    }
    set locales(values: ILocalePreferences[]) {
        this._locales = values;
    }
    dispose() {
        this.bookmarks = this.sitemap = null;
    }
    get photo(): string {
        if (this.dataset.user.photo) {
            let $url = this.dataset.user.photo.$url;
            if ($url) {
                let url = new Url(Expression.parse(this.dataset.user, $url));
                url.params.salt = Math.round(Math.random() * 1000);
                url.params.language = culture.languageCode;
                return url.stringify();
            }
        }
        return null;
    }
    get clientSettings(): any {
        let data = this.dataset.clientSettings || {};
        return data;
    }

}

export let currentProfile: Profile;