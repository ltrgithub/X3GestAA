"use strict";
import { browser } from '../utility/browser/browser';
import { syra_form } from '../syra/utility/syra_form';
import { syra_menus } from '../syra/utility/syra_menus';
import { syra_item } from '../syra/utility/syra_item';
import * as dynamicShortcut from './compatibility/dynamicShortcut';
import { syra_help } from '../syra/utility/syra_help';
import { keyCommands, playSequence } from './keySpot';
import { KeySequence } from './keySequence';
import * as walk from './compatibility/walk';
import * as quickAccess from './compatibility/quickAccess';

export let tip = keyCommands;
//var _devTools = require('syracuse-ui/lib/site/aside/devToolsPanel');

export let quick = quickAccess;
export let dynamic = dynamicShortcut;

function _resizeGridColumns(item: any) {
    let hasFit;
    let lists = (item.page == item) ? syra_item.getLists(item) : [];
    item.isArrayField && lists.push(item);
    if (lists.length) {
        for (let list of lists) {
            let builder = list && list.builder;
            if (builder && builder.adjustColToContent) {
                hasFit = true;
                builder.adjustColToContent();
            }
        }
    }
    return hasFit;
}

function _selectListHTMLContent(list: any) {
    var range = document.createRange();
    var scrollHeadTable = list.builder.scrollTable && list.builder.scrollTable.headTable;
    scrollHeadTable && range.selectNode(scrollHeadTable);
    list.body && range.selectNode(list.body);
    var select = document.getSelection();
    select.removeAllRanges();
    select.addRange(range);
}


export function applyEscape(item: any, shortcuts: KeySequence, event: any) {
    let isApplyed;
    if (item.applyEscape && item.applyEscape(event)) { //close choice, date, time selectors
        return true;
    }
    if (item.isField) {
        if (item.popupPicker) {
            item.popupPicker.close();
            isApplyed = true;
        }
        else {
            if (item.page.externalAdapter && item.page.externalAdapter.applyEscape) {
                isApplyed = item.page.externalAdapter.applyEscape(item);
            }
        }
    }
    if (!isApplyed) {
        if (playSequence(shortcuts, event)) return true;
    }
}


export function keydown(item: any, keySequence: KeySequence, event: KeyboardEvent): any {
    if (item.variantItem) {
        return keydown(item.variantItem, keySequence, event);
    }
    if (!keySequence.esc && keySequence.space) {
        let node = document.activeElement;
        if (node.tagName == "A") {
            (node as HTMLAnchorElement).click();
            keySequence.reset(); //ensure reset as keyup could not be called
            return true;
        }
    }
    if (!keySequence.escOnly && playSequence(keySequence, event)) return true;

    let isPage = item.page == item;

    if (!isPage && item.popupCard && item.list.builder) {
        isPage = true;
        item = item.list.builder;
    }

    if (keySequence.esc) {
        if (isPage) {
            // Just check if it's a dynamic registered shortcut (only for page today...)
            if (dynamic.invoke(keySequence.map, item, event)) {
                return true;
            }
            if (item.applyShortCut && item.applyShortCut(keySequence.map, event)) {
                return true;
            }
            if (keySequence.map.f5) {
                //refresh page data with autofetch mode
                syra_menus.click.refreshPageData(item, event);
                return true;
            }
        }
        if (keySequence.map.f1) {
            //open help on item, SHIFT open help on page
            syra_help.openByShortCut(item.page, (event.shiftKey || isPage) ? null : item);
            return true;
        }
        if (keySequence.map.f6) {
            //showProperty of field. Currently for fusion. Syracuse to do
            syra_menus.click.showFieldProperty(item);
            return true;
        }
        if (keySequence.map.f9) {
            //open fusion tunnel
            return item.isField && syra_menus.click.tunnel(item, event);
        }
        if (keySequence.map.f11 || (keySequence.map.h && !keySequence.map.g)) {
            //switch left /right side bar
            let switchLeft = keySequence.map.f11 || (keySequence.map.h && keySequence.map.l);
            let switchRight = keySequence.map.f11 || (keySequence.map.h && keySequence.map.r);
            if (switchLeft || switchRight) {
                for (let bar of item.page.bars) {
                    if ((switchLeft && bar.options.leftSide) ||
                        (switchRight && !bar.options.leftSide)) {
                        bar.collapse();
                    }
                }
            }
            return true;
        }
        if (keySequence.map.q) {
            // put cursor into first editable field of filter row
            var list;
            if (isPage && (!item.isFusionPage || item.$facet === "$lookup")) {
                list = syra_item.findList(item.page);

            }
            else {
                list = item;
            }
            list && list.filter_row && list.filter_row.focus();
            return true;
        }
        if (keySequence.map.m || keySequence.map.f4) {
            //open contextual menu
            return syra_menus.click.contextualMenu(event.shiftKey ? item.articleParent : item, event);
        }
        if (keySequence.map.insert || (keySequence.map.n && !keySequence.map.g)) {
            return syra_menus.click.create(item);
        }
        if (keySequence.map["delete"]) {
            return syra_menus.click.deleteItem(item);
        }
        if (keySequence.map.enter || keySequence.map.space) {
            //trigger main action of page
            var main = isPage && item.getMainAction();
            main &&
                syra_menus.click.fire({
                    menu: main,
                    event: event
                });
            return true;
        }
        if (keySequence.map.a) {
            if (isPage && event.ctrlKey) {
                item.selectText && item.selectText();
                return true;
            }
            if (item.isArrayField && item.selectHTMLContent) {
                _selectListHTMLContent(item);
                return true;
            }
        }
        if (isPage) {
            if (keySequence.map.j) {
                keySequence.map.j && syra_menus.click.prev(item, event.shiftKey);
                return true;
            }
            if (keySequence.map.k) {
                syra_menus.click.next(item, event.shiftKey);
                return true;
            }
        }
        if (keySequence.map.w) {
            keySequence.map.z && (window as any).syra_preference.page.reset(item.page);
            return true;
        }
        if (item.isField && ((!keySequence.map.h && !event.ctrlKey && !event.altKey && keySequence.map.l) || keySequence.map.f12)) {
            syra_menus.click.selector(item, null, event);
            return true;
        }
        if (keySequence.map.r) {
            return _resizeGridColumns(item);
        }

        if (item.isField && keySequence.map.t) { //date=Today
            if (item.applyShortCut && item.applyShortCut(keySequence.map, event)) {
                return true;
            }
        }

        if ((keySequence.map.shift && keySequence.map.left) || (keySequence.map.shift && keySequence.map.right)) {
            walk.throughSections(item, keySequence, event);
            return true;
        }
        if (keySequence.map.shift && keySequence.map.down) {
            if (item.page.fusionBar && item.page.fusionBar.blocks) {
                return walk.throughLeftListSections(item);
            }
        }
        if (keySequence.map.shift && keySequence.map.up) {
            //syra_bookmarks.focus();
            return true;
        }
        if (keySequence.map.left || keySequence.map.right) {
            walk.throughPageTabs(item, keySequence, event);
            return true;
        }
        if (keySequence.tab || keySequence.map.i || keySequence.map.d || keySequence.map.f2) {
            if (item.page && item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {
                if (item.page.externalAdapter.applyShortCut(item, keySequence.map, event)) {
                    return true;
                };
            }
        }
        walk.resetMenuStack(item);
    }
    else {
        if (item.isField && item.page.isTranslationPage) {
            item.page.applyShortCut(keySequence.map, item);
        }
        if (keySequence.tab || keySequence.map.right || keySequence.map.left) {
            if (item.isField && item.$item.$contentEditable && keySequence.tab) {
                syra_form.onInputChange(item, event);
                return true;
            }
        }
        if (item.isArrayField && item.arrayLevel == "array" && item.$field && item.$field.$isFusionNavigationList) {
            if (item.applyShortCut(keySequence.map, event)) {
                return true;
            }
        }
        if (item.page && item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {

            if (item.$item.$isFilterMode && item.page.isFusionPage && keySequence.map.down && !keySequence.map.enter) {
                if (item.articleParent.list && item.articleParent.list.$item.$isQuickFilter) {
                    keySequence.map.enter = true;
                    delete keySequence.map.down;
                    if (item.page.externalAdapter.applyShortCut(item, keySequence.map, event)) {
                        delete keySequence.map.enter;
                        return true;
                    }
                }
            }

            if (item.page.externalAdapter.applyShortCut(item, keySequence.map, event)) {
                return true;
            }
        }
        if (item.isField || item.isArrayField || item.isMenuGroupRoot || item.editable) {
            if (item.isMenuGroupRoot && item.applyShortCut(keySequence.map, event)) {
                return true;
            }
            if (item.applyShortCut) {
                if (item.applyShortCut(keySequence.map, event))
                    return true;
            }
            if (keySequence.map.enter) {
                if (item.$item.$contentEditable) {
                    syra_form.onInputChange(item, event);
                    event.preventDefault();
                    event.stopPropagation();
                    return true;
                }
                // is ie10 the event on change is not sended on enter key when value change.
                if (browser.isMSIE && item.input && browser.version == "10.0") {
                    syra_form.onInputChange(item, event);
                }
                if (!item.page.isFusionPage && item.$item.$isFilterMode && item.articleParent.list) {
                    //is this a enter key on a highlighted record i.e no change in the filter value
                    //to improve with isDirty management
                    if (!item.isReferenceField && (item.getValue() == item.currentValue) || (item.currentValue == undefined && item.getValue() == "")) {
                        item.articleParent.list.applyShortCut(keySequence.map, event);
                    }
                    else {
                        syra_form.onInputChange(item);
                    }
                    return true;
                }
            }

        }
        if (item.isRecordArticle && !item.isFilterArticle) {
            if (keySequence.map.insert) {
                return syra_menus.click.create(item);
            }
            if (keySequence.map["delete"] && (keySequence.map.shift || item.page.isFusionPage)) {
                //trigger delete action
                return syra_menus.click.deleteItem(item);
            }
        }

        if (isPage && item.shortcutSpyerList) {
            return item.shortcutSpyerList.applyShortCut(keySequence.map, event);
        }
    }
}