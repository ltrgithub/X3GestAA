"use strict"
import Shortcut from './shortcut';
import { KeySequence } from './keySequence';

export const keyCommands = {
    newTab: "ESC N",
    firstRecord: "ESC SHIFT J",
    prevRecord: "ESC J",
    nextRecord: "ESC K",
    lastRecord: "ESC SHIFT K",
    openPicker: "ALT DOWN",
    goToDefaultHome: ["esc+g+h"],
    goToSitemap: ["esc+g+n"],
    escape: ["esc"],
    resetUserPreferences: "ESC W then Z",
    help: "ESC F1",
    mainHelp: "ESC SHIFT F1",
    fullScreen: "ESC F11",
    hideLeftBar: "ESC H L",
    hideRightBar: "ESC H R",
    refresh: "ESC F5",
    nextTab: "ESC RIGHT",
    prevTab: "ESC LEFT",
    close: "ESC",
    oldescape: 'ESC',
    contextMenu: "ESC M, ESC F4",
    toggleSearchField: ["esc+f7", "esc+s"],
    tunnel: "ESC F9",
    openDatePick: "ALT DOWN",
    openTunnel: "ESC F9",
    openLookup: "ESC L, ESC F12",
    defaultAction: "ESC ENTER, ESC SPACE",
    openPickerDate: "ALT DOWN",
    moveNextTimeColumn: "ESC LEFT",
    moveToday: "ESC T",
    moveNextWeek: "DOWN",
    movePrevWeek: "UP",
    movePrevDay: "LEFT",
    moveNextDay: "RIGHT",
    movePrevMonth: "SHIFT UP",
    moveNextMonth: "SHIFT DOWN",
    movePrevYear: "CRTL UP, CTRL LEFT",
    moveNextYear: "CRTL DOWN, CRTL RIGHT",
    movePrevTimeColumn: "RIGHT",
    movePrevTime: "UP",
    hideFull: "ESC F11",
    moveNextTime: "DOWN",
    applyCalendar: "ENTER",
    today: "ESC T",
    create: "ESC SHIFT N",
    dropDownList: "SHIFT DOWN"
}

const spots: KeySpot[] = [];

export class KeySpot {
    stack: Shortcut[] = [];
    private locked: boolean;
    constructor(private id: string, private onPlay?: (combinations: string[], event: KeyboardEvent) => boolean) {
        spots.push(this);
    }
    lock() {
        this.locked = true;
    }
    bindEscape(onEscape: (event: KeyboardEvent) => boolean): Shortcut {
        return this.bind(keyCommands.escape, onEscape);
    }
    bind(combinations: string[], onApply: (event: KeyboardEvent) => boolean): Shortcut {
        let shortcut = new Shortcut(combinations, onApply);
        this.stack.push(shortcut);
        return shortcut;
    }
    unbind(shortcut: Shortcut) {
        let index = this.stack.indexOf(shortcut);
        if (index >= 0) this.stack.splice(index, 1);
    }
    play(sequence: KeySequence, event: KeyboardEvent): boolean {
        if (sequence) {
            for (let shortcut of this.stack) {
                if (shortcut.play(sequence.combinations, event)) {
                    return true;
                }
            }
            if (this.onPlay) {
                return this.onPlay(sequence.combinations, event);
            }
        }
        //if locked, return true so all the shortcuts not catched by the keyspot will be considedered as played, involving that they will be inactive
        return this.locked;
    }
    dispose() {
        for (let shortcut of this.stack) {
            this.unbind(shortcut);
        }
        let index = spots.indexOf(this);
        if (index >= 0) spots.splice(index, 1);
        this.stack = this.onPlay = null;
    }
}

export function playSequence(sequence: KeySequence, event: KeyboardEvent): boolean {
    for (let ii = spots.length - 1; ii >= 0; ii--) {
        if (spots[ii].play(sequence, event)) {
            return true;
        }
    }
    return false;
}