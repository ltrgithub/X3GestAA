"use strict";
import * as keyMap from '../keyMap';
import {KeySequence} from '../keySequence';

const repeat: any = {};

const map: any = {
    ctrl: [] as any[],
    shift: [] as any[],
    alt: [] as any[],
    end: ["shift"], // Open dev tools panel
    up: ["shift"], // Scroll up in dev tools panel list    
    down: ["shift"], // Scroll down in dev tools panel list
    right: ["shift"], // Run current list item of dev tools panel 
    left: ["shift"], // Collapse/expand dev tools panel list
};

export function keydown(sequence: KeySequence, item: any, key: any, event: KeyboardEvent) {
    if (!sequence.esc) {
        let modifiers = map[key];
        if (modifiers) {
            let delay = 400, repeatTS;
            if (!repeat[key] && !event.repeat) {
                repeat[key] = (new Date()).getTime();
                window.setTimeout(() => {
                    delete repeat[key];
                }, delay + 10);
            } else if ((repeatTS = (new Date()).getTime()) - repeat[key] < delay && !event.repeat && (repeatTS - repeat[key]) > 100) {
                for (let modifier of modifiers) {
                    if (sequence.map[modifier]) {
                        key += ("_" + modifier);
                        break;
                    }
                }
                switch (key) {
                    case "ctrl":
                        break;
                    case "end_shift":
                        //_devTools.open(item.page || syra_site, item || syra_site);
                        break;
                    case "down_shift":
                    case "up_shift":
                        //_devTools.scroll((key.split("_"))[0]);
                        break;
                    case "right_shift":
                        //_devTools.validate();
                        break;
                    case "left_shift":
                        //_devTools.toggleBody();
                        break;
                    default:
                        delete repeat[key];
                        return null;
                }
                delete repeat[key];
                return true;
            } else {
                delete repeat[key];
            }
        }
    }
    return null;
}

export function buildShortCutDef(modifiers: any[], key: string) {
    let label = "";
    let def: any = {};
    const accelTTSep = " ";
    for (let modifier of modifiers) {
        let key = keyMap.codes[modifier];
        label += (key + accelTTSep);
        def[key] = true;
    }
    if (label) {
        let accelPref = "" + keyMap.names.esc;
        label = (accelPref ? keyMap.codes[accelPref] : "") + accelTTSep + label + (key ? keyMap.codes[key] : "");
        label = label.toUpperCase();
        if (accelPref)
            def[keyMap.codes[accelPref]] = true;
        if (key) {
            def[keyMap.codes[key]] = true;
        }
        return {
            label: label,
            def: def
        }
    }
    return null;
}