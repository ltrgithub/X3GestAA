"use strict";
import * as Delta from '../../dataStore/delta';

let stack: any[] = [];

export function invoke(shortcutFired: any, item: any, event: KeyboardEvent) {
    let scKeys = Object.keys(shortcutFired);
    let tot1 = scKeys.length;
    
    // Is the incoming shortcut has been registered for the target item?
    for (let shortcut of stack) {
        if (shortcut.scDef && shortcut.scDef.item === item) {
            let scKeys = Object.keys(shortcut.scDef);
            let tot2 = scKeys.length;
            if (shortcut.scDef.hasOwnProperty("item")) {
                tot2--;
            }
            let tot3 = 0;
            for (let key of scKeys) {
                if (key != "item") {
                    if (!shortcutFired[key]) {
                        break;
                    }
                    else
                        tot3++;
                }
            }
            if (tot1 == tot2 && tot1 == tot3) {
                let cbk = shortcut.cbk;
                let ret;
                if (cbk.bind) {
                    ret = cbk.callback.call(cbk.bind, event, cbk.data);
                }
                else {
                    ret = cbk.callback(event, cbk.data);
                }
                return ret === false || ret === null ? false : true;
            }
        }
    }
    return null;
}

export function register(item: any, scDef: any, id: any, callback: any, callbackBind: any, callbackData: any) {
    scDef = Delta.clone(scDef); //Quick correction to avoid blocking
    if (!scDef.item) {
        scDef.item = item;
    }
    else
        if (scDef.item === "page") {
            scDef.item = item.page;
        }
    stack.push({
        scDef: scDef,
        cbck: {
            callback: callback,
            bind: callbackBind,
            data: callbackData
        },
        key: id
    });
}

export function unregister(item: any, id: any) {
    for (let shortcut of stack) {
        if (shortcut.key === id && shortcut.scDef && shortcut.scDef.item === item) {
            shortcut.cbck = null;
            shortcut.scDef.item = null;
            shortcut.scDef = null;
            stack.splice(stack.indexOf(shortcut), 1);
            break;
        }
    }
}