"use strict";
let _menuStack: any[] = [];
import { KeySequence } from '../keySequence';

export function resetMenuStack(item: any) {
    if (_menuStack.length > 0) {
        item = item.page;
        if (item._lastItem) {
            throughMenuItem(item._lastItem, false);
        }
        _menuStack = [];
        item._lastItem = "";
    }
}

function throughTabs(tab: any, shortcuts: KeySequence, focusedTab?: any) {
    if (focusedTab && focusedTab.layoutParent == tab.layoutParent) {
        tab = focusedTab;
    }
    let items = tab.layoutParent.items;
    let max = items.length - 1;
    let ii = items.indexOf(tab);
    while (true) {
        if (shortcuts.map.right) {
            if (ii == max) {
                ii = 0;
            }
            else {
                ii++;
            }
        }
        else {
            if (ii == 0) {
                ii = max;
            }
            else {
                ii--;
            }
        }
        if (!items[ii].isInvisible) {
            tab.page.focusedTab = items[ii];
            items[ii].domTitle.click();
            return;
        }
    }
}

export function throughPageTabs(item: any, shortcuts: KeySequence, event: KeyboardEvent) {
    let page = item.page;
    for (let section of page.childrenSection) {
        if (section.isTabLayout) {
            throughTabs(section, shortcuts, page.focusedTab);
            return;
        }
    }
    //tab not found at top level, walk from item level
    let section = item.boxParent;
    while (section) {
        if (section.isTabLayout) {
            throughTabs(section, shortcuts, page.focusedTab);
            return;
        }
        section = section.boxParent;
    }
    if (page.focusedTab) {
        throughTabs(page.focusedTab, shortcuts);
    }
    else {
        (page != item) && throughPageTabs(page, shortcuts, event); //test to avoid loop on page
    }
}

export function throughSections(item: any, shortcuts: KeySequence, event: KeyboardEvent) {
    let page = item.page;
    if (shortcuts.map.right) {
        throughActionPanel(page, shortcuts, event);
    }
    if (shortcuts.map.left) {
        if (page.isFusionPage && page.fusionBar && !page.fusionBar.$isCollapsed) {
            let fusionBar = page.fusionBar;
            let title = fusionBar.openedBlock && fusionBar.openedBlock.title;
            if (title) {
                title.focus();
                title.click();
            }
        }
        else {
            throughActionPanel(page, shortcuts, event);
        }
    }
}

function throughActionPanel(page: any, shortcuts: KeySequence, event: KeyboardEvent) {
    _menuStack = [];
    if (page.menuBarLayout && page.menuBarLayout.items) {
        for (let menus of page.menuBarLayout.items.length) {
            if (menus.boxChildItems && (menus.$opened || menus.isMenuItem)) {
                _listChilds(menus);
            }
        }
    }
    throughMenuItem(_menuStack[0], true);
}

function _listChilds(menus: any) {
    if (menus && !menus.isMenuGroupRoot) {
        _menuStack.push(menus);
    }
    if (menus.boxChildItems) {
        for (let menuItem of menus.boxChildItems) {
            if (!menuItem.$isDisabled && !menuItem.$isHidden && (menus.$opened || menus.isMenuItem)) {
                _listChilds(menuItem);
            }
        }
    }
}

function throughMenuItem(menuItem: any, show: boolean) {
    if (show) {
        let anchor = menuItem && menuItem.domTitle || menuItem && menuItem.domItem;
        anchor && anchor.focus();
    }
}

export function throughLeftListSections(item: any) {
    let blocks = item.page.fusionBar.blocks;
    for (let ii = 0, jj = blocks.length; ii < jj; ii++) {
        if (item == blocks[ii].leftList) {
            if (ii < jj - 1) {
                ii++;
            }
            else {
                ii = 0;
            }
            let block = item.page.fusionBar.blocks[ii].title;
            block && block.click();
            return;
        }
    }
}