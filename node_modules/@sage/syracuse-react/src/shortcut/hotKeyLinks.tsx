"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { KeySpot } from './keySpot';

export class HotKeyLinks extends React.Component<{
    className?:string
}, {}> {
    keySpot: KeySpot;
    onShorcutPlay = (sequence: string[], event: KeyboardEvent) => {
        switch (sequence[0]) {
            case "right":
            case "down":
                return this.move(true);
            case "left":
            case "up":
                return this.move(false);
        }
    }
    focus(anchor: HTMLAnchorElement) {
        let disabled = anchor.getAttribute("disabled");
        if (disabled == null) {
            anchor.focus();
            return true;
        }
    }
    moveToNext(anchors: NodeListOf<HTMLAnchorElement>, start: number, after: boolean) {
        if (after) {
            for (let ii = start, jj = anchors.length; ii < jj; ii++) {
                if (this.focus(anchors[ii])) return true;
            }
        }
        else {
            for (let ii = start; ii >= 0; ii--) {
                if (this.focus(anchors[ii])) return true;
            }
        }
    }
    private move(after: boolean) {
        let root = ReactDom.findDOMNode(this) as HTMLElement;
        let anchors = root.getElementsByTagName("a");
        let active = document.activeElement;
        if (root.contains(active)) {
            for (let ii = 0, jj = anchors.length; ii < jj; ii++) {
                if (anchors[ii] == active) {
                    if (this.moveToNext(anchors, after ? ii + 1 : ii - 1, after)) return true;
                    if (this.moveToNext(anchors, after ? 0 : anchors.length - 1, after)) return true;
                    break;
                }
            }
        }
        else {
            this.moveToNext(anchors, 0, true);
        }
        return true; //disable all shorcut except for message box 
    }
    componentDidMount() {
        this.keySpot = new KeySpot("HotKeyLinks", this.onShorcutPlay);
    }
    componentWillUnmount() {
        this.keySpot && this.keySpot.dispose();
        this.keySpot = null;
    }
    render() {
        return <div className={this.props.className}>   
            {this.props.children}
        </div>;
    }
}