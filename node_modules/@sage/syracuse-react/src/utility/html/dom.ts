"use strict";
import RTL from './rtl';
import SiteDom from './siteDom';

export const rtl = new RTL();
export const site = new SiteDom();

class Css {
	layout: any = {
		pageCols: "col-lg-"
	};
	get disabled() {
		return "s_disabled";
	}
	get selected() {
		return "s_selected";
	}
	get active() {
		return "s_active";
	}
}

export const css = new Css();

export function hideFlashContainer(parent: HTMLElement, hidden: boolean) {
	if (parent) {
		let style = parent.style;
		style.visibility = hidden ? "hidden" : "";
		style.height = hidden ? "0" : "";
		style.width = hidden ? "0" : "";
		style.borderWidth = hidden ? "0" : "";
		style.padding = hidden ? "0" : "";
		style.overflow = hidden ? "hidden" : "";
	}
}


export function isParent(parent: HTMLElement, node: HTMLElement) {
	while (node && node != document.body) {
		if (node == parent) {
			return true;
		}
		node = node.parentNode as HTMLElement;
	}
	return false;
}

export function empty(node: HTMLElement) {
	if (node) {
		while (node.firstChild) {
			node.removeChild(node.firstChild);
		}
	}
	return node;
}

export function remove(node: HTMLElement) {
	if (node && node.parentNode) {
		node.parentNode.removeChild(node);
	}
}

export function disable(node: any, disabled: boolean, noCss: boolean) {
	if (disabled) {
		node.setAttribute("disabled", node.syraIsDisabled = disabled);
	} else {
		if (node.syraIsDisabled) {
			delete node.syraIsDisabled;
			node.removeAttribute("disabled");
		}
	}
	!noCss && toggleClass(node, "s-disabled", disabled);
}

export function toggle(node: HTMLElement) {
	node.style.display = (node.style.display != "none") ? "none" : "";
}

export function getBoundingClientRect(node: HTMLElement, area?: any) {
	let rect = node.getBoundingClientRect();
	area = area || {};
	area.top = Math.round(rect.top);
	area.bottom = Math.round(rect.bottom);
	area.left = Math.round(rect.left);
	area.right = Math.round(rect.right);
	area.width = Math.round(rect.width);
	area.height = Math.round(rect.height);
	return area;
};


export function isVisible(node: HTMLElement) {
	let top = document.body;
	if (top) {
		let current: any = node;
		while (current && current != top) {
			if (current.syraIsHidden || (current.style && current.style.display == "none")) {
				return false;
			}
			current = current.parentNode;
		}
		return current == top;
	}
	return false;
};

export function hide(node: HTMLElement, hidden: boolean) {
	if (node) {
		(node as any).syraIsHidden = hidden; //temp compatibility for syra
		node.style.display = hidden ? "none" : "";
	}
}

export function moveChildNodes(source: HTMLElement, target: HTMLElement) {
	while (source.childNodes.length) {
		target.appendChild(source.childNodes[0]);
	}
}

export function getNodeIndex(node: HTMLElement) {
	let parentNode = node && node.parentNode;
	if (parentNode) {
		let nodes = parentNode.childNodes;
		for (let ii = 0, jj = nodes.length; ii < jj; ii++) {
			if (nodes[ii] == node) {
				return ii;
			}
		}
	}
	return -1;
}
export function toggleClass(node: HTMLElement, css: string, on: boolean) {
	if (node) {
		let className = node.className;
		if (className !== undefined) {
			if (on) {
				if (className.indexOf(css) < 0) {
					node.className = className + (" " + css);
				}
			} else {
				node.className = className.replace(css, "");
			}
		}
	}
}

export function icon(css: string, name: string, parent?: HTMLElement): HTMLElement {
	let node = document.createElement("i");
	node.className = "s_sagearmonyeicon " + css;
	node.textContent = name;
	parent && parent.appendChild(node);
	return node;
}

function createNode(tag: string, css: string, parent?: HTMLElement): HTMLElement {
	let node = document.createElement(tag);
	node.className = css;
	parent && parent.appendChild(node);
	return node;
}
export function getParentByTag(node: HTMLElement, tag: string, root?: HTMLElement) {
	while (node) {
		if (node.tagName == tag) {
			return node;
		}
		if (root && node == root) {
			return;
		} else {
			node = node.parentNode as HTMLElement;
		}
	}
}
export function div(css: string, parent?: HTMLElement): HTMLDivElement {
	return createNode("div", css, parent) as HTMLDivElement;
}
export function span(css: string, parent?: HTMLElement): HTMLSpanElement {
	return createNode("span", css, parent) as HTMLSpanElement;
}
export function label(css: string, parent?: HTMLElement): HTMLLabelElement {
	return createNode("label", css, parent) as HTMLLabelElement;
}
export function header(css: string, parent?: HTMLElement): HTMLElement {
	return createNode("header", css, parent);
}
export function article(css: string, parent?: HTMLElement): HTMLElement {
	return createNode("article", css, parent) as HTMLElement;
}
export function ul(css: string, parent?: HTMLElement): HTMLElement {
	return createNode("ul", css, parent) as HTMLElement;
}
export function li(css: string, parent?: HTMLElement): HTMLElement {
	return createNode("li", css, parent) as HTMLElement;
}
export function td(css: string, parent?: HTMLElement): HTMLElement {
	return createNode("td", css, parent) as HTMLElement;
}
export function a(css: string, parent?: HTMLElement, url?: string): HTMLAnchorElement {
	let node = document.createElement("a");
	node.href = url;
	node.className = css;
	parent && parent.appendChild(node);
	return node;
}
export function textarea(css: string, parent: HTMLElement, rows: number): HTMLElement {
	let input = document.createElement("textarea");
	input.setAttribute("spellcheck", "false");
	input.setAttribute("autocorrect", "off");
	input.setAttribute("rows", rows.toString());
	input.className = css;
	parent && parent.appendChild(input);
	return input;
}

export function text(css: string, text: string, parent: HTMLElement): HTMLElement {
	let div = document.createElement("div");
	div.className = css;
	div.textContent = text;
	parent && parent.appendChild(div);
	return div;
}

export function input(css: string, parent: HTMLElement, type: string): HTMLElement {
	let input = document.createElement("input");
	input.setAttribute("type", type || "text");
	input.setAttribute("autocomplete", "off");
	input.setAttribute("spellcheck", "false");
	input.setAttribute("autocorrect", "off");
	input.className = css;
	parent && parent.appendChild(input);
	return input;
}

export function pre(css: string, text: string, parent: HTMLElement): HTMLElement {
	let pre = document.createElement("pre");
	pre.className = css;
	pre.textContent = text;
	parent && parent.appendChild(pre);
	return pre;
}

export function img(css: string, url: string, parent: HTMLElement): HTMLElement {
	let img = document.createElement("img");
	img.src = url;
	img.className = css;
	parent && parent.appendChild(img);
	return img;
}

export function addEditable(css: string, parent: HTMLElement): HTMLElement {
	let div = document.createElement("div");
	div.setAttribute("contenteditable", "true");
	div.className = css + " s-contenteditable";
	parent && parent.appendChild(div);
	return div;
}

export function scrollTo(nodeId: string) {
	let node = document.getElementById(nodeId);
	node && node.scrollIntoView(true);
}


