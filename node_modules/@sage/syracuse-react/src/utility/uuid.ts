"use strict";
/* @flow */
/**
 * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */

var _uuidRE = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;

var seed: Uint8Array;
var seedIndex = 0;

var timeoutFunction: any;

// name reveals too much of internals - should be something like closeListeners() or dispose()
export function clearTimeout() {
	if (timeoutFunction) {
		global.clearTimeout(timeoutFunction);
		timeoutFunction = undefined;
	}
};

try {
	var req = require;
	var crypto = req("crypto");
	seed = crypto.randomBytes(127);
	//console.log("initial seed: " + seed.toString('hex'));
	var renew = function() {
		timeoutFunction = setTimeout(function() {
			crypto.randomBytes(127, function(err: Error, bytes: Buffer) {
				if (err) throw err;
				seed = bytes;
				//console.log("renewed seed: " + seed.toString('hex'));
				renew();
			});
		}, 60 * 1000);
	};
	// next line used to prevent the jsx509 unit test from running but it seems ok now.
	// so I'm re-enabling it.
	renew();
} catch (ex) {}

function _toHex(b: number) {
	b = b & 0xff;
	return b < 16 ? "0" + b.toString(16) : b.toString(16);
};

function _fromHex(str: string, i: number) {
	var code = str.charCodeAt(i);
	return code < 0x3A ? code - 0x30 : code < 0x47 ? code + 10 - 0x41 : code + 10 - 0x61;
};

export const $exported = true;

export function generate(sep = '-') {
	var randomHex = function(len: number, mask = 0, offset = 0) {
		var n = Math.floor(Math.random() * (1 << 24));
		if (seed) {
			n ^= seed[seedIndex++ % seed.length] << 16;
			n ^= seed[seedIndex++ % seed.length] << 8;
			n ^= seed[seedIndex++ % seed.length];
		}
		if (mask) n = (n & mask) + offset;
		var s = n.toString(16);
		return s.length >= len ? s.substring(0, len) : ("00000000".substring(0, len - s.length) + s);
	};
	// Version 4 UUIDs have the form
	// xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx with hexadecimal digits x
	// and hexadecimal digits 8, 9, A, or B for y
	return randomHex(4) + randomHex(4) + sep + randomHex(4) + sep + randomHex(4, 0x0fff, 0x4000) + sep + randomHex(4, 0x3fff, 0x8000) + sep + randomHex(6) + randomHex(6);
};

export function fromBytes(bytes: Uint8Array) {
	var s = '';
	for (var i = 0; i < bytes.length; i++) {
		if (i == 4 || i == 6 || i == 8 || i == 10) s += '-';
		var j = i;
		var b = bytes[j];
		s += _toHex(b);
	}
	return s;
};
export function toBytes(str: string) {
	if (!str || str.length != 36 || !_uuidRE.test(str)) return null;
	str = str.replace(/-/g, '');
	var bytes: number[] = [];
	for (var i = 0; i < 16; i++) {
		var j = i;
		var b = (_fromHex(str, 2 * j) << 4) + _fromHex(str, 2 * j + 1);
		bytes.push(b >= 128 ? b - 256 : b);
	}
	return bytes;
};
export function fromString32(str: string) {
	return [str.substring(0, 8), str.substring(8, 12), str.substring(12, 16), str.substring(16, 20), str.substring(20)].join('-').toLowerCase();
};
export function toString32(uuid: string) {
	return uuid.replace(/-/g, '');
};