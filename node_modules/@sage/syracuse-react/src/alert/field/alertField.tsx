"use strict";
import * as React from 'react';
import { Severity, IMessage } from '../alert';
import { SeverityIcon, getSeverityCss } from '../diagnose/severity';
import { IDiagnoses } from '../alert';
import { Tip, ITip } from '../../over/tip/tip';
import './alertField.less';

class FieldDiagnoses extends React.Component<{
    className: string,
    diagnoses: IMessage[]
}, {}>{
    render() {
        if (this.props.diagnoses) {
            let content: any[] = [];
            for (let diagnose of this.props.diagnoses) {
                content.push(<div key={"diag_" + content.length} className={this.props.className + "_diagnose" + getSeverityCss(diagnose.severity)}>
                    <pre className={this.props.className + "_diagnose_pre"}>
                        <SeverityIcon severity={diagnose.severity} className={this.props.className + "_diagnose_i"} />
                        {diagnose.message}
                    </pre>
                </div>);
            }
            return <div className={this.props.className + "_diagnoses"}>{content}</div>;
        }
        return <noscript />;
    }
}

interface ISmallFieldAlertProps extends ITip, IDiagnoses {
}

export class AlertSmallField extends React.Component<ISmallFieldAlertProps, {}> {
    render() {
        return <Tip
            of={this.props.of}
            syraof={this.props.syraof}
            className="s_alert_smallfield_tip">
            <FieldDiagnoses className="s_alert_smallfield" diagnoses={this.props.diagnoses} />
        </Tip>;
    }
}
export class AlertLargeField extends React.Component<IDiagnoses, {}>{
    render() {
        return <FieldDiagnoses diagnoses={this.props.diagnoses} className="s_alert_largefield" />;
    }
}