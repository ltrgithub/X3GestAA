"use strict";
import * as React from 'react';
import Overlay from '../../over/overlay/overlay';
import { getLocalString } from '../../culture/localString';
import { Link } from '../../link/link';
import { Icon } from '../../common/icon/icon';
import { getIconName } from '../diagnose/severity';
import { IAlertBox, IAlertBoxButtons, Severity } from '../../alert/alert';
import { ToggleDescription, Description } from './description';
import { KeySpot } from '../../shortcut/keySpot';
import { HotKeyLinks } from '../../shortcut/hotKeyLinks';
import './alertBox.less';

class Banner extends React.Component<{
	severity: Severity,
	iconName: string
}, {}>{
	render() {
		return <div className={"s_alertbox_banner  s_alert_banner_" + this.props.severity}>
			<Icon name={this.props.iconName} className={"s_alertbox_severity"} />
		</div>;
	}
}

export class AlertBox extends React.Component<IAlertBox, {
	autoCloseLaps?: number,
	descriptionExpanded?: boolean
}> {
	autoCloseTimeOut: number;
	focusByDefault: string;
	keySpot: KeySpot;
	constructor(props: IAlertBox, context: any) {
		super(props, context);
		if (props.description && props.description.diagnoses) {
			for (let diagnose of props.description.diagnoses) {
				diagnose.severity = diagnose.severity || props.severity;
			}
		}
		let autoCloseLaps: number;
		if (this.props.autoClose) {
			autoCloseLaps = (typeof (this.props.autoClose) == "number" ? this.props.autoClose : 4000) / 1000
		}
		this.state = {
			descriptionExpanded: this.props.description && this.props.description.detailsVisible,
			autoCloseLaps: autoCloseLaps
		};
		this.keySpot = new KeySpot("AlertBox", () => { return true; }); //disable all shorcut except for message box
		this.keySpot.bindEscape(() => { this.onClose(); return true; });
	}
	delayAutoClose(on: boolean) {
		if (on) {
			this.autoCloseTimeOut = window.setInterval(() => {
				if (this.state.autoCloseLaps == 1) {
					clearInterval(this.autoCloseTimeOut);
					this.props.onClose(this.focusByDefault, true);
				}
				else {
					this.setState({
						autoCloseLaps: this.state.autoCloseLaps - 1
					});
				}
			}, 1000);
		}
		else {
			clearInterval(this.autoCloseTimeOut);
		}
	}
	componentDidMount() {
		this.state.autoCloseLaps && this.delayAutoClose(true);
	}
	componentWillUnmount() {
		this.keySpot && this.keySpot.dispose();
		this.keySpot = null;
		this.delayAutoClose(false);
	}
	onClose = (value?: string) => {
		this.props.onClose(value);
	}
	onExpandDescription = () => {
		this.setState({
			descriptionExpanded: !this.state.descriptionExpanded
		});
	}
	renderButtons(severity: Severity, buttonIds: string[], buttons: IAlertBoxButtons) {
		let links: any[] = [];
		for (let id of buttonIds) {
			links.push(<Link
				className={"s_alertbox_textLink s_alertbox_textLink_" + severity}
				data-s-dialog-btn={id}
				key={id}
				title={(buttons.titles && buttons.titles[id]) || getLocalString("alertbox_" + id)}
				onClick={this.onClose}
				value={id}
				focus={this.focusByDefault == id} />);
		}
		return <HotKeyLinks className="s_alertbox_footer">{links}</HotKeyLinks>;
	}
	render() {
		let buttons: IAlertBoxButtons = this.props.buttons || ({} as IAlertBoxButtons);
		let buttonIds = buttons.mode && buttons.mode.split(",");
		if (!buttonIds || buttonIds.length == 0) {
			buttonIds = ["ok"];
		}
		this.focusByDefault = buttons.focusByDefault || buttonIds[0];
		let severity = this.props.severity;
		let message = this.props.message;
		let showTechnicalOnly: boolean;
		let descriptionVisible: boolean;
		let description = this.props.description;
		if (description) {
			let diagnoses = description.diagnoses;
			if (description.origin || description.details || (diagnoses && diagnoses.length)) {
				descriptionVisible = true;
				if (diagnoses) {
					let firstDiagnose = diagnoses[0];
					if (firstDiagnose) {
						severity = severity || firstDiagnose.severity;
						if (!message) {
							message = firstDiagnose.message;
							if (diagnoses.length == 1) {
								if (firstDiagnose.sdataCode || firstDiagnose.stackTrace) {
									showTechnicalOnly = true;
								}
								else {
									descriptionVisible = false;
								}
							}
						}
					}
				}
			}
		}
		if (["warning", "info", "success"].indexOf(severity || "") < 0) {
			severity = (buttonIds.length > 1) ? "info" : "error";
		}
		let title = this.props.title || getLocalString("alertbox_title");
		if (this.state.autoCloseLaps) {
			title += "  (" + this.state.autoCloseLaps + ")";
		}
		return <Overlay>
			<div className="s_alertbox" data-s-dialog-modal="true" data-s-dialog={buttonIds.length > 1 ? "question" : severity} >
				<article className="s_alertbox_content">
					<Banner iconName={buttonIds.length > 1 ? "quick_help" : getIconName(severity)} severity={severity} />
					<header className="s_alertbox_header">
						<Link
							className="s_modal_close"
							icon={"close"}
							title={getLocalString("diag_close")}
							onClick={this.onClose} />
						<div className="s_alertbox_title">{title}</div>
						<pre className="s_alertbox_msg">{message || getLocalString("alertbox_default_error")}</pre>
						{descriptionVisible && <ToggleDescription
							description={this.props.description}
							expanded={this.state.descriptionExpanded}
							onOpenClick={this.onExpandDescription} />}
					</header>
					{descriptionVisible && this.state.descriptionExpanded && <Description showTechnicalOnly={showTechnicalOnly} description={this.props.description} />}
					{this.renderButtons(severity, buttonIds, buttons)}
				</article>
			</div>
		</Overlay>;
	}
}