"use strict";
import * as React from 'react';
import { getLocalString } from '../../culture/localString';
import { Link } from '../../link/link';
import { Icon } from '../../common/icon/icon';
import { Copy } from '../copy/copy';
import { Technical, Diagnose } from '../diagnose/diagnose';
import { IDiagnose, parseSdataDiagnoses, IAlertBoxDescription } from '../alert';
import * as Events from '../../event/events';

export class ToggleDescription extends React.Component<{
	expanded: boolean,
	description: IAlertBoxDescription,
	onOpenClick: () => void
}, {}> {
	render() {
		let title: string, copy: any;
		if (this.props.expanded) {
			title = getLocalString("alertbox_body_picker_opened");
			let value: any = {};
			if (this.props.description.origin) {
				value.origin = this.props.description.origin;
			}
			if (this.props.description.details) {
				value.details = this.props.description.details;
			}
			if (this.props.description.diagnoses) {
				value.diagnoses = this.props.description.diagnoses;
			}
			copy = <Copy value={JSON.stringify(value, null, 2)} className="s_alertbox_copy" />
		}
		else {
			title = getLocalString("alertbox_body_picker_closed");
		}
		return <div className="s_alertbox_toggle">
			<Link
				className="s_alertbox_toggle_description"
				title={title}
				onClick={this.props.onOpenClick} />
			{copy}
		</div>
	}
}

class Line extends React.Component<{}, {}>{
	render() {
		return <li><pre className="s_alertbox_desc_pre">{this.props.children}</pre></li>;
	}
}

export class Description extends React.Component<{
	showTechnicalOnly: boolean,
	description?: IAlertBoxDescription
}, {}>{
	private body: HTMLElement;
	componentDidMount() {
		Events.resize.subscribe(this.onResize);
	}
	onResize = () => {
		let header = this.body.previousSibling as HTMLElement;
		let footer = this.body.nextSibling as HTMLElement;
		let maxHeight = document.body.clientHeight * 0.7;
		maxHeight -= (header.getBoundingClientRect().height + footer.getBoundingClientRect().height);
		this.body.style.maxHeight = maxHeight + "px";
	}
	componentWillUnmount() {
		Events.resize.unsubscribe(this.onResize);
		this.body = null;
	}
	renderDiagnoses(diagnoses: IDiagnose[]) {
		let stack: any[] = [];
		diagnoses = parseSdataDiagnoses(diagnoses);
		for (let diagnose of diagnoses) {
			stack.push(<Diagnose key={stack.length}  {...diagnose} />);
		}
		return <ul>{stack}</ul>;
	}
	render() {
		let description = this.props.description;
		let technical: any;
		if (this.props.showTechnicalOnly) {
			let diagnose = description.diagnoses[0];
			technical = <Technical
				sdataCode={diagnose.sdataCode}
				stackTrace={diagnose.stackTrace}
			/>;
		}
		else {
			technical = <ul>
				{description.origin && <Line><Icon name="tag" className="s_alertbox_desc_i" />{getLocalString("alertbox_body_stackTrace_origin") + ": " + description.origin}</Line>}
				{description.details && <Line><Icon name="comments" className="s_alertbox_desc_i" />{description.details}</Line>}
				{description.diagnoses && <li>{this.renderDiagnoses(description.diagnoses)}</li>}
			</ul>;
		}
		return <div className="s_alertbox_body s_modal_body" ref={(node) => this.body = node}>
			{technical}
		</div>;
	}
}