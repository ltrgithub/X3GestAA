"use strict";
import * as React from 'react';
import { getLocalString } from '../../culture/localString';
import { Diagnose, DiagnoseField } from './diagnoses';
import { Link } from '../../link/link';
import { IAlertPanel, parseSdataDiagnoses } from '../alert';
import { ClosePanel } from './closePanel';
import { PanelAlertLinks } from './links';
import *  as syra_router from '../../route/syra_router';
import * as Sdata from '../../dataStore/sdata';
import './alertPanel.less';

const SMALL_LIMIT = 1;

export class AlertPanel extends React.Component<IAlertPanel, {
	onlyFirstFive?: boolean
}> {
	constructor(props: any, context: any) {
		super(props, context);
		this.state = {
			onlyFirstFive: true
		};
	}
	onMore = () => {
		this.setState({
			onlyFirstFive: !this.state.onlyFirstFive
		});
	}
	onLinkClick = (link: Sdata.ILink) => {
		syra_router.executeMenu(link);
	}
	render() {
		let stack = [];
		let total = 0;
		if (this.props.diagnoses) {
			let diagnoses = parseSdataDiagnoses(this.props.diagnoses);
			total += diagnoses.length;
			let max = this.state.onlyFirstFive ? SMALL_LIMIT : total;
			for (let diagnose of diagnoses) {
				stack.push(<Diagnose key={"diag_" + stack.length}  {...diagnose} />);
				if (stack.length >= max) break;
			}
		}
		if (this.props.fields) {
			for (let field of this.props.fields) {
				total += (field.diagnoses && field.diagnoses.length);
			}
			let max = this.state.onlyFirstFive ? SMALL_LIMIT : total;
			for (let field of this.props.fields) {
				if (field.diagnoses) {
					let diagnoses = parseSdataDiagnoses(field.diagnoses);
					for (let diagnose of diagnoses) {
						stack.push(<DiagnoseField
							key={stack.length}
							id={field.id}
							title={field.title}
							{...diagnose} />);
						if (stack.length >= max) break;
					}
					if (stack.length >= max) break;;
				}
			}
		}
		if (stack.length) {
			return <div className="s_alertpanel">
				<ClosePanel onClose={this.props.onClose} />
				<div className="s_alertpanel_body">
					<ul>{stack}</ul>
					{this.props.links && <PanelAlertLinks links={this.props.links} onClick={this.onLinkClick} />}
				</div>
				{(total > SMALL_LIMIT) &&
					<div className="s_alertpanel_footer">
						<Link
							className="s_alertpanel_more"
							title={this.state.onlyFirstFive ? ((total - stack.length) + " " + getLocalString("diag_expand")) : getLocalString("diag_collapse")}
							onClick={this.onMore}
						/>
					</div>
				}
			</div>;
		}
		return null;
	}
}