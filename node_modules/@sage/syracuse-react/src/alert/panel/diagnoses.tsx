"use strict";
import * as React from 'react';
import { IDiagnose, IDiagnoseTechnical, Severity, IFieldDiagnose } from '../alert';
import { getLocalString } from '../../culture/localString';
import { Link } from '../../link/link';
import { Icon } from '../../common/icon/icon';
import { SeverityIcon, getSeverityCss, getIconName } from '../diagnose/severity';
import { Technical } from './technical';
import { syra_item } from '../../syra/utility/syra_item';
import './alertPanel.less';


class DiagnoseLine extends React.Component<{
    severity: Severity
}, {}> {
    render() {
        return <li className="s_alertpanel_diagnose">
            <div className={"s_alertpanel_diagnose_banner s_alert_banner_" + this.props.severity}>
                <Icon name={getIconName(this.props.severity)} className={"s_alertpanel_diagnose_banner_i"} />
            </div>
            {this.props.children}
        </li>;
    }
}

export class Diagnose extends React.Component<IDiagnose, {
    opened: boolean
}>{
    constructor(props: IDiagnose, context: any) {
        super(props, context);
        this.state = {
            opened: false
        };
    }
    get hasBody(): boolean {
        return (this.props.sdataCode || this.props.stackTrace) != null;
    }
    onToggleClick = () => {
        this.setState({
            opened: !this.state.opened
        });
    }
    renderOpenBody() {
        return <Link
            className="s-alertpanel_toggle_details"
            title={this.state.opened ? getLocalString("alertbox_body_picker_opened") : getLocalString("alertbox_body_picker_closed")}
            onClick={this.onToggleClick} />;
    }
    render() {
        return <DiagnoseLine severity={this.props.severity}>
            <div className="s_alertpanel_diagnose_msg">
                <pre className="s_alertpanel_diagnose_msg_pre">
                    {this.props.message}
                </pre>
                {this.hasBody && this.renderOpenBody()}
                {(this.state.opened && this.hasBody) && <Technical {...this.props as IDiagnoseTechnical} />}
            </div>
        </DiagnoseLine>;
    }
}

export class DiagnoseField extends React.Component<IFieldDiagnose, {}>{
    onClick = () => {
        let field: any = syra_item.findField(document.getElementById(this.props.id));
        if (field) {
            field.focus();
        }
    }
    render() {
        let severityCss = getSeverityCss(this.props.severity) + "_banner";
        return <DiagnoseLine severity={this.props.severity}>
            <div className="s_alertpanel_diagnose_msg">
                <a className="s_alertpanel_field_link" onClick={this.onClick}>{this.props.title}: </a>
                <pre className="s_alertpanel_diagnose_msg_pre">
                    {this.props.message}
                </pre>
            </div>
        </DiagnoseLine>;
    }
}