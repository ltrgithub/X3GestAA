"use strict";
import * as Sdata from '../dataStore/sdata';
export type AlertBoxButtonsMode = "yes,no,cancel" | "yes,no" | "ok,cancel" | "ok";

export type Severity = Sdata.DiagnoseSeverity;

export interface IAlertBoxButtons {
	mode?: AlertBoxButtonsMode,
	focusByDefault?: string,
	titles?: any
}

export interface IDiagnoseTechnical {
	sdataCode?: string,
	stackTrace?: string,
	links?: any
}

export interface IMessage {
	message: string,
	severity: Severity
}

export interface IDiagnose extends IMessage, IDiagnoseTechnical { }

export interface IDiagnoses {
	diagnoses?: IDiagnose[]
}

export interface IPanelField extends IDiagnoses {
	id: string,
	title: string
}

export interface IPanelFields {
	fields?: IPanelField[]
}

export interface IFieldDiagnose extends IDiagnose {
	id: string,
	title: string
}

export interface IAlertBoxDescription extends IDiagnoses {
	origin?: string,
	details?: string,
	detailsVisible?: boolean
}

export type BoxCloseHandler = (closeBy: string, autoClose?: boolean, escape?: boolean) => void;

export interface IAlertBox {
	severity?: Severity,
	title?: string
	message?: string,
	autoClose?: number,
	links?: any,
	delay?: number, //delay in ms before opening box
	buttons?: IAlertBoxButtons,
	onClose?: BoxCloseHandler
	description?: IAlertBoxDescription
}

export interface IAlertPanel extends IDiagnoses, IPanelFields {
	autoHide?: boolean,
	links?: any,
	onClose?: () => void
}

export interface IAlertController {
	onOpenBox: (boxProps: IAlertBox) => void
}

let alertController: IAlertController;

export function bindController(controller: IAlertController) {
	alertController = controller;
}

export function alertBox(props: IAlertBox) {
	alertController.onOpenBox(props);
}

export function showException(error: any, title?: string) {
	showDiagnoses([{
		severity: "error",
		message: error.message,
		stackTrace: error.stack || error.stackTrace
	}], title);
}
export function showDiagnoses($diagnoses: any, title?: string, onClose?: BoxCloseHandler) {
	alertBox({
		title: title,
		description: {
			diagnoses: $diagnoses
		},
		onClose: onClose
	});
}

export function parseSdataDiagnoses($diagnoses: any[]): IDiagnose[] {
	if ($diagnoses) {
		let diagnoses: IDiagnose[] = [];
		for (let $diagnose of $diagnoses) {
			diagnoses.push({
				severity: ($diagnose.severity || $diagnose.$severity || "error").toLowerCase(),
				sdataCode: $diagnose.$sdataCode || $diagnose.appCode || $diagnose.sdataCode,
				stackTrace: $diagnose.$stackTrace || $diagnose.stackTrace,
				message: $diagnose.$message || $diagnose.message,
				links: $diagnose.$links || $diagnose.links
			});
		}
		return diagnoses;
	}
}