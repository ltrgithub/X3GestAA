"use strict";
import * as React from 'react';
import { SectionHeader, ISectionHeaderProps } from './sectionHeader';
import { SectionBody } from './sectionBody';
import * as overHelper from '../over/overHelper';

import './section.less';

interface ISectionProps {
    title?: string;
    useFlowLayout?: boolean;
    className?: string;
    collapsable?: boolean;
    collapsed?: boolean,
    closeable?: boolean;
    maximizable?: boolean;
    $layout?: any
}

interface ISectionState {
    initialCollapsed?: boolean,
    collapsed?: boolean,
    closed?: boolean,
    maximized?: boolean
}

export default class Section extends React.Component<ISectionProps, ISectionState> {
    private cssSlot: string;

    constructor(props: ISectionProps, context: any) {
        super(props, context);
        this.cssSlot = props.className || "s_section";
        this.state = {
            initialCollapsed: this.props.collapsed,
            collapsed: this.props.collapsed
        };
        if (this.props.useFlowLayout) {
            this.cssSlot = "s_flow_layout " + this.cssSlot;
        }
    }
    componentWillReceiveProps(nextProps: any) {
        if (nextProps.collapsed != this.props.collapsed) {
            this.setState({
                collapsed: nextProps.collapsed
            });
        }
    }
    onClose = () => {
        this.setState({
            closed: !this.state.closed
        });
    }
    onCollapse = () => {
        this.setState({
            collapsed: !this.state.collapsed
        });
    }
    onMaximize = () => {
        let state: ISectionState = {
            maximized: !this.state.maximized
        };
        if (state.maximized) {
            state.collapsed = false
        }
        this.setState(state);
    }
    renderHeader() {
        if (this.props.title) {
            let props: ISectionHeaderProps = {
                className: this.cssSlot,
                title: this.props.title
            };
            if (this.props.collapsable) {
                props.collapsed = this.state.collapsed;
                props.onCollapse = this.onCollapse;
            }
            if (this.props.maximizable) {
                props.maximized = this.state.maximized;
                props.onMaximize = this.onMaximize;
            }
            if (this.props.closeable) {
                props.onClose = this.onClose;
            }
            return <SectionHeader {...props} />;
        }
    }
    render() {
        if (this.state.closed) {
            return <noscript />;
        }
        let css = this.cssSlot;
        let style;
        if (this.state.maximized) {
            css += " s_maximized";
            style = {
                zIndex: overHelper.bindZindex()
            };
        }
        return <div className={css} style={style}>
            {this.renderHeader()}
            {!(this.state.collapsed && this.state.initialCollapsed) && <SectionBody collapsed={this.state.collapsed}
                noHeader={!this.props.title}
                className={this.cssSlot}
                useFlowLayout={this.props.useFlowLayout}>
                {this.props.children}
            </SectionBody>}
        </div>;
    }
}