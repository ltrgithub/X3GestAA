"use strict";

const types: any = {
    object: function (old: any, delta: any) {
        if (!old) {
            old = delta;
        }
        if (old) {
            if (delta) {
                let keys = Object.keys(delta);
                for (let key of keys) {
                    let deltaItem = delta[key];
                    let oldItem = old[key];
                    let type = (deltaItem != null && oldItem != null) && types[typeof (deltaItem)];
                    if (type) {
                        type = Array.isArray(deltaItem) ? types.array : type;
                        old[key] = type(oldItem, deltaItem, key);
                    }
                    else {
                        old[key] = deltaItem;
                    }
                }
            }
        }
        return old;
    },
    array: function (records: any[], deltaRecords: any[]) {
        if (!records.length || !deltaRecords.length || records[0].$uuid == undefined) {
            records = deltaRecords;
        }
        if (records && records.length && records[0].$uuid != undefined) {
            let map: any = {};
            for (let record of records) {
                map[record.$uuid] = record;
            }
            if (deltaRecords[0].$index != undefined) {
                for (let deltaRecord of deltaRecords) {
                    let record = map[deltaRecord.$uuid];
                    if (record && record.$isDeleted) {
                        let index = records.indexOf(record);
                        if (index >= 0) {
                            records.splice(index, 1);
                        }
                    }
                    else {
                        records.splice(deltaRecord.$index, 0, types.object(record, deltaRecord));
                    }
                }
            }
            else {
                records = [];
                for (let deltaRecord of deltaRecords) {
                    let record = map[deltaRecord.$uuid];
                    records.push(types.object(record, deltaRecord));
                }
            }
        }
        return records;
    }
}

export function merge(old: any, delta: any) {
    return types.object(old, delta);
}

export function clone(obj: any): any {
    if (!obj || typeof obj !== 'object') {
        return obj;
    }

    //if ('[object Array]' === Object.prototype.toString.apply(obj)) {
    if (Array.isArray(obj)) {
        let newObj = [];
        for (let record of obj) {
            newObj.push(clone(record));
        }
        return newObj;
    }

    let newObj: any = {};
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            newObj[key] = clone(obj[key]);
        }
    }
    return newObj;
}

export function copy(target: any, source: any) {
    if (source && target) {
        for (let bind in source) {
            target[bind] = source[bind];
        }
    }
    return target;
}