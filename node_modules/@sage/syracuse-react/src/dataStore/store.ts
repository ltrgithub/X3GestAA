"use strict";
import * as Sdata from './sdata';
import * as Delta from './delta';
import * as Expression from './expression';
import { culture } from '../culture/culture';

export default class Store {
    private _dataset: any;
    private _$prototype: Sdata.IPrototype;
    private _binds: string[];
    private _restorePoint: any;

    constructor($prototype?: Sdata.IPrototype, data?: any) {
        this.dataset = {};
        if ($prototype) {
            this.$prototype = $prototype;
        }
        this.applyDelta(data);
    }
    get $prototype() {
        return this._$prototype;
    }
    set $prototype($prototype: Sdata.IPrototype) {
        this._$prototype = Delta.clone($prototype);
        this.applyDelta(Delta.clone(this._$prototype));
    }
    get binds(): string[] {
        if (!this._binds) {
            this._binds = Object.keys(this.$prototype.$properties);
        }
        return this._binds;
    }
    get dataset(): any {
        return this._dataset;
    }
    set dataset(newDataset: any) {
        this._dataset = {};
        newDataset && this.applyDelta(newDataset);
    }
    applyDelta(delta: any) {
        delta && Delta.merge(this._dataset, delta);
    }
    merge(old: any, delta: any) {
        return Delta.merge(old, delta);
    }
    parse(expression: string) {
        return Expression.parse(this._dataset, expression);
    }
    reset() {
        this.dataset = Delta.clone(this.$prototype);
    }
    saveRestorePoint() {
        this._restorePoint = Delta.clone(this._dataset);
    }
    restorePoint() {
        if (this._restorePoint) {
            this.dataset = this._restorePoint;
        }
    }
    get links(): any {
        return this.dataset.$links;
    }
    get actions(): any {
        return this.dataset.$actions;
    }
    getMenu(bind: string): Sdata.IMenu {
        let menu = this.links;
        menu = menu && menu[bind];
        if (!menu) {
            menu = this.actions;
            menu = menu && menu[bind];
        }
        return menu;
    }
    getMeta(bind?: string): Sdata.IMeta {
        let $properties = this.dataset.$properties;
        if ($properties) {
            return bind ? $properties[bind] : $properties;
        }
    }
    getDisplayValue(bind?: string): any {
        if (bind) {
            let value = this.dataset[bind];
            if (value != null) {
                let $field: any = this.getMeta(bind);
                switch ($field.$type) {
                    case Sdata.type.date:
                        let dateObj = culture.date.parse(value);
                        return (dateObj && !dateObj.isNull()) ? dateObj.toString(culture.date_short) : "";
                    case Sdata.type.datetime:
                        let datetimeObj= culture.datetime.parse(value);
                        return (datetimeObj && !datetimeObj.isNull()) ? datetimeObj.toString(culture.datetime_default) : "";
                    case Sdata.type.time:
                        return culture.time.parse(value).toString(culture.time_short);
                    case Sdata.type.integer:
                        return culture.integer.parse(value);
                    case Sdata.type.decimal:
                        return culture.decimal.parse(value);
                    case Sdata.type.real:
                        return culture.real.parse(value);
                    case Sdata.type.choice:
                        for (let choice of $field.$value.$enum) {
                            if (choice.$value == value) {
                                return this.parse(choice.$title);
                            }
                        }
                        break;
                    case Sdata.type.reference:
                        if (value) {
                            let refVal = {
                                $uuid: value.$uuid,
                                $title: value.$title,
                                $value: value.$value
                            };
                            if (refVal.$title === undefined) {
                                let $title = Expression.extractCode($field.$item.$title);
                                if ($field.$item[$title]) {
                                    $title = $field.$item[$title];
                                }
                                refVal.$title = Expression.parse(value, $title) || Expression.parse(this.dataset, $title);
                            }
                            if (refVal.$value === undefined) {
                                let $value = Expression.extractCode($field.$item.$value);
                                if ($field.$item[$value]) {
                                    $value = $field.$item[$value];
                                }
                                refVal.$value = Expression.parse(value, $value) || Expression.parse(this.dataset, $value);
                            }
                            return refVal;
                        }
                }
            }
            return value;
        }
        return this.dataset;
    }
    getValue(bind?: string): any {
        return bind ? this.dataset[bind] : this.dataset;
    }
    setValue(bind: string, value: any) {
        this.dataset[bind] = value;
    }
    get $uuid(): string {
        return this.dataset.$uuid;
    }
    get title(): string {
        return this.parse(this.dataset.$title);
    }
    get description(): string {
        return this.parse(this.dataset.$description);
    }
}