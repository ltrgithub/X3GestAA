"use strict";
const FORMAT = /(\{.*?\})/g;

interface IGlobalSettings {
    $localeCode: string,
    $role: string,
    $endpoint: string,
    $userprofile: string
}

let globals: any = {};

export function setGlobalSetting(languageCode: string,
    selectedRoleUuid: string,
    selectedEndpoinUuid: string,
    profileJsurl: string): IGlobalSettings {
    return globals = {
        $localeCode: languageCode,
        $role: selectedRoleUuid,
        $endpoint: selectedEndpoinUuid,
        $userprofile: profileJsurl
    };
}

export function matchGlobals(code: string) {
    return globals[code];
}


function getLocal(dataset: any, code: string): string {
    let $localization: any = dataset.$localization;
    let value: string = $localization && $localization[code];
    if (!value) {
        var $all = dataset.$allLocalization;
        if ($all) {
            $localization = $all["en-US"];
            value = $localization && $localization[code];
            if (!value) {
                let langs = Object.keys($all);
                for (let lang of langs) {
                    value = $all[lang][code];
                    if (value) {
                        return value;
                    }
                }
            }
        }
    }
    return value || code;
}

export function parse(dataset: any, expression: string, ignore?: any) {
    if (expression) {
        let parts = expression.match(FORMAT);
        if (parts) {
            for (let part of parts) {
                let property = part.substr(1, part.length - 2);
                if (property[0] == "@") {
                    expression = expression.replace(part, getLocal(dataset, property));
                }
                else {
                    let value = dataset[property] || globals[property];
                    if (value != null) {
                        if (value.indexOf && value.indexOf("{") >= 0) {
                            (ignore = ignore || {})[part] = true;
                            value = parse(dataset, value, ignore);
                        }
                    }
                    else {
                        value = "";
                    }
                    expression = expression.replace(part, value);
                }
            }
        }
    }
    return expression;
}

export function extractCode(expression: string) {
    if (expression) {
        if (expression[0] == "{") {
            return expression.slice(1, expression.length - 1);
        }
    }
    return expression;
}