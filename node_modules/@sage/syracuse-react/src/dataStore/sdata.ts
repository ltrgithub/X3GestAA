"use strict";
export const type = {
    array: "application/x-array",
    icon: "application/x-icon",
    choice: "application/x-choice",
    date: "application/x-date",
    time: "application/x-time",
    datetime: "application/x-datetime",
    boolean: "application/x-boolean",
    integer: "application/x-integer",
    decimal: "application/x-decimal",
    real: "application/x-real",
    quantity: "application/x-quantity",
    password: "application/x-password",
    string: "application/x-string",
    reference: "application/x-reference",
    object: "application/x-object"
};

export interface IFieldType {
    $title?: string
    $type: string;
}
export interface IChoiceType extends IFieldType {
    $value: IChoiceValue
}
export interface IChoiceEnumItem {
    $value: any,
    $title: any
};
export interface IChoiceValue extends IFieldType {
    $type: string,
    $enum: IChoiceEnumItem[]
};

export const HttpMethod = {
    GET: "GET",
    DELETE: "DELETE",
    POST: "POST",
    PUT: "PUT"
};

export type HttpMethodType = "GET" | "DELETE" | "POST" | "PUT";
export interface ILink {
    $bind?: string, //set by client
    $title?: string,
    $description?: string,
    $method?: HttpMethodType,
    $isHidden?: boolean,
    $isDisabled?: boolean,
    $isRequested?: boolean
    $type?: string
    //_setMenu
    //$icon
    //$iconValue
    //$variants
    //ensurecss
    $value?: string,
    $kind?: string,
    $style?: string
}
export interface IMenu extends ILink {
    $url?: string,
    $target?: string
}

export interface Field {
    $title: string,
    $type: string
}
export interface IPrototype {
    $url?: string,
    $article?: any,
    $title?: string,
    $properties: any,
    $item?: IPrototype
    $links?: any,
    $actions?: any,
    $localization?: any,
    $capabilities: string
}

export interface IMeta {
    $title?: string,
    $type?: string,
    $isExcluded?: boolean,
    $isHidden?: boolean,
    $isDisabled?: boolean,
    $isReadOnly?: boolean,
    $isMandatory?: boolean,
    $description?: string,
    $diagnoses?: IDiagnose[]
}

export interface IEntity {
    $url?: string,
    $uuid: string,
    $properties?: any,
    $links?: any,
    $actions?: any,
    $isSelected?: boolean
}

export interface Article {
    $prototype: IPrototype,
    $article: any;
    dataset: any;
    key: string
}

export interface LayoutItem {

}
export interface LayoutField extends LayoutItem {
    $bind: string
}
export interface LayoutSection extends LayoutItem {
    $category: string,
    $layout: Layout
}
export interface Layout {
    $layout: Layout,
    $items: Array<LayoutItem>
}

export function findByType($prototype: any, $type: string) {
    if ($prototype) {
        let $properties = $prototype.$properties;
        let $binds = Object.keys($properties);
        for (let $bind of $binds) {
            let $field = $properties[$bind];
            if ($field.$type == $type) {
                $field.$bind = $bind;
                return $field;
            }
        }
    }
}

export interface IBreadcrumStep {
    $uuid?: string, //if no $uuid, then root of path
    title: string
}
export interface IPageLinks {
    $breadcrumb: IBreadcrumStep[],
    $userPreferences: IMenu
}

export interface IRepresentation {
    //url page collaboration used to get represenation
    $diagnoses?: IDiagnose[],
    $pageUrl: string,
    $prototype: IPrototype,
    $links: IPageLinks,
    $article: any,
    $preferences: any,
    $isEditMode?: boolean
}

export type DiagnoseSeverity = "fatal" | "error" | "warning" | "info" | "success";

export interface IDiagnose {
    $severity?: DiagnoseSeverity,
    $message: string,
    $sdataCode?: string,
    $stackTrace?: string
};

export const Facet = {
    syraDev: "$dev",
    syraTest: "$test",
    landing_edit: "$landing_edit",
    landing: "$landing",
    query: "$query",
    detail: "$details",
    edit: "$edit",
    bulk: "$bulk",
    cube: "$cube",
    search: "$search",
    sitemap: "$navigation",
    sitemap_edit: "$navigation_edit",
    test: "$__tests__"
};



export function pluralize(str: string) {
    // special treatment for y and f preceded with consonant and for s
    if (/(sh?|ch)$/.test(str))
        return str + "es";
    if (/[b-df-hj-np-tv-z]y$/.test(str))
        return str.substring(0, str.length - 1) + "ies";
    if (/[b-df-hj-np-tv-z]f$/.test(str))
        return str.substring(0, str.length - 1) + "ves";
    return str + "s";
}

export interface IBookmark {
    $url: string,
    title: string,
    description?: string,
    $hasSeparator?: boolean
}
export interface IBookmarkItem {
    menuItem: IBookmark
}