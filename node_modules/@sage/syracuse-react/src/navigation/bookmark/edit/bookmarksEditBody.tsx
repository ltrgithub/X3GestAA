import * as React from 'react';
import { IBookmarkItem } from '../../../dataStore/sdata';
import Scrollbar from '../../../common/scroll/scrollbar/scrollbar';
import { BookmarksEditItem } from './bookmarksEditItem';
import { Link } from '../../../link/link';
import { getLocalString } from '../../../culture/localString';
import { PageModal } from '../../../over/modal/page/pageModal'

export interface IBookmarksEditProps {
    bookmarks: any[]
}

export interface IBookmarksEditState {
    selectedBookMarkItem?: IBookmarkItem,
    isEditTitle: boolean
}

export class BookmarksEditBody extends React.Component<IBookmarksEditProps, IBookmarksEditState>{

    scrollbar: Scrollbar;
    list: HTMLElement;
    content: HTMLElement;
    bodyWidth: number;
    bookmarkItems: any[];
    private editedTitle: string;

    constructor(props: any, context: any) {
        super(props, context);
        this.state = {
            selectedBookMarkItem: null,
            isEditTitle: false
        };
        this.bookmarkItems = props.bookmarks;

    }

    savedTitleInEditMode() {
        if (this.state.isEditTitle) {
            this.saveTitle(this.editedTitle);
        }
    }

    onResize = (modal:PageModal) => {
        if (this.list) {
            let height = (modal.maxBodyHeight - this.content.offsetTop - 16) + "px";
            this.content.style.height = height;
        }
        this.scrollbar && this.scrollbar.resize();
    }

    sortItem = (item: IBookmarkItem, index: number) => {
        this.bookmarkItems.splice(this.bookmarkItems.indexOf(item), 1);
        this.bookmarkItems.splice(index, 0, item);
        this.setState({
            selectedBookMarkItem: item
        });
    }

    onClearAll = () => {
        this.bookmarkItems.splice(0, this.bookmarkItems.length);
        this.setState({
            selectedBookMarkItem: null
        });
    }

    onToggleEdit = (bookmarkItem: IBookmarkItem) => {
        this.setState({
            isEditTitle: !this.state.isEditTitle,
            selectedBookMarkItem: bookmarkItem
        });
    }

    onToggleSeparator = (bookmarkItem: IBookmarkItem) => {
        let index = this.bookmarkItems.indexOf(bookmarkItem);
        if (index >= 0) {
            this.bookmarkItems[index].menuItem.$hasSeparator = !this.bookmarkItems[index].menuItem.$hasSeparator;
        }
        this.setState({
            selectedBookMarkItem: bookmarkItem,
            isEditTitle: false
        });


    }
    onDelete = (bookmark: IBookmarkItem) => {
        this.bookmarkItems.splice(this.bookmarkItems.indexOf(bookmark), 1);
        this.setState({
            selectedBookMarkItem: null,
            isEditTitle: false
        });
    }

    onEditTitleChange = (title: string) => {
        this.editedTitle = title;
    }


    saveTitle = (title: string) => {
        let index = this.bookmarkItems.indexOf(this.state.selectedBookMarkItem);
        if (index >= 0) {
            this.bookmarkItems[index].menuItem.title = title;
        }
        this.setState({
            isEditTitle: false
        });
    }

    componentDidMount() {
        this.bodyWidth = this.list.clientWidth;
        this.editedTitle = '';
    }

    render() {
        let selectedUrl = this.state.selectedBookMarkItem && this.state.selectedBookMarkItem.menuItem.$url;
        return <div className="s_bookmark_modal_body">
            <div className="s_bookmark_modal_ribbon">
                <div className="s_bookmark_modal_ribbon_group">
                    <Link className="s_bookmark_modal_ribbon_link"
                        title={getLocalString("bookmarks_edit_modal_clear_all")}
                        onClick={this.onClearAll} />
                </div>
            </div>
            <div className="s_bookmark_modal_content" ref={(node) => this.content = node}>
                <Scrollbar ref={(node) => this.scrollbar = node}>
                    <ul className="s_bookmark_modal_list" ref={(node) => this.list = node}>
                        {this.bookmarkItems.map((item: IBookmarkItem, index: number) =>
                            <BookmarksEditItem
                                selectedUrl={selectedUrl}
                                key={index}
                                item={item}
                                sortItem={this.sortItem}
                                onToggleEdit={this.onToggleEdit}
                                onToggleSeparator={this.onToggleSeparator}
                                onDelete={this.onDelete}
                                onSaveTitle={this.saveTitle}
                                isEditTitle={this.state.isEditTitle}
                                width={this.bodyWidth}
                                onEditTitleChange={this.onEditTitleChange} />)
                        }
                    </ul>
                </Scrollbar>
            </div>
        </div>;
    }
}
