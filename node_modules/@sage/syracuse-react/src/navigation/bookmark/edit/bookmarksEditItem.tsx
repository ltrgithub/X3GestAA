import * as React from 'react';
import { IBookmarkItem } from '../../../dataStore/sdata';
import { EditField } from '../../edit/editTitle';
import { Popup } from '../../../over/popup/popup'
import { getLocalString } from '../../../culture/localString';
import { Link, LinkClickHandler } from '../../../link/link';
import { SortableLine } from '../../../common/sortable/sortableLine';
import { Sortable } from '../../../common/sortable/sortable';
import * as Dom from '../../../utility/html/dom';

interface BookmarksEdititemProps {
    selectedUrl: string,
    key: number,
    item: IBookmarkItem,
    sortItem: (item: IBookmarkItem, index: number) => void,
    onToggleEdit: (item: IBookmarkItem) => void,
    onToggleSeparator: (item: IBookmarkItem) => void,
    onDelete: (item: IBookmarkItem) => void,
    onSaveTitle: (title: string) => void,
    isEditTitle: boolean,
    width: number,
    onEditTitleChange: (title: string) => void
}


export class BookmarksEditItem extends React.Component<BookmarksEdititemProps, {}>{
    private itemDiv: HTMLElement;
    private width: number;
    private sort: Sortable;

    _onDelete = () => {
        this.props.onDelete && this.props.onDelete(this.props.item);
    }
    _onEditTitle = () => {
        this.props.onToggleEdit(this.props.item);
    }
    _onSaveTitle = (title: string) => {
        this.props.onSaveTitle(title);
    }
    _onToggleSeparator = () => {
        this.props.onToggleSeparator(this.props.item);
    }
    _onStartSort = (item: IBookmarkItem, line: HTMLElement) => {
        this.sort = new Sortable(line, {
            dragText: () => item.menuItem.title,
            end: (moved: HTMLElement, target: HTMLElement, after: boolean) => {
                this.props.sortItem(item, Dom.getNodeIndex(target));
            }
        });
    }
    componentDidMount() {

    }
    renderPopup(): any {
        return <Popup of={this}
            onClose={() => {
                this.setState({
                    isEditTitle: false
                })
            }}
            my="left top"
            at="left top"
            closeBy={["outOver"]}
            width={this.props.width}>
            <div className="s_bookmarks_title_edit_container">
                <EditField className="s_bookmarks_title"
                    value={this.props.item.menuItem.title}
                    onApply={(title) => this.props.onSaveTitle(title)}
                    onCancel={this._onEditTitle}
                    onChange={(title) => this.props.onEditTitleChange(title)} />
            </div></Popup>;
    }
    render() {
        let isSelected = (this.props.selectedUrl == this.props.item.menuItem.$url);
        return <SortableLine
            selected={this.props.selectedUrl == this.props.item.menuItem.$url}
            className={(this.props.item.menuItem.$hasSeparator ? "separator " : "") + "s_bookmarks_manage"}
            value={this.props.item}
            onStartSort={this._onStartSort}>
            <div className="s_bookmarks_manage_title">{this.props.item.menuItem.title}</div>
            {isSelected && this.props.isEditTitle && this.renderPopup()}
            <Link className="s_bookmarks_manage_edit_icon_link"
                icon="pencil"
                title={getLocalString("bookmarks_edit_modal_edit")}
                onClick={this._onEditTitle}
                value={this.props.item} />
            <Link className="s_bookmarks_manage_edit_icon_link"
                icon="subtract"
                title={getLocalString("bookmarks_edit_modal_separator")}
                onClick={this._onToggleSeparator}
                value={this.props.item} />
            <Link className="s_bookmarks_manage_edit_icon_link"
                icon="delete"
                title={getLocalString("bookmarks_edit_modal_delete")}
                value={this.props.item} onClick={this._onDelete} />
        </SortableLine>;

    }
}

