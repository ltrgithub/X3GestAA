"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { Bookmarks } from '../bookmarks';
import { getLocalString } from '../../../culture/localString';
import * as BookmarkController from '../bookmarkController';
import { Profile } from '../../../profile/profile';
import { PageModal } from '../../../over/modal/page/pageModal'
import { PageModalLink } from '../../../over/modal/page/pageModalLink'
import { BookmarksEditBody } from './bookmarksEditBody';

export class BookmarksEdit extends React.Component<{
	bookmarks: Bookmarks,
	profile: Profile,
	onClose: () => void
}, {}>
{
	localBookmarkItems: any[]; //Local cache of bookmark Items
	bookmarksEditBody: BookmarksEditBody;
	private editSaved: boolean;
	constructor(props: any, context: any) {
		super(props, context);
	}
	saveBookmarks = () => {
		this.editSaved = true;
		this.bookmarksEditBody.savedTitleInEditMode();
		let bookmarks = this.props.profile.bookmarks;
		bookmarks.items.splice(0, bookmarks.items.length);
		this.localBookmarkItems.map(item => bookmarks.items.push(item));
		BookmarkController.save(this.props.profile);
	}
	renderBody = () => {
		this.editSaved = false;
		this.props.bookmarks.saveRestorePoint();
		this.localBookmarkItems = this.props.bookmarks.items.slice(0);
		return <BookmarksEditBody bookmarks={this.localBookmarkItems} ref={(node) => this.bookmarksEditBody = node} />;
	}
	onResize = (modal: PageModal) => {
		this.bookmarksEditBody.onResize(modal.maxHeight);
	}
	onClose = () => {
		!this.editSaved && this.props.bookmarks.restorePoint(); //Do not restore if we have managed bookmarks
		this.props.onClose && this.props.onClose();
	}
	render() {
		return <PageModalLink
			className="s_profile_bar_list_item s_primary bottom"
			title={getLocalString("bookmarks_manage_list")}
			modal={{
				render: this.renderBody,
				className: "s_bookmark_modal",
				title: getLocalString("bookmarks_edit_modal_title"),
				onOk: this.saveBookmarks,
				onResize: this.onResize,
				onClose: this.onClose
			}} />

	}
}