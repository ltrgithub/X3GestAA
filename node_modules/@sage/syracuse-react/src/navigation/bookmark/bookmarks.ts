"use strict";
import * as Sdata from '../../dataStore/sdata';
import { Url } from '../../route/url';
import * as Endpoint from '../../profile/endpoint';
import { BookmarkMenu } from './bookmarkMenu'
import Store from '../../dataStore/store';

export class Bookmarks extends Store {
    private _menus: BookmarkMenu[];
    private syracuse: any = {}
    private classic: any = {}

    constructor(dataset: any, private selectedEndpoint: Endpoint.IEndpoint) {
        super(null, dataset);
        this.refresh(dataset);
    }
    refresh(dataset: any) {
        this.dataset = dataset;
        this.syracuse = {};
        this.classic = {};
        this._menus = [];
        let items = this.items;
        if (items) {
            for (let item of items) {
                //Fix for X3-43351
                while ((item.menuItem as any).menuItem) {
                    item.menuItem = (item.menuItem as any).menuItem;
                }
                let menu = new BookmarkMenu(item.menuItem, this.selectedEndpoint);
                if (menu.url.isFusion) {
                    this.classic[menu.url.classicParams.fullCode] = menu;
                }
                else {
                    (this.syracuse[menu.url.uri] = this.syracuse[menu.url.uri] || []).push(menu);
                }
                this._menus.push(menu);
            }
        }
    }
    get items(): Sdata.IBookmarkItem[] {
        if (!this.dataset.content) {
            this.dataset.content = {};
        }
        if (!this.dataset.content.items) {
            this.dataset.content.items = [];
        }
        return this.dataset.content.items;
    }
    get menus(): BookmarkMenu[] {
        return this._menus;
    }
    findClassic(url: Url): BookmarkMenu {
        return this.classic[url.classicParams.fullCode];
    }
    findSyracuse(url: Url): BookmarkMenu {
        var uri = url.uri;
        if (url.host) {
            uri = uri.slice(uri.indexOf(url.host) + url.host.length);
        }
        var menus: BookmarkMenu[] = this.syracuse[uri];
        if (menus) {
            for (let menu of menus) {
                let menuParams = menu.url && menu.url.params;
                if (!url.params && !menuParams) {
                    return menu;
                }
                else {
                    if (url.params && menuParams) {
                        let keys1 = Object.keys(url.params);
                        let keys2 = Object.keys(menuParams);
                        if (keys1.length == keys2.length) {
                            for (var mm = keys1.length - 1; mm >= 0; mm--) {
                                if (url.params[keys1[mm]] != menuParams[keys1[mm]]) {
                                    break;
                                }
                            }
                            if (mm < 0) {
                                return menu;
                            }
                        }
                    }
                }
            }
        }
    }
    matchBookmark(url: Url): BookmarkMenu {
        if (url) {
            return url.isFusion ? this.findClassic(url) : this.findSyracuse(url);
        }
    }

    dispose() {
        this._menus = this.syracuse = this.classic = null;
    }

    restorePoint() {
        super.restorePoint();
        this.refresh(this.dataset);
    }

}