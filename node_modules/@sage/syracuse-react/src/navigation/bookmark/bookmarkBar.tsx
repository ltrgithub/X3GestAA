"use strict";
import * as React from 'react';
import { Link } from '../../link/link';
import { getLocalString } from '../../culture/localString';
import { Bookmarks } from './bookmarks';
import { BookmarkMenu } from './bookmarkMenu';
import { ScrollList } from '../../common/list/list';
import { IProfileBookmark } from '../../profile/bar/profileBarProps'
import { PopupLink } from '../../over/popup/popupLink'
import { HotKeyLinks } from '../../shortcut/hotKeyLinks';
import { BookmarksEdit } from './edit/bookmarksEdit';
import './bookmarks.less';

import { Profile } from '../../profile/profile';

class BookmarksList extends React.Component<{
	bookmarks: Bookmarks,
	mainPageBookmark: BookmarkMenu,
	profile: Profile,
	onItemClick: (value: BookmarkMenu) => void
}, {}>{
	list: ScrollList;
	onSwitch = () => {
		alert("Todo: toggle favorites bar");
	}
	onResize = (maxHeight: number) => {
		if (this.list) {
			let node = this.list.rootNode.previousSibling as HTMLElement;
			if (node) {
				maxHeight -= node.clientHeight;
			}
			node = this.list.rootNode.nextSibling as HTMLElement;
			if (node) {
				maxHeight -= node.clientHeight;
			}
			this.list.listHeight = maxHeight;
		}
	}
	componentWillUnmount() {
		this.list = null;
	}
	render() {
		let selected: boolean;
		let displayFavoriteToolbar = true; //todo replace once the favorites toolbar has been implemented
		let hideFavoriteToolbarLink = true; //To do remove when implement favorites bar
		return <HotKeyLinks>
			{!hideFavoriteToolbarLink && <div className="s_profile_bar_list_item_primary_top">
				<Link title={displayFavoriteToolbar ? getLocalString("bookmarks_hide_toolbar") : getLocalString("bookmarks_hide_toolbar")}
					onClick={this.onSwitch}
					className="s_profile_bar_list_item s_primary" />
			</div>}
			<ScrollList className="s_profile_bar_list" ref={(node) => this.list = node}>
				{this.props.bookmarks.menus.map((menu: BookmarkMenu, index: number) =>
					<Link
						key={index}
						className={"s_profile_bar_list_item" + (this.props.mainPageBookmark == menu ? " s_selected" : "") + (menu.dataset.$hasSeparator ? " separator" : "")}
						title={menu.title}
						url={menu.url.href}
						value={menu}
						disabled={!menu.enabled}
						onClick={this.props.onItemClick} />)}
			</ScrollList>
			<div className="s_profile_bar_list_item_primary_bottom">
				<BookmarksEdit bookmarks={this.props.bookmarks} profile={this.props.profile} onClose={() => this.props.onItemClick(null)} />
			</div>
		</HotKeyLinks>;
	}

}

interface IBookmarkBarProps extends IProfileBookmark {
	bookmarks: Bookmarks
}

export class BookmarkBar extends React.Component<IBookmarkBarProps, {}> {
	list: BookmarksList;
	popupLink: PopupLink;
	onPopupRender = () => {
		return <BookmarksList
			ref={(list: BookmarksList) => this.list = list}
			onItemClick={this.onItemClick}
			bookmarks={this.props.bookmarks}
			mainPageBookmark={this.props.mainPageBookmark}
			profile={this.props.profile} />;
	}
	onPopupResize = (maxHeight: number) => {
		this.list && this.list.onResize(maxHeight);
	}
	onPopupClose = () => {
		this.list = null;
	}
	onItemClick = (menu: BookmarkMenu) => {
		this.popupLink.togglePopup();
		menu && this.props.onBookmarkClick(menu);
	}
	componentWillUnmount() {
		this.list = this.popupLink = null;
	}
	render() {
		return <div className="s_profile_bar_bookmark">
			<Link
				disabled={this.props.bookmarkDisabled}
				icon={this.props.mainPageBookmark ? "star" : "star_empty"}
				className="s_profile_bar_bookmark_toggle s_profile_bar_iconlink"
				title={getLocalString("bookmarks_open")}
				onClick={this.props.onBookmarked} />
			<PopupLink
				ref={(link: PopupLink) => this.popupLink = link}
				icon="down"
				className="s_profile_bar_bookmark_dropdown s_profile_bar_iconlink"
				title={getLocalString("bookmarks_open")}
				popup={{
					my: "right top",
					at: "right bottom",
					render: this.onPopupRender,
					onResize: this.onPopupResize,
					onClose: this.onPopupClose
				}}
			/>
		</div>;
	}
}