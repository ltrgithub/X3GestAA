import * as React from 'react';
import { BookmarkMenu } from './bookmarkMenu';
import { Bookmarks } from './bookmarks';
import { setBookmarkHeaderUpdateHandler } from './bookmarkController';
import { Link } from '../../link/link';

export interface IBookmarkHeaderProps {
    show: boolean;
    bookmarks: Bookmarks;
    onBookmarkClick: (value: BookmarkMenu) => void;
}
export interface IBookmarkHeaderState {
    width: number;
    lastShown: number;
}

export class BookmarkHeader extends React.Component<IBookmarkHeaderProps, IBookmarkHeaderState> {
    public static getWidth(): number {
        return document.querySelector('.s_profile_bar_bookmark_header_list').clientWidth;
    }

    public static getItems(): NodeList {
        return document.querySelectorAll('.s_profile_bar_bookmark_header_list > li');
    }

    public static mapItemsWidth(items: any): number[] {
        const arr = [];
        for (const item of items) {
            arr.push(item.clientWidth);
        }
        return arr;
    }

    public static lastShown(width: number, items: number[]): number {
        let value: number = null;
        items.reduce((prev, curr, index, array) => {
            const sum = prev + curr;
            if ((sum > width || index >= array.length + 1) && value === null) {
                value = index - 1;
            }
            return sum;
        });
        return value === null ? items.length - 1 : value;
    }

    private resizeTimer: number;

    constructor(props: any) {
        super(props);
        setBookmarkHeaderUpdateHandler(() => {
            this.forceUpdate(() => {
                this.setState({
                    width: BookmarkHeader.getWidth(),
                    lastShown: BookmarkHeader.lastShown(BookmarkHeader.getWidth(), BookmarkHeader.mapItemsWidth(BookmarkHeader.getItems()))
                });
            });
        });
        this.state = { width: null, lastShown: null };
        this.onResize = this.onResize.bind(this);
    }

    public onResize() {
        window.clearTimeout(this.resizeTimer);
        this.resizeTimer = window.setTimeout(() => {
            this.setState({
                width: BookmarkHeader.getWidth(),
                lastShown: BookmarkHeader.lastShown(BookmarkHeader.getWidth(), BookmarkHeader.mapItemsWidth(BookmarkHeader.getItems()))
            });
        }, 300);
    }

    public componentDidMount() {
        if (typeof window !== 'undefined') {
            this.onResize();
            window.addEventListener('resize', this.onResize, false);
        }
    }
    public componentWillUnmount() {
        if (typeof window !== 'undefined') {
            window.removeEventListener('resize', this.onResize);
            window.clearTimeout(this.resizeTimer);
        }
    }

    public render() {
        return (
            <div className="s_profile_bar_bookmark_header" style={{ display: this.props.show ? 'flex' : 'none' }}>
                <BookmarkHeaderList bookmarks={this.props.bookmarks} onBookmarkClick={this.props.onBookmarkClick} />
                <BookmarkHeaderIcons
                    show={this.state.lastShown && this.state.lastShown !== BookmarkHeader.getItems().length - 1}
                    lastShown={this.state.lastShown}
                />
            </div>
        );
    }
}

export interface IBookmarkHeaderListProps {
    bookmarks: Bookmarks;
    onBookmarkClick: (value: BookmarkMenu) => void;
}
export const BookmarkHeaderList = (props: IBookmarkHeaderListProps) => {
    const bookmarksList = (menu: BookmarkMenu, index: number) =>
        <BookmarkHeaderListItem key={index} menu={menu} onBookmarkClick={props.onBookmarkClick} />;
    return (
        <ul className="s_profile_bar_bookmark_header_list">
            {props.bookmarks.menus.map(bookmarksList)}
        </ul>
    );
};

export interface IBookmarkHeaderListItemProps {
    menu: BookmarkMenu;
    onBookmarkClick: (value: BookmarkMenu) => void;
}
export const BookmarkHeaderListItem = (props: IBookmarkHeaderListItemProps) =>
    <li>
        <Link
            className="s_profile_bar_bookmark_header_textlink"
            title={props.menu.title}
            value={props.menu}
            onClick={props.onBookmarkClick}
        />
    </li>;

export interface IBookmarkHeaderIconsProps {
    show: boolean;
    lastShown: number;
}

export const BookmarkHeaderIcons = (props: IBookmarkHeaderIconsProps) =>
    <div className={'s_profile_bar_bookmark_header_icon' + (props.show ? '' : ' hidden')}>
        <Link className="s_profile_bar_bookmark_header_textlink" icon="dir_down" description="More" onClick={() => {}} />
    </div>;
