"use strict";
import * as React from 'react';
import { SitemapEdit, ISitemapEditProps, IModuleProps, ISubmoduleProps, IItemsProps } from './sitemapEdit';
import { Url } from '../../../route/url';
import * as Sdata from '../../../dataStore/sdata';
import { PageLoader, IPageLoadError } from '../../../page/pageLoader';
import * as Put from '../put';
import { IPageProps } from '../../../page/page';
import { SitemapModule, SitemapSubmodule, IDataModule, IDataSubmodule } from '../../sitemap/groups';
import { ISitemapItem, SitemapBlock, SitemapMenu } from '../../sitemap/items';
import { Sitemap } from '../../sitemap/sitemap';
import { AlertPage } from '../../../alert/page/alertPage';
import * as syra_expression from '../../../syra/utility/syra_expression';
import * as SyraPageModal from '../../../over/modal/page/syraPageModal';
import { showDiagnoses } from '../../../alert/alert';
import * as SyraAlert from '../../../syra/alert/syraAlert';
import { syra_localizer } from '../../../syra/utility/syra_localizer';
import { put } from '../put';
import * as syra_dataset from '../../../syra/utility/syra_dataset';
import * as Delta from '../../../dataStore/delta';
import { alertBox } from '../../../alert/alert';
import { getLocalString } from '../../../culture/localString';
import * as UUID from '../../../utility/uuid';

interface IGroupsMeta extends Sdata.IPrototype {
    createable: boolean,
    addable: boolean,
    editable: boolean,
    deleteable: boolean
}
interface IItemsMeta extends Sdata.IPrototype {
    blockCreateable: boolean,
    blockDeleteable: boolean,
    menuAddable: boolean,
    menuDeleteable: boolean
}

export class SitemapEditController extends React.Component<IPageProps, {
    loadError?: IPageLoadError,
    selectedModule?: SitemapModule,
    selectedSubmodule?: SitemapSubmodule,
    scrollToUuid?: string
}>{
    private representation: Sdata.IRepresentation;
    private loader: PageLoader;
    private sitemap: Sitemap;
    private modulesMeta: IGroupsMeta;
    private moduleProp: IModuleProps;
    private submodulesMeta: IGroupsMeta;
    private submoduleProp: ISubmoduleProps;
    private itemsMeta: IItemsMeta;
    private itemsProp: IItemsProps;

    constructor(props: IPageProps, context: any) {
        super(props, context);
        this.state = {};
    }
    confirmDelete(message: string, yes: () => void) {
        alertBox({
            title: getLocalString("sitemapedit_delete"),
            message: message,
            severity: "warning",
            buttons: {
                mode: "yes,no"
            },
            onClose: (closeBy: string) => (closeBy == "yes") && yes()
        });
    }
    onCreateModule = () => {
        let $create = this.modulesMeta.$links.$create;
        SyraPageModal.openFormModal({
            authoringDisabled: true,
            article: this.sitemap,
            url: syra_expression.parse(this.sitemap, $create.$url),
            method: $create.$method,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onServerSaved: (page: any) => {
                this.sitemap.dataset.modules = this.sitemap.dataset.modules || [];
                let dataMod = page.dataset;
                this.sitemap.dataset.modules.push(dataMod);
                this.onChange(dataMod.$uuid, dataMod.$uuid);
            }
        });
    }
    onCreateSubmodule = () => {
        let mod = this.state.selectedModule;
        let $create = this.submodulesMeta.$links.$create;
        SyraPageModal.openFormModal({
            authoringDisabled: true,
            article: mod,
            url: syra_expression.parse(mod, $create.$url),
            method: $create.$method,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onServerSaved: (page: any) => {
                let dataSubmod = page.dataset;
                let dataMod = this.findDataModule(mod.$uuid);
                (dataMod.submodules = dataMod.submodules || []).push(dataSubmod);
                this.onChange(dataSubmod.$uuid)
                return false;
            }
        });
    }
    onCreateMenuBlock = (block: SitemapBlock) => {
        let submodule = this.state.selectedModule.selectedSubmodule;
        let parentRecord = block || submodule;
        let newBlock = {
            menuBlock: {
                $uuid: UUID.generate(),
                title: getLocalString("sitemapedit_edit_block")
            }
        };
        (parentRecord.dataset as any).items.push(newBlock);
        put(submodule, submodule.url, {
            items: submodule.dataset.items
        }, (newDataset: any) => {
            let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
            Delta.merge(dataSubmod, newDataset);
            this.onChange(newBlock.menuBlock.$uuid);
        });
    }
    onAddModules = () => {
        let $select = this.modulesMeta.$links.$select;
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            url: syra_expression.parse(this.sitemap, $select.$url),
            onValidateSelection: (selected: any[]) => {
                if (selected && selected.length) {
                    let delta = syra_dataset.delta.array.add(this.sitemap.dataset.modules, selected);
                    if (delta.length > 0) {
                        put(this.sitemap, this.sitemap.url, {
                            modules: delta
                        }, (newDataset: any) => {
                            Delta.merge(this.sitemap.dataset, newDataset);
                            newDataset.$diagnoses && SyraAlert.show(newDataset.$diagnoses);
                            this.onChange(delta[0].$uuid, delta[0].$uuid);
                        });
                    }
                }
            }
        });
    }
    onAddSubmodules = () => {
        let mod = this.state.selectedModule;
        let $select = this.submodulesMeta.$links.$select;
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            url: syra_expression.parse(mod, $select.$url),
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onValidateSelection: (selected: any[]) => {
                if (selected && selected.length) {
                    let delta = syra_dataset.delta.array.add(mod.dataset.submodules, selected);
                    if (delta.length > 0) {
                        put(mod, mod.url, {
                            submodules: delta
                        }, (dataMod: any) => {
                            this.updateDataModule(dataMod);
                            dataMod.$diagnoses && SyraAlert.show(dataMod.$diagnoses);
                            this.onChange(delta[0].$uuid);
                        });
                    }
                }
            }
        });
    }
    onAddMenus = (block: SitemapBlock) => {
        let $items = this.submodulesMeta.$item.$properties.items;
        let submodule = this.state.selectedModule.selectedSubmodule;
        let $select = $items.$links.$select.$variants.menuItem;
        let parentRecord = block || submodule;
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            url: syra_expression.parse(submodule, $select.$url, parentRecord.dataset),
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onValidateSelection: (selected: any[]) => {
                if (selected && selected.length) {
                    let menuItems: any[] = []
                    for (let item of selected) {
                        menuItems.push({
                            menuItem: item
                        });
                    }
                    let delta = syra_dataset.delta.array.add((parentRecord.dataset as any).items, menuItems);
                    if (delta.length > 0) {
                        let data: any = {
                            $uuid: submodule.$uuid,
                            $etag: 1
                        };
                        if (parentRecord == submodule) {
                            data.items = delta;
                        }
                        else {
                            //send all the article dataset. use for level == "items" for menublock(parentRecord) and submodule(article)
                            (parentRecord.dataset as any).items = delta;
                            data.items = submodule.dataset.items;
                        }
                        put(submodule, submodule.url, data,
                            (newDataset) => {
                                let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
                                Delta.merge(dataSubmod, newDataset);
                                this.onChange();
                            });
                    }
                }
            }
        });
    }
    onEditModule = (mod: SitemapModule) => {
        let $edit = this.modulesMeta.$item.$links.$edit;
        SyraPageModal.openFormModal({
            authoringDisabled: true,
            article: this.sitemap,
            url: syra_expression.parse(mod, $edit.$url),
            method: $edit.$method,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onServerSaved: (page: any) => {
                let dataMod = page.dataset;
                this.updateDataModule(dataMod);
                dataMod.$diagnoses && SyraAlert.show(dataMod.$diagnoses, page);
                this.onChange();
            }
        });
    }
    onEditSubmodule = (submodule: SitemapSubmodule) => {
        let $edit = this.submodulesMeta.$item.$links.$edit;
        SyraPageModal.openFormModal({
            authoringDisabled: true,
            article: this.state.selectedModule,
            url: syra_expression.parse(submodule, $edit.$url),
            method: $edit.$method,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onServerSaved: (page: any) => {
                let dataSubmod = page.dataset;
                this.updateSubDataModule(submodule.navParent.$uuid, dataSubmod);
                dataSubmod.$diagnoses && SyraAlert.show(dataSubmod.$diagnoses, page);
                this.onChange();
            }
        });
    }
    onSaveTitleMenuBlock = (block: SitemapBlock, title: string) => {
        let submodule = block.submodule;
        block.dataset.title = title;
        put(submodule, submodule.url, {
            items: submodule.dataset.items
        }, (newDataset) => {
            let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
            Delta.merge(dataSubmod, newDataset);
            this.onChange();
        });
    }
    onLocalizeMenuBlock = (block: SitemapBlock) => {
        syra_localizer.onMenuClick({
            menu: this.itemsMeta.$item.$properties.title.$links.$localize,
            scope: {
                page: block.page,
                articleParent: block,
                getValue: () => {
                    return block.title;
                },
                onLocalizeField: (newData: any) => {
                    if (newData && newData.items) {
                        block.submodule.dataset.items = newData.items;
                    }
                    newData.$diagnoses && SyraAlert.show(newData.$diagnoses, block.submodule);
                    this.onChange();
                }
            }
        });
    }
    findDataModule($uuid: string): IDataModule {
        return syra_dataset.array.find(this.sitemap.dataset.modules, $uuid);
    }
    findDataSubmodule(uuidMod: string, $uuid: string): IDataSubmodule {
        let mod = this.findDataModule(uuidMod);
        return syra_dataset.array.find(mod.submodules, $uuid);
    }
    updateDataModule(delta: any) {
        Delta.merge(this.findDataModule(delta.$uuid), delta);
    }
    updateSubDataModule(uuidMod: string, delta: any) {
        Delta.merge(this.findDataSubmodule(uuidMod, delta.$uuid), delta);
    }
    onDeleteModule = (mod: SitemapModule) => {
        let title = getLocalString("sitemapedit_conf_del_modules").replace("{title}", mod.title);
        this.confirmDelete(title, () => {
            put(this.sitemap, this.sitemap.url, {
                modules: [{
                    $index: this.sitemap.modules.indexOf(mod),
                    $isDeleted: true,
                    $uuid: mod.$uuid
                }]
            }, () => {
                let dataModules = this.sitemap.dataset.modules;
                let dataMod = this.findDataModule(mod.$uuid);
                let index = dataModules.indexOf(dataMod);
                dataModules.splice(index, 1);
                dataMod = dataModules[Math.min(index, dataModules.length - 1)];
                this.onChange(dataMod && dataMod.$uuid, dataMod && dataMod.$uuid)
            }
            );
        });
    }
    onDeleteSubmodule = (submodule: SitemapSubmodule) => {
        let mod = submodule.navParent as SitemapModule;
        let title = getLocalString("sitemapedit_conf_del_submodules").replace("{title}", submodule.title);
        this.confirmDelete(title, () => {
            let index = mod.submodules.indexOf(submodule);
            put(mod, mod.url, {
                submodules: [{
                    $index: index,
                    $isDeleted: true,
                    $uuid: submodule.$uuid
                }]
            }, () => {
                let dataMod = this.findDataModule(mod.$uuid);
                dataMod.submodules.splice(index, 1);
                let dataSubmod = dataMod.submodules[Math.min(index, dataMod.submodules.length - 1)];
                this.onChange(dataSubmod && dataSubmod.$uuid, dataMod.$uuid, dataSubmod && dataSubmod.$uuid);
            }
            );
        });
    }
    onDeleteMenu = (menu: SitemapMenu) => {
        let submodule = this.state.selectedModule.selectedSubmodule;
        let navParent = menu.navParent;
        let title = getLocalString("sitemapedit_conf_del_menuItem").replace("{title}", menu.title);
        this.confirmDelete(title, () => {
            let items = navParent.dataset.items;
            for (let item of items) {
                if (item.menuItem && menu.$uuid == item.menuItem.$uuid) {
                    items.splice(items.indexOf(item), 1);
                    break;
                }
            }
            put(submodule, submodule.url, {
                items: submodule.dataset.items
            }, (newDataset) => {
                let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
                Delta.merge(dataSubmod, newDataset);
                this.onChange();
            });
            //this.deleteItem(submodule, menu, this.onChange);
        });
    }
    onDeleteMenuBlock = (block: SitemapBlock) => {
        let submodule = this.state.selectedModule.selectedSubmodule;
        let navParent = block.navParent;
        let title = getLocalString("sitemapedit_conf_del_menuBlock").replace("{title}", block.title);
        this.confirmDelete(title, () => {
            let items = navParent.dataset.items;
            for (let item of items) {
                if (item.menuBlock && block.$uuid == item.menuBlock.$uuid) {
                    items.splice(items.indexOf(item), 1);
                    break;
                }
            }
            put(submodule, submodule.url, {
                items: submodule.dataset.items
            }, (newDataset) => {
                let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
                Delta.merge(dataSubmod, newDataset);
                this.onChange();
            });
        });
    }
    onSortModule = (mod: SitemapModule, index: number) => {
        let oldIndex = this.sitemap.modules.indexOf(mod);
        syra_dataset.array.moveTo(this.sitemap.dataset.modules, oldIndex, index);
        syra_dataset.array.moveTo(this.sitemap.modules, oldIndex, index);
        put(this.sitemap, this.sitemap.url, {
            modules: syra_dataset.delta.array.$uuids(this.sitemap.dataset.modules)
        }, (newDataset: any) => {
            Delta.merge(this.sitemap.dataset, newDataset);
            newDataset.$diagnoses && SyraAlert.show(newDataset.$diagnoses);
            this.onChange();
        });
    }
    onSortSubmodule = (submodule: SitemapSubmodule, index: number) => {
        let mod = this.state.selectedModule;
        let oldIndex = mod.submodules.indexOf(submodule);
        syra_dataset.array.moveTo(mod.dataset.submodules, oldIndex, index);
        put(mod, mod.url, {
            submodules: syra_dataset.delta.array.$uuids(mod.dataset.submodules)
        }, (newDataset: any) => {
            this.updateSubDataModule(mod.$uuid, newDataset)
            newDataset.$diagnoses && SyraAlert.show(newDataset.$diagnoses);
            this.onChange();
        });
    }
    onSortItem = (moved: ISitemapItem, target: ISitemapItem, after: boolean) => {
        let submodule = this.state.selectedModule.selectedSubmodule;
        if (target) {
            let oldIndex = moved.navParent.children.indexOf(moved);
            moved.navParent.dataset.items.splice(oldIndex, 1);
            moved.navParent.children.splice(oldIndex, 1);
            let index = target.navParent.children.indexOf(target);
            if (after)++index;
            target.navParent.dataset.items.splice(index, 0, (moved as any).variant_dataset);
            target.navParent.children.splice(index, 0, moved);
            moved.articleParent = target.articleParent;
            moved.navParent = target.navParent;
        }
        put(submodule, submodule.url, {
            items: submodule.dataset.items
        }, (newDataset) => {
            let dataSubmod = this.findDataSubmodule(submodule.navParent.$uuid, submodule.$uuid);
            Delta.merge(dataSubmod, newDataset);
            this.onChange();
        });
    }
    onSelectModule = (mod: SitemapModule) => {
        this.setState({
            selectedModule: mod,
            selectedSubmodule: mod.selectedSubmodule,
            scrollToUuid: null
        });
    }
    onSelectSubmodule = (submodule: SitemapSubmodule) => {
        this.state.selectedModule.selectedSubmodule = submodule;
        this.setState({
            selectedSubmodule: submodule
        });
    }
    findModule(uuid: string): SitemapModule {
        for (let mod of this.sitemap.modules) {
            if (mod.$uuid == uuid) {
                return mod;
            }
        }
    }
    onChange = (scrollToUuid?: string, uuidMod?: string, uuidSubmod?: string) => {
        uuidMod = uuidMod || (this.state.selectedModule && this.state.selectedModule.$uuid)
        if (uuidMod && !uuidSubmod) {
            let mod = this.findModule(uuidMod);
            if (mod.selectedSubmodule) {
                uuidSubmod = mod.selectedSubmodule.$uuid;
            }
        }
        this.sitemap.load();
        let selectedModule = (uuidMod && this.findModule(uuidMod)) || null;
        if (selectedModule) {
            for (let submod of selectedModule.submodules) {
                if (submod.$uuid == uuidSubmod) {
                    selectedModule.selectedSubmodule = submod;
                    break;
                }
            }
        }
        this.setState({
            selectedModule: selectedModule,
            selectedSubmodule: selectedModule && selectedModule.selectedSubmodule,
            scrollToUuid: scrollToUuid
        });
    }
    private setGroupMeta(meta: IGroupsMeta): IGroupsMeta {
        if (meta.$links) {
            meta.createable = meta.$links.$create;
            meta.addable = meta.$links.$select;
        }
        meta.editable = meta.$item.$links && meta.$item.$links.$edit;
        meta.deleteable = meta.$capabilities && meta.$capabilities.indexOf("delete") >= 0;
        return meta as IGroupsMeta;
    }
    componentDidMount() {
        this.loader = new PageLoader(this.props.sdataUrl);
        this.loader.getCore((representation: Sdata.IRepresentation, error: IPageLoadError) => {
            if (error) {
                this.setState({
                    loadError: error
                });
            }
            else {
                this.representation = representation;
                let dataset: any = {};
                let keys = Object.keys(representation);
                for (let key of keys) {
                    if (key != "$prototype" && key != "$article") {
                        dataset[key] = (representation as any)[key];
                    }
                }
                this.sitemap = new Sitemap(representation.$prototype, dataset);

                this.modulesMeta = this.setGroupMeta(this.sitemap.dataset.$properties.modules);
                this.moduleProp = {
                    onSortModule: this.onSortModule,
                    onSelectModule: this.onSelectModule
                }
                if (this.modulesMeta.createable) {
                    this.moduleProp.onCreateModule = this.onCreateModule;
                }
                if (this.modulesMeta.addable) {
                    this.moduleProp.onAddModules = this.onAddModules;
                }
                if (this.modulesMeta.editable) {
                    this.moduleProp.onEditModule = this.onEditModule;
                }
                if (this.modulesMeta.deleteable) {
                    this.moduleProp.onDeleteModule = this.onDeleteModule;
                }

                this.submodulesMeta = this.setGroupMeta(this.modulesMeta.$item.$properties.submodules);
                this.submoduleProp = {
                    onSortSubmodule: this.onSortSubmodule,
                    onSelectSubmodule: this.onSelectSubmodule
                }
                if (this.submodulesMeta.createable) {
                    this.submoduleProp.onCreateSubmodule = this.onCreateSubmodule;
                }
                if (this.submodulesMeta.addable) {
                    this.submoduleProp.onAddSubmodules = this.onAddSubmodules;
                }
                if (this.submodulesMeta.editable) {
                    this.submoduleProp.onEditSubmodule = this.onEditSubmodule;
                }
                if (this.submodulesMeta.deleteable) {
                    this.submoduleProp.onDeleteSubmodule = this.onDeleteSubmodule;
                }

                let $items = this.submodulesMeta.$item.$properties.items;
                this.itemsMeta = $items.$item.$variants.menuBlock;
                if (this.itemsMeta.$capabilities) {
                    this.itemsMeta.blockCreateable = this.itemsMeta.$capabilities.indexOf("append") >= 0;
                    this.itemsMeta.blockDeleteable = this.itemsMeta.$capabilities.indexOf("delete") >= 0;
                }
                let $select = $items.$links.$select;
                this.itemsMeta.menuAddable = $select && $select.$variants && $select.$variants.menuItem;
                let $menu = $items.$item.$variants.menuItem
                this.itemsMeta.menuDeleteable = $menu.$capabilities && $menu.$capabilities.indexOf("delete") >= 0;
                this.itemsProp = {
                    onLocalizeMenuBlock: this.onLocalizeMenuBlock,
                    onSortItem: this.onSortItem,
                    onSaveTitleMenuBlock: this.onSaveTitleMenuBlock,
                };
                if (this.itemsMeta.blockCreateable) {
                    this.itemsProp.onCreateMenuBlock = this.onCreateMenuBlock;
                }
                if (this.itemsMeta.menuAddable) {
                    this.itemsProp.onAddMenus = this.onAddMenus;
                }
                if (this.itemsMeta.menuDeleteable) {
                    this.itemsProp.onDeleteMenu = this.onDeleteMenu;
                }
                if (this.itemsMeta.blockDeleteable) {
                    this.itemsProp.onDeleteMenuBlock = this.onDeleteMenuBlock;
                }
                let mod = this.sitemap.modules[0];
                this.onChange(mod && mod.$uuid, mod && mod.$uuid);
                if (this.props.onMainPageLoaded) {
                    this.props.onMainPageLoaded(this.sitemap.title);
                }
            }
        });
    }
    componentWillUnmount() {
        Put.dispose();
        this.sitemap && this.sitemap.dispose();
        this.setState = this.modulesMeta = this.submodulesMeta = null;
        this.loader && this.loader.dispose();
    }
    render() {
        if (this.state && this.state.loadError) {
            return <AlertPage status={this.state.loadError.status} diagnoses={this.state.loadError.diagnoses} />;
        }
        if (this.sitemap && this.sitemap.modules) {
            return <SitemapEdit
                title={this.sitemap.title}
                modules={this.sitemap.modules}
                selectedModule={this.state.selectedModule}
                selectedSubmodule={this.state.selectedSubmodule}
                scrollToUuid={this.state.scrollToUuid}
                onCreateModule={this.moduleProp.onCreateModule}
                onAddModules={this.moduleProp.onAddModules}
                onEditModule={this.moduleProp.onEditModule}
                onDeleteModule={this.moduleProp.onDeleteModule}
                onSortModule={this.moduleProp.onSortModule}
                onSelectModule={this.moduleProp.onSelectModule}
                onCreateSubmodule={this.submoduleProp.onCreateSubmodule}
                onAddSubmodules={this.submoduleProp.onAddSubmodules}
                onEditSubmodule={this.submoduleProp.onEditSubmodule}
                onDeleteSubmodule={this.submoduleProp.onDeleteSubmodule}
                onSortSubmodule={this.submoduleProp.onSortSubmodule}
                onSelectSubmodule={this.submoduleProp.onSelectSubmodule}
                onCreateMenuBlock={this.itemsProp.onCreateMenuBlock}
                onSaveTitleMenuBlock={this.itemsProp.onSaveTitleMenuBlock}
                onAddMenus={this.itemsProp.onAddMenus}
                onDeleteMenu={this.itemsProp.onDeleteMenu}
                onDeleteMenuBlock={this.itemsProp.onDeleteMenuBlock}
                onLocalizeMenuBlock={this.itemsProp.onLocalizeMenuBlock}
                onSortItem={this.itemsProp.onSortItem} />;
        }
        return null;
    }
}