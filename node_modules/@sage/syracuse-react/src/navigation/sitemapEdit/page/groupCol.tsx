"use strict";
import * as React from 'react';
import { Link, LinkClickHandler } from '../../../link/link';
import Scrollbar from '../../../common/scroll/scrollbar/scrollbar';
import * as Events from '../../../event/events';
import { ISitemapEntity } from '../../sitemap/groups';
import { SortableLine } from '../../../common/sortable/sortableLine';
import { getLocalString } from '../../../culture/localString';

interface IGroupEvent {
    onStartSort?: (group: ISitemapEntity, handle: HTMLElement) => void,
    onSelect: (group: ISitemapEntity) => void,
    onEdit?: LinkClickHandler,
    onDelete?: LinkClickHandler
}

interface IGroupProps extends IGroupEvent {
    group: ISitemapEntity,
    selected: boolean,
    title: string
}

export interface IGroupColProps extends IGroupEvent {
    title: string,
    emptyTitle: string,
    selectedId?: string,
    groups?: ISitemapEntity[],
    onCreate?: LinkClickHandler,
    onAdd?: LinkClickHandler,
}

export class GroupCol extends React.Component<IGroupColProps, {}>{
    body: HTMLElement;
    componentDidMount() {
        Events.resize.subscribe(this.handleResize);
    }
    handleResize = () => {
        this.body.style.height = ((this.body.parentNode as HTMLElement).clientHeight - this.body.offsetTop) + "px";
    }
    componentWillUnmount() {
        Events.resize.unsubscribe(this.handleResize);
        this.body = null;
    }
    renderGroup = (group: ISitemapEntity) => {
        return <SortableLine
            key={group.dataset.$uuid}
            selected={this.props.selectedId == group.dataset.$uuid}
            className="s_sitemapedit_group"
            value={group}
            onSelect={this.props.onSelect}
            onStartSort={this.props.onStartSort}>
            <div className="s_sitemapedit_group_title">{group.dataset.title}</div>
            {this.props.onEdit && <Link className="s_sitemapedit_icon_link"
                icon="pencil"
                title={getLocalString("sitemapedit_edit")}
                onClick={this.props.onEdit}
                value={group} />}
            {this.props.onDelete &&
                <Link className="s_sitemapedit_icon_link"
                    icon="perm_delete"
                    title={getLocalString("sitemapedit_delete")}
                    value={group} onClick={this.props.onDelete} />}
        </SortableLine>;
    }
    renderGroups() {
        if (this.props.groups && this.props.groups.length) {
            return <ul className="s_sitemapedit_col_list">{this.props.groups.map(this.renderGroup)}</ul>;
        }
        return <div className="s_sitemapedit_col_empty">{this.props.emptyTitle}</div>;
    }
    render() {
        return <div className="s_sitemapedit_col">
            <div className="s_sitemapedit_col_header">
                <div className="s_sitemapedit_col_title">{this.props.title}</div>
                {this.props.onCreate && <Link
                    className="s_sitemapedit_col_link"
                    title={getLocalString("sitemapedit_group_new")}
                    onClick={this.props.onCreate} />}
                {this.props.onAdd && <Link
                    className="s_sitemapedit_col_link"
                    title={getLocalString("sitemapedit_group_select")}
                    onClick={this.props.onAdd} />}
            </div>
            <div className="s_sitemapedit_col_body" ref={(node) => this.body = node}>
                <Scrollbar>
                    {this.renderGroups()}
                </Scrollbar>
            </div>
            {this.props.children}
        </div>;
    }
}