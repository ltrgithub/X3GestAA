"use strict";
import * as React from 'react';
import { WebPage } from '../../../page/page';
import { Sortable } from '../../../common/sortable/sortable';
import * as Dom from '../../../utility/html/dom';
import { GroupCol } from './groupCol';
import { ItemsCol } from './itemsCol';
import { getLocalString } from '../../../culture/localString';
import { SitemapModule, SitemapSubmodule } from '../../sitemap/groups';
import { ISitemapItem, SitemapBlock, SitemapMenu } from '../../sitemap/items';
import './sitemapEdit.less';

export interface IModuleProps {
	onCreateModule?: () => void,
	onAddModules?: () => void,
	onEditModule?: (mod: SitemapModule) => void,
	onDeleteModule?: (mod: SitemapModule) => void,
	onSortModule: (mod: SitemapModule, index: number) => void,
	onSelectModule: (mod: SitemapModule) => void
}

export interface ISubmoduleProps {
	onCreateSubmodule?: () => void,
	onAddSubmodules?: () => void,
	onEditSubmodule?: (submodule: SitemapSubmodule) => void,
	onDeleteSubmodule?: (submodule: SitemapSubmodule) => void,
	onSortSubmodule: (submodule: SitemapSubmodule, index: number) => void
	onSelectSubmodule: (submodule: SitemapSubmodule) => void
}
export interface IItemsProps {
	onCreateMenuBlock?: (block: SitemapBlock) => void,
	onSaveTitleMenuBlock: (block: SitemapBlock, newTitle: string) => void,
	onAddMenus?: (block: SitemapBlock) => void,
	onDeleteMenu?: (menu: SitemapMenu) => void,
	onDeleteMenuBlock?: (block: SitemapBlock) => void,
	onLocalizeMenuBlock: (block: SitemapBlock) => void,
	onSortItem: (item: ISitemapItem, target: ISitemapItem, after: boolean) => void
}

export interface ISitemapEditProps extends IModuleProps, ISubmoduleProps, IItemsProps {
	title: string,
	modules: SitemapModule[],
	selectedModule: SitemapModule,
	selectedSubmodule: SitemapSubmodule,
	scrollToUuid?: string
}

export class SitemapEdit extends React.Component<ISitemapEditProps, {}>{
	private sort: Sortable;
	onSortModule = (mod: SitemapModule, line: HTMLElement) => {
		this.sort = new Sortable(line, {
			dragText: () => mod.title,
			end: (moved: HTMLElement, target: HTMLElement, after: boolean) => {
				let to = Dom.getNodeIndex(target);
				let from = Dom.getNodeIndex(moved);
				if (from < to)--to
				if (after)++to
				this.props.onSortModule(mod, to);
			}
		});
	}
	onSortSubmodule = (submodule: SitemapSubmodule, line: HTMLElement) => {
		this.sort = new Sortable(line, {
			dragText: () => submodule.title,
			end: (moved: HTMLElement, target: HTMLElement, after: boolean) => {
				let to = Dom.getNodeIndex(target);
				let from = Dom.getNodeIndex(moved);
				if (from < to)--to
				if (after)++to
				this.props.onSortSubmodule(submodule, to);
			}
		});
	}
	onSortItem = (item: ISitemapItem, line: HTMLElement) => {
		this.sort = new Sortable(line, {
			root: document.getElementById(this.props.selectedSubmodule.$uuid),
			dragText: () => item.title,
			end: (moved: HTMLElement, target: HTMLElement, after: boolean) => {
				this.props.onSortItem(item, this.props.selectedSubmodule.findItem(target.id), after);
			}
		});
	}
	componentDidUpdate(prevProps: ISitemapEditProps) {
		if (this.props.scrollToUuid != (prevProps && prevProps.scrollToUuid)) {
			Dom.scrollTo(this.props.scrollToUuid);
		}
	}
	componentWillUnmount() {
		this.sort && this.sort.dispose();
	}
	render() {
		if (this.props.modules) {
			let items = this.props.selectedSubmodule && this.props.selectedSubmodule.children;
			return <WebPage
				title={this.props.title}
				bodyClassName="s_sitemap_body">
				<GroupCol title={getLocalString("sitemapedit_modules")}
					emptyTitle={getLocalString("sitemap_no_module")}
					selectedId={this.props.selectedModule && this.props.selectedModule.$uuid}
					groups={this.props.modules}
					onSelect={this.props.onSelectModule}
					onCreate={this.props.onCreateModule}
					onAdd={this.props.onAddModules}
					onEdit={this.props.onEditModule}
					onDelete={this.props.onDeleteModule}
					onStartSort={this.onSortModule} />
				<GroupCol title={getLocalString("sitemapedit_submodules")}
					emptyTitle={getLocalString("sitemap_no_submodules")}
					selectedId={this.props.selectedSubmodule && this.props.selectedSubmodule.$uuid}
					groups={this.props.selectedModule && this.props.selectedModule.submodules}
					onSelect={this.props.onSelectSubmodule}
					onCreate={this.props.onCreateSubmodule}
					onAdd={this.props.onAddSubmodules}
					onEdit={this.props.onEditSubmodule}
					onDelete={this.props.onDeleteSubmodule}
					onStartSort={this.onSortSubmodule} />
				<ItemsCol submodule={this.props.selectedSubmodule}
					title={getLocalString("sitemapedit_items")}
					items={items}
					onLocalizeMenuBlock={this.props.onLocalizeMenuBlock}
					onCreateMenuBlock={this.props.onCreateMenuBlock}
					onDeleteMenuBlock={this.props.onDeleteMenuBlock}
					onAddMenus={this.props.onAddMenus}
					onDeleteMenu={this.props.onDeleteMenu}
					onSaveTitleMenuBlock={this.props.onSaveTitleMenuBlock}
					onStartSortMenuBlock={this.onSortItem}
					onStartSortMenu={this.onSortItem} />
			</WebPage>;
		}
		return null;
	}
}