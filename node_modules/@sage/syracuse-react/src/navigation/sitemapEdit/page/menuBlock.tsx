"use strict";
import * as React from 'react';
import { getLocalString } from '../../../culture/localString';
import { Link } from '../../../link/link';
import { Menu } from './menu';
import { SortableLine } from '../../../common/sortable/sortableLine';
import { SitemapBlock, SitemapMenu, ISitemapItem } from '../../sitemap/items';
import { SitemapSubmodule } from '../../sitemap/groups';
import { EditField } from '../../edit/editTitle';

export interface IITemsEvent {
	onStartSortMenuBlock?: (menuBlock: SitemapBlock, handle: HTMLElement) => void,
	onStartSortMenu?: (menu: SitemapMenu, handle: HTMLElement) => void,
	onCreateMenuBlock?: (block: SitemapBlock) => void,
	onAddMenus?: (block: SitemapBlock) => void,
	onDeleteMenuBlock?: (block: SitemapBlock) => void,
	onLocalizeMenuBlock?: (block: SitemapBlock) => void,
	onSaveTitleMenuBlock: (block: SitemapBlock, newTitle: string) => void,
	onDeleteMenu?: (menu: SitemapMenu) => void
}

interface IProps extends IITemsEvent {
	collapsed?: boolean,
	menuBlock: SitemapBlock,
	onCollapse: () => void
}

interface ITitleProps extends IProps {
	//onCollapse: () => void,
	onEditTitle: () => void
}

class MenuDetailBlock extends React.Component<ITitleProps, {}>{
	render() {
		return <div className="s_sitemapedit_menublock_header">
			<Link
				className="s_sitemapedit_menublock_link"
				title={this.props.collapsed ? getLocalString("section_expand") : getLocalString("section_collapse")}
				icon={this.props.collapsed ? "dir_down" : "dir_up"}
				onClick={this.props.onCollapse} />
			{this.props.menuBlock.title}
			<Link className="s_sitemapedit_icon_link"
				icon="pencil"
				title={getLocalString("sitemapedit_edit_block")}
				onClick={this.props.onEditTitle} />
			{this.props.onCreateMenuBlock &&
				<Link className="s_sitemapedit_icon_link"
					icon="add"
					title={getLocalString("sitemapedit_create_block")}
					value={this.props.menuBlock} onClick={this.props.onCreateMenuBlock} />}
			{this.props.onAddMenus &&
				<Link className="s_sitemapedit_icon_link"
					icon="zoom_in"
					title={getLocalString("sitemapedit_add_menus")}
					value={this.props.menuBlock} onClick={this.props.onAddMenus} />}
			{this.props.onLocalizeMenuBlock &&
				<Link className="s_sitemapedit_icon_link"
					icon="flag"
					title={getLocalString("sitemapedit_localize")}
					value={this.props.menuBlock}
					onClick={this.props.onLocalizeMenuBlock} />}
			{this.props.onDeleteMenuBlock &&
				<Link className="s_sitemapedit_icon_link"
					icon="perm_delete"
					title={getLocalString("sitemapedit_delete")}
					value={this.props.menuBlock}
					onClick={this.props.onDeleteMenuBlock} />}
		</div>;
	}
}

interface IEditTitleProps extends IProps {
	onSave: (title: string) => void,
	onCancel: () => void
}

class MenuEditBlock extends React.Component<IEditTitleProps, {}>{
	render() {
		return <div className="s_sitemapedit_menublock_header">
			<EditField className="s_sitemapedit_title"
				value={this.props.menuBlock.title}
				onApply={this.props.onSave}
				onCancel={this.props.onCancel} />
		</div>;
	}
}

interface IMenuBlockState {
	onEditTitle?: boolean,
	collapsed?: boolean
}
export class MenuBlock extends React.Component<IProps, IMenuBlockState>{
	constructor(props: IProps, context: any) {
		super(props, context);
		this.state = {
			collapsed: this.props.collapsed
		};
	}
	onCollapse = () => {
		this.setState({
			collapsed: !this.state.collapsed
		});
	}
	componentDidUpdate(prevProps: any, prevState: IMenuBlockState) {
		if (prevState.collapsed != this.state.collapsed) {
			this.props.onCollapse();
		}
	}
	componentWillReceiveProps(nextProps: any) {
		if (nextProps.collapsed != this.props.collapsed) {
			this.setState({
				collapsed: nextProps.collapsed
			});
		}
	}
	onEditTitle = () => {
		this.setState({
			onEditTitle: true
		});
	}
	onCancelEditTitle = () => {
		this.setState({
			onEditTitle: false
		});
	}
	onSaveTitle = (title: string) => {
		this.props.onSaveTitleMenuBlock(this.props.menuBlock, title);
		this.onCancelEditTitle();
	}
	render() {
		return <SortableLine
			id={this.props.menuBlock.$uuid}
			className="s_sitemapedit_menublock"
			value={this.props.menuBlock}
			onStartSort={this.props.onStartSortMenuBlock}>
			{this.state.onEditTitle ?
				<MenuEditBlock {...this.props} onCancel={this.onCancelEditTitle} onSave={this.onSaveTitle} />
				: <MenuDetailBlock {...this.props} onCollapse={this.onCollapse} onEditTitle={this.onEditTitle} />}
			{!this.state.collapsed && <MenuBlockBody menuBlock={this.props.menuBlock} items={this.props.menuBlock.children} {...this.props} />}
		</SortableLine>;
	}
}

export interface IBodyProps extends IITemsEvent {
	submodule?: SitemapSubmodule,
	menuBlock?: SitemapBlock,
	collapsed?: boolean,
	onCollapse?: () => void,
	items: ISitemapItem[]
}

export class MenuBlockBody extends React.Component<IBodyProps, {}>{
	render() {
		if (this.props.items && this.props.items.length) {
			let items: any[] = []
			for (let item of this.props.items) {
				if (item.variantKey == "menuBlock") {
					let menuBlock: SitemapBlock = item as SitemapBlock;
					items.push(<MenuBlock key={menuBlock.$uuid}
						menuBlock={menuBlock}
						onCollapse={this.props.onCollapse}
						onStartSortMenuBlock={this.props.onStartSortMenuBlock}
						onStartSortMenu={this.props.onStartSortMenu}
						onCreateMenuBlock={this.props.onCreateMenuBlock}
						onSaveTitleMenuBlock={this.props.onSaveTitleMenuBlock}
						onAddMenus={this.props.onAddMenus}
						onDeleteMenuBlock={this.props.onDeleteMenuBlock}
						onLocalizeMenuBlock={this.props.onLocalizeMenuBlock}
						onDeleteMenu={this.props.onDeleteMenu}
					/>);
				}
				else {
					let menu: SitemapMenu = item as SitemapMenu;
					items.push(<Menu key={menu.$uuid}
						menu={menu}
						onStartSort={this.props.onStartSortMenu}
						onDelete={this.props.onDeleteMenu} />);
				}
			}
			let id, css = this.props.submodule ? this.props.submodule.$uuid : this.props.menuBlock.$uuid;
			if (this.props.submodule) {
				id = this.props.submodule.$uuid;
				css = "s_sitemapedit_submodule_body";
			}
			else {
				id = this.props.menuBlock.$uuid;
				css = "s_sitemapedit_menublock_body";
			}
			return <ul id={id} className={css}>
				{items}
			</ul>;
		}
		return <div className="s_sitemapedit_col_empty">{getLocalString("sitemap_no_menu")}</div>;
	}
}