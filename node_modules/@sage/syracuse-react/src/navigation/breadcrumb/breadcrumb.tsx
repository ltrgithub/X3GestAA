"use strict";
import * as React from 'react';
import * as Sdata from '../../dataStore/sdata';
import { Url } from '../../route/url';
import { Icon } from '../../common/icon/icon';
import { Link } from '../../link/link';
import { Popup } from '../../over/popup/popup';
import { BreadcrumbPanel, IBreadcrumbPanelProps } from './breadcrumbPanel';
import { SitemapModule, SitemapSubmodule } from '../sitemap/groups';
import { SitemapMenu, SitemapBlock, ISitemapItem } from '../sitemap/items';
import * as Dom from '../../utility/html/dom';
import { IProps, IPath } from './components/props';

import './breadcrumb.less';

interface IBreadcrumbProps {
    url?: Url,
    steps: Sdata.IBreadcrumStep[],
    disabled?: boolean,
    modules: SitemapModule[],
    inModal?: boolean
}

export function findBlock(children: ISitemapItem[], blockId: string): SitemapBlock {
    if (children) {
        for (let child of children) {
            if (child.variantKey == "menuBlock") {
                let block: SitemapBlock = child as SitemapBlock;
                if (block.$uuid == blockId) {
                    return block;
                }
            }
        }
    }
}

export function buildPath(modules: SitemapModule[], steps: Sdata.IBreadcrumStep[], url?: Url): IPath {
    let path = {
        module: null,
        submodule: null,
        blocks: [],
        menu: null
    } as IPath;
    let items: ISitemapItem[];
    for (let mod of modules) {
        if (mod.$uuid == steps[1].$uuid) {
            path.module = mod;
            for (let submod of mod.submodules) {
                if (submod.$uuid == steps[2].$uuid) {
                    path.submodule = submod;
                    items = submod.children;
                    for (let ii = 3, jj = steps.length; ii < jj; ii++) {
                        let block = findBlock(items, steps[ii].$uuid);
                        path.blocks.push(block);
                        if (block) {
                            items = block.children;
                        }
                        else {
                            break;
                        }
                    }
                    break;
                }
            }
            break;
        }
    }
    if (items && url) {
        for (let item of items) {
            if (item.variantKey == "menuItem") {
                let menu: SitemapMenu = item as SitemapMenu;
                if (menu.url.match(url)) {
                    path.menu = menu;
                    break;
                }
            }
        }
    }
    return path;
}

export class Breadcrumb extends React.Component<IBreadcrumbProps, {
    content: HTMLElement,
    panelProps: IBreadcrumbPanelProps
}>{
    private _path: IPath;
    get path(): IPath {
        if (!this._path) {
            this._path = buildPath(this.props.modules, this.props.steps, this.props.url);
        }
        return this._path;
    }
    onClick = (stepIndex: number, event: MouseEvent) => {
        if (this.props.modules) {
            this.setState({
                content: event.target as HTMLElement,
                panelProps: {
                    selectedModule: (stepIndex > 0) ? this.path.module : null,
                    selectedSubmodule: (stepIndex > 1) ? this.path.submodule : null,
                    selectedBlock: (stepIndex > 2) ? this.path.blocks[stepIndex - 3] : null,
                    modules: this.props.modules,
                    path: this.path
                }
            });
        }
    }
    renderPanel() {
        return <Popup of={this.state.content} onClose={() => {
            this.setState({
                content: null,
                panelProps: null
            });
        }}>< BreadcrumbPanel {...this.state.panelProps} />
        </Popup>;
    }
    render() {
        let endStep = this.props.steps[this.props.steps.length - 1];
        let steps: any[] = [];
        let cssSep = "s_breadcrumb_sep";
        if (this.props.disabled) {
            cssSep += " " + Dom.css.disabled;
        }
        let stepIndex = 0;
        for (let step of this.props.steps) {
            steps.push(<Link
                key={steps.length}
                title={step.title}
                value={stepIndex++}
                disabled={this.props.disabled}
                className="s_breadcrumb_step_link"
                onClick={this.onClick} />);
            if (step != endStep) {
                steps.push(<Icon key={steps.length + "_sep"}
                    className={cssSep}
                    name="next" />);
            }
        }
        return <nav className={this.props.inModal ? "s_breadcrumb_modal" : "s_breadcrumb"}>
            {steps}
            {this.state && this.state.panelProps && this.renderPanel()}
        </nav>;
    }
}