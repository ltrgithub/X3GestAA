"use strict";
import * as React from 'react';
import { SitemapModule, SitemapSubmodule } from '../../navigation/sitemap/groups';
import * as Events from '../../event/events';
import * as Dom from '../../utility/html/dom';
import { Modules } from './components/module';
import { Submodules } from './components/submodule';
import { Items } from './components/items';
import { SitemapMenu, SitemapBlock, ISitemapItem, IEntity } from '../sitemap/items';
import Scrollbar from '../../common/scroll/scrollbar/scrollbar';
import { IPath } from './components/props';
import { syra_menus } from '../../syra/utility/syra_menus';
import { HotKeyLinks } from '../../shortcut/hotKeyLinks';

export interface IBreadcrumbPanelProps {
    modules: SitemapModule[],
    selectedModule?: SitemapModule,
    selectedSubmodule?: SitemapSubmodule,
    selectedBlock?: SitemapBlock,
    path: IPath
}

export class BreadcrumbPanel extends React.Component<IBreadcrumbPanelProps, {}>{
    private scrollbar: Scrollbar;
    private panel: HTMLElement;
    private expandedList: any = {};

    resize = () => {
        if (this.panel) {
            this.panel.style.maxHeight = (0.8 * Dom.site.body.height) + "px";
        }
        this.scrollbar && this.scrollbar.resize();
    }
    componentDidMount() {
        Events.resize.subscribe(this.resize);
    }
    componentDidUpdate() {
        this.resize();
    }
    componentWillUnmount() {
        Events.resize.unsubscribe(this.resize);
        this.panel = null;
    }
    onExpand = (entity: IEntity) => {
        if (this.expandedList[entity.$uuid]) {
            delete this.expandedList[entity.$uuid];
        }
        else {
            this.expandedList[entity.$uuid] = true;
        }
        this.forceUpdate();
    }
    onMenuClick = (menu: SitemapMenu, event: MouseEvent) => {
        if (!menu.$disabled) {
            //temp syra
            let temp = menu.url; //enure tempSyraMenu
            syra_menus.click.fire({
                menu: menu,
                event: event
            }, event);
        }
    }
    renderBody() {
        if (!this.props.selectedModule) {
            return <Modules modules={this.props.modules}
                onMenuClick={this.onMenuClick}
                onExpand={this.onExpand}
                expandedList={this.expandedList}
                path={this.props.path} />;
        }
        else {
            if (!this.props.selectedSubmodule) {
                return this.props.selectedModule &&
                    <Submodules module={this.props.selectedModule}
                        onMenuClick={this.onMenuClick}
                        onExpand={this.onExpand}
                        expandedList={this.expandedList}
                        path={this.props.path} />;
            }
            else {
                if (this.props.selectedBlock || this.props.selectedSubmodule) {
                    return <Items items={(this.props.selectedBlock || this.props.selectedSubmodule).children}
                        onMenuClick={this.onMenuClick}
                        onExpand={this.onExpand}
                        expandedList={this.expandedList}
                        path={this.props.path} />;
                }
            }
        }
    }
    render() {
        if (this.props.modules && this.props.modules.length) {
            return <HotKeyLinks className="s_breadcrumb_panel" >
                <Scrollbar ref={(scrollbar) => { this.scrollbar = scrollbar }}>
                    <div className="s_breadcrumb_popup_body" ref={(node) => this.panel = node}>
                        {this.renderBody()}
                    </div>
                </Scrollbar>
            </HotKeyLinks>;
        }
        return null;
    }
}