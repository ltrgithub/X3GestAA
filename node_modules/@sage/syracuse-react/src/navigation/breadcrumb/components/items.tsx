"use strict";
import * as React from 'react';
import { SitemapBlock, SitemapMenu, setMenuDescription, ISitemapItem } from '../../sitemap/items';
import { Link } from '../../../link/link';
import { IProps } from './props';

export interface IMenuBlockProps extends IProps {
    menuBlock: SitemapBlock
}

export interface IItemProps extends IProps {
    items: ISitemapItem[]
}

export class Items extends React.Component<IItemProps, {}>{
    render() {
        let children: any[] = [];
        for (let item of this.props.items) {
            if (item.variantKey == "menuBlock") {
                let menuBlock: SitemapBlock = item as SitemapBlock;
                children.push(<MenuBlock
                    key={menuBlock.$uuid}
                    menuBlock={menuBlock} {...this.props as IProps} />);
            }
            else {
                let menu: SitemapMenu = item as SitemapMenu;
                children.push(<Menu key={menu.$uuid} menu={menu} {...this.props as IProps} />);
            }
        }
        return <ul className="s_breadcrumb_menublock_body">
            {children}
        </ul>;
    }
}

export class MenuBlock extends React.Component<IMenuBlockProps, {}>{
    renderChildren() {
        return <div className="s_breadcrumb_subgroup">
            <Items items={this.props.menuBlock.children}
                onMenuClick={this.props.onMenuClick}
                onExpand={this.props.onExpand}
                expandedList={this.props.expandedList}
                path={this.props.path} />
        </div>;

    }
    get expanded(): boolean {
        return this.props.expandedList[this.props.menuBlock.$uuid];
    }
    render() {
        let css = ((this.props.path.blocks.indexOf(this.props.menuBlock) >= 0) ? "s_selected " : "") + "s_breadcrumb_menublock_link";
        return <li className="s_breadcrumb_module_link">
            <Link
                className={css}
                title={this.props.menuBlock.title}
                icon={this.expanded ? "dir_down" : "next"}
                iconText="left"
                value={this.props.menuBlock}
                onClick={this.props.onExpand} />
            {this.expanded && this.renderChildren()}
        </li>;
    }
}


interface IMenuProps extends IProps {
    menu: SitemapMenu
}
export class Menu extends React.Component<IMenuProps, {}>{
    render() {
        let css = "s_breadcrumb_menu_link";
        if (this.props.path.menu == this.props.menu) {
            css = "s_selected " + css;
        }
        return <li className="s_breadcrumb_module_link">
            <Link
                className={css}
                title={this.props.menu.title}
                description={setMenuDescription(this.props.menu.dataset)}
                value={this.props.menu}
                onClick={this.props.onMenuClick}
            />
        </li>;
    }
}