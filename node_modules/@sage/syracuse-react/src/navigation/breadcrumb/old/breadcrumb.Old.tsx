/*"use strict";
import * as React from 'react';
import * as Sdata from '../../../dataStore/sdata';
import { Icon } from '../../../common/icon/icon';
import { Link } from '../../../link/link';
import { Popup } from '../../../over/popup/popup';
import { BreadcrumbPanel, IBreadcrumbPanelProps } from './../breadcrumbPanel';
import { currentProfile } from '../../../profile/profile';
import './breadcrumbold.less';

interface IBreadcrumbProps {
    steps: Sdata.IBreadcrumStep[],
    disabled?: boolean
}

export class Breadcrumb extends React.Component<IBreadcrumbProps, {
    of: HTMLElement,
    panelProps: IBreadcrumbPanelProps
}>{
    handleClick = (activated:Sdata.IBreadcrumStep, event: MouseEvent) => {
        if (currentProfile.sitemap.modules) {
            let panelProps: IBreadcrumbPanelProps = {
                moduleId: null,
                submoduleId: null,
                blockIds: null,
                modules: currentProfile.sitemap.modules
            };
            if (activated.$uuid) {
                for (let ii = 1, jj = this.props.steps.length; ii < jj; ii++) {
                    let step = this.props.steps[ii];
                    switch (ii) {
                        case 1:
                            panelProps.moduleId = step.$uuid;
                            break;
                        case 2:
                            panelProps.submoduleId = step.$uuid;
                            break;
                        default:
                            (panelProps.blockIds = panelProps.blockIds || []).push(step.$uuid);
                            break;
                    }
                    if (step.$uuid == activated.$uuid) {
                        break;
                    }
                }
            }
            this.setState({
                of: event.target as HTMLElement,
                panelProps: panelProps
            });
        }
    }
    renderPanel() {
        if (this.state && this.state.panelProps) {
            return <Popup of={this.state.of} onClose={() => {
                this.setState({
                    of: null,
                    panelProps: null
                });
            }}>< BreadcrumbPanel {...this.state.panelProps} /></Popup>;
        }
    }
    render() {
        let endStep = this.props.steps[this.props.steps.length - 1];
        let steps:any[] =[];
        for(let step of this.props.steps){
                steps.push(<Link
                        key={steps.length}
                        title={step.title}
                        value={step}
                        disabled={this.props.disabled}
                        className="s_breadcrumb_step_link"
                        onClick={this.handleClick} />);
                if(step != endStep){
                    steps.push(<Icon key={steps.length + "_sep"} className="s_breadcrumb_sep" name="next" />);
                }  
        }
        return <nav className="s_breadcrumb">
            {steps}
            {this.renderPanel()}
        </nav>;
    }
}*/