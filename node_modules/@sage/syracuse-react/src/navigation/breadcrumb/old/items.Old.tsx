"use strict";
/*import * as React from 'react';
import { SitemapSubmodule } from '../../sitemap/groups';
import { SitemapBlock, SitemapMenu, setMenuDescription, ISitemapItem } from '../../sitemap/items';
import Scrollbar from '../../../common/scroll/scrollbar/scrollbar';
import { Link } from '../../../link/link';

interface IItemsProps {
    submodule: SitemapSubmodule,
    blockIds?: string[]
}

export class Items extends React.Component<IItemsProps, {}>{
    render() {
        let body = this.props.blockIds ? <BlockBody {...this.props} /> : <SubmoduleBody submodule={this.props.submodule} />;
        if (this.props.blockIds) {
            body = <BlockBody {...this.props} />;
        }
        else {
            body = <SubmoduleBody submodule={this.props.submodule} />;
        }
        return <div className="s_breadcrumb_items">
            <Scrollbar>
                {body}
            </Scrollbar>
        </div>;
    }
}
class BlockBody extends React.Component<IItemsProps, {}>{
    findBlock(children: ISitemapItem[], blockId: string): SitemapBlock {
        if (children) {
            for (let child of children) {
                if (child.variantKey == "menuBlock") {
                    let menuBlock: SitemapBlock = child as SitemapBlock;
                    if (menuBlock.$uuid == blockId) {
                        return menuBlock;
                    }
                }
            }
        }
    }
    render() {
        let children = this.props.submodule.children;
        let menuBlock: SitemapBlock;
        for (let blockId of this.props.blockIds) {
            menuBlock = this.findBlock(children, blockId);
            children = menuBlock && menuBlock.children;
        }
        return <ul className="s_breadcrumb_blocksubmodule_row">
            {menuBlock && <MenuBlock menuBlock={menuBlock} />}
        </ul>;
    }
}

class SubmoduleBody extends React.Component<{
    submodule: SitemapSubmodule
}, {}>{
    render() {
        let cols: any[][] = [[], [], []];
        let colIndex = 0;
        for (let item of this.props.submodule.children) {
            let col = cols[colIndex];
            if (item.variantKey == "menuBlock") {
                let menuBlock: SitemapBlock = item as SitemapBlock;
                col.push(<MenuBlock key={menuBlock.$uuid} menuBlock={menuBlock} />);
            }
            else {
                let menu: SitemapMenu = item as SitemapMenu;
                col.push(<Menu key={menu.$uuid} menu={menu} />);
            }
            if ((++colIndex) == 3) {
                colIndex = 0;
            }
        }
        return <div className="s_breadcrumb_submodule_row">
            <ul className="s_breadcrumb_submodule_col">{cols[0]}</ul>
            <ul className="s_breadcrumb_submodule_col" >{cols[1]}</ul>
            <ul className="s_breadcrumb_submodule_col">{cols[2]}</ul>
        </div>;
    }
}

class MenuBlock extends React.Component<{
    menuBlock: SitemapBlock
}, {}>{
    render() {
        let children: any[] = []
        for (let item of this.props.menuBlock.children) {
            if (item.variantKey == "menuBlock") {
                let menuBlock: SitemapBlock = item as SitemapBlock;
                children.push(<MenuBlock key={menuBlock.$uuid} menuBlock={menuBlock} />);
            }
            else {
                let menu: SitemapMenu = item as SitemapMenu;
                children.push(<Menu key={menu.$uuid} menu={menu} />);
            }
        }
        return <li className="s_breadcrumb_menublock">
            <div className="s_breadcrumb_menublock_title">{this.props.menuBlock.title}</div>
            <ul className="s_breadcrumb_menublock_body">
                {children}
            </ul>
        </li>;
    }
}

class Menu extends React.Component<{
    menu: SitemapMenu
}, {}>{
    handleClick = (value: any, event: MouseEvent) => {
        this.props.menu.click(event);
    }
    render() {
        return <li className="s_breadcrumb_menu">
            <Link
                className="s_breadcrumb_menu_link"
                title={this.props.menu.title}
                description={setMenuDescription(this.props.menu.dataset)}
                onClick={this.handleClick}
            />
        </li>;
    }
}*/