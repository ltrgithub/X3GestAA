/*"use strict";
import * as React from 'react';
import { SitemapModule, SitemapSubmodule } from '../../sitemap/groups';
import { Groups } from './groups.Old';
import { Items } from './items.Old';
import * as Events from '../../../event/events';
import * as Dom from '../../../utility/html/dom';

export interface IBreadcrumbPanelProps {
    moduleId?: string,
    submoduleId?: string,
    blockIds?: string[]
    modules: SitemapModule[]
}
interface IState {
    selectedModule?: SitemapModule,
    selectedSubmodule?: SitemapSubmodule
}

export class BreadcrumbPanel extends React.Component<IBreadcrumbPanelProps, IState>{
    private panel: HTMLElement;
    private selectedSubmodulesMap: any = {};
    constructor(props: any, context: any) {
        super(props, context);
        let selectedModule: SitemapModule;
        let selectedSubmodule: SitemapSubmodule;
        if (this.props.moduleId) {
            for (let module of this.props.modules) {
                if (module.$uuid == this.props.moduleId) {
                    selectedModule = module;
                    break;
                }
            }
            if (selectedModule && this.props.submoduleId) {
                for (let submodule of selectedModule.submodules) {
                    if (submodule.$uuid == this.props.submoduleId) {
                        selectedSubmodule = submodule;
                        break;
                    }
                }
            }
        }
        if (!selectedModule) {
            selectedModule = this.props.modules[0];
        }
        this.state = {
            selectedModule: selectedModule,
            selectedSubmodule: selectedSubmodule || this.getDefaultSubmodule(selectedModule)
        };
    }
    getDefaultSubmodule(module?: SitemapModule): SitemapSubmodule {
        let submodule: any;
        if (module) {
            submodule = this.selectedSubmodulesMap[module.$uuid] || module.submodules[0];
        }
        return submodule || null;
    }
    handleSelectModule = (module: SitemapModule) => {
        this.setState({
            selectedModule: module,
            selectedSubmodule: this.getDefaultSubmodule(module)
        });
    }
    handleSelectSubmodule = (submodule: SitemapSubmodule) => {
        this.setState({
            selectedSubmodule: this.selectedSubmodulesMap[this.state.selectedModule.$uuid] = submodule
        });
    }
    resize = () => {
        if (this.panel) {
            this.panel.style.maxHeight = (Dom.site.body.height * 0.65) + "px";
        }
    }
    componentDidMount() {
        Events.resize.subscribe(this.resize);
    }
    componentDidUpdate() {
        this.resize();
    }
    componentWillUnmount() {
        Events.resize.unsubscribe(this.resize);
        this.panel = null;
    }
    renderModules() {
        if (!this.props.moduleId) {
            return <Groups
                selected={this.state.selectedModule}
                groups={this.props.modules}
                onSelect={this.handleSelectModule} />;
        }
    }
    renderSubmodules() {
        if (!this.props.submoduleId && this.state.selectedModule) {
            return <Groups
                selected={this.state.selectedSubmodule}
                groups={this.state.selectedModule.submodules}
                onSelect={this.handleSelectSubmodule} />;
        }
    }
    renderSubmoduleBody() {
        if (this.state.selectedSubmodule) {
            return <Items submodule={this.state.selectedSubmodule} blockIds={this.props.blockIds} />;
        }
    }
    render() {
        if (this.state && this.state.selectedModule) {
            return <div className="s_breadcrumb_panel" ref={(node) => this.panel = node}>
                {this.renderModules()}
                {this.renderSubmodules()}
                {this.renderSubmoduleBody()}
            </div>
        }
        else {
            return <noscript />;
        }
    }
}*/