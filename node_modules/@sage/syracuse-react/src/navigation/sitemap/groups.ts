"use strict";
import Store from '../../dataStore/store';
import { IEntity, ISitemapItem, SitemapMenu, SitemapBlock } from './items';
export type VariantKey = "menuItem" | "menuBlock";

export interface IDataSubmodule extends IEntity {
    $url: string,
    code: string,
    items: IEntity[]
}
export interface IDataModule extends IEntity {
    $url: string,
    code: string,
    submodules: IDataSubmodule[]
}
export interface ISitemapEntity {
    dataset: IEntity,
    navParent?: any,
    articleParent?: any,
    page?: any
}


export class SitemapSubmodule extends Store implements ISitemapEntity {
    navParent?: any;
    articleParent?: any;
    boxParent?: any;
    page?: any;
    selected: boolean;
    collapsed: boolean;
    children: ISitemapItem[];
    constructor(mod: SitemapModule, dataset: any) {
        super(mod.$prototype.$properties.submodules.$item, dataset || {});
        this.page = mod.page;
        this.navParent = this.articleParent = this.boxParent = mod;
        this.addChildren(this.dataset.items, this);
    }
    addChildren(items: any[], parent: any) {
        parent.children = [];
        if (items.length) {
            for (let item of items) {
                this.addChild(item, parent);
            }
        }
    }
    addChild(record: any, parent: any) {
        parent = parent || this;
        if (record.menuItem || record.menuBlock) {
            let child = new (record.menuItem ? SitemapMenu : SitemapBlock)(parent, record);
            parent.children.push(child);
            return child;
        }
    }
    get url(): string {
        return this.dataset.$url || this.$prototype.$url
    }
    get $uuid(): string {
        return this.dataset.$uuid;
    }
    get title(): string {
        return this.dataset.title || "";
    }
    findItem($uuid: string, parent?: any): ISitemapItem {
        parent = parent || this;
        let found;
        for (let item of parent.children) {
            if (item.$uuid == $uuid) {
                found = item;
            }
            else {
                found = item.children && this.findItem($uuid, item);
            }
            if (found) {
                return found;
            }
        }
    }
    dispose() {
        if (this.children) {
            for (let child of this.children) {
                child.dispose();
            }
            this.children = [];
        }
    }
}

export class SitemapModule extends Store implements ISitemapEntity {
    navParent: any;
    articleParent: any;
    boxParent: any;
    page: any;
    collapsed: boolean;
    selected: boolean;
    private _selectedSubmodule: SitemapSubmodule;
    private _submodules: SitemapSubmodule[] = [];

    constructor(page: any, dataset: any) {
        super(page.$prototype.$properties.modules.$item, dataset || {});
        this.navParent = this.articleParent = this.boxParent = this.page = page;
        if (this.dataset.submodules) {
            for (let submodule of this.dataset.submodules) {
                this._submodules.push(new SitemapSubmodule(this, submodule));
            }
        }
    }
    get submodules(): SitemapSubmodule[] {
        return this._submodules;
    }
    get url(): string {
        return this.dataset.$url || this.$prototype.$url
    }
    get $uuid(): string {
        return this.dataset.$uuid;
    }
    get title(): string {
        return this.dataset.title || "";
    }
    get selectedSubmodule(): SitemapSubmodule {
        if (!this._selectedSubmodule) {
            this._selectedSubmodule = this.submodules[0];
        }
        return this._selectedSubmodule;
    }
    set selectedSubmodule(submodule: SitemapSubmodule) {
        if (this._selectedSubmodule) {
            this._selectedSubmodule.selected = false;
        }
        (this._selectedSubmodule = submodule).selected = true;
    }
    dispose() {
        if (this._submodules) {
            for (let submodule of this._submodules) {
                submodule.dispose();
            }
        }
        this._selectedSubmodule = this._submodules = null;
    }
}