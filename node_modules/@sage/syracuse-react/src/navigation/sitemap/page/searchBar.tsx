"use strict";
import * as React from 'react';
import { Link } from '../../../link/link';
import { getLocalString } from '../../../culture/localString';

export interface ISearchBarProps {
    onSearch: (text: string) => void,
    onClearSearch: () => void,
    onSearchResultIterate: (text: string) => number,
    searchTotalResults: number
}

export class SearchBar extends React.Component<ISearchBarProps, {}> {
    private input: HTMLInputElement;
    private value: string;
    private searchTimeout: number;
    private currentIndex: number;

    constructor(props: any, context: any) {
        super(props, context);
        this.state = {};
        this.value = "";
        this.currentIndex = 0;

    }

    componentDidMount() {
        // this.input.value = this.value ? this.value : '';
        // this.input.focus();
    }
    componentWillUnmount() {
        //cleanup
        this.switchSearchTimer(false);
    }
    onChange = () => {
        this.value = this.input.value;
        //Add a "debouncer" so search runs after user pauses to type
        this.switchSearchTimer(true, 200);
    }

    onKeyPress = (ev: any) => {
        if (ev.key == 'Enter' && this.value.length > 0) {
            //Launch search
            this.props.onSearch(this.input.value);
        }
    }
    clear = () => {
        this.value = this.input.value = "";
        this.currentIndex = 0;
        this.props.onClearSearch();
    }

    search() {
        if (this.value.length > 0) {
            this.currentIndex = 0;
            this.props.onSearch(this.value);
        }
    }
    onIterate = (direction: string) => {
        this.currentIndex = this.props.onSearchResultIterate(direction);
        this.setState({});
    }

    switchSearchTimer(on: boolean, timeout?: number) {

        //Clear / Cancel any timeout that may be running
        this.searchTimeout && clearTimeout(this.searchTimeout);
        if (on) {
            this.searchTimeout = window.setTimeout(() => {
                this.searchTimeout = null;
                // this.search();
                if (this.value.length >= 3 || (this.value.length > 0 && this.value.charCodeAt(0) > 255)) {
                    this.search();
                } else {
                    this.props.onClearSearch();
                }
            }, timeout);
        }
        else {
            this.searchTimeout = null;
        }
    }


    render() {
        return <div className="s_sitemap_search_bar">
            <div className="s_sitemap_search_group">
                <input className="s_sitemap_search_input"
                    placeholder="Search the sitemap"
                    type="text"
                    spellCheck={false}
                    ref={(input) => { this.input = input; }}
                    onKeyPress={this.onKeyPress}
                    onChange={this.onChange} />
                <small className="s_sitemap_search_records">{this.props.searchTotalResults > 0 ? this.currentIndex + 1 : 0} of {this.props.searchTotalResults}</small>
                <Link className="s_sitemap_search_link nav"
                    disabled={this.props.searchTotalResults > 0 ? false : true}
                    icon="dir_down"
                    onClick={() => this.onIterate('next')}
                    title={getLocalString("editField_cancel")} />
                <Link className="s_sitemap_search_link nav"
                    disabled={this.props.searchTotalResults > 0 ? false : true}
                    icon="dir_up"
                    onClick={() => this.onIterate('prev')}
                    title={getLocalString("editField_cancel")} />
                <Link className="s_sitemap_search_link search_close"
                    icon={this.value.length > 0 ? "close" : "magnifying_glass"}
                    onClick={this.clear}
                    disabled={this.value.length > 0 ? false : true}
                    title={getLocalString("editField_cancel")} />
            </div>
        </div>;
    }
}
