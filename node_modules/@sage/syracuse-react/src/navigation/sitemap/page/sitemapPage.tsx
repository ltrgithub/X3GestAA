"use strict";


import * as React from 'react';
import { Link } from '../../../link/link';
import { SitemapModulesBar } from './sitemapModulesBar';
import Scrollbar from '../../../common/scroll/scrollbar/scrollbar';
import { Module } from './module';
import { getLocalString } from '../../../culture/localString';
import { ISitemapPageProps } from './props';
import { SitemapModule } from '../groups';
import { SearchBar } from './searchBar';
import * as transitionHelper from '../../../utility/html/transitionHelper';
import './sitemapPage.less';

export default class SitemapPage extends React.Component<ISitemapPageProps, {}>{
	bar: SitemapModulesBar;
	searchBar: SearchBar;
	pageNode: HTMLElement;

	refreshBar() {
		this.bar && this.bar.forceUpdate();
	}

	componentWillUnmount() {
		this.bar = null;
	}

	rollUp(): Promise<void> {
		return transitionHelper.removeClassWithAnimation(this.pageNode, 's_sitemap_page_moving_in', 300).then(() => {
			this.searchBar.clear();
		});
	}

	rollDown(): Promise<void> {
		return transitionHelper.addClassWithAnimation(this.pageNode, 's_sitemap_page_moving_in', 300);
	}

	renderCollapseLink(collapse: boolean) {
		return <Link
			title={getLocalString(collapse ? "sitemap_collapseAll" : "sitemap_expandAll")}
			className="s_sitemap_button"
			value={collapse}
			onClick={this.props.onCollapseAllModules}
		/>;
	}
	render() {
		//Header text to be reintroduced when search functionality is implemented
		if (this.props.modules) {
			return <article className="s_sitemap_page" ref={(pageNode) => this.pageNode = pageNode}>
				<header className='s_sitemap_page_header'>
					<div className='s_sitemap_page_title'>{getLocalString("sitemap_title").replace("{name}", this.props.userFirstName)}</div>
					<SearchBar
						ref={(searchBar) => { this.searchBar = searchBar }}
						onSearch={this.props.onSearch}
						onClearSearch={this.props.onClearSearch}
						onSearchResultIterate={this.props.onSearchResultIterate}
						searchTotalResults={this.props.searchResult.searchTotalResults} />
					<div className="s_sitemap_buttons">
						{this.renderCollapseLink(true)}
						{this.renderCollapseLink(false)}
					</div>
				</header>
				<div className="s_sitemap_page_body">
					<SitemapModulesBar
						ref={(bar) => this.bar = bar}
						modules={this.props.modules}
						onSelectModule={this.props.onSelectModule}
						searchFilter={this.props.searchResult.searchFilter} />
					<div className="s_sitemap_content" >
						<Scrollbar onScroll={this.props.onModuleBodyScroll} cssAxe="s_sitemap_scrollbar_axe">
							<ul className="s_sitemap_modules" id="s_sitemap_modules">
								{this.props.modules.map((mod) =>
									<Module
										key={mod.$uuid}
										module={mod}
										onMenuClick={this.props.onMenuClick}
										onSwitchBookmark={this.props.onSwitchBookmark}
										onModuleCollapse={this.props.onModuleCollapse}
										onSubModuleCollapse={this.props.onSubModuleCollapse}
										onMenuBlockCollapse={this.props.onMenuBlockCollapse}
										searchFilter={this.props.searchResult.searchFilter} />)}
							</ul>
						</Scrollbar>
					</div>
				</div>
			</article>;
		}
		return <noscript />;
	}
}