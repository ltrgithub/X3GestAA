import TestHelper from '../../../../__tests__/testHelper'

import * as React from 'react'
import * as Enzyme from 'enzyme'
import {SitemapModulesBar, ISitemapModulesBar} from '../sitemapModulesBar'
import {SitemapModule} from '../../groups'
import {Link} from '../../../../link/link'

describe("SitemapModulesBar", () => {

    let modules: SitemapModule[]

    beforeEach(() => {
        modules = TestHelper.fixtures.getSitemap().modules
    })

    describe("Snapshots", () => {

        const render: (props: ISitemapModulesBar) => Cheerio =
            (props) => Enzyme.render(<SitemapModulesBar {...props} />)

        let onSelectModule: () => void

        beforeEach(() => {
            onSelectModule = jest.fn()
        })

        it("should compare snapshots for no module selected", () => {
            expect(render({modules, onSelectModule})).toMatchSnapshot()
        })

        it("should compare snapshots for first module selected", () => {
            modules[0].selected = true
            expect(render({modules, onSelectModule})).toMatchSnapshot()
        })

        it("should compare snapshots for second module selected)", () => {
            modules[1].selected = true
            expect(render({modules, onSelectModule})).toMatchSnapshot()
        })

    })

    describe("Interactions", () => {
        let wrapper: Enzyme.ReactWrapper<SitemapModulesBar, any>
        let onSelectModuleSpy: any

        beforeEach(() => {
            const props: ISitemapModulesBar = {
                onSelectModule: jest.fn(),
                modules: modules
            }
            onSelectModuleSpy = jest.spyOn(props, "onSelectModule")
            wrapper = Enzyme.mount(<SitemapModulesBar {...props} />)
        })

        it("renderModule -- coverage purpose test only , no detected usages!", () => {
            expect((wrapper.instance() as any).renderModule(modules[0])).toBeUndefined()
        })

        it("should call select module handler on link click", () => {

            expect(onSelectModuleSpy).not.toHaveBeenCalled()
            wrapper.find(Link).first().simulate('click')
            expect(onSelectModuleSpy).toHaveBeenCalledTimes(1)
            expect(onSelectModuleSpy.mock.calls[0][0]).toBe(modules[0])

        })

        it("should apply proper CSS class to selected module", () => {
            modules[0].selected = true
            wrapper.update()
            let items = wrapper.find(".s_sitemap_bar_module")
            expect(items.at(0)).toHaveClassName('s_selected')
            expect(items.at(1)).not.toHaveClassName('s_selected')
            modules[0].selected = false
            modules[1].selected = true
            wrapper.update()
            expect(items.at(0)).not.toHaveClassName('s_selected')
            expect(items.at(1)).toHaveClassName('s_selected')
        })

    })
})