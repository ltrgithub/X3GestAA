import TestHelper from '../../../../__tests__/testHelper';
import * as React from 'react';
import { shallow, mount, render } from 'enzyme';
import { renderToJson } from 'enzyme-to-json';
import { SitemapModule } from '../../groups';
import { ISitemapSearch } from '../props';
import SitemapPage from '../sitemapPage';

describe('Test Suite for Sitemap', function () {
    let modules: SitemapModule[];
    let search: ISitemapSearch;

    beforeEach(() => {
        const sitemap = TestHelper.fixtures.getSitemap();
        const store = TestHelper.fixtures.getStoreWithDataset('sitemap_data');
        modules = [];
        search = {
            searchFilter: "",
            searchRegex: new RegExp(""),
            searchCurrentItem: null,
            searchCurrentIndex: 0,
            searchTotalResults: 0
        };

        if (store.dataset.modules) {
            for (let mod of store.dataset.modules) {
                modules.push(new SitemapModule(sitemap, mod));
            }
            modules[0].selected = true;
        }

    });

    it('<SitemapPage /> compare to snapshot', () => {
        const wrapper = render(<SitemapPage
            userFirstName={'FirstName'}
            modules={modules}
            onMenuClick={() => { }}
            onModuleBodyScroll={() => { }}
            onModuleCollapse={() => { }}
            onSubModuleCollapse={() => { }}
            onMenuBlockCollapse={() => { }}
            onSwitchBookmark={() => { }}
            onSelectModule={(module: SitemapModule) => { }}
            onCollapseAllModules={() => { }}
            onSearch={() => { }}
            onClearSearch={() => { }}
            onSearchResultIterate={() => { return 0; }}
            searchResult={search}
        />
        );
        const json = renderToJson(wrapper);
        expect(json).toMatchSnapshot();
    });
});
