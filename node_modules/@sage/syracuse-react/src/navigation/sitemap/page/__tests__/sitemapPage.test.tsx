import TestHelper from '../../../../__tests__/testHelper';
import * as React from 'react';
import { shallow, mount, render } from 'enzyme';
import { renderToJson } from 'enzyme-to-json';
import { SitemapModule } from '../../groups';
import SitemapPage from '../sitemapPage';

/* const sitemap_prototype = require('./sitemap_prototype.json');
const sitemap_dataset = require('./sitemap_dataset.json'); */

const sitemap = TestHelper.fixtures.getSitemap();
const store = TestHelper.fixtures.getStoreWithDataset('sitemap_data');
let modules: SitemapModule[] = [];
if (store.dataset.modules) {
    for (let mod of store.dataset.modules) {
        modules.push(new SitemapModule(sitemap, mod));
    }
    modules[0].selected = true;
}

describe('Test Suite for Sitemap', function () {

    // it('use jsdom in this test file', () => {
    // 	const element = document.createElement('div');
    // 	expect(element).not.toBeNull();
    // });

    it('<SitemapPage /> compare to snapshot', () => {
        const wrapper = render(<SitemapPage
            userFirstName={'FirstName'}
            modules={modules}
            onMenuClick={() => { }}
            onModuleBodyScroll={() => { }}
            onModuleCollapse={() => { }}
            onSubModuleCollapse={() => { }}
            onMenuBlockCollapse={() => { }}
            onSwitchBookmark={() => { }}
            onSelectModule={(module: SitemapModule) => { }}
            onCollapseAllModules={() => { }} />
        );
        const json = renderToJson(wrapper);
        expect(json).toMatchSnapshot();
    });
});

// function deserialize(json: any, clazz: any) {
// 	var instance = new clazz();
// 	for (var prop in json) {
// 		if (!json.hasOwnProperty(prop)) {
// 			continue;
// 		}
// 		if (typeof json[prop] === 'object') {
// 			instance[prop] = deserialize(json[prop], instance[prop]);
// 		} else {
// 			instance[prop] = json[prop];
// 		}
// 	}
// 	return instance;
// }

// let modules: SitemapModule[] = deserialize(modulesData, SitemapModule)
// console.log(modules)
// it('<ChoiceField /> hidden renders correctly', () => {
// 	expect(modules).toBeTruthy();
// });




// var document: Document = jsdom("<html></html>");

//const sitemap = new Sitemap(prototype, dataset);
// const store = new Store(null, dataset);
// let modules: SitemapModule[];
// if (store.dataset.modules) {
// 	for (let mod of store.dataset.modules) {
// 		modules.push(new SitemapModule(this, mod));
// 	}
// }

// it('<ChoiceField /> hidden renders correctly', () => {
// 	expect(store).toBeTruthy();
// });

// it('<ChoiceRadios /> compare to napshot', () => {
// 	const wrapper = render(<SitemapModulesDisplay modules={modules as SyraModule[]} />);
// 	const json = renderToJson(wrapper);
// 	expect(json).toMatchSnapshot();
// });