import TestHelper from '../../../../__tests__/testHelper';
import * as React from 'react';
import * as Enzyme from 'enzyme';
import { MenuBlock } from '../menuBlock';
import { SitemapBlock } from '../../items';
import { IMenuBlockProps } from '../props';

describe('MenuBlock', function () {

    let defaultProps: IMenuBlockProps

    beforeEach(() => {
        const menuBlock: SitemapBlock = (TestHelper.fixtures.getSitemap().modules[0].submodules[0].children[1] as SitemapBlock);

        defaultProps = {
            menuBlock: (menuBlock as SitemapBlock),
            onMenuClick: () => { },
            onSwitchBookmark: () => { },
            onMenuBlockCollapse: () => { },
            searchFilter: ""
        }
    });

    describe('Snapshots', function () {
        const render: (props: IMenuBlockProps) => Cheerio =
            (props) => Enzyme.render(<MenuBlock {...props} />);

        it("should compare to not highlighted MenuBlock snapshot", () => {
            let wrapper = render({ ...defaultProps });
            expect(wrapper).toMatchSnapshot();
        });

        it("should compare to highlighted MenuBlock snapshot", () => {
            const wrapper = render({ ...defaultProps, searchFilter: "sett" });
            expect(wrapper).toMatchSnapshot();
        });
    });

    describe('Interactions', () => {
        const mount: (props: IMenuBlockProps) => Enzyme.ReactWrapper<IMenuBlockProps, any> =
            (props) => Enzyme.mount(<MenuBlock {...props} />);

        it("should highlight the search string within the menu title if it matches", () => {
            const wrapper = mount({ ...defaultProps, searchFilter: "sett" });
            let iconContent = wrapper.find('li .s_sitemap_menublock_link i').first().text();
            expect(wrapper.find('li .s_sitemap_menublock_link').first().text().replace(iconContent, '')).toBe('Settings');
            expect(wrapper.find('li .s_sitemap_menublock_link span').length).toBe(1);
            expect(wrapper.find('li .s_sitemap_menublock_link span').first()).toHaveClassName('s_sitemap_highlight_text');
            expect(wrapper.find('li .s_sitemap_menublock_link span').text()).toBe("Sett");
        });

        it("should not highlight text if no search string is supplied", () => {
            let wrapper = mount({ ...defaultProps });
            let iconContent = wrapper.find('li .s_sitemap_menublock_link i').first().text();
            expect(wrapper.find('li .s_sitemap_menublock_link').first().text().replace(iconContent, '')).toBe('Settings');
            expect(wrapper.find('li .s_sitemap_menublock_link span').length).toBe(0);

        });

        it("should not highlight text if the search string deosn't match", () => {
            let wrapper = mount({ ...defaultProps, searchFilter: "notfound" });
            let iconContent = wrapper.find('li .s_sitemap_menublock_link i').first().text();
            expect(wrapper.find('li .s_sitemap_menublock_link').first().text().replace(iconContent, '')).toBe('Settings');
            expect(wrapper.find('li .s_sitemap_menublock_link span').length).toBe(0);
        });
    });
});
