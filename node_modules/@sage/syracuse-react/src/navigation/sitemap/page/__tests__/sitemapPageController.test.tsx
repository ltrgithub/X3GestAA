const testSetup = require('./testSetup')
testSetup.setUp();
import * as React from 'react';
import * as Enzyme from 'enzyme';
import { renderToJson } from 'enzyme-to-json';
import { SitemapModule } from '../../groups';
import { Sitemap } from '../../sitemap';
import { SitemapMenu } from '../../items';
import Store from '../../../../dataStore/store';
import { SitemapPageController } from '../sitemapPageController';
import { Profile } from '../../../../profile/profile';
import { Bookmarks } from '../../../bookmark/bookmarks';
import { syra_menus } from '../../../../syra/utility/syra_menus';
const sitemap_prototype = require('./sitemap_prototype.json');
const sitemap_dataset = require('./sitemap_dataset.json');
const profile_protoype = require('./profile_protoype.json');
const profile_data = require('./profile_data.json');
const bookmark_data = require('./bookmark_data.json');

describe('sitemapPageController', function () {
    let profile: Profile;

    beforeEach(() => {
        profile = new Profile(profile_protoype, profile_data);
        let sitemap = new Sitemap(sitemap_prototype, sitemap_dataset);
        let store = new Store(null, sitemap_dataset);
        let bookmarks = new Bookmarks(bookmark_data, profile.selectedEndpoint);

        let modules: SitemapModule[] = [];
        if (store.dataset.modules) {
            for (let mod of store.dataset.modules) {
                modules.push(new SitemapModule(sitemap, mod));
            }
            modules[0].selected = true;
        }
        profile.sitemap = sitemap;
        profile.bookmarks = bookmarks;
        profile.dataset.user = { firstName: 'James' };
    });

    it('should compare to snapshot', () => {
        const wrapper = Enzyme.render(<SitemapPageController
            profile={profile} />
        );

        expect(wrapper).toMatchSnapshot();
    });

    describe('Interacions', () => {
        let component: Enzyme.ReactWrapper<SitemapPageController, any>;

        beforeEach(() => {
            component = Enzyme.mount(<SitemapPageController
                profile={profile} />
            );
        });

        afterEach(() => {
            component.instance();
            component.unmount();
            component = null;
            jest.resetModules();
            jest.resetModuleRegistry();
            jest.resetAllMocks();
        });

        it('should toggle all underlying items on module header click', () => {
            expect(component.find('.s_sitemap_menu_link').length).toBe(70);
            let moduleContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

            // First module
            moduleContainer = component.find('.s_sitemap_module').at(0);
            expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(69);
            moduleContainer.find('.s_sitemap_module_link').simulate('click');
            expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(0);

            // Second module
            moduleContainer = component.find('.s_sitemap_module').at(1);
            expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(1);
            moduleContainer.find('.s_sitemap_module_link').simulate('click');
            expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(0);

            expect(component.find('.s_sitemap_menu_link').length).toBe(0);
        });

        it('should toggle all underlying items on submodule header click', () => {
            expect(component.find('.s_sitemap_menu_link').length).toBe(70);

            let subModuleContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

            // First submodule
            subModuleContainer = component.find('.s_sitemap_submodule').at(0);
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(26);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(26);

            // Second submodule
            subModuleContainer = component.find('.s_sitemap_submodule').at(1);
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(9);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(9);

            // Third submodule
            subModuleContainer = component.find('.s_sitemap_submodule').at(2);
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(12);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
            subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
            expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(12);
        });

        it('should toggle all underlying items on menu block header click', () => {
            expect(component.find('.s_sitemap_menu_link').length).toBe(70);

            let menuBlockContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

            // First menu
            menuBlockContainer = component.find('.s_sitemap_menublock').at(0);
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(3);
            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(3);
/*
            // Second menu
            menuBlockContainer = component.find('.s_sitemap_menublock').at(3);

            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(6);
            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(6);

            // Third menu
            menuBlockContainer = component.find('.subModuleContainer').at(2);
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(12);
            menuBlockContainer.find('.s_sitemap_menublock').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(12); */
        });

        it('should add "href" attribute to link elements to support new window browser operations', () => {
            let menuLink = component.find('.s_sitemap_menu_link').at(10);
            expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Global settings');
            expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/settings(code eq \'settings\')?representation=setting.$details');

            menuLink = component.find('.s_sitemap_menu_link').at(20);
            expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Roles');
            expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/roles?representation=role.$query');


            menuLink = component.find('.s_sitemap_menu_link').at(44);
            expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Menu Modules');
            expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/menuModules?representation=menuModule.$query');
        });

        it('should trigger a navigation event on menu link click', () => {
            let spy = jest.spyOn(syra_menus.click, 'fire');
            let menuLink = component.find('.s_sitemap_menu_link').at(0);

            expect(spy).not.toBeCalled();
            menuLink.simulate('click');
            expect(spy).toHaveBeenCalledTimes(1);

            expect(spy.mock.calls[0][0].menu).toBeInstanceOf(SitemapMenu);

            spy.mockClear();
            spy.mockRestore();
        });
    });
});

