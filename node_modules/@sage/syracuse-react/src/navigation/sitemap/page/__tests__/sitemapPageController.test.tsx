import TestHelper from '../../../../__tests__/testHelper';
TestHelper.init();

import * as React from 'react';
import * as Enzyme from 'enzyme';
import { SitemapMenu } from '../../items';
import { SitemapPageController } from '../sitemapPageController';
import { Profile } from '../../../../profile/profile';
import * as BookmarkController from '../../../bookmark/bookmarkController';
import { syra_menus } from '../../../../syra/utility/syra_menus';

describe('sitemapPageController', function () {
    let profile: Profile;
    let component: Enzyme.ReactWrapper<SitemapPageController, any>;

    beforeEach(() => {
        profile = TestHelper.fixtures.getProfilePopulated();

        TestHelper.fixtures.getProfile();


        let div = document.createElement('div');
        div.style.height = '300px';
        div.style.width = '1024px';



        component = Enzyme.mount(<SitemapPageController profile={profile} />, {
            attachTo: div
        });
    });

    afterEach(() => {
        component.unmount();
        component = null;
        jest.resetModules();
        jest.resetModuleRegistry();
        jest.resetAllMocks();
    });

    it('should compare to snapshot', () => {
        let component = Enzyme.render(<SitemapPageController
            profile={profile} />
        );
        expect(component).toMatchSnapshot();
    });

    it('should add "href" attribute to link elements to support new window browser operations', () => {
        let menuLink = component.find('.s_sitemap_menu_link').at(10);
        expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Global settings');
        expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/settings(code eq \'settings\')?representation=setting.$details');

        menuLink = component.find('.s_sitemap_menu_link').at(20);
        expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Roles');
        expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/roles?representation=role.$query');


        menuLink = component.find('.s_sitemap_menu_link').at(44);
        expect(menuLink.getDOMNode().getAttribute('aria-label')).toBe('Menu Modules');
        expect(decodeURIComponent(menuLink.getDOMNode().getAttribute('href'))).toBe('?url=/sdata/syracuse/collaboration/syracuse/menuModules?representation=menuModule.$query');
    });

    describe('Interacions', () => {

        it('should trigger a navigation event on menu link click', () => {
            let spy = jest.spyOn(syra_menus.click, 'fire');
            let menuLink = component.find('.s_sitemap_menu_link').at(0);

            expect(spy).not.toBeCalled();
            menuLink.simulate('click');
            expect(spy).toHaveBeenCalledTimes(1);

            expect(spy.mock.calls[0][0].menu).toBeInstanceOf(SitemapMenu);

            spy.mockClear();
            spy.mockRestore();
        });

        describe('Bookmarks', () => {

            it('should display bookmark icon on hover', () => {
                expect(component.find('.s_sitemap_menu').length).toBe(70);

                let menuItem = component.find('.s_sitemap_menu').at(4);
                let bookmarkContainer = menuItem.find('.s_sitemap_bookmark').first();

                expect(bookmarkContainer).not.toHaveClassName('s_sitemap_bookmark_visble');
                menuItem.simulate('mouseEnter');
                expect(bookmarkContainer).toHaveClassName('s_sitemap_bookmark_visble');
                menuItem.simulate('mouseLeave');
                expect(bookmarkContainer).not.toHaveClassName('s_sitemap_bookmark_visble');
            });

            it('should save bookmark on star icon click', () => {
                let spy = jest.spyOn(BookmarkController, 'toggleMenu').mockImplementation(jest.fn());

                expect(component.find('.s_sitemap_menu').length).toBe(70);

                let menuItem = component.find('.s_sitemap_menu').at(0);
                let bookmarkContainer = menuItem.find('.s_sitemap_bookmark').first();

                expect(bookmarkContainer).not.toHaveClassName('s_sitemap_bookmark_visble');
                menuItem.simulate('mouseEnter');
                expect(spy).not.toBeCalled();
                bookmarkContainer.simulate('click');
                expect(spy).toHaveBeenCalledTimes(1);

                let firstCallArgs = spy.mock.calls[0];
                expect(firstCallArgs.length).toBe(5);
                expect(firstCallArgs[0]).toBe(profile);
                expect(firstCallArgs[1].url).toBe('/sdata/syracuse/collaboration/syracuse/hosts?representation=host.$query');
                expect(firstCallArgs[2]).toBe('Hosts');
                expect(firstCallArgs[3]).toBe('sitemap_entity: hosts');

                spy.mockClear();
            });

            it('should change the bookmark state after a successful operation', () => {
                let spy = jest.spyOn(BookmarkController, 'toggleMenu');
                spy.mockImplementation(jest.fn());

                expect(component.find('.s_sitemap_menu').length).toBe(70);

                let menuItem = component.find('.s_sitemap_menu').at(4);
                let bookmarkContainer = menuItem.find('.s_sitemap_bookmark').first();

                expect(bookmarkContainer).not.toHaveClassName('s_sitemap_bookmark_visble');
                menuItem.simulate('mouseEnter');
                expect(spy).not.toBeCalled();
                bookmarkContainer.simulate('click');
                expect(spy).toHaveBeenCalledTimes(1);

                let firstCallArgs = spy.mock.calls[0];
                expect(firstCallArgs.length).toBe(5);
                expect(firstCallArgs[4] instanceof Function).toBe(true);

                expect(bookmarkContainer.find('i').text()).toBe('star_empty');
                firstCallArgs[4]();
                component.update();
                //expect(bookmarkContainer.find('i').text()).toBe('star');

                spy.mockClear();
                spy.mockRestore();
            });
        });

        describe('Toggle items', () => {

            it('should toggle all items using the "collapse all" / "expand all" buttons', () => {
                let collapseAllButton = component.find('.s_sitemap_button').at(0);
                let expandAllButton = component.find('.s_sitemap_button').at(1);
                expect(component.find('.s_sitemap_menu_link').length).toBe(70);
                expect(collapseAllButton.getDOMNode().getAttribute('aria-label')).toBe('sitemap_collapseAll');
                expect(expandAllButton.getDOMNode().getAttribute('aria-label')).toBe('sitemap_expandAll');

                collapseAllButton.simulate('click');

                expect(component.find('.s_sitemap_menu_link').length).toBe(0);

                expandAllButton.simulate('click');

                expect(component.find('.s_sitemap_menu_link').length).toBe(70);
            });

            it('should toggle all underlying items on module header click', () => {
                expect(component.find('.s_sitemap_menu_link').length).toBe(70);
                let moduleContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

                // First module
                moduleContainer = component.find('.s_sitemap_module').at(0);
                expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(69);
                moduleContainer.find('.s_sitemap_module_link').simulate('click');
                expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(0);

                // Second module
                moduleContainer = component.find('.s_sitemap_module').at(1);
                expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(1);
                moduleContainer.find('.s_sitemap_module_link').simulate('click');
                expect(moduleContainer.find('.s_sitemap_menu_link').length).toBe(0);

                expect(component.find('.s_sitemap_menu_link').length).toBe(0);
            });

            it('should toggle all underlying items on submodule header click', () => {
                expect(component.find('.s_sitemap_menu_link').length).toBe(70);

                let subModuleContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

                // First submodule
                subModuleContainer = component.find('.s_sitemap_submodule').at(0);
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(26);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(26);

                // Second submodule
                subModuleContainer = component.find('.s_sitemap_submodule').at(1);
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(9);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(9);

                // Third submodule
                subModuleContainer = component.find('.s_sitemap_submodule').at(2);
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(12);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(0);
                subModuleContainer.find('.s_sitemap_submodule_link').simulate('click');
                expect(subModuleContainer.find('.s_sitemap_menu_link').length).toBe(12);
            });

            it('should toggle all underlying items on menu block header click', () => {
                expect(component.find('.s_sitemap_menu_link').length).toBe(70);

                let menuBlockContainer: Enzyme.ReactWrapper<Enzyme.HTMLAttributes, any>;

                // First menu
                menuBlockContainer = component.find('.s_sitemap_menublock').at(0);
                expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(3);
                menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
                expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
                menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
                expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(3);
                /*
                            // Second menu
                            menuBlockContainer = component.find('.s_sitemap_menublock').at(3);

                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(6);
                            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
                            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(6);

                            // Third menu
                            menuBlockContainer = component.find('.subModuleContainer').at(2);
                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(12);
                            menuBlockContainer.find('.s_sitemap_menublock').simulate('click');
                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(0);
                            menuBlockContainer.find('.s_sitemap_menublock_link').simulate('click');
                            expect(menuBlockContainer.find('.s_sitemap_menu_link').length).toBe(12); */
            });
        });
    });
});

