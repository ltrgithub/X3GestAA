"use strict";
import * as React from 'react';
import { Url } from '../../route/url';
import { route } from '../../route/route';
import { syra_form } from '../../syra/utility/syra_form';
import { Ajax, IAjaxProps, ajaxObserver, IAjaxObserver, AjaxResponse } from '../../ajax/ajax';
import { getLocalString } from '../../culture/localString';
import { alertBox } from '../../alert/alert';
import { AlertPage } from '../../alert/page/alertPage';
import * as Expression from '../../dataStore/expression';
import * as Sdata from '../../dataStore/sdata';

//TO remove when form will be managed by editController.tsx
export class SyraFormDataQueue {
    ajax: Ajax;
    private wcQueue: any;

    constructor(private page: any) {
        this.wcQueue = {};
        ajaxObserver.subscribe(this);
    }
    onAjaxSend = (ajax: Ajax) => {
        if (ajax.props.$etag && ajax.props.method == "PUT") {
            let previous = this.wcQueue[ajax.props.url];
            this.wcQueue[ajax.props.url] = ajax.props;
            if (previous) {
                return false;
            }
        }
        return true;
    }
    onAjaxResponse = (response: AjaxResponse) => {
        let ajax: Ajax = response.ajax;
        if (response.ok) {
            if (ajax.method == "PUT") {
                if (this.wcQueue && ajax.props && !this.page.disposed) {
                    let queue = this.wcQueue[ajax.props.url];
                    delete this.wcQueue[ajax.props.url];
                    if (queue && queue != ajax.props) {
                        queue.data.$etag = queue.$etag = response.data.$etag;
                        (new Ajax).send(queue);
                        return false;
                    }
                }
            }
        }
        else {
            if (this.wcQueue && ajax.props.$etag && !(this.page && !this.page.disposed)) {
                delete this.wcQueue[ajax.props.url];
            }
            switch (response.status) {
                case 412:
                    let page = response.ajax.props.page;
                    if (page && page.sendBag) {
                        page.sendBag.on412 = true;
                        return false; //cancel default error management
                    }
                    break;
            }
        }
        return true;
    }
    dispose() {
        ajaxObserver.unsubscribe(this);
        this.wcQueue = this.page = null;
    }
}