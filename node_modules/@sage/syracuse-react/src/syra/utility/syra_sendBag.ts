"use strict";
import * as syra_dataset from './syra_dataset';
import * as Delta from '../../dataStore/delta';

class SendBag {
    dataRecords: any[];
    $uuid: any;
    _findDataRecord($uuid: string) {
        if (this.dataRecords) {
            for (var ii = 0, jj = this.dataRecords.length; ii < jj; ii++) {
                var dataRecord = this.dataRecords[ii];
                if (dataRecord.$uuid == $uuid) {
                    return {
                        dataRecord: dataRecord,
                        dataRecordIndex: ii
                    };

                }
            }
        }
    }
    _ensureFullDataSet(list: any[]) {
        let firstUpdated = this.dataRecords[0];
        let listDataset = syra_dataset.ensure(list);
        this.dataRecords = [];
        for (let dataRecord of listDataset) {
            var saved;
            if (firstUpdated && firstUpdated.$uuid == dataRecord.$uuid) {
                delete firstUpdated.$index;
                saved = firstUpdated;
                firstUpdated = null;
            } else {
                saved = {
                    $uuid: dataRecord.$uuid
                };
            }
            this.dataRecords.push(saved);
        }
        if (firstUpdated && !firstUpdated.$isDeleted) {
            delete firstUpdated.$index;
            this.dataRecords.unshift(firstUpdated);
        }
    }
    ensureRecord(record: any) {
        let dataRecord = record.dataset;
        dataRecord = dataRecord.$singleField || dataRecord;
        let found = this._findDataRecord(dataRecord.$uuid);
        if (!found) {
            if (this.dataRecords.length > 0) {
                this._ensureFullDataSet(record.list);
                found = this._findDataRecord(dataRecord.$uuid);
                if (!found) {
                    found = {
                        dataRecord: {
                            $uuid: dataRecord.$uuid
                        },
                        dataRecordIndex: 0
                    };
                    this.dataRecords.unshift(found.dataRecord);
                }
            } else {
                found = {
                    dataRecord: {
                        $uuid: dataRecord.$uuid
                    },
                    dataRecordIndex: 0
                };
                if (record.$index !== undefined) {
                    found.dataRecord.$index = record.$index;
                }
                this.dataRecords.push(found.dataRecord);
            }
        }
        return found;
    }
    saveRecord(record: any, $bind: string, value: any, $index: number) {
        var found = this.ensureRecord(record);
        found.dataRecord[$bind] = value;
        if (this.dataRecords.length == 1) {
            found.dataRecord.$index = $index;
        }
    }
    cleanServerIndex(list: any[]) {
        list = Delta.clone(list);
        if (list && list.length) {
            for (var ii = 0, jj = list.length; ii < jj; ii++) {
                if (list[ii]) {
                    delete list[ii].$serverIndex;
                } else {
                    if (list[ii] == null) {
                        list.splice(ii, 1);
                        ii--;
                        jj--;
                    }
                }
            }
        }
        return list;
    }
    save(page: any, articleParent: any, $bind: string, value: any) {
        while (articleParent != page) {
            if (articleParent.isRecordArticle) {
                var list = articleParent.list || articleParent; //no list if filter record
                var listSendBag = get(list);
                if (list.$prototype.$type == "application/x-array") {
                    var dataRecords = syra_dataset.ensure(list);
                    if (list.isSingList) {
                        (listSendBag.dataRecords = dataRecords)[articleParent.getRecordIndex()] = value;
                    } else {
                        var found = list.findDataRecord(articleParent.$uuid);
                        if (found) {
                            var $field = list.$fields[$bind];
                            if ($field && $field.$type != "application/x-array") {
                                dataRecords[found.dataRecordIndex][$bind] = value;
                            }
                            listSendBag.saveRecord(articleParent, $bind, value, found.dataRecordIndex);
                        }
                    }
                    value = this.cleanServerIndex(listSendBag.dataRecords);
                } else {
                    if (list.$prototype.$type == "application/x-object") {
                        if (!listSendBag.dataset) {
                            listSendBag.dataset = syra_dataset.ensure(list);
                        }
                        listSendBag.dataset[$bind] = value;
                        if (list.$item.$variantItemKey) {
                            value = {};
                            value[list.$item.$variantItemKey] = listSendBag.dataset;
                        } else {
                            value = listSendBag.dataset;
                        }
                    }
                }
                $bind = list.$item.$bind;
                articleParent = list.articleParent;
            } else {
                if (articleParent.arrayLevel != "array") {
                    if (articleParent.dataset && articleParent.dataset.$uuid !== undefined) {
                        this.$uuid = articleParent.dataset.$uuid;
                    }
                    (this as any)[$bind] = value;
                } else {
                    value = this.cleanServerIndex(value);
                }
                articleParent = articleParent.articleParent;
            }
        }
        if (articleParent.dataset && articleParent.dataset.$uuid !== undefined) {
            this.$uuid = articleParent.dataset.$uuid;
        }
        (this as any)[$bind] = value;
    }
    dispose() {
        delete this.dataRecords;
    }
}


export function get(article: any, sender?: any) {
    let page = article.page;
    sender = sender || article.page;
    if (article.sendBag && !article.sendBag.on412 && sender.dataset.$etag != article.sendBag.$etag) {
        delete article.sendBag;
    }
    if (!article.sendBag) {
        article.sendBag = new SendBag();
        article.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
        if (article.isRecordDataset) {
            article.sendBag.dataRecords = [];
        }

    }
    if (article.sendBag.on412) {
        article.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
        delete article.sendBag.on412;
    }
    return article.sendBag;
};