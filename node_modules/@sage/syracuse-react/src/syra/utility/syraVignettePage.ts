"use strict";
import * as Sdata from '../../dataStore/sdata';
import { SyraAlertPage } from '../alert/syraAlertPage';
import { PageLoader, IPageLoadError } from '../../page/pageLoader';
import { syra_pageBuilder } from './syra_pageBuilder';
import * as Delta from '../../dataStore/delta';
import { Url } from '../../route/url';

export class SyraVignettePage {
    alert: SyraAlertPage;
    loader: PageLoader;
    constructor(vignettField: any) {
        let url = new Url(vignettField.$url || vignettField.$field.$location.$url);
        this.loader = new PageLoader(url);
        this.loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
            if (error) {
                if (vignettField.body) {
                    error.inVignette = true;
                    this.alert = new SyraAlertPage(vignettField.body, error);
                }
            }
            else {
                if (vignettField.$item) {
                    let $itemPage = {
                        urlSeg: url,
                        $representation: representation,
                        layoutSlot: vignettField.body,
                        $category: "vignette",
                        vignetteField: vignettField
                    }
                    let $vignette = vignettField.$item.$vignette;
                    let altVignetteKey: any;
                    if (vignettField.$url && vignettField.$field.$location.$url != vignettField.$url) {
                        let newSeg = new Url(vignettField.$url);
                        let sourceSeg = new Url(vignettField.$field.$location.$url);
                        if (newSeg.params.representation != sourceSeg.params.representation) {
                            $vignette = vignettField.$item.$altVignettes && vignettField.$item.$altVignettes[newSeg.params.representation];
                            altVignetteKey = newSeg.params.representation;
                            if (!$vignette && vignettField.$item.$vignette) {
                                $vignette = Delta.clone(vignettField.$item.$vignette);
                            }
                        }
                    }
                    if ($vignette) {
                        $itemPage.$representation.$article = $vignette;
                        delete $itemPage.$representation.$article.$menus;
                    }
                    syra_pageBuilder.load({
                        $itemPage: $itemPage,
                        success: (page: any) => {
                            vignettField.vignette = page;
                            vignettField.vignette.altVignetteKey = altVignetteKey;
                            vignettField._onVignetteRefresh && vignettField.onItemInOut(true);
                        }
                    });
                }
            }
        });
    }
    dispose() {
        this.loader && this.loader.dispose();
        this.alert && this.alert.dispose();
        this.alert = this.loader = null
    }
}