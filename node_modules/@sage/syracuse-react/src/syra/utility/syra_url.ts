"use strict";
import * as syra_expression from './syra_expression';
import * as Endpoint from '../../profile/endpoint';
import { QueryController } from '../../page/query/queryController';
import * as Delta from '../../dataStore/delta';
import { getLocalString } from '../../culture/localString';
import { Url } from '../../route/url';
import { PageLoader } from '../../page/pageLoader';
import * as SyraPageModal from '../../over/modal/page/syraPageModal';
import { showDiagnoses } from '../../alert/alert';

export function setHref(menu: any, record?: any, isExternal?: boolean) {
    if (menu.articleParent) {
        menu.$url = formatMenuUrl(menu.articleParent, menu, record);
    }
    menu.isNoSyracuseUrl = menu.$type == "html" || ((menu.$url.indexOf("http") >= 0 && menu.$url.indexOf(window.location.host) < 0));
    if (menu.$url.indexOf("$format=") >= 0) {
        menu.isNoSyracuseUrl = true;
    }
    if (!menu.isNoSyracuseUrl) {
        var page = menu.page;
        if (page && (page.$facet == "$details" || page.$facet == "$edit")) {
            if (menu.$url.indexOf("query") >= 0 && menu.page) {
                QueryController.complete(menu);
            }
        }
    }
    if (menu.domItem) {
        if (menu.isNoSyracuseUrl) {
            menu.href = menu.$url;
        }
        else {
            menu.href = (menu.$url.indexOf("?url=") >= 0) ? menu.$url : ("?url=" + encodeURIComponent(menu.$url));
        }
        menu.domItem.setAttribute("href", menu.href);
        if (isExternal || menu.isNoSyracuseUrl) {
            menu.domItem.setAttribute("target", menu.$target = (menu.$target || "blank"));
        }
    }
};

const _parameters = {
    openModal: function (article: any, values: any, $parameters: any, record: any, callback: any) {
        let props: SyraPageModal.IFormProps = {
            authoringDisabled: true,
            article: article,
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onPageLoaded: (page: any) => {
                page.isModalParameter = true;
                if ($parameters && $parameters.$url) {
                    let fields = page.boundFields;
                    if (fields) {
                        for (let key in values) {
                            var field = fields[key] && fields[key][0];
                            if (field) {
                                field.setValue(values[key]);
                                (window as any).syra_form.update(field, field.currentValue);
                            }
                        }
                    }
                }
            },
            onValidate: (page: any, modal: any) => {
                if (!($parameters && $parameters.$url)) {
                    if ((window as any).syra_form.validate(page)) { //no working pah, so no save server
                        modal.props.onServerSaved(page);
                        return false;
                    }
                    return false;
                }
                return true; //validate is done by save action 
            },
            onServerSaved: (page: any) => {
                let $properties = page.$prototype && page.$prototype.$properties;
                let fields = page.boundFields;
                for (let key in page.dataset) {
                    if (key.slice(0, 1) !== "$") {
                        let $field = $properties && $properties[key];
                        let field = fields && fields[key];
                        if ($field && field && field[0] && $field.$type === "application/x-reference" && field[0].currentValue && field[0].currentValue.$uuid) {
                            values[key] = page.boundFields[key][0].currentValue.$uuid;
                        }
                        else {
                            values[key] = page.dataset[key];
                        }
                    }
                }
                callback(values);
            },
            close: (isCanceled: boolean) => {
                if (isCanceled) {
                    callback(null, true); //input propoerties was canceled 
                }
                return true;
            }
        };
        if (!$parameters.$url) {
            let $prototype = Delta.clone($parameters);
            let $properties = $prototype.$properties || {};
            if (values) {
                let keys = Object.keys(values);
                for (var ii = keys.length - 1; ii >= 0; ii--) {
                    let bind = keys[ii];
                    $prototype[bind] = values[bind];
                    let $field = $properties[bind];
                    if ($field && $field.$type == "application/x-boolean") {
                        switch ($prototype[bind]) {
                            case "true":
                                $prototype[bind] = true;
                                break;
                            case "false":
                                $prototype[bind] = false;
                                break;
                        }
                    }
                }
            }
            if (article.$prototype && article.$prototype.$localization) {
                $prototype.$localization = article.$prototype.$localization;
            }
            $prototype.$title = $parameters.$title || getLocalString("siteParametersTitle");
            SyraPageModal.loadModal({
                $category: "page",
                $facet: "$edit",
                initData: values,
                $representation: {
                    $prototype: $prototype
                }
            }, props);
        }
        else {
            props.url = syra_expression.parse(article, $parameters.$url);
            props.method = $parameters.$method || "GET";
            SyraPageModal.openFormModal(props);
        }
    },
    openSelectModal: (article: any, values: any, $parameters: any, record: any, callback: any) => {
        SyraPageModal.openSelectModal({
            authoringDisabled: true,
            url: syra_expression.parse(article, ($parameters.$actions.$select || $parameters.$actions.$lookup).$url),
            onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses),
            onValidateSelection: (selected: any[]) => {
                if ($parameters.$actions.$select) {
                    values.$select = selected;
                    callback(values);
                }
                else {
                    //$parameters.$actions.$lookup
                    values.$select = selected[0].$uuid;
                    callback(values);
                }
            },
            close: (isCanceled: boolean) => {
                if (isCanceled) {
                    callback(null, true); //input properties was canceled 
                }
                return true;
            }
        });
    }
};


export function applyParameters(url: string, params: any) {
    let paramObj: any = {};
    let paramsStart = url.lastIndexOf("?");
    if (paramsStart >= 0) {
        var parts = url.slice(paramsStart + 1).split("&");
        for (let part of parts) {
            let valueStart = part.indexOf("=");
            paramObj[part.substring(0, valueStart)] = part.substring(valueStart + 1);
        }
        url = url.substring(0, paramsStart);
    }
    for (let key in params) {
        let param = params[key];
        if (param === null) {
            delete paramObj[key];
        }
        else {
            if (param !== undefined) {
                paramObj[key] = encodeURIComponent(param);
            }
        }
    }
    let paramString = "";
    for (let key in paramObj) {
        paramString += "&" + key + "=" + paramObj[key];
    }
    url += "?" + paramString.slice(1);
    return url;
};
/**************************  FORMAT   **********************************************/
export function formatParameters(article: any, $parameters: any, record: any, callback?: any) {
    let values: any = {};
    for (let prop in $parameters) {
        switch (prop) {
            case "$properties":
            case "$":
            case "$links":
            case "$actions":
                break;
            default:
                let expression = $parameters[prop];
                if (expression && typeof (expression) == "string") {
                    expression = prop == "$url" ? syra_expression.parseUrl(article, expression, record) : syra_expression.parse(article, expression, record);
                }
                values[prop] = expression;
                break;
        }
    }
    if (callback) {
        if ($parameters.$actions) {
            _parameters.openSelectModal(article, values, $parameters, record, callback);
            return;
        }
        if ($parameters.$properties) {
            _parameters.openModal(article, values, $parameters, record, callback);
            return;
        }
        callback(values);
    }
    return values;
};

function _formatMenuUrlWithCallback(article: any, $menu: any, record: any, callback: any) {
    if ($menu.$parameters) {
        $menu.$parameters.$title = $menu.getTitle ? $menu.getTitle() : null;
        formatParameters(article, $menu.$parameters, record, (values: any, isCanceled: boolean) => {
            if (isCanceled) {
                callback(null, isCanceled);
            }
            else {
                if ($menu.$sourceType && $menu.$sourceType.indexOf("{") == 0) {
                    $menu.$type = syra_expression.parse(article, $menu.$sourceType, record, values);
                    var $sourceMenu = article.$menus[$menu.$bind];
                    if (($menu.$type.indexOf("{") != 0) && $sourceMenu && !$sourceMenu.$target) {
                        $menu.$target = (($menu.$type.indexOf('json') == -1) && ($menu.$type != "html")) ? "blank" : "";
                    }
                }
                if ($menu.$method == "POST") {
                    $menu.sendData = values;
                }
                callback(syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, values));
            }
        });
    }
    else {
        callback(syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, undefined, $menu.$subRecordKey));
    }
}

export function formatMenuUrl(article: any, $menu: any, record?: any, callback?: any) {
    if (callback) {
        _formatMenuUrlWithCallback(article, $menu, record, callback);
    }
    else {
        var properties;
        if ($menu.$parameters) {
            properties = formatParameters(article, $menu.$parameters, record);
        }
        return syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, properties, $menu.$subRecordKey);
    }
}

export function notifyParametersActionChange(article: any, menu: any, record: any, target: any, request: any) {
    menu.$parameters.$title = menu.getTitle ? menu.getTitle() : null;
    formatParameters(article, menu.$parameters, record, (values: any, isCanceled: boolean) => {
        if (!isCanceled) {
            let bindAction = request[Object.keys(request)[0]];
            bindAction.$parameters = {};
            delete values.$title;
            for (let bind in values) {
                bindAction.$parameters[bind] = values[bind];
            }
            (window as any).syra_form.postAction(article.page, menu, target, request);
        }
    });
}
export function parse(url: string) {
    return new Url(url);
}

export function addHost(url: string) {
    return Url.addHost(url);
}

export function getRepresentationUrl(url: Url) {
    return PageLoader.getRepresentationUrl(url);
}