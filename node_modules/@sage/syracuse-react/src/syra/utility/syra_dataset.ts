"use strict";

class ArrayHelper {
    find(list: any[], $uuid: string, variant?: string) {
        for (let record of list) {
            if (record) {
                if (variant) {
                    if (record[variant] && record[variant].$uuid == $uuid) {
                        return record;
                    }
                } else {
                    if (record.$uuid == $uuid) {
                        return record;
                    }
                }
            }
        }
        return null;
    }
    moveTo(list: any[], from: number, to: number) {
        if (to === from) return array;

        let target = list[from];
        let increment = to < from ? -1 : 1;

        for (let ii = from; ii != to; ii += increment) {
            list[ii] = list[ii + increment];
        }
        list[to] = target;
    }
}

export const array = new ArrayHelper();


class ArrayDelta {
    $uuids(list: any[]) {
        let $uuids = [];
        for (let record of list) {
            $uuids.push({
                $uuid: record.$uuid
            });
        }
        return $uuids;
    }
    add(list: any[], items: any[]) {
        let delta: any[] = [];
        let no_uuid = items.length && items[0].$uuid === undefined; //$uuid is undefined for array of date, number, string or variant
        if (no_uuid) {
            delta = delta.concat(list).concat(items);
        } else {
            for (let item of items) {
                if (!array.find(list, item.$uuid)) {
                    delta.push(item);
                }
            }
            if (delta.length) {
                if (delta.length == 1) {
                    delta[0].$index = list.length; //add to end
                } else {
                    for (var ii = list.length - 1; ii >= 0; ii--) {
                        delta.unshift({
                            $uuid: list[ii].$uuid
                        });
                    }
                }
            }
        }
        return delta;
    }

}

export const delta = {
    array: new ArrayDelta()
};

function _ensureServerIndex(list: any[]) {
    if (list.length) {
        var first = list[0];
        if (first !== null && typeof (first) == 'object') {
            if (first.$uuid == undefined && Object.keys(first).length == 1) {
                for (var ii = 0, jj = list.length; ii < jj; ii++) {
                    var record = list[ii];
                    if (typeof (record) == 'object') {
                        var k = Object.keys(record)[0];
                        // if test avoid assignment to read-only string with arrays like [{ foo: "bar" }]
                        if (typeof record[k] === 'object')
                            record[k].$serverIndex = ii;
                    }
                }
            } else {
                if (first.$uuid !== undefined) {
                    for (var ii = 0, jj = list.length; ii < jj; ii++) {
                        list[ii].$serverIndex = ii;
                    }
                }
            }
        }
    }
}

function _applyPageRecordDelta(page: any, record: any, subRecord: any, targetMap: any, targetList: any, variantKey?: any) {
    if (subRecord.$uuid !== undefined) {
        if (!subRecord.$isDeleted) {
            if ((subRecord.$uuid !== undefined) && targetMap[subRecord.$uuid]) {
                if (variantKey) {
                    var newNecord = applyDelta(page, targetMap[subRecord.$uuid], subRecord);
                    record = {};
                    record[variantKey] = newNecord;
                    targetList.push(record);
                } else {
                    targetList.push(applyDelta(page, targetMap[subRecord.$uuid], subRecord));
                }
            } else {
                targetList.push(record);
            }
        }
    } else {
        targetList.push(record);
    }
}

function _applyObjectArrayDelta(page: any, targetList: any[], sourceList: any[]) {
    if (sourceList) {
        if (targetList.length == sourceList.length) {
            for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
                applyDelta(page, targetList[ii], sourceList[ii]);
            }
        } else {
            targetList.splice(0, targetList.length);
            for (let record of sourceList) {
                targetList.push(record);
            }
        }
    }
    return targetList;
}

export function applyDelta(page: any, target: any, source: any, isObjectDelta?: boolean) {
    if (source) {
        var properties = Object.keys(source);
        for (let property of properties) {
            let targetValue = target[property];
            let sourceValue = source[property];
            if (typeof (sourceValue) == 'object') {
                if (!(targetValue == null || sourceValue === null)) {
                    if (Array.isArray(sourceValue)) {
                        if (isObjectDelta) {
                            sourceValue = _applyObjectArrayDelta(page, targetValue, sourceValue);
                        } else {
                            //	if (page.$isEditMode || page.$isPartialDelta) {
                            sourceValue = applyPageArrayDelta(page, targetValue, sourceValue);
                            //}
                        }
                    } else {
                        if (typeof (targetValue) == 'object') {
                            sourceValue = applyDelta(page, targetValue, sourceValue, isObjectDelta);
                        }
                    }
                }
                if (Array.isArray(sourceValue)) {
                    _ensureServerIndex(sourceValue);
                }
            }
            target[property] = sourceValue;
        }
    }
    return target;
};


export function cleanServerIndex(source: any) {
    if (source && (typeof (source) == 'object')) {
        if (Array.isArray(source)) {
            for (let record of source) {
                cleanServerIndex(record);
            }
        } else {
            delete source.$serverIndex;
            let properties = Object.keys(source);
            for (let prop of properties) {
                cleanServerIndex(source[prop]);
            }
        }
    }
    return source;
};

function _isVariantArray(first: any) {
    return first !== null && typeof (first) == 'object' && first.$uuid == undefined && Object.keys(first).length == 1;
}

export function applyPageArrayDelta(page: any, targetList: any[], sourceList: any[]) {
    if (sourceList) {
        let targetMap: any = {};
        let isVariant = _isVariantArray(sourceList.length && sourceList[0]);
        if (page.$isPartialDelta || (sourceList.length == 1 && sourceList[0].$index !== undefined)) {
            var found, foundIndex;
            for (let sourceRecord of sourceList) {
                found = null;
                foundIndex = 0;
                for (var mm = targetList.length; foundIndex < mm; foundIndex++) {
                    found = targetList[foundIndex];
                    if (found.$uuid == sourceRecord.$uuid) {
                        break;
                    } else {
                        found = null;
                    }
                }
                if (found) {
                    if (sourceRecord.$isDeleted) {
                        targetList.splice(foundIndex, 1);
                    } else {
                        applyDelta(page, found, sourceRecord);
                        if (sourceRecord.$index !== undefined && sourceRecord.$index != foundIndex) {
                            targetList.splice(foundIndex, 1);
                            targetList.splice(sourceRecord.$index, 0, found);
                            delete found.$index;
                        }
                    }
                } else {
                    if (!sourceRecord.$isDeleted) {
                        if (sourceRecord.$index !== undefined) {
                            targetList.splice(sourceRecord.$index, 0, sourceRecord);
                        } else {
                            targetList.push(sourceRecord);
                        }
                    }
                }
            }
        } else {
            for (let record of targetList) {
                if (record) {
                    if (record.$uuid !== undefined) {
                        targetMap[record.$uuid] = record;
                    } else {
                        if (isVariant) {
                            record = record[Object.keys(record)[0]];
                            if (record.$uuid !== undefined) {
                                targetMap[record.$uuid] = record;
                            }
                        }
                    }

                }
            }
            targetList = [];
            for (let record of sourceList) {
                if (isVariant) {
                    var variantKey = Object.keys(record)[0];
                    _applyPageRecordDelta(page, record, record[variantKey], targetMap, targetList, variantKey);
                } else {
                    _applyPageRecordDelta(page, record, record, targetMap, targetList);
                }

            }
        }
    }
    return targetList;
};

export function ensureRecord(article: any, $uuid?: any) {
    var listDataset = article.articleParent.dataset;
    if ($uuid !== undefined) {
        for (let record of listDataset) {
            if (record.$uuid == $uuid) {
                article.dataset = record;
                article.$serverIndex = article.dataset.$serverIndex;
                break;
            }
        }
    } else {
        if (!article.dataset || article.dataset.$serverIndex != article.$serverIndex) {
            for (let record of listDataset) {
                if (record.$serverIndex == article.$serverIndex) {
                    article.dataset = record;
                    break;
                }
            }
        }
    }
    if (!article.dataset) {
        article.dataset = {};
    }
    return article.dataset;
}
export function ensure(article: any, $uuid?: any) {
    if (article.ensureDataSet) {
        return article.ensureDataSet($uuid);
    } else {
        if (article.isRecordArticle) {
            return ensureRecord(article, $uuid);

        } else {
            article.dataset = article.dataset || {};
        }
    }
    return article.dataset;
}

export function setFieldValue(field: any, value: any) {
    if (field.setDatasetValue) {
        return field.setDatasetValue(value);
    }
    var value = field.currentValue = (value === undefined ? field.getValue() : value);
    field.articleParent.dataset[field.$item.$bind] = value;
    return value;
};