"use strict";
import { Ajax, AjaxResponse } from '../../ajax/ajax';
import { showDiagnoses } from '../../alert/alert';
import { Uploader, UploadResponse } from '../../ajax/uploader';

class SyraAjax {
    _adaptEnd(props: any) {
        //temp support for extdended fields
        props.end = (response: AjaxResponse) => {
            if (response.ok) {
                props.success(response.data, response);
            }
            else {
                if (props.error) {
                    props.error(response.error);
                }
                else {
                    showDiagnoses(response.error.diagnoses);
                }
            }
        };
    }
    _adapte(props: any) {
        props.url = props.$url || props.url;
        props.contentType = props.contentType || props.$contentType;
        props.accept = props.accept || props.$acceptType;
        props.success && this._adaptEnd(props);
        return props;
    }
    send(props: any): Ajax {
        let ajax = new Ajax();
        ajax.send(this._adapte(props));
        return ajax;
    }
    del(props: any): Ajax {
        let ajax = new Ajax();
        ajax.del(this._adapte(props));
        return ajax;
    }
    get(props: any): Ajax {
        let ajax = new Ajax();
        ajax.get(this._adapte(props));
        return ajax;
    }
    post(props: any): Ajax {
        let ajax = new Ajax();
        ajax.post(this._adapte(props));
        return ajax;
    }
    put(props: any): Ajax {
        let ajax = new Ajax();
        if (props.data && props.data.$etag) {
            props.$etag = props.data.$etag;
        }
        ajax.put(this._adapte(props));
        return ajax;
    }
    createUploader(url: string,
        file: any,
        contentType: string,
        onProgress: (progress: number, loaded: boolean) => void): Uploader {
        return new Uploader(url, file, contentType, onProgress);
    }
}

export const syra_ajax = new SyraAjax();