"use strict";
import * as Expression from '../../dataStore/expression';
import * as Dom from '../../utility/html/dom';

let _templatePattern = /(\{.*?\})/g;

interface MatchResult {
    article: any,
    value: any
};

function _matchProperty(article: any, expression: string, property?: string, record?: any, properties?: any, $subRecordKey?: string): MatchResult {
    var value = undefined;
    var params = article.page && article.page.urlSeg && article.page.urlSeg.params;
    while (article && value === undefined) {
        value = undefined;
        if (properties) {
            value = properties[property];
        }
        if (value === undefined) {
            if ($subRecordKey) {
                var subRecord = record[$subRecordKey];
                if (subRecord) {
                    value = subRecord[property];
                }
            }
            if (value === undefined) {
                value = record[property];
                if (value === undefined || value == expression) {
                    value = article.dataset[property];
                    if (value === undefined || value == expression) {
                        value = params && params[property];
                        if (value === undefined || value == expression) {
                            value = article.$prototype && article.$prototype[property];
                            if (value === undefined || value == expression) {
                                article = article.isChildFieldRecord ? article.articleParent.articleParent : article = article.articleParent;
                                if (article) {
                                    record = article.dataset;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (value === undefined) {
        value = Expression.matchGlobals(property);
    }
    return {
        article: article,
        value: value
    };
}

export function extractCode($expression: string) {
    $expression = $expression + "";
    if ($expression.indexOf("{") >= 0) {
        return $expression.slice(1, $expression.length - 1);
    }
    return $expression;
};

function getArticle(boxParent:any):any {
	return boxParent.isSection ? boxParent.articleParent : boxParent;
}
export function render(box: any, expression: string, layoutSlot?:any, $fieldCss?:string, $isEditMode?:boolean) {
    if (expression[1] == "@") {
        let text =  parse(getArticle(box), expression);
        if (layoutSlot) { //!important used by expression
            layoutSlot.textContent = text;
        }
        return text;
    } else {
        var article = getArticle(box);
        let html = expression;
        let matches: any = expression.match(/(\{.*?\})/g);
        for (let ii = 0, jj = matches.length; ii < jj; ii++) {
            let match = ((window as any).syra_core).escape(matches[ii]);
            html = html.replace(match, "<div data-s-match='" + ii + "'>" + match + "</div>");
            matches[ii] = {
                expression: match,
                property: match.substr(1, match.length - 2)
            };
        }
        layoutSlot.innerHTML = html; // safe because matches have been escaped
        let divs = layoutSlot.querySelectorAll("div");
        for (let domMatch of divs) {
            let match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
            if (match.property.charAt(0) == "$") {
                var value = _matchProperty(article, match.expression, match.property, article.dataset).value;
                if (value != null) {
                    if (value.indexOf && value.indexOf("{") >= 0) {
                        Dom.empty(domMatch);
                        render(box, value, domMatch, $fieldCss, $isEditMode);
                    } else {
                        domMatch.textContent = value;
                    }
                }
            } else {
                Dom.empty(domMatch);
                box.page.addItem(domMatch, {
                    $isMenusDisabled: true,
                    $isDetailLinkDisabled: true,
                    $isMenusHidden: true,
                    $isExpressionChild: true,
                    $bind: match.property,
                    $inplace: true,
                    $isEditMode: $isEditMode === undefined ? box.$isEditMode : $isEditMode,
                    $css: "s-expression " + $fieldCss,
                    $skin: "s-inplace"
                }, article);
            }
        }
    }
}

export function parseUrl(article: any, expression: string, record: any, properties?: any, $subRecordKey?: string, ignoreCurrent?: any) {
    return parse(article, expression, record, properties, $subRecordKey, ignoreCurrent, true);
}

function _localize(article: any, text: string) {
    let $localization = article.$prototype.$localization || article.page.$prototype.$localization;
    let localized = $localization && $localization[text];
    if (!localized) {
        let $allLocalization = article.$prototype.$allLocalization || article.page.$prototype.$allLocalization;
        if ($allLocalization) {
            $localization = $allLocalization["en-us"];
            localized = $localization && $localization[text];
            if (localized == null) {
                localized = "<??>";
            }
        }
    }
    return localized || text;
}

function getFieldValue(field: any) {
    if (field.variantItem) {
        field = field.variantItem;
    }
    var value = field.articleParent.dataset[field.$item.$bind];
    if (field.$item.$variantItemKey) {
        if (value) {
            return value[field.$item.$variantItemKey];
        }
    }
    return value;
}

export function parse(article: any, expression: string, record?: any, properties?: any, $subRecordKey?: string, ignoreCurrent?: any, isUrl?: boolean) {
    if(!article){
        return expression;
    }
    if (!record && article.isSingleRecord) {
        let field = article.boundFields.$singleField && article.boundFields.$singleField[0];
        record = field && getFieldValue(field);
        if (typeof (record) != 'object') {
            record = null;
        }
    }
    let result = expression;
    record = record || article.dataset;
    if (result && result.indexOf("{") >= 0) {
        if (result[1] == "@") {
            return _localize(article, result.slice(1, result.length - 1));
        } else {
            let matches = result.match(_templatePattern);
            let property, value;
            for (let match of matches) {
                property = match.substr(1, match.length - 2);
                let matchResult;
                if (ignoreCurrent && ignoreCurrent[match]) {
                    if (article.articleParent) {
                        let articleParent = article.isChildFieldRecord ? article.articleParent.articleParent : article.articleParent;
                        matchResult = _matchProperty(articleParent, match, property, articleParent.dataset, properties, $subRecordKey);
                    }
                } else {
                    matchResult = _matchProperty(article, match, property, record, properties, $subRecordKey);
                }
                if (matchResult && matchResult.value != null) {
                    if (matchResult.value.indexOf && matchResult.value.indexOf("{") >= 0) {
                        //if (matchResult.value.indexOf(match) >= 0) {
                        (ignoreCurrent = ignoreCurrent || {})[match] = match;
                        //value = parse(article.articleParent,value, article.articleParent.dataset, properties, $subRecordKey);
                        //}
                        if (matchResult.article) {
                            let startRecord = matchResult.article == article ? record : matchResult.article.dataset;
                            matchResult.value = parse(matchResult.article, matchResult.value, startRecord, properties, $subRecordKey, ignoreCurrent);
                        }
                    } else {
                        if (typeof (matchResult.value) == "object") {
                            matchResult.value = matchResult.value.$uuid || matchResult.value.$key || matchResult.value[property] || null;
                            if (matchResult.value == null) {
                                console.log("can not match " + property + " in " + expression);
                                matchResult.value = "";
                            }
                        }
                    }
                    if (matchResult.value != null) {
                        if (isUrl && expression.indexOf(match) > 0 && expression[expression.indexOf(match) - 1] == "=") {
                            matchResult.value = encodeURIComponent(matchResult.value);
                        }
                        result = result.replace(match, matchResult.value);
                    } else {
                        result = result.replace(match, "");
                    }
                } else {
                    result = result.replace(match, "");
                }
            }
        }
    }
    return result;
}