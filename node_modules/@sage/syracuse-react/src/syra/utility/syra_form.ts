"use strict";
import { Url } from '../../route/url';
import { getLocalString } from '../../culture/localString';
import { Ajax } from '../../ajax/ajax';
import { alertBox } from '../../alert/alert';
import * as syra_url from './syra_url';
import * as syra_dataset from './syra_dataset';
import * as syra_sendBag from './syra_sendBag';
import * as SyraAlert from '../alert/syraAlert';
import { syra_item } from './syra_item';
import { syra_fields } from './syra_fields';
import { syra_article } from './syra_article';
import * as UUID from '../../utility/uuid';
import * as syra_expression from './syra_expression';
import *  as syra_router from '../../route/syra_router';
import * as Storage from '../../utility/storage/storage';
import { showDiagnoses } from '../../alert/alert';
import { route } from '../../route/route';


class SyraForm {
    public lastSavingDiagnoses: any;

    private _validateField(field: any, newValue: any, errors?: any) {
        if (field.$item.$isFilterMode) {
            return true;
        }
        if (field.isArrayField) {
            let ok = true;
            for (let record of field.records) {
                ok = this.validate(record);
            }
            return ok;
        }
        if (field.isChildField) {
            return this.validate(field.record);
        }

        let value = newValue;
        if (value === undefined) {
            value = field.currentValue;
        }
        if (value != null && value.toString) {
            value = value.toString();
        }
        errors = errors || [];
        if (!field.page.isFusionPage && field.$isMandatory) {
            let checked = value;
            if (field.isReferenceField) {
                checked = field.uuidEnabled ? field.currentValue && field.currentValue.$uuid : field.getInputValue();
            }
            if (checked === '' || checked === null || (!field.isPasswordField && checked === undefined)) {
                errors.push(getLocalString("fieldIsMandatory"));
            }
        }

        if (field.$field.$pattern && value) {
            let match = new RegExp(field.$field.$pattern, "i").test(value);
            if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
                errors.push(field.$field.$patternMessage || getLocalString("fieldInvalidValue") + " : " + value);
            }
        }

        field.validate && field.validate(errors, value);

        //alertPanel
        if (errors.length > 0 || field.isInvalid) {
            field.invalidateField(errors);
            var saveLinks = field.articleParent.menuItems.$save;
            if (saveLinks && saveLinks.length > 0) {
                var hasErrors = field.page.alertPanel && field.page.alertPanel.hasFieldErrors();
                if (!saveLinks[0].$isDisabled) {
                    hasErrors && saveLinks[0].disable(true);
                } else {
                    !hasErrors && saveLinks[0].disable(true);
                }
            }
            var sendBag = syra_sendBag.get(field.page);
            if (sendBag) {
                newValue = field.parentVariantField ? field.parentVariantField.saveVariantValue(newValue) : newValue;
                sendBag.save(field.page, field.articleParent, field.$item.$bind, newValue);
            }
        }
        return errors.length == 0;
    }
    validate(article: any) {
        let isValidated = true;
        try {
            var page = article.page;
            if (page == article) {
                page.isPageValidating = page.isServerNotifyDisabled = true;
            }

            var $binds = Object.keys(article.boundFields);
            for (let bind of $binds) {
                let fields = article.boundFields[bind];
                for (let field of fields) {
                    if (!field.$isHidden && field.$isEditMode) {
                        if (!field.unknowMode) {
                            var newValue;
                            try {
                                newValue = field.getValue();
                                if (!this._validateField(field, newValue)) {
                                    isValidated = false;
                                } else {
                                    if (newValue != undefined) {
                                        if (page.isModalParameter || (page.isPageValidating && newValue != field.currentValue)) {
                                            this.update(field, newValue);
                                        }
                                    }
                                }
                            } catch (error) {
                                isValidated = false;
                                field.invalidateField(error.message);
                            }
                        }
                    }
                }
            }
        } finally {
            if (page == article) {
                page.isPageValidating = page.isServerNotifyDisabled = false;
            }
        }
        return isValidated;
    }
    onInputChange(field: any, event?: any) {
        if (!field.unknowMode) {
            field.setDirty(true);
            try {
                var doValidate = true;
                if (field.isReferenceField) {
                    doValidate = false;
                    var value = field.input.value || "";
                    if (value == "") {
                        if (field.refDescriptionItem) {
                            if (!field._titleField) {
                                field.refDescriptionItem.textContent = "";
                                field.refDescriptionItem.style.display = "";
                            }
                        } else {
                            field.input.title = "";
                        }
                        this.update(field, null);
                    } else {
                        if ((field.currentValue && field.currentValue.$value != value) || !field.currentValue) {
                            let postValue: any = {};
                            postValue[field.$reference.$value.$itemProp] = value;
                            this.update(field, postValue);
                        }
                    }
                } else {
                    switch (field.$field.$type) {
                        case "application/x-integer":
                        case "application/x-decimal":
                        case "application/x-real":
                        case "application/x-quantity":
                            doValidate = false;
                            var val = field.input.value,
                                valFormatted = val;
                            field.valHasChanged = true;
                            if (val != '') {
                                field.input.value = valFormatted = field._formatInput(field, val);
                            }
                            if (this._validateField(field, valFormatted, [])) {
                                doValidate = true;
                            }
                            break;
                        case "application/x-choice":
                            if (field.isRadioChoiceField) {
                                event && event.target && field.selectRadioBtn(event.target.syraEnumIndex, true);
                            } else {
                                field.combo.setEnumValue(field.findEnum(field.getValue()));
                            }
                            break;
                        case "application/x-password":
                            if (field.confirmInput) {
                                doValidate = false;
                                if (event.target == field.confirmInput) {
                                    if (this._validateField(field, field.confirmInput.value || "")) {
                                        field.currentValue = "";
                                        doValidate = true;
                                    }
                                }
                            }
                            break;
                    }
                }
                if (doValidate) {
                    var newValue = field.getValue(event);
                    if ((newValue != field.currentValue) || (field.isDirty && field.isDirty())) {
                        // apply format  - SAM 106180
                        if (field.$field.$x3Format) {
                            newValue = syra_fields.format(newValue, field.$field.$x3Format, field.$field.$type, field.page.$prototype.$x3FormatExt);
                        }
                        this.update(field, newValue);
                    }
                }
            } catch (error) {
                field.invalidateField(error.message);
                field.currentValue = newValue;
            }
        }
    }
    updateWorkingCopy(page: any, sendBag: any) {
        if (!page.disposed) {
            if (page.updateWorkingCopy ? page.updateWorkingCopy(sendBag) : true) {
                if (!page.isServerNotifyDisabled && page.$prototype.$representationUrl) {
                    sendBag.$url = page.getDataUrl();
                    sendBag.$etag = page.dataset.$etag;
                    let ajax = new Ajax();
                    ajax.put({
                        page: page,
                        url: page.getDataUrl(),
                        data: sendBag,
                        end: (response) => {
                            if (!page.disposed) {
                                if (response.ok) {
                                    if (sendBag) {
                                        delete sendBag.$actions;
                                    }
                                    page.applyChange(response.data, response, response.url);
                                }
                                else {
                                    showDiagnoses(response.error.diagnoses);
                                }
                            }
                        }
                    });
                }
            }
        }
    }
    update(field: any, newValue: any) {
        if ((!field.unknowMode && !field.page.isFusionPage) || field.useDefaultUpdate) {
            field.currentValue = newValue;
            if (this._validateField(field, newValue)) {
                if (field.notifyFieldChange ? field.notifyFieldChange(newValue) : true) {
                    syra_dataset.setFieldValue(field, field.currentValue);
                    this.updateDelta(field, field.currentValue);
                }
            }
            return true;
        }
        return false;
    }
    updateDelta(field: any, value: any) {
        var page = field.page;
        if (page) {
            if (field.articleParent.onFormUpdateDelta ? field.articleParent.onFormUpdateDelta(field, value) : true) {
                if (field.page.onFormUpdateDelta ? field.page.onFormUpdateDelta(field, value) : true) {
                    var sendBag = syra_sendBag.get(page);
                    sendBag.save(page, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
                    this.updateWorkingCopy(page, sendBag);
                }
            }
            if (field.isBooleanField && field.input) {
                syra_fields.checkbox.setIcon(field, (value || field.statusValues.off) == field.statusValues.on);
            }
            if (field.isRadioChoiceField && field._choices) {
                var selected = field.findEnum(value);
                selected && field.selectRadioBtn(selected.$index, true);
            }
        }
    }
    isFormUrl(url: string): boolean {
        return url && url.indexOf("$workingCopies") >= 0;
    }
    onBeforeUnloadPage = (callback: () => void, activePage?: any) => {
        callback();
    }
    remove(page: any) {
        if (page && !page.isFusionPage && page.$isEditMode) {
            var $url = page.$prototype ? page.$prototype.$representationUrl : null;
            if (this.isFormUrl($url)) {
                let ajax = new Ajax();
                ajax.del({
                    url: $url,
                    end: (response) => { }
                });
            }
        }
    }
    showLastSavingDiagnoses(page: any) {
        if (this.lastSavingDiagnoses) {
            SyraAlert.show(this.lastSavingDiagnoses, page);
            this.lastSavingDiagnoses = null;
        }
    }
    postAction(page: any, menuItem: any, target: any, value: any) {
        if (page.form_postAction ? page.form_postAction(menuItem, target, value) : true) {
            if (target != page) {
                var list = target.list || target;
                if (list && list.isArrayField) {
                    if (value.$delete || value.$create) {
                        if (list.formType == "multiArray") {
                            this.postActionMultiArray(list, menuItem, target, value);
                        }
                        else {
                            this.postActionSingleArray(list, menuItem, target, value);
                        }
                        //list.resizeItem(true);
                        return;
                    }
                }
            }
            var articleParent = (target.isArticle || target.isSection) ? syra_article.getArticle(target) : target.articleParent; //test for compatibilty with old getArticle
            var sendBag = syra_sendBag.get(page);
            var articleSendBag = syra_sendBag.get(articleParent);
            var $actions;
            var $bind;
            //var dataset = articleSendBag.dataset || articleSendBag;
            var dataset = articleSendBag;
            if (target.$item && target.$item.$bind) {
                let $properties = dataset.$properties = dataset.$properties || {};
                $properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
                $actions = $properties.$actions = $properties.$actions || {};
                $bind = "$properties";
            } else {
                $bind = "$actions";
                $actions = dataset.$actions = dataset.$actions || {};
            }
            let $binds = Object.keys(value);
            for (let $bind of $binds) {
                $actions[$bind] = value[$bind];
            }
            value = dataset[$bind];
            if (articleParent != page) {
                while (articleParent != page) {
                    if (articleParent.isRecordArticle) {
                        var list = articleParent.list;
                        var listSendBag = syra_sendBag.get(list);
                        if (list.$prototype.$type == "application/x-array") {
                            var found = list.findDataRecord(articleParent.$uuid);
                            listSendBag.saveRecord(articleParent, $bind, value, found.dataRecordIndex);
                            value = listSendBag.dataRecords;
                        } else {
                            if ($bind) {
                                (listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
                            }
                            value = listSendBag.dataset;
                        }
                        $bind = list.$item.$bind;
                        articleParent = list.articleParent;
                    } else {
                        if (articleParent.arrayLevel != "array") {
                            if (articleParent.dataset && articleParent.dataset.$uuid) {
                                sendBag.$uuid = articleParent.dataset.$uuid;
                            }
                            sendBag[$bind] = value;
                        }
                        articleParent = articleParent.articleParent;
                    }
                }
                sendBag[$bind] = value;
            }
            if (!page.isFormUpdating) {
                if (page.dataset && page.dataset.$uuid !== undefined) {
                    sendBag.$uuid = page.dataset.$uuid;
                }
                this.updateWorkingCopy(page, sendBag);
            }
        }
    }

    //  multiArray - singleArray
    private postActionMultiArray(list: any, menuItem: any, target: any, value: any) {
        var record = target.isRecordArticle ? target : null;
        if (value.$create) {
            var dataRecords = list.ensureDataSet();
            list.filler.ensureClientDataset(list);
            let options: any = {
                isCreateAction: true
            };
            if (record) {
                options.$serverIndex = record.$serverIndex;
                options.$recordIndex = record.getRecordIndex();
            } else {
                if (list.dataset.length > 0) {
                    options.$serverIndex = list.dataset[list.dataset.length - 1].$serverIndex + 1;
                } else {
                    options.$serverIndex = 0;
                }
            }
            var newValue = {
                $uuid: UUID.generate()
            };
            if (menuItem.$item.$variantItemKey) {
                options.dataRecord = {};
                options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
            } else {
                options.dataRecord = newValue;
            }
            if (record) {
                var found = list.filler.findDataRecord(list, record.$uuid);
                dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
            } else {
                dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
            }
            if (list.paging.$startIndex !== undefined && list.clientDataset.length < list.paging.$startIndex) {
                list.paging.ensureClientRange();
            }
            if ((list.paging.$startIndex + (list.paging.$itemsPerPage - 1)) > options.$serverIndex) {
                var newRecord = list.filler.addRecord(list, options);
            }
            //sendbag begin
            let sendBag = syra_sendBag.get(list);
            let saved: any = {
                $uuid: newValue.$uuid
            };
            if (sendBag.dataRecords.length > 0) {
                sendBag._ensureFullDataSet(list);
                if (!sendBag._findDataRecord(saved.$uuid)) {
                    sendBag.dataRecords.splice(options.$serverIndex, 0, saved);
                }
            } else {
                saved.$index = options.$serverIndex;
                sendBag.dataRecords.push(saved);
            }
            //sendbag end
            if (list.isClientFetch) {
                options.dataRecord.$serverIndex = options.$serverIndex;
                if (list.clientDataset != list.dataset) {
                    list.clientDataset.push(options.dataRecord);
                }
                if (list.clientFetchOptions) {
                    list.filler.applyClientFetchOptions(list, list.clientFetchOptions);
                }
                list.paging.setPage(options.$serverIndex);
            } else {
                list.filler.validateDisplay(list);
            }
            this.updateDelta(list, sendBag.dataRecords);

        } else {
            var sendBag = syra_sendBag.get(list);
            var dataRecords = list.ensureDataSet();
            list.filler.ensureClientDataset(list);
            if (record) {
                var clientDataRecordIndex = list.filler.getClientDataSetIndex(list, record.$serverIndex);
                list.records.splice(list.records.indexOf(record), 1);
                var found = list.filler.findDataRecord(list, record.$uuid);
                if (found) {
                    dataRecords.splice(found.dataRecordIndex, 1);
                    record.$index = found.dataRecordIndex;
                }
                var found = sendBag.ensureRecord(record);
                if (sendBag.dataRecords.length == 1) {
                    found.dataRecord.$index = record.$serverIndex;
                    found.dataRecord.$isDeleted = true;
                } else {
                    sendBag.dataRecords.splice(found.dataRecordIndex, 1);
                }
                delete record.$index;
                if (clientDataRecordIndex >= 0 && list.clientDataset != list.dataset) {
                    list.clientDataset.splice(clientDataRecordIndex, 1);
                }
                delete list.recordsMap[record.$uuid];
                list.filler.removeRecord(record, true);
            } else {
                list.clientDataset.splice(0, dataRecords.length);
                dataRecords.splice(0, dataRecords.length);
                sendBag.dataRecords = [];
                list.filler.removeRecords(list);
            }
            if (list.records.length == 0) {
                list.emptyBody();
            } else {
                if (clientDataRecordIndex >= 0 && list.isClientFetch && list.clientDataset.length) {
                    list.paging.setPage(list.clientDataset[Math.min(clientDataRecordIndex, list.clientDataset.length - 1)].$serverIndex);
                } else {
                    list.filler.validateDisplay(list);
                }
            }
            this.updateDelta(list, sendBag.dataRecords);
        }
    }

    private postActionSingleArray(list: any, menuItem: any, target: any, value: any) {
        var sendBag = syra_sendBag.get(list);
        var dataRecords = list.ensureDataSet();
        var record = target.isRecordArticle ? target : null;
        if (value.$create) {
            var options: any = {};
            if (record) {
                options.$serverIndex = record.$serverIndex;
                options.$recordIndex = record.getRecordIndex();
            } else {
                if (list.records.length > 0) {
                    options.$serverIndex = list.records[list.records.length - 1].$serverIndex + 1;
                } else {
                    options.$serverIndex = 0;
                }
            }
            var targetType = list.$prototype.$item.$type;
            if (menuItem.$item.$variantItemKey) {
                targetType = list.$prototype.$item.$variants[menuItem.$item.$variantItemKey].$type;
            }
            var newValue = (targetType == "application/x-object") ? {
                $uuid: UUID.generate()
            } : null;
            if (menuItem.$item.$variantItemKey) {
                options.dataRecord = {};
                options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
            } else {
                options.dataRecord = newValue;
            }
            (sendBag.dataRecords = dataRecords).splice(options.$recordIndex || list.records.length, 0, options.dataRecord);
            var record = list.filler.addRecord(list, options);
            list.filler.validateDisplay(list);
            record.scrollToRecord();
        } else {
            if (record) {
                var recordIndex = record.getRecordIndex();
                list.records.splice(recordIndex, 1);
                dataRecords.splice(recordIndex, 1);
                sendBag.dataRecords = dataRecords;
                delete list.recordsMap[record.$uuid];
                list.filler.removeRecord(record, true);
            } else {
                dataRecords.splice(0, dataRecords.length);
                sendBag.dataRecords = [];
                list.filler.removeRecords(list);
            }
            list.filler.validateDisplay(list);

            if (list.records.length == 0) {
                list.emptyBody();
            }
            this.updateDelta(list, sendBag.dataRecords);
        }
        list.addMenusBar();
    }

    storeSdataUrl(wcUrl: string) {
        let save = Storage.session.getJson(wcUrl);
        save && Storage.session.setJson(wcUrl, {
            url: save.url
        });
    }
}
export const syra_form = new SyraForm();