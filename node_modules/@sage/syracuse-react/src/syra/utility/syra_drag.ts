"use strict";
import { Drag, IDragProps } from '../../common/drag/drag';
export class SyraDrag {
    private drag: Drag;
    constructor(public props: IDragProps) {
        this.props.handle.addEventListener("mousedown", this.onMousedown, false);
        this.props.mousemove && this.props.handle.addEventListener("mousemove", this.onMousemove, false);
    }
    onMousemove = (event: MouseEvent) => {
        this.props.mousemove(event);
    }
        //syra compatibility
    get context() :IDragProps{
        return this.props;
    }
    onMousedown = (event: MouseEvent) => {
        if (!this.props.exclude || this.props.exclude.indexOf(event.target as HTMLElement) < 0) {
            if (!this.props.mousedown || this.props.mousedown(event)) {
                event.preventDefault();
                this.drag = new Drag(this.props);
                this.props.start && this.props.start(event);
                event.stopPropagation();
            }
        }
    }
    dispose() {
        if (this.props && this.props.handle) {
            this.props.handle.removeEventListener("mousedown", this.onMousedown);
            this.props.handle.removeEventListener("mousemove", this.onMousemove);
        }
        this.drag && this.drag.dispose();
    }
}

export function add(props: IDragProps) {
    return new SyraDrag(props);
}
