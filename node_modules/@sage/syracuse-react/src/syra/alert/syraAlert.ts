"use strict";
import { SyraAlertPanel } from './syraAlertPanel';
import { alertBox } from '../../alert/alert';
import { syra_site } from '../utility/syra_site';
import * as SyraModal from '../../over/modal/syraModal';
import * as syra_expression from '../../syra/utility/syra_expression';

export function addPanel(root: HTMLElement) {
    return new SyraAlertPanel(root);
}
export function modal(options: any) {
    alertBox({
        severity: options.$severity || options.$type,
        title: options.$title,
        message: options.$message,
        buttons: {
            mode: options.mode,
            focusByDefault: options.defaultButton,
            titles: options.buttonTitles
        },
        description: {
            origin: options.$origin || options.origin,
            details: options.$details,
            detailsVisible: options.$showDetail,
            diagnoses: options.$diagnoses
        },
        delay: options.$delay,
        autoClose: options.isAutoClose,
        onClose: (closeBy: string, autoClose?: boolean, escape?: boolean) => {
            options.onClose && options.onClose(closeBy, autoClose, escape);
            if (!options.onClose && _reloadPage(options)) {
            	location.reload();
            }
            //for classic page compatiblity
            let response = {
                $id: closeBy
            };
            closeBy = autoClose ? "auto" : (escape ? "esc" : closeBy);
            options.callback && options.callback({}, closeBy);
            options.onClassicClose && options.onClassicClose(response, closeBy);
        }
    });
}
export function clear(target?: any) {
    show(null, target);
}
export function ask(options: any) {
    options.$type = options.$type || "question";
    return modal(options);
}
export function info(message: any, target?: any) {
    show(message, target, "info");
}
export function warn(message: any, target?: any) {
    show(message, target, "warning");
}
export function error(message: any, target?: any) {
    show(message, target, "error");
}
export function show(message: any, target?: any, severity?: string, noViewer?: boolean, $links?: any, autoHide?: boolean) {
    if (message !== undefined) {
        if (message) {
            if (message.$diagnoses === undefined) {
                if (message.message && message.stack) {
                    message = [{
                        $message: message.message,
                        $stackTrace: message.stack
                    }];
                } else {
                    if (!Array.isArray(message)) {
                        if (typeof message == "string") {
                            message = {
                                $message: message
                            };
                        }
                        message = [message];
                    }
                }
                message = {
                    $diagnoses: message
                };
            }
            message.$diagnoses = message.$diagnoses.length ? message.$diagnoses : null;
        } else {
            message = {
                $diagnoses: null
            };
        }
        if (target && target.isField) {
            message.field = target = target.variantItem ? target.variantItem : target;
            if (target.isDiagnoseDisabled) {
                return;
            }
            target = target.boxParent;
            if (message.$diagnoses && target.forceVisibility) {
                target.forceVisibility();
            }
        }
        var page = target && target.page;
        if (page && page.diagnosePage) {
            page = page.diagnosePage;
        }
        if (!page || page.disposed) {
            page = SyraModal.getMostOverPage();
            if (!page || page.disposed) {
                page = syra_site.mainPage;
            }
        }
        if (page && page.alertPanel && !page.disposed && page != syra_site && page != syra_site.userProfile) {
            message.noViewer = noViewer; //set by syraForm.invalidateField => fusion/core/client/sap/window setFieldError
            if($links){
                message.$links = $links; //syra_route onActionExecuted
                for(let key in $links){
                    let $link = $links[key];
                     $link.$url = syra_expression.parse(page, $link.$url);
                }
            }
            message.autoHide = autoHide; //set by syraForm.invalidateField => fusion/core/client/sap/window setStatusBar             
            page.alertPanel.show(message);
        } else
            message.$diagnoses && modal({
                $diagnoses: message.$diagnoses
            });
    }
}
export function dispose() {
    //appeller sur onUncaughtError de la sheetpage pour libÃ©rer la messageBox
}

/**
 * Check if alert is raised because of disconnect and demands a relogin
 */
function _reloadPage(options: any) {
	let $links = options && options.$diagnoses && options.$diagnoses[0] && options.$diagnoses[0].$links; 
	let $redirect = $links && $links.$redirect;
	let $url = $redirect && $redirect.$url;
	return ($url && $url.indexOf && $url.indexOf("/auth/login/page") > -1);
}