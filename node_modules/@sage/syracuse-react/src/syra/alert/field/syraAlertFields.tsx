"use strict";
import { IPanelField, parseSdataDiagnoses } from '../../../alert/alert';
import { ISyraField, ISyraAlertMessage } from '../../syraType';
import { SyraAlertLargeField } from './syraAlertLargeField';
import { SyraAlertSmallField } from './syraAlertSmallField';

interface IListItem extends IPanelField {
    alert: SyraAlertLargeField | SyraAlertSmallField
}

export class SyraAlertFields {
    map: any;
    list: IListItem[];
    constructor() {
        this.map = {};
        this.list = [];
    }
    get hasErrors(): boolean {
        for (let item of this.list) {
            for (let diagnose of item.diagnoses) {
                if (diagnose.severity == "error") {
                    return true;
                }
            }
        }
        return false;
    }
    onFieldItemInOut(syraField: ISyraField, on: boolean) {
        let item: IListItem = this.map[syraField.$item.$bind];
        let smallFieldAlert = (item && item.alert) as any;
        smallFieldAlert && smallFieldAlert.onFieldItemInOut && smallFieldAlert.onFieldItemInOut(syraField, on);
    }
    update(message: ISyraAlertMessage): IPanelField[] {
        let field = message.field;
        if (!field.isDiagnoseDisabled) {
            let fieldDiagnoses = this.map[field.$item.$bind] as IListItem;
            if (!fieldDiagnoses && message.$diagnoses) {
                fieldDiagnoses = this.map[field.$item.$bind] = {
                    id: field.id,
                    title: field.getTitle(),
                    alert: (field.$item.$inplace && !field.$item.$isDiagnoseInline) ? new SyraAlertSmallField(field) : new SyraAlertLargeField(field)
                };
                this.list.push(fieldDiagnoses);
            }
            if (fieldDiagnoses) {
                if (message.$diagnoses) {
                    fieldDiagnoses.alert.update(fieldDiagnoses.diagnoses = parseSdataDiagnoses(message.$diagnoses));
                }
                else {
                    fieldDiagnoses.alert.dispose();
                    this.list.splice(this.list.indexOf(fieldDiagnoses), 1);
                    delete this.map[field.$item.$bind];
                }
            }
        }
        return this.list;
    }
    dispose() {
        if (this.list) {
            for (let item of this.list) {
                item.alert.dispose();
            }
        }
        this.map = this.list = null;
    }
}