"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { AlertSmallField } from '../../../alert/field/alertField';
import { Severity, IDiagnose } from '../../../alert/alert';
import * as Dom from '../../../utility/html/dom';
import { ISyraField } from '../../syraType';
import { getIconName, getSeverityCss } from '../../../alert/diagnose/severity';
import * as overHelper from '../../../over/overHelper';

//isDiagnosePopup
//diagsSlot) 
//liens   

export class SyraAlertSmallField {
    root: HTMLElement;
    icon: HTMLElement;
    severityCss: string;
    diagnoses: IDiagnose[];
    constructor(private field: ISyraField) {
        field.isDiagnosePopup = true;
        this.root = overHelper.createOverRoot("s_alert_smallfield_syra_popup");
    }
    decorateField(on: boolean, severity?: Severity) {
        if (on) {
            this.severityCss = getSeverityCss(severity);
            if (!this.icon) {
                this.icon = Dom.icon(this.severityCss + (this.field.$isEditMode ? " s_alert_smallfield_syra_edit" : " s_alert_smallfield_syra_read"), getIconName(severity), this.field._dataValue);
            }
        }
        else {
            Dom.remove(this.icon)
            this.icon = null;
        }
        Dom.toggleClass(this.field._dataValue, this.severityCss, on);
    }
    onFieldItemInOut(field: ISyraField, onEnter: boolean) {
        if (onEnter) {
            ReactDom.render(<AlertSmallField diagnoses={this.diagnoses} syraof={this.field._dataValue} />, this.root);
        }
        else {
            this.root && ReactDom.unmountComponentAtNode(this.root)
        }
    }
    update(diagnoses: IDiagnose[]) {
        this.decorateField(true, diagnoses[0].severity);
        this.diagnoses = diagnoses;
    }
    dispose() {
        this.root = overHelper.removeOverRoot(this.root);
        this.decorateField(false);
        this.icon = this.field = this.diagnoses = null;
    }
}