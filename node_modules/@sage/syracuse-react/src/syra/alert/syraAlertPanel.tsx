"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { AlertPanel } from '../../alert/panel/alertPanel';
import { IAlertPanel, IPanelField, parseSdataDiagnoses } from '../../alert/alert';
import { ISyraField, ISyraAlertMessage } from '../syraType';
import { SyraAlertFields } from './field/syraAlertFields';

export class SyraAlertPanel {
    props: IAlertPanel;
    fieldsAlert: SyraAlertFields;
    constructor(public root: HTMLElement) { }

    hasFieldErrors(): boolean {
        return this.fieldsAlert && this.fieldsAlert.hasErrors;
    }
    onFieldItemInOut(syraField: ISyraField, on: boolean) {
        this.fieldsAlert.onFieldItemInOut(syraField, on);
    }
    clean() {
        this.fieldsAlert && this.fieldsAlert.dispose();
        this.props = this.fieldsAlert = null;
        ReactDom.unmountComponentAtNode(this.root);
    }
    onClose = () => {
        setTimeout(() => this.clean(), 500);
    }
    show(message: ISyraAlertMessage) {
        if (!message || !message.$bind && !message.field && !message.$diagnoses) {
            this.clean();
        }
        else {
            if (!this.props) {
                this.props = {
                    onClose: this.onClose
                };
            }
            if (message.autoHide !== undefined) {
                this.props.autoHide = message.autoHide;
            }
            if (message.field) {
                if (!this.fieldsAlert) {
                    this.fieldsAlert = new SyraAlertFields();
                }
                this.props.fields = this.fieldsAlert.update(message);
            }
            else {
                if (message.$diagnoses) {
                    if (!this.props.diagnoses) {
                        this.props.diagnoses = []
                    }
                    this.props.diagnoses = this.props.diagnoses.concat(message.$diagnoses);
                }
                else {
                    message.$diagnoses = null;
                }
            }
            this.props.diagnoses = parseSdataDiagnoses(this.props.diagnoses);
            this.refresh();
        }
    }
    refresh() {
        ReactDom.render(<AlertPanel {...this.props} />, this.root);
    }
    dispose() {
        if (this.root) {
            this.clean();
            this.props = this.root = null;
        }
    }
}