"use strict";
import * as React from 'react';
import * as Sdata from '../dataStore/sdata';
import * as SyraAlert from './alert/syraAlert';
import * as Authoring from './syraAuthoring';
import { SyraBreadcrumb } from './syraBreadcrumb';
import { Url } from '../route/url';
import * as Dom from '../utility/html/dom';
import { browser } from '../utility/browser/browser';
import * as Quality from '../quality/qualityController';
import * as syra_expression from './utility/syra_expression';
import * as OfficeAddin from '../office/officeAddin';
import * as syra_url from './utility/syra_url';
import * as syra_dataset from './utility/syra_dataset';
import * as syra_sendBag from './utility/syra_sendBag';
import *  as syra_router from '../route/syra_router';
import { route } from '../route/route';
import { syra_form } from './utility/syra_form';
import { syra_fusion } from './utility/syra_fusion';
import { syra_site } from './utility/syra_site';
import * as SyraSortable from './utility/syra_sortable';
import * as syra_drag from './utility/syra_drag';
import * as Events from '../event/events';
import { NodeEvents } from '../event/syra_events';
import { GlobalEvents } from '../event/syra_events';
import { syra_ajax } from './utility/syra_ajax';
import * as SyraLocales from './utility/syra_locales';
import * as syra_tip from '../over/syra_tip';
import * as locker from '../over/lock/lockController';
import * as SyraModal from '../over/modal/syraModal';
import * as recordCardModalController from '../over/modal/recordCard/recordCardModalController';
import * as SyraPageModal from '../over/modal/page/syraPageModal';
import * as syra_popup from '../over/syra_popup';
import * as overHelper from '../over/overHelper';
import * as styleSheet from '../style/styleSheet';
import { Keyboard } from '../shortcut/keyboard';
import * as syra_shortcut from '../shortcut/syra_shortcut';
import { addTracker, IDataTracker, IFusionProps } from '../tracker/trackerController';
import './styles/site.less';
export class SyraGate extends React.Component<{}, {}>{
    globalEvents: GlobalEvents;

    constructor(props: any, context: any) {
        super(props, context);

        this.globalEvents = new GlobalEvents();

        let win = (window as any);

        win.syra_keyboard = new Keyboard();
        win.syra_shortcut = syra_shortcut;
        win.syra_quality = Quality;

        win.syra_context.browser = browser;
        win.syra_context.isRTL = Dom.rtl.on;
        win.syra_context.landscape = function () {
            return browser.landscape;
        };
        win.syra_officeAddin = OfficeAddin;
        win.syra_tip = syra_tip;

        win.syra_dom = Dom;
        win.syra_drag = syra_drag;
        win.syra_sortable = SyraSortable;
        win.syra_dataset = syra_dataset;
        win.syra_expression = syra_expression;
        win.syra_dataset = syra_dataset;
        win.syra_locker = locker;
        win.syra_ajax = syra_ajax;
        win.syra_events = Events;
        win.syra_events.addEventListeners = (root: HTMLElement) => {
            return new NodeEvents(root);
        };
        win.syra_recordCardModal = recordCardModalController;
        win.syra_trackers = {
            addTracker(dataset: IDataTracker, fusionProps?: IFusionProps) {
                addTracker(dataset, fusionProps);
            }
        }
        win.syra_over = {
            closeAll: (box: any, dispose: any) => {
                SyraModal.closeAll(box, dispose);
            },
            activateAll: (box: any, activated: boolean) => {
                SyraModal.activateAll(box, activated);
            },
            openFormModal: (props: SyraPageModal.IFormProps) => {
                SyraPageModal.openFormModal(props);
            },
            openSelectModal: (props: SyraPageModal.ISelectProps) => {
                SyraPageModal.openSelectModal(props);
            },
            loadModal: ($itemPage: any, props: SyraPageModal.IPageOptions, openerBox?: any) => {
                SyraPageModal.loadModal($itemPage, props, openerBox);
            },
            renderPageModal: (page: any, props: SyraPageModal.IPageOptions) => {
                SyraPageModal.renderPageModal(page, props);
            },
            bindZindex: (node?: HTMLElement) => {
                return overHelper.bindZindex(node);
            },
            unbindZindex: () => {
                overHelper.unbindZindex();
            }
        };
        win.syra_popup = syra_popup;

        syra_site.addAuthoringButton = (slot: HTMLElement) => {
            Authoring.addButton(slot);
        };

        syra_site.addBreadcrumPath = (syraPage: any) => {
            return new SyraBreadcrumb(syraPage);
        };
        syra_site.loadStyleSheet = (name: string, extended?: boolean) => {
            styleSheet.load(name, extended);
        };
        win.syra_alert = SyraAlert;
        win.syra_router = syra_router;
        win.syra_form = syra_form;
        win.syra_url = syra_url;
        win.syra_sendBag = syra_sendBag;
        win.syra_locales = SyraLocales;
        win.syra_history = route;
    }
    componentWillUnmount() {
        this.globalEvents && this.globalEvents.dispose();
    }
    render(): any {
        return null;
    }
}