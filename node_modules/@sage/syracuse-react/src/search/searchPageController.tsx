"use strict";
import * as React from 'react';
import { IPageLoadError } from '../page/pageLoader';
import { AlertPage } from '../alert/page/alertPage';
import { IPageProps } from '../page/page';
import { SyraPage, ISyraPageState } from '../page/syraPage';
import { SyraMainPage } from '../page/syraMainPage';
import './search.less';

export class SearchPageController extends React.Component<IPageProps, ISyraPageState> {
    syraPage: SyraPage;
    componentDidMount() {
        this.syraPage = new SyraPage();
        this.syraPage.fetchRepresentation(this.props.sdataUrl, (error) => {
            if (error) {
                this.setState({
                    loadError: error
                });
            }
            else {
                this.syraPage.loadSyraPage(() => this.forceUpdate());
            }
        });
    }
    onViewMount = (body: HTMLElement) => {
        this.syraPage.slotDidMount(body);
        if (this.props.onMainPageLoaded) {
            this.props.onMainPageLoaded(this.syraPage.title, this.syraPage.description, this.syraPage.page);
        }
    }
    componentWillUnmount() {
        this.syraPage && this.syraPage.dispose();
    }
    render() {
        if (this.state && this.state.loadError) {
            return <AlertPage {...this.state.loadError} />;
        }
        else {
            if (this.syraPage && this.syraPage.page) {
                return <SyraMainPage onDidMount={this.onViewMount}
                    onResize={this.syraPage.onResize} />;
            }
        }
        return null;
    }
}