"use strict";
import { route, IUrlState } from './route';
import { showDiagnoses } from '../alert/alert';
import { Ajax, AjaxResponse } from '../ajax/ajax';
import * as syra_expression from '../syra/utility/syra_expression';
import * as syra_url from '../syra/utility/syra_url';
import { Url } from './url';
import * as UUID from '../utility/uuid';
import { syra_site } from '../syra/utility/syra_site';
import { syra_fusion } from '../syra/utility/syra_fusion';
import { addTracker } from '../tracker/trackerController';
import * as SyraPageModal from '../over/modal/page/syraPageModal';
import { syra_form } from '../syra/utility/syra_form';
import * as OfficeAddin from '../office/officeAddin';
import * as SyraAlert from '../syra/alert/syraAlert';
import * as Delta from '../dataStore/delta';
import * as syra_dataset from '../syra/utility/syra_dataset';
import { syra_ajax } from '../syra/utility/syra_ajax';
import * as Storage from '../utility/storage/storage';
import * as Sdata from '../dataStore/sdata';
import { PageLoader, IPageLoadError } from '../page/pageLoader'
import { SyraVignettePage } from '../syra/utility/syraVignettePage';
import { SyraAlertPanel } from '../syra/alert/syraAlertPanel';

function _openTracker(menu: any, menuArticle: any, $url: string, initData?: any) {
    if (menu.$invocationMode == "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
        initData = initData || {};
        initData.$location = $url;
        initData.title = (menu.getTitle && menu.getTitle()) || menu.$title;
        initData.uuid = initData.uuid || menuArticle.dataset.$trackngId;
        let page = menuArticle.page;
        if (page.urlSeg.$facet != "$edit") {
            (initData.$links = initData.$links || {}).$opener = {
                $title: page.getTitle(),
                $url: page.urlSeg.url
            };
        }
        addTracker(initData);
        return true;
    }
}

export function loadVignette(vignettField: any) {
    vignettField.syraVignettePage = new SyraVignettePage(vignettField);
}

export function loadRepresentation(context: any) {
    let url = new Url(context.segments.url || context.segments);
    let loader = new PageLoader(url, context.classicAjaxProps);
    loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
        if (error) {
            if (context.error) {
                context.error();
            }
            else {
                showDiagnoses(error.diagnoses);
            }
        }
        else {

            context.success({
                urlSeg: url,
                $representation: representation
            });
        }
    });
}

export interface IPostProps {
    menu: any,
    article?: any,
    record?: any,
    $method?: string,
    end: (response: AjaxResponse, workingCopyUrl: string) => void
}

export function postQuery(option: IPostProps) {
    let menuArticle = option.article || option.menu.articleParent || syra_site;
    option.menu.$method = option.menu.$method || "POST";
    syra_url.formatMenuUrl(menuArticle, option.menu, option.record, ($url: string) => {
        option.menu.$url = $url;
        let params: any = {};
        if (option.menu.$invocationMode === "async" && option.menu.$trackngId) {
            params.trackngId = option.menu.$trackngId;
            if (option.menu.$capabilities && option.menu.$capabilities.indexOf("abort") >= 0) {
                params.canAbort = true;
            }
        }
        else {
            params.trackingId = UUID.generate();
        }
        let ajax = new Ajax();
        ajax.send({
            page: menuArticle,
            url: $url,
            accept: option.menu.accept || option.menu.$acceptType || option.menu.$type,
            contentType: option.menu.contentType || option.menu.$contentType,
            params: params,
            headers: option.menu.headers,
            method: option.menu.$method,
            data: option.menu.sendData,
            end: (response: AjaxResponse) => {
                let workingCopyUrl = $url;
                if (response.ok) {
                    let workingCopyUrl = response.headers.location
                    if (!workingCopyUrl && response.data.$url) {
                        workingCopyUrl = syra_expression.parse(menuArticle, response.data.$url, response.data);
                    }
                    workingCopyUrl = workingCopyUrl || $url;
                    if (option.menu.$invocationMode === "async") {
                        _openTracker(option.menu, menuArticle, workingCopyUrl, response.data);
                        return;
                    }
                }
                option.end(response, workingCopyUrl);
            }
        });
    });
};

export function executeMenu(menu: any, article?: any, confirmed?: boolean) {
    if (menu.$isAction || menu.$url || menu.$sourceUrl) {
        let menuArticle = article || menu.articleParent || syra_site;
        let menuTitle = (menu.getTitle && menu.getTitle()) || menu.$title;


        if (menu.$url && menu.$url == "{$url}") { //use by search
            menu.$url = syra_expression.parse(menuArticle, menu.$url);
        }
        if (menu.$method && menu.$method.indexOf("{") >= 0) { //use by search
            menu.$method = syra_expression.parse(menuArticle, menu.$method);
        }
        if (menuArticle && menuArticle.dataset) {
            if (menu.$invocationMode === "async") {
                menu.$trackngId = menuArticle.dataset.$trackngId = UUID.generate();
            }
            else {
                delete menu.$trackngId;
                delete menuArticle.dataset.$trackngId;
            }
        }

        if (!confirmed && menu.$confirm && !OfficeAddin.installed(menu, menuArticle, menuTitle, function () {
            executeMenu(menu, article, true)
        })) {
            return;
        }
        if (menu.$isAction) {
            let target = menu.contextField || menuArticle;
            if (target || menuArticle) {
                let request: any = {};
                let r: any = request[menu.$sourceBind || (menu.$item && menu.$item.$bind)] = {
                    $isRequested: true
                };
                if (menu.$invocationMode === "async") {
                    r.$trackingId = UUID.generate();
                }
                if (menu.$parameters) {
                    syra_url.notifyParametersActionChange(menuArticle, menu, null, target, request);
                }
                else {
                    syra_form.postAction(menuArticle.page, menu, target, request);
                }
            }
        }
        else {
            if (menu.$method && (menu.$method != "GET")) {
                if (syra_form.isFormUrl(menu.$url) || syra_form.isFormUrl(menu.$sourceUrl)) {
                    menu.$method = menu.$method || "POST";
                    syra_url.formatMenuUrl(menuArticle, menu, null, ($url: string) => {
                        route.push($url, {
                            $method: menu.$method
                        });
                    });
                    /*syra_form.onBeforeUnloadPage(() => {
                        postQuery({
                            menu: menu,
                            article: menuArticle,
                            end: (response) => {
                                if (response.ok) {
                                    let url = new Url(syra_expression.parse(menuArticle, response.url, response.data));
                                    if (menu.$target == "inline" && menuArticle.isRecordArticle) {
                                        loadRepresentation({
                                            article: null,
                                            segments: url,
                                            success: ($itemPage: any) => {
                                                menuArticle.loadInlinePage(menuArticle, $itemPage);
                                            }
                                        });
                                    } else {
                                        route.push(url.url);
                                    }
                                }
                                else {
                                    showDiagnoses(response.error.diagnoses);
                                }
                            }
                        });
                    });*/
                }
                else {
                    let page = menu.page;
                    postQuery({
                        menu: menu,
                        end: (response) => {
                            if (response.ok) {
                                switch (page.$facet) {
                                    case "$query":
                                    case "$bulk":
                                        page.fetch(null, (lastData: any) => {
                                            if (lastData && response.data.$diagnoses) {
                                                lastData.$diagnoses = lastData.$diagnoses || [];
                                                for (let ii = response.data.$diagnoses.length - 1; ii >= 0; ii--) {
                                                    lastData.$diagnoses.unshift(response.data.$diagnoses[ii]);
                                                }
                                            }
                                            page.startChange();
                                            page.applyChange(lastData);
                                            page.endChange();
                                        });
                                        break;
                                    case "$details":
                                        page.applyChange(response.data);
                                        if (menu.$method == "DELETE") {
                                            let $properties: any = {};
                                            for (let bind in page.boundFields) {
                                                $properties[bind] = {
                                                    $isDisabled: true
                                                };
                                            }
                                            page.applyChange({
                                                $properties: $properties
                                            });
                                            for (let bind in page.menuItems) {
                                                let isDisabled = true;
                                                switch (page.$facet) {
                                                    case "$details":
                                                        isDisabled = (bind != "$query");
                                                        break;
                                                }
                                                if (isDisabled) {
                                                    for (let menu of page.menuItems[bind]) {
                                                        menu.disable(true);
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        if (page) {
                                            page.startChange();
                                            page.endChange();
                                        }
                                        break;
                                }
                            }
                            else {
                                showDiagnoses(response.error.diagnoses);
                            }
                        }
                    });
                }
            }
            else {
                let noPageChange: boolean;
                if (menu.$target) {
                    noPageChange = (menu.$target == "modal") || (menu.$target == "popup") || (menu.$target.indexOf("blank") >= 0);
                }
                if (noPageChange) {
                    runGetMenu(menu, menuArticle);
                }
                else {
                    route.validateChange(() => runGetMenu(menu, menuArticle));
                }
            }
        }
    }
};

function runGetMenu(menu: any, menuArticle: any) {
    syra_fusion.executeFusionFunc(menu, () => {
        switch (menu.$target) {
            case "worksheet":
                syra_site.excelDocument.loadPage({
                    $url: menu.$url,
                    $title: (menuArticle && menuArticle.dataset && menuArticle.dataset.title) || (menu.getTitle && menu.getTitle()) || menu.$title
                });
                break;
            case "modal":
            case "popup":
                SyraPageModal.openDetailModal({
                    authoringDisabled: true,
                    url: syra_expression.parse(menuArticle, menu.$url),
                    onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses)
                });
                break;
            default:
                syra_url.formatMenuUrl(menuArticle, menu, null, ($url: string, isCanceled: boolean) => {
                    if (!isCanceled) {
                        if (_openTracker(menu, menuArticle, $url)) {
                            return;
                        }
                        let segments = new Url($url);
                        let isRepresentationUrl = segments.isRepresentationUrl;
                        let target = menu.$target;
                        if (target == "diagnoses") {
                            let ajax = new Ajax();
                            ajax.get({
                                page: menuArticle,
                                url: $url,
                                end: (response: AjaxResponse) => {
                                    let page = menuArticle && menuArticle.page;
                                    if (page) {
                                        if (response.ok) {
                                            page.startChange();
                                            page.applyChange(response.data, response, response.url);
                                            page.endChange();
                                        }
                                        else {
                                            showDiagnoses(response.error.diagnoses);
                                        }
                                    }
                                }
                            });
                            return;
                        }
                        if (segments.isSyracuse) {
                            // if (segments.uri.search(/mobile\.html/i) > 0 || segments.uri.search(/\$service\/upload/i) > 0) {
                            if (segments.uri.search(/mobile\.html|\$service\/upload/i) > 0) {
                                route.openNewWindow($url, false);
                                return;
                            }
                            if (segments.$facet == "$summary") {
                                SyraPageModal.openDetailModal({
                                    authoringDisabled: true,
                                    url: syra_expression.parse(menuArticle, menu.$url),
                                    onLoadRepresentation: (diagnoses) => diagnoses && showDiagnoses(diagnoses)
                                });
                                return;
                            }
                            else {
                                if (menu.$type && menu.$type.indexOf("json") == -1) {
                                    isRepresentationUrl = false;
                                }
                                else {
                                    let htmIndex = segments.uri.search(/\.html/i);
                                    if (htmIndex > 0) {
                                        //test for excelOfficeConfig.html
                                        if ((segments.uri.length - 5) == htmIndex) {
                                            let currrentUrl = new Url(document.location.href);
                                            if (currrentUrl.uri.indexOf(segments.uri) < 0) {
                                                isRepresentationUrl = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (!segments.isSyracuse
                            || !isRepresentationUrl
                            || (menu.page && (menu.page.inlinePageHost || menu.page.inModal))) {
                            target = "blank";
                        }
                        if (target != "blank" && target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
                            menuArticle.page.vignetteField.renderLayoutContent($url);
                        }
                        else {
                            if (target == "blank") {
                                route.openNewWindow($url, isRepresentationUrl);
                            }
                            else {
                                let urlState = {
                                    editByFusion: segments.isFusion && menu.$bind == "$edit",
                                    $method: menu.$method
                                }
                                if (menu.replaceState) {
                                    route.replace($url, urlState);
                                }
                                else {
                                    route.pushState($url, urlState);
                                    route.renderCurrentUrl();
                                }
                            }
                        }
                    }
                });
                break;
        }
    });
}
function _onAfterActionMenuExecute(menuItem: any, $menu: any, isSuccess: boolean) {
    let page = menuItem.page;
    let isSaved = menuItem.$sourceBind == "$save";
    isSaved && syra_form.storeSdataUrl(page.urlSeg.url);
    let inlinePageHost = page.inlinePageHost;
    if (inlinePageHost) {
        let record = inlinePageHost.record;
        if (isSaved) {
            let $delta: any = {};
            for (let bind in record.$prototype.$properties) {
                if (page.dataset[bind] != undefined) {
                    $delta[bind] = page.dataset[bind];
                }
            }
            syra_dataset.applyDelta(record.page, record.dataset, $delta);
            record.applyChange($delta);
            setTimeout(() => {
                inlinePageHost.dispose(record.list);
            }, 100);
            return false;
        }
    } else {
        if (isSaved && isSuccess) {
            if (page.onServerSaved) {
                page.onServerSaved();
                return false;
            } else {
                let $links = page.$menus.$save.$links;
                let $redirect = $links && ($links.$redirect || $links.$details);
                if ($redirect) {
                    let $url = syra_url.formatMenuUrl(page, $redirect);
                    let $diagnoses: any[] = [];
                    if (page.$menus.$save.$diagnoses) {
                        $diagnoses = $diagnoses.concat(page.$menus.$save.$diagnoses);
                    }
                    syra_form.lastSavingDiagnoses = $diagnoses;
                    executeMenu({
                        replaceState: true,
                        $url: $url
                    }, page);
                    return false;
                }
            }
        }
    }
    return true;
}
export function onActionExecuted(menu: any, $delta: any) {
    let isSuccess = true;
    //check diagnoses
    let dgpn: SyraAlertPanel = menu.page && menu.page.alertPanel as SyraAlertPanel;
    if (dgpn) {
        isSuccess = !dgpn.hasFieldErrors();
        if (dgpn.props && dgpn.props.diagnoses) {
            for (let diagnose of dgpn.props.diagnoses) {
                if (diagnose.severity != "success") {
                    isSuccess = false;
                    break;
                }
            }
        }
    }
    if (menu.$diagnoses) {
        for (let $diagnose of menu.$diagnoses) {
            if ($diagnose.$severity != "success") {
                isSuccess = false;
                break;
            }
        }
    }
    if (menu.articleParent == menu.page) {
        let res = menu.page.onAfterActionMenuExecute ? menu.page.onAfterActionMenuExecute(menu, $delta, isSuccess) : _onAfterActionMenuExecute(menu, $delta, isSuccess);
        if (res === false) {
            $delta.$isRequested = true;
            return false;
        }
    }
    if ($delta.$diagnoses) {
        let $menu = menu.articleParent.$menus[menu.$item.$bind];
        if ($menu && $menu.$links) {
            let $links = $menu.$links || {};
            if ($delta.$links) {
                for (let bind in $delta.$links) {
                    let source = $delta.$links[bind];
                    let target = $links[bind] = $links[bind] || {};
                    for (let prop in source) {
                        target[prop] = source[prop];
                    }
                }
            }
            for (let bind in $links) {
                let $link = $links[bind];
                $link.$bind = bind + "-" + menu.id;
                $link.$url = syra_url.formatMenuUrl(menu.articleParent, $link);
            }
            SyraAlert.show($delta.$diagnoses, menu.articleParent, "error", false, $links);
        }
        else {
            SyraAlert.show($delta.$diagnoses, menu.articleParent);
        }
    }

    if ($delta.$links && $delta.$links.$location) {
        let $url = $delta.$links.$location.$url;
        setTimeout(() => {
            syra_site.dispose();
            window.open($url, "_self");
        }, 100);
    }
    if ($delta.$location && menu.$invocationMode == "async") {
        addTracker({
            $location: $delta.$location,
            $state: $delta.$state,
            title: menu.getTitle(),
            $uuid: $delta.$location.split(/'/)[1]
        });
    }
    $delta.$isRequested = true; //avoid processing action for other menu bound to $menu (create menu for sample)
    return true;
}