"use strict";
import * as UrlParameter from './urlParameter';
import { Url } from './url';
import * as Expression from '../dataStore/expression';
import * as Sdata from '../dataStore/sdata';
import { getLocalString } from '../culture/localString';
export const homeUrl = "?representation=home.$landing&profile={$userprofile}";

export interface IUrlState {
	editByFusion?: boolean,
	sageErpX3?: boolean,
	$method?: string,
	$url?: string;
	index?: number
}

export interface IRouter {
	onPush: (url: string, state?: IUrlState) => void,
	onRefresh: () => void,
	logout: () => void,
	validateChange: (next: () => void, onHistoryChange?: boolean) => void
}

let mainRouter: IRouter;

export function bindRouter(router: IRouter) {
	mainRouter = router;
}

class Route {
	private _titleSuffix: string;
	private _title: string;
	private _descripion: string;
	private _lastUpdatedState: IUrlState = {};
	private changeCanceled: boolean;
	private _reloading: boolean;
	private indexState: number = 0;

	gotoHome = (replace?: boolean) => {
		let curUrl = new Url(this.currentUrl);
		let url = Expression.parse({}, homeUrl);
		if (replace || curUrl.$facet == "$landing") {
			this.replace(url);
		}
		else {
			this.push(url);
		}
	}
	gotoLogon = () => {
		window.setTimeout(window.open("/", "_self"), 100);
	}
	replace(url: string, state?: IUrlState) {
		this.replaceState(url, state);
		this.renderCurrentUrl();
	}
	push(url: string, state?: IUrlState) {
		mainRouter.onPush(url, state);
	}
	validateChange(next: () => void, onHistoryChange?: boolean) {
		mainRouter.validateChange(next, onHistoryChange);
	}
	logout() {
		mainRouter.logout();
	}
	renderCurrentUrl() {
		mainRouter.onRefresh();
	}
	get reloading(): boolean {
		return this._reloading;
	}
	get isX3Previous(): boolean {
		let state = window.history.state;
		return state && state.sageErpX3;
	}
	get isX3Next(): boolean {
		let state = window.history.state as IUrlState;
		return state && state.sageErpX3 && this._lastUpdatedState.sageErpX3 && state.$url != this._lastUpdatedState.$url;
	}
	get lastUpdatedState(): IUrlState {
		return this._lastUpdatedState;
	}
	get currentUrState(): IUrlState {
		return window.history.state as IUrlState;
	}
	get currentUrl(): string {
		return UrlParameter.decode(document.location.href);
	}
	get currentTitle(): string {
		return this._title;
	}
	get currentDescription(): string {
		return this._descripion;
	}
	setCurrentTitle(title: string, facet: string, description: string) {
		this._title = title;
		this._descripion = description;
		switch (facet) {
			case Sdata.Facet.edit:
				title += " - " + getLocalString("tab_browser_facet_edit") + " ";
				break;
			case Sdata.Facet.detail:
				title += " - " + getLocalString("tab_browser_facet_details") + " ";
				break;
		}
		this.updateDocumentTitle();
	}
	set currentTitleSuffix(suffix: string) {
		this._titleSuffix = suffix;
		this.updateDocumentTitle();
	}
	private updateDocumentTitle() {
		if (this._title) {
			document.title = this._title + (this._titleSuffix || "");
		}
	}
	back() {
		if (window.history.length > 1 && this.lastUpdatedState && this.lastUpdatedState.index > 1) {  //} && document.referrer) {
			window.history.back();
		}
		else {
			this.gotoHome(true);
		}
	}
	forward() {
		window.history.forward();
	}
	openNewWindow($url: string, isRepresentation?: boolean) {
		$url && window.open(isRepresentation ? UrlParameter.encode($url) : $url, "_blank");
	}
	replaceState($url: string, state?: IUrlState) {
		let param = UrlParameter.encode($url);
		window.history.replaceState(this.updateState($url, state), param, param);
	}
	pushState($url: string, state?: IUrlState) {
		let param = UrlParameter.encode($url);
		window.history.pushState(this.updateState($url, state), param, param);
	}
	private updateState($url: string, state?: IUrlState) {
		this._lastUpdatedState = state || {};
		if (!this._lastUpdatedState.index) {
			this._lastUpdatedState.index = (++this.indexState);
		}
		this._lastUpdatedState.$url = $url;
		this._lastUpdatedState.sageErpX3 = true;
		return this._lastUpdatedState;
	}
	reload = () => {
		this._reloading = true;
		document.location.reload(true);
	}

}

export const route = new Route();