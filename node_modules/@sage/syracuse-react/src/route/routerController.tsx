"use strict";
import * as React from 'react';
import { alertBox } from '../alert/alert';
import { syra_fusion } from '../syra/utility/syra_fusion';
import { syra_site } from '../syra/utility/syra_site';
import { getLocalString } from '../culture/localString';
import { route, bindRouter, IRouter, IUrlState } from './route';
import * as UrlParameter from './urlParameter';
import { syra_form } from '../syra/utility/syra_form';

export default class RouterController extends React.Component<{
    onLogout: () => void,
    onChange: (url: string) => void
}, {}> implements IRouter {
    changeCanceled: boolean;
    componentDidMount() {
        bindRouter(this);
        this.onRefresh();
        this.bindHistoryChange();
    }
    bindHistoryChange() {
        var self = this;
        window.onpopstate = function (event: any) {
            if (self.changeCanceled) {
                self.changeCanceled = false;
            } else {
                self.onRefresh(true)
            }
        };
    }
    logout() {
        this.props.onLogout();
    }
    componentWillUnmount() {
        window.onpopstate = null;
        bindRouter(null);
    }
    onPush(url: string, state?: IUrlState) {
        this.validateChange(() => {
            url = UrlParameter.decode(url)
            route.pushState(url, state);
            this.props.onChange(url);
        });
    }
    onRefresh(onHistoryChange?: boolean) {
        this.validateChange(() => this.props.onChange(route.currentUrl), onHistoryChange);
    }
    validateChange(next: () => void, onHistoryChange?: boolean) {
        if (onHistoryChange) {
            syra_form.onBeforeUnloadPage(() => this.closeClassicPage(next, onHistoryChange));
        }
        else {
            this.closeDesigner(() => syra_form.onBeforeUnloadPage(() => this.closeClassicPage(next)));
        }
    }
    closeClassicPage(next: () => void, onHistoryChange?: boolean, ) {
        if (syra_fusion && syra_fusion.book) {
            syra_fusion.isClosingAll = true;
            syra_fusion.book.onCloseAllSheets((allSheetsClosed: boolean) => {
                syra_fusion.isClosingAll = false;
                if (!allSheetsClosed) {
                    if (syra_fusion.confirmCloseClassicOpened) {
                        syra_fusion.confirmCloseClassicNext = next;
                    }
                    if (onHistoryChange) {
                        this.changeCanceled = true;
                        history.forward();
                    }
                }
                else next();
            });
            return;
        }
        next();
    }
    closeDesigner(next: () => void) {
        let designer = syra_site.mainPage && syra_site.mainPage.designer;
        if (designer) {
            if (designer.pageStorage && designer.history.isUpdated) {
                alertBox({
                    severity: "info",
                    title: getLocalString("aw_updateMessageTitle"),
                    message: getLocalString("aw_cancelMessageText"),
                    buttons: {
                        mode: "yes,no,cancel"
                    },
                    onClose: (closeBy: string) => {
                        switch (closeBy) {
                            case "yes":
                                designer.pageStorage.saveUpdate();
                                window.setTimeout(() => {
                                    designer.closeDesigner();
                                    next();
                                }, 300);
                                break;
                            case "no":
                                designer.closeDesigner();
                                next();
                                break;
                        }
                    }
                });
                return;
            }
            designer.closeDesigner();
        }
        next();
    }
    render() {
        return <noscript />;
    }
}