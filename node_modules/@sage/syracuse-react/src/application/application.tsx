"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../utility/html/dom';
import * as Sdata from '../dataStore/sdata';
import { Profile } from '../profile/profile';
import { ProfileController } from '../profile/profileController';
import * as Events from '../event/events';
import { IPageController } from '../page/IPageController';
import { AjaxWatcher } from '../ajax/ajaxWatcher';
import { SyraGate } from '../syra/syraGate';
import { syra_site } from '../syra/utility/syra_site';
import { Url } from '../route/url';
import { OVER_ROOT_ID } from '../over/overHelper';
import { syra_fusion } from '../syra/utility/syra_fusion';
import { syra_menus } from '../syra/utility/syra_menus';
import *  as syra_router from '../route/syra_router';
import { route } from '../route/route';
import { getLocalString } from '../culture/localString';
import { alertBox } from '../alert/alert';
import * as browserSupport from '../utility/browser/browserSupport';
import { browser } from '..//utility/browser/browser';
import Quality from '../quality/quality';
import * as Storage from '../utility/storage/storage';
import * as pageFactory from '../page/pageFactory';
import RouterController from '../route/routerController';
import * as ProfileActions from '../profile/actions';
import * as UUID from '../utility/uuid';
import { BookmarkMenu } from '../navigation/bookmark/bookmarkMenu';
import * as BookmarkController from '../navigation/bookmark/bookmarkController';
import { IPageProps } from '../page/page';
import { OfficeController } from '../office/officeController';
import AlertController from '../alert/alertController';
import Lock from '../over/lock/lock';
import './application.less';

export default class Application extends React.Component<{}, {
    profile?: Profile,
    office: OfficeController,
    mainPageProps?: IPageProps
    fullReactMode?: boolean,
    robotMode: boolean
}> {
    profileController: ProfileController;
    constructor(props: any, context: any) {
        super(props, context);
        browserSupport.detect();
        this.state = {
            office: OfficeController.detect(),
            robotMode: false,
            fullReactMode: Storage.session.get("fullReactMode") == "1"
        };
        //hack for mainpag, user by classicPage
        (window as any).syra_app = {
            ensureMainPage: this.ensureMainPage
        }
    }
    componentWillUnmount() {
        this.listenWindowUnload(false);
        Events.dispose();
        (window as any).syra_app = null;
        this.profileController = null;
    }
    listenWindowUnload(on: boolean) {
        let self = this;
        if (on) {
            if (!this.state.robotMode && !this.state.office) {
                window.onbeforeunload = function (event) {
                    let message: string;
                    if (syra_fusion.book) {
                        message = getLocalString("disconnect_convergence_unload").replace("{booksNb}", "1");
                        let url = syra_fusion.book && syra_fusion.book.urlSeg;
                        if ((url && url.params && url.params.discardUnloadEvent) == "true") {
                            return;
                        }
                    }
                    else {
                        if (!route.reloading && !self.state.profile.developpementMode) {
                            message = getLocalString("disconnect_unload");
                        }
                    }
                    if (message) {
                        if (["chrome", "safari", "msie"].indexOf(browser.name) < 0) {
                            alertBox({
                                message: message,
                                severity: "warning",
                                autoClose: 2500
                            });
                        }
                        event = event || window.event;
                        if (event) {
                            event.returnValue = message;
                        }
                        return message;
                    }
                }
            };
        }
        else {
            window.onbeforeunload = null;
        }
    }
    onSwitchApplicationMode = (event: React.MouseEvent<HTMLElement>) => {
        if (event.shiftKey) {
            if (event.ctrlKey) {
                let newVal = !this.state.fullReactMode;
                Storage.session.set("fullReactMode", newVal ? "1" : "0");
                this.setState({
                    fullReactMode: newVal
                });
            }
            event.altKey && this.onSwitchRobotMode();
        }
    }
    onSwitchRobotMode = () => {
        this.setState({
            robotMode: true
        });
    }
    ensureMainPage = () => {
        if (this.profileController.state.sitemapOpened) {
            this.profileController.onToggleSitemap();
        }
    }
    onRouteChange = (url: string) => {
        this.ensureMainPage();
        this.setState({
            mainPageProps: {
                office: this.state.office,
                key: UUID.generate(),
                openedFrom: this.state.mainPageProps && this.state.mainPageProps.sdataUrl,
                sdataUrl: new Url(url),
                onMainPageLoaded: this.onMainPageLoaded,
                profile: this.state.profile
            }
        });
    }
    onMainPageLoaded = (title: string, description: string, syraPage: any) => {
        route.setCurrentTitle(title, this.state.mainPageProps.sdataUrl.$facet, description);
        if (syraPage) {
            syra_site.mainPage = syraPage;
        }
    }
    onLogout = () => {
        ProfileActions.logout(() => this.listenWindowUnload(false));
    }
    onProfileReady = (profile: Profile) => {
        this.listenWindowUnload(true);
        this.setState({
            profile: profile
        });
    }
    onBookmarked = () => {
        if (this.state.mainPageProps) {
            BookmarkController.toggleMenu(this.state.profile, this.state.mainPageProps.sdataUrl, route.currentTitle, route.currentDescription, () => this.forceUpdate());
        }
    }
    onBookmarkClick = (menu: BookmarkMenu) => {
        syra_menus.click.fire({
            menu: {
                $url: menu.url.url
            }
        });
    }
    render() {
        let mainPageProps = this.state.mainPageProps;
        let mainPageUrl = mainPageProps && mainPageProps.sdataUrl;
        return <article id='s_app'>
            <SyraGate />
            <ProfileController
                ref={(controller) => this.profileController = controller}
                office={this.state.office}
                onSwitchApplicationMode={this.onSwitchApplicationMode}
                profile={this.state.profile}
                onLogout={this.onLogout}
                onReady={this.onProfileReady}
                searchFacet={mainPageUrl && mainPageUrl.$facet == Sdata.Facet.search}
                classicMode={mainPageUrl && mainPageUrl.isFusion}
                bookmarkDisabled={!mainPageProps || mainPageUrl.$facet == '$navigation' || mainPageUrl.$facet == '$landing' || mainPageUrl.$facet == '$landing_edit'}
                mainPageBookmark={this.state.profile && this.state.profile.bookmarks.matchBookmark(mainPageUrl)}
                onBookmarkClick={this.onBookmarkClick}
                onBookmarked={this.onBookmarked} />
            {this.state.profile && <RouterController onChange={this.onRouteChange} onLogout={this.onLogout} />}
            <div id={Dom.site.body.id}>
                {mainPageProps && pageFactory.create(mainPageProps, this.state.fullReactMode)}
            </div>
            <AjaxWatcher />
            <div id={OVER_ROOT_ID}>
                {!this.state.office && <Quality profile={this.state.profile} robotMode={this.state.robotMode} onSwitchRobotMode={this.onSwitchRobotMode} />}
                <Lock />
                <AlertController />
            </div>
        </article>;
    }
}

ReactDom.render(<Application />, Dom.site.slot);   