"use strict";
export const CSS_IN = "s_app_visible_body";
export const CSS_OUT = "s_app_hidden_body";

interface IDirection {
    cssOut: string
    cssIn: string
};

export const enum Direction {
    ToBottom = 0,
    ToTop = 1
}

const directions: IDirection[] = [{
    cssOut: "s_app_moveToBottom",
    cssIn: "s_app_moveFromTop"
}, {
    cssOut: "s_app_moveToTop",
    cssIn: "s_app_moveFromBottom"
}];

export class AppPageSlider {
    curEnded: boolean;
    nextEnded: boolean;

    constructor(private cur: HTMLElement, private next: HTMLElement, direction: Direction, private onEnd?: () => void) {
        let dir = directions[direction];
        this.cur.className += (" " + dir.cssOut);
        this.cur.addEventListener("animationend", this.onCurAnimationEnd, false);
        this.next.className += (" " + dir.cssIn);
        this.next.addEventListener("animationend", this.onNextAnimationEnd, false);
    }

    onCurAnimationEnd = () => {
        this.cur.removeEventListener("animationend", this.onCurAnimationEnd);
        this.curEnded = true;
        this.nextEnded && this.onEndAnimation();
    }
    onNextAnimationEnd = () => {
        this.next.removeEventListener("animationend", this.onNextAnimationEnd);
        this.nextEnded = true;
        this.curEnded && this.onEndAnimation();
    }
    onEndAnimation() {
        this.nextEnded = this.curEnded = false;
        this.cur.className = CSS_OUT;
        this.next.className = CSS_IN;
        this.onEnd && this.onEnd();
        //isAnimating = false;
    }

    dispose() {
        this.cur.removeEventListener("animationend", this.onCurAnimationEnd);
        this.next.removeEventListener("animationend", this.onNextAnimationEnd);
        this.onEnd = this.cur = this.next = null;
    }
}