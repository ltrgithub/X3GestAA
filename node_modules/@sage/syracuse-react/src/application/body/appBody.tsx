"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../../utility/html/dom';
import { SitemapPageController } from '../../navigation/sitemap/page/sitemapPageController';
import { IPageProps } from '../../page/page';
import * as pageFactory from '../../page/pageFactory';
import './appBody.less';

export default class AppBody extends React.Component<{
    mainPageProps?: IPageProps,
    fullReactMode?: boolean
}, {}> {
    bodyTop: HTMLDivElement;
    bodyBottom: HTMLDivElement;
    sitemapOpened?: boolean;
    triggerToggle: () => void;

    showMainPage() {
        this.sitemapOpened && this.triggerToggle();
    }
    componentWillUnmount() {
        this.triggerToggle = this.bodyTop = this.bodyBottom = null;
    }
    onToggleSitemap = (triggerToggle: () => void) => {
        this.triggerToggle = triggerToggle;
        this.sitemapOpened = !this.sitemapOpened;
        if (!this.sitemapOpened) {
            this.bodyBottom.className = "";
            this.bodyTop.className = "";
            ReactDom.unmountComponentAtNode(this.bodyTop);
        }
        else {
            this.bodyTop.className = "s_app_body_top_visble";
            ReactDom.render(<SitemapPageController profile={this.props.mainPageProps.profile} />, this.bodyTop);
            this.bodyBottom.className = "s_app_body_bottom_hidden";

        }
    }
    render() {
        return <div id={Dom.site.body.id}>
            <div id="s_app_body_top" ref={(item) => this.bodyTop = item} />
            <div id="s_app_body_bottom" ref={(item) => this.bodyBottom = item} >
                {this.props.mainPageProps && pageFactory.create(this.props.mainPageProps, this.props.fullReactMode)}
            </div>
        </div>
    }
}