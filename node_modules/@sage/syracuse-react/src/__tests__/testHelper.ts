"use strict";

const sc = require('./mock/syra_core.json');

const BODY_ID = "s_app_body";
const SLOT_ID = "s_app_slot";
process.env.NODE_ENV = 'test';
global.sessionStorage = {
    getItem: function (key: any) {
        return this[key];
    },
    setItem: function (key: any, value: any) {
        this[key] = value;
    },
    removeItem: function (key: any) {
        delete this[key];
    }
};

global.localStorage = {
    getItem: function (key: any) {
        return this[key];
    },
    setItem: function (key: any, value: any) {
        this[key] = value;
    },
    removeItem: function (key: any) {
        delete this[key];
    }
};
global.syra_core = sc;
global.syra_menus = {
    click: {
        fire: jest.fn()
    }
}

import { Bookmarks } from './../navigation/bookmark/bookmarks';
import { Sitemap } from './../navigation/sitemap/sitemap';
import { Profile } from './../profile/profile';
import { IEndpoint } from './../profile/endpoint';
import { SitemapModule } from './../navigation/sitemap/groups';

import Store from './../dataStore/store';

class Fixtures {

    private loadedMockFiles: any = [];

    private _loadMockFile(filename: string): any {
        if (this.loadedMockFiles.hasOwnProperty(filename)) {
            return JSON.parse(JSON.stringify(this.loadedMockFiles[filename]));
        } else {
            let loadedFileContent = require('./mock/' + filename + '.json');
            this.loadedMockFiles[filename] = JSON.parse(JSON.stringify(loadedFileContent));
            return loadedFileContent;
        }
    }

    getBookmarks(profileEndpoint: IEndpoint, dataFilename: string = 'bookmark_data'): Bookmarks {
        return new Bookmarks(this._loadMockFile('data/' + dataFilename), profileEndpoint);
    }

    getProfile(dataFilename: string = 'profile_data'): Profile {
        return new Profile(this._loadMockFile('prototype/profile_prototype'), this._loadMockFile('data/' + dataFilename));
    }

    getProfilePopulated(dataFilename: string = 'profile_data'): Profile {
        let profile = this.getProfile(dataFilename);
        let sitemap = this.getSitemap();
        let store = this.getStoreWithDataset('sitemap_data');

        let bookmarks = this.getBookmarks(profile.selectedEndpoint);

        let modules: SitemapModule[] = [];
        if (store.dataset.modules) {
            for (let mod of store.dataset.modules) {
                modules.push(new SitemapModule(sitemap, mod));
            }
            modules[0].selected = true;
        }
        profile.sitemap = sitemap;
        profile.bookmarks = bookmarks;
        profile.dataset.user = { firstName: 'James' };

        return profile;
    }

    getSitemap(dataFilename: string = 'sitemap_data'): Sitemap {
        return new Sitemap(this._loadMockFile('prototype/sitemap_prototype'), this._loadMockFile('data/' + dataFilename));
    }

    getStoreWithDataset(dataFilename: string): Store {
        return new Store(null, this._loadMockFile('data/' + dataFilename));
    }
}

class TestHelper {
    init() {

        let el = document.createElement('div');
        el.setAttribute('id', 's_app_slot');
        document.body.appendChild(el);
    }

    fixtures = new Fixtures()
}

export default new TestHelper();