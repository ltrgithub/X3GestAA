"use strict";

const enableFakeSessionStorage = () => {
    global.sessionStorage = {
        getItem: function (key: any) {
            return this[key];
        },
        setItem: function (key: any, value: any) {
            this[key] = value;
        },
        removeItem: function (key: any) {
            delete this[key];
        }
    };
}

const enableFakeLocalStorage = () => {
    global.localStorage = {
        getItem: function (key: any) {
            return this[key];
        },
        setItem: function (key: any, value: any) {
            this[key] = value;
        },
        removeItem: function (key: any) {
            delete this[key];
        }
    };
}

const BODY_ID = "s_app_body";
const SLOT_ID = "s_app_slot";

process.env.NODE_ENV = 'test';
process.on('unhandledRejection', (error: any) => {
    console.log(error.stack);
});

global.syra_core = require('./mock/syra_core.json');
global.syra_menus = {
    click: {
        fire: jest.fn()
    }
};
global.syra_context = {
    developpementMode: true
};
global.syra_site = {
    _hasNewAddin: false,
    showExtensions: jest.fn()
};

enableFakeLocalStorage();
enableFakeSessionStorage();

import { Bookmarks } from './../navigation/bookmark/bookmarks';
import { Sitemap } from './../navigation/sitemap/sitemap';
import { Profile, IRole } from './../profile/profile';
import { IEndpoint } from './../profile/endpoint';
import { SitemapModule } from './../navigation/sitemap/groups';
import { OVER_ROOT_ID } from './../over/overHelper';
import { Ajax } from '../ajax/ajax';
import Store from './../dataStore/store';

class Fixtures {

    private loadedMockFiles: any = [];

    private _loadMockFile(filename: string): any {
        if (this.loadedMockFiles.hasOwnProperty(filename)) {
            return JSON.parse(JSON.stringify(this.loadedMockFiles[filename]));
        } else {
            let loadedFileContent = require('./mock/' + filename + '.json');
            this.loadedMockFiles[filename] = JSON.parse(JSON.stringify(loadedFileContent));
            return loadedFileContent;
        }
    }

    getBookmarks(profileEndpoint: IEndpoint, dataFilename: string = 'bookmark_data'): Bookmarks {
        return new Bookmarks(this._loadMockFile('data/' + dataFilename), profileEndpoint);
    }

    getProfile(dataFilename: string = 'profile_data'): Profile {
        return new Profile(this._loadMockFile('prototype/profile_prototype'), this._loadMockFile('data/' + dataFilename));
    }

    getEndpoints(dataFilename: string = 'endpoints_data'): IEndpoint[] {
        let fileContent: any = this._loadMockFile('data/' + dataFilename) as any;
        return fileContent.$resources as IEndpoint[];
    }

    getRoles(dataFilename: string = 'roles_data'): IRole[] {
        let fileContent: any = this._loadMockFile('data/' + dataFilename) as any;
        return fileContent.$resources as IRole[];
    }

    getProfilePopulated(dataFilename: string = 'profile_data'): Profile {
        let profile = this.getProfile(dataFilename);
        let sitemap = this.getSitemap();
        let store = this.getStoreWithDataset('sitemap_data');

        let bookmarks = this.getBookmarks(profile.selectedEndpoint);

        let modules: SitemapModule[] = [];
        if (store.dataset.modules) {
            for (let mod of store.dataset.modules) {
                modules.push(new SitemapModule(sitemap, mod));
            }
            modules[0].selected = true;
        }
        profile.sitemap = sitemap;
        profile.bookmarks = bookmarks;
        profile.dataset.user = { firstName: 'James' };
        profile.endpoints = this.getEndpoints();
        profile.roles = this.getRoles();

        return profile;
    }

    getSitemap(dataFilename: string = 'sitemap_data'): Sitemap {
        return new Sitemap(this._loadMockFile('prototype/sitemap_prototype'), this._loadMockFile('data/' + dataFilename));
    }

    getStoreWithDataset(dataFilename: string): Store {
        return new Store(null, this._loadMockFile('data/' + dataFilename));
    }
}

class Simulate {
    click(element: Element) {
        let ev = document.createEvent('Event');
        ev.initEvent('click', true, true);
        element.dispatchEvent(ev);
    }
}

class TestHelper {

    appSlotNode: HTMLDivElement;
    appBodyNode: HTMLDivElement;
    overContainer: HTMLDivElement;
    fixtures: Fixtures = new Fixtures();
    simulate: Simulate = new Simulate();

    ajaxSetupStub: jest.MockInstance<(languageCode: string, retryOnError?: number) => void>;
    constructor() {
        this.addAppSlotNode();
        this.addAppBodyNode();
        this.addAppOverContainerNode();
        this.stubAjax();
    }

    addAppSlotNode(): HTMLDivElement {
        if (!this.appSlotNode) {
            this.appSlotNode = document.createElement('div');
            this.appSlotNode.setAttribute('id', SLOT_ID);
            document.body.appendChild(this.appSlotNode)
        }

        return this.appSlotNode;
    }

    addAppOverContainerNode() {
        if (this.addAppSlotNode() && !this.overContainer) {
            this.overContainer = document.createElement('div');
            this.overContainer.setAttribute('id', OVER_ROOT_ID);
            this.appSlotNode.appendChild(this.overContainer);
        }

        return this.overContainer;
    }

    addAppBodyNode(): HTMLDivElement {
        if (!this.appBodyNode) {
            this.appBodyNode = document.createElement('div');
            this.appBodyNode.setAttribute('id', BODY_ID);
            document.body.appendChild(this.appBodyNode);
        }

        return this.appBodyNode;
    }

    cleanPopups() {
        if (this.overContainer) {
            let popup;
            while (popup = this.overContainer.querySelector('.s_popup')) {
                this.overContainer.removeChild(popup);
            }
        }
    }

    stubAjax() {
        this.ajaxSetupStub = jest.spyOn(Ajax, 'setup').mockImplementation(jest.fn());
    }

    unstubAjax() {
        this.ajaxSetupStub.mockClear();
    }

    removeAppSlotNode() {
        document.removeChild(this.appSlotNode);
        this.appSlotNode = null;
    }

    removeAppBodyNode() {
        document.removeChild(this.appBodyNode);
        this.appBodyNode = null;
    }
    createFakeLocalStorage() {
        if (!global.localStorage) {
            enableFakeLocalStorage();
        }
    }
    deleteFakeLocalStorage() {
        delete global.localStorage;
    }

    createFakeSessionStorage() {
        if (!global.sessionStorage) {
            enableFakeSessionStorage();
        }
    }

    deleteFakeSessionStorage() {
        delete global.sessionStorage;
    }

    returnPromise<T>(returnValue: T): () => Promise<T> {
        return (): Promise<T> => {
            return new Promise<T>((res) => {
                res(returnValue);
            });
        }
    }
}

export default new TestHelper();