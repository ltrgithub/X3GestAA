"use strict";
import * as Sdata from '../dataStore/sdata';
import { Ajax, AjaxResponse, IAjaxProps } from '../ajax/ajax';
import Store from '../dataStore/store';
import * as Delta from '../dataStore/delta';
import * as Expression from '../dataStore/expression';
import { getLocalString } from '../culture/localString';
import { alertBox } from '../alert/alert';

export interface IDataTracker {
    $uuid: string,
    $location: string,
    title: string,
    kind?: string,
    phase?: string
    phaseDetail?: string
    progress?: number,
    elapsedSeconds?: number,
    remainingSeconds?: number,
    pollingMillis?: number,
    startDate?: number,
    startTime?: number,
    $diagnoses?: Sdata.IDiagnose[],
    $links?: any,
    $state: any,
    isProcessing?: boolean
}
export interface IFusionProps {
    onLoaded: (tracker: Tracker) => void,
    release: () => void,
    cancelSvcId?: string
}
export class Tracker {
    ajax: Ajax;
    asynchReq: any[];
    store: Store;
    constructor(dataset: IDataTracker, public fusionProps?: IFusionProps) {
        this.store = new Store();
        dataset.kind = dataset.kind || "operation";
        dataset.$uuid = dataset.$uuid || (dataset as any).uuid;
        this.applyChange(dataset, dataset.isProcessing === false); // test on processing for testcase
        if (!(dataset as any).isTestCase) {
            if (this.fusionProps) {
                this.fusionProps.onLoaded(this);
            } else {
                this.sendRequest({
                    url: this.store.dataset.$location,
                });
            }
        }
    }
    sendRequest(props: IAjaxProps) {
        this.ajax = new Ajax();
        props.end = props.end || this.onResponse;
        this.ajax.send(props);
    }
    confirmAction(bind: string, confimed: () => void) {
        bind = bind.slice(1);
        alertBox({
            message: getLocalString("tracker_" + bind + "_msg").replace("{title}", this.store.dataset.title).replace("{kind}", this.store.dataset.kind),
            title: getLocalString("tracker_" + bind + "_title"),
            severity: "warning",
            autoClose: 25000,
            buttons: {
                mode: "yes,no",
                focusByDefault: "no"
            },
            onClose: (closeBy: string) => closeBy == "yes" && confimed()
        });
    }
    cancelAsynchRequest() {
        if (this.asynchReq && this.asynchReq.length > 0) {
            for (let asyncReq of this.asynchReq) {
                clearTimeout(asyncReq);
            }
        }
    }
    onRequestError(response: AjaxResponse, ignoreOpComplete: boolean) {
        let diagnoses = response.error.diagnoses;
        if (!diagnoses) {
            diagnoses = [{
                $severity: "error",
                $message: getLocalString("tracker_err_without_diag").replace("{status}", response.status.toString())
            }];
        }
        this.applyChange({
            $diagnoses: diagnoses
        }, true);
        !ignoreOpComplete && this.fusionProps && this.fusionProps.release();
    }
    onResponse = (response: AjaxResponse) => {
        if (response.ok) {
            let props: IAjaxProps = {
                method: "GET",
                url: response.headers.location,
                end: this.onResponse
            };
            if (this.fusionProps || (response.status != 204 && response.data != undefined)) {
                this.applyChange(response.data, response.status == 200, response.url);
            }
            switch (response.status) {
                case 200:
                    this.cancelAsynchRequest();
                    if (this.fusionProps) {
                        if (response.url && response.url.indexOf("/print/$report") != -1) {
                            window.open(response.url, "_blank");
                        }
                        this.fusionProps && this.fusionProps.release();
                    }
                    else {
                        // in case of asynch service operation, clean on success
                        if (response.url && response.url.indexOf("/sdata/$trackers") != -1) {
                            if (response.headers && response.headers['$do-not-delete']) {
                                // Actually do not forward the final response to not erase async job data ($diagnoses...)
                                // Do not DELETE tracker to be able to retrieve the final response throught $details link
                                //self.sendRequest(this.buildReqOpt("GET", response.data.$links.$details.$url));
                            }
                            else {
                                props.method = "DELETE";
                                this.sendRequest(props);
                            }
                        }
                    }
                    break;
                case 201:
                    if (this.fusionProps && response.headers.location.indexOf("/print/$report") != -1) {
                        props.accept = this.store.dataset.mime;
                    }
                    this.sendRequest(props);
                    break;
                case 202:
                    // 202 => server processes request asynchronously
                    // do not send further request if a suspend request has been sent
                    if (response.url.indexOf("suspend=true") < 0) {
                        this.asynchReq = this.asynchReq || [];
                        this.asynchReq.push(window.setTimeout(() => {
                            this.sendRequest(props);
                        }, response.data.pollingMillis));
                    }
                    break;
                case 424:
                    if (response.url && response.url.indexOf("/sdata/$trackers") != -1) {
                        props.method = "DELETE";
                        this.sendRequest(props);
                    }
                    break;
            }
        }
        else {
            this.onRequestError(response, false);
        }
    }
    onLinkClick = (bind: string) => {
        let $menu = this.store.getMenu(bind);
        let $url = Expression.parse(this.store.dataset, $menu.$url);
        switch (bind) {
            case "$download":
                if (($menu as any).$verifyUrl) {
                    var $verifyMenu = Delta.clone($menu);
                    $verifyMenu.$sourceUrl = $verifyMenu.$url = $verifyMenu.$verifyUrl;
                    delete $verifyMenu.$verifyUrl;
                    let $verifyUrl = Expression.parse(this.store.dataset, $verifyMenu.$url);
                    this.sendRequest({
                        url: $verifyUrl,
                        accept: this.store.dataset.mime,
                        end: (response) => {
                            if (response.ok) {
                                window.open($url, "_blank");
                            }
                            else {
                                this.onRequestError(response, true);
                            }
                        }
                    });
                    return;
                }
                window.open($url, "_blank");
                break;
            case "$cancel":
                this.confirmAction(bind, () => this.onClientRelease());
                break;
            case "$abort":
            case "$suspend":
            case "$resume":
                this.confirmAction(bind, () => this.onClientRelease($url, $menu.$method));
                break;
            default:
                window.open($url, '_self').focus();
                break;
        }
    }
    applyChange(newData: any, success?: boolean, $url?: string) {
        this.store.dataset.isProcessing = !success;
        if (this.fusionProps) {
            if (success && $url && $url.indexOf("/print/$report") != -1) {
                newData = {
                    $links: {
                        $download: {
                            $title: getLocalString("trackers_download_label"),
                            $url: $url
                        }
                    }
                };
            }
            newData.$links = newData.$links || {};
            newData.$links.$cancel = {
                $title: getLocalString("trackers_cancel_label"),
                $isHidden: !(this.fusionProps.cancelSvcId && !success)
            };
        }
        this.store.applyDelta(newData);
        onChangeHandler(this);
    }
    private onClientRelease($url?: string, $method?: string) {
        this.cancelAsynchRequest();
        if (this.fusionProps) {
            if (this.fusionProps.cancelSvcId) {
                this.sendRequest({
                    url: Expression.parse(this.store.dataset.services[this.fusionProps.cancelSvcId], this.store.dataset.$location)
                });
                this.fusionProps.release();
            }
        } else {
            $url &&
                this.sendRequest({
                    method: $method as Sdata.HttpMethodType,
                    url: $url
                });
        }
    }
    dispose() {
        this.ajax && this.ajax.dispose();
    }
}

export function addTracker(dataset: IDataTracker, fusionProps?: IFusionProps): Tracker {
    dataset.$uuid = dataset.$uuid || (dataset as any).uuid;
    return new Tracker(dataset, fusionProps);
}

let onChangeHandler: (tracker: Tracker) => void;

export function bindChangeEvent(onChange: (tracker: Tracker) => void) {
    onChangeHandler = onChange;
}