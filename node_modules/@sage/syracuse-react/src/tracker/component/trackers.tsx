"use strict";
import * as React from 'react';
import { IDataTracker } from '../trackerController';
import { Tracker, ITrackerActions } from './tracker';
import { PopupLink } from '../../over/popup/popupLink';
import './trackers.less';

export interface ITrackersProps extends ITrackerActions {
    list: IDataTracker[],
    trackerAdded?: boolean
}

export class TrackersLink extends React.Component<ITrackersProps, {}> {
    popupLink: PopupLink;
    trackers: Trackers;
    componentDidMount() {
        this.popupLink.togglePopup();
    }
    componentDidUpdate(prevProps: ITrackersProps) {
        if (this.props.trackerAdded && prevProps.trackerAdded != this.props.trackerAdded) {
            this.popupLink.togglePopup(true);
        }
    }
    componentWillUnmount() {
        this.popupLink = this.trackers = null;
    }
    onPopupRender = () => {
        return <Trackers {...this.props} ref={(trackers) => this.trackers = trackers} />;
    }
    onPopupResize = (maxHeight: number) => {
        this.trackers && this.trackers.onResize(maxHeight);
    }
    render() {
        return <PopupLink
            icon="change"
            iconText="left"
            title={this.props.list.length.toString()}
            className="s_profile_bar_textlink"
            ref={(link) => this.popupLink = link}
            popup={{
                my: "right top",
                at: "right bottom",
                closeBy: null,
                onResize: this.onPopupResize,
                render: this.onPopupRender
            }} />
    }
}

export class Trackers extends React.Component<ITrackersProps, {}> {
    root: HTMLDivElement;
    onResize(maxHeight: number) {
        this.root.style.maxHeight = maxHeight + "px";
    }
    componentWillUnmount() {
        this.root = null;
    }
    render() {
        let list: any[] = [];
        for (let record of this.props.list) {
            list.push(<Tracker key={record.$uuid}
                tracker={record}
                onDelete={this.props.onDelete}
                onLinkClick={this.props.onLinkClick} />);
        }
        return <div className="s_trackers" ref={(node)=> this.root=node} >
            <ul className="s_trackers_body">
                {list}
            </ul>
        </div>;
    }
}