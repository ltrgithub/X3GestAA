"use strict";
import * as React from 'react';
import { Icon } from "../../common/icon/icon";
import * as Sdata from '../../dataStore/sdata';
import { Link, LinkClickHandler } from '../../link/link';
import { getLocalString } from '../../culture/localString';
import { culture } from '../../culture/culture';
import { IDataTracker } from '../trackerController';
import { TrackerDiagnoses } from './trackerDiagnoses';
import { TrackerProgress } from './trackerProgress';

export interface ITrackerActions {
    onDelete: (tracker: IDataTracker) => void,
    onLinkClick: (tracker: IDataTracker, $bind: string) => void
}

interface ITrackerProps extends ITrackerActions {
    tracker: IDataTracker
}

const actionsMap: any = {
    stop: {
        $abort: "close",
        $suspend: "quick_subtract",
        $resume: "reset",
        $cancel: "close"
    },
    done: {
        $download: "download",
        $details: "export"
    }
}


export class Tracker extends React.Component<ITrackerProps, {}> {
    onLinkClick = (bind: string) => {
        this.props.onLinkClick(this.props.tracker, bind);
    }
    renderLink(bind: string, icon: string, $link: Sdata.IMenu) {
        return <Link
            key={bind}
            className="s_tracker_action"
            value={bind}
            title={$link.$title || getLocalString("trackers_" + bind.replace("$", "") + "_label")}
            icon={icon}
            onClick={this.onLinkClick} />;
    }
    renderLinks() {
        let tracker = this.props.tracker;
        let links = [];
        if (tracker.$links) {
            for (let bind in tracker.$links) {
                let $link = tracker.$links[bind];
                if (!$link.$isHidden) {
                    let icon = tracker.isProcessing ? actionsMap.stop[bind] : actionsMap.done[bind];
                    icon && links.push(this.renderLink(bind, icon, $link));
                }
            }
        }
        !tracker.isProcessing &&
            links.push(<Link className="s_tracker_remove"
                key="delete"
                value={tracker}
                title={getLocalString("trackers_clear")}
                icon="delete"
                onClick={this.props.onDelete} />);
        return links;
    }
    render() {
        let tracker = this.props.tracker;
        let startDate: string;
        let startTime: string;
        if (tracker.startDate) {
            let date = new Date(tracker.startDate);
            startDate = culture.date.fromJsDate(date).toString(culture.date_short);
            startTime = culture.time.fromJsDate(date).toString(culture.time_short);
        }
        return <li className="s_tracker">
            <div className="s_tracker_header">
                <Icon className="s_tracker_kind" name={tracker.kind == "print" ? "print" : "setting"} />
                <TrackerProgress tracker={tracker} />
                {this.renderLinks()}
            </div>
            <ul className="s_tracker_body">
                <TrackerProperty title={getLocalString("trackers_title")} value={tracker.title} />
                <TrackerProperty title={getLocalString("trackers_phase")} value={tracker.phase || tracker.$state} />
                <TrackerProperty title={getLocalString("trackers_phaseDetail")} value={tracker.phaseDetail} />
                <TrackerProperty title={getLocalString("trackers_startDate")} value={startDate} />
                <TrackerProperty title={getLocalString("trackers_startTime")} value={startTime} />
                <TrackerProperty title={getLocalString("trackers_elapsedSeconds")} value={tracker.elapsedSeconds} />
                <TrackerProperty title={getLocalString("trackers_remainingSeconds")} value={tracker.remainingSeconds} />
                <TrackerDiagnoses $diagnoses={tracker.$diagnoses} />
            </ul>
        </li>;
    }
}
class TrackerProperty extends React.Component<{
    title: string,
    value: any
}, {}> {
    render() {
        if (this.props.value !== undefined) {
            return <li className="s_tracker_property">
                <div className="s_tracker_title">{this.props.title}</div>
                <div className="s_tracker_value">{this.props.value}</div>
            </li>;
        }
        return null;
    }
}


