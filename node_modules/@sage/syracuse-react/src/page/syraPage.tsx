"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Dom from '../utility/html/dom';
import * as Sdata from '../dataStore/sdata';
import { PageLoader, IPageLoadError } from './pageLoader';
import Store from '../dataStore/store';
import { Ajax } from '../ajax/ajax';
import { Url } from '../route/url';
import { getLocalString } from '../culture/localString';
import { syra_pageBuilder } from '../syra/utility/syra_pageBuilder';
import { syra_form } from '../syra/utility/syra_form';
import { HistoryLinks } from './history/history';
import { syra_fields } from '../syra/utility/syra_fields';

export interface ISyraPageState {
    loadError?: IPageLoadError
}

export class SyraPage {
    private _representation: Sdata.IRepresentation;
    private loader: PageLoader;
    private _store: Store;
    private ajax: Ajax;
    private sdataUrl: Url;
    private _syraPage: any;
    private historySlot: HTMLElement;

    fetchRepresentation(sdataUrl: Url, done: (error?: IPageLoadError) => void) {
        this.loader = new PageLoader(this.sdataUrl = sdataUrl);
        this.loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
            if (error) {
                done(error);
            }
            else {
                this.loadRepresentation(sdataUrl, representation);
                done();
            }
        });
    }
    loadRepresentation(sdataUrl: Url, representation: Sdata.IRepresentation) {
        this.sdataUrl = sdataUrl;
        this._representation = representation;
        this._store = new Store(representation.$prototype);
    }
    slotDidMount = (body: HTMLElement) => {
        (this.page.layoutSlot = body).appendChild(this.page.domItem);
    }
    fetchData(done: (diagnoses?: Sdata.IDiagnose[]) => void) {
        this.ajax = new Ajax()
        this.ajax.get({
            url: this.sdataUrl.stringify(),
            end: (response) => {
                if (response.ok) {
                    this.store.applyDelta(response.data);
                    done();
                }
                else {
                    let diagnoses = response.error.diagnoses;
                    if (diagnoses) {
                        diagnoses[0].$message = getLocalString("page_fetch_data_failed") + "\n" + diagnoses[0].$message;
                    }
                    done(diagnoses)
                }
            }
        });
    }
    loadSyraPage(done: (syraPage: any) => void) {
        syra_pageBuilder.load({
            $itemPage: {
                $representation: this._representation,
                $isEditMode: this._representation.$isEditMode, //only set by soap controller
                initData: this.store.dataset,
                urlSeg: this.sdataUrl
            },
            success: (syraPage: any) => {
                (this._syraPage = syraPage).urlSeg = this.sdataUrl;
                this._syraPage.masterChildRelations && syra_fields.embedded.applyChangeToDetailRelations(this._syraPage);
                done(syraPage);
            }
        });
    }
    addHistoryLinks() {
        if (window.history.length > 1) {
            this.historySlot = this.page.menuBar.body.insertBefore(Dom.div(""), this.page.menuBar.body.firstChild);
            ReactDom.render(<HistoryLinks onGoto={this.onHistoryGoTo} />, this.historySlot);
        }
    }
    onHistoryGoTo = (goBack: boolean) => {
        syra_form.onBeforeUnloadPage(() => goBack ? history.back() : history.forward(), this.page);
    }
    get title(): string {
        return this.page && this.page.getTitle();
    }
    get description(): string {
        if (this.page && this.page.$prototype.$representation) {
            return getLocalString("sitemap_entity") + ": " + this.page.$prototype.$representation;
        }
        return "";
    }
    get store(): Store {
        return this._store;
    }
    get page(): any {
        return this._syraPage;
    }
    onResize = (maxHeight?: number) => {
        this.page && this.page.resizeItem();
    }
    dispose() {
        this.ajax && this.ajax.dispose();
        this.loader && this.loader.dispose();
        this.historySlot && ReactDom.unmountComponentAtNode(this.historySlot);
        this._syraPage && this._syraPage.dispose();
        this._syraPage = this.historySlot = null;
    }
}