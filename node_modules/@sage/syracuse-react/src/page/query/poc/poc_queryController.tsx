"use strict";
import * as React from 'react';
import POC_QueryPage from './poc_queryPage';
import { Url } from '../../../route/url';
import * as Sdata from '../../../dataStore/sdata';
import Store from '../../../dataStore/store';
import { Ajax, AjaxResponse } from '../../../ajax/ajax';
import { IPageProps } from '../../../page/page';
import { PageLoader, IPageLoadError } from '../../../page/pageLoader';
import * as Storage from '../../../utility/storage/storage';
import { AlertPage } from '../../../alert/page/alertPage';

export default class POC_QueryController extends React.Component<IPageProps, {
    loadError?: IPageLoadError,
    selectedEntityUrl: Url,
    selectedRecord: Sdata.IEntity
}>  {
    private queryBind: any;
    private store: Store;
    private representation: Sdata.IRepresentation;

    private ensureSelection(): Sdata.IEntity {
        if (this.queryBind) {
            let records = this.store.dataset[this.queryBind];
            let selectedId = Storage.session.get(this.props.sdataUrl.uri + "_selected");
            if (records && records.length) {
                let selected: Sdata.IEntity;
                for (let record of records) {
                    if (record.$isSelected) {
                        selected = record;
                        break;
                    }
                }
                if (!selected) {
                    if (selectedId) {
                        for (let record of records) {
                            if (record.$uuid == selectedId) {
                                selected = record;
                                break;
                            }
                        }
                    }
                    selected = selected || records[0];
                    selected.$isSelected = true;
                }
                return selected;
            }
        }
    }
    selectEntity = (entity: Sdata.IEntity) => {
        //hack remove $select set by syracuse admin to limit fields return by detail view
        let ii = entity.$url.indexOf("&select");
        if (ii >= 0) {
            entity.$url = entity.$url.substr(0, ii);
        }
        Storage.session.set(this.props.sdataUrl.uri + "_selected", entity.$uuid);
        this.setState({
            selectedEntityUrl: new Url(entity.$url),
            selectedRecord: entity
        });
    }
    componentDidMount() {
        let loader = new PageLoader(this.props.sdataUrl);
        loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
            if (error) {
                this.setState({
                    loadError: error
                });
            }
            else {
                this.representation = representation;
                this.store = new Store(representation.$prototype);
                this.queryBind = Sdata.findByType(this.store.$prototype, Sdata.type.array).$bind;
                let ajax = new Ajax()
                ajax.get({
                    url: this.props.sdataUrl.stringify(),
                    end: (response: AjaxResponse) => {
                        if (response.ok) {
                            this.store.applyDelta(response.data);
                            this.selectEntity(this.ensureSelection());
                        }
                    }
                });
            }
        });
    }
    onEditEntity = (url: string) => {
        this.setState({
            selectedEntityUrl: new Url(url)
        });
    }
    render() {
        if (this.state && this.state.loadError) {
            return <AlertPage status={this.state.loadError.status} diagnoses={this.state.loadError.diagnoses} />;
        }
        if (this.store) {
            return <POC_QueryPage
                queryMeta={this.store.getMeta(this.queryBind)}
                queryValue={this.store.getValue(this.queryBind)}
                selectedEntityUrl={this.state.selectedEntityUrl}
                selectedRecord={this.state.selectedRecord}
                onRecordSelected={this.selectEntity}
                onEditEntity={this.onEditEntity}
                {...this.props} />;
        }
        return null;
    }
}