"use strict";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as Sdata from '../dataStore/sdata';
import { DevMenusPage } from './misc/dev/devMenusPage';
import { OfficePage } from '../office/officePage';
import { ClassicPage } from './classic/classicPage';
import TestControllerPage from '../test/testControllerPage';
import { SoapController } from './soap/soapController';
import POC_EntityController from './entity/poc/poc_entityController';
import POC_QueryController from './query/poc/poc_queryController';
import { SitemapEditController } from '../navigation/sitemapEdit/page/sitemapEditController';
import { LandingPageController } from './landing/landingPageController';
import { SearchPageController } from '../search/searchPageController';
import { DetailController } from './entity/detailController';
import { EditController } from './entity/editController';
import { QueryController } from './query/queryController';
import { IPageProps } from './page';

export function create(props: IPageProps, fullReactMode?: boolean): any {
    let page;
    if (props.office) {
        page = OfficePage;
    }
    else {
        if (props.sdataUrl.isFusion) {
            page = ClassicPage;
        }
        else {
            if (props.sdataUrl.url.indexOf("soap-") >= 0) {
                page = SoapController;
            }
            if (!page) {
                switch (props.sdataUrl.$facet) {
                    case Sdata.Facet.detail:
                        page = fullReactMode ? POC_EntityController : DetailController;
                        break;
                    case Sdata.Facet.edit:
                        page = fullReactMode ? POC_EntityController : EditController;
                        break;
                    case Sdata.Facet.bulk:
                    case Sdata.Facet.cube:
                    case Sdata.Facet.query:
                        page = fullReactMode ? POC_QueryController : QueryController;
                        break;
                    case Sdata.Facet.sitemap_edit:
                        page = SitemapEditController;
                        break;
                    case Sdata.Facet.landing:
                        page = LandingPageController;
                        break;
                    case Sdata.Facet.search:
                        page = SearchPageController;
                        break;
                    case Sdata.Facet.syraDev:
                        page = DevMenusPage;
                        break;
                    case Sdata.Facet.syraTest:
                    case Sdata.Facet.test:
                        page = TestControllerPage;
                        break;
                }
            }
        }
    }
    return page && React.createElement(page, props);
}