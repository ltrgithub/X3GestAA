"use strict";
import * as React from 'react';
import { getLocalString } from '../../culture/localString';
import { syra_fusion } from '../../syra/utility/syra_fusion';
import * as Dom from '../../utility/html/dom';
import { route } from '../../route/route';
import * as Events from '../../event/events';
import { IPageProps } from '../page';

export class ClassicPage extends React.Component<IPageProps, {}> {
	private syraPage: any;
	private slot: HTMLElement;

	componentDidMount() {
		if (this.props.onMainPageLoaded) {
			syra_fusion.openMainPage(this.props.sdataUrl, {
				slot: this.slot,
				onLoaded: this.onSyraPageLoaded,
				onCloseBook: this.onCloseBook
			});
		}
	}
	componentWillUnmount() {
		Dom.empty(this.slot);
		this.slot = null;
		Events.resize.unsubscribe(this.resize);
		this.syraPage = null;
	}
	onCloseBook = (logout: boolean) => {
		if (syra_fusion.confirmCloseClassicNext) {
			syra_fusion.confirmCloseClassicNext();
			delete syra_fusion.confirmCloseClassicNext;
		}
		else {
			route.back()
		}
		logout && route.logout();
	}
	onSyraPageLoaded = (syraPage: any) => {
		this.syraPage = syraPage;
		if (this.props.onMainPageLoaded) {
			this.props.onMainPageLoaded(this.title, this.description, syraPage);
		}
		Events.resize.subscribe(this.resize);
	}
	resize = () => {
		this.syraPage && this.syraPage.resizeItem();
	}
	get title(): string {
		if (this.syraPage) {
			let winModel = this.syraPage.$fusionPageMeta.winModel;
			if (winModel) {
				let fct = winModel.getFctName();
				if (fct.name && (winModel._mdata.type == 1 || winModel._mdata.type == 2)) {
					/*if (this.sdataUrl.classicParams.functionCode != fct.name) {
						var urlSeg = syra_url.parse(this.sdataUrl.stringify());
						urlSeg.replaceClassicFullCode(fct.name);
						title = page.getTitle();
					}
					else {*/
					return fct.title;
					//}                
				}
			}
			else {
				this.syraPage.getTitle();
			}
		}
	}
	get description(): string {
		return getLocalString("sitemap_function") + ": " + this.props.sdataUrl.classicParams.functionCode;
	}
	render() {
		return <div className="s_syra_page" ref={(node) => this.slot = node}></div>;
	}
}