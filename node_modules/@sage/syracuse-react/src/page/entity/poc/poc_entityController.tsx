"use strict";
import * as React from 'react';
import POC_EntityPage from './poc_entityPage';
import * as Sdata from '../../../dataStore/sdata';
import Store from '../../../dataStore/store';
import { Ajax, AjaxResponse } from '../../../ajax/ajax';
import { IPageProps } from '../../../page/page';
import { Url } from '../../../route/url';
import { PageLoader, IPageLoadError } from '../../../page/pageLoader';
import * as Storage from '../../../utility/storage/storage';
import { AlertPage } from '../../../alert/page/alertPage';

interface IPocEntityProps extends IPageProps {
    onEditEntity: (url: string) => void
}

export default class POC_EntityController extends React.Component<IPocEntityProps, {
    loadError?: IPageLoadError
    representation?: Sdata.IRepresentation,
    store?: Store,
    useFlowLayout?: boolean
}>  {
    constructor(props: IPocEntityProps, context: any) {
        super(props, context);
        this.state = {
            useFlowLayout: Storage.session.get("useFlowLayout") == "1"
        }
    }
    ajax: Ajax;
    get $article(): any {
        let $article = this.state.representation.$article || this.state.store.$prototype.$article;
        if (!$article) {
            this.state.representation.$article = $article = this.state.store.$prototype.$article || {};
            $article.$layout = $article.$layout || {};
            $article.$layout.$items = $article.$layout.$items || [];
            if ($article.$layout.$items.length == 0) {
                $article.$layout.$items = this.state.store.binds.map(($bind: string) => {
                    return {
                        $bind: $bind
                    };
                });
            }
        }
        return $article;
    }
    get editable(): boolean {
        return this.props.sdataUrl.$facet == Sdata.Facet.edit;
    }
    invokeLink = (link: Sdata.IMenu) => {
        if (link) {
            let $url = this.state.store.parse(link.$url);
            link.$method = link.$method || (Sdata.HttpMethod.GET as Sdata.HttpMethodType);
            if (link.$method != Sdata.HttpMethod.GET) {
                this.props.onEditEntity($url);
            }
        }
    }
    onSwitchLayoutMode = () => {
        let newVal = !this.state.useFlowLayout;
        Storage.session.set("useFlowLayout", newVal ? "1" : "0");
        this.setState({
            useFlowLayout: newVal
        });
    }
    componentDidMount() {
        if (this.editable) {
            this.ajax = new Ajax();
            this.ajax.post({
                url: this.props.sdataUrl.url,
                end: (response: AjaxResponse) => {
                    if (response.ok) {
                        this.fetchRepresentation(response.data);
                    }
                }
            });
        }
        else {
            this.fetchRepresentation();
        }
    }
    componentWillReceiveProps(nextProps: IPageProps) {
        if (nextProps.sdataUrl != this.props.sdataUrl) {
            this.fetchData(nextProps.sdataUrl);
        }
    }
    fetchRepresentation(initData?: any) {
        let loader = new PageLoader(this.props.sdataUrl);
        loader.getAll((representation: Sdata.IRepresentation, error: IPageLoadError) => {
            if (error) {
                this.setState({
                    loadError: error
                });
            }
            else {
                this.setState({
                    representation: representation,
                    store: new Store(representation.$prototype, initData)
                });
                !this.editable && this.fetchData(this.props.sdataUrl);
            }
        });
    }
    fetchData(sdataUrl: Url) {
        this.ajax && this.ajax.dispose();
        this.ajax = new Ajax()
        this.ajax.get({
            url: sdataUrl.stringify(),
            end: (response: AjaxResponse) => {
                this.state.store.applyDelta(response.data);
                this.setState({
                    store: this.state.store
                });
            }
        });
    }
    render() {
        if (this.state) {
            if (this.state.loadError) {
                return <AlertPage status={this.state.loadError.status} diagnoses={this.state.loadError.diagnoses} />;
            }
            if (this.state.representation) {
                return <POC_EntityPage
                    onLinkClick={this.invokeLink}
                    store={this.state.store}
                    editable={this.editable}
                    $article={this.$article}
                    title={this.state.store.title}
                    useFlowLayout={this.state.useFlowLayout}
                    onSwitchLayoutMode={this.onSwitchLayoutMode} />;
            }
        }
        return null;
    }
    componentWillUnmount() {
        if (this.editable) {
            //delete working copy
            let ajax = new Ajax();
            ajax.del({
                url: this.props.sdataUrl.url
            });
        }
    }
}