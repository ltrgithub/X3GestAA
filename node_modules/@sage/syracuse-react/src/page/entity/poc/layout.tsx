"use strict";
import * as React from 'react';
import * as Sdata from '../../../dataStore/sdata';
import Section from '../../../section/section';
import Store from '../../../dataStore/store';
import * as helpers from '../../../page/helpers';
import convertToResponsive from './responsiveConverter';

interface ILayoutProps {
    editable: boolean,
    useFlowLayout: boolean,
    $item: any,
    store: Store
    className?: string
}

function addField(key: string, bind: string, props: ILayoutProps) {
    return helpers.createField({
        bind: bind,
        key: key,
        store: props.store,
        editable: props.editable,
        useFlowLayout: props.useFlowLayout
    });
}

class LayoutSection extends React.Component<ILayoutProps, {}>{
    render() {
        if (this.props.$item.$category == "space") {
            return <div className="s_space" />;
        }
        else {
            return <Section
                useFlowLayout={this.props.useFlowLayout}
                title={this.props.store.parse(this.props.$item.$title)}
                closeable={true} collapsable={true} maximizable={true}
                $layout={this.props.$item.$layout}>
                {this.props.useFlowLayout ?
                    <LayoutFlow {...this.props} />
                    :
                    <LayoutGrid {...this.props} />}
            </Section>;
        }
    }
}

class LayoutFlow extends React.Component<ILayoutProps, {}>{
    private childKey: number;
    getChildKey() {
        return (++this.childKey).toString();
    }
    renderFlowLayout($layout: any, items: any[]) {
        if ($layout && $layout.$items) {
            for (let $item of $layout.$items) {
                let item: any;
                if ($item.$bind || $item.$category) {
                    if ($item.$bind) {
                        item = addField(this.getChildKey(), $item.$bind, this.props);
                    }
                    else {
                        item = <LayoutSection
                            key={this.getChildKey()}
                            $item={$item}
                            editable={this.props.editable}
                            useFlowLayout={this.props.useFlowLayout}
                            store={this.props.store} />;
                    }
                }
                else {
                    items = this.renderFlowLayout($item.$layout || $item, items);
                }
                item && items.push(item);
            }
        }
        return items;
    }
    render() {
        this.childKey = 0;
        return <div className={this.props.className}>
            {this.renderFlowLayout(this.props.$item.$layout, [])}
        </div>;
    }
}
class LayoutGrid extends React.Component<ILayoutProps, {}>{
    private childKey: number;
    getChildKey() {
        return (++this.childKey).toString();
    }
    renderGridayout($layout: any, items: any[]) {
        if ($layout && $layout.$items) {
            let isRow = $layout.$layoutType == "row";
            let children = isRow ? [] : items;
            for (let $item of $layout.$items) {
                let item: any;
                if ($item.$bind || $item.$category) {
                    if ($item.$bind) {
                        item = addField(this.getChildKey(), $item.$bind, this.props);
                    }
                    else {
                        item = <LayoutSection key={this.getChildKey()}
                            $item={$item}
                            editable={this.props.editable}
                            useFlowLayout={this.props.useFlowLayout}
                            store={this.props.store} />;
                    }
                    if (item && isRow) {
                        item = <div key={this.getChildKey()} className={$item.$col}>{item}</div>;
                    }
                }
                else {
                    if (isRow) {
                        item = <div key={this.getChildKey()} className={$item.$col}>{this.renderGridayout($item.$layout || $item, [])}</div>
                    }
                    else {
                        children = this.renderGridayout($item.$layout || $item, children);
                    }
                }
                item && children.push(item);
            }
            if (isRow && children.length) {
                items.push(<div key={this.getChildKey()} className="row">{children}</div>);
            }
        }
        return items;
    }
    render() {
        this.childKey = 0;
        return <div className={this.props.className}>
            {this.renderGridayout(this.props.$item.$layout, [])}
        </div>;
    }
}

export default class Layout extends React.Component<ILayoutProps, {}> {
    render() {
        if (!this.props.$item.$responsive) {
            convertToResponsive(this.props.store.$prototype, this.props.$item);
        }
        return this.props.useFlowLayout ?
            <LayoutFlow className="s_poc_page_body s_flow_layout" {...this.props} />
            : <LayoutGrid className="s_poc_page_body" {...this.props} />;
    }
}