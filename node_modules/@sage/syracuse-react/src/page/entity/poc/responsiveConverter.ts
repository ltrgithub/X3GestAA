"use strict";
import * as Dom from '../../../utility/html/dom';
import * as Sdata from '../../../dataStore/sdata';

const WIDTHS: any = {
    1: [12],
    2: [6, 6],
    3: [4, 4, 4],
    4: [3, 3, 3, 3],
    5: [3, 3, 2, 2, 2],
    6: [2, 2, 2, 2, 2, 2],
    7: [2, 2, 2, 2, 2, 1, 1],
    8: [2, 2, 2, 2, 1, 1, 1, 1],
    9: [2, 2, 2, 1, 1, 1, 1, 1, 1],
    10: [2, 2, 1, 1, 1, 1, 1, 1, 1, 1],
    11: [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    12: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
};

function setRowAtFirst($article: any) {
    let $layout = $article.$layout;
    if ($layout.$layoutType == "stack") {
        delete $layout.$widths;
        $article.$layout = {
            $layoutType: "row",
            //$col: Context.css.layout.pageCols + "12",
            $items: [$layout]
        }
    }
}

function sumWidths(widths: number[]) {
    let sum = 0;
    for (let width of widths) {
        sum += width;
    }
    return sum;
}

function checkSum(widths: number[]) {
    let sum = sumWidths(widths);
    if (sum != 12) {
        if (sum < 12) {
            widths[widths.length - 1] += (12 - sum);
        }
        else {
            let diff = sum - 12;
            let index = widths.length;
            while (diff && (--index >= 0)) {
                if (widths[index] > 1) {
                    --widths[index];
                    --diff;
                }
            }
        }
        checkSum(widths);
    }
}

function setRowWidths($row: any) {
    let widths = $row.$widths;
    if (!widths) {
        widths = WIDTHS[$row.$items.length];
    }
    else {
        widths = widths.split(",").map((width: string) => Math.max(Math.round((parseInt(width, 10) * 1.2) / 10), 1));
        checkSum(widths);
    }
    let cssCol = Dom.css.layout.pageCols;
    for (let ii = 0, jj = $row.$items.length; ii < jj; ii++) {
        $row.$items[ii].$col = cssCol + widths[ii];
    }
}

function translateLayout($layout: any, $parentItem: any) {
    if ($layout && $layout.$items) {
        if ($layout.$layoutType == "row") {
            setRowWidths($layout);
        }
        for (let $item of $layout.$items) {
            if ($item.$layout) {
                if ($item.$category == "section") {
                    //ignore block with no title
                    if ($item.$layout.$items.length == 1) {
                        let child = $item.$layout.$items[0];
                        if (!child.$title && child.$category == "section") {
                            $item.$layout = child.$layout;
                        }
                    }
                }
                translateLayout($item.$layout, $item);
            }
            else {
                if ($item.$layoutType) {
                    if ($parentItem.$category == "section") {
                        //ignore block with no title
                        if ($item.$items.length == 1) {
                            let child = $item.$items[0];
                            if (!child.$title && child.$category == "section") {
                                $item.$items = child.$layout.$items;
                            }
                        }
                    }
                    translateLayout($item, $parentItem);
                }
            }
        }
        return true;
    }
    return false;
}

export default function convertToResponsive($prototype: any, $article: any) {
    setRowAtFirst($article);
    translateLayout($article.$layout, $article);
    $article.$responsive = true;
    return $article;
}