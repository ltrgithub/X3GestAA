"use strict";
import * as React from 'react';
import { Link, LinkClickHandler } from '../../../link/link';
import List from '../../../field/poc/array/list';
import Store from '../../../dataStore/store';
import { PageFrame, PageHeader } from '../../../page/page';
import Layout from './layout';
import './poc_entityPage.less';

const crudDefinedIds = ["$create", "$save", "$details", "$edit", "$delete"];

interface IProps {
    title: string,
    editable: boolean,
    $article: any,
    onLinkClick: LinkClickHandler,
    store: Store,
    useFlowLayout: boolean,
    onSwitchLayoutMode: () => void
}

export default class POC_EntityPage extends React.Component<IProps, {}> {
    render() {
        return <PageFrame>
            <PageHeader title={this.props.store.title} />
            <div className="s_poc_page_entity_content">
                <Layout $item={this.props.$article}
                    editable={this.props.editable}
                    useFlowLayout={this.props.useFlowLayout}
                    store={this.props.store} />
            <QuickBar
                    onLinkClick={this.props.onLinkClick}
                    store={this.props.store}
                    useFlowLayout={this.props.useFlowLayout}
                    onSwitchLayoutMode={this.props.onSwitchLayoutMode} />
            </div>
        </PageFrame>;
    }
}

class QuickBar extends React.Component<{
    onLinkClick: LinkClickHandler,
    store: Store,
    useFlowLayout: boolean,
    onSwitchLayoutMode: () => void
}, {}> {
    addLink(bind: string, icon: string, className: string, ) {
        let menu = this.props.store.getMenu(bind);
        if (menu.$isHidden) {
            return <noscript />;
        }
        return <Link
            hidden={menu.$isHidden}
            url={menu.$url && this.props.store.parse(menu.$url)}
            disabled={menu.$isDisabled}
            icon={icon}
            className={className}
            title={this.props.store.parse(menu.$title)}
            value={menu}
            onClick={this.props.onLinkClick} />;
    }
    render() {
        let links = this.props.store.links || {};
        let actions = this.props.store.actions || {};
        let binds = Object.keys(links).concat(Object.keys(actions));
        if (binds.length) {
            let hasOther: boolean;
            for (let bind of binds) {
                let menu = links[bind] || actions[bind];
                if (menu) {
                    //ensure bind
                    menu.$bind = bind;
                    if (!hasOther) {
                        hasOther = crudDefinedIds.indexOf(bind) >= 0;
                        break;
                    }
                }
            }
            return <aside className='s_poc_page_menubar'>
                <List className="s_poc_page_menubar_items">
                    {hasOther && <Link
                        icon="menu"
                        className="s_entity_crud_default"
                        title="Other options"
                        onClick={this.props.onLinkClick} />}
                    {links.$create && this.addLink("$create", "add", "s_entity_crud_default")}
                    {actions.$save && this.addLink("$save", "check", "s_entity_crud_main")}
                    {links.$details && this.addLink("$details", "close", "s_entity_crud_secondary")}
                    {links.$edit && this.addLink("$edit", "pencil", "s_entity_crud_main")}
                    {links.$delete && this.addLink("$delete", "perm_delete", "s_entity_crud_secondary")}
                    <Link
                        icon={this.props.useFlowLayout ? "grid" : "flow"}
                        className="s_entity_crud_default"
                        title={this.props.useFlowLayout ? "Switch to grid layout" : "Switch to flow layout"}
                        onClick={this.props.onSwitchLayoutMode} />
                </List>
            </aside>;
        }
    }
}    