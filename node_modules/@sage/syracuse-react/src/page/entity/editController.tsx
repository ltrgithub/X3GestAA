"use strict";
import * as React from 'react';
import { Url } from '../../route/url';
import { route } from '../../route/route';
import { IPageProps } from '../page';
import { syra_form } from '../../syra/utility/syra_form';
import { Ajax, IAjaxProps, ajaxObserver, IAjaxObserver, AjaxResponse } from '../../ajax/ajax';
import * as Storage from '../../utility/storage/storage';
import { getLocalString } from '../../culture/localString';
import { IPageLoadError } from '../pageLoader';
import { alertBox } from '../../alert/alert';
import { AlertPage } from '../../alert/page/alertPage';
import * as Expression from '../../dataStore/expression';
import * as Sdata from '../../dataStore/sdata';
import { SyraMainPage } from '../syraMainPage'
import { SyraPage, ISyraPageState } from '../syraPage';

export class EditController extends React.Component<IPageProps, ISyraPageState> implements IAjaxObserver {
    ajax: Ajax;
    private wcQueue: any;
    private _sessionKey: string;
    syraPage: SyraPage;
    workingCopyUrl: Url;

    constructor(props: any, context: any) {
        super(props, context);
        this.wcQueue = {};
        this.state = {};
        this.props.sdataUrl.stringify();
        ajaxObserver.subscribe(this);
    }
    componentWillMount() {
        if ((route.currentUrState && route.currentUrState.$method) != Sdata.HttpMethod.POST || this.props.sdataUrl.url.indexOf("/$workingCopies(") >= 0) {
            this.loadPage(this.props.sdataUrl);
        }
        else {
            this.ajax = new Ajax();
            this.ajax.post({
                url: this.props.sdataUrl.url,
                end: (response: AjaxResponse) => {
                    if (response.ok) {
                        let workingCopyUrl = new Url(Expression.parse(response.data, response.headers.location || response.data.$url));
                        workingCopyUrl.stringify();
                        Storage.session.setJson(workingCopyUrl.url, {
                            url: this.props.sdataUrl.url
                        });
                        route.replaceState(workingCopyUrl.url);
                        this.loadPage(workingCopyUrl, response.data);
                    }
                    else {
                        this.setState({
                            loadError: response.error
                        });
                    }
                }
            });
        }
    }
    loadPage(url: Url, initData?: any) {
        this.workingCopyUrl = url;
        this.syraPage = new SyraPage();
        this.syraPage.fetchRepresentation(url, (error) => {
            if (error) {
                this.notifyLoadError(error);
            }
            else {
                if (initData) {
                    this.syraPage.store.applyDelta(initData);
                    this.loadSyraPage();
                }
                else {
                    this.syraPage.fetchData((diagnoses: Sdata.IDiagnose[]) => {
                        !diagnoses ?
                            this.loadSyraPage()
                            : this.notifyLoadError({
                                diagnoses: diagnoses
                            });
                    });
                }
            }
        });
    }
    notifyLoadError(error: IPageLoadError) {
        this.setState({
            loadError: error
        });
    }
    loadSyraPage() {
        this.syraPage.loadSyraPage(() => {
            syra_form.onBeforeUnloadPage = this.onBeforeUnloadPage;
            this.forceUpdate()
        });
    }
    onAjaxSend = (ajax: Ajax) => {
        if (ajax.props.$etag && ajax.props.method == "PUT") {
            let previous = this.wcQueue[ajax.props.url];
            this.wcQueue[ajax.props.url] = ajax.props;
            if (previous) {
                return false;
            }
        }
        return true;
    }
    onViewMount = (body: HTMLElement) => {
        this.syraPage.slotDidMount(body);
        if (this.props.onMainPageLoaded) {
            this.syraPage.addHistoryLinks();
            this.props.onMainPageLoaded(this.syraPage.title, this.syraPage.description, this.syraPage.page);
        }
    }
    onAjaxResponse = (response: AjaxResponse) => {
        let ajax: Ajax = response.ajax;
        if (response.ok) {
            if (this.syraPage && this.syraPage.page) {
                if (ajax.method == "PUT") {
                    if (this.wcQueue && ajax.props && !this.syraPage.page.disposed) {
                        let queue = this.wcQueue[ajax.props.url];
                        delete this.wcQueue[ajax.props.url];
                        if (queue && queue != ajax.props) {
                            queue.data.$etag = queue.$etag = response.data.$etag;
                            (new Ajax).send(queue);
                            return false;
                        }
                    }
                    // saving data for "404 working copy session expired" cases
                    if (this.workingCopyUrl.url) {
                        let save = Storage.session.getJson(this.workingCopyUrl.url);
                        if (save) {
                            save.dataset = this.syraPage.page.dataset;
                            save.$etag = (response.data && response.data.$etag) || response.ajax.props.$etag;
                            Storage.session.setJson(this.workingCopyUrl.url, save);
                        }
                    }
                }
            }
        }
        else {
            if (this.wcQueue && ajax.props.$etag && !(this.syraPage && this.syraPage.page && !this.syraPage.page.disposed)) {
                delete this.wcQueue[ajax.props.url];
            }
            switch (response.status) {
                case 412:
                    let page = response.ajax.props.page;
                    if (page && page.sendBag) {
                        page.sendBag.on412 = true;
                        return false; //cancel default error management
                    } else {
                        /*alertBox({
                            severity: "error",
                            message: getLocalString("http_412_message"),
                            title: getLocalString("http_412_title"),
                            onClose: () => {
                                this.request.jquerySettings.success(JSON.parse( this.data), this.xhr.statusText,this.xhr);
                                return true;
                            }
                        });*/
                    }
                    break;
                case 404:
                    //let jsonData = response.ajax.sendData ? JSON.parse(response.ajax.sendData) : response.error.jsonData;
                    let jsonData = response.ajax.sendData && JSON.parse(response.ajax.sendData);
                    let isForm = (jsonData && jsonData.$actions) || syra_form.isFormUrl(response.ajax.url);
                    if (isForm) {
                        if (this.workingCopyUrl) {
                            let save = Storage.session.getJson(this.workingCopyUrl.url);
                            if (save) {
                                let ajax = new Ajax();
                                ajax.post({
                                    url: save.url,
                                    data: jsonData || save.dataset,
                                    $etag: save.$etag || 1,
                                    end: response.ajax.props.end
                                });
                                return false; //cancel default error management
                            }
                        }
                    }
            }
        }
        return true;
    }
    onBeforeUnloadPage = (callback: () => void, activePage?: any) => {
        if (this.syraPage.page.$menus && this.syraPage.page.$menus.$save) {
            let save = Storage.session.getJson(this.workingCopyUrl.url);
            if (save && save.dataset) {
                if (!activePage || (!activePage.isPageDesigner && this.syraPage.page == activePage)) {
                    alertBox({
                        title: this.syraPage.page.getTitle() || getLocalString("wc_warn_unload_title"),
                        severity: "info",
                        message: getLocalString("wc_warn_unload_message"),
                        buttons: {
                            mode: "yes,no",
                            titles: {
                                yes: getLocalString("wc_warn_unload_yes_button"),
                                no: getLocalString("wc_warn_unload_no_button")
                            }
                        },
                        onClose: (closeBy: string) => {
                            if (closeBy == "yes") {
                                this.syraPage.page.inlinePageHost && this.syraPage.page.inlinePageHost.dispose();
                                syra_form.storeSdataUrl(this.workingCopyUrl.url);
                                callback();
                            }
                            else {
                                (window as any).syra_app.ensureMainPage();
                            }
                        }
                    });
                    return;
                }
            }
        }
        callback();
    }
    componentWillUnmount() {
        ajaxObserver.unsubscribe(this);
        syra_form.onBeforeUnloadPage = (callback: () => void, activePage?: any) => {
            callback();
        };
        this.syraPage && this.syraPage.dispose();
    }
    render() {
        if (this.state && this.state.loadError) {
            return <AlertPage {...this.state.loadError} />;
        }
        else {
            if (this.syraPage && this.syraPage.page) {
                return <SyraMainPage onDidMount={this.onViewMount} onResize={this.syraPage.onResize} />;
            }
        }
        return null;
    }
}