"use strict";
import * as Expression from '../dataStore/expression';
import * as Sdata from '../dataStore/sdata';
import { Ajax, IAjaxProps, AjaxResponse } from '../ajax/ajax';
import { Url } from '../route/url';
import * as Endpoint from '../profile/endpoint';

const pageTemplateUrl = "/sdata/syracuse/collaboration/syracuse/pages('{endpoint}.{representation},{target},{pageview}')?role={$role}&profile={$userprofile}";

export interface IPageLoadError {
    status?: number,
    diagnoses: Sdata.IDiagnose[],
    inVignette?: boolean
}

export type EndHandler = (representation: Sdata.IRepresentation, error?: IPageLoadError) => void;

export class PageLoader {
    private ajax: Ajax;
    private representation: Sdata.IRepresentation;
    private handlerDone: EndHandler;
    static defaultEndpoint: string;
    static getRepresentationUrl(url: Url): string {
        //for $isLicenceTool pageTemplateUrl=  ('/page?url=' + encodeURIComponent(url.url)
        return Expression.parse({
            representation: url.params.representation,
            endpoint: Endpoint.toString(url.endpoint) || PageLoader.defaultEndpoint,
            target: url.isFusion ? "trans" : "$page",
            pageview: url.params.pageview,
            variant: url.params.variant
        }, pageTemplateUrl);
    }
    constructor(public sdataUrl: Url, private classicAjaxProps?: any) { }
    getCore(end: EndHandler) {
        this.handlerDone = end;
        this.getRepresentation(() => this.getPrototype(() => {
            let $proto = (this.representation.$prototype as any);
            //erase $url as used by getDataUrl if $url is in data
            $proto.$url = $proto.$representationUrl = this.sdataUrl.url;
            end(this.representation);
        }));
    }
    getAll(end: EndHandler) {
        this.handlerDone = end;
        this.getRepresentation(() => this.getPrototype(() => this.getDefaultArticle(() => this.getPreferences(() => this.getArticle(() => {
            let $proto = (this.representation.$prototype as any);
            //erase $url as used by getDataUrl if $url is in data
            $proto.$url = $proto.$representationUrl = this.sdataUrl.url;
            end(this.representation);
        })))));
    }
    private onError(response: AjaxResponse) {
        this.handlerDone(null, {
            status: response.status,
            diagnoses: response.error.diagnoses
        });
    }
    private get(url: string, done: (data: any) => void) {
        if (!this.isDisposed) {
            this.ajax = new Ajax();
            let props: IAjaxProps = {
                url: url,
                end: (response: AjaxResponse) => {
                    this.ajax = null;
                    response.ok ? done(response.data) : this.onError(response);
                }
            };
            if (this.classicAjaxProps) {
                let classicProps: any = props;
                let keys = Object.keys(this.classicAjaxProps);
                for (let key of keys) {
                    classicProps[key] = this.classicAjaxProps[key]
                }
            }
            this.ajax.get(props);
        }
    }
    getRepresentation(next: () => void) {
        let pageUrl = PageLoader.getRepresentationUrl(this.sdataUrl);
        this.get(pageUrl, (representation: Sdata.IRepresentation) => {
            (this.representation = representation).$pageUrl = pageUrl;
            next();
        });
    }
    getPrototype(next: () => void) {
        this.getDefinition(this.representation, "$prototype", next);
    }
    getDefaultArticle(next: () => void) {
        this.getDefinition(this.representation.$prototype, "$article", next);
    }
    getArticle(next: () => void) {
        this.getDefinition(this.representation, "$article", next);
    }
    getPreferences(next: () => void) {
        let $link = this.representation.$links && this.representation.$links.$userPreferences;
        if ($link) {
            this.get($link.$url, (data: any) => {
                this.representation.$preferences = data;
                next();
            });
            return;
        }
        next();
    }
    getDefinition(obj: any, bind: string, next: () => void) {
        if (obj) { //can be null if loader disposed
            let $url = obj[bind];
            if ($url && typeof ($url) == 'string') {
                let params = this.sdataUrl.params;
                if (params && (params.profile || params.role)) {
                    let url = new Url($url);
                    if (params.role) {
                        url.params.role = params.role;
                    }
                    if (params.profile) {
                        url.params.profile = params.profile;
                    }
                    $url = url.stringify();
                }
                this.get($url, (data: any) => {
                    if (obj) {
                        obj[bind] = data;
                        next();
                    }
                });
            }
            else {
                next();
            }
        }
    }
    get isDisposed(): boolean {
        return !this.sdataUrl;
    }
    dispose() {
        this.ajax && this.ajax.dispose();
        this.ajax = this.sdataUrl = this.handlerDone = null;
    }
}