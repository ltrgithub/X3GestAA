"use strict";
var _ext = require('syracuse-ui/lib/extend/extendGateway');
var _styles = {};

exports.fontSizes = "6,7,8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72";

function _setButtonMode(widget, button, isRaw) {
    button.title = isRaw ? widget.locale.richMode : widget.locale.rawMode;
    _ext.dom.toggleClass(button, "buttonRichText", !isRaw);
    _ext.dom.toggleClass(button, "buttonRawText", isRaw);
}

function _getFontFace(node, styleProp) {
    while (node && (node.nodeType != Node.ELEMENT_NODE || node.nodeName !== "FONT")) {
        node = node.parentNode;
    }
    return node && node.face;
}

function _getStyle(node, styleProp) {
    // do not use window.getComputedStyle because it returns font-size in px instead of pt
    while (node && (node.nodeType != Node.ELEMENT_NODE || node.style[styleProp] == null)) {
        node = node.parentNode;
    }
    return node && node.style[styleProp];
}

function _getStyles(node) {
    _styles = {};
    _getStylesFromNode(node);
    return _styles;
}

function _getStylesFromNode(node) {
    // do not use window.getComputedStyle because it returns font-size in px instead of pt
    while (node && node.nodeType != Node.ELEMENT_NODE) {
        node = node.parentNode;
    }
    var styles = "";
    if (node && node.style) {
        var styleProp;
        for (var ii = 0, jj = node.style.length; ii < jj; ii++) {
            if (node.style[ii] != "") {
                styleProp = node.style[ii];
                _styles[styleProp] = node.style[styleProp];
            }
        }
    }
}

function _getTagNames(node) {
    var tagNames = [];
    while (node && node.parentNode) {
        if (node.tagName) {
            switch (node.tagName) {
                case "SPAN":
                case "BODY":
                case "HTML":
                case "P":
                case "FONT":
                    node = null; //end loop
                    break;
                default:
                    tagNames.push(node.tagName);
                    break;
            }
        }
        node = node && node.parentNode;
    }
    return tagNames;
}

exports.rawMode = function(widget, $buttons) {
    $buttons.rawMode = {
        name: "rawMode",
        title: widget.locale.rawMode,
        popupName: "rawMode",
        popupClass: "cleditorPrompt",
        popupContent: document.createElement("div"),
        getEnabled: function(data) {
            var _widget = data.editor.options._widget;
            if (_widget && !_widget.disposed) {
                var rawAllowed = _widget.isRawAllowed;
                var isRaw = rawAllowed && data.editor.options._isRaw();
                _setButtonMode(_widget, data.button, isRaw);
                return rawAllowed;
            }
        },
        buttonClick: function(event, data) {
            var button = event.target;
            var editor = data.editor;
            var _widget = ((editor || {}).options || {})._widget;
            if (_widget && !_widget.disposed) {
                var html;
                if (editor.options._isRaw()) {
                    editor.options._setRaw(false);
                    html = _widget._fixHtml(editor.$area.val());
                    html = (html || "").replace(/\r\n/g, "<br/>").replace(/\n/g, "<br/>").replace(/<\/pre><pre>/gi, "<br/>").replace(/\s/g, "&nbsp;");
                    var $$content = $(html);
                    if ($$content.is('pre')) {
                        html = $$content.html();
                    }
                    html = _widget.fixEmptyPre(html);
                    //safeSetHtml
                    if (html && html.indexOf("<") !== -1) {
                        //escapeHtml
                        var div = document.createElement('div');
                        div.appendChild(document.createTextNode(html));
                        html = div.innerHTML;
                    }
                    editor.doc.body.innerHTML = _widget.htmlUnescape(html);

                    editor.options._setRaw(false);
                    _setButtonMode(_widget, button, false);
                    editor.updateTextArea();
                    editor.focus();
                    _widget.context.onFieldInputEvent(event);
                    return false;
                }
                _ext.alert.ask({
                    $type: "warning",
                    $title: _widget.locale.aboutToSwitchToRawTitle,
                    $message: _widget.locale.aboutToSwitchToRawConfirm,
                    mode: "yes,no",
                    onClose: function(closeBy) {
                        if (closeBy == "yes") {
                            if (!editor.options._isRaw()) {
                                // use text function instead of html function to prevent xss attack
                                var rawtext = _widget._normalizeRawText(_widget.getEditorInnerText(editor.doc.body, editor.$frame[0].contentWindow)),
                                    $$pre = $('<pre>').appendTo('<div>').text(rawtext || String.fromCharCode(1));
                                editor.$area.val($$pre.parent().html());
                                editor.options._setRaw(true);
                                _setButtonMode(_widget, button, true);
                            }
                            editor.updateFrame();
                            _widget._disable(editor.disabled);
                        }
                        editor.hidePopups();
                        editor.focus();
                        _widget.context.onFieldInputEvent(event);
                    }
                });
                _ext.dom.remove(data.popup);
            }
        }
    };
};
exports.font = function(widget, $buttons) {
    $buttons.font.buttonClick = function(e, data) {
        var fs, range = widget._getSelection(data.editor);
        var highlight = "rgb(250, 0, 0)";
        try {
            fs = _getStyle(range && range.anchorNode, "font-Family");
            if (!fs) {
                fs = _getStyle(range && range.anchorNode, "fontFamily");
            }
            if (!fs) {
                fs = _getFontFace(range && range.anchorNode);
            }
        } catch (e) {
            fs = "";
        }
        fs = fs ? fs.replace(/"/g, "").replace(/'/g, "") : "";
        if (!fs) {
            fs = widget.defaultOptions.fontFace;
        }
        for (var ii = 0, jj = data.popup.children.length; ii < jj; ii++) {
            if (data.popup.children[ii].innerHTML == fs) {
                $(data.popup.children[ii]).css("color", highlight);
            } else if ($(data.popup.children[ii]).css("color") == highlight) {
                $(data.popup.children[ii]).css("color", "white");
            }
        }
    };
};
exports.size = function(widget, $buttons) {
    $buttons.size.buttonClick = function(e, data) {
        var range = widget._getSelection(data.editor);
        var fs = _getStyle(range && range.anchorNode, "font-size");
        if (!fs) {
            fs = widget.defaultOptions.fontSize;
        }
        if (parseInt(fs, 0) > 0) {
            fs = fs.replace("pt", "");
            if (fs.indexOf(".") > 0) {
                fs = fs.substr(0, fs.indexOf("."));
            }
            for (var ii = 0, jj = data.popup.children[0].length; ii < jj; ii++) {
                if (data.popup.children[0][ii].value == fs) {
                    data.popup.children[0][ii].selected = true;
                    break;
                }
            }
        }
    };
    var list = document.createElement("select");
    list.setAttribute("size", "8");
    var sizes = exports.fontSizes.split(",");
    for (var ii = 0, jj = sizes.length; ii < jj; ii++) {
        list.appendChild(document.createElement("option")).textContent = sizes[ii];
    }
    var popup = document.createElement("div");
    popup.appendChild(list);
    $buttons.size.popupContent = $(popup).html();
    $buttons.size.popupClass = "cleditorList";
    $buttons.size.popupClick = function(e, data) {
        var range = widget._getSelection(data.editor);
        var styles = _getStyles(range && range.anchorNode);
        var props = Object.keys(styles);
        var ns = "";
        for (var ii = 0, jj = props.length; ii < jj; ii++) {
            if (props[ii] !== "font-size") {
                ns += " " + props[ii] + ": " + styles[props[ii]];
            }
        }
        var tagNames = _getTagNames(range && range.anchorNode);
        var tagS = "";
        var tagE = "";
        for (var ii = 0, jj = tagNames.length; ii < jj; ii++) {
            tagS += "<" + tagNames[ii] + ">";
            tagE += "</" + tagNames[ii] + ">";
        }
        data.command = "inserthtml";
        var sel = data.editor.selectedHTML().replace(/\r\n/gi, "");
        var divS = "";
        var divE = "";
        var ev = data.editor.$area.val();
        if (ev.startsWith("<p></p>")) {
            ev = ev.substring(7);
        }
        if (ev.endsWith("<p></p>")) {
            ev = ev.substring(0, ev.length - 7);
        }
        if (ev === sel || sel.toLowerCase().startsWith("<p>")) {
            divS = "<div>";
            divE = "</div>";
        }
        sel = sel.replace(/font-size:[0-9. ]+p(t|x);*/g, '').replace(/\<span style=""\>([^\<]*)\<\/span\>/g, '$1').replace(/<p><\/p>/gi, "").replace(/<div><div>/gi, "<div>").replace(/<\/div><\/div>/gi, "<\/div>");
        data.value = divS + tagS + '<span style="font-size:' + e.target.value + 'pt;' + ns + '">' + sel + '</span>' + tagE + divE;
        return true;
    };
};

function _setColorTitle(popup) {
    $(popup).children(":not([title]), [title='']").attr("title", function() {
        var toHex = function(n) {
            n = parseInt(n, 10);
            return ("00" + n.toString(16)).slice(-2);
        };
        var re = new RegExp("\\d+\,\\s+\\d+\,\\s+\\d+");
        var c = re.exec($(this).css("backgroundColor"))[0].split(",");
        return "#" + toHex(c[0]) + toHex(c[1]) + toHex(c[2]);
    });
}

exports.color = function(widget, $buttons) {
    $buttons.color.buttonClick = function(e, data) {
        _setColorTitle(data.popup);
    };
    $buttons.highlight.buttonClick = function(e, data) {
        _setColorTitle(data.popup);
    };
};
exports.link = function(widget, $buttons) {
    $buttons.link.buttonClick = function(e, data) {
        var $$focusNode = $(widget._getSelection(data.editor).focusNode);
        var href = $$focusNode.closest("a").attr("href") || $$focusNode.find("a").attr("href");
        if (href && href != "") {
            $(data.popup).find(":text").val(href);
        }
    };
};
exports.insertTable = function(widget, $buttons) {
    $buttons.insertTable = {
        name: "insertTable",
        title: widget.locale.insertTable,
        popupName: "insertTable",
        getEnabled: function(data) {
            _ext.dom.toggleClass(data.button, "buttonInsertTable", true);
            return !data.editor.options.isRtfMimeType;
        },
        buttonClick: function(e, data) {
            _ext.popup.closeAll();
            var editor = data.editor;
            editor.focus();
            var range;
            try {
                var sel = widget._getSelection(editor);
                range = sel && sel.getRangeAt(0);
            } catch (e) { }
            _ext.popup.open({
                $itemPage: {
                    $isEditMode: true,
                    $facet: "$edit",
                    $representation: {
                        $prototype: {
                            $properties: {
                                $rows: {
                                    $type: "application/x-integer",
                                    $title: widget.locale.tableRows,
                                    $maxLength: 5
                                },
                                $columns: {
                                    $type: "application/x-integer",
                                    $title: widget.locale.tableCol,
                                    $maxLength: 5
                                },
                                $borderSize: {
                                    $type: "application/x-integer",
                                    $title: widget.locale.tableBorderSize,
                                    $maxLength: 5
                                },
                                $withHeader: {
                                    $type: "application/x-boolean",
                                    $title: widget.locale.tableWithHeader
                                }
                            },
                            $links: {}
                        },
                        $article: {
                            $title: widget.locale.tableTitle,
                            $category: "section",
                            $layout: {
                                $items: [{
                                    $layoutType: "stack",
                                    $items: [{
                                        $layoutType: "row",
                                        $items: [{
                                            $bind: "$rows",
                                        }, {
                                            $bind: "$columns"
                                        }]
                                    }, {
                                        $layoutType: "row",
                                        $items: [{
                                            $bind: "$borderSize",
                                        }, {
                                            $bind: "$withHeader"
                                        }]
                                    }]
                                }]
                            }
                        }
                    }
                },
                onValidate: function(page) {
                    syra_form.validate(page);
                    if (page.dataset && Object.keys(page.dataset).length > 0) {
                        var rows = parseInt(page.dataset.$rows, 10),
                            cols = parseInt(page.dataset.$columns, 10),
                            border = parseInt(page.dataset.$borderSize, 10),
                            header = page.dataset.$withHeader,
                            i, j;
                        var html = '<div><table cellspacing="1" cellpadding="1" border="' + (border || 0) + '">';
                        if (header) {
                            html += '<thead><tr>';
                            for (j = 0; j < cols; j++) {
                                html += '<th><br></th>';
                            }
                            html += '</tr></thead>';
                        }

                        html += '<tbody>';
                        for (i = 0; i < rows; i++) {
                            html += '<tr>';
                            for (j = 0; j < cols; j++) {
                                html += '<td><br></td>';
                            }
                            html += '</tr>';
                        }
                        html += '</tbody>';
                        html += '</table></div>';
                        editor.execCommand("inserthtml", html, null, data.button);
                    }
                    editor.focus();
                },
                position: {
                    my: "left bottom",
                    at: "right top",
                    of: e.target
                }
            });
            return false;
        }
    };
};
exports.extendSize = function(widget, $buttons) {
    $buttons.extendSize = {
        name: "extendSize",
        title: widget.locale.extendSize,
        getEnabled: function(data) {
            _ext.dom.toggleClass(data.button, "buttonExtendSize", true);
            return true;
        },
        buttonClick: function(e, data) {
            var heightList = ["auto", "400px", "600px", "800px"];
            var editor = data.editor;
            var _widget = editor.options._widget;
            editor.$heightIndex = ((editor.$heightIndex || 0) + 1) % heightList.length;
            editor.options.height = heightList[editor.$heightIndex];
            _ext.page.resize(_widget.context);
            _widget._refreshEditor();
            _widget.context.onFieldInputEvent(e);
            return false;
        }
    };
};
exports.misc = function(widget, $buttons) {
    var ids = ("bold italic underline strikethrough subscript superscript font size style " + //
        "color highlight bullets numbering outdent indent alignleft center alignright " + //
        "justify rule image link unlink removeformat source").split(" ");
    for (var ii = 0, jj = ids.length; ii < jj; ii++) {
        var btn = $buttons[ids[ii]];
        if (btn) {
            btn.getEnabled = function(data) {
                var rawAllowed = data.editor.options._widget.isRawAllowed;
                return !(rawAllowed && data.editor.options._isRaw());
            };
        }
    }
    $buttons.style.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.image.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.link.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.unlink.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.rule.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.superscript.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
    $buttons.subscript.getEnabled = function(data) {
        return !data.editor.options.isRtfMimeType;
    };
};
