"use strict";
var _ext = require('@sage/syracuse-ui/lib/extend/extendGateway');
var Process = require('./tools/process').Process;
var _tools = require('./tools/processTools');
var _symbolManager = require('./tools/symbolManager');
var _locale = require('streamline-locale');

var libsinfo;
var bibMapping;

function loadLibInfo(cb) {
	if (libsinfo) {
		cb(null, libsinfo);
		return;
	}
	syra_ajax.send({
		url: "/@sage/ui-chart/public/deps/flash/FLASH/FlowCharting/xtec/sage_libraries/sage_basic/sgx_libsinfo.txt",
		success: function (data, response, requestUrl) {
			libsinfo = data;
			cb(null, libsinfo);
		},
		error: function (error) {
			cb(error);
		}
	});
}

var Player = function (context) {
	this.context = context;
	this.locale = _locale.resources(module)();
};

Player.prototype._tryParse = function (json) {
	try {
		return JSON.parse(json);
	} catch (e) {
		throw new Error("Failed to parse " + json + "\n[" + e.message + "]");
	}
};


Player.prototype._constructLinksObj = function (params) {
	var obj = {};
	switch (params.xtype) {
		case 'url':
			obj.$type = "application/json;vnd.sage=syracuse";
			obj.$url = params.xcode;
			break;
		default:
			this.context.invalidate((this.locale.flProcessPlayerIncorrectLinkType || "").replace("{0}", params.xtype));
			break;
	}
	if (params.xtarget != null) {
		obj.$target = params.xtarget;
	}
	return obj;
};

Player.prototype.resize = function () {
	if (!bibMapping)
		return;

	var self = this;
	if (self.playerSlot && self.process && !self.isDisplayed) {
		self.isDisplayed = true;
		var supportForeignObject = !(_ext.context.browser.isMSIE || _ext.context.browser.isSafari);
		var layers = self.process.layersArr;
		var actions = self.process.acts.a;
		var csize = {
			x: self.process.contentSize.xwidth,
			y: self.process.contentSize.xheight
		};
		var result = "";

		self.context.div.parentNode.style.maxWidth = csize.x + 10 +"px";
		self.context.div.parentNode.style.width = "100%";
		self.context.div.parentNode.style.overflow = "auto";


		self.symbolManager && self.symbolManager.destroy();
		self.symbolManager = _symbolManager.create(self.workerSlot);

		function createAction(action, index, array) {
			function clickHdl() {
				var targ = self.$$playerSlot.find('.target' + action.id);
				targ.css('display', 'block');
			}
			var trigger = self.$$playerSlot.find('.trigger' + action.id);
			var targ;
			trigger.attr('pointer-events', 'visible');
			trigger.css('cursor', 'pointer');
			switch (action.type) {
				case 'shotip':
					self.$$playerSlot.find('.target' + action.id).hide();
					trigger.mouseover(function (e) {
						self.$$playerSlot.find('.target' + action.id).css('display', 'block');
					});
					trigger.mouseout(function (e) {
						self.$$playerSlot.find('.target' + action.id).css('display', 'none');
					});
					break;
				case 'sho':
					targ = self.$$playerSlot.find('.target' + action.id);
					var isHideTarget = false;
					array.forEach(function (a, index, array) {
						if (a.type === 'hid' && targ.is('.target' + a.id))
							isHideTarget = true;
					});
					if (!isHideTarget) {
						targ.hide();
					}
					trigger.click(function () {
						self.$$playerSlot.find('.target' + action.id).show();
					});
					break;
				case 'shopopmenu':
					targ = self.$$playerSlot.find('.target' + action.id);
					targ.hide();
					trigger.click(clickHdl);
					self.$$playerSlot.click(function (e) {
						var parenttrigger = $(e.target).parents().filter(function (idx, el) {
							if ($(el).is('.trigger' + action.id))
								return true;
						});
						var parenttarget = $(e.target).parents().filter(function (idx, el) {
							if ($(el).is('.target' + action.id))
								return true;
						});
						if (!($(e.currentTarget).is('.trigger' + action.id)) && parenttrigger.size() === 0 && !($(e.currentTarget).is('.target' + action.id)) && parenttarget.size() === 0) {
							targ.hide();
						}
					});
					break;
				case 'hid':
					trigger.click(function () {
						self.$$playerSlot.find('.target' + action.id).hide();
					});
					break;
				case 'shohid':
					trigger.click(function () {
						var targ = self.$$playerSlot.find('.target' + action.id);
						var hidden = (targ.css('display') == 'none'); //(target.attr('display') == 'none');
						if (hidden)
							targ.css('display', 'block');
						else
							targ.css('display', 'none');
					});
					break;
				case 'shoallpopmenu':
					trigger.click(function (e) {
						array.forEach(function (a, index, array) {
							if (a.type === "shopopmenu") {
								var targets = self.$$playerSlot.find('.target' + a.id); //+':hidden') ;
								var trig = self.$$playerSlot.find('.trigger' + a.id);
								targets.each(function (index, el) {
									var hidden = ($(el).css('display') == 'none');
									if (hidden) {
										trig.unbind('click', clickHdl);
										$(el).css('display', 'block');
									} else {
										trig.bind('click', clickHdl);
										$(el).css('display', 'none');
									}
								});
							}
						});
						e.stopPropagation();
					});
					break;
			}
		}

		var defs = '<defs>',
			ii, jj, group;

		for (var gn = 0, sizeG = layers.length; gn < sizeG; gn++) {
			group = layers[gn];
			for (var i = 0; i < group.xpropsArr.length; i++) {
				var shapeInfo = _tools.createShape(group.xpropsArr[i], csize, bibMapping, self.symbolManager);
				defs += (shapeInfo.defs || "");
				var rotation = false;
				if (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode == "K_API_ELLIPSE") {
					rotation = (Math.atan2(group.xpropsArr[i].xanchors[2].y - group.xpropsArr[i].xanchors[0].y, group.xpropsArr[i].xanchors[2].x - group.xpropsArr[i].xanchors[0].x) !== 0);
				} else {
					if (group.xpropsArr[i].xshapeType == "clipshape" || (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode != "K_API_LINE")) {
						rotation = (Math.atan2(group.xpropsArr[i].xanchors[1].y - group.xpropsArr[i].xanchors[0].y, group.xpropsArr[i].xanchors[1].x - group.xpropsArr[i].xanchors[0].x) !== 0);
					}
				}
				var ttext = '';
				if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
					result += '<g id="' + group.xpropsArr[i].uniqueID + '" class="link">';
				}
				var xactionProps = group.xpropsArr[i].xactionProps;
				if (xactionProps.targ || xactionProps.trig) {
					var css = "";
					if (xactionProps.targ) {
						for (ii = 0, jj = xactionProps.targ.length; ii < jj; ii++) {
							css += "target" + xactionProps.targ[ii] + " ";
						}
					}
					if (xactionProps.trig) {
						for (ii = 0, jj = xactionProps.trig.length; ii < jj; ii++) {
							css += "trigger" + xactionProps.trig[ii] + " ";
						}
					}
					result += ("<g " + (css ? ("class='" + css + "'") : "") + ">");
				}
				if (rotation) {
					result += '<g transform="' + _tools.getRotate(group.xpropsArr[i]) + '">';

				}
				result += shapeInfo.descr || "";
				if (rotation) {
					result += '</g>';
				}
				if (group.xpropsArr[i].xtext) {
					if (supportForeignObject) {
						ttext = _tools.createText(group.xpropsArr[i], rotation);
						result += ttext;
					}
					// result += _tools["createText" + (!supportForeignObject && "_ie" || "")](group.xpropsArr[i], rotation);
				}
				if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
					result += '</g>';
				}
				if (xactionProps.targ || xactionProps.trig) {
					result += '</g>';
				}
			}
		}
		defs += '</defs>';
		var svgdescr = '<svg  xmlns="http://www.w3.org/2000/svg" width="' + csize.x + 'px" height="' + csize.y + 'px" version="1.1"> ' + defs + result + '</svg>';
		var svgplot = $(svgdescr);
		self.$$playerSlot.empty();
		self.$$playerSlot.append(svgplot);
		if (!supportForeignObject) {
			var $$textDiv = $('<div class="s-process-text">').appendTo(self.$$playerSlot);
			$$textDiv.css("position", "absolute").css("left", "0px").css("top", "0px");
			//create the texts as div elements
			for (var mm = 0, kk = layers.length; mm < kk; mm++) {
				group = layers[mm];
				for (ii = 0, jj = group.xpropsArr.length; ii < jj; ii++) {
					if (group.xpropsArr[ii].xtext) {
						_tools.appendText(group.xpropsArr[ii], $$textDiv[0]);
					}
				}
			}
		}

		actions.forEach(createAction);

		function manageLink(index, link) {
			var $$link = $(link);
			var uri_decoded = decodeURIComponent(link.getAttribute('href'));
			var children = $$link.contents();
			var next = $$link.next();
			var uri = uri_decoded && uri_decoded.replace("asfunction:_global.ShapeLabelURLClicked,", "");
			var linksobj = self._constructLinksObj(self._tryParse(uri));
			if (next.length === 0) {
				$$link.parent().append(children);
			} else {
				next.before(children);
			}
			$$link.remove();
			if (!linksobj) {
				self.context.invalidate((self.locale.flProcessPlayerLinkNotSupported || "").replace("{0}", uri));
			} else {
				children &&
					children.bind('click', function (e) {
						_ext.menu.fire(self.context, {
							$link: linksobj
						});
						return false;
					});
				children.css('cursor', 'pointer');
			}
		}
		var textlinks = self.$$playerSlot.find('a');
		textlinks.each(manageLink);

		function addLink(index, link) {
			var params = self._tryParse(decodeURIComponent(link.getAttribute('link')));
			link.removeAttribute('link');
			var linksobj = self._constructLinksObj(params);
			var g = $(link).closest('g.link');
			g.click(function (e) {
				_ext.menu.fire(self.context, {
					$link: linksobj
				});
				return false;
			});
			g.css('cursor', 'pointer');
			if (!supportForeignObject && g[0]) {
				var divtext = self.$$playerSlot.find("div#" + (g[0].id || g[0].getAttribute('id')) + 'p');
				divtext.bind('click', function (e) {
					_ext.menu.fire(self.context, {
						$link: linksobj
					});
					return false;
				});
				divtext.css('cursor', 'pointer');
			}
			g.attr('pointer-events', 'visible');
		}
		var links = svgplot.find('*[link]');
		links.each(addLink);
	}
};

Player.prototype.setValue = function (value) {
	if (this.currentValue != value) {
		this.currentValue = value;
		if (!this.playerSlot) {
			this.playerSlot = document.createElement("div");
			this.$$playerSlot = $(this.context.div.appendChild(this.playerSlot));
			var slot = this.workerSlot = document.createElement("div");
			slot.style.display = "block";
			slot.style["line-height"] = 0;
			slot.style.height = 0;
			slot.style.overflow = "hidden";
			this.context.div.appendChild(this.workerSlot);
			// this.context.div.style.overflow = "auto";
			// this.context.div.style.width = "100%";
		}

		this.$$playerSlot.css("position", "relative");
		this.$$playerSlot.css("word-break", "normal");

		this.process = value.$data;
		this.process.layersArr = this.process.layersArr || [];
		this.process.acts = this.process.acts || {};
		this.process.acts.a = this.process.acts.a || [];
		this.process.contentSize = this.process.contentSize || {
			xwidth: 0,
			xheight: 0
		};
		var size = this.process.contentSize,
			xsize, xcenter, h, w, a;
		this.process.layersArr.forEach(function (g) {
			g.xpropsArr = g.xpropsArr || [];
			g.xpropsArr.forEach(function (xprop) {
				xprop.xshadowProps = xprop.xshadowProps || {};
				xcenter = xprop.xcenter || {};
				xcenter.x = xcenter.x || 0;
				xcenter.y = xcenter.y || 0;
				xsize = xprop.xsize || {};
				a = xprop.xanchors = xprop.xanchors || [];
				w = a[0] && a[1] && Math.sqrt((a[1].x - a[0].x) * (a[1].x - a[0].x) + (a[1].y - a[0].y) * (a[1].y - a[0].y));
				h = a[1] && a[2] && Math.sqrt((a[2].x - a[1].x) * (a[2].x - a[1].x) + (a[2].y - a[1].y) * (a[2].y - a[1].y));
				xsize.xwidth = xsize.xwidth || w || 0;
				xsize.xheight = xsize.xheight || h || 0;
				w = xcenter.x + xsize.xwidth / 2;
				h = xcenter.y + xsize.xheight / 2;
				size.xwidth = w > size.xwidth ? w : size.xwidth;
				size.xheight = h > size.xheight ? h : size.xheight;
			});
		});

		this.info = value.$info;
		var self = this;
		if (!bibMapping) {
			loadLibInfo(function (err, res) {
				if (err) {
					return;
				}
				if (!bibMapping) {
					bibMapping = {};
					var li = res && res.libsinfo;
					if (li) {
						for (var ii = 0, jj = li.length; ii < jj; ii++) {
							var lib = li[ii];
							if (lib.biblist) {
								for (var mm = 0, kk = lib.biblist.length; mm < kk; mm++) {
									bibMapping[lib.biblist[mm].bibid] = lib.biblist[mm];
								}
							}
						}
					}
				}
				self.isDisplayed = false; //force refresh
				self.resize();
			});
		} else {
			this.isDisplayed = false; //force refresh
			this.resize();
		}
	}
};

exports.stylesheets = ["/@sage/ui-visual-process/public/player.css"];
exports.create = function (context) {
	return new Player(context);
};
