"use strict";
import * as util from 'util';
import * as mongodb from 'mongodb';
import * as ez from 'ez-streams';

var tracer; // = console.log;

export function close(db) {
	if (db) db.close();
};

export function open(configdata, _, tenant) {
	var config = {};
	try {
		config = require("../../../../../nodelocal").config || {};
		config.streamline.fast = false;
	} catch (ex) {
		console.log(ex);
	}

	if (!configdata) {
		configdata = config.collaboration || {};
	}
	tracer && tracer("Open with config " + util.format(configdata));
	var databaseName = configdata.databaseName || "syracuse";
	// maybe set tenant ID for database
	if (tenant) {
		databaseName = tenant + "-" + databaseName;
	} else {
		for (var i = 2; i < process.argv.length; i++) {
			var arg = process.argv[i];
			if (arg.substr(0, 9) === "tenantId=") {
				databaseName = arg.substr(9) + "-" + databaseName;
				console.log("Dataset " + databaseName);
				break;
			}
		}
	}

	//	var db1 = new mongodb.Db(databaseName, new mongodb.Server(configdata.hostname || "localhost", configdata.port || 27017, {}), {
	//		w: "majority"
	//	});
	var db;
	try {
		//		var db = db1.open(_);
		var dbUrl = "mongodb://" + (config.collaboration.connectionString || (configdata.hostname || "localhost") + ":" + (configdata.port || 27017)) + "/" + databaseName;
		var mongoOpt = (config.mongodb || {}).options;
		var db = mongodb.MongoClient.connect(dbUrl, mongoOpt || {
			db: {
				w: 1
			}
		}, _);
	} catch (e) {
		if (db) db.close();
		console.error("Cannot open database " + e + " for URL " + dbUrl + " and options " + require('util').format(mongoOpt));
		return null;
	}
	if (!db) console.error("Cannot open database for URL " + dbUrl + " and options " + require('util').format(mongoOpt));
	return db;
};

export function createCollection(db, name, _) {
	if (!db) return undefined;
	return db.createCollection(name, _);
};

export function find(collection, condition, _) {
	return collection.find(condition).toArray(_);
};

export function count(collection, condition, _) {
	return collection.count(condition, _);
};

export function insert(collection, entry, _) {
	collection.insert(entry, {
		safe: true
	}, _);
};

export function update(collection, condition, set, _) {
	collection.update(condition, {
		$set: set
	}, {
		safe: true
	}, _);
};

export function updateAll(collection, condition, set, _) {
	collection.update(condition, {
		$set: set
	}, {
		safe: true,
		multi: true
	}, _);
};

export function remove(collection, condition, _) {
	collection.remove(condition, {
		safe: true
	}, _);
};

export function time(db, _) {
	if (!db._syracuseFinalCode) {
		db._syracuseFinalCode = new mongodb.Code("Date.now()");
	}
	var t = db.eval(db._syracuseFinalCode, null, {
		nolock: true
	}, _);
	return t;
};

// finds related instance of other entity related to the foreign id information of that field.
// returns the instance which must be put into that field, e. g. instance.ab = findInstance(instance.ab, list)
// is idempotent when found instance does not include _uuid attribute.
// if extraName is set, look for that value of the attribute whose name is contained in 'extraName'. 
export function findInstance(attr, list, extraName) {
	if (!attr) return null;
	var id = attr._uuid;
	// console.log("Find instance ID "+util.format(attr))
	if (id) {
		for (var i = list.length - 1; i >= 0; i--) {
			var element = list[i];
			//	console.log(id+" Element "+element._id)
			if (element._id === id) {
				return element;
			}
		}
		return null;
	} else if (extraName) {
		for (var i = list.length - 1; i >= 0; i--) {
			var element = list[i];
			//	console.log(id+" Element "+element._id)
			if (element[extraName] === attr[extraName]) {
				return element;
			}
		}
		return null;
	}
	return attr;
};

// returns the "foreign key" for this instance
export function setRelatedInstance(related) {
	return related ? {
		_uuid: related._id
	} : null;
};

export function binaryContent(db, field, _) {
	// console.log("Binary "+util.format(field))
	if (field) {
		if (field._uuid) {
			var gs = new mongodb.GridStore(db, field._uuid, "r");
			var str = ez.devices.node.reader(gs.open(_).stream(true));
			return str.read(_, -1);
		} else return field;
	};
	return null;
};