const locale = require('streamline-locale');

export const entity = {
	$titleTemplate: "Oracle service",
	$valueTemplate: "{description}",
	$helpPage: "Administration-reference_oracle-service",
	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true,
			$linksToDetails: true
		},
		host: {
			$title: "Host",
			$isMandatory: true,
		},
		port: {
			$title: "port",
			$type: "integer",
			$default: 1521,
		},
		sid: {
			$title: "SID",
			$isMandatory: true,
		},
		user: {
			$title: "User",
		},
		password: {
			$title: "Password",
			$type: "password",
			$encrypt: true,
		},
	},
	$relations: {},
	$services: {
  		test: {
			$method: "POST",
			$isMethod: true,
			$title: "Test connection",
			$parameters: {
				$properties: {
					"user": {
						$title: "User",
						$type: "application/x-string",
						$value: ""
					},
				}
			},
			$execute(_, context, instance, parameters) {
				try {
					const oracle = require('oracledb');
					const config = {
						connectString: instance.host(_) + (instance.port(_) ? ':' + instance.port(_) : '') + '/' + instance.sid(_),
						user: parameters.user,
						password: instance.password(_),
					};
					const cnx = oracle.getConnection(config, _);
					const result = cnx.execute('select count(*) from USER_TABLES', _);
					cnx.close(_);
					if (result.rows && result.rows[0] && result.rows[0][0] > 0) instance.$addDiagnose('success', `connection test succeeded`);
					else throw new Error(`unexpected result: ${JSON.stringify(result)}`);
				} catch (ex) {
					instance.$addDiagnose("error", ex.message);
				}
			}
		},
	},
	$events: {},
	$functions: {
		getKind() { return 'oracle'; }
	},

};