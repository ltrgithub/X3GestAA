import { helpers } from '@sage/syracuse-core';

export let tracer; // = console.log;
const _scripts = [];
let cryptHandle;

function _encrypt(str) {
    cryptHandle = cryptHandle || require('../../license/index').load('license');
    return cryptHandle.license(0, str, new Boolean(true));
}

function createOracleService(_, db, ep, cache) {
    const host = ep.etnaDatabaseHost;
    const port = ep.etnaDatabasePort;
    const sid = ep.etnaOracleSID;
    const pwd = ep.etnaDatabasePassword && _encrypt(ep.etnaDatabasePassword);

    if (!sid) {
        console.warn(`Endpoint ${ep.name}: Cannot upgrade oracle config: SID missing`);
        return undefined;
    }
    if (!pwd) {
        console.warn(`Endpoint ${ep.name}: Cannot upgrade oracle config: password missing`);
        return undefined;
    }
    const key = [host, port, sid, pwd].join('/');
    if (cache[key]) return cache[key];

    const description = `${ep.dataset} oracle service`;
    tracer && tracer(`Creating ${description}`);
    const oracleColl = db.db.collection("OracleService", _);
    const id = helpers.uuid.generate();
    oracleColl.update({
        _id: id,
    }, {
        description: description,
        host: host,
        port: port,
        sid: sid,
        user: '', // ignored - will be folder name
        password: pwd,
    }, {
        safe: true,
        upsert: true
    }, _);
    cache[key] = id;
    return id;
}

function upgradeSqlConfig(_, db, ep, soln, cache) {
    // if already upgraded, skip it
    if (soln.sqlService && soln.sqlService._variantType) return;

    const solnColl = db.db.collection("X3solution", _);
    const oracleUuid = createOracleService(_, db, ep, cache);
    if (!oracleUuid) return;

    solnColl.update({
        _id: soln._id,
    }, {
        $set: {
            rootDir: ep.etnaSolutionPath,
            sqlService: {
                _variantType: 'oracle',
                _uuid: oracleUuid,
            }
        }
	}, {
		safe: true,
		multi: true
	}, _);
}

_scripts[1] = function(_, db) {
	tracer && tracer("Executing update script to version: 1; upgrading oracle configuration in endpoints");

    const epColl = db.db.collection("EndPoint", _);
    const solnColl = db.db.collection("X3solution", _);

    const endpoints = epColl.find({
        etnaDriver: 'oracle',      
    }).toArray(_);
    const cache = {};

	if (endpoints.length > 0) {
        endpoints.forEach_(_, (_, ep) => {
            const solutionUuid = ep.x3solution && ep.x3solution._uuid;
            if (solutionUuid) {
                const soln = solnColl.find({ _id: solutionUuid }).toArray(_)[0];
                if (soln) upgradeSqlConfig(_, db, ep, soln, cache);
            }
        });
	}
	tracer && tracer("Update script to version: 1; executed");
};



export function dataUpdate(_, db, actualVersion, targetVersion) {
	// force log: always
	tracer = console.error;
	//
	_scripts.slice(actualVersion + 1, targetVersion + 1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
};

export const metadata = {
	fileId: "7d7b8817ed85", // this id MUST never change and MUST be unique over all update scripts
	description: "Changed SQL config for ETNA endpoints" // !important, some description, optional and can change
};