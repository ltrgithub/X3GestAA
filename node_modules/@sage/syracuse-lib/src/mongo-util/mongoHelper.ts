"use strict";
import * as mongodb from 'mongodb';

// move options from deprecated structure to root as required starting with mongodb 2.2 driver
function _fixOptions(options) {
	const _deprecatedOpt = ['db', 'server', 'replSet', 'replset', 'mongos'];
	function _copyPropsFromTo(from, to) {
		Object.keys(from).forEach((key) => {
			to[key] = from[key];
		});
	}
	return Object.keys(options || {}).reduce((prev, key) => {
		if (_deprecatedOpt.indexOf(key) !== -1) {
			_copyPropsFromTo(options[key], prev);
		} else prev[key] = options[key];
		return prev;
	}, {});
}

// central code for establishing MongoDB connection
export function connect(callback, collaboration, mongoOptions, tenantId) {
	collaboration = collaboration || {};
	collaboration.driver = collaboration.driver || "mongodb";
	if (collaboration.driver !== "mongodb") return callback && callback("Only MongoDB supported for handling licenses");

	let opt = _fixOptions((mongoOptions || {}).options || {
		db: {
			w: 1
		}
	});
	// name of Syracuse database (dependent on tenantId)
	let dbname = collaboration.databaseName ? collaboration.databaseName : (collaboration.database || "syracuse");
	if (tenantId) dbname = tenantId + '-' + dbname;
	let mongoUser = "";
	let params = [];
	// manage replicaset name
	if (opt.rs_name) {
		params.push("replicaSet=" + encodeURIComponent(opt.rs_name));
		delete opt.rs_name;
		// replicaset should have more than 1 seed
		if ((collaboration.connectionString || collaboration.hostname || "").split(",").length < 2) {
			throw new Error("Mongodb options error: use of replicaset but less than 2 mongodb servers provided in connection options");
		}
	}

	if (collaboration.mongoX509Cert) {
		let certdata, dn;
		let certtools = require('../load-balancer/certTools');
		if (typeof collaboration.mongoX509Cert === "boolean") {
			certdata = opt.replSet.sslCert || opt.server.sslCert;
			dn = certdata && certtools.getDNFromCert(certdata);
		} else {
			certdata = collaboration.mongoX509Cert;	
			if (!Array.isArray(certdata)) certdata = [certdata];
			let name = certdata[0];
			let cas = [];
			for (var i = 1; i<certdata.length; i++) {
				cas.push(certdata[i]);
			}
			let res = certtools.getData(name, cas);
			// for MongoDB driver 2.2, SSL options are not any more in the 'server' object
			opt.server = opt.server || {};
			if (!("sslValidate" in opt.server)) opt.server.sslValidate = true;
			opt.server.sslKey = res.key;
			opt.server.sslCert = res.cert;
			opt.server.sslCA = res.ca;
			dn = res.dn;
		}
		if (!dn) return callback && callback("No distinguish name (DN) for mongoDB X509 authentication");
		mongoUser = encodeURIComponent(dn) + "@";
		params.push("authMechanism=MONGODB-X509");
		params.push("ssl=true");
	}
	let dbUrl = "mongodb://" + mongoUser+(collaboration.connectionString || (collaboration.hostname || "localhost") + ":" + (collaboration.port || 27017)) + 
			"/" + dbname + (params.length ? "?" + params.join("&") : "");
	// console.log("Connection URL", dbUrl, opt);
	return mongodb.MongoClient.connect(dbUrl, opt, callback);
};
