"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var globals = require('streamline-runtime').globals;
var config = require('config'); // must be first syracuse require
var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
var sys = require('util');

var adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper;
var adminTestFixtures = require("@sage/syracuse-lib/test/collaboration/fixtures/adminTestFixtures");
var historyLog = require("@sage/syracuse-lib/src/collaboration/entities/historyLog");


QUnit.module(module.id);

var db;
var setting;
//------------------------
// Init environnement test
//------------------------
asyncTest("Init environnement", 1, function(_) {
	db = testAdmin.initializeTestEnvironnement(_);
	require('syracuse-license').register(_);
	ok(db != null, "Environnement initialized");
	start();
});


//------------------------
// Init history log setting
//------------------------
asyncTest("Init history log setting", 2, function(_) {
	setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {});
	ok(setting, "No general setting");
	setting.loadHistorySettingFromFile(_);
	setting.save(_);
	historyLog.registerModelEvents(_);
	ok(setting.historyLogSettings(_).getLength() != 0, "Import history setting");
	_enableTraceability(_, "setting", true);
	_enableTraceability(_, "users", true);
	start();
});


function _enableTraceability(_, profileName, enable) {
	setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {});
	var hls = setting.historyLogSettings(_).toArray(_).filter_(_, function(_, hls) {
		return hls.code(_) == profileName
	});
	hls[0] && hls[0].enable(_, enable);
	setting.save(_);

}

function _getLastLogFor(_, entityName) {
	return db.fetchInstance(_, db.model.getEntity(_, "historyLog"), {
		jsonWhere: {
			"name": entityName
		},
		orderBy: [{
			binding: "$creDate",
			descending: true
		}]
	});
}

//------------------------
// Test delta serializer
//------------------------
/*
asyncTest("Delta serializer", 5, function(_) {
	var user = db.fetchInstance(_, db.model.getEntity(_, "user"), {jsonWhere:{"login":"admin"}});
	user.lastName(_,"FirstName");
	var group = db.fetchInstance(_, db.model.getEntity(_, "group"), {jsonWhere :{"description":"Guests"}});
	user.groups(_).set(_,group);
	var serializer = require("syracuse-orm/lib/serializer");
    var deltaSerializer = new serializer.DeltaSerializer();
	var res = deltaSerializer.serialize(_, user, null, true);
	//console.log("Serialize",res);
	user.save(_);
	ok(!user.hasErrors(_), "User saved");
	
	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {jsonWhere:{"login":"admin"}});
	user.lastName(_,"Super administrator");
	console.log("Groups count", user.groups(_).toArray(_).length);
	user.groups(_).deleteInstance(_,group.$uuid);
	res = deltaSerializer.serialize(_, user, null, true);
	console.log("Serialize",res);
	user.save(_);
	ok(!user.hasErrors(_), "User saved");
	
	start();
});
*/

//------------------------
// Test user modification history
//------------------------
asyncTest("User history ", 13, function(_) {
	// Enable user traceability
	_enableTraceability(_, "users", true);

	// Create user	
	var user = db.model.getEntity(_, "user").createInstance(_, db);
	user.login(_, "traceability");
	user.password(_, "traceability");
	user.firstName(_, "April");
	user.lastName(_, "Sweetman");
	user.save(_);
	ok(!user.hasErrors(_), "User saved");
	var hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).firstName.$value == "April", "Log user - create user April");

	// Change user first name
	user.firstName(_, "Donald");
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).firstName.$value == "Donald", "Log user - change firstName Donald");

	// Set user group
	var group = db.fetchInstance(_, db.model.getEntity(_, "group"), {});
	user.groups(_).set(_, group);
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).groups.length == 1, "Log user - add group");

	// Delete user group
	user.groups(_).deleteInstance(_, group.$uuid);
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).groups.length == 1, "Log user - delete group");

	//  Change password
	user.lastName(_, "Password");
	user.password(_, "test");
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).password.$value != "", "Log user - change password");


	// Disable user traceability and change user first name
	_enableTraceability(_, "users", false);
	user.firstName(_, "Bred");
	user.save(_);
	var hl1 = _getLastLogFor(_, "user");
	ok(hl.$uuid = hl1.$uuid, "Log user - desactivate history and change firstName Bred - no history");

	//Enable user traceability
	_enableTraceability(_, "users", true);

	// Change sync_ldapP role - reference;
	var ldap1 = db.model.getEntity(_, "ldap").createInstance(_, db);
	ldap1.name(_, "LDAP-TEST-1");
	ldap1.displayName(_, "LDAP-TEST-1");
	ldap1.url(_, " ldap://LDAP-TEST-1");
	ldap1.adminDn(_, "LDAP-TEST-1");
	ldap1.adminPassword(_, "LDAP-TEST-1");
	ldap1.searchBase(_, "LDAP-TEST-1");
	ldap1.authenticationNameMapping(_, "LDAP-TEST-1");
	ldap1.save(_);
	var ldap2 = db.model.getEntity(_, "ldap").createInstance(_, db);
	ldap2.name(_, "LDAP-TEST-2");
	ldap2.displayName(_, "LDAP-TEST-2");
	ldap2.url(_, " ldap://LDAP-TEST-2");
	ldap2.adminDn(_, "LDAP-TEST-2");
	ldap2.adminPassword(_, "LDAP-TEST-2");
	ldap2.searchBase(_, "LDAP-TEST-2");
	ldap2.authenticationNameMapping(_, "LDAP-TEST-2");
	ldap2.save(_);

	user.sync_ldap(_, ldap1);
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).sync_ldap.$value.$uuid = ldap1.$uuid, "Log user - add sync ldap - LDAP1");
	user.sync_ldap(_, ldap2);
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).sync_ldap.$value.$uuid = ldap2.$uuid, "Log user - change sync ldap - LDAP2");

	// Delete role ldap
	user.sync_ldap(_, null);
	user.save(_);
	hl = _getLastLogFor(_, "user");


	// Change locale role - children;
	var locale1 = user.locales(_).add(_);
	locale1.code(_, "en-US");
	locale1.numberDecimalSeparator(_, ".");

	var serializer = require("syracuse-orm/lib/serializer");
	var deltaSerializer = new serializer.DeltaSerializer();
	var res = deltaSerializer.serialize(_, user, null, true);
	console.log("Serialize", res);

	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).locales[0].$uuid = locale1.$uuid, "Log user - add locale en-US");

	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: "traceability"
		}
	});
	var locale2 = user.locales(_).add(_);
	locale2.code(_, "fr-FR");
	locale2.numberDecimalSeparator(_, ".");
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).locales[1].$uuid = locale2.$uuid, "Log user - add locale fr-FR");

	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: "traceability"
		}
	});
	user.locales(_).toArray(_)[0].numberDecimalSeparator(_, ",");
	user.save(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.delta(_).locales[0].numberDecimalSeparator.$prev = ".", "Log user - change locale fr-FR - number decimal separator");


	// Delete user	
	user.deleteSelf(_);
	hl = _getLastLogFor(_, "user");
	ok(hl.op(_) == "del", "Log user - delete user");



	start();
});


//------------------------
// Test setting modification history
//------------------------
asyncTest("Setting history", 3, function(_) {

	// Enable setting traceability
	_enableTraceability(_, "setting", true);
	var hl = _getLastLogFor(_, "setting");
	ok(hl, "Log  enable history log setting - technicalSettings");

	var hl = _getLastLogFor(_, "setting");
	ok(hl, "Log  enable history log setting - technicalSettings");

	setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {});
	setting.historyMaxDays(_, 999);
	setting.save(_);
	var hl = _getLastLogFor(_, "setting");
	ok(hl.delta(_).historyMaxDays.$value == 999, "Log change setting - historyMaxDays");


	start();
})