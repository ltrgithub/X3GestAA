"use strict";

import { helpers } from '@sage/syracuse-core';
var uuid = helpers.uuid;
import * as config from 'config'; // must be first syracuse require
import * as dataModel from '../../../src/orm/dataModel';
import * as registry from '../../../src/sdata/sdataRegistry';
import * as mongodb from 'mongodb';
import * as ez from 'ez-streams';
import * as sys from 'util';
import { AdminHelper as adminHelper } from '../../../src/collaboration/helpers';
//
var tracer; // = console.log;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

import { apis } from '@sage/syracuse-core';
var testAdmin = apis.get('test-admin');

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/unit_test/";
var acceptLanguage = "fr,fr-fr";

function post(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = ez.devices.http.client({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url,
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = ez.devices.http.client({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

var db;
describe(module.id, () => {

	//start syracuse server
	it('initialize syracuse test server', function(_) {
		db = testAdmin.initializeTestEnvironnement(_);
		ok(db != null, "Environnement initialized");
		//
	});

	function onlyInfo(diags) {
		return testAdmin.onlyInfo(diags);
	}

	function hasErrors(body) {
		var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
			return diag.severity == "error";
		});
		if (!hasErr) {
			for (var key in body) {
				if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key]);
			};
		}
		//
		return hasErr;
	}

	var cookie;

	it('http import test', function(_) {
		cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin");
		// create a document tag
		var desc = uuid.generate();
		var body = post(_, cookie, "$import", {
			$prototypes: {
				menuCategory: {
					$key: "description"
				}
			},
			$items: [{
				$type: "menuCategory",
				description: desc
			}]
		});
		tracer && tracer("body (184): " + sys.inspect(body));
		ok(onlyInfo(body.$diagnoses || []), "Imported ok");
		// try to find it
		body = get(_, cookie, "menuCategories(description eq \"" + desc + "\")?representation=menuCategory.$details");
		tracer && tracer("body (189): " + sys.inspect(body));
		strictEqual(body.description, desc, "Retrieved created object ok");
	});
});