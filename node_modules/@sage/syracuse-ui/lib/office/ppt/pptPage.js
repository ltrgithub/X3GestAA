"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

var Theme = {
	"colors": [
		'#41a940',
		'#ff5800',
		'#009fda',
		'#4d4f53',
		'#007f64',
		'#6639b7',
		'#9a9b9c',
		//complementary colors:pink,cyan,orange, dark red,blue/green, dark yellow, light purple
		'#A94076',
		'#00FFF3',
		'#DA7100',
		'#216C76',
		'#7F2100',
		'#EABC31',
		'#9D14B7',
		//triad colors : orange>vertbrigth>violet clair,vert fluo,vertsage> purple,bleu>anis foncé,gris foncé> chocolat,violet> jaune or,grismoyen>ardoise,orange>bleu systeme,vertsage> jaune moutarde,bleu>magenta,vertbrigth> saumon,gris foncé> souris,violet>fuschia,grismoyen>lavande
		'#6857B6',
		'#4CFF19',
		'#8D8607',
		'#60524F',
		'#840E8C',
		'#EABC31',
		'#7792AC',
		'#F59851',
		'#0A09B2',
		'#E01643',
		'#999F8C',
		'#CB9E0A',
		'#D831EA',
		'#A0C4E8'
	]
};

function PptPage() {}

exports.PptPage = helpers.defineClass(PptPage, DesktopPage, {
	load: function() {
		this.isAutoInsertFieldDisabled = true;
		return DesktopPage.prototype.load.call(this);
	},
	drawPage: function() {
		this.$boundProp = this.urlSeg && this.urlSeg.params && this.urlSeg.params.$bind || "$resources";
		this.$proto = this.$prototype.$properties[this.$boundProp];
		this.$dataGridPrototype = this.createListPrototype(this.$proto.$item.$properties);
		var $items = syra_layout.getItemSettings(this, null, true);
		var $listItem;
		for (var ii = $items.length - 1; ii >= 0; ii--) {
			if ($items[ii].$bind == this.$boundProp) {
				$listItem = $items[ii];
				break;
			}
		}
		this.$chartExtensions = this.createChartExtensions(this.$proto, $listItem);
		syra_site.addGrid(this, this.$proto);
	},
	applyChange: function() {},

	applyChangeOffice: function(newData, response, requestUrl, pptInterface, isFirstPage, isLastPage) {
		var self = this;
		var representation = this;
		var items = self.$dataGridPrototype;
		var data = self.convertDataTo2DimArray(newData, items);

		var worksheetData = {
			$columns: items,
			$chartExtensions: self.$chartExtensions,
			$data: data,
			$startIndex: newData.$startIndex,
			$totalResults: newData.$totalResults,
			$itemsPerPage: newData.$itemsPerPage,
			$isFirstPage: isFirstPage,
			$isLastPage: isLastPage
		};

		if (isLastPage) {
			worksheetData.$chartUUID = helpers.uuid.generate();

			var colors = [];
			Theme.colors.map(function(c) {
				colors.push(self._hexToRgbInt(c));
			});
			worksheetData.$colors = colors;
		}
		pptInterface.addDataToWorksheet(worksheetData);
	},

	dispose: function() {},

	createListPrototype: function($prototype) {
		// get column list as string array
		var items = Object.keys($prototype).map(function(prop) {
			return {
				$bind: prop
			};
		});

		// simplified proto
		return items.map(function(item) {
			var protoItem = $prototype[item.$bind];
			return {
				_name: item.$bind.replace("$", "_"),
				// escape $ properties
				_orgName: item.$bind,
				// temporary storage of original name
				_title: protoItem.$title,
				_type: protoItem.$type
			};
		});
	},

	createChartExtensions: function($prototype, $item) {
		var $cube = $prototype.$cube,
			$properties = this.$proto.$item.$properties;
		// Normalize measures
		helpers.object.forEachKey($cube.$measures, function(k, o) {
			if (k.charAt(0) === "$") return;
			o.$title = o.$title || ($properties[k] || {}).$title;
			o.$property = o.$property || k;
		});
		return {
			$axes: $prototype.$axes,
			$cube: $cube
		};
	},

	convertDataTo2DimArray: function(data, $dataGridPrototype) {
		var items = $dataGridPrototype;
		var self = this;
		//

		function format(expression, res) {
			res = res || {};
			var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
				return res[p1] || self.$prototype[p1];
			});

			return value;
		}

		var ret = data[self.$boundProp].map(function(res) {
			return items.map(function(item) {
				var prop = res[item._orgName],
					propProto = self.$proto.$item.$properties;
				var result = {
					value: "",
					$type: ""
				};
				var record = res;
				switch (item._type) {
					case "application/x-string":
						result.value = prop;
						if (record && record.$title) result.value = record.$title;
						break;
					case "application/x-integer":
					case "application/x-decimal":
					case "application/x-datetime":
					case "application/x-date":
					case "application/x-time":
						result.value = prop;
						break;
					case "image":
						if (res[item._orgName]) result.$url = format(res[item._orgName].$url, record);
						break;
					case "application/x-boolean":
						result.value = prop;
						break;

					case "application/x-choice":
						result.value = prop;
						break;

					case "application/x-reference":
						record = prop;
						result.value = (record && propProto.$value && syra_expression.parse(self.$grid.$record, propProto.$value, record)) || "";
						break;
					default:
						result.value = "";
				}
				result.value = result.value || "";
				result.$type = item._type;
				return result;
			});
		});
		return ret;
	},
	_hexToRgbInt: function(hex) {
		var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
		// abc -> aabbcc
		hex = hex.replace(shorthandRegex, function(m, r, g, b) {
			return r + r + g + g + b + b;
		});
		var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
		return (parseInt(result[1], 16) << 16) + (parseInt(result[2], 16) << 8) + parseInt(result[3], 16);
	}
});