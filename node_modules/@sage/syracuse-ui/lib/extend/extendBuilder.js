"use strict";
var ExtendField = require('@sage/syracuse-ui/lib/extend/extendField').ExtendField;

var _mediaTypes, _extTypes = {};

function _loadMediaTypes() {
	_mediaTypes = Object.keys(syra_item.fieldTypes).reduce(function(r, t) {
		var i = t.indexOf('$');
		r[i >= 0 ? t.substring(0, i) : t] = true;
		return r;
	}, {
		// types that are not in the list above but are known to the framework
		"application/x-unknow": true,
		'application/json': true,
		'application/x-json': true,
		'application/x-array': true,
		'application/x-pointer': true,
		'application/x-vignette': true,
		'application/x-document': true,
		'image': true,
		'application/x-binary': true,
	});
}


function _hasWidget($type) {
	// hack to avoid problem with $type: {$baseUrl}...
	if ($type && $type[0] === '{')
		return true; // temporary hack to deal with invalid prototypes
	// hack to avoid problem with $type: application/json; vnd.sage=...
	var semi = $type && $type.indexOf(';');
	if (semi > 0) {
		$type = $type.substring(0, semi);
	}
	return _mediaTypes[$type] || _extTypes[$type];
}

function _walk($prototype, obj, missingTypes) {
	if (obj) {
		var keys = Object.keys(obj);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			_collect($prototype, obj[keys[ii]], missingTypes);
		}
	}
}

function _collect($prototype, obj, missingTypes) {
	if (obj && !obj.$isExcluded) {
		_walk($prototype, obj.$properties, missingTypes);
		_walk($prototype, obj.$variants, missingTypes);
		_collect($prototype, obj.$item, missingTypes);
		if (obj.$type) {
			var $type = obj.$type;
			switch ($type) {
				case "application/x-array":
					if ($prototype.$isCalendarView) {
						obj.$decorator = {
							$stereotype: "calendar"
						};
					}
					var $stereotype = obj.$decorator && obj.$decorator.$stereotype;
					switch ($stereotype) {
						case "calendar":
							$type = obj.$decorator.$bindings ? "application/x-planning" : "application/x-calendar";
							obj.$decoratorType = $type;
							break;
						case "timeline":
						case "orgview":
						case "agenda":
						case "gantt":
							obj.$decoratorType = $type = $type + "-" + $stereotype;
							break;
						default:
							if (obj.$cube) {
								obj.$decoratorType = $type = "application/x-array-chart";
							}
							break;
					}
					break;
				case "application/x-graph":
					if (obj.$format) {
						obj.$graphType = $type += "-" + obj.$format;
					}
					break;
			}
			if (!_hasWidget($type)) {
				missingTypes[$type] = true;
			}
		}
	}
}

function _error($diagnoses) {
	syra_alert.error($diagnoses);
}


function _requireMissing(i, data, finish, error) {
	if (i < data.length) {
		if (!data[i].$module) {
			error("widget extension missing for " + data[i].$type);
		} else {
			require.async(data[i].$module, function(err, api) {
				if (err) {
					error(err);
				} else {
					var $type = data[i].$type;
					_extTypes[$type] = {
						$type: $type,
						api: api
					};
					_requireMissing(i + 1, data, finish, error);
				}
			});
		}
	} else {
		finish();
	}
}

exports.ensureMediaTypes = function($prototype, finish, error) {
	var missingTypes = {};

	!_mediaTypes && _loadMediaTypes();

	_collect($prototype, $prototype, missingTypes);

	var keys = Object.keys(missingTypes);
	if (keys.length === 0) {
		return finish();
	}
	syra_ajax.get({
		url: "/widget-registry?types=" + keys.join(','),
		end: function(response) {
			if (response.ok) {
				_requireMissing(0, response.data, finish, error || _error);
			} else {
				(error || _error)(response.error.diagnoses);
			}
		}
	});
};

exports.create = function($field, $item, boxParent, $type) {
	var fieldClass = _extTypes[$type];
	if (fieldClass) {
		var field = new ExtendField();
		field.$type = $type;
		field.api = fieldClass.api;
		return field;
	}
};