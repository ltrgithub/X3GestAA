"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var Field = require('@sage/syracuse-ui/lib/field/field').Field;


function Panel() {}

_helpers.defineClass(Panel, null, {
	load: function(filter_field, $prototype, slot) {
		this.filter_field = filter_field;
		this.isFilterArticle = this.isRecordArticle = true;
		this.filter_criteria_css = "s-filter-criteria";
		this.$facet = "$filter";
		this.$isEditMode = true;
		syra_item.initialize(filter_field.articleParent.page, this, {
			$layout: {
				$items: []
			}
		}, filter_field.articleParent);
		this.$prototype = $prototype.$item;
		//this.$prototype.$localization = this.page.$prototype.$localization;
		syra_article.beforeDraw(this);

		this.filterMap = {};
		this.slot = syra_dom.ul("s-filter-criterion", slot);
		var $binds = Object.keys(this.$prototype.$properties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.$prototype.$properties[$bind];
			if (!$field.$isExcluded && $field.$capabilities && $field.$capabilities.indexOf("filter") >= 0) {
				switch ($field.$type) {
					case "application/x-string":
					case "application/x-choice":
					case "application/x-boolean":
					case "application/x-integer":
					case "application/x-decimal":
					case "application/x-date":
					case "application/x-time":
					case "application/x-datetime":
					case "application/x-reference":
						var li = syra_dom.li("s-filter-criteria", this.slot);
						var field = this.filterMap[$bind] = {
							field: syra_filter.addField(this, li, {
								$field: $field,
								$bind: $bind
							})
						};
						field._dataValue = this.filter_criteria_css + "-value";
						break;
				}
			}
		}
		this.setCriterion(this.filter_field.currentValue);
	},
	setCriterion: function(where) {
		if (this.where != where) {
			this.sdata_where = syra_filter.parse(this.where = where);
			var keys = Object.keys(this.filterMap);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				syra_filter.setField(this.sdata_where, this.filterMap[keys[ii]].field);
			}
		}
		this.ensureClear();
	},
	ensureClear: function() {
		var show = syra_filter.getCriterion(this).length > 0;
		if (show && !this.filter_clear) {
			this.slot.insertBefore(syra_filter.addClear(this).link, this.slot.firstChild);
		}
		syra_button.hide(this.filter_clear, !show);
	},
	onFormUpdateDelta: function(field, value) {
		syra_filter.setCriteria(field, {
			value: value
		});
		this.triggerFilter();
		return false;
	},
	triggerFilter: function() {
		this.filter_field.setValue(this.where = syra_filter.getCriterion(this).join(" and "));
		syra_form.update(this.filter_field, this.filter_field.currentValue);
	},
	dispose: function() {
		syra_article.dispose(this);
	}
});

function FilterField() {}

exports.FilterField = _helpers.defineClass(FilterField, Field, {
	onAddMenuPicker: function(btn) {
		if (this.$menusPopup && !(this.$menusPopup.$prototype && Object.keys(this.$menusPopup).length == 1)) {
			//$prototype is the only one link
			Field.prototype.onAddMenuPicker.call(this, btn);
		}
	},
	render: function() {
		if (this.$isEditMode) {
			this.input = syra_dom.input(this.$skinInput);
			this.whereRaw = syra_dom.div("s-filter-where-raw", this._dataValue);
		}
	},
	setValue: function(value, metaData) {
		Field.prototype.setValue.call(this, value, metaData);
		if (this.$isEditMode) {
			this.whereRaw.textContent = value;
			if (!this.filterPanel) {
				this._loadPanel();
			} else {
				this.filterPanel.setCriterion(this.currentValue);
			}
		}
	},
	_loadPanel: function() {
		var self = this;
		var $url = self.$menus.$prototype && self.$menus.$prototype.$url;
		var newUrl = syra_expression.parse(self.articleParent, $url);
		if (newUrl && self.$filterArticleUrl != newUrl) {
			self.filterPanel && self.filterPanel.dispose();
			self.$filterArticleUrl = newUrl;
			syra_ajax.get({
				page: self.articleParent,
				url: self.$filterArticleUrl = newUrl,
				end: function(response) {
					if (response.ok) {
						var data = response.data;
						var proto = {
							$item: data
						};
						var dps = ((data.$properties && data.$properties.$resources && data.$properties.$resources.$item) || data).$properties;
						proto.$item.$properties = dps ? _helpers.object.clone(dps, true) : {};
						self.filterPanel = new Panel();
						self.filterPanel.load(self, proto, self._dataValue);
					} else {
						syra_alert.show(response.error.diagnoses, self.page);
					}
				}
			});
		}
	},

	dispose: function() {
		this.filterPanel && this.filterPanel.dispose();
		this.filter_clear && syra_button.remove(this.filter_clear);
		Field.prototype.dispose.call(this);
	}
});