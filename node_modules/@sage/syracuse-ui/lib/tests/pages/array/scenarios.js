"use strict";

function _walkList(unit, delta, strictEqual) {
	unit.applyChange(delta);
	var lists = unit.page.boundFields.xarray;
	for (var ii = 0; ii < lists.length; ii++) {
		var msg = (delta.$isPartialDelta ? "partial delta " : "") + "list " + (ii + 1) + " ";
		var result = strictEqual(lists[ii]);
		if (result !== undefined) {
			if (Array.isArray(result)) {
				result.forEach(function(res) {
					unit.assert(res.ok, msg + res.msg);
				});
			} else {
				unit.assert(result, msg + unit.$title);
			}
		}
	}
}

exports.diagnoses = function() {
	function _getError(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "error",
				message: "Error test  blalfoz"
			}]
		};
	}

	function _getWarning(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "warning",
				message: "Warning test"
			}]
		};
	}

	function _getInfo(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "info",
				message: "Info test"
			}]
		};
	}

	function _buildDelta(isPartialDelta, clean) {
		var xarray = [];
		for (var ii = 1; ii <= 5; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data.$properties = {
						xstring: _getError(clean),
						xchoice: _getInfo(clean)
					};
					break;
				case 2:
					$data.$properties = {
						xstring: _getInfo(clean),
						xchoice: _getWarning(clean),
						xboolean: _getError(clean),
						xdecimal: _getError(clean)
					};
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: _getError(clean)
			},
			xarray: xarray
		};
	}
	return [{
		$title: "single diagnose",
		run: function() {
			_walkList(this, {
				xarray: [{
					$uuid: "record1",
					$index: 0,
					$properties: {
						xstring: _getError(),
						xdate: _getWarning(),
						xchoice: _getWarning(),
					}
				}]
			}, function(list) {});
		}
	}, {
		$title: "multi diagnoses",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta), function(list) {});
			});
		}
	}, {
		$title: "clean diagnoses",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, true), function(list) {});
			});
		}
	}];
};

exports.focus = function() {
	return [{
		$title: "Set focus string Row2",
		run: function() {
			this.page.refreshData();
			var list = this.page.boundFields.xarray[0];
			if (list.$isEditMode) {
				var first = list.records[1];
				first.boundFields.xstring[0].focus();

				var list = this.page.boundFields.xarray[0];
				var fields = list.records[1].boundFields.xstring;
				this.assert(fields && fields.length == 1 && fields[0] == list.page.focusField);
			}
		}
	}];
};
exports.select = function() {
	return [{
		$title: "$isSelected record 2",
		run: function() {
			this.applyChange({
				xarray: [{
					$isSelected: true,
					$uuid: "record2",
					$index: 1
				}]
			});
			var lists = this.page.boundFields.xarray;
			this.assert(lists[lists.length - 1].recordsMap.record2.$isSelected, "record2 of last list is slected");
		}
	}];
};

exports.hide = function() {
	return [true, false].map(function($isHidden) {
		return {
			$title: ($isHidden ? "hide" : "show") + " xarray",
			run: function() {
				_walkList(this, {
					$properties: {
						xarray: {
							$isHidden: $isHidden
						}
					}
				}, function(list) {
					return list.$isHidden
				});
			}
		};
	}).concat([true, false].map(function($isHidden) {
		return {
			$title: $isHidden ? "xchoice is hidden, other visible" : "xchoice is visible and other too",
			run: function() {
				_walkList(this, {
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xchoice: {
										$isHidden: $isHidden
									}
								}
							}
						}
					}
				}, function(list) {
					var ok;
					list.records.forEach(function(record) {
						var keys = Object.keys(record.boundFields);
						keys.forEach(function(key) {
							record.boundFields[key].forEach(function(field) {
								if (ok !== false) {
									if (field.$isHidden) {
										ok = (field.$item.$bind == "xchoice") ? field.$isHidden : !field.$isHidden;
									} else {
										ok = $isHidden == field.$isHidden;
									}
								}
							})
						});

					});
					if (ok !== false && list.$item.$format == "grid") {
						list.builder.allColumns.forEach(function(col) {
							ok = $isHidden == col.isHidden;
							if (ok) {
								if ($isHidden) {
									ok = (col.$bind == "xchoice") ? col.isHidden : !col.isHidden;
								} else {
									ok = $isHidden == col.isHidden;
								}
							}
						});
					}
					return true;
				});
			}
		};
	}));
};
exports.title = function() {
	return [{
		$title: "upadate title array",
		run: function() {
			var title = "new Title";
			_walkList(this, {
				$properties: {
					xarray: {
						$title: title
					}
				}
			}, function(list) {
				return title == list.titleText;
			});
		}
	}, {
		$title: "update xstring field title",
		run: function() {
			var title = "new String Title";
			_walkList(this, {
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$title: title
								}
							}
						}
					}
				}
			}, function(list) {
				var ok;
				title = title.toUpperCase();
				if (list.$item.$format == "cards") {
					list.records.forEach(function(record) {
						record.boundFields.xstring.forEach(function(field) {
							if (ok !== false) {
								ok = field.titleText.toUpperCase() == title;
							}
						});
					});
				} else {
					ok = list.builder.columnsMap.xstring.titleText.toUpperCase() == title;
				}
				return ok;
			});
		}
	}];
};

function _addStatusScenario($status) {
	function _buildDelta(isPartialDelta, $status, value) {
		var xarray = [];

		function _setFieldsStatus(obj, $props) {
			obj.$properties = {};
			$data.xstring = "";
			for (var ii = 0; ii < $props.length; ii++) {
				(obj.$properties[$props[ii]] = {})[$status] = value;
				$data.xstring += $props[ii] + " " + $status;
			}
			$data.xstring += $status;
		}
		for (var ii = 1; ii <= 5; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data[$status] = value;
					$data.xstring = "record " + $status;
					break;
				case 2:
					_setFieldsStatus($data, ["xstring", "xchoice"]);
					break;
				case 3:
					_setFieldsStatus($data, ["xdate", "xboolean", "xdecimal"]);
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			xarray: xarray
		};
	}

	function _hasStatusFields(record, check, binds) {
		var ok;
		var keys = Object.keys(record.boundFields);
		keys.forEach(function(key) {
			if (!binds || binds.indexOf(key) >= 0) {
				record.boundFields[key].forEach(function(field) {
					if (ok != false) {
						ok = field[check] == true;
					}
				});
			}
		});
		return ok;
	}

	return [{
		$title: $status + " record 1 2 3",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, $status, true), function(list) {
					var res = [];
					if (list.$isEditMode) {
						for (var mm = 1; mm <= 5; mm++) {
							var record = list.recordsMap["record" + mm];
							switch (mm) {
								case 1:
									res.push({
										ok: _hasStatusFields(record, $status),
										msg: "record " + mm + " has fields " + $status
									});
									break;
								case 2:
									var checked = ["xstring", "xchoice"];
									res.push({
										ok: _hasStatusFields(record, $status, checked),
										msg: "record " + mm + " has " + checked.join(",") + $status
									});
									break;
								case 3:
									var checked = ["xdate", "xboolean", "xdecimal"];
									res.push({
										ok: _hasStatusFields(record, $status, checked),
										msg: "record " + mm + " has " + checked.join(",") + $status
									});
									break;
								default:
									res.push({
										ok: !_hasStatusFields(record, $status),
										msg: "record " + mm + " has no fields " + $status
									});
									break;
							}
						}
					}
					return res;
				});
			});
		}
	}, {
		$title: $status + " all array",
		run: function() {
			var $xarray = {};
			$xarray[$status] = true;
			_walkList(this, {
				$properties: {
					xarray: $xarray
				}
			}, function(list) {
				var res = [];
				if (list.filter_row) {
					res.push({
						ok: _hasStatusFields(list.filter_row, $status) == false,
						msg: " filter fields are not " + $status
					});
				};
				if (list.$isEditMode) {
					var ok = true;
					list.records.forEach(function(record) {
						if (!ok) {
							ok = _hasStatusFields(record, $status);
						}
					});
					res.push({
						ok: ok,
						msg: " has all edit fields " + $status
					});
				}
				return res;
			});
		}
	}];
}

exports.$isReadOnly = function() {
	return _addStatusScenario("$isReadOnly");
};
exports.$isDisabled = function() {
	return _addStatusScenario("$isDisabled");
};

function _runUpdate(unit, delta, updated) {
	_walkList(unit, delta, function(list) {
		var uiids = Object.keys(updated);
		var ok;
		for (var mm = 0; mm < uiids.length && ok != false; mm++) {
			var record = list.recordsMap[uiids[mm]];
			var fields = record.boundFields.xstring;
			ok = fields.length && fields[0].getValue() == updated[uiids[mm]];
		}
		return ok;
	});
}

function _runDelete(unit, delta, deleted) {
	_walkList(unit, delta, function(list) {
		var ok;
		for (var mm = 1; mm <= 5 && ok !== false; mm++) {
			var record = list.recordsMap["record" + mm];
			ok = (deleted.indexOf(mm) >= 0) ? !record : record;
		}
		return ok;
	});
}


exports.crud = function() {
	return [{
		$title: "insert after record 1",
		run: function() {
			_walkList(this, {
				xarray: [{
					$uuid: "insert_after_1",
					$index: 1,
					xstring: "insert after record 1"
				}]
			}, function(list) {
				var ok;
				var uuids = ["record1", "insert_after_1", "record2", "record3", "record4", "record5"];
				for (var mm = 0; mm < uuids.length && ok !== false; mm++) {
					ok = list.records[mm] && list.records[mm].$uuid == uuids[mm];
				}
				return ok;
			});
		}
	}, {
		$title: "upadate record 2",
		run: function() {
			_runUpdate(this, {
				xarray: [{
					$uuid: "record2",
					$index: 1,
					xstring: "record 2 updated"
				}]
			}, {
				"record2": "record 2 updated"
			});
		}
	}, {
		$title: "update 2 5",
		run: function() {
			var updated = {
				"record2": "record 2 updated",
				"record5": "record 5 updated"
			};
			_runUpdate(this, {
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record2",
					$index: 1,
					xstring: updated["record2"]
				}, {
					$uuid: "record5",
					$index: 4,
					xstring: updated["record5"]
				}]
			}, updated);
			_runUpdate(this, {
				xarray: [{
					$uuid: "record1"
				}, {
					$uuid: "record2",
					xstring: updated["record2"]
				}, {
					$uuid: "record3"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record5",
					xstring: updated["record5"]
				}]
			}, updated);
		}
	}, {
		$title: "reorder",
		run: function() {
			function _runReorder(unit, delta) {
				_walkList(unit, delta, function(list) {
					var ok;
					for (var mm = 0; mm < 5 && ok != false; mm++) {
						ok = list.records[mm] && list.records[mm].$uuid == ("record" + (5 - mm));
					}
					return ok;
				});
			}
			_runReorder(this, {
				$isPartialDelta: true,
				"xarray": [{
					$uuid: "record5",
					$index: 0
				}, {
					$uuid: "record4",
					$index: 1
				}, {
					$uuid: "record3",
					$index: 2
				}, {
					$uuid: "record2",
					$index: 3
				}, {
					$uuid: "record1",
					$index: 4
				}]
			});
			_runReorder(this, {
				"xarray": [{
					$uuid: "record5"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record3"
				}, {
					$uuid: "record2"
				}, {
					$uuid: "record1"
				}]
			});
		}

	}, {
		$title: "delete record2",
		run: function() {
			_runDelete(this, {
				xarray: [{
					$uuid: "record2",
					$index: 1,
					"$isDeleted": true
				}]
			}, [2]);
		}

	}, {
		$title: "delete record1 record3 record4",
		run: function() {
			_runDelete(this, {
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record1",
					$index: 0,
					"$isDeleted": true
				}, {
					$uuid: "record3",
					$index: 2,
					"$isDeleted": true
				}, {
					$uuid: "record4",
					$index: 3,
					"$isDeleted": true
				}]
			}, [1, 3, 4]);
			_runDelete(this, {
				xarray: [{
					$uuid: "record2"
				}, {
					$uuid: "record5"
				}]
			}, [1, 3, 4]);
		}

	}];
};

exports.styles = function() {
	function _runFullStyle(unit, styles, clear) {
		_walkList(unit, {
			xarray: styles.map(function(style, ii) {
				return {
					$uuid: "record" + ii,
					$valueStyle: style ? ("cst_sty_" + style) : style
				};
			})
		}, function(list) {
			var ok;
			list.records.forEach(function(record) {
				var keys = Object.keys(record.boundFields);
				keys.forEach(function(key) {
					record.boundFields[key].forEach(function(field) {
						if (ok != false) {
							var style = field.$valueStyle || "";
							if (clear) {
								ok = (style == "" || style.indexOf("-default") > 0);
							} else {
								ok = (style != "");
							}
						}
					})
				});
			});
			return ok;
		});
	}

	function getFields(record) {
		var fields = [];
		var keys = Object.keys(record.boundFields);
		keys.forEach(function(key) {
			fields = fields.concat(record.boundFields[key]);
		});
		return fields;
	}

	function _runFiedlStyle(unit, delta) {
		function _hasStyle(fields) {
			var ok;
			for (var mm = 0; mm < fields.length; mm++) {
				ok = (fields[mm].$valueStyle || "") != "";
				if (!ok) {
					break;
				}
			}
			return ok;
		}
		_walkList(unit, delta, function(list) {
			var res = [];
			res.push({
				ok: _hasStyle(list.recordsMap.record4.boundFields.xstring),
				msg: "all xstring and xchoice have style"
			});
			res.push({
				ok: _hasStyle(list.recordsMap.record4.boundFields.xchoice),
				msg: "all xstring and xchoice have style"
			});
			res.push({
				ok: _hasStyle(getFields(list.recordsMap.record2)),
				msg: "record2 all fields have style"
			});
			res.push({
				ok: _hasStyle(getFields(list.recordsMap.record3)),
				msg: "record3 all fields have style"
			});
			res.push({
				ok: _hasStyle(list.recordsMap.record4.boundFields.xdate),
				msg: "record4 xdate have style"
			});
			return res;
		});

	}
	return [{
		$title: "record styles 1",
		run: function(page) {
			_runFullStyle(this, ["info", "warning", "error", "strongdecreasing", "decreasing", "stable"]);
		}
	}, {
		$title: "record styles 2",
		run: function(page) {
			_runFullStyle(this, ["medium", "high", "veryhigh", "highlight", "verylow", "low"]);
		}

	}, {
		$title: "record styles clear",
		run: function(page) {
			_runFullStyle(this, ["", null, "default", "", null, "default"], true);
		}

	}, {
		$title: "$fieldStyle xchoice xstring column",
		run: function() {
			_runFiedlStyle(this, {
				$isPartialDelta: true,
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));"
								},
								xchoice: {
									$fieldStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;"
								}
							}
						}
					}
				},
				xarray: [{
					$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));",
					$uuid: "record2",
					$index: 1
				}, {
					$valueStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;",
					$uuid: "record3",
					$index: 2
				}, {
					$properties: {
						xdate: {
							$valueStyle: "font-style:bold;background-color:#FFAD1D; color: #030037;"
						}
					},
					$index: 3,
					$uuid: "record4"
				}]
			});
			_runFiedlStyle(this, {
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "cst_sty_info"
								},
								xchoice: {
									$fieldStyle: "cst_sty_error"
								}
							}
						}
					}
				},
				xarray: [{
					$uuid: "record1"
				}, {
					$fieldStyle: "cst_sty_info",
					$uuid: "record2"
				}, {
					$valueStyle: "cst_sty_error",
					$uuid: "record3"
				}, {
					$properties: {
						xdate: {
							$valueStyle: "cst_sty_warning"
						}
					},
					$uuid: "record4"
				}, {
					$uuid: "record5"
				}]
			});
		}
	}];
};

exports.actionLinks = function() {
	function _getNull() {
		return {
			$links: null
		};
	}

	function _getLazyLoad() {
		return {
			$links: {
				$lazyload: {}
			}
		};
	}

	function _getLinksActions() {
		return {
			$actions: {
				"$save": {
					$title: "Save"
				}
			},
			$links: {
				"google": {
					$title: "Google",
					$url: "http://www.google.fr/"
				},
				"uioverview": {
					$title: "UI Overview",
					$url: "?representation=s-uitest-fields.$test"
				},
				"$details": {
					$type: "application/json;vnd.sage=syracuse",
					$title: "Detail",
					$url: "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
				},
				"$linksFormParameters": {
					$title: "Parameters",
					$url: "/sdata/syracuse/collaboration/syracuse/users?representation=employee.$query&par1={param1}&par2={param2}",
					"$parameters": {
						"param1": "xstring",
						"param2": "value"
					}
				}
			}
		};
	}

	function _getNullFormParametersLink() {
		return {
			$links: {
				$linksFormParameters: null
			}
		};
	}

	function _buildDelta(isPartialDelta, filler) {
		var xarray = [];
		for (var ii = 0; ii <= 7; ii++) {
			var $data = filler();
			$data.$uuid = "record" + ii;
			if (ii == 1 || ii == 3) {
				$data.$properties = {
					xstring: filler(),
					xchoice: filler(),
					xdate: filler(),
					xboolean: filler(),
					xdecimal: filler()
				};
				if (isPartialDelta) {
					$data.$index = ii;
				}
			} else {
				if (isPartialDelta) {
					continue;
				}
				//cancel filler
				delete $data.$links;
				delete $data.$actions;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: filler()
			},
			xarray: xarray
		};
	}

	return [{
		$title: "$links = null",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getNull), function(list) {});
			});
		}
	}, {
		$title: "$lazyload",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getLazyLoad), function(list) {});
			});
		}

	}, {
		$title: "$links ans $actions",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getLinksActions), function(list) {});
			});
		}

	}, {
		$title: "Parameter null",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getNullFormParametersLink), function(list) {});
			});
		}
	}];
};
exports.capabilities = function() {
	return ["insert,append,delete,reorder", "capabilities insert,delete,deleteAll", ""].map(function($capabilities) {
		return {
			$title: "capabilities " + ($capabilities || "none"),
			run: function(page) {
				_walkList(this, {
					$properties: {
						xarray: {
							$capabilities: $capabilities
						}
					}
				}, function(list) {});

			}

		};
	}).concat({
		$title: "alt undelete / delete",
		run: function(page) {
			_walkList(this, {
				xarray: [1, 2, 3, 4, 5].map(function(ii) {
					return {
						$uuid: "record" + ii,
						$capabilities: ii % 2 ? "delete" : ""
					};
				})
			}, function(list) {});
		}
	});
};