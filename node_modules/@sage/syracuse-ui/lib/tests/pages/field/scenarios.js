"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var _rtf = require("@sage/rtf-converter");

function getFields(page) {
	var fields = [];
	Object.keys(page.boundFields).forEach(function(key) {
		fields = fields.concat(page.boundFields[key]);
	});
	return fields;
}

function _applyMeta(unit, key, value, strictEqual) {
	var $properties = {};
	Object.keys(unit.page.boundFields).forEach(function(bind) {
		($properties[bind] = {})[key] = value;
	});
	unit.applyChange({
		$properties: $properties
	});
	var fields = getFields(unit.page);
	var ok;
	var successCount = 0,
		errorCount = 0;
	for (var mm = 0; mm < fields.length; mm++) {
		var field = fields[mm];
		var ok = strictEqual(field, field.$item.$bind, field.$field.$type);
		if (ok !== undefined) {
			var title = field.getTitle();
			var editmode = field.$isEditMode ? " editmode " : " ";
			ok ? successCount++ : errorCount++;
			if (!unit.page.isAssertSummaryMode) {
				unit.assert(ok, "fied " + title + editmode + unit.$title);
			}
		}
	}
	if (unit.page.isAssertSummaryMode) {
		successCount && unit.assert(true, successCount + " fied " + title + editmode + unit.$title);
		errorCount && unit.assert(false, errorCount + " fied " + title + editmode + unit.$title);
	}
}

function _applyDesignMetaToFields(unit, key, value, strictEqual) {
	Object.keys(unit.page.boundFields).forEach(function(bind) {
		unit.page.boundFields[bind].forEach(function(field) {
			var metaData = {};
			metaData[key] = value;
			field.applyDesignMeta(metaData, true);
			unit.assert(strictEqual(field), "fied " + field.getTitle() + (field.isEditMode ? " editmode " : " ") + unit.$title);
		});
	});

}

function _notifyActionLinkChange(page, metaData) {
	var $properties = {};
	Object.keys(page.boundFields).forEach(function(bind) {
		$properties[bind] = {
			$links: metaData.$links,
			$actions: metaData.$actions
		};
	});
	page.applyChange({
		$properties: $properties
	});
}

function _addStatusUnits(status) {
	var res;
	res = [true, false].map(function(isEnabled) {
		return {
			$title: status + " = " + isEnabled,
			run: function() {
				_applyMeta(this, status, isEnabled, function(field, bind, type) {
					var ok;
					if (type.indexOf("x-unknow") < 0) {
						switch (status) {
							case "$isHidden":
								ok = (field.$isHidden == isEnabled);
								break;
							case "$isDisabled":
								if (field.$isEditMode) {
									ok = (field.$isDisabled == isEnabled);
								} else {
									ok = true;
								}
								break;
							case "$isReadOnly":
								if (field.$isEditMode) {
									ok = (field.$isReadOnly == isEnabled);
								} else {
									ok = true;
								}
								break;
							case "$isMandatory":
								if (field.$isEditMode && type.indexOf("x-boolean") < 0) {
									ok = (field.$isMandatory == isEnabled);
								} else {
									ok = true;
								}
								break;
						}
					}
					return ok;
				});
			}
		};
	});
	return res;
}

exports.scenarios = {
	$isHidden: function() {
		return _addStatusUnits("$isHidden");
	},
	$isDisabled: function() {
		return _addStatusUnits("$isDisabled");
	},
	$isReadOnly: function() {
		return _addStatusUnits("$isReadOnly");
	},
	$isMandatory: function() {
		return _addStatusUnits("$isMandatory");
	},
	$isTopLabelAlignment: function() {
		return [true, false].map(function(value) {
			return {
				$title: "$isTopLabelAlignment = " + value,
				run: function(page) {
					_applyDesignMetaToFields(this, "$isTopLabelAlignment", value, function(field) {
						var ok = field.$item.$isTopLabelAlignment == value;
						if (ok && field.domTitle) {
							var ii = field.domTitle.className.indexOf("s-beside");
							ok = ((ii == -1 && value) || (!value && ii >= 0));
						}
						return ok;
					});
				}
			};
		});
	},
	$isTitleHidden: function() {
		return [true, false].map(function(value) {
			return {
				$title: "$isTitleHidden = " + value,
				run: function(page) {
					_applyDesignMetaToFields(this, "$isTitleHidden", value, function(field) {
						var ok = field.$item.$isTitleHidden == value;
						if (ok && field.domTitle) {
							ok = field.domTitle.style.display == (value ? "none" : "");
						}
						return ok;
					});
				}
			};
		});
	},
	actionLinks: function() {
		return [{
			$title: "$links = null",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: null,
					$actions: null
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$lazyload (transition)",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {
						$lazyload: {}
					}
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "links = {}",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {}
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$links and $actions",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {
						"$tunnel": {
							"$title": "$tunnel"
						},
						"$lookup": {
							"$title": "$lookup"
						},
						"google": {
							"$title": "Google",
							"$url": "http://www.google.fr/"
						},
						"uioverview": {
							"$title": "UI Overview",
							"$url": "?representation=s-uitest-fields.$test"
						},
						"$create": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "CrÃ©er",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users/$template/$workingCopies?representation=country.$edit&role={$role}",
							"$method": "POST"
						},
						"$details": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "Detail",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
						},
						"$edit": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "Edit",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')/$workingCopies?representation=country.$edit&role={$role}",
							"$method": "POST"
						},
						"$delete": {
							"$title": "Delete",
							"$confirm": "The record  will be deleted. Confirm ?",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$query&role={$role}",
							"$type": "application/json;vnd.sage=syracuse",
							"$method": "DELETE"
						}
					},
					$actions: {
						actionEmployeesProperties: {
							"$title": "Action Employees Properties",
							"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query",
							"$parameters": {
								"param1": "{lastName}",
								"param2": "value"
							}
						}
					}
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	$diagnoses: function() {
		function _notifyDiagnoses(page, metaData) {
			var $properties = {};
			Object.keys(page.boundFields).forEach(function($bind) {
				$properties[$bind] = helpers.object.clone(metaData, true);
			});
			page.applyChange({
				$properties: $properties
			});
		}
		return [{
			$title: "$diagnoses show error, warning, info",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: [{
						severity: "error",
						message: "Error test  blalfoz"
					}]
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$diagnoses show error",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: [{
						severity: "error",
						message: "Error test  blalfoz"
					}, {
						severity: "warning",
						message: "Warning test"
					}, {
						severity: "info",
						message: "Info test"
					}]
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$diagnoses = null",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: null
				});
				//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	}
};


exports.editor = function() {
	return [{
		$title: "convert HTML to RTF",
		run: function(page) {
			//page.refreshData();
			page.boundFields["textplainRTF"][0].setValue(rtf.fromHtml($(page.boundFields["textrtf"][0]._editor.doc.body).html()));
			//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
		}
	}, {
		$title: "convert RTF to HTML",
		run: function(page) {
			//page.refreshData();
			$(page.boundFields["textrtf"][0]._editor.doc.body).html(rtf.toHtml(page.boundFields["textplainRTF"][0].getValue()));
			//this.assert(first.domItem.querySelector("[data-s-bind=xstring]").className.indexOf("s-focus") >= 0);
		}
	}];
};



exports.onFormUpdateDelta = function(field, value) {
	var rtfField = field.page.boundFields["textrtf"][0],
		msg = "textrtf: caret=" + rtfField.getCaretPosition() + ", data=" + rtfField.getInputValue();
	field.page.boundFields["$field$output"][0].setValue(msg);
	return false;
};