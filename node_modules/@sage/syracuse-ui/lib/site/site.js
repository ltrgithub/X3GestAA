"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var _types = require('@sage/syracuse-core').types;
var _globals = require('streamline-runtime').globals;
var _devTools = require('syracuse-ui/lib/site/aside/devToolsPanel');
var _escaper = require('@sage/html-sanitizer').escaper({});
var _externalAdapter = require("syracuse-ui/lib/utility/externalAdapter");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _locale = require('streamline-locale');
var _searcher = require('syracuse-ui/lib/search/searcher');
var SocketHandler = require('syracuse-ui/lib/notifications/socketHandler');
var _ext = require('syracuse-ui/lib/extend/extendGateway');

var functionalTools = {
	formula: require('syracuse-ui/lib/site/aside/formula'),
	printerSetup: require('syracuse-ui/lib/site/aside/printerSetup')
};
var _manager = {
	fusion: require('syracuse-ui/lib/fusion/fusionGateway').gateway,
	filter: require("syracuse-ui/lib/filter/manager"),
	config: require('syracuse-ui/lib/site/config'),
	help: require('syracuse-ui/lib/help/helpCenter'),
	item: require("syracuse-ui/lib/item/itemManager"),
	localizer: require('syracuse-ui/lib/localization/localizer'),
	button: require('syracuse-ui/lib/links/button'),
	fields: require('syracuse-ui/lib/field/helpers/fieldHelper'),
	menus: require('syracuse-ui/lib/links/menusHelper'),
	pageBuilder: require("syracuse-ui/lib/page/pageBuilder"),
	layout: require("syracuse-ui/lib/item/layoutManager"),
	maximizer: require('syracuse-ui/lib/utility/maximizer'),
	article: require("syracuse-ui/lib/item/article"),
	icon: require("syracuse-ui/lib/utility/icon"),
	preference: require('syracuse-ui/lib/controller/preference'),
};
if (window.external) { // Check for external COM interface (Office)
	_manager.office = require("syracuse-ui/lib/office/officeAdapter")
}

exports.create = function() {
	var site = new Site();
	site.btns = {};
	window.syra_site = site;
	window.syra_ldp = null;

	window.syra_core = {
		dataTypes: _types,
		escape: function(data) {
			return _escaper(data);
		}
	};
	//Temp end of react integration 
	window.syra_alert = {
		show: function() {},
		error: function() {}
	};
	window.syra_search = {
		load: function(slot, value, onHidden) {
			return _searcher.load(slot, value, onHidden);
		}
	};
	site.functionalTools = functionalTools;
	window.syra_context = _ext.context = {}; //browser and rtl set in react 
	var keys = Object.keys(_manager);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window["syra_" + keys[ii]] = _manager[keys[ii]];
	}

	return site;
};

function Site() {

}

exports.Site = _helpers.defineClass(Site, DesktopPage, {
	clone: function(obj) {
		return _helpers.object.clone(obj, true);
	},
	onMenuClick: function(options) {
		switch (options.menu.$bind) {
			case "site_help_designer":
			case "site_help_center":
				if (!options.menu.$documentationUrl) {
					options.menu.$documentationUrl = options.menu.$sourceUrl;
				}
				var edp = this.userProfile.selectedEndpoint;
				options.menu.$sourceUrl = options.menu.$documentationUrl + (edp ? ("&ep=" + edp.$uuid) : "");
				break;
		}
		return true;
	},
	dispose: function() {
		_manager.help.dispose();
		DesktopPage.prototype.dispose.call(this);
		_manager.item.dispose();
		var keys = Object.keys(window);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			if (key.indexOf("syra_") >= 0) {
				delete window[key];
			}
		}
		delete window.syra_core;
		this.disposeObject(_ext.context);
	},
	locale_loadDefault: function() {
		return window.syra_local = _locale.resources(module)();
	},
	locale_loadStrings: function(culture, format, done) {
		window.syra_culture = culture;
		window.syra_format = format;
		//temp compatibilitywith extended fields
		_ext.culture.api = {
			"application/x-date": culture.date,
			"application/x-datetime": culture.datetime,
			"application/x-time": culture.time,
			"application/x-integer": culture.integer,
			"application/x-decimal": culture.decimal,
			"application/x-real": culture.real
		};
		_ext.culture.date = culture.date;
		_ext.culture.datetime = culture.datetime;
		_ext.culture.format = {
			currentLangCode: culture.languageCode,
			get: function() {
				return syra_format.getPattern(type, $displayFormat);
			},
			getDate: function() {
				return syra_culture.date_short;
			},
			getDatetime: function() {
				return syra_culture.datetime_default;
			},
			getNumberFormatObj: function(type) {
				return syra_format.getNumberFormatObj(type);
			}

		}
		var self = this;
		_globals.context.localePreferences = culture.localePreferences;
		_locale.setCurrent(function(error) {
			if (error) {
				done(null, error);
			} else {
				window.syra_local = _locale.resources(module)();
				self.$prototype.$links = self.$prototype.$links || {};
				self.$prototype.$links.site_help_designer = {
					$title: syra_local.profile_help_designer,
					$url: syra_config.$help_designer,
					$type: "text/html",
					$target: "help"
				};
				self.$prototype.$links.$support = {
					$url: syra_config.$support
				};
				if (self.$isLicenceTool) {
					syra_dom.hide(self.searcher && self.searcher.domItem, true);
					//this.btns.site_sitemap.setMenu({});
				}
				done(window.syra_local);
			}
		}, culture.languageCode, culture.localePreferences);
	},
	showExtensions: function(userProfile) {
		if (userProfile.shellWidgets) {
			var index = 0;
			var errors = [];

			function loadRemaining() {
				if (index === userProfile.shellWidgets.length) {
					if (errors.length > 0)
						syra_alert.error(errors);
					return;
				}
				var widget = userProfile.shellWidgets[index++];
				require.async(widget.module, function(err, api) {
					if (err) {
						errors.push({
							$message: err.message,
							$stackTrace: err.stack
						});
						return loadRemaining();
					}

					var div = document.createElement("div");
					// TODO: review this hack to get calc popup on top of buttons
					$('#s-header').css({
						'z-index': 1
					});
					// TODO: review style and DOM insertion with Daniel
					$(div).css({
						display: 'inline-block',
						padding: '0 10pt',
					}).attr("id", widget.module);
					//this.openerBtn.slot.appendChild(div);
					api.create({
						div: div,
						registerSocket: function(namespace, events) {
							return syra_site.socketHandler.register(namespace, events);
						},
						sessionInfo: {
							user: {
								$uuid: userProfile.dataset.user.$uuid
							},
							selectedEndpoint: function() {
								var ep = userProfile.selectedEndpoint;
								return {
									baseUrl: ["/sdata", ep.application, ep.contract, ep.dataset].join("/")
								};
							}
						},
						menus: userProfile.links
					});
					loadRemaining();
				});
			}
			loadRemaining();
		}
	},
	roundDecimal: function(num, precision) {
		precision = precision || 2;
		var tmp = Math.pow(10, precision);
		return Math.round(num * tmp) / tmp;
	},
	drawPage: function() {
		this.domItem = this.body = this.layoutSlot;
		this.layoutSlot.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
	},

	getSize: function() {
		if (this.size == undefined) {
			this.size = {
				isSmall: window.innerWidth < 900 || (window.innerHeight > window.innerWidth),
				minWidth: syra_config.size.minWidth,
				height: this.siteApp.clientHeight,
				width: this.siteApp.clientWidth
			};
			var body = document.getElementById("s_app_body");
			if (body) {
				this.size.body = {
					top: body.offsetTop,
					height: body.clientHeight,
					width: body.clientWidth
				};
			}
		}
		return this.size;
	},
	resizeItem: function() {
		this.isResizing = true;
		delete this.size;
		this.getSize();
		_manager.pageBuilder.resize();
		this.isResizing = false;
	},

	switchItemDesigner: function(item, open) {
		if (item.switchDesigner) {
			if (open && !this._isCssLoaded) {
				this._isCssLoaded = true;
				syra_site.loadStyleSheet("authoring.css");
			}
			item.switchDesigner(open);
		}
	},

	load: function() {
		this.isAutoInsertFieldDisabled = true;
		this.isSiteRegisterDisabled = true;
		if (!this.$isSocketIODisabled) {
			this.socketHandler = SocketHandler.create();
			//session event
			this.socketHandler.register("/session");
		}
		// send ip address to allow the server to detect drop failed session
		this.locale_loadDefault();

		this.$device = this.$device || "desktop";
		if (this.isTabletDevice = document.location.pathname.indexOf("-tablet.html") >= 0) {
			this.$device = "tablet";
		}
		this.$prototype = this.$prototype || {};
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.$item = this.$item || {};
		var $links = this.$prototype.$links = this.$prototype.$links || {};


		if (this.$device == "mobile") {
			syra_config.$pageTemplateUrl = "/sdata/syracuse/collaboration/syracuse/pages('{endpoint}.{representation},{target},{pageview},phone')?role={$role}&profile={$userprofile}";
			syra_config.$userProfileUrl += "&device=phone";
		}

		this._childPageOffset = 1;
		_manager.pageBuilder.initialize(this);
		this.externalAdapter = _externalAdapter;

		_manager.item.initialize(this, this, this.$item);
		DesktopPage.prototype.load.call(this);
		return this;
	},
	onItemInOut: function(onEnter, event, target) {

	},
	checkUniqueSelection: function(hotspot) {
		if (this.selectedList) {
			if (this.selectedList.checkUniqueSelection === false) {
				delete this.selectedList.checkUniqueSelection;
			} else {
				if (this.selectedList.selector && !this.selectedList.$item.$isNavigationList) {
					var record;
					while (hotspot && !hotspot.isArrayField) {
						if (hotspot.isRecordArticle) {
							record = hotspot;
						}
						hotspot = hotspot.articleParent;
					}
					if (hotspot && !hotspot.isArrayField) {
						hotspot = null;
					}
					if (hotspot != this.selectedList || (record && !record.$isSelected && !this.selectedList.selector.isMulti)) {
						this.selectedList.selector.unSelectAll();
					}
				}
			}
		}
	},
	disposeObject: function(obj) {
		if (obj) {
			_manager.item.unregister(obj);
			if (obj.buttons && obj.buttons.length) {
				for (var ii = 0, jj = obj.buttons.length; ii < jj; ii++) {
					_manager.button.dispose(obj.buttons[ii]);
				}
				delete obj.buttons;
			}
			var keys = Object.keys(obj);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				obj[keys[ii]] = null;
			}
			obj.disposed = true;
		}
	}
});