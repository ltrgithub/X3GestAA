"use strict";
var _modules, _categories, _vignettes, _activateBrowseCol;

function _activateColumn(col) {
	_activateBrowseCol && syra_dom.toggleClass(_activateBrowseCol.header, "s-active", false);
	syra_dom.toggleClass((_activateBrowseCol = col).header, "s-active", true);
}

function _selectItem(col, btn) {
	col.selectedBtn && syra_dom.toggleClass(col.selectedBtn.link, "s-record-selected", false);
	syra_dom.toggleClass((col.selectedBtn = btn).link, "s-record-selected", true);
}

function _addLevel($title) {
	var slot = syra_dom.div("s-sv-browse-level");
	return {
		slot: slot,
		header: syra_dom.text("s-sv-browse-level-header", $title, slot),
		body: syra_dom.div("s-sv-browse-level-body", slot),
		map: {},
		stack: []
	};
}

function _onModuleClick() {
	var page = this.parent;
	_categories.selectedBtn = null;
	if (_modules.selectedBtn != this) {
		_activateColumn(_modules);
		_selectItem(_modules, this);
		syra_dom.empty(_categories.body);
		syra_dom.empty(_vignettes.body);
		var categories = _modules.map[_modules.selectedBtn.code].categories;
		// sort alphabetical order
		categories.sort(function(itemA, itemB) {
			if (itemA.description > itemB.description)
				return itemB.description == syra_local.ldpNoCategory ? -1 : 1;
			if (itemA.description < itemB.description)
				return itemA.description == syra_local.ldpNoCategory ? 1 : -1;
			return 0;
		});
		for (var ii = 0, jj = categories.length; ii < jj; ii++) {
			syra_button.add({
				parent: page,
				slot: _categories.body,
				text: categories[ii].description,
				css: "s-sv-browse-item",
				click: _onCategoryClick,
				code: categories[ii].$uuid
			});
		}
	}
	page.endChange();
}


function _onCategoryClick() {
	var page = this.parent;
	if (_categories.selectedBtn != this) {
		_activateColumn(_categories);
		_selectItem(_categories, this);
		syra_dom.empty(_vignettes.body);
		var vignettes = _modules.map[_modules.selectedBtn.code].categoriesMap[this.code].vignettes;
		// sort alphabetical order
		vignettes.sort(function(itemA, itemB) {
			if (itemA.title > itemB.title)
				return 1;
			if (itemA.title < itemB.title)
				return -1;
			return 0;
		});
		for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
			var vignette = vignettes[ii];
			var btn = syra_button.add({
				parent: page,
				slot: _vignettes.body,
				text: vignette.title || syra_local.ldpNoTitle,
				title: vignette.code,
				css: "s-sv-browse-item",
				click: _onVignetteClick,
				code: vignette.$key || vignette.$uuid
			});
			if (page.findSelectedVignette(vignette.$key || vignette.$uuid)) {
				syra_dom.toggleClass(btn.link, "s-record-selected", true);
			}
		}
	}
	page.endChange();
}

function _onVignetteClick(btn) {
	var page = this.parent;
	_activateColumn(_vignettes);
	var isSelected = this.link.className.indexOf("s-record-selected") < 0;
	syra_dom.toggleClass(this.link, "s-record-selected", isSelected);
	if (isSelected) {
		var vignettes = _modules.map[_modules.selectedBtn.code].categoriesMap[_categories.selectedBtn.code].vignettes;
		for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
			if ((vignettes[ii].$key || vignettes[ii].$uuid) == this.code) {
				page.selectVignette(vignettes[ii], true);
				break;
			}
		}
	} else {
		page.selectVignette({
			$uuid: this.code
		}, false);
	}
}

exports.buildLevels = function(page, slot, data) {
	slot.appendChild((_modules = _addLevel(syra_local.ldpModulesTitle)).slot);
	_modules.slot.className += " s-sv-browse-level-module";
	slot.appendChild((_categories = _addLevel(syra_local.ldpCategoriesTitle)).slot);
	_categories.slot.className += " s-sv-browse-level-caregories";
	slot.appendChild((_vignettes = _addLevel(syra_local.ldpVignettesTitle)).slot);

	_activateColumn(_modules);
	var noCategoryKey = "noCategory",
		noModuleKey = "noModule";
	for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {
		var resource = data.$resources[ii];
		var id = resource.module && (resource.module.$key || resource.module.$uuid) || noModuleKey;
		var module = _modules.map[id];
		if (!module) {
			module = _modules.map[id] = resource.module || {
				title: syra_local.ldpNoModule
			};
			module.code = id;
			module.categories = [];
			module.categoriesMap = {};
			_modules.stack.push(module);
		}
		if (resource.categories && resource.categories.length > 0) {
			for (var mm = 0, pp = resource.categories.length; mm < pp; mm++) {
				var category = resource.categories[mm];
				if (!module.categoriesMap[category.$uuid]) {
					module.categoriesMap[category.$uuid] = category;
					category.vignettes = [];
					module.categories.push(category);
				}
				module.categoriesMap[category.$uuid].vignettes.push(resource);
			}
		} else {
			if (!module.categoriesMap[noCategoryKey]) {
				module.categories.push(module.categoriesMap[noCategoryKey] = {
					$uuid: noCategoryKey,
					vignettes: [],
					description: syra_local.ldpNoCategory
				});
			}
			module.categoriesMap[noCategoryKey].vignettes.push(resource);
		}
	}
	if (data.$totalResults && data.$itemsPerPage && (data.$totalResults > data.$itemsPerPage)) {
		//TODO show info diagnose only $itemPerPage results considered. Use search feature for complete list
	}

	_modules.stack.sort(function(itemA, itemB) {
		if (itemA.title > itemB.title)
			return itemB.title == syra_local.ldpNoModule ? -1 : 1;
		if (itemA.title < itemB.title)
			return itemA.title == syra_local.ldpNoModule ? 1 : -1;
		return 0;
	});

	for (var ii = 0, jj = _modules.stack.length; ii < jj; ii++) {
		var module = _modules.stack[ii];
		var btn = syra_button.add({
			parent: page,
			slot: _modules.body,
			text: module.title,
			title: module.code || "",
			css: "s-sv-browse-item",
			click: _onModuleClick,
			code: module.code
		});
		var icon = syra_dom.div("s-sv-browse-module-icon");
		icon.setAttribute("style", "background-image: url('/syracuse-main/html/styles/images/modules/s_module_" + (module.code || "no_code").toLowerCase() + ".png')");
		btn.link.insertBefore(icon, btn.link.firstChild);
	}
};


exports.dispose = function() {
	_modules = _categories = _vignettes = _activateBrowseCol = null;
};