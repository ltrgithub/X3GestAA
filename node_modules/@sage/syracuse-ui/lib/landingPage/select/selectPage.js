"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var DesktopPage = require('@sage/syracuse-ui/lib/page/desktopPage').DesktopPage;
var FacetsBar = require('@sage/syracuse-ui/lib/search/facetsBar').FacetsBar;
var _browse = require('@sage/syracuse-ui/lib/landingPage/select/browseMenus');

var _gadgetTypes = ["requests", "processes", "stats", "representation", "calendar", "extLink"];

function _addBlock(slot, $title) {
	var block = syra_dom.div("s-sv-wiz-step-block", slot);
	var title = syra_dom.label("s-sv-wiz-step-block-title", block);
	title.textContent = $title;
	return {
		block: block,
		title: title,
		body: syra_dom.div("s-sv-wiz-step-body", block)
	};
}


function _addStep1(page) {
	var step = syra_dom.div("s-sv-wiz-step");
	var box = _addBlock(step, syra_local.ldpSelectEndpoint);
	var isEndpointHidden = syra_ldp && syra_ldp.ldpRecord && syra_ldp.ldpRecord.useCurrentEndpoint;
	syra_dom.hide(box.block, isEndpointHidden);

	page.addItem(box.body, {
		$isTitleHidden: true,
		$bind: "endpoint"
	});


	var box = _addBlock(step, isEndpointHidden ? syra_local.ldpBrowseCategoryNoEndpoint : syra_local.ldpBrowseCategory);
	var rowCount = 0;
	for (var ii = 0, jj = _gadgetTypes.length; ii < jj; ii++) {
		page.addItem(box.body, {
			$category: "link",
			$bind: _gadgetTypes[ii],
			$css: "s-sv-type-link s-sv-type-" + _gadgetTypes[ii],
			$skin: "s-sv-type-skin"
		});
		if (++rowCount == 3) {
			rowCount = 0;
			var sep = document.createElement("div");
			sep.className = "s-sv-wiz-cat-sep";
			box.body.appendChild(sep);
		}
	}
	page.layoutContent.domItem.appendChild(step);
}

function _addStep2(page) {
	var step = syra_dom.div("s-sv-wiz-step");

	var box = _addBlock(step, syra_local.ldpUseSearch);
	page.addItem(box.body, {
		$bind: "$searchVignetteField",
		$isTopLabelAlignment: false
	});
	page.searchVignetteBlock = _addBlock(step, syra_local.ldpNoVignetteFounds);
	page.searchVignetteBlock.block.style.display = "none";
	page.searchVignetteBlock.body.className += " s-sv-wiz-results";

	page.facetBar = new FacetsBar();
	page.facetBar.load(page, {
		slot: syra_dom.div("s-sv-wiz-results-bar", page.searchVignetteBlock.body),
		$facetSkin: "s-search-vignette",
	}, {
		$filters: ["menuModule", "menuCategory"],
		$order: ["menuModule", "menuCategory"]
	});

	page.searchResultField = page.addItem(syra_dom.div("s-sv-wiz-results-data", page.searchVignetteBlock.body), {
		$bind: "$searchResult",
		$isEditMode: false,
		$isMenuRecordHidden: true,
		$noDataText: syra_local.search_no_res,
		$format: "cards",
		$alternateStyle: false,
		$skin: "s-sv-search-res",
		$selectMode: "multi",
		$selectByRow: true,
		renderRecordContent: function(record) {
			var title = syra_dom.div("s-sv-search-res-title", record.body);
			title.innerHTML = syra_core.escape(record.dataset.title);

			if (record.dataset.module) {
				var div = record.searchModuleItem = syra_dom.div("s-sv-search-res-mod-value", record.body);
				div.innerHTML = syra_core.escape(record.dataset.module);
			}
			if (record.dataset.categories) {
				record.searchCategoryItems = [];
				for (var ii = 0, jj = record.dataset.categories.length; ii < jj; ii++) {
					var div = syra_dom.div("s-sv-search-res-cat-value", record.body);
					div.innerHTML = syra_core.escape(record.dataset.categories[ii]);
					record.searchCategoryItems.push(div);
				}
			}
			if (page.findSelectedVignette(record.dataset.$key)) {
				syra_dom.toggleClass(record.domItem, "s-record-selected", true);
				_onSelectSearchRecord(record, true);
			}
		},
		$layout: {
			$items: []
		}
	});
	page.browseBlock = _addBlock(step, "");
	page.layoutContent.domItem.appendChild(step);
}

function _onSelectSearchRecord(record, selected) {
	record.searchModuleItem && syra_dom.toggleClass(record.searchModuleItem, "s-record-selected", selected);
	if (record.searchCategoryItems) {
		for (var ii = 0, jj = record.searchCategoryItems.length; ii < jj; ii++) {
			syra_dom.toggleClass(record.searchCategoryItems[ii], "s-record-selected", selected);
		}
	}
	record.$isSelected = selected;
}

function _gotoStep(page, index) {
	var steps = page.layoutContent.domItem.children;
	index--;
	for (var ii = 0, jj = steps.length; ii < jj; ii++) {
		steps[ii].style.display = (ii == index) ? "" : "none";
	}
}

function _updateSelectedEndpoint(page, endpoint) {
	page.selectedEndpoint = endpoint;
	syra_dom.empty(page.securityViewSlot);
	syra_button.remove(page.securityEndpointFlag);
	if (endpoint) {
		page.securityEndpointFlag = syra_button.add({
			isIndicator: true,
			parent: page,
			slot: page.securityViewSlot,
			text: endpoint.$value || endpoint.description,
			css: "s-security-user",
			fontIcon: "endpoint"
		});
	}
}

function _applySearchChange(page, data) {
	page.startChange();
	page.browseBlock.block.style.display = "none";
	page.searchVignetteBlock.block.style.display = "";
	data.$searchResult = data.$resources;
	delete data.$resources;
	page.applyChange({
		$searchResult: null
	});
	page.applyChange(data);
	page.endChange();
}

function _updatePage(page, data) {
	page.startChange();
	page.applyChange({
		$searchVignetteField: "",
		selectedEndpoint: page.selectedEndpoint
	});
	syra_dom.empty(page.browseBlock.body);
	_browse.buildLevels(page, page.browseBlock.body, data);
	page.searchVignetteBlock.block.style.display = "none";
	page.browseBlock.block.style.display = "";
	page.endChange();
}

function SelectPage() {}

exports.SelectPage = helpers.defineClass(SelectPage, DesktopPage, {
	onItemInOut: function(onEnter, event, target) {
		if (target.className.indexOf("s-sv-browse-item") >= 0) {
			syra_dom.toggleClass(target, "s-record-enter", onEnter);
		} else {
			this.facetBar.onItemInOut(onEnter, event, target);
			DesktopPage.prototype.onItemInOut.call(this, onEnter, event, target);
		}
	},

	onSelectRecord: function(records, record, isSelected) {
		if (records) {
			this.selectVignette(record.dataset, isSelected);
			_onSelectSearchRecord(record, isSelected);
		}
	},
	fetch: function(options) {
		var self = this;
		if (options && options.isPageLoading) {
			options.method = "POST";
			DesktopPage.prototype.fetch.call(self, options);
		} else {
			options.method = options.method || "GET";
			syra_ajax.get({
				params: options.params,
				page: self,
				url: self.requestUrlComplete,
				end: function(response) {
					if (response.ok) {
						_applySearchChange(self, data);
					} else {
						syra_alert.show(response.error.diagnoses, self);
					}
				}
			});
		}
	},
	onMenuClick: function(options) {
		var self = this;
		if (_gadgetTypes.indexOf(options.menu.$bind) >= 0) {
			self.browseBlock.title.title = self.browseBlock.title.textContent = options.menu.getTitle();
			self.requestUrl = options.menu.$searchUrl || options.menu.$url;
			syra_ajax.send({
				page: self,
				method: options.menu.$method || "GET",
				url: options.menu.$url,
				end: function(response) {
					if (response.ok) {
						syra_button.hide(self.backBtn, false);
						_gotoStep(self, 2);
						_updatePage(self, response.data);
					} else {
						syra_alert.show(response.error.diagnoses, self);
					}
				}
			});
			return false;
		}
		return false;
	},
	selectVignette: function(dataVignette, selected) {
		var selected = selected || false;
		var vignette = this.findSelectedVignette(dataVignette.$key || dataVignette.$uuid);
		if (vignette) {
			!selected && this.selectedVignettes.splice(this.selectedVignettes.indexOf(vignette), 1);
		} else {
			selected = true;
			this.selectedVignettes.push({
				vignette: dataVignette,
				endpoint: {
					$uuid: this.selectedEndpoint.$uuid
				}
			});
		}
		this.onSelectRecord(this.selectedVignettes);
		return selected;
	},
	findSelectedVignette: function($uuid) {
		for (var ii = 0, jj = this.selectedVignettes.length; ii < jj; ii++) {
			var sel = this.selectedVignettes[ii];
			if ((sel.vignette.$key || sel.vignette.$uuid) == $uuid) {
				return sel;
			}
		}
		return null;
	},
	onFormUpdateDelta: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "$searchVignetteField":
				if (value != '') {
					// change count value
					self.requestUrlComplete = self.requestUrl.replace(/(count=)\d+(.+)/g, "$120$2") + ("&search=" + value);
					syra_ajax.get({
						lock: true,
						page: self,
						url: self.requestUrlComplete,
						end: function(response) {
							if (response.ok) {
								_applySearchChange(self, response.data, true);
							} else {
								syra_alert.show(response.error.diagnoses, self);
							}
						}
					});
				} else {
					self.endChange();
				}
				return false;
			case "endpoint":
				_updateSelectedEndpoint(self, value);
				break;
		}
		return true;
	},
	applyChange: function(newData) {
		if (newData) {
			newData.endpoint && _updateSelectedEndpoint(this, newData.endpoint);
		}
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && this.facetBar.fill(this.dataset.$searchFacets);
	},
	ensureDefaultArticle: function($article, $prototype) {
		$prototype.$title = syra_local.ldpAddNewVignette;
		return {
			$layout: {
				$items: []
			}
		};
	},

	load: function(initData) {
		this.selectedVignettes = []; // adding prototype properties for search field and results page
		if (this.$prototype && this.$prototype.$properties) {
			this.$prototype.$properties.$searchVignetteField = {
				$type: "application/x-string",
				$title: syra_local.ldpSearch
			};
			this.$prototype.$properties.$searchResult = {
				$type: "application/x-array",
				$item: {
					$type: "application/json",
					$properties: {}
				}
			};
		};
		delete this.$prototype.$description; // in order not to display description text value
		DesktopPage.prototype.load.call(this, initData);
	},
	drawPage: function() {
		this.isMenuBarDisabled = true;
		DesktopPage.prototype.drawPage.call(this);
		_addStep1(this);
		_addStep2(this);
		this.backBtn = syra_button.add({
			parent: this,
			text: syra_local.ldpBack,
			css: "s-sv-back-link",
			iconOnly: true,
			fontIcon: "reload_back",
			isHidden: true,
			click: function() {
				syra_button.hide(this, true);
				_gotoStep(this.parent, 1);
				this.parent.resizeItem();
			}
		});
		this.domTitleBar.parentNode.insertBefore(this.backBtn.link, this.domTitleBar);
		_gotoStep(this, 1);
	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.fetch(options);
	},
	dispose: function() {
		_browse.dispose();
		syra_site.disposeObject(this.facetBar);
		DesktopPage.prototype.dispose.call(this);
	}
});