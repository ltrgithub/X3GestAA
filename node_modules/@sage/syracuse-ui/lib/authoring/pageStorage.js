"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var DesktopPage = require("@sage/syracuse-ui/lib/page/desktopPage").DesktopPage;
var _designerViewChoice = require('@sage/syracuse-ui/lib/authoring/designerViewChoice');

function _loadSelectedDesignView(page, $selectedView) {
	var params = {
		select: "$views"
	};
	if (page.$fusionPageMeta && page.$fusionPageMeta.modelRepresentation) {
		params.modelRepresentation = page.$fusionPageMeta.modelRepresentation;
	}
	syra_ajax.get({
		page: page,
		url: syra_url.getRepresentationUrl(page.urlSeg),
		params: params,
		end: function(response) {
			if (response.ok) {
				page.$views = response.data.$views;
				_designerViewChoice.registerDesignViews(page, $selectedView || true);
				if (!page.$views) {
					page.$item = syra_site.clone(syra_pageBuilder.ensureDefaultArticle(page, page.$prototype.$article, page.$prototype));
					page.reloadLayout(page.$item);
					if (page.urlSeg) {
						delete page.urlSeg.params.pageview;
						page.urlSeg.stringify();
						if (!syra_site.mobile) {
							syra_history.replaceState(page.urlSeg.url);
							page.urlSeg = syra_url.parse(page.urlSeg.url);
						}
					}
				}
			} else {
				syra_alert.show(response.error.diagnoses, page);
			}
		}
	});
}

function PageStorage() {}

exports.PageStorage = _helpers.defineClass(PageStorage, DesktopPage, {
	loadStorage: function(designer) {
		var self = this;
		self.isSiteRegisterDisabled = true;
		self.designer = designer;
		self.crudSlot = syra_dom.div("s-aw-page-wc", designer.layoutSlot);
		self.diagnosePage = designer.designedArticle.page;
		syra_pageBuilder.initialize(this);
		if (self.designer.designedArticle == self.designer.designedArticle.page && self.designer.designedArticle.page.$authorUrl) {
			self.hasWorkingCopy = true;
			syra_router.postQuery({
				menu: {
					$url: self.designer.designedArticle.page.$authorUrl
				},
				end: function(response, requestUrl) {
					if (response.ok) {
						syra_router.loadRepresentation({
							article: null,
							segments: response.url,
							success: function($itemPage) {
								self.$prototype = $itemPage.$representation.$prototype;
								syra_item.initialize(self, self, {});
								self.load(response.data);
								syra_site.resizeItem();
							}
						});
					} else {
						syra_alert.show(response.error.diagnoses, self);
					}
				}
			});
		}
	},
	onMenuClick: function(options) {
		var self = this;
		switch (options.menu.$item.$bind) {
			case "$delete":
				if (options.menu.page != self.designer.designedArticle.page) {
					if (self.designer.designedArticle.page.$selectedDesignView) {
						var $selectedDesignView = self.designer.designedArticle.page.$selectedDesignView;
						if ($selectedDesignView) {
							syra_alert.ask({
								$title: syra_local.aw_deleteMessageTitle,
								$message: syra_local.aw_deleteMessageText.replace("{0}", "'" + $selectedDesignView.$title + "'"),
								mode: "yes,no",
								onClose: function(closeBy) {
									if (closeBy == "yes") {
										syra_router.executeMenu(options.menu);
									}
								}
							});
						}
					}
				}
				return false;
			case "$close":
				if (self.designer.history.isUpdated) {
					syra_alert.ask({
						$title: syra_local.aw_updateMessageTitle,
						$message: syra_local.aw_cancelMessageText,
						mode: "yes,no,cancel",
						defaultButton: "no",
						onClose: function(closeBy) {
							switch (closeBy) {
								case "yes":
									self.isAutoCloseDesigner = true;
									self.saveUpdate();
									break;
								case "no":
									var $item = syra_site.clone(self.designer.$sourceItem);
									self.designer.designedArticle.page.reloadLayout($item);
									syra_site.mobile && syra_site.mobile.applyChange($item);
									self.designer.closeDesigner();
									break;
							}
						}
					});
				} else {
					self.designer.closeDesigner();
				}
				return false;
			default:
				if (options.menu.$sourceBind == "$aw_quit") {
					self.designer.clearDiagnoses();
					self.designer.closeDesigner();
					return false;
				}
				var page = options.menu.page;
				if (page != self && !options.menu.isDiagnoseMenu && page.isDesigned) {
					return false;
				}
		}
		return true;
	},
	saveUpdate: function() {
		syra_menus.click.fire({
			scope: this,
			$bind: (this.menuItems.$save && this.menuItems.$save.length > 0 && this.menuItems.$save[0].$isDisabled) ? "saveAs" : "$save"
		});
	},
	drawPage: function() {
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.addItem(this.crudSlot, {
			$bind: "$save",
			$category: "link",
			$skin: "s-aw-menus-save",
			$icon: {
				$mode: "icon"
			}
		});
		if (!syra_site.mobile) {
			this.addItem(this.crudSlot, {
				$bind: "saveAs",
				$category: "link",
				$skin: "s-aw-menus-saveas",
				$icon: {
					$mode: "icon",
					$value: "saveas",
					$path: "authoring/s-aw-"
				}
			});
			this.addItem(this.crudSlot, {
				$bind: "$delete",
				$category: "link",
				$skin: "s-aw-menus-delete",
				$icon: {
					$mode: "icon"
				}
			});
		}
		this.addItem(this.crudSlot, {
			$bind: "$close",
			$category: "link",
			$skin: "s-aw-page-close",
			$icon: {
				$mode: "icon"
			}
		});
		this.menuItems.$close[0].setMenu({
			$title: syra_local.aw_close
		}, null);
	},

	onAfterActionMenuExecute: function(menuItem, $menu, isSuccess) {
		switch (menuItem.$bind) {
			case "$save":
			case "saveAs":
				if (isSuccess) {
					if (this.dataset.$authorUrl) {
						this.designer.designedArticle.page.$authorUrl = this.dataset.$authorUrl;
					}
					this.designer.history.updateSteps(false);
					$menu.$diagnoses = [{
						$message: syra_local.aw_saveMessageText,
						$severity: "success"
					}];
					$menu.$links = {
						$create: {
							$isHidden: true
						},
						$details: {
							$isHidden: true
						},
						$query: {
							$isHidden: true
						}
						/*,
						 $aw_quit: {
						 $title: syra_local.aw_quit
						 }*/
					};
					syra_dataset.applyDelta(menuItem.page, menuItem.articleParent.$menus[menuItem.$bind], {
						$links: $menu.$links
					});
					menuItem.disable(false);
					if (menuItem.$bind == "saveAs") {
						_loadSelectedDesignView(this.designer.designedArticle.page, menuItem.$links && menuItem.$links.$view);
					}

					if (this.isAutoCloseDesigner) {
						this.designer.closeDesigner();
						return false;
					}

				} else {
					delete this.isAutoCloseDesigner;
					if (menuItem.$bind == "saveAs") {
						menuItem.disable(false);
					}
				}
				break;
			case "$delete":
				if (isSuccess) {
					var $selectedDesignView = this.designer.designedArticle.page.$selectedDesignView;
					if (this.dataset.$authorUrl) {
						this.designer.designedArticle.page.$authorUrl = this.dataset.$authorUrl;
					}
					var $diagnose = {
						$message: syra_local.aw_isDeletedMessageText.replace("{0}", "'" + $selectedDesignView.$title + "'"),
						$severity: "success"
					};
					var page = this.designer.designedArticle.page;
					this.designer.closeDesigner();
					_loadSelectedDesignView(page);
					return false;
				}
				break;
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$diagnoses = null;
		}
		DesktopPage.prototype.applyChange.call(this, newData);
	},
	form_postAction: function(menuItem, target, value) {
		if (value && value.$save || value.saveAs) {
			if (this.designer.designedArticle.page.garbage) {
				this.designer.designedArticle.page.garbage.garbageFreeItems();
			}
		}
		var $article = syra_site.clone(this.designer.designedArticle.page.$item);
		delete $article.$menus;
		delete $article.$isModel;
		$article.$updateDate = syra_culture.datetime.now().toString("yyyy-MM-ddTHH:mm:ss") + "Z";
		if (this.designer.designedArticle.page.makeArticlePersistent) {
			this.designer.designedArticle.page.makeArticlePersistent($article);
		}
		this.saveDesign($article);
		return true;
	},
	saveDesign: function($article) {
		if (this.hasWorkingCopy) {
			syra_sendBag.get(this).content = {
				$article: syra_layout.cleanEmptyTabs(_helpers.object.clone($article || this.designer.designedArticle.page.$item, true))
			};
		}
	},
	dispose: function() {
		syra_dom.remove(this.crudSlot);
		DesktopPage.prototype.dispose.call(this);
	}
});