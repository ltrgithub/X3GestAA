"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var SideBar = require("@sage/syracuse-ui/lib/page/tools/sideBar").SideBar;

function FacetsBar() {}

exports.FacetsBar = _helpers.defineClass(FacetsBar, null, {
	load: function(page, options, $criteria) {
		var self = this;
		self.$criteria = $criteria || {};
		self.$facetSkin = (options.$facetSkin || "") + " s-search-facet";
		self.page = page;
		page.onFieldInputEvent = function(event) {
			var facetsBar = self.facetBar;
			var input = event.target;
			if (input.syraFacet !== undefined) {
				var facet = self.map && self.map[input.syraFacet];
				if (facet) {
					var member = facet.members[input.syraMember];
					if (member) {
						switch (event.type) {
							case "change":
								self.updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, member.checkBox.input.checked);
								// in case no filtering param, no "filters" param to add to the url
								var options = Object.keys(self.filters).length > 0 ? {
									jsonParams: {
										filters: self.filters
									}
								} : {};
								self.page.onFacetFilterChange(options);
								break;
							case "focusin":
							case "focusout":
								syra_dom.toggleClass(member.checkBox.icon, "s-focus", event.type == "focusin");
								break;
						}
					}
				}
			}
		};

		var $skin = "s-search-bar";
		if (options.slot) {
			self.slot = options.slot;
			syra_dom.hide(self.slot, true);
		} else {
			var bar = new SideBar();
			bar.preferenceKey = "menuBar";
			bar.options = options;
			bar.options.$skin = $skin;
			bar.slot = syra_dom.div($skin + "-slot", page.domItem);
			self.slot = bar.body = syra_dom.div($skin + "-body");
			(page.menuBar = bar).load(page);
		}
	},
	updateFilters: function($facet, $title, checked) {
		if (checked) {
			(this.filters[$facet] = this.filters[$facet] || []).push($title);
		} else {
			var filter = this.filters[$facet];
			if (filter) {
				filter.splice(filter.indexOf($title), 1);
				if (filter.length == 0) {
					delete this.filters[$facet];
				}
			}
		}
	},
	addMemberLinks: function(member) {
		member.linksItem = this.page.addItem(syra_dom.div(this.$facetSkin + "-member-links", member.item), {
			$category: "menus",
			$skin: "s-array-menus",
			$layout: {
				$items: Object.keys(member.dataset.$links).map(function($bind) {
					return {
						$bind: $bind
					};
				})
			}
		}, this.page);
		this.page.applyChange({
			$links: member.dataset.$links
		});
	},
	addMember: function(facet, index) {
		var id = this.page.id + "-" + facet.key + "-" + index;
		var member = {
			index: index,
			dataset: facet.dataset.$members[index],
			item: syra_dom.div(this.$facetSkin + "-member"),
			title: syra_dom.div(this.$facetSkin + "-member-title"),
			count: syra_dom.div(this.$facetSkin + "-member-count")
		};
		syra_fields.checkbox.render(member, id, this.$facetSkin + "-member-check");
		member.checkBox.icon.syraFacet = member.checkBox.input.syraFacet = facet.key;
		member.checkBox.icon.syrainout = this.page.id;
		member.checkBox.icon.syraMember = member.checkBox.input.syraMember = index;
		member.checkBox.input.syraOnInput = this.page.id;
		member.checkBox.input.syraItem = this.page.id;
		member.item.appendChild(member.checkBox.slot);

		if (member.dataset.$selected) {
			syra_fields.checkbox.setValue(member, true);
			this.updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, true);
		}

		member.title.textContent = member.dataset.$title;
		member.item.appendChild(member.title);

		member.count.textContent = "(" + member.dataset.$count + ")";
		member.item.appendChild(member.count);

		member.dataset.$links && this.addMemberLinks(member);
		facet.body.appendChild(member.item);
		return member;
	},
	addFacet: function($searchFacet) {
		var facet = {
			key: $searchFacet.$facet,
			dataset: $searchFacet,
			item: syra_dom.div(this.$facetSkin),
			body: syra_dom.div(this.$facetSkin + "-body"),
			header: syra_dom.header(this.$facetSkin + "-header s-search-facet-type-" + $searchFacet.$facet),
			members: []
		};
		facet.header.textContent = facet.header.title = facet.displayedTitle = facet.dataset.$title || facet.dataset.$facet;
		facet.header.syraTip = 1;

		for (var ii = 0, jj = facet.dataset.$members.length; ii < jj; ii++) {
			facet.members.push(this.addMember(facet, ii));
		}

		facet.item.appendChild(facet.header);
		facet.item.appendChild(facet.body);
		this.facetItems.push(this.map[facet.key] = facet);
	},
	ensureDisplayOrder: function(slot) {
		if (this.$criteria.$order) {
			var newStack = [];
			for (var ii = 0, jj = this.$criteria.$order.length; ii < jj; ii++) {
				var $facet = this.$criteria.$order[ii];
				for (var mm = 0, kk = this.facetItems.length; mm < kk; mm++) {
					if (this.facetItems[mm].dataset.$facet == $facet) {
						newStack.push(this.facetItems[mm]);
						this.facetItems.splice(mm, 1);
						break;
					}
				}
			}
			this.facetItems = newStack.concat(this.facetItems);
		}
		for (var ii = 0, jj = this.facetItems.length; ii < jj; ii++) {
			slot.appendChild(this.facetItems[ii].item);
		}
	},
	fill: function(facets) {
		if (facets) {
			this.filters = {};
			this.facetItems = [];
			this.map = {};
			if (!this.body) {
				var header = syra_dom.text(this.$facetSkin + "s-header", syra_local.searchFacetFilters, this.slot);
				this.body = syra_dom.div(this.$facetSkin + "s-body", this.slot);
			}
			syra_dom.empty(this.body);
			var $filterCriteria = this.$criteria.$filters;
			for (var ii = 0, jj = facets.length; ii < jj; ii++) {
				var facet = facets[ii];
				if (facet.$members && facet.$members.length > 0) {
					if (!$filterCriteria || $filterCriteria.indexOf(facet.$facet) >= 0) {
						this.addFacet(facet);
					}
				}
			}
			this.ensureDisplayOrder(this.body);

		}
	},
	onItemInOut: function(onEnter, event, target) {
		if (event.target.syraFacet !== undefined) {
			var facet = this.map && this.map[target.syraFacet];
			facet && syra_dom.toggleClass(facet.members[target.syraMember].checkBox.icon, "s-enter", onEnter);
		}
	}

});