"use strict";

var _HANDLES = ["n", "ne", "e", "se", "s", "sw", "w", "nw"];

function Resizer(config) {
	var self = this;
	self.config = config;
	self.handles = [];
	config.handles = config.handles || _HANDLES;
	for (var ii = 0, jj = config.handles.length; ii < jj; ii++) {
		self.handles[ii] = syra_dom.div((config.css || "") + " s_resizer_axe s_resizer_" + config.handles[ii], config.slot);
	}
	self.config.slot.addEventListener("mousedown", self.handleMousedown = function(event) {
		self.mousedown(event);
	}, false);
}

Resizer.prototype._start = function(event) {
	this.resizing = {
		handle: event.target,
		dir: this.config.handles[this.handles.indexOf(event.target)],
		start: {
			pageX: event.pageX,
			pageY: event.pageY
		}
	};
	syra_dom.toggleClass(this.resizing.handle, "s_resizer_drag", true);
	syra_site.siteApp.style.cursor = this.resizing.dir + "-resize";
	if (this.config.body) {
		this.config.body.style.pointerEvents = "none";
		syra_dom.getBoundingClientRect(this.config.body, this.resizing.start);
	}
	if (this.config.start) {
		this.config.start(this.resizing);
	} else {
		this.config.$width = this.resizing.start.width;
		this.config.$height = this.resizing.start.height;
	}
	this._bindMove(true);
};

Resizer.prototype.mousemove = function(event) {
	event.preventDefault();
	this.resizing.event = event;
	delete this.resizing.deltaY;
	delete this.resizing.deltaX;

	switch (this.resizing.dir) {
		case "n":
		case "ne":
		case "s":
		case "se":
		case "sw":
		case "nw":
			this.resizing.deltaY = event.pageY - this.resizing.start.pageY;
			break;
	}
	switch (this.resizing.dir) {
		case "ne":
		case "e":
		case "se":
		case "sw":
		case "w":
		case "nw":
			this.resizing.deltaX = event.pageX - this.resizing.start.pageX;
			break;
	}
	if (this.config.body) {
		if (this.resizing.deltaX != undefined) {
			this.config.$width = this.resizing.start.width + this.resizing.deltaX;
			this.config.body.style.width = this.config.$width + "px";
		}
		if (this.resizing.deltaY != undefined) {
			this.config.$height = this.resizing.start.height + this.resizing.deltaY;
			this.config.body.style.height = this.config.$height + "px";
		}
	}
	if (this.config.drag) {
		this.config.drag(this.resizing);
	}
};

Resizer.prototype.mousedown = function(event) {
	if (this.handles.indexOf(event.target) >= 0) {
		event.preventDefault();
		this._start(event);
		event.stopPropagation();
	}
};

Resizer.prototype.mouseup = function(event) {
	this._bindMove(false);
	if (this.config.body) {
		this.config.body.style.pointerEvents = "auto";
	}
	this.config.stop(this.resizing);
	syra_dom.toggleClass(this.resizing.handle, "s_resizer_drag", false);
	syra_site.siteApp.style.cursor = "";
	syra_site.ignoreClick = event.target;
	syra_site.disposeObject(this.resizing);
};

Resizer.prototype._bindMove = function(bind) {
	var self = this;
	if (bind) {
		syra_events.mousemove.subscribe(self.handleMousemove = function(event) {
			self.mousemove(event);
		});
		syra_events.mouseup.subscribe(self.handleMouseup = function(event) {
			self.mouseup(event);
		});
	} else {
		self.handleMousemove && syra_events.mousemove.unsubscribe(self.handleMousemove);
		self.handleMouseup && syra_events.mouseup.unsubscribe(self.handleMouseup);
	}
};

Resizer.prototype.dispose = function() {
	this._bindMove(false);
	syra_site.disposeObject(this.resizing);
	this.config.slot.removeEventListener("mousedown", this.handleMousedown);
	syra_site.disposeObject(this);
};

exports.Resizer = Resizer;