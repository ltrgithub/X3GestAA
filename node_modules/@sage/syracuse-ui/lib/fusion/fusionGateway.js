"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var FusionSite = require('./core/client/inplace').FusionSite;
var WorkBook = require('./workBook').WorkBook;
var _sapUtil = require('./core/client/sap/util');
var util = require('./tools/util');
var _requestActions = require('./core/client/sap/srvactions');

var _messageCodes = ["3", "4", "5", "8", "9", "12", "13", "14", "16", "19", "20", "21", "23"];

exports.gateway = {
	defLang: "en-US",
	sapUtil: _sapUtil.Fusion,
	syraUtil: _sapUtil.Syra,
	getMessage: function(code) {
		var mess = syra_local["fusion_" + code];
		if (mess && _messageCodes.indexOf(code) >= 0) {
			mess += "\n" + syra_local.fusion_18;
		}
		if (!mess) {
			mess = "***localized message unknown***";
		}
		return mess || _unknow;
	},
	onUserActionUnloadEx: function(callback) {
		var self = this;

		function notifyHoster(diag, cbck) {
			if ((diag.severity || diag.$severity) !== "success") {
				syra_alert.modal({
					$message: diag.message || diag.$message || syra_local.disconnect_userunload_msg,
					$type: "warning",
					isAutoClose: 25000,
					$title: diag.$title || syra_local.disconnect_userunload_title,
					mode: "ok,cancel",
					onClose: function(closeBy) {
						if (closeBy == "ok") {
							setTimeout(function() {
								cbck(close);
							}, 5);
						} else {
							this.book && this.book.selectSheet();
							setTimeout(function() {
								cbck(close);
							}, 5);
						}
					}
				});
			} else {
				callback();
			}
		}
		if (self.book) {
			// check if there is an ongoing dialogue between client and server
			// yes -> can't proceed. show alert message
			// no -> proceed (see below)
			self.detachAllBooks(notifyHoster, false, false, true);
		} else {
			callback();
		}
	},
	updateRequestTimer: function() {
		var self = this;

		// maintain session by sending a useless request to server
		function callbackConfirm() {
			syra_ajax.get({
				url: "/sdata/syracuse/collaboration/syracuse/sessionInfos?representation=sessionInfo.$query&count=1"
			});
		}

		if (self.book) {
			var delay = 60000; // 3 minutes
			var timeout = (syra_site.userProfile.sessionTimeOut - delay) || 120000; // 2 minutes default
			// if negative
			timeout = timeout <= 0 ? 120000 : timeout;

			// clear any previous ongoing timeout
			clearTimeout(self.serverTimeOutHandler);

			// run timer
			self.serverTimeOutHandler = setTimeout(function() {
				if (!(self.book && self.book.fusionSite.isRequestPending())) {
					syra_alert.modal({
						$message: syra_local.disconnect_timeout_msg,
						$type: "warning",
						isAutoClose: delay,
						$title: syra_local.disconnect_timeout_title,
						mode: "yes,no",
						defaultButton: "no",
						onClose: function(closeBy) {
							if (closeBy == "yes") {
								callbackConfirm();
							} else {
								// convergence sessions will be closed and you will head back to syracuse 
								self.detachAllBooks(function(diag) {
									setTimeout(function() {
										syra_alert.info(syra_local.disconnect_timeout_info);
									}, 1000);
								}, true, true, false);
							}
						}
					});
				} else {
					callbackConfirm();
				}
			}, timeout);

		} else {
			clearTimeout(self.serverTimeOutHandler);
		}
	},
	openMainPage: function(urlSeg, reactPageContext) {
		var self = this;
		urlSeg.url = syra_url.addHost(urlSeg.url);
		var book = new WorkBook();
		book.reactPageContext = reactPageContext;
		self.book = book;
		book.selectSheet();
		book.urlSeg = urlSeg;
		book.id = helpers.uuid.generate();
		(book.fusionSite = new FusionSite()).create(book.id, {
			instance: book
		}, null);
		book.fusionSite.connect(urlSeg, function(metaData, navigate) {
			metaData && syra_alert.show(metaData.$diagnoses);
			self.book.closeBook(!navigate);
		});
	},
	runGoTo: function() {
		if (!this.fusion_goto) {
			var cvgAct = _requestActions.getSrvAction("SRV_ADXEXECUTE");
			this.fusion_goto = syra_site.addItem(null, {
				$bind: cvgAct,
				$category: "link",
				$act: cvgAct
			});
		}
		this.fusion_goto.click();
	},

	detachAllBooksPanic: function() {
		if (this.book && this.book.fusionSite && this.book.fusionSite.controller) {
			this.book.fusionSite.controller.delSapSessExPanic();
		}
	},
	detachAllBooks: function(notifyHoster, timeout, force, noNavigateOnClose, opts) {
		var book = this.book;
		var diagOk = {
			$message: "",
			$severity: "success",
			appCode: "39"
		};
		if (book) {
			if (opts && opts.panic) {
				book.fusionSite.emergencyCltClose("detachAllBooksPanic", null);
			} else {
				var curr = 0;

				function walkDetach(diagnosis, hardDetach) {
					var currErr;
					if ((diagnosis.severity || diagnosis.$severity) == "success") {
						if (curr == 1) {
							notifyHoster(diagnosis);
						} else {
							curr++;
							book.fusionSite.disconnect(walkDetach, timeout, hardDetach !== null && hardDetach !== undefined ? hardDetach : force, noNavigateOnClose);
						}
					} else {
						currErr = curr - 1;
						notifyHoster(diagnosis, function(forceDetach) {
							if (forceDetach) {
								curr = currErr;
								walkDetach(diagOk, true);
							}
						});
					}
				}
				walkDetach(diagOk);
			}
		} else {
			notifyHoster({
				$message: "",
				$severity: "success",
				appCode: "0"
			});
		}
	},
	onBlockExRpc: function(field, proxy, values, opt) {
		var callDesc;
		if (typeof proxy === 'object') {
			callDesc = proxy;
			proxy = undefined;
		}
		opt = opt || {};
		field.page.externalAdapter.onBlockExRpc({
			field: field,
			call: {
				proxy: proxy,
				callDesc: callDesc,
				values: values,
				onError: opt.onError,
				callback: function(res) {
					if (!opt.isErrorIgnore) {
						var $diagnoses = !res ? [{
							message: "No result",
							severity: "error"
						}] : res.$diagnoses || null;
						if ($diagnoses) {
							syra_alert.error($diagnoses);
							return;
						}
					}
					opt.callback && opt.callback(res);
				}
			}
		});
	},
	executeFusionFunc: function(menuItem, executeDefault) {
		if (this.book) {
			menuItem.urlSeg = menuItem.urlSeg || syra_url.parse(menuItem.$url, true);
			if (menuItem.urlSeg.classicParams) {
				//x3 fct : open via ackcall
				//how to get current field with best way ?
				var sapController = this.book.fusionSite.controller._sapController;
				if (sapController) {
					var externalAdapter = syra_site.mainPage.externalAdapter;
					externalAdapter = externalAdapter && externalAdapter.onBlockExRpc ? externalAdapter : this.book.selectedSheet && this.book.selectedSheet.externalAdapter;
					if (externalAdapter && externalAdapter.onBlockExRpc) {
						externalAdapter.onBlockExRpc({
							field: sapController.getBoundField(sapController._currCtx.ist),
							call: {
								proxy: "EXEFNC1",
								values: [menuItem.urlSeg.classicParams.functionCode, menuItem.urlSeg.classicParams.transaction],
								callback: function callback() {}
							}
						});
					}
				}
				return;
			}
		}
		executeDefault();
	},
	dispose: function() {
		this.book && this.book.dispose();
		this.book = null;
	}
};