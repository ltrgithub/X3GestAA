"use strict";
var _datetime = {
	validate: function(value, constraints, errors) {
		return true;
	},
	parse: function(value, format) {
		return {
			"_value": value,
			"toString": function() {
				return this._value;
			},
			"isNull": function() {
				return false;
			}
		};
	},
	formatInput: function(field, value) {
		return value;
	},
	"formatFromHelperVal": function(helperVal, format, formatWrapper) {
		var formted = null,
			rawArray, i, len, rawVal = "",
			occur;
		if (helperVal) {
			rawArray = [helperVal.year, helperVal.month, helperVal.day];
			for (i = 0, len = rawArray.length; i < len; i++) {
				occur = rawArray[i].toString(10);
				rawVal += occur.length == 1 ? ("0" + occur) : occur;
			}
			formted = formatWrapper.rawToEdit(rawVal, format);
		}
		return formted ? formted.edit : null;
	}
};


var _integer = {
	format: function(value, format) {
		return value.str;
	},
	parse: function(value, format) {
		var strEx = null,
			gs = this.regionalOptions.groupSeparator;
		if (value == null) {
			value = "";
		}
		if (typeof value != "string") {
			value = value.toString();
		}
		if (gs && value && value.indexOf(gs) >= 0) {
			strEx = value.split(gs).join('');
		}
		return {
			"value": syra_culture.integer.parse(strEx || value),
			"str": value,
			"toString": function() {
				return this.str;
			},
			numberValue: function() {
				return this.value;
			}
		};
	},
	numberValue: function(val) {
		return val.toString();
	},
	subtract: function(n1, n2) {
		var val = n1.value - n2.value;
		return this.parse(val.toString());
	},
	add: function(n1, n2) {
		var val = n1.value + n2.value;
		return this.parse(val.toString());
	},
	validate: function(value, constraints, errors) {
		return true;
	},
	formatInput: function(field, value) {
		return value;
	}
};

var _decimal = {
	format: function(value, format) {
		return value.str;
	},
	parse: function(str, format) {
		var strEx = null,
			re, ds = this.regionalOptions.decimalSeparator,
			gs = this.regionalOptions.groupSeparator;
		if (ds != "." && str.indexOf(ds) >= 0) {
			re = new RegExp(ds, "g");
			strEx = str.replace(re, ".");
		}
		if (str.indexOf(gs) >= 0) {
			re = new RegExp(gs, "g");
			strEx = (strEx || str).replace(re, "");
		}
		return {
			"value": parseFloat(strEx || str),
			"str": str,
			"toString": function() {
				return this.str;
			},
			numberValue: function() {
				return this.value;
			}
		};
	},
	numberValue: function(value) {
		var str = value.toString(),
			re, ds = this.regionalOptions.decimalSeparator;
		if (ds != "." && str.indexOf(".") >= 0) {
			re = /\./g; // new RegExp("\\.", "g");
			str = str.replace(re, ds);
		}
		return str;
	},
	subtract: function(n1, n2) {
		var val = n1.value - n2.value;
		return this.parse(val.toString());
	},
	add: function(n1, n2) {
		var val = n1.value + n2.value;
		return this.parse(val.toString());
	},
	validate: function(value, constraints, errors) {
		return true;
	},
	formatInput: function(field, value) {
		return value;
	}
};

exports.getFormatApi = function(type) {
	switch (type) {
		case "application/x-integer":
			return _integer;
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
			return _datetime;
		case "application/x-decimal":
		case "application/x-real":
			return _decimal;
	}
}