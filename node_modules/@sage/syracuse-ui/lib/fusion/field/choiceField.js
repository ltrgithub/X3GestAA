"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var ChoiceField = require('syracuse-ui/lib/field/choice/choiceField').ChoiceField;

function _getEnum(oldEnum, menloc, exclude) {
	var newEnum = null,
		list = null;
	if (exclude && !oldEnum) {
		list = _.map(menloc, function(item, idx) {
			return {
				"$value": idx + 1,
				"$title": item
			};
		});
		_.each(exclude, function(rank) {
			list[rank - 1] = null;
		});
		newEnum = _.filter(list, function(item, idx) {
			return item;
		});
	} else {
		if (exclude && oldEnum) {
			newEnum = [];
			_.each(oldEnum, function(item, idx) {
				if (_.indexOf(exclude, item.$value) < 0) {
					newEnum.push(item);
				}
			});
		} else {
			newEnum = _.map(menloc, function(item, idx) {
				return {
					"$value": idx + 1,
					"$title": item
				};
			});
		}
	}
	return newEnum;
}

function _getMenloc(choiceField) {
	var $fusionController = syra_fusion.syraUtil.getFusionController(choiceField),
		fusionSess = $fusionController ? $fusionController.getSession() : null;
	return fusionSess && choiceField.$field.$mnu ? fusionSess.getMenloc(choiceField.$field.$mnu) : null;
}

function _updateEnum(choiceField, forceRender, rmItems) {
	var menloc = _getMenloc(choiceField),
		rmItemsEx = [],
		rmItemsTemp, i, len, exclude = false;
	if (menloc) {
		if (rmItems != undefined && rmItems != null && rmItems.length > 0) {
			rmItemsTemp = rmItems.split(",");
			for (i = 0, len = rmItemsTemp.length; i < len; i++) {
				if (rmItemsTemp[i].length == 0) {
					// Raz
					choiceField.applyMetaData({
						"$value": {
							$enum: _getEnum(choiceField.$enum, menloc)
						}
					});
				} else {
					exclude = true;
					rmItemsEx.push(parseInt(rmItemsTemp[i], 10));
				}
			}
		}
		choiceField.applyMetaData({
			"$value": {
				$enum: _getEnum(choiceField.$enum, menloc, exclude ? rmItemsEx : null)
			}
		});
		if (forceRender) {
			choiceField.forceRender();
		}
	}
	return menloc ? true : false;
}

function FusionChoiceField() {}

exports.FusionChoiceField = helpers.defineClassEx(FusionChoiceField, ChoiceField, {
	initialize: function() {
		var menloc = _getMenloc(this);
		if (!this.$field.$value) {
			this.$field.$value = {
				"$type": syra_fusion.syraUtil.dataTypes.integerType,
				"$enum": []
			};
		}
		if (menloc) {
			this.$field.$value.$enum = _getEnum(null, menloc);
		}
	},
	setValue: function(value, metaData) {
		if (metaData) {
			if (this.$field.$format == "$combo") {
				// "dch" = null mean 'restaure initial values', dch = [x, y, z,...] mean exclude x, y, z,... values
				_updateEnum(this, true, metaData.dch);
			}
			if (metaData.setch !== undefined) {
				var $enum = metaData.setch;
				var currVal = this.getValue();
				this.applyMetaData({
					"$value": {
						"$enum": $enum
					}
				});
				if (currVal != null) {
					this.forceRender();
				} else
				if ($enum.length > 0) {
					this.setValue($enum[0].$value);
				}
			}
		}
		ChoiceField.prototype.setValue.call(this, value, metaData);
	},
	forceRender: function() {
		var dummyVal = " ",
			i, len, newVal = null,
			currVal = this.getValue();
		if (currVal != null) {
			for (i = 0, len = this.$enum.length; i < len; i++) {
				if (this.$enum[i].$value == currVal) {
					newVal = currVal;
					break;
				}
			}
			if (!newVal) {
				// Oups, old item is not available anymore. Add a "dummy" item, and set this item as current value
				this.$enum.unshift({
					"$value": 0,
					"$title": dummyVal
				});
				this.applyMetaData({
					"$value": {
						"$enum": this.$enum
					}
				});
			}
			this.setValue(newVal || dummyVal);
		}
	},
	applyShortCut: function(shortcut, event) {
		var next, ret = false,
			len = this.$enum.length,
			val, evt;
		if (event.target && event.target.syraEnumIndex != null && this.$item.$format == "$radios") {
			if ((shortcut.right || shortcut.left) && len) {
				next = shortcut.right ? (event.target.syraEnumIndex + 1) : (event.target.syraEnumIndex - 1);
				next = (next < 0) ? len - 1 : next % len;
				val = this.$enum[next].$value;
				if (val != null) {
					this.setValue(this, val);
					evt = {
						"target": this._choices[next].slot,
						"type": "change",
						"preventDefault": function() {},
						"stopPropagation": function() {}
					};
					this.onFieldInputEvent(evt);
					evt.target = null;
					evt = null;
					ret = true;
				}
			}
		}
		return ret;
	}
});