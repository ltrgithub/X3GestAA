"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var TranslationPage = require('@sage/syracuse-ui/lib/localization/translationPage').TranslationPage;


function _ensureLocalizeItemId($item) {
	if (!$item.$title || $item.$title.indexOf("{@") < 0) {
		$item.$title = "{@" + helpers.uuid.generate() + "}";
	}
}

function _extractTitleKey($title) {
	return syra_expression.extractCode($title);
}

function _updatePageLocalization(page, $key, values) {
	var $localization = page.$item.$localization = page.$item.$localization || {};
	for (var ii = 0, jj = values.length; ii < jj; ii++) {
		var value = values[ii];
		if (value.$value) {
			($localization[value.$locale] = $localization[value.$locale] || {})[$key] = value.$value;
			if (value.$locale == syra_culture.languageCode) {
				(page.$prototype.$localization = page.$prototype.$localization || {})[$key] = value.$value;
			}
		} else {
			if ($localization[value.$locale]) {
				delete $localization[value.$locale][$key];
				if (!Object.keys($localization[value.$locale]).length) {
					delete $localization[value.$locale];
				}
			}
		}
	}
}


function _setPageLocalizationEntry(page, $key, $value) {
	if (page && page.$item) {
		var $localization = page.$item.$localization = page.$item.$localization || {};
		if (syra_culture.languageCode) {
			($localization[syra_culture.languageCode] = $localization[syra_culture.languageCode] || {})[$key] = $value;
			(page.$prototype.$localization = page.$prototype.$localization || {})[$key] = $value;
		}
	}
};


exports.getDefaultTabTitle = function(boxParent, $id) {
	var defaultTitle = syra_local.defaultTabTitle;
	var tabs = boxParent.layoutContent && boxParent.layoutContent.items;
	var count = 1;
	if (tabs) {
		for (var ii = 0, jj = tabs.length; ii < jj; ii++) {
			var title = tabs[ii].getTitle() || "";
			if (title.indexOf(defaultTitle) >= 0) {
				count++;
			}
		}
	}
	var $key = "@" + ($id || helpers.uuid.generate());
	_setPageLocalizationEntry(boxParent.page, $key, defaultTitle + " " + count);
	return "{" + $key + "}";
};

exports.applyPageLocalization = function(page) {
	var $pageLocal = page.$item.$localization;
	if ($pageLocal) {
		var langs = Object.keys($pageLocal);
		if (langs.length) {
			var $localization;
			if (syra_culture.languageCode) {
				$localization = $pageLocal[syra_culture.languageCode] || $pageLocal[syra_culture.languageCode.toLowerCase()];
			}
			if (!$localization) {
				$localization = $pageLocal["en-us"] || $pageLocal[langs[0]] || $pageLocal[langs[0].toLowerCase()];
			}
			if ($localization) {
				page.$prototype.$localization = page.$prototype.$localization || {};
				syra_dataset.applyDelta(page, page.$prototype.$localization, $localization);
			}
			page.$prototype.$allLocalization = $pageLocal;
		}
	}
};

function _onValidateFieldValue(page, field) {
	syra_form.validate(page);
	var $menu = page.$menus.$save;
	if ($menu.$url !== 'test') { // 'test' is $url value for $save link in test page
		syra_ajax.send({
			page: page,
			method: $menu.$method,
			url: $menu.$url,
			data: {
				$values: page.$values
			},
			contentType: "application/json",
			end: function(response) {
				if (response.ok) {
					// assuming client receives data for the underneath page
					if (field.onLocalizeField) {
						field.onLocalizeField(response.data);
					} else {
						field.page.applyChange(response.data);
					}
					page.overPanel && page.overPanel.close(undefined, true);
				} else {
					syra_alert.show(response.error.diagnoses, page);
				}
			}
		});
		return false;
	}
	return true;
}

function _localizeFieldValue(field, $menu) {
	var value = field.getValue();
	syra_ajax.get({
		page: field.page,
		url: syra_expression.parse(field.articleParent, $menu.$url),
		end: function(response) {
			if (response.ok) {
				var data = response.data;
				if (!data.$values) {
					syra_alert.show(syra_local.lPageNoValues, field);
					return false;
				}
				var page = new TranslationPage();
				page.isReadOnly = !(data.$links && data.$links.$save);
				page.load(data);
				var props = {
					authoringDisabled: true,
				};
				if (!page.isReadOnly) {
					props.onValidate = function(page) {
						return _onValidateFieldValue(page, field);
					};
				}
				syra_over.renderPageModal(page, props);
			} else {
				syra_alert.show(response.error.diagnoses, page);
			}
		}
	});
}

function _localizeSectionTitle(field, $menu) {
	syra_locales.load(function(preferences) {
		var $pageLocalization = field.page.designedArticle.$item.$localization || {};
		var $values = [];
		var section = field.localizedSection;
		var $titleKey = _extractTitleKey(section.$item.$title);
		var lcl, lclLower;
		for (var ii = 0, jj = preferences.length; ii < jj; ii++) {
			lcl = preferences[ii].code;
			lclLower = lcl.toLowerCase();
			var value = {
				$title: preferences[ii].description,
				$locale: lcl
			};
			if ($pageLocalization[lclLower] && $pageLocalization[lclLower][$titleKey]) {
				// Following SAM 114170, if translation on locale "xx-yy" exists, it replaces the one on "xx-YY".
				if (!$pageLocalization[lcl]) {
					$pageLocalization[lcl] = {};
				}
				$pageLocalization[lcl][$titleKey] = $pageLocalization[lclLower][$titleKey];
				delete $pageLocalization[lclLower][$titleKey];
				if ((Object.keys($pageLocalization[lclLower])).length == 0) {
					delete $pageLocalization[lclLower];
				}
			}
			if ($pageLocalization[lcl]) {
				value.$value = $pageLocalization[lcl][$titleKey];
			}
			$values.push(value);
		}
		var page = new TranslationPage();
		page.load({
			$values: $values
		});
		syra_over.renderPageModal(page, {
			authoringDisabled: true,
			onValidate: function(page) {
				syra_form.validate(page);
				_updatePageLocalization(section.page, $titleKey, page.$values);
				section.setTitle(section.$item.$title);
				field.setValue(section.getTitle());
				field.page.saveDesign(); //page is designer
				return true;
			}
		});
	});
}

exports.setSectionTitleEditor = function(field, section) {
	field.localizedSection = section;
	_ensureLocalizeItemId(section.$item);
	field.setValue(section.isTitleUnlocalized ? "" : section.getTitle());
};

exports.onSectionTitleEditorChange = function(field, value) {
	var section = field.localizedSection;
	_setPageLocalizationEntry(section.page, _extractTitleKey(section.$item.$title), value);
	section.setTitle(section.$item.$title);
};
exports.onMenuClick = function(options) {
	if (options.scope.localizedSection) {
		_localizeSectionTitle(options.scope, options.menu);
	} else {
		_localizeFieldValue(options.scope, options.menu);
	}
};


exports.getLocalizeText = function(article, text) {
	if (text && text.length > 0 && text[1] == "@") {
		text = syra_expression.parse(article, text);
	}
	return text;
};


function _clickPicker() {
	exports.onMenuClick({
		scope: this.parent,
		menu: this.parent.$menus.$localize
	});
}

exports.addPicker = function(field, $menu) {
	if (field.$item.$useLocalizePicker) {
		$menu.$isHidden = true;
	}
	if (field.$isEditMode && !field.picker_localize && field.$item.$useLocalizePicker) {
		syra_button.addFieldPicker({
			parent: field,
			pickerId: "$localize",
			fontIcon: "localize",
			text: field.$menus.$localize.$title,
			click: _clickPicker
		});
	}
	$menu.$isPopup = true;
};