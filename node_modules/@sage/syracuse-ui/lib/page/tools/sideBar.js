"use strict";
var helpers = require('@sage/syracuse-core').helpers;

function _getDefaultSate(key) {
	var state;
	if (syra_site.isTabletDevice) {
		state = {
			convergenceBar: {
				$isFloating: true,
				$isCollapsed: true
			},
			menuBar: {
				$isCollapsed: !syra_context.browser.landscape
			}
		}[key];
	}
	return state || {
		$isCollapsed: false
	};
}

function SideBar() {}

exports.SideBar = helpers.defineClass(SideBar, null, {
	getSideName: function() {
		return this.options.leftSide ? "left" : "right";
	},
	load: function(page) {
		var self = this;
		self.articleParent = page;
		if (!self.id) {
			self.id = page.id + "-" + (++page._childItemOffset);
		}
		syra_item.register(self);
		self.closeWidth = 100;
		self.minWidth = self.minWidth || 200;
		self.page = page;
		self._appplyPreferences();
		self.options.leftSide = self.options.leftSide !== false;
		self.slot.className += " s-bar-slot s-bar-slot-" + self.getSideName();
		if (self.$width != undefined && parseInt(self.$width) <= self.closeWidth) {
			delete self.$width;
		}

		self.resizePicker = syra_dom.div(self.options.$skin + "-resizer s-bar-resizer-" + self.getSideName());
		self.openButton = syra_button.add({
			parent: self,
			slot: self.resizePicker,
			text: syra_local.bar_collapse,
			css: self.options.$skin + "-opener s-bar-opener",
			iconOnly: true,
			shortCutTip: (self.options.leftSide ? syra_shortcut.tip.hideLeftBar : syra_shortcut.tip.hideRightBar) + ", " + syra_shortcut.tip.hideFull,
			fontIcon: self.getSideName() + "_arrow",
			click: function() {
				self.collapse();
			}

		});
		self.slot.appendChild(self.resizePicker);

		self.draggable = syra_drag.add({
			sideBar: self,
			handle: self.resizePicker,
			exclude: [self.openButton.link],
			delay: true,
			start: function() {
				document.body.style.cursor = "e-resize";
				syra_dom.getBoundingClientRect(this.sideBar.slot, this);
				this.isLeftDirection = this.sideBar.options.leftSide;
				if (syra_dom.rtl.on) {
					this.isLeftDirection = !this.isLeftDirection;
				}
				this.resizerRect = this.sideBar.resizePicker.getBoundingClientRect();
				if (this.sideBar.$isCollapsed) {
					this.sideBar.ensureState(true);
				}
			},
			drag: function(event) {
				if (this.resizerRect && (event.pageY >= this.top) && (event.pageY <= this.bottom)) {
					var newWidth = this.width + (this.isLeftDirection ? (event.pageX - this.resizerRect.left) : (this.resizerRect.left - event.pageX));
					if (newWidth > 0) {
						this.sideBar.resizeSplitter(this.newWidth = newWidth);
					}
				}
			},
			stop: function() {
				document.body.style.cursor = "default";
				var newWidth = this.sideBar.slot.clientWidth;
				if (newWidth <= this.sideBar.closeWidth) {
					this.sideBar.$isCollapsed = true;
					this.sideBar.ensureState();
				} else {
					this.sideBar.$width = this.sideBar.slot.clientWidth;
				}
				this.sideBar.savePreferences();
				this.sideBar.page.resizeItem(true);
			}
		});

		self.slot.appendChild(self.body);
		self.page.bars.push(self);
		self.ensureState();
	},
	_appplyPreferences: function() {
		var defaultState = _getDefaultSate(this.preferenceKey || this.pagePreferenceKey);
		var pref;
		if (this.preferenceKey) {
			pref = localStorage.getItem(this.preferenceKey);
			pref = pref && JSON.parse(pref);
		} else {
			pref = this.pagePreferenceKey && syra_preference.page.get(this.page, this.pagePreferenceKey);
		}
		pref = pref || {};
		this.$width = pref.$width;
		this.$isCollapsed = !!pref.$isCollapsed;
		this.$isFloating = this.options.$isFloating;
	},
	resizeSplitter: function(newWidth) {
		if (!this.designing) {
			if (!this.options.isAutoModeDisabled) {
				if (this.isSmall != syra_site.getSize().isSmall) {
					this.isSmall = syra_site.getSize().isSmall;
					this.$isCollapsed = this.isSmall;
				}
			}
			if (!newWidth) {
				this.ensureState();
			}
			if (this.slot.parentNode) {
				if (newWidth !== undefined) {
					this.slot.style.width = newWidth + "px";
					this.slot.style.minWidth = newWidth + "px";
				}
			}
		}
	},
	toggleBar: function(show) {
		syra_dom.hide(this.slot, this.isHidden = !show);
	},
	ensureState: function(startResize) {
		if (!this.isHidden) {
			if (startResize && this.$isCollapsed) {
				this.curCollapsedState = this.$isCollapsed = false;
				delete this.$width;
				this.slot.style.width = this.slot.clientWidth + "px";
				this.slot.style.minWidth = this.slot.clientWidth + "px";
				syra_dom.hide(this.body, false);
			} else {
				if (this.curCollapsedState != this.$isCollapsed) {
					if (this.$isCollapsed) {
						syra_dom.hide(this.body, true);
						this.slot.style.width = "";
						this.slot.style.minWidth = "";
					} else {
						this.$isCollapsed = false;
						this.slot.style.width = Math.max(this.$width || 0, this.minWidth) + "px";
						this.slot.style.minWidth = Math.max(this.$width || 0, this.minWidth) + "px";
						syra_dom.hide(this.body, false);
					}
					this.curCollapsedState = this.$isCollapsed;
				}
			}
			syra_dom.toggleClass(this.slot, "s-close", this.$isCollapsed);
			if (this.resizePicker) {
				var icon = this.getSideName();
				if (this.$isCollapsed) {
					icon = icon == "left" ? "right" : "left";
				}
				syra_button.setText(this.openButton, this.$isCollapsed ? syra_local.bar_expand : syra_local.bar_collapse, icon + "_arrow");
			}
		}
	},
	collapse: function() {
		this.$isCollapsed = !this.$isCollapsed;
		if (this.page.modalHost) {
			this.page.modalHost.dialog.style.width = this.page.modalHost.width + "px"; //fix the width
		}
		this.savePreferences();
		this.ensureState();
		this.page.resizeItem(true);
	},
	clearPreferences: function() {
		var key = this.preferenceKey || this.pagePreferenceKey;
		if (key) {
			localStorage.removeItem(this.preferenceKey);
			delete this.$width;
			delete this.$isCollapsed;
			this.ensureState();
			this._appplyPreferences();
		}
	},
	savePreferences: function(key) {
		if (this.preferenceKey) {
			localStorage.setItem(this.preferenceKey, JSON.stringify({
				$width: this.$width,
				$isCollapsed: this.$isCollapsed
			}));
		} else {
			if (this.pagePreferenceKey) {
				var preference = syra_preference.page.get(this.page, this.pagePreferenceKey) || {};
				preference.$width = this.$width;
				preference.$isCollapsed = this.$isCollapsed;
				syra_preference.page.save(this.page, this.pagePreferenceKey, preference);
			}
		}
	},
	dispose: function() {
		this.draggable && this.draggable.dispose();
		var bars = this.page && this.page.bars;
		if (bars) {
			var index = bars.indexOf(this);
			if (index >= 0) {
				bars.splice(index, 1);
			}
		}
		this.$isFloating && syra_dom.remove(this.slot);
		syra_site.disposeObject(this);
	}
});