"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var DesktopPage = require("@sage/syracuse-ui/lib/page/desktopPage").DesktopPage;

function _alertSummary(page, show) {
	if (!page.unitDiagnosesSlot) {
		page.unitDiagnosesSlot = syra_dom.div("s_uitest_unit_diags");
		page.rightCol.insertBefore(page.unitDiagnosesSlot, page.rightCol.firstChild);
	}
	if (show !== false) {
		syra_dom.empty(page.unitDiagnosesSlot);
		var summary = {
			success: {
				count: 0
			},
			error: {
				count: 0
			}
		};
		page.units.forEach(function(unit) {
			if (unit.assertResult) {
				unit.assertResult.forEach(function(assert) {
					if (assert) {
						if (assert.success) {
							summary.success.count++;
						} else {
							summary.error.count++;
						}
					}
				});
			}
		});
		if (summary.success.count) {
			syra_button.add({
				isIndicator: true,
				parent: page,
				slot: page.unitDiagnosesSlot,
				text: summary.success.count + " success",
				css: "s_info s_alert_largefield_diagnoses",
				fontIcon: "info"
			});
		}
		if (summary.error.count) {
			syra_button.add({
				isIndicator: true,
				parent: page,
				slot: page.unitDiagnosesSlot,
				text: summary.error.count + " error(s)",
				css: "s_error s_alert_largefield_diagnoses",
				fontIcon: "diagnose"
			});
		}
	}
	syra_dom.hide(page.unitDiagnosesSlot, show === false);
}

function _onUnitClick() {
	var page = this.parent;
	var unit = page.units[this.unitIndex];
	_alertSummary(page, false);
	setTimeout(function() {
		page.runUnit(unit);
		_alertSummary(page);
	}, 10);
}

function _addUnitTests(page, scenarios) {
	page.runUnits = function() {
		var self = this;
		self.units.forEach(function(unit) {
			try {
				self.runUnit(unit);
			} catch (error) {
				unit.assertResult = unit.assertResult || [];
				unit.assertResult.push({
					success: false,
					message: error.message + " " + error.stack
				});
			}
		});
		_alertSummary(self);
		return self.units;
	};
	page.runUnit = function(unit) {
		console.group(unit.$title);
		unit.reset();
		unit.run(this);
		console.groupEnd();
	};


	page.units = [];
	var blockCss = "s_uitest_menus",
		menuCss = "s_uitest_unit_mn";
	if (page.$menuOrientation == "horizontal") {
		blockCss += "-horiz";
		menuCss += "-horiz";
	}


	page.refreshData &&
		syra_button.add({
			parent: page,
			slot: page.rightCol,
			text: "Refresh",
			css: menuCss + "-horiz",
			click: function() {
				this.parent.refreshData();
			}
		});

	syra_button.add({
		parent: page,
		slot: page.rightCol,
		text: "Reset Units",
		css: menuCss + "-horiz",
		click: function() {
			_alertSummary(this.parent, false);
			this.parent.units.forEach(function(unit) {
				unit.reset();
			});
		}
	});
	syra_button.add({
		parent: page,
		slot: page.rightCol,
		text: "Run Unit",
		css: menuCss + "-horiz",
		click: function() {
			this.parent.runUnits();
		}
	});

	var names = scenarios && Object.keys(scenarios);
	if (names && names.length) {
		names.forEach(function($name) {
			var block = syra_dom.div(blockCss);
			var scenario = scenarios[$name]();
			scenario.forEach(function(unit) {
				unit.page = page;
				unit.$title = unit.$title || $name;
				unit.button = syra_button.add({
					parent: page,
					slot: block,
					text: unit.$title || "",
					css: menuCss,
					click: _onUnitClick,
					unitIndex: page.units.length
				});
				unit.applyChange = function(delta) {
					if (delta.$isPartialDelta) {
						page.isFusionPage = true;
					}
					page.refreshData();
					page.$isEditMode = true; //ensure delta
					page.applyChange(delta);
					page.$isEditMode = false;
					delete page.isFusionPage;
				};
				unit.reset = function() {
					delete this.assertResult;
					if (this._diagnosesSlot) {
						syra_dom.empty(this._diagnosesSlot);
						this._diagnosesSlot.style.display = "none";
					}
				};
				unit.assert = function(success, message) {
					this.assertResult = this.assertResult || [];
					this.assertResult.push({
						success: success,
						message: message = (message || this.$title)
					});
					var $severity = success ? "info" : "error";
					if (!this._diagnosesSlot) {
						this._diagnosesSlot = syra_dom.div("s_uitest_unit_diags");
						this.button.link.parentNode.insertBefore(this._diagnosesSlot, this.button.link.nextSibling);
					}
					this._diagnosesSlot.style.display = "";
					syra_button.add({
						isIndicator: true,
						parent: this,
						slot: this._diagnosesSlot,
						text: message,
						css: "s_" + $severity + " s_alert_largefield_diagnose",
						fontIcon: $severity == "info" ? $severity : "diagnose"
					});
				};
				page.units.push(unit);
			});
			page.rightCol.appendChild(block);
		});
	}
};

function TestPage() {}

exports.TestPage = helpers.defineClass(TestPage, DesktopPage, {
	addBox: function($title) {
		var box = {
			slot: syra_dom.div("s_section"),
			body: syra_dom.div("s_section_body"),
		};
		if ($title) {
			box.head = syra_dom.div("s_section_header", box.slot);
			syra_dom.text("s_section_title", $title, box.head);
		}
		box.slot.appendChild(box.body);
		return box;
	},
	addCol: function(slot, width) {
		return syra_dom.div("col-lg-" + width, slot);
	},
	addFieldBlock: function(root, $title, $binds, callback) {
		var box = this.addBox($title, "h2");
		root.appendChild(box.slot);
		var row = syra_dom.div("row", box.body);
		var left = this.addCol(row, 6);
		var right = this.addCol(row, 6);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $edit = {
				$bind: $binds[ii],
				$isEditMode: true
			};
			var $read = {
				$bind: $binds[ii]
			};
			callback && callback($edit, $read);
			this.addItem(left, $edit);
			this.addItem(right, $read);
		}
	},
	load: function(initData) {

		var self = this;
		self.$isTitleHidden = true;
		self.isMenuBarDisabled = self.isAutoInsertFieldDisabled = true;
		syra_pageBuilder.initialize(self);
		self.$prototype.$properties = self.$prototype.$properties || {};
		DesktopPage.prototype.load.call(self, initData);
		var row = syra_dom.div("row", self.layoutContent.domItem);
		self.leftCol = self.addCol(row, 9);
		self.rightCol = self.addCol(row, 3);
		require.async("@sage/syracuse-ui/lib/tests/pages/" + self.$prototype.$testName, function(err, module) {
			if (err && err.message) {
				syra_alert.error(err.message);
			} else {
				self.testCase = self.$prototype.$testCategory ? module[self.$prototype.$testCategory] : module;
				self.testCase.load(self, function() {
					_addUnitTests(self, module.scenarios);
					self.refreshData && self.refreshData();
					self.resizeItem(true);
					syra_quality.page_onAfterLoad(self);
				});
			}
		});

	}
});