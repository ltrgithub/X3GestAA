"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var ChildFieldRecord = require('./childFieldRecord').ChildFieldRecord;


function ChildField() {}

exports.ChildField = helpers.defineClass(ChildField, null, {
	load: function(initData) {
		syra_article.add(this);
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-array-";
		this.isChildField = true;
		this.$skin = this.$item.$skin || "s-child";
		this.$fields = this.$prototype.$item.$properties || {};
		syra_fields.ensureEditMode(this);
		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fields[$binds[ii]].$isExcluded) {
					this.$item.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		this.domItem = syra_dom.div(this.$skin + "-field", this.layoutSlot);
		this.domItem.syrainout = this.id;

		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			this.header = syra_dom.header(this.$skin + "-header");
			this.domTitle = syra_dom.label(this.$skin + "-title", this.header);
			this.domItem.appendChild(this.header);
		}

		this._core = this._dataValue = this.domItem;

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);
		this.$item.$cardItem = this.$item.$cardItem || {
			$layout: {
				$items: this.$item.$layout.$items
			}
		};
		this.applyDesignMeta(this.$item, false);

		this.record = new ChildFieldRecord();
		this.record.arrayLevel = "record";
		this.record.isChildFieldRecord = true;
		this.record.isRecordArticle = true;
		this.record.$isEditMode = this.$isEditMode;
		this.record.list = this;
		this.record.$prototype = this.$prototype.$item;
		syra_item.initialize(this.page, this.record, {
			$category: "section",
			$layout: {
				$items: this.$item.$layout.$items
			}
		}, this);
		this.record.load();
		syra_item.bind(this, this.$item.$bind);
		syra_article.endDraw(this, initData);
	},
	onItemInOut: function(on, event, target) {
		syra_button.highlightFieldPickers(this.record, on);
	},
	getState: function() {
		return syra_fields.getState(this);
	},
	setState: function(state) {
		syra_fields.setState(this, state);
		if (this.record && (state.$isReadOnly !== undefined || state.$isDisabled != undefined)) {
			this.record.applyMetaData({
				$isReadOnly: state.$isReadOnly,
				$isDisabled: state.$isDisabled
			});
		}
	},
	applyMetaData: function(metaData) {
		syra_fields.applyMetaData(this, metaData);
		if (metaData.$isReadOnly !== undefined || metaData.$isEditMode !== undefined || metaData.$isDisabled !== undefined) {
			metaData.$item = metaData.$item || {};
			var $props = metaData.$item.$properties = metaData.$item.$properties || {};
			var $binds = Object.keys(this.$prototype.$item.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (!$props[$bind]) {
					$props[$bind] = {};
				}
				if (metaData.$isReadOnly !== undefined) {
					$props[$bind].$isReadOnly = metaData.$isReadOnly;
				}
				if (metaData.$isEditMode !== undefined) {
					$props[$bind].$isEditMode = metaData.$isEditMode;
				}
				if (metaData.$isDisabled !== undefined) {
					$props[$bind].$isDisabled = metaData.$isDisabled;
				}
			}
		}
		if (metaData.$item) {
			if (metaData.$item.$diagnoses !== undefined) {
				syra_alert.show(metaData.$item.$diagnoses, this);
			}
			this.record.applyChange(metaData.$item);
		}
	},
	setValue: function(value, metaData) {
		this.ensureDataSet();
		metaData && this.applyMetaData(metaData);
		if (value !== undefined) {
			if (value === null) {
				value = {};
				var $binds = Object.keys(this.$fields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					value[$binds[ii]] = null;
				}
			}
			this.record.applyChange(value);
		}
	},
	getValue: function() {
		return this.ensureDataSet();
	},
	applyMenusChange: function(metaData) {
		metaData && syra_menus.applyChange(this.record, {
			$links: metaData.$links,
			$actions: metaData.$actions
		});
	},
	ensureDataSet: function() {
		this.dataset = this.articleParent.dataset[this.$item.$bind];
		if (this.$item.$variantItemKey && this.dataset) {
			this.dataset = this.dataset[this.$item.$variantItemKey];
		}
		if (!this.dataset) {
			this.dataset = {};
		}
		return this.currentValue = this.dataset;
	},
	ensureLayoutMode: function() {
		this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
	},
	showField: function(show) {
		syra_fields.showField(this, show);
	},
	addTitle: function(isDesignMeta) {
		syra_fields.addTitle(this, isDesignMeta);
	},
	getTitle: function() {
		return syra_fields.getTitle(this);
	},
	setTitle: function($title) {
		syra_fields.setTitle(this, $title);
		if (this.domTitle) {
			syra_dom.hide(this.domTitle, this.getTitle().length == 0);
		}
	},
	setDescription: function($description) {
		syra_fields.setDescription(this, $description);
	},
	applyCustomStyle: function(metaData) {
		syra_fields.applyCustomStyle(this, metaData);
	},
	applyDesignMeta: function(metaData, designing) {
		return syra_fields.applyDesignMeta(this, metaData, designing);
	},
	onFieldInputEvent: function() {

	},
	invalidateField: function(errors, noViewer) {
		syra_fields.invalidateField(this, errors, noViewer);
	},
	dispose: function() {
		syra_dom.empty(this._core);
		syra_article.dispose(this);
	}
});