"use strict";

function _openNode(tree, record, open) {
	//for commit after merge
	var $bindings = tree.list.$prototype.$treeview.$bindings;
	var node = tree._nodes[record.dataset[$bindings.$id || $bindings.$clientId] || "s-empty"];
	if (open !== undefined && open === node.isOpened) {
		return;
	} else {
		node.isOpened = !node.isOpened;
		if ($bindings.$open) {
			record.dataset[$bindings.$open] = node.isOpened ? tree.openValues.opened : tree.openValues.closed;
		}
	}
	syra_button.setText(record.treeNode.expandBtn, "", node.isOpened ? "node_expanded" : "node_collapsed");
	_displayChildren(tree.list, node, node.isOpened, node.children);
}


function _displayChildren(list, parentNode, isParentOpened, uuids) {
	if (parentNode.childRoot) {
		syra_dom.hide(parentNode.childRoot, !isParentOpened);
	}
	for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
		var record = list.recordsMap[uuids[ii]];
		syra_dom.hide(record.dataRow, !(record.treeNode.isVisible = isParentOpened));
		if (record.treeNode.children.length) {
			_displayChildren(list, record.treeNode, record.treeNode.isOpened && isParentOpened, record.treeNode.children);
		}
	}
}

function _addIcon(tree, record, $iconBind) {
	var name = record.dataset[$iconBind];
	var node = record.treeNode;
	if (name) {
		if (!node.icon) {
			node.icon = syra_dom.div(tree.cssNodeIcon);
			node.item.insertBefore(node.icon, node.desc);
		}
		if (node.iconName != name) {
			node.iconName = name;
			node.icon.style.backgroundImage = "url('" + syra_config.$iconPath + "tree/" + name + "')";
		}
	} else {
		if (node.icon) {
			syra_dom.remove(node.icon);
			delete node.icon;
			delete node.iconName;
		}
	}
}

function _drawRecord(tree, parentNode, record, level) {
	var node = record.treeNode;
	var hasChildren = node.children.length > 0;
	var skinLevel = tree.list.$item.$addTreeLevel ? (" " + tree.list.$skin + "-level-" + level) : null;
	var isFusionTree = tree.list.$field && tree.list.$field.$isFusionNavigationList;
	var isLazyLoad = tree.list.$item.$isNodeLazyLoad;
	tree._orderedNodes.push(record);
	if (tree.isCardFormat) {
		if (hasChildren) {
			if (!node.childRoot) {
				node.childRoot = document.createElement("div");
				node.childRoot.className = tree.list.$skin + "-children";
				if (skinLevel) {
					node.childRoot.className += skinLevel;
				}
				record.domItem.appendChild(node.childRoot);
				syra_dom.hide(node.childRoot, true);
			}
		}
		if (parentNode && parentNode.childRoot) {
			parentNode.childRoot.appendChild(record.dataRow);
		} else {
			tree.list.body.appendChild(record.dataRow);
		}
	} else {
		record.fixedRow && tree.list.builder.fixedTable.bodyTable.appendChild(record.fixedRow);
		tree.list.builder.scrollTable.bodyTable.appendChild(record.dataRow);
	}
	record.treeNode.level = level;
	if (tree.list.selector.appendToRecord) {
		if (tree.list.selector.isMulti) {
			if (!record.checkBox) {
				tree.list.selector.appendToRecord(record, record.treeNode.selectorSlot);
				syra_dom.hide(record.treeNode.selectorSlot, false);
			}
		} else {
			if (hasChildren) {
				if (record.checkBox) {
					syra_dom.remove(record.checkBox.slot);
					delete record.checkBox;
					syra_dom.hide(record.treeNode.selectorSlot, true);
				}
			} else {
				if (!record.checkBox) {
					tree.list.selector.appendToRecord(record, record.treeNode.selectorSlot);
					syra_dom.hide(record.treeNode.selectorSlot, false);
				}
			}
		}
	}
	if (hasChildren || (isLazyLoad && isFusionTree)) {
		syra_button.setText(record.treeNode.expandBtn, "", node.isOpened ? "node_expanded" : "node_collapsed");
		if (node.childRoot) {
			syra_dom.hide(node.childRoot, !node.isOpened);
		}
	}
	syra_button.hide(record.treeNode.expandBtn, (isLazyLoad && isFusionTree) ? false : !hasChildren);

	var padding = 0;
	var $bindings = tree.list.$prototype.$treeview.$bindings;
	$bindings.$icon && _addIcon(tree, record, $bindings.$icon);
	if (parentNode) {
		node.isVisible = parentNode.isVisible && parentNode.isOpened;
		if (!tree.list.$item.$isNodeLazyLoad && !hasChildren && record.treeNode.icon) {
			padding = 22;
		}
	} else {
		node.isVisible = (node.parentId == null) || (node.parentId == "");
	}
	syra_dom.hide(record.dataRow, !node.isVisible);
	record.treeNode.slot.style[syra_dom.rtl.on ? "paddingRight" : "paddingLeft"] = (record.treeNode.level * 22) + padding + "px";
	if (skinLevel) {
		record.dataRow.className += skinLevel;
		record.treeNode.slot.className += skinLevel;
		record.treeNode.item.className += skinLevel;
	}
	if (hasChildren) {
		for (var ii = 0, jj = node.children.length; ii < jj; ii++) {
			var child = tree.list.recordsMap[node.children[ii]];
			child && _drawRecord(tree, node, child, level + 1);
		}
	}
}

function _onNodeClick(event) {
	var record = this.parent;
	var list = record.list;
	list.page.externalAdapter.onFieldClickPicker({
		field: record,
		pickerType: "openTreeNode",
		doEvent: function() {
			if (record && record.treeNode) {
				_openNode(list.treeDecorator, record);
				if (event.ctrlKey)
					_openAllRecursive(list, record.treeNode.children, record.treeNode.isOpened);
				list.treeDecorator._validateDisplay();
				list.resizeItem(true);
			}
		}
	});
}

function _openAllRecursive(list, uuids, open) {
	for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
		var record = list.recordsMap[uuids[ii]];
		_openNode(list.treeDecorator, record, open);
		if (record.treeNode.children.length) {
			_openAllRecursive(list, record.treeNode.children, open);
		}
	}
}

function Tree(list) {
	this.list = list;
	this.openValues = this.list.page.isFusionPage ? {
		opened: 2,
		closed: 1
	} : {
		opened: true,
		closed: false
	};
	var $bindings = this.list.$prototype.$treeview.$bindings;
	var $data = $bindings.$data || [];
	var $keys = Object.keys(list.$fields);
	var notEditable = [$bindings.$id, $bindings.$clientId, $bindings.$open, $bindings.$open, $bindings.$icon, $bindings.$parent, $bindings.$description];

	this.cssNodeSelector = "s-tree-selector";
	this.cssNodeCell = $data.length ? "s-tree-cell-datagrid" : "s-tree-cell";
	this.cssNode = "s-tree-node";
	this.cssNodePicker = this.cssNode + "-picker";
	this.cssNodeIcon = this.cssNode + "-icon";
	if (syra_dom.rtl.on) {
		this.cssNodeIcon += " s-rtl-img";
		this.cssNodePicker += " s-rtl-img";
	}
	this.cssNodeDesc = this.cssNode + "-desc";
	this.cssNodeDescValue = this.cssNode + "-desc-value";

	for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
		var $bind = $keys[ii];
		var $field = list.$fields[$bind];
		$field.$isExcluded = $data.indexOf($bind) < 0;
		if (notEditable.indexOf($bind) >= 0) {
			$field.$isEditMode = false;
		}
	}

	//issue #7036
	if ($data.length) {
		if (this.list.$item.$selectMode == undefined) {
			this.list.$item.$selectMode = "row";
		}
	} else {
		this.list.$item.$alternateStyle = false;
	}
}

Tree.prototype._validateDisplay = function() {
	var showAlt = true;
	if (this.list.$item.$alternateStyle) {
		for (var ii = 0, jj = this._orderedNodes.length; ii < jj; ii++) {
			var record = this._orderedNodes[ii];
			if (record.treeNode && record.treeNode.isVisible) {
				showAlt = !showAlt;
				record.alternateStyle(showAlt);
			}
		}
	}
};

Tree.prototype.onNodeSelected = function(record, selected) {
	if (record && record.treeNode) {
		var parendId = record.treeNode.parentId;
		if (parendId && parendId !== "") {
			var parentRecord = this.list.recordsMap[record.treeNode.parentUiid];
			if (parentRecord && this.list.$item && this.list.$item.$selectMode === "multi") {
				var selectParent = selected;
				if (!selectParent) {
					var children = parentRecord && parentRecord.treeNode && parentRecord.treeNode.children;
					if (children) {
						for (var ii = 0, jj = children.length; ii < jj; ii++) {
							var $uuid = children[ii];
							var record = this.list.recordsMap[children[ii]];
							if (record && record.dataset.$isSelected) {
								selectParent = true;
								break;
							}
						}
					}
				}
				this.list.selector.selectRecord(parentRecord, selectParent);
			}
		}
	}
};

var expand = false;

function _addExpandCollapseBtn(list) {
	var icon, title;
	if (expand) {
		icon = "collapse_l";
		title = syra_local.sitemap_collapseAll;
	} else {
		icon = "expand_l";
		title = syra_local.sitemap_expandAll;
	}
	if (!list.toggleExpandBtn) {
		list.toggleExpandBtn = syra_button.add({
			parent: list,
			text: title,
			css: list.$mnPickersCss,
			fontIcon: icon,
			click: function() {
				expand = !expand;
				list.treeDecorator.openAll(expand);
				_addExpandCollapseBtn(list);
			}
		});
		list.topbar.insertBefore(list.toggleExpandBtn.link, list.searcherSlot);
	} else {
		syra_button.setText(list.toggleExpandBtn, title, icon);
	}
}

Tree.prototype.getRecordsCount = function() {
	var count = this.list.records.length;
	if ((count > 0) && this.list.page.isFusionPage && syra_fusion.sapUtil.isEmptyGridDataRecordEx(this.list.$prototype.$item.$properties, this.list.records[count - 1].dataset)) {
		// Unfortunately, in Convergence last line could be inconsistent.
		count--;
	}
	return count;
}
Tree.prototype.endFill = function() {
	this._orderedNodes = [];
	// build tree Map    
	var $bindings = this.list.$prototype.$treeview.$bindings;
	this._nodes = {};
	this.tree = [];
	var recordsCount = this.getRecordsCount();
	_addExpandCollapseBtn(this.list);
	for (var ii = 0; ii < recordsCount; ii++) {
		var record = this.list.records[ii];
		var node = record.treeNode;
		if ($bindings.$open && record.dataset[$bindings.$open] !== undefined) {
			node.isOpened = record.dataset[$bindings.$open] == this.openValues.opened;
		} else {
			node.isOpened = true;
		}
		node.$uuid = record.$uuid;
		node.parentId = record.dataset[$bindings.$parent];
		node.id = record.dataset[$bindings.$id || $bindings.$clientId] || "s-empty";
		node.children = [];
		this._nodes[node.id] = node;
	}

	var selectedNodes = [];
	for (var ii = 0; ii < recordsCount; ii++) {
		var record = this.list.records[ii];
		var node = record.treeNode;
		if (record.dataset.$isSelected) {
			selectedNodes.push(node);
		}
		var parentNode = this._nodes[node.parentId];
		if (parentNode) {
			node.parentUiid = parentNode.$uuid;
			parentNode.children.push(node.$uuid);
		} else {
			this.tree.push(node);
		}
	}
	for (var ii = 0, jj = selectedNodes.length; ii < jj; ii++) {
		var node = selectedNodes[ii];
		while ((node = this._nodes[node.parentId]) && !node.isOpened) {
			node.isOpened = true;
			this.list.recordsMap[node.$uuid].dataset[$bindings.$open] = this.openValues.opened;
		}
	}
	this.isCardFormat = this.list.$item.$format == "cards";
	for (var ii = 0, jj = this.tree.length; ii < jj; ii++) {
		var child = this.list.recordsMap[this.tree[ii].$uuid];
		child && _drawRecord(this, null, child, 0);
	}
	var allColumns = this.list.builder.allColumns;
	if (allColumns) {
		var css = "s-tree-node";
		for (var ii = 0, jj = allColumns.length; ii < jj; ii++) {
			var col = allColumns[ii];
			if (col.$bind && !col.$isHidden) {
				css = "s-tree-grid-node";
				break;
			}
		}
		this.list.builder.columnsMap.$treeview.titleCell.className = this.list.$skin + "-title-cell " + css + "-title-cell";
	}
	this._validateDisplay();
};

Tree.prototype.addCardNode = function(record, slot) {
	var node = record.treeNode = {
		slot: slot,
		item: document.createElement("div")
	};
	var $bindings = this.list.$prototype.$treeview.$bindings;
	node.item.className = this.cssNode;
	node.expandBtn = syra_button.add({
		parent: record,
		slot: node.item,
		isHidden: !this.list.$item.$isNodeLazyLoad,
		text: "",
		css: this.cssNodePicker,
		iconOnly: true,
		fontIcon: this.list.$item.$isNodeLazyLoad ? "node_expanded" : "node_collapsed",
		click: _onNodeClick
	});
	if (this.list.selector.appendToRecord) {
		node.selectorSlot = syra_dom.div(this.cssNodeSelector);
		syra_dom.hide(node.selectorSlot, true);
		node.item.appendChild(node.selectorSlot);
	}
	node.desc = syra_dom.div(this.cssNodeDesc);
	node.descriptionField = record.page.addItem(node.item.appendChild(node.desc), {
		$bind: $bindings.$description,
		$isGridCell: true,
		$inplace: true
	}, record);
	node.descriptionField.isFieldTipDisabled = true; //important avoid trigger tip as managed by node
	node.descriptionField.setState({
		$isHidden: false
	});
	node.descriptionField._dataValue.className += " " + this.cssNodeDescValue;
	node.slot.appendChild(node.item);
};
Tree.prototype.openAll = function(open) {
	for (var ii = 0, jj = this.getRecordsCount(); ii < jj; ii++) {
		_openNode(this, this.list.records[ii], open);
	}
	this.list.resizeItem(true);
};
Tree.prototype.getPrevNextRecord = function(record, next) {
	var index = this._orderedNodes.indexOf(record);
	for (var ii = (next ? Math.min(index + 1, this._orderedNodes.length - 1) : Math.max(index - 1, 0)), jj = (next ? this._orderedNodes.length : -1);
		(next && ii < jj) || (!next && ii > jj);
		(next ? ii++ : ii--)) {
		var record = this._orderedNodes[ii];
		if (record && record.treeNode && record.treeNode.isVisible) {
			return parseInt(record.$serverIndex, 10);
		}
	}
	return index;
};
Tree.prototype.onItemInOut = function(onEnter, event, target) {
	var record = syra_item.findRecord(this.list, event.target);
	var node = record && record.treeNode;
	if (onEnter) {
		if (node && syra_dom.isParent(node.slot, event.target)) {
			if (node.slot.scrollWidth != node.slot.clientWidth) {
				var tip = syra_dom.div("s-tree-node-tip");
				node.icon && tip.appendChild(node.icon.cloneNode(true));
				syra_dom.div("s-tree-node-desc", tip).textContent = node.desc.textContent;
				syra_tip.fieldTip.showNode(tip, node.item);
			}
		}
	} else {
		syra_tip.fieldTip.clear();
	}
};
exports.add = function(list) {
	list.treeDecorator = new Tree(list);
};