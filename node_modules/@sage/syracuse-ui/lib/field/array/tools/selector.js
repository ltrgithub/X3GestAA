"use strict";

var _modes = {
	none: function(selector) {},
	multi: function(selector) {
		selector.isMulti = true;
		if (selector.list.$item.$selectByRow) {
			selector.isRowMode = true;
		} else {
			selector.useColumnSelector = !selector.list.$item.$selectByRowIndex && !selector.list.$prototype.$treeview;
			selector.isRowMode = !selector.list.$isEditMode && selector.useColumnSelector;
		}
		selector.appendToRecord = function(record, slot) {
			this.addCheckBox(record, slot, true);
		};
	},
	single: function(selector) {
		selector.useColumnSelector = !selector.list.$item.$selectByRowIndex && !selector.list.$prototype.$treeview;
		selector.isRowMode = !selector.list.$isEditMode && selector.useColumnSelector;
		selector.appendToRecord = function(record, slot) {
			this.addCheckBox(record, slot, false);
		};
	},
	button: function(selector) {
		selector.useColumnSelector = true;
		selector.text = syra_local.flSelect || "Select";
		selector.appendToRecord = function(record, slot) {
			slot.className += " s-record-selector-btn-slot";
			syra_button.add({
				parent: record,
				slot: slot,
				text: this.text,
				css: "s-record-selector-btn",
				click: function(event, target) {
					this.parent.onSelectorClick(event, target);
				}
			});
		};
	},
	row: function(selector) {
		selector.isRowMode = true;
	}
};

function _onMultiSelect(selector, targetRecord, unselectable) {
	var records = selector.list.records;
	var range = _getRange(selector, targetRecord);
	if (range) {
		if (range.targetIndex <= range.firstIndex) {
			for (var ii = range.targetIndex; ii < range.firstIndex; ii++) {
				selector.selectRecord(records[ii], true);
			}
			for (ii = range.firstIndex + 1; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii], false);
			}
		} else {
			for (var ii = range.firstIndex; ii <= range.targetIndex; ii++) {
				!records[ii].$isSelected && selector.selectRecord(records[ii], true);
			}
			for (ii; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii], false);
			}
		}
		if (targetRecord.checkBox && !targetRecord.checkBox.input.checked) {
			syra_fields.checkbox.setValue(targetRecord, true);
		}
	}
}



function _onSelectAll(selector, isSelected, unselectable) {
	selector.records = {};
	var records = selector.list.records;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var record = records[ii];
		if (!(unselectable &&
				unselectable(selector.list, {
					uuid: record.$uuid
				}))) {
			selector.selectRecord(record, isSelected);
		}
	}
}

function _getRange(selector, targetRecord) {
	var records = selector.list.records;
	var sels = selector.getSelectedList();
	if (sels.length) {
		return {
			firstIndex: records.indexOf(sels[0]),
			lastIndex: records.indexOf(sels[sels.length - 1]),
			targetIndex: records.indexOf(targetRecord)
		};
	}
	return null;
}

function _ensureContiguousSelection(selector, targetRecord) {
	var range = _getRange(selector, targetRecord);
	if (range) {
		var records = selector.list.records;
		if (range.targetIndex < (range.firstIndex - 1) || range.targetIndex > (range.lastIndex + 1)) {
			//out of range clear all
			for (var ii = range.firstIndex; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii], false);
			}
		} else {
			if ((range.targetIndex > range.firstIndex) || (range.targetIndex < range.lastIndex)) {
				for (var ii = range.targetIndex + 1; ii <= range.lastIndex; ii++) {
					selector.selectRecord(records[ii], false);
				}
			}
		}
	}
}

function _onSelectOn(selector, targetRecord, isSelected) {
	if (selector.isMulti && selector.$useContiguousSelection) {
		//_ensureContiguousSelection(selector, targetRecord);
		var range = _getRange(selector, targetRecord);
		if (range) {
			var records = selector.list.records;
			if (range.targetIndex < range.firstIndex || range.targetIndex > range.lastIndex) {
				//out of range clear all
				for (var ii = range.firstIndex; ii <= range.lastIndex; ii++) {
					selector.selectRecord(records[ii], false);
				}
			} else {
				if ((range.targetIndex > range.firstIndex) || (range.targetIndex < range.lastIndex)) {
					for (var ii = range.targetIndex + 1; ii <= range.lastIndex; ii++) {
						selector.selectRecord(records[ii], false);
					}
				}
			}
		}
	}
	selector.selectRecord(targetRecord, isSelected !== false);
}

exports.onSelectorClick = function(list, event) {
	var selector = list.selector;
	var record = syra_item.findRecord(list, event.target);
	if (selector.$mode == "none") {
		record && list.builder.showOutCard && list.builder.showOutCard(record);
	} else {
		var host = record || list;
		var checkBox = host.checkBox;
		checkBox = checkBox && checkBox.input;
		if (selector.isRowMode && checkBox && checkBox != event.target) {
			checkBox.checked = !checkBox.checked;
		}
		if (!checkBox || selector.isRowMode || checkBox == event.target) {
			var uuidTarget = record && record.$uuid;
			var isSelected = (checkBox || event.target).checked !== false;
			if (list.$item.$selectByRowIndex || list.$item.$selectByRow) {
				isSelected = selector.isMulti ? !selector.records[uuidTarget] : true; //byrowIndex => single always true else toggle
			}
			checkBox && syra_fields.checkbox.setValue(host, isSelected);
			list.page.externalAdapter.onSelectRecordEvent({
				field: list,
				event: event,
				uuidTarget: uuidTarget,
				isSelected: isSelected,
				hasEscapeRowButton: record && record._hasEscapeRowButton,
				doEvent: function(unselectable) {
					if (!event.shiftKey && !selector.isMulti) {
						var sels = selector.getSelectedList();
						for (var ii = 0, jj = sels.length; ii < jj; ii++) {
							if (sels[ii] != record) {
								selector.selectRecord(sels[ii], false);
							}
						}
					} else {
						document.getSelection().removeAllRanges();
					}
					if (!record) {
						_onSelectAll(selector, isSelected, unselectable);
					} else {
						if (event.shiftKey) {
							_onMultiSelect(selector, record, unselectable);
						} else {
							_onSelectOn(selector, record, isSelected);
						}
					}
					list.page.onSelectRecord && list.page.onSelectRecord(selector.records, record, isSelected);
					list.selectorCard && list.selectorCard.onSelectRecord(selector.records);
				}
			});
			return true;
		}
	}
};


function Selector(list) {
	this.list = list;
	this.$useContiguousSelection = list.$field.$useContiguousSelection || list.$item.$useContiguousSelection;
	this.records = {};
	_modes[this.$mode = (list.$item.$selectMode || "none")](this);
}

Selector.prototype.onItemInOut = function(host, on, event) {
	if (host.checkBox && (!event || event.target == host.checkBox.icon)) {
		syra_dom.toggleClass(host.checkBox.icon, "s-enter", on);
	}
};
Selector.prototype.onFieldInputEvent = function(host, event) {
	switch (event.type) {
		case "focusin":
		case "focusout":
			var on = event.type == "focusin";
			if (host.checkBox && event.target == host.checkBox.input) {
				syra_dom.toggleClass(host.checkBox.icon, "s-focus", on);
			}
			break;
	}
};
Selector.prototype.addCheckBox = function(record, slot, isCheck) {
	var host = record || this.list;
	syra_fields.checkbox.render(host, host.id + "-recordSelector", "", !isCheck);
	host.checkBox.slot.className += " s-record-selector-check";
	slot.className += " s-record-selector-slot";
	host.checkBox.icon.syrainout = host.id;
	host.checkBox.slot.syraOnClick = "onSelectorClick";
	host.checkBox.input.syraIsSelector = true;
	host.checkBox.input.syraItem = host.checkBox.input.syraOnInput = host.id;
	slot.appendChild(host.checkBox.slot);
};
Selector.prototype.getSelectedRecord = function() {
	return (this.selectedRecord && this.selectedRecord.getRecordIndex() >= 0) ? this.selectedRecord : null;
};
Selector.prototype.getSelectedList = function() {
	var sels = [];
	var records = this.list.records;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		records[ii].$isSelected && sels.push(records[ii]);
	}
	return sels;
};
Selector.prototype.clear = function() {
	this.records = {};
	delete this.selectedRecord;
};
Selector.prototype.unSelectAll = function() {
	for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
		var record = this.list.records[ii];
		record.$isSelected && this.selectRecord(record, false);
	}
};
Selector.prototype.selectRecord = function(record, selected) {
	if (record) {
		if (!this.isMulti && selected) {
			if (this.selectedRecord && !this.selectedRecord.disposed && this.selectedRecord.$uuid != record.$uuid) {
				this.selectRecord(this.selectedRecord, false);
			}
		}
		var dataset;
		if (selected) {
			record.list.focusedRecord = record;
		}
		if (record.list.builder.record_onSelect) {
			record.list.builder.record_onSelect(record, selected);
		} else {
			if (record.checkBox) {
				record.checkBox && syra_fields.checkbox.setValue(record, selected);
			} else {
				syra_dom.toggleClass(record.domItem, "s-record-selected", selected);
			}
			if (selected && !record.list.selector.isMulti) {
				record.scrollToRecord();
			}
		}
		dataset = syra_dataset.ensure(record);
		record.$isSelected = selected;
		if (selected && dataset) {
			this.records[record.$uuid] = this.selectedRecord = record;
			dataset.$isSelected = true;
		} else {
			delete this.selectedRecord;
			delete this.records[record.$uuid];
			if (dataset) {
				delete dataset.$isSelected;
			}
		}
		if (this.list) {
			if (selected && !(this.list.$field.$isFusionNavigationList || this.list.$item.$selectorCard)) {
				syra_site.checkUniqueSelection(this.list);
				syra_site.selectedList = this.list;
			}
			this.list.selectorCard && this.list.selectorCard.onSelect(record, selected);
			this.list.treeDecorator && this.list.treeDecorator.onNodeSelected(record, selected);
		}
	}
};
Selector.prototype.applyChange = function(record, $isSelected) {
	if (this.list) {
		if (record.isArticleLoaded) {
			_onSelectOn(this, record, $isSelected);
		} else {
			this.selectRecord(record, $isSelected);
		}
	}
};


exports.add = function(list) {
	syra_site.disposeObject(list.selector);
	list.selector = new Selector(list);
};