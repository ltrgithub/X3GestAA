"use strict";

exports.add = function(list, handle) {
	self.draggable = syra_drag.add({
		list: list,
		handle: handle,
		mousedown: function(event) {
			if (event.target.syraSortableHandle == this.list.id) {
				var record = syra_item.findRecord(this.list, event.target);
				if (record) {
					this.recordSource = record;
					return true;
				}
			}
		},
		start: function() {
			this.info = syra_dom.text("s_sortable_info_ok", syra_local.flMoveItem, syra_site.siteApp);
			this.cue = syra_dom.div("s_sortable_cue", syra_site.siteApp);
			var zIndex = syra_over.bindZindex();
			this.info.style.zIndex = zIndex;
			this.cue.style.zIndex = zIndex;
			this.boundary = this.handle.getBoundingClientRect();
			this.scrollViewRect = syra_dom.getBoundingClientRect(this.recordSource.list.page.scrollview);
			this.scrollViewRect.item = this.recordSource.list.page.scrollview;
			this.scrollViewRect.scrollWidth = this.scrollViewRect.item.scrollWidth;
			this.scrollViewRect.scrollHeight = this.scrollViewRect.item.scrollHeight;
		},
		drag: function(event) {
			if (event.target && this.handle.contains(event.target)) {
				var target = event.target;
				while (target && target != this.handle) {
					if (target.syraItem !== undefined) {
						var record = syra_item.findRecord(this.list, target);
						if (record) {
							this._dragNode(event, record);
							event.stopPropagation();
							return;
						}
					}
					target = target.parentNode;
				}
			}
			if (event.target != this.cue) {
				this._dragNode(event, null, true);
			}
		},
		stop: function() {
			if (this.recordTarget) {
				var list = this.recordSource.list;
				var isAfter = this.$drag.$insert == "insertAfter";
				var dataRecords = syra_dataset.ensure(list);
				var dataRecord = dataRecords[this.recordSource.dataset.$serverIndex];
				var $prevReorderedIndex = this.recordSource.dataset.$serverIndex;
				dataRecords.splice(this.recordSource.dataset.$serverIndex, 1);
				var recordSourceIndex = this.recordSource.getRecordIndex();
				var recordTargetIndex = this.recordTarget.getRecordIndex();
				list.records.splice(recordSourceIndex, 1);
				if (recordTargetIndex > recordSourceIndex) {
					recordSourceIndex = isAfter ? recordTargetIndex : (recordTargetIndex - 2);
				} else {
					recordSourceIndex = isAfter ? recordTargetIndex + 1 : (recordTargetIndex);
				}
				if (this.recordTarget.dataset.$serverIndex > this.recordSource.dataset.$serverIndex) {
					this.recordSource.dataset.$serverIndex = isAfter ? this.recordTarget.dataset.$serverIndex : (this.recordTarget.dataset.$serverIndex - 2);
				} else {
					this.recordSource.dataset.$serverIndex = isAfter ? this.recordTarget.dataset.$serverIndex + 1 : (this.recordTarget.dataset.$serverIndex);
				}
				recordSourceIndex = Math.max(recordSourceIndex, 0);
				this.recordSource.dataset.$serverIndex = Math.max(this.recordSource.dataset.$serverIndex, 0);
				dataRecords.splice(this.recordSource.dataset.$serverIndex, 0, dataRecord);
				list.records.splice(recordSourceIndex, 0, this.recordSource);
				list.builder.record_reorder(this.recordSource, this.recordTarget, isAfter);
				list.filler.validateDisplay(list);
				var sendBag = syra_sendBag.get(list);
				if (list.isSingList) {
					if (list.$field.$item.$type == 'application/x-reference') {
						for (var ii = 0, jj = dataRecords.length; ii < jj; ii++) {
							dataRecords[ii].$serverIndex = ii;
						}
					}
					sendBag.dataRecords = dataRecords;
				} else {
					sendBag.dataRecords = [];
					sendBag.ensureRecord(this.recordSource);
					sendBag.ensureRecord(this.recordTarget);
				}
				syra_form.updateDelta(list, sendBag.dataRecords);
			}
			syra_over.unbindZindex();
			syra_dom.remove(this.info);
			syra_dom.remove(this.cue);
		},
		_dragNode: function(event, recordTarget, isOut) {
			var move = recordTarget && this.recordSource && this.recordSource != recordTarget;
			syra_pageBuilder.autoScroll(this.scrollViewRect, event);
			var top = Math.max(event.pageY, this.boundary.top);
			var left = Math.max(event.pageX, this.boundary.left);
			top = Math.min(top, this.boundary.bottom);
			left = Math.min(left, this.boundary.right);

			this.recordTarget = (!isOut && move) ? recordTarget : null;
			this.info.className = this.recordTarget ? "s_sortable_info_ok" : "s_sortable_info";
			this.moveCue(event);
			this.info.style.top = top + 15 + "px";
			this.info.style.left = left + 15 + "px";
		},
		moveCue: function(event) {
			if (event && this.recordTarget) {
				this.$drag = syra_dom.getBoundingClientRect(this.recordTarget.dataRow || this.recordTarget.domItem);
				if (this.list.builder.slotTable) {
					var rect = this.list.builder.slotTable.getBoundingClientRect();
					this.$drag.width = rect.width;
					this.$drag.left = rect.left;
				}
				//calculateDropBoundary
				var xmargin = (this.$drag.width * 0.25);
				var ymargin = (this.$drag.height * 0.25);
				var isAfter = false;
				var style = this.cue.style;
				if (this.recordSource.$isVerticalDirection) {
					var bottom = this.$drag.top + this.$drag.height - ymargin;
					style.top = ((isAfter = event.pageY > bottom) ? (bottom + ymargin) : this.$drag.top) + "px";
					style.left = this.$drag.left + "px";
					style.height = "2px";
					style.width = this.$drag.width + "px";
				} else {
					isAfter = event.pageX > (this.$drag.left + this.$drag.width - xmargin);
					style.top = (this.$drag.top - 3) + "px";
					style.left = (this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3))) + "px";
					style.width = "2px";
					style.height = this.$drag.height + 6 + "px";
				}
				this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
				syra_dom.hide(this.cue, false);
			} else {
				syra_dom.hide(this.cue, true);
			}
		}

	});
};