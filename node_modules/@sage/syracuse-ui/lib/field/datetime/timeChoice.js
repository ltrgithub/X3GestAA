"use strict";
var helpers = require('@sage/syracuse-core').helpers;

function TimeChoice() {

}

exports.TimeChoice = helpers.defineClass(TimeChoice, null, {
	applyShortCut: function(shortcuts, event) {
		if (this.selectedLink && shortcuts.down || shortcuts.up || shortcuts.left || shortcuts.right) {
			if (this.selectedLink) {
				this.selectedLink.className = "s-time-popup-a";
			}
			var newSel;
			if (shortcuts.down) {
				newSel = this.selectedLink.nextSibling;
				if (!newSel) {
					newSel = this.selectedLink.parentElement.nextSibling;
					if (!newSel || (this.title == newSel)) {
						newSel = this.cols[0].firstChild;
					} else {
						newSel = newSel.firstChild;
					}
				}
			}
			if (shortcuts.right) {
				newSel = this.selectedLink.parentElement.nextSibling;
				var index = syra_dom.getNodeIndex(this.selectedLink);
				if (!newSel || (this.title == newSel)) {
					newSel = this.cols[0].childNodes[(++index) == this.cols[0].childNodes.length ? 0 : index];
				} else {
					newSel = newSel.childNodes[index];
				}
			}
			if (shortcuts.up) {
				newSel = this.selectedLink.previousSibling;
				if (!newSel) {
					newSel = this.selectedLink.parentElement.previousSibling;
					if (!newSel || (this.title == newSel)) {
						newSel = this.cols[this.cols.length - 1].lastChild;
					} else {
						newSel = newSel.lastChild;
					}
				}
			}
			if (shortcuts.left) {
				newSel = this.selectedLink.parentElement.previousSibling;
				var index = syra_dom.getNodeIndex(this.selectedLink);
				if (!newSel || (this.title == newSel)) {
					var col = this.cols[this.cols.length - 1];
					newSel = col.childNodes[index == 0 ? (col.childNodes.length - 1) : --index];
				} else {
					newSel = newSel.childNodes[index];
				}
			}
			if (newSel) {
				(this.selectedLink = newSel).className = "s-time-popup-a s-time-select";
			}
			return true;
		}
		if (shortcuts.enter) {
			this.selectedLink && this.selectedLink.click();
			return true;
		}
	},
	create: function(field, options) {
		this.domItem = document.createElement("div");
		this.domItem.className = "s-time-popup";

		options = options || {};
		this.columns = options.columns || 3;
		this.interval = options.interval || 60;
		this.curTime = field.getInputValue() ? syra_culture.time.parse(field.getInputValue(), field.localFormat) : syra_culture.time.now();
		this.field = field;
		var cellCount = (24 * 60) / this.interval;

		this.title = syra_dom.label("s-time-popup-title", this.domItem);
		this.title.textContent = syra_local.fdpTitle;
		this.cols = [];
		for (var ii = 0; ii < this.columns; ii++) {
			var col = document.createElement("div");
			col.className = "s-time-popup-col";
			this.cols.push(this.domItem.appendChild(col));
		}
		var timeHour = syra_culture.time.parse("00:00:00");
		var colIndex = 0;
		for (var ii = 0; ii < cellCount; ii++) {
			var btn = syra_button.add({
				parent: this,
				slot: this.cols[colIndex],
				text: timeHour.toString(this.field.localFormat),
				css: "s-time-popup-a",
				timeHour: timeHour,
				click: function(event, btn) {
					if (this.parent.selectedLink) {
						this.parent.selectedLink.className = "s-time-popup-a";
					}
					this.link.className = "s-time-popup-a s-time-select";
					this.parent.field.setButtonValue(this.timeHour);
				}
			});
			if (timeHour.hour == this.curTime.hour) {
				btn.link.className += " s-time-select";
				this.selectedLink = btn.link;
			}
			timeHour = timeHour.addMinutes(this.interval);
			if ((++colIndex) == this.columns) {
				colIndex = 0;
			}
		}
	},
	remove: function() {
		syra_dom.remove(this.domItem);
		this.dispose();
	},
	dispose: function() {
		syra_site.disposeObject(this);
	}
});