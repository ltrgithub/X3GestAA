"use strict";
var helpers = require('@sage/syracuse-core').helpers;
import {
	Field
} from './field';

function VariantField() {}

exports.VariantField = helpers.defineClass(VariantField, Field, {
	/*load: function() {
		syra_item.bind(this, this.$item.$bind);
		//return this.varItem.load();
	},*/
	render: function() {
		if (this.varItem) this.varItem.render();
	},
	onItemInOut: function(onEnter) {
		return this.varItem && this.varItem.onItemInOut && this.varItem.onItemInOut(onEnter);
	},
	setFieldWidth: function() {
		if (this.varItem && this.varItem.setFieldWidth) {
			this.varItem.setFieldWidth();
		}
	},
	setValue: function(value, metaData, record) {
		if (!this.selector) {
			this.selector = document.createElement('select');
			this._core.appendChild(this.selector);
			this._dataValue.style.display = 'none';
			var options = Object.assign({
				'': ''
			}, this.$field.$variants);
			for (var k in options) {
				var option = document.createElement('option');
				option.value = k;
				option.text = k ? this.$field.$variants[k].$title : '';
				this.selector.appendChild(option);
			}
			this.childSlot = document.createElement('div');
			// TODO: improve this CSS hack + move it to external less/css file.
			this.childSlot.style.display = 'inline-block';
			this.childSlot.style.paddingLeft = '10px';
			this.childSlot.width = '50%';
			this._core.appendChild(this.childSlot);

			if (this.$isEditMode) {
				this.selector.onchange = () => {
					if (this.varItem) {
						this.childSlot.innerHTML = '';
						//this.varItem.dispose();
						this.varItem = null;
					}
					this.setValue(this.selector.value ? {
						[this.selector.value]: null,
					} : null, metaData, record);
					this.selectorDirty = true;
				};
			} else {
				this.selector.disabled = true;
			}
		}
		if (value && !this.varItem) {
			//this.$isEditMode = true;
			var keys = Object.keys(value);
			for (var $key of keys) {
				if (this.$field.$variants[$key]) {
					this.$varItemKey = $key;
					this.$varItemPrototype = this.$field.$variants[$key];

					var $item = {
						$varItemKey: this.$varItemKey,
						$field: this.$varItemPrototype,
						$isTitleHidden: true,
					};
					for (var $prop of Object.keys(this.$item)) {
						$item[$prop] = this.$item[$prop];
					}
					//$item.$bind = "$singleField";
					this.selector.value = $key;
					this.varItem = this.page.addItem(this.childSlot, $item, this.boxParent);
					this.varItem.parentVariantField = this;
					break;
				}
			}
		}
		if (this.varItem) {
			var variantValue = value ? value[this.$varItemKey] : undefined;
			var variantMeta = metaData ? metaData[this.$varItemKey] : undefined;
			this.varItem.setValue(variantValue, variantMeta, record);
		}
	},
	isDirty: function() {
		return this.selectorDirty || (this.varItem && this.varItem.isDirty());
	},
	setDirty: function(dirty) {
		this.selectorDirty = dirty;
		if (this.varItem) this.varItem.setDirty(dirty);
	},
	getValue: function() {
		return this.selector.value == null ? null : {
			[this.selector.value]: this.varItem ? this.varItem.getValue() : null,
		};
		//return this.varItem.getValue();
	},
	getInputValue: function() {
		return this.varItem && this.varItem.getInputValue();
	},
	setInputValue: function(val) {
		return this.varItem && this.varItem.setInputValue(val);
	},
	getCaretPosition: function() {
		return this.varItem && this.varItem.getCaretPosition();
	},
	focus: function(select) {
		return this.varItem && this.varItem.focus(select);
	},
	isEmpty: function() {
		return !this.varItem || this.varItem.isEmpty();
	},
	onMenuClick: function(options) {
		return this.varItem && this.varItem.onMenuClick(options);
	},
	saveVariantValue: function(varItemValue) {
		var value = {};
		value[this.$varItemKey] = varItemValue;
		return value;
	},
	dispose: function() {
		this.varItem && this.varItem.dispose();
		syra_site.disposeObject(this);
	}
});