"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var Field = require('@sage/syracuse-ui/lib/field/field').Field;

function VariantField() {}

exports.VariantField = helpers.defineClass(VariantField, Field, {
	render: function() {
		this.variantItem && this.variantItem.render();
	},
	onItemInOut: function(onEnter) {
		return this.variantItem && this.variantItem.onItemInOut && this.variantItem.onItemInOut(onEnter);
	},
	setFieldWidth: function() {
		if (this.variantItem && this.variantItem.setFieldWidth) {
			this.variantItem.setFieldWidth();
		}
	},
	addSelector: function(value, metaData, record) {
		var self = this;
		self.selector = document.createElement('select');
		self._core.appendChild(self.selector);
		self._dataValue.style.display = 'none';
		var options = Object.assign({
			'': ''
		}, this.$field.$variants);
		for (var k in options) {
			var option = document.createElement('option');
			option.value = k;
			option.text = k ? self.$field.$variants[k].$title : '';
			self.selector.appendChild(option);
		}
		self.childSlot = syra_dom.div("s-variant-field-slot", self._core);

		if (self.$isEditMode) {
			self.selector.onchange = function() {
				if (self.variantItem) {
					self.childSlot.innerHTML = '';
					//self.variantItem.dispose();
					self.variantItem = null;
				}
				var val = null;
				if (self.selector.value) {
					val = {};
					val[self.selector.value] = null;
				}
				self.setValue(val, metaData, record);
				self.selectorDirty = true;
			};
		} else {
			self.selector.disabled = true;
		}
	},
	useSelector: function() {
		return !this.$item.$inplace;
	},
	setValue: function(value, metaData, record) {
		if (this.useSelector()) {
			!this.selector && this.addSelector(value, metaData, record);
		} else {
			this.childSlot = this._core;
		}
		if (value !== undefined) {
			this.currentValue = value;
			if (value && !this.variantItem) {
				//this.$isEditMode = true;
				var keys = Object.keys(value);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var $key = keys[ii];
					if (this.$field.$variants[$key]) {
						this.$variantItemKey = $key;
						this.$variantItemPrototype = this.$field.$variants[$key];

						var $item = {
							$variantItemKey: this.$variantItemKey,
							$field: this.$variantItemPrototype,
							$isTitleHidden: true,
						};
						var $props = Object.keys(this.$item);
						for (var mm = 0, kk = $props.length; mm < kk; mm++) {
							$item[$props[mm]] = this.$item[$props[mm]];
						}
						if (this.selector) {
							this.selector.value = $key;
						} else {
							//$item.$bind = "$singleField";
						}
						this.variantItem = this.page.addItem(this.childSlot, $item, this.boxParent);
						this.variantItem.parentVariantField = this;
						break;
					}
				}
			}
		}
		if (this.variantItem) {
			var variantValue = value ? value[this.$variantItemKey] : undefined;
			var variantMeta = metaData ? metaData[this.$variantItemKey] : undefined;
			this.variantItem.setValue(variantValue, variantMeta, record);
		}
	},
	isDirty: function() {
		return this.selectorDirty || (this.variantItem && this.variantItem.isDirty());
	},
	setDirty: function(dirty) {
		this.selectorDirty = dirty;
		if (this.variantItem)
			this.variantItem.setDirty(dirty);
	},
	getValue: function() {
		var val = null;
		var key = this.$variantItemKey;
		if (this.useSelector()) {
			key = this.selector && this.selector.value;
		}
		if (key) {
			val = {};
			val[key] = this.variantItem ? this.variantItem.getValue() : null;
		}
		return val;
	},
	getInputValue: function() {
		if (this.variantItem) {
			return this.variantItem.getInputValue ? this.variantItem.getInputValue() : this.getValue();
		}
	},
	setInputValue: function(val) {
		return this.variantItem && this.variantItem.setInputValue(val);
	},
	getCaretPosition: function() {
		return this.variantItem && this.variantItem.getCaretPosition();
	},
	focus: function(select) {
		return this.variantItem && this.variantItem.focus(select);
	},
	isEmpty: function() {
		return !this.variantItem || this.variantItem.isEmpty();
	},
	onMenuClick: function(options) {
		return this.variantItem && this.variantItem.onMenuClick(options);
	},
	saveVariantValue: function(varItemValue) {
		var value = {};
		value[this.$variantItemKey] = varItemValue;
		return value;
	},
	applyMenusChange: function(metaData) {
		this.variantItem && syra_menus.applyChange(this.variantItem, metaData);
	},
	applyDesignMeta: function(metaData, designing) {
		return syra_fields.applyDesignMeta(this, metaData, designing);
	},
	setDescription: function($description) {
		this.variantItem && syra_fields.setDescription(this.variantItem, $description);
	},
	applyCustomStyle: function(metaData) {
		this.variantItem && this.variantItem.applyCustomStyle(metaData);
	},
	getState: function() {
		return this.variantItem && syra_fields.getState(this.variantItem);
	},
	setState: function(state) {
		this.variantItem && syra_fields.setState(this.variantItem, state);
	},
	invalidateField: function(errors, noViewer) {
		if (this.variantItem) {
			syra_fields.invalidateField(this.variantItem, errors, noViewer);
			this.isInvalid = this.variantItem.isInvalid;
		}
	},
	validateKeyPress: function(charCode, event, shortCut) {
		if (this.variantItem && this.variantItem.validateKeyPress) {
			return this.variantItem.validateKeyPress(charCode, event, shortCut);
		}
		return true; //validate by default
	},
	onItemInOut: function(on, event, target) {
		if (this.variantItem && this.variantItem.onItemInOut) {
			this.variantItem.onItemInOut(on, event, target);
		}
	},
	dispose: function() {
		this.variantItem && this.variantItem.dispose();
		syra_site.disposeObject(this);
	}
});