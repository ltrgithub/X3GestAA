"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var Field = require('@sage/syracuse-ui/lib/field/field').Field;

function ReferenceField() {}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field, {
	applyMetaData: function(metaData) {
		syra_fields.applyMetaData(this, metaData);
		if (metaData && metaData.$item) {
			syra_fields.applyMetaData(this, metaData.$item, true);
		}
	},
	setState: function(state) {
		syra_fields.setState(this, state);
		if (state.$isHidden !== undefined && this.articleParent.isSingleRecord) {
			syra_dom.hide(this.articleParent.domItem, this.$isHidden);
		}
	},
	_parseSettings: function($property, $default) {
		var setting = this.$reference[$property] = {
			$itemProp: this.$field.$item[$property] ? syra_expression.extractCode(this.$field.$item[$property]) : $property
		};
		setting.$prop = this.$field.$item[setting.$itemProp];
		if (setting.$prop) {
			setting.$prop = syra_expression.extractCode(setting.$prop);
			if (setting.$prop != this.$item.$bind) {
				var articleParent = this.articleParent;
				while (articleParent) {
					if (!(articleParent.$prototype && articleParent.$prototype.$properties && articleParent.$prototype.$properties[setting.$prop])) {
						articleParent = articleParent.articleParent;
					} else {
						setting.$field = articleParent.$prototype.$properties[setting.$prop];
						syra_item.bind(this, setting.$prop);
						break;
					}
				}
			}
		} else {
			setting.$prop = setting.$itemProp;
		}
	},
	initialize: function() {
		this.isReferenceField = true;
		this.$reference = {};
		this._parseSettings("$title");
		this._parseSettings("$value");
		this.$reference.$keys = {};
		var $keys = this.$field.$item.$key.split("~");
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $key = $keys[ii];
			var $itemProp = syra_expression.extractCode($key);
			var prop = this.$field.$item[$itemProp];
			this.$reference.$keys[$itemProp] = prop ? syra_expression.extractCode(prop) : $itemProp;
		}
		if (this.$field.$item.$key === "{$uuid}") {
			this.uuidEnabled = true;
		}
		if (this.$item && this.$item.$isUnitField) {
			this.isDiagnoseDisabled = true;
		}
	},
	render: function() {
		if (this.$isEditMode) {
			var css = ((this.$item.$css) ? this.$item.$css + " " : "");
			var cssInput = css + this.$skinInput;
			if (this.$item.$contentEditable) {
				this.input = syra_dom.addEditable(cssInput, this._dataValue);
			} else {
				this.input = syra_dom.input(cssInput, this._dataValue);
			}
			if (!this.$item.$inplace && this.$item.$isReferenceTitleVisible !== false) {
				this.refDescriptionItem = syra_dom.div(cssInput + "-ref-desc");
				this.refDescriptionItem.syraTip = 1;
				if (this._isTitleField) {
					this._titleField = this.page.addItem(this.refDescriptionItem, {
						$bind: this.$reference.$title.$prop,
						$isEditMode: false,
						$css: this.$item.$css,
						$skin: this.$skin + "-ref-link"
					}, this.boxParent);

				} else {
					syra_dom.hide(this.refDescriptionItem, true);
				}
				this._dataValue.parentNode.appendChild(this.refDescriptionItem);
			}
		} else {
			if (!this.$item.$isUnitField) {
				this.$isDetailLinkDisabled = true;
				this.codeMenu = this.page.addItem(this._dataValue, {
					$isDescriptionVisible: this.$item.$isReferenceTitleVisible !== false,
					$subRecordKey: this.$item.$bind,
					$css: this.$item.$css,
					$category: "link",
					$skin: this.$skin + "-ref-link"
				}, this.boxParent);
				this.codeMenu.referenceField = this;
			}

		}
		syra_fields.setDescription(this, this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	hasValue: function() {
		return this.currentValue && this.currentValue.$value && this.currentValue.$value != "";
	},
	notifyFieldChange: function(newValue) {
		var self = this;
		if (self.currentValue !== null) {
			delete self.currentValue.$serverIndex;
			delete self.currentValue.$isSelected;
		}
		var postValue;
		var $properties = self.$field.$item.$properties;
		var sendBag = syra_sendBag.get(self.page);
		if (self.currentValue !== null) {
			var $keys = Object.keys(self.currentValue);
			postValue = {};
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				var $key = $keys[ii];
				if ($key != "$value" && $key != "$etag" && $key != "$properties" && $key != "$url") {
					var copy = true;
					switch ($key) {
						case "$description":
						case "$title":
							if (!self.currentValue[$key]) {
								copy = false;
							}
							break;
						case "$uuid":
							if (!self.$reference.$keys.$uuid) {
								if (!self.articleParent.isRecordArticle && !self.articleParent.isChildFieldRecord) {
									copy = false;
								} else {
									copy = self.articleParent.list.$prototype.$item.$type == "application/x-reference";
								}
							}
							break;
						default:
							var $prop = $properties[$key];
							copy = false;
							if ($prop) {
								if (!$prop.$isReadOnly) {
									if (self.$field.$item[$key]) {
										var parentKey = self.$reference.$keys[$key] || $key;
										if (self.articleParent.$prototype.$properties[parentKey]) {
											syra_dataset.ensure(self.articleParent)[parentKey] = self.currentValue[$key];
											var savedValue = self.parentVariantField ? self.parentVariantField.saveVariantValue(self.currentValue[$key]) : self.currentValue[$key];
											sendBag.save(self.page, self.articleParent, parentKey, savedValue);
										} else {
											copy = true;
										}
									} else {
										copy = true;
									}
								}
							}
							break;
					}
					if (copy) {
						postValue[$key] = self.currentValue[$key];
					}
				}
			}
		} else {
			var $prop = $properties[self.$reference.$value.$itemProp];
			if ($prop && !$prop.$isReadOnly) {
				if (self.$reference.$value.$field && self.articleParent.$prototype.$properties[self.$reference.$value.$prop]) {
					syra_dataset.ensure(self.articleParent)[self.$reference.$value.$prop] = null;
					sendBag.save(self.page, self.articleParent, self.$reference.$value.$prop, self.parentVariantField ? self.parentVariantField.saveVariantValue(null) : null);
				}
			}
			postValue = null;
		}
		self.articleParent.dataset[self.$item.$bind] = postValue; // adding new value to dataset
		syra_form.updateDelta(self, postValue);
		return false; //disable default notifyFieldChange
	},
	getValue: function() {
		var value = this.getInputValue();
		if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
			this.currentValue = {};
			this.currentValue[this.$reference.$value.$prop] = value;
		}
		return this.currentValue;
	},
	setValue: function(value, metaData) {
		if (value !== undefined) {
			if (this.currentValue && value) {
				if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
					return;
				}
			}
			if (value) {
				var $field = this.$field.$item;
				this.currentValue = this.currentValue || {};
				if (this.uuidEnabled) {
					this.currentValue = {
						$description: value.$description || "",
						$title: value.$title || $field.$title,
						$uuid: value.$uuid || syra_expression.parse(this.articleParent, $field.$uuid, value) || ""
					};
					this.currentValue.$value = value.$value || syra_expression.parse(this.articleParent, $field.$value, value) ||
						"";
					this.currentValue.$key = value.$key || syra_expression.parse(this.articleParent, $field.$key, value) ||
						"";
					if (this.currentValue.$title) {
						this.currentValue.$title = syra_expression.parse(this.articleParent, this.currentValue.$title, value) || "";
					} else {
						this.currentValue.$title = "";
					}
				} else {
					if (typeof(value) == 'object') {
						this.currentValue.$description = value.$description || "";
						this.currentValue.$title = value.$title || value[this.$reference.$title.$itemProp];
						if (this.currentValue.$title == null && this.$reference.$title.$field) {
							this.currentValue.$title = syra_expression.parse(this.articleParent, "{" + this.$reference.$title.$prop + "}");
						}
						if (this.currentValue.$title == null) {
							this.currentValue.$title = "";
						}
						this.currentValue.$value = value[this.$reference.$value.$itemProp] || this.currentValue.$value;
						if (this.currentValue.$value == null && this.$reference.$value.$field) {
							this.currentValue.$value = syra_expression.parse(this.articleParent, "{" + this.$reference.$value.$prop + "}");
						}
						var $keys = Object.keys(value);
						for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
							var $key = $keys[ii];
							this.currentValue[$key] = value[$key];
						}
						delete this.currentValue.$serverIndex;
						delete this.currentValue.$isSelected;
					} else {
						this.currentValue.$value = value;
					}
				}
			} else {
				this.currentValue = null;
			}
			this._renderCurrentValue();
		}
		this.applyMetaData(metaData);
		if (value) {
			if (this.articleParent && this.articleParent.isSingleRecord && typeof(value) == "object") {
				this.applyMetaData(value);
			}
		}
	},
	getDisplayText: function() {
		return this.displayText || "";
	},
	_renderCurrentValue: function() {
		this.displayText = "";
		var currentValue = this.currentValue || {};
		if (this.$isEditMode) {
			if (this.input) {
				var value = currentValue.$value || "";
				this.setInputValue(value);
				this.referenceDescriptionText = currentValue.$title || "";
				if ((!this.referenceDescriptionText || !this.$item.$inplace) && currentValue.$description) {
					this.referenceDescriptionText = currentValue.$description;
				}
				if (this.refDescriptionItem) {
					if (!this._titleField) {
						this.refDescriptionItem.textContent = this.referenceDescriptionText;
						syra_dom.hide(this.refDescriptionItem, !this.referenceDescriptionText);
					}
				} else {
					this.input.title = this.referenceDescriptionText;
					// title for singlerecord reference field 
					if (this.boxParent.titleSlot) {
						this.boxParent.titleSlot.textContent = this.referenceDescriptionText;
					}
				}
				this.displayText = value;
				this._showDescription();
			}
		} else {
			if (this.codeMenu) {
				var $details = this.$field.$item && this.$field.$item.$links && this.$field.$item.$links.$details;
				if (!$details) {
					$details = {};
				}
				$details.$title = currentValue.$value || "";
				$details.$description = currentValue.$title || "";
				if ((!$details.$description || !this.$item.$inplace) && currentValue.$description) {
					$details.$description = currentValue.$description;
				}
				this.displayText = $details.$title + " " + $details.$description;
				if (!$details.$url) {
					this.codeMenu.disable(true);
				} else {
					this.codeMenu.$isDisabled && this.codeMenu.disable(false);
				}
				this.codeMenu.setMenu($details, currentValue, currentValue);
				this._showDescription();
			} else {
				if (this.$item.$isUnitField) {
					if (this._dataValue) {
						this._dataValue.textContent = this.displayText = currentValue.$symbol;
						if (this.$item.$isQuantityEditable) {
							//8 char width 4 = padding
							this.domItem.style.width = (((this.displayText || "").length * 8) + 4) + "px";
						}
					}
				}
			}
			syra_menus.picker.show(this);
		}
	},
	_showDescription: function() {
		if (!this.$item.$inplace && !this.$item.$isDescriptionHidden) {
			var $description = this.$item.$description || this.$field.$item.$description;
			if ($description) {
				syra_fields.setDescription(this, syra_expression.parse(this.articleParent, $description, this.articleParent.dataset[this.$item.$bind]));
			}
		}
	},
	addValueSlot: function() {
		if (this.$item.$isUnitField) {
			this._core = this._dataValue = this.domItem;
		} else {
			syra_fields.addValueSlot(this);
		}
	}
});