"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var VignetteField = require("@sage/syracuse-ui/lib/field/vignette/vignetteField").VignetteField;
var Scrollbar = require('@sage/syracuse-ui/lib/scroll/scrollbar').Scrollbar;

var _viewerTypes = {
	"text/xml": require('./viewer/xmlViewer').XMLViewer,
	"application/json": require('./viewer/jsonViewer').JSONViewer
};

function RichDataVignetteField() {}

exports.RichDataVignetteField = helpers.defineClass(RichDataVignetteField, VignetteField, {
	addRefreshButton: function() {
		//avoid display of refresh button
	},
	setValue: function(value, meta) {
		syra_fields.applyMetaData(this, meta);
		this.currentValue = value;
		this.renderData();
	},
	resizeItem: function(doResize) {
		if (this.$item.$height) {
			this.body.style.height = this.$item.$height + "px";
		} else {
			this.body.style.height = this.page.size.height * 0.3 + "px";
		}
		this.scrollBar && this.scrollBar.resize();
	},
	load: function() {
		VignetteField.prototype.load.call(this);
		this.body.style.padding = "0px";
		this._dataValue = syra_dom.div("s-richdata-viewer", this.body);
		this.scrollBar = new Scrollbar({
			container: this.body,
			scrollview: this._dataValue
		});
	},
	renderData: function() {
		if (this.currentValue) {
			this.body.style.height = this.page.scrollview.clientHeight * 0.3 + "px";
			this.discoverViewer();
		} else {
			syra_dom.empty(this._dataValue);
			this.viewer && this.viewer.dispose();
			this.viewer = null;
		}
	},
	tryViewer: function(type) {
		this.viewer = new _viewerTypes[type]();
		return this.viewer.render(this._dataValue, this.currentValue);
	},
	discoverViewer: function() {
		var dataset = this.articleParent.dataset;
		var $field = dataset && dataset.$properties && dataset.$properties[this.$item.$bind];
		var $type = ($field && $field.$type) || this.$field.$type;
		syra_dom.empty(this._dataValue);
		syra_dom.toggleClass(this._dataValue, "s-error", false);
		//try defined type 
		var error = this.tryViewer($type);
		if (error) {
			var keys = Object.keys(_viewerTypes);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				var type = keys[ii];
				if (type != $type) {
					if (!this.tryViewer(type)) {
						return; //no error returned,render with success
					}
				}
			}
			syra_dom.toggleClass(this._dataValue, "s-error", true);
			this._dataValue.textContent = error;
		}
	},
	dispose: function() {
		this.renderData(null);
		this.scrollBar && this.scrollBar.dispose();
		VignetteField.prototype.dispose.call(this);
	}
});