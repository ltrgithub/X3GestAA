"use strict";
var JSONQuery = require("@sage/syracuse-ui/lib/controller/jsonQuery").JSONQuery;
var helpers = require('@sage/syracuse-core').helpers;
var testData = require("../fixtures/store").store;
var personsData = require("../fixtures/persons").persons;
var personData = require("../fixtures/persons").person;

QUnit.module(module.id);

//Test helpers functions
var authors = ["Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"];
var testDataPriv = null;

function values(query) {
	return JSONQuery(query, null, testData).values;
}

function paths(query, param) {
	return JSONQuery(query, null, testData).paths;
}

function isJsonPath(query) {
	return JSONQuery(query, null, testData).isJsonPath;
}

function priv(query, priv) {
	return JSONQuery(query, {
		privilegiedPath: priv
	}, testDataPriv);
}

function rootClone(obj) {
	if (!obj || obj instanceof Array || ["boolean", "string", "number"].indexOf(typeof obj) >= 0) throw new Error("invalid clone attempt");
	var result = {};
	for (var key in obj) {
		if (Object.prototype.hasOwnProperty.call(obj, key) && ["$clientOld", "$serverOld"].indexOf(key) === -1) {
			var val = obj[key];
			if (val instanceof Array) result[key] = val.concat([]);
			else result[key] = val;
		}
	}
	return result;
}

function touch(resource) {
	if (Object.keys(resource).length === 0) return resource;
	if (!resource.$clientOld || !resource.$serverOld) {
		var clone = rootClone(resource);
		if (!resource.$clientOld) resource.$clientOld = clone;
		if (!resource.$serverOld) resource.$serverOld = clone;
	}
	return resource;
}

//

test("query is a path", function() {
	same(values("$.$busy"), undefined, "should be fail-safe, return undefined with an inexistant path");
	same(values("$.store.book[0].title1"), undefined, "should be fail-safe, return undefined with an inexistant path");
	same(values("$.store.bicycle"), {
		"color": "red",
		"price": 19.95
	}, "path returning an object");
	same(values("$['store']['book']['0']"), testData.store.book[0], "using indexed properties returning an object");
	same(values("$['store']['book']['0']['price']"), 8.95, "using indexed properties returning a property");
	same(values("$['store']['book']"), testData.store.book, "using indexed properties returning an array");
	same(values("$.store.book[0]"), testData.store.book[0], "using . notation for navigation");
	same(values("$['store']['book']['0']"), values("$.store.book[0]"), "indexed properties and . notation for navigation should return same values");
	same(values("$.store.book[1].category"), "fiction", "a path with an array index");
});

test("using range or list of index", function() {
	same(values("$..book[0][-1:]"), [{
		"category": "fiction",
		"author": "J. R. R. Tolkien",
		"title": "The Lord of the Rings",
		"isbn": "0-395-19395-8",
		"price": 22.99
	}], "range with -1 to get the last item");
	same(values("$..book[0][:2]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Evelyn Waugh",
		"title": "Sword of Honour",
		"price": 12.99
	}], "range without the start index (start is first)");
	same(values("$.store.book[?(@.price<15)][1:3]"), [{
		"category": "fiction",
		"author": "Evelyn Waugh",
		"title": "Sword of Honour",
		"price": 12.99
	}, {
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}], "with a filter (long syntax) and a range");
	same(values("$..book[0][0,1]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Evelyn Waugh",
		"title": "Sword of Honour",
		"price": 12.99
	}], "path with a list of index");
});

test("using recursive search", function() {
	same(values("$.store..price"), [8.95, 12.99, 8.99, 22.99, 19.95], "with a path + a recursive search of a property (the path should exclude searched property above the path)");
	same(values("$..author"), authors, "with a recursive search of a property");
});

test("using map expression", function() {
	same(values("$.store.book[=author]"), authors, "with a simple map expression");
	same(values("$..book[0][=category + ' ' + title]"), ["reference Sayings of the Century", "fiction Sword of Honour", "fiction Moby Dick", "fiction The Lord of the Rings"], "with a complex map expression");
	same(values("$.store.bicycle..[=color + ' ' + price]"), ["red 19.95"], "complex map expression on a single property");
	same(values("$..book[0][={a:author, b:category + ' ' + title}]"), [{
		"a": "Nigel Rees",
		"b": "reference Sayings of the Century"
	}, {
		"a": "Evelyn Waugh",
		"b": "fiction Sword of Honour"
	}, {
		"a": "Herman Melville",
		"b": "fiction Moby Dick"
	}, {
		"a": "J. R. R. Tolkien",
		"b": "fiction The Lord of the Rings"
	}], "with a complex map expression returning a new object");
	var address = JSONQuery("$..address[=num + ' ' + street + ' ' + postal + ' ' + city + ' ' + country['description']]", null, personsData).values;
	same(address, ["2 wall street 15015 New York United States", "10 rue Fructidor 75017 Paris France"]);
	address = JSONQuery("$.$resources[={title : firstName + ' ' + lastName, address : address['num'] + ' ' + address['street'] + ' ' + address['postal'] + ' ' + address['city'] + ' ' + address['country']['description']}]", null, personsData).values;
	var res = [{
		title: "Tom Simon",
		address: "2 wall street 15015 New York United States"
	}, {
		title: "Bob Gartner",
		address: "10 rue Fructidor 75017 Paris France"
	}];
	same(address, res);
	//	$..[(Date.now() - date.make(dateOfBirth).year()) >= 18]

	//map sur valeur unique.
	//	

});

test("using filter expression", function() {
	same(values("$..[?price<10]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}], "with a filter (short syntax)");
	same(values("$.store..[?price<10]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}], "with a filter (short syntax) starting with a path (the path should exclude searched property above the path)");
	same(values("$..book[0][?(@.isbn)]"), [{
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}, {
		"category": "fiction",
		"author": "J. R. R. Tolkien",
		"title": "The Lord of the Rings",
		"isbn": "0-395-19395-8",
		"price": 22.99
	}], "with a filter expression using truthy value");
	same(values("$..book[0][?(@.price<10)]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}], "another with a filter expression");
	same(values("$..book[0][?(@['price']<10)]"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}], "another with a filter expression, different syntax");
	same(values("$..book[0]?price=22.99"), [{
		"category": "fiction",
		"author": "J. R. R. Tolkien",
		"title": "The Lord of the Rings",
		"isbn": "0-395-19395-8",
		"price": 22.99
	}]);
	same(values("$.store.book[?(@.price<15)][=author]"), ["Nigel Rees", "Evelyn Waugh", "Herman Melville"]);
});

test("distinct expression", function() {
	same(values("$.store.book[=category][^?true]"), ["reference", "fiction"], "with a distinct expression");
	same(values("$..[^?author~'herman melville']"), [{
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}]);
	same(values("$..[^?author='Herman*']"), [{
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}]);
	same(values("$..[^?@['author']='Herman*']"), [{
		"category": "fiction",
		"author": "Herman Melville",
		"title": "Moby Dick",
		"isbn": "0-553-21311-3",
		"price": 8.99
	}]);
});

test("like expressions", function() {
	same(values("$.store.book?title='*of the*'"), [{
		"category": "reference",
		"author": "Nigel Rees",
		"title": "Sayings of the Century",
		"price": 8.95
	}, {
		"category": "fiction",
		"author": "J. R. R. Tolkien",
		"title": "The Lord of the Rings",
		"isbn": "0-395-19395-8",
		"price": 22.99
	}], "could use a * character");
	same(values("$.store.book[?'?iction'=category][=price]"), [12.99, 8.99, 22.99], "like expression");
	same(values("$.store.book[?'?ICTion'~category][=price]"), [12.99, 8.99, 22.99], "like expression and case unsensitive");
});

test("sorting expression", function() {
	same(values("$.store.book[\\price][0].price - $.store.book[/price][0].price"), 14.04, "sorting descending a property to get max value minus sorting ascending to get min value so we get difference between max and min");
	same(values("$.store.book[\\category,\\price][=price]"), [8.95, 22.99, 12.99, 8.99], "two properties sorting");
	same(values("$.store.book[/category][/price][=price]"), [8.95, 8.99, 12.99, 22.99], "two properties sorting, distinct syntax");
});

test("* character", function() {
	same(values("$.store.*"), [
		[{
			"category": "reference",
			"author": "Nigel Rees",
			"title": "Sayings of the Century",
			"price": 8.95
		}, {
			"category": "fiction",
			"author": "Evelyn Waugh",
			"title": "Sword of Honour",
			"price": 12.99
		}, {
			"category": "fiction",
			"author": "Herman Melville",
			"title": "Moby Dick",
			"isbn": "0-553-21311-3",
			"price": 8.99
		}, {
			"category": "fiction",
			"author": "J. R. R. Tolkien",
			"title": "The Lord of the Rings",
			"isbn": "0-395-19395-8",
			"price": 22.99
		}], {
			"color": "red",
			"price": 19.95
		}
	], "basic *");
	same(values("$.store.book.*").length, 4);
	same(values("$.store.book.*[0:3]"), values("$.store.book[0:3]"));
	same(values("$.store.book.*"), values("$.store.book[0:5]"));
});

test("special characters in properties names", function() {
	same(values("$.symbols[*]"), [5]);
	same(values("$.symbols['@.$;']"), 5);
});

test("should get paths", function() {
	same(paths("$.store.book")[0], "$.store.book", "when query is a path");
	same(paths("$.store.book[0]")[0], "$.store.book[0]", "when query is a path");
	same(paths("$..book[0][:2]"), ["$.store.book[0]", "$.store.book[1]"], "path with a range");
	same(paths("$..book[0][0,1]"), ["$.store.book[0]", "$.store.book[1]"], "path with a list on index");
	same(paths("$.store..price"), ["$.store.book[0].price", "$.store.book[1].price", "$.store.book[2].price", "$.store.book[3].price", "$.store.bicycle.price"], "recursive search of a property");
	same(paths("$.store.book[=author]"), ["$.store.book[0].author", "$.store.book[1].author", "$.store.book[2].author", "$.store.book[3].author"], "with a map expression");
	same(paths("$.store.book[?(@.price<15)][1:3]"), ["$.store.book[1]", "$.store.book[2]"], "with expression filter and a range");
});

test('should know when we could infer a path from a query', function() {
	ok(!isJsonPath("$..book[0][=category + ' ' + title]"));
	ok(isJsonPath("$.store.book[?(@.price<15)][=author]"));
	ok(isJsonPath("$..book[0][?(@.isbn)]"));
});

test("privilegied paths with values", function() {
	testDataPriv = helpers.object.clone(testData, true);
	var r = touch(testDataPriv.store.book[0]);
	r.price = 9;
	same(priv("$.store.book[0].price", "$clientOld").values, 8.95);
	same(priv("$.store.book[0].price", "$serverOld").values, 8.95);
	same(priv("$.store.book[0].price", null).values, 9);
	same(priv("$.store..price", null).values, [9, 12.99, 8.99, 22.99, 19.95]);
	same(priv("$.store..price", "$clientOld").values, [8.95, 12.99, 8.99, 22.99, 19.95]);
	same(priv("$.store..price", "$serverOld").values, [8.95, 12.99, 8.99, 22.99, 19.95]);
	same(priv("$..price.length", "$serverOld").values, 5);
	same(priv("$..price.length", "$clientOld").values, 5);
	same(priv("$..price.length", null).values, 5);
});

test("privilegied paths with paths", function() {
	testDataPriv = helpers.object.clone(testData, true);
	var r = touch(testDataPriv.store.book[0]);
	r.price = 9;
	same(priv("$.store.book[0].price", null).paths, ["$.store.book[0].price"]);
	same(priv("$.store.book[0].price", "$clientOld").paths, ["$.store.book[0].$clientOld.price"]);
	same(priv("$.store.book[0].price", "$serverOld").paths, ["$.store.book[0].$serverOld.price"]);
	var paths = [0, 1, 2, 3].map(function(i) {
		var p = "$.store.book[" + i + "]";
		if (i === 0) p += ".$clientOld";
		return p + ".price";
	});
	paths.push("$.store.bicycle.price");
	same(priv("$.store..price", "$clientOld").paths, paths);
});