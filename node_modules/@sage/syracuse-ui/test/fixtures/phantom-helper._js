"use strict";

var simple = require('node-phantom-simple');
var fsp = require("path");
var os = require('os');

exports = module.exports = Object.create(simple);

var TIMEOUT = 60000;

function waitCallback(page, eventName, cb) {
	var gotResult = false,
		gotEvent = false;
	var result;

	function send(err, res) {
		cb && cb(err, res);
		cb = null;
	}

	var tt = setTimeout(function() {
		send(new Error("timeout"));
	}, TIMEOUT);

	function flush() {
		if (gotResult && gotEvent) send(null, result);
	}

	page.onCallback = function(msg) {
		console.error("PAGE RECEIVED", msg);
		if (msg && msg.event === eventName) {
			clearTimeout(tt);
			gotEvent = true;
			flush();
		}
	};
	return function(err, res) {
		if (err) return send(err);
		gotResult = true;
		result = res;
		flush();
	};
}

function pageError(msg, trace) {
	var msgStack = ['ERROR: ' + msg];
	if (trace && trace.length) {
		msgStack.push('TRACE:');
		trace.forEach(function(t) {
			msgStack.push(' -> ' + t.file + ': ' + t.line + //
				(t.function ? ' (in function "' + t.function+'")' : ''));
		});
	}
	console.error(msgStack.join('\n'));
}

exports.create = function(_, options) {
	var opt = options || {};

	if (!opt.phantomPath) {
		opt.phantomPath = fsp.join(fsp.dirname(require.resolve('phantomjs/package.json')),
			'lib/phantom/' + (os.platform() === 'win32' ? 'phantomjs.exe' : 'bin/phantomjs'));
	}
	var ph = simple.create(_, opt);

	var createPage = ph.createPage;
	ph.createPage = function(_) {
		var page = createPage.call(ph, _);
		page.onConsoleMessage = console.log;
		page.onError = pageError;
		page.openWait = function(url, options, cb) {
			page.open(url, options, waitCallback(page, "onAfterLoad", cb));
		};
		page.evalWait = function(fn, cb) {
			page.evaluate(fn, waitCallback(page, "onAfterLoad", cb));
		};
		return page;
	};
	return ph;
};