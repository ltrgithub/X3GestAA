"use strict";
var _ext = require('syracuse-ui/lib/extend/extendGateway');
var _d3 = require('./deps/index');
_d3.layout.cloud = require('./deps/d3LayoutCloud').cloud;

var _idIndex = 0;

var TagCloud = function(context){
    this.context = context;
};

TagCloud.prototype._render = function(){
    var self = this;
    if (!self.cloudSlot) {
        self._fontSize = _d3.scale.log();
        self._minFontSize = 15;
        self._maxFontSize = 30;
        self._width = 350;
        self._height = 350;
        self._color = ["#024731", "#69923a", "#a8b400", "#3a3565", "#652d86", "#c1afe5"];
        var id = "ui_d3_graph_tagcloud" + (++_idIndex);
        this.context.div.setAttribute("id", id);
        self.cloudSlot = _d3.select("#" + id);
        var svgDiv = self.cloudSlot.append("div").attr("class", "s-ui-d3-tag-cloud");
        self.$$svg = svgDiv.append("svg").attr("width", self._width).attr("height", self._height);
        self.$nodes = [];
    }
    if (self.dataset) {
        // remap data and sort descending
        var nodes = (self.dataset.$nodes || []).map(function(d){
            return {
                text: d.description,
                size: d.$weight,
                data: d
            };
        }).sort(function(a, b){
            return (b.size - a.size);
        });
        // rewrite map to be able to add data property
        nodes.map = function(cb, thisArg){
            var result = [];
            var i = 0;
            nodes.forEach(function(node){
                var mapped = cb.call(thisArg, node, i++, thisArg);
                mapped.data = node.data;
                result.push(mapped);
            });
            return result;
        };
        // compute range
        self._fontSize.range([self._minFontSize, self._maxFontSize]);
        nodes.length && self._fontSize.domain([nodes[nodes.length - 1].size, nodes[0].size]);
        _d3.layout.cloud().size([self._width, self._height]).timeInterval(10).spiral("archimedean").words(nodes) //	    .rotate(function() { return ~~(Math.random() * 2) * 60; })
.rotate(function(){
            return 0;
        }).fontSize(function(d){
            return self._fontSize(d.size);
        }).on("end", function(words, bounds){
            self.$$svg.selectAll("g").remove();
            var vis = self.$$svg.append("g").attr("transform", "translate(" + self._width / 2 + "," + self._height / 2 + ")");
            vis.selectAll("text").data(words).enter().append("text").on("click", function(d){
                var $link = d.data.$links.$default;
                //$link && _ext.menu.fire(self.context, $link, d.data);
                $link.$url = _ext.data.parseExpression(self.context, $link, d.data)
                _ext.menu.fire(self.context, {
                    $link: $link,
                    dataset: d.data
                });
            }).style("opacity", 1e-6).transition().duration(1000).style("opacity", 1).attr("transform", function(d){
                return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
            }).style("font-size", function(d){
                return d.size + "px";
            }).style("fill", function(d){
                // no category = 0
                return self._color[(d.data.$category != null ? d.data.$category + 1 : 0)];
            }).attr("class", "s-ui-d3-tag-cloud-nodetext").attr("text-anchor", "middle").text(function(d){
                return d.text;
            });
        }).start();
    }
};

TagCloud.prototype.setValue = function(value){
    if (value && typeof(value) === 'object') {
        var self = this;
        if (!self.$lazyUrl) {
            self.$lazyUrl = self.context.prototype.$url;
            fetch = !!self.$lazyUrl;
        }
        if (value && value.$url) {
            self.$lazyUrl = value.$url;
            fetch = true;
        }
        if (fetch) {
            _ext.data.fetch(self.context, {
                $url: self.$lazyUrl
            }, function(dataset, response){
                self.dataset = dataset;
                self._render();
            });
        }
        else {
            if (value.$nodes || value.$links) {
                if (!self.dataset) {
                    self.dataset = {};
                }
                _ext.data.applyDelta(self.context, self.dataset, value);
                self._render();
            }
        }
        
    }
};


exports.stylesheets = ["/ui-d3-graph/public/ui-d3-graph.css"];
exports.create = function(context){
    return new TagCloud(context);
    
};
