let _d3 = require('./deps/index');
let _ressourcePath = "/ui-d3-graph/public/";
let _locale = require('streamline-locale');

exports.stylesheets = [_ressourcePath + "ui-d3-graph.css"];

class d3ScrollBar {
    constructor(settings, callback) {
        let self = this;
        this.elements = {
            dragBar: {}
        };
        this.containerId = settings.containerId;
        this.scrollviewSize = settings.scrollviewSize; //this is the entire view that can be scrolled
        this.isVertical = settings.isVertical;
        this.itemCount = settings.itemCount;
        this.itemSize = settings.itemSize;
        this.length = settings.length;
        this.width = settings.width;
        this.buttonLength = settings.addButtons ? settings.width : 0;
		this.opacity = {
			full: 1.0,
			medium: 0.8,
			half: 0.5,
			light: 0.3
		};
		this.callback = callback;

        this._init();


        // this.
    }

    _init() {
        let self = this;

        let g = _d3.select('.' + this.containerId);

        //Get length of container
        if(!this.length) {
            //Todo - calculate size of container from d3
            // let containerBox = _d3.select('.' + this.containerId).node().getBBox();
            // let containerSize = this.isVertical ? containerBox.height : containerBox.width;//Width of heading text

        }

		let x =  _d3.transform(g.attr("transform")).translate[0];
		let y =  _d3.transform(g.attr("transform")).translate[1];
        


        // ---------------- Range ---------------------------------
        this.rangeLength = this.length - (2 * this.buttonLength);

        this.elements.$range = g.append('rect')
			.attr('class', 's-ui-d3-scrollbar-range')
            .attr('x', 0)
			.attr('width', this.width)
            .attr('y', this.buttonLength)//this.width)
            .attr('height', this.rangeLength)//this.length - (2 * this.buttonLength))//this.width))
			.attr('fill-opacity', this.opacity.full)
			.attr('cursor', 'ns-resize')
            .on('click', function(d) {
                let yPos = _d3.mouse(this)[1];
                if(yPos > self.elements.dragBar.min) {
                    //clicked below dragbar
                    let max = Math.min(self.elements.dragBar.max + self.elements.dragBar.length, self.length - self.buttonLength);//self.width);
                    self._move(max - self.elements.dragBar.length, true);
                    self._runCallback('dragend');
                    
                } else {
                    //clicked above dragbar
                    self._move(Math.max(self.elements.dragBar.min - self.elements.dragBar.length, self.buttonLength), true);//self.width), true);
                    self._runCallback('dragend');
                }
            });
        
        this.elements.range = {
            min : this.buttonLength,//this.width,
            max : this.length - this.buttonLength//this.width
        };

        // ----------------Drag Bar ---------------------------------
        //Calculate size of dragBar
        if(!self.scrollviewSize) {
            //If we  werent given the size of the scrollViewSize then
            //we need to calculate the size of the scrollable view
            //based on the number of items and size of each item
            self.scrollviewSize = this.itemCount * this.itemSize;
        }
        
        let dragBarLength = (this.rangeLength / self.scrollviewSize) * this.rangeLength;
        
        this.elements.dragBar = {
            min: this.buttonLength,//this.width,
            max: dragBarLength + this.buttonLength, //+ this.width
            length: dragBarLength
        };

        let dragBar = _d3.behavior.drag().origin(function () {
			let t = _d3.select(this);
			return { x: t.attr('x'), y: t.attr('y') };
		    })
            .on('drag', function () {
				let rect = _d3.select(this);
				let length = rect.attr('height'); //for vertical
				let $max = _d3.event.y + parseFloat(length);

				if (_d3.event.y >= self.elements.range.min && (_d3.event.y + parseFloat(length)) <= self.elements.range.max) {
					_d3.select(this).attr('y', _d3.event.y);
					self._move(_d3.event.y, true);

				}
			})
			.on('dragend', function () {
                self._runCallback('dragend');
			});
            
        this.elements.$dragBar = g.append('rect')
			.attr('class', 's-ui-d3-scrollbar-bar')
            .attr('x', 0)
			.attr('width', this.width)
            .attr('y', this.buttonLength)
			.attr('height', this.elements.dragBar.length)
			.attr('fill-opacity', this.opacity.half)
			.attr('cursor', 'auto')
            .call(dragBar);
       
        
        
    }
    _addScrollingButtons() {
        let self = this;
        let scrollInterval;

        this.runScrollTimer = false;
        this.elements.$btnUpLeft = g.append('rect')
			.attr('class', 's-ui-d3-scrollbar-btn')
            .attr('x', 0)
			.attr('width', this.width)
			.attr('y', 0)
			.attr('height', this.width)
			.attr('fill-opacity', this.opacity.full)
			.attr('cursor', 'auto')
            .on('mousedown', function(d) {
                self.runScrollTimer = true;
                scrollInterval = setInterval(function() {
                    if(self.elements.dragBar.min == self.width)
                        self.runScrollTimer = false;  
                    self._move(Math.max(self.elements.dragBar.min - 10, self.width), true);
                    !self.runScrollTimer && clearInterval(scrollInterval);                                       
                }, 250, false);

            }).on('mouseup', function(d) {
                clearInterval(scrollInterval);          
            });			
        this.elements.$btnDownRight = g.append('rect')
			.attr('class', 's-ui-d3-scrollbar-btn')
            .attr('x', 0)//containerBox.x)
			.attr('width', this.width)
            .attr('y', this.length - this.width)
			.attr('height', this.width)
			// .attr('fill', this.color)
			.attr('fill-opacity', this.opacity.full)
			.attr('cursor', 'auto')			
            .on('mousedown', function(d) {
                self.runScrollTimer = true;
                scrollInterval = setInterval(function() {
                    if(self.elements.dragBar.max == (self.length - self.width))
                        self.runScrollTimer = false;  
                    let max = Math.min(self.elements.dragBar.max + 10, self.length - self.width);
                    self._move(max - self.elements.dragBar.length, true);  
                    !self.runScrollTimer && clearInterval(scrollInterval);                  
                }, 250, false);
            }).on('mouseup', function(d) {
                clearInterval(scrollInterval);          
            });			
    }
    
	_move(dim, runCallback) {
        let self = this;

        if (dim >= this.elements.range.min && (dim +  this.elements.dragBar.length) <= this.elements.range.max) {
            this.isVertical ? self.elements.$dragBar.attr({y: dim}) : self.elements.$dragBar.attr({x: dim});
            this.elements.dragBar.min = dim;
            this.elements.dragBar.max = dim + this.elements.dragBar.length;
            self._runCallback('dragend');
		}

	}
	_runCallback(process) {
		let self = this;
		if (self.callback) {
			self.callback.apply(self, [
				process,
            (self.elements.dragBar.min / self.length) * self.scrollviewSize
            ]);
		}
	}
    
    
}

exports.create = function (settings, callback) {
    return new d3ScrollBar(settings, callback);
};