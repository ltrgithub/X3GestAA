let _d3 = require('../deps/index');
let _ressourcePath = "/@sage/ui-d3-graph/public/";
let _locale = require('streamline-locale');

class AxisDays {
    constructor(xScale, callback) {
        //pixels lookup to display type of label for days tick
        this.ticks = {
            longDays: 240,
            shortDays: 90,
            weeks: 40,
            months: 0
        };
        this.xScale = xScale;

        this._initialise();
        this._render();
    }

    dispose() { }

    _initialise() {
        var self = this;
        self.axisDaysGroup = _d3.select('.gantt-axis.days');
    }

    render() { // public method
        this._render();
    }

    _render() {
        let self = this;

        self.axis = _d3.svg.axis()
            .scale(self.xScale)
            .tickSize(14, 0, 0)
            .orient('top');

        let adjustTextLabels = function (selection) {
            let height = self.height ? self.height / 2 : 10;
            let zoomState = self._getZoomState();
            let days = 1;
            switch (zoomState) {
                case 'months':
                    days = 30;
                    break;
                case 'weeks':
                    days = 7;

                    break;
                case 'shortDays':
                    days = 1;

                    break;

            }

            selection.selectAll('text')
                .attr('transform', 'translate(' + self._daysToPixels(days) / 2 + ',' + 14 + ')');
        };


        self._adjustTimeAxis();

        self.axisDaysGroup.transition().duration(300)
            .call(self.axis)
            .call(adjustTextLabels);

    }

    _adjustTimeAxis() {
        let self = this;
        let zoomState = this._getZoomState();
        switch (zoomState) {
            case 'shortDays':
                self.axis
                    .ticks(_d3.time.days, 1)
                    .tickFormat(d => _d3.time.format('%e')(d))
                    .tickSubdivide(false);
                break;
            case 'longDays':
                self.axis
                    .ticks(_d3.time.days, 1)
                    .tickFormat(d => _d3.time.format('%a %e')(d))
                    .tickSubdivide(false);
                break;
            case 'weeks':
                self.axis
                    .ticks(_d3.time.mondays, 1)
                    .tickFormat(null)
                    .tickSubdivide(6);
                break;
            default:
                self.axis
                    .ticks(_d3.time.months, 1)
                    .tickFormat(null)
                    .tickSubdivide(1);
                break;

        }
    }

    _getZoomState() {
        let delta = this._daysToPixels(7);
        return _d3.entries(this.ticks).filter(function (e) { return e.value <= delta; })[0].key;
    }

    _daysToPixels(days, timeScale) {
        let d1 = new Date();
        timeScale || (timeScale = this.xScale);
        return timeScale(_d3.time.day.offset(d1, days)) - timeScale(d1);
    }
}
exports.create = function (xScale, callback) {
    return new AxisDays(xScale, callback);
};
