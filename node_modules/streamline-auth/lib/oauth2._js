"use strict";

var config = require("syracuse-main/lib/nodeconfig").config;
var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var url = require("url");
var querystring = require("querystring");
var checkUser = require('streamline-auth/lib/checkUser');
var authHelper = require('streamline-auth/lib/helpers');
var adminHelpers = require('syracuse-collaboration/lib/helpers');
var httpClient = require('syracuse-httpclient/lib/httpClient');

//tracer = console.log;

function create(config, redirectUri) {
	return new function() {
		var self = this;

		/// first step of authentication: redirect to OAuth2 server
		this.loginStart = function(_, request, response, session) {
			var params = {};
			params.redirect_uri = redirectUri;
			params.response_type = 'code';
			params.scope = config.scope;
			params.state = request.url;
			params.client_id = config.clientId;
			var redirectUrl = config.baseSite + config.authorizePath + '?' + querystring.stringify(params);
			response.writeHead(303, {
				"content-type": "text/html",
				location: redirectUrl
			});
			response.end('<html>Use <a href="' + redirectUrl + '">Login</a> if redirect does not work automatically</html>');
			return false;
		};

		function getAccessToken(_, code, params) {
			params.client_id = config.clientId,
			params.client_secret = config.clientSecret,
			params[params.grant_type === 'refresh_token' ? 'refresh_token' : 'code'] = code;
			var result = httpClient.httpRequest(_, {
				method: 'POST',
				url: config.baseSite + config.accessTokenPath,
				headers: {
					'content-type': 'application/x-www-form-urlencoded',
				}
			}).end(querystring.stringify(params)).response(_).checkStatus(200).readAll(_);
			// response should be JSON according to http://tools.ietf.org/html/draft-ietf-oauth-v2-07
			// but some sites return urlencoded
			result = result[0] === '{' ? JSON.parse(result) : querystring.parse(result);
			return result;
		}

		function getUserInfo(_, accessToken) {
			var parsed = url.parse(config.dataRequestURL);
			var resp = httpClient.httpRequest(_, {
				method: 'GET',
				url: config.dataRequestURL,
				headers: {
					authorization: 'Bearer ' + accessToken,
					host: parsed.host,
					'content-length': 0,
				},
			}).end().response(_);
			var result = resp.readAll(_);
			if (!result || result[0] !== '{') throw authHelper.error(resp.statusCode, "getUserInfo request failed: " + resp.statusCode);
			result = JSON.parse(result);
			if (result.error && result.error.message) throw authHelper.error(resp.statusCode, result.error.message);
			return result;
		}

		/// second step of authentication: obtain access token and user name
		this.loginCallback = function(_, request, response) {
			tracer && tracer("OAUTH2 LOGIN CALLBACK " + request.url);
			var parsed = url.parse(request.url);
			var queryData = querystring.parse(parsed.query);
			if (queryData.error) throw authHelper.error(403, queryData.error);
			if (!queryData.code) throw authHelper.error(403, "internal error: authorization code missing");
			var params = {};
			params.redirect_uri = redirectUri;
			// params['state'] = queryData.state;
			params.grant_type = 'authorization_code';

			tracer && tracer("Before getting access token");
			// get access token 
			var tokens = getAccessToken(_, queryData.code, params);
			// get user name
			tracer && tracer("Result of access token ", tokens);
			var json = getUserInfo(_, tokens.access_token);
			tracer && tracer("Result of user name ", json);
			var userField = config.userField || "user";
			var login = userField.split('.').reduce(function(obj, field) {
				var m = /^(\w+)\[(\d+)\]$/.exec(field);
				return m ? obj[m[1]][m[2]] : obj[field];
			}, json);
			var user = checkUser.fromLoginPage(_, request, 'oauth2', login, null, null, config.name);

			request.session.authData = {
				login: user,
				password: tokens.access_token
			};
			authHelper.redirect(_, request, response, request.session.authTargetUrl || '/');
		};
	};
};

exports.getServerList = function(_) {
	if (!authHelper.isAllowed("oauth2")) return [];
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	// fetch OAuth2 server data
	return db.fetchInstances(_, db.model.getEntity(_, "oauth2"), {
		sdataWhere: ""
	}).filter_(_, function(_, oauth2) {
		return oauth2.active(_);
	}).map_(_, function(_, oauth2) {
		var name = oauth2.name(_);
		return {
			href: "/auth/oauth2/" + name + '/loginStart',
			title: oauth2.displayName(_) || name,
		};
	});
};

function loginStart(_, request, response) {
	return request.oauth2.loginStart(_, request, response);
}

function loginCallback(_, request, response) {
	return request.oauth2.loginCallback(_, request, response);
}

var dispatcher = authHelper.dispatcher(4, {
	loginStart: loginStart,
	loginCallback: loginCallback,
});

exports.dispatch = function(_, request, response) {
	var m = /\/[^\/]*\/[^\/]*\/([^\/]*)\//.exec(request.url);
	if (!m || !m[1]) throw authHelper.error(404, "internal error: bad url: " + request.url);
	var name = m[1];
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	var server = db.fetchInstances(_, db.model.getEntity(_, "oauth2"), {
		jsonWhere: {
			name: name,
		}
	})[0];
	if (!server) throw authHelper.error(404, "internal error: oauth2 server not found: " + name);
	if (!server.active(_)) throw authHelper.error(403, "internal error: oauth2 server not active: " + name);
	var redirectUri = server._data.redirectUri || ("http://" + request.headers.host + "/auth/oauth2/" + name + "/loginCallback");
	request.oauth2 = create(server._data, redirectUri);
	return dispatcher(_, request, response);
};