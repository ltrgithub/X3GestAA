"use strict";

var config = require("syracuse-main/lib/nodeconfig").config;
var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var url = require("url");
var util = require('util');
var querystring = require("querystring");
var OAuth2 = require("node-oauth").OAuth2;
var checkUser = require('streamline-auth/lib/checkUser');
var authHelper = require('streamline-auth/lib/helpers');
var adminHelpers = require('syracuse-collaboration/lib/helpers');

//var tracer = console.log;
//OAuth2 authentication
exports.create = function(config) {
	return new function() {
		var auth = new OAuth2(config.clientId, config.clientSecret, config.baseSite, config.authorizePath, config.accessTokenPath);
		var self = this;

		/// first step of authentication: redirect to OAuth2 server
		this.authenticate = function(_, request, response, session) {
			if (config.inactive) { // server inactive: no authentication
				tracer && tracer("OAuth2 server inactive");
				self.forbidden(request, response, "OAuth2 server inactive");
				return false;
			}
			var params = {};
			params['redirect_uri'] = config.redirectUri;
			params['response_type'] = 'code';
			params['scope'] = config.scope;
			params['state'] = request.url;
			var redirectUrl = auth.getAuthorizeUrl(params);
			// console.log("REDIR"+redirectUrl);
			response.writeHead(303, {
				"Content-Type": "text/html",
				"Location": redirectUrl
			});
			response.end('<html>Use <a href="' + redirectUrl + '">Login</a> if redirect does not work automatically</html>');
			return false;
		};

		this.forbidden = function(request, response, error) {
			response.writeHead(403, {
				"Content-Type": "text/plain"
			});
			if (error) {
				response.end("Error in authentication: " + util.format(error));
			} else {
				response.end("Authorization Required");
			}
			return false;
		};

		/// second step of authentication: obtain access token and user name
		this.authenticate2 = function(request, response, _) {
			var parsed = url.parse(request.url);
			var queryData = querystring.parse(parsed.query);
			if (queryData.error) {
				self.forbidden(request, response, queryData.error);
				return false;
			}
			if (!queryData.code) {
				self.forbidden(request, response, "No authorization");
				return false;
			}
			var params = {};
			params['redirect_uri'] = config.redirectUri;
			// params['state'] = queryData.state;
			params['grant_type'] = 'authorization_code';

			try {
				tracer && tracer("Before getting access token");
				// get access token 
				var tokens = auth.getOAuthAccessToken(queryData.code, params, [_]);
				var data = {
					access_token: tokens[0],
					refresh_token: tokens[1],
					result: tokens[2],
				};
				// get user name
				tracer && tracer("Result of access token " + util.format(data));
				var result = auth.get(config.dataRequestURL, data.access_token, [_])[0];
				tracer && tracer("Result of user name " + util.format(result));
				var userField = config.userField || "user";
				var login = JSON.parse(result)[userField];
				var user = checkUser.fromLoginPage(_, request, 'oauth2', login, null, null, config.name);

				session.authData = {
					login: user,
					password: data.access_token
				};

				return true;
			} catch (error) {
				self.forbidden(request, response, error);
			}
		};
	};
};

exports.getServerList = function(_) {
	if (!authHelper.isAllowed("oauth2")) return [];
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	// fetch OAuth2 server data
	return db.fetchInstances(_, db.model.getEntity(_, "oauth2"), {
		sdataWhere: ""
	}).filter_(_, function(_, oauth2) {
		return oauth2.active(_);
	}).map_(_, function(_, oauth2) {
		var name = oauth2.name(_);
		return {
			href: "/auth/oauth2/" + name,
			title: oauth2.displayname(_) || name,
		};
	});
};