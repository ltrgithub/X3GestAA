"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var url = require("url");
var util = require('util');
var querystring = require("querystring");
var OAuth2 = require("node-oauth").OAuth2;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require

exports.create = function(validateUser) {
  return new function() {
    var auth =  new OAuth2(config.oauth2.clientId, config.oauth2.clientSecret, config.oauth2.baseSite, config.oauth2.authorizePath, config.oauth2.accessTokenPath);
    var self = this;

    this.originalPath = "";

    // wrapper for streamline (auth.get)
    this._wrapGet = function(requestURL, access_token, cb) {       
         auth.get(requestURL, access_token, function(error, result, response) {
             cb(error, result); // omit response parameter
         });
     };

     // wrapper for streamline (auth.getOAuthAccessToken)
    this._wrapGetToken = function(code, params, cb) {
        auth.getOAuthAccessToken(code, params, function(error, access_token, refresh_token, result) {
            cb(error, {"access_token": access_token, "refresh_token": refresh_token, "result": result});
        });
      };
      
/// first step of authentication: redirect to OAuth2 server
    this.authenticate = function(request, response, _) {
      var params = {};
      params['redirect_uri'] = config.oauth2.redirectUri;
      params['reponse_type'] = 'code';
      params['scope']= config.oauth2.scope;
      var requestUrl = url.parse(request.url);
      params['state'] = requestUrl.path; // path without server name (for keeping session data during redirect)
      var redirectUrl = auth.getAuthorizeUrl(params)
      response.writeHead(303, {"Content-Type": "text/html", "Location": redirectUrl});
      response.end('<html>Use <a href="'+redirectUrl+'">Login</a> if redirect does not work automatically</html>');
      return false;
    }

    this.forbidden = function(request, response, error) {
      response.writeHead(403, {
        "Content-Type": "text/plain"
      });
      if (error) {
        response.end("Error in authentication: "+util.format(error));
      }
      else
      {
        response.end("Authorization3 Required");
      }
    };

    

/// second step of authentication: obtain access token and user name
    this.authenticate2 = function(request, response, _) {    
      var parsed = url.parse(request.url);
      var queryData = querystring.parse(parsed.query);
      var params= {};
      params['redirect_uri'] = config.oauth2.redirectUri;
      self.originalPath = queryData.state;
      params['state'] = self.originalPath;
      
      try
      {
        // get access token
        var data = self._wrapGetToken(queryData.code, params, _);
        // get user name
        var result = self._wrapGet(config.oauth2.requestURL, data.access_token, _);
        var user = JSON.parse(result).user;
        // user in DB? (no password check)
        var ok = validateUser(request.session, user, undefined, _);

        if (!ok) { 
          self.forbidden(request, response, "User "+user+ " not in database");
          return false;
        }
        request.session && request.session.afterAuthentication({
               user: user,
               password: data.access_token
        });
        
        return true;
      }
      catch (error)
      {
        self.forbidden(request, response, error);
      }
    }
  }
}