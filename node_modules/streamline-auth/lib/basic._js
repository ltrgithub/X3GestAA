"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");

var basicMatchRegex = /^[Bb]asic\s([a-zA-z0-9=]+)/;

exports.create = function(validatePassword) {
  return new function() {
    function _unAuthenticated(request, response, options) {
      if (!options) options = {}
      if (!options.realm) options.realm = '"Syracuse"';
      response.writeHead(401, {
        "Content-Type": "text/plain",
        "WWW-Authenticate": "Basic realm=" + options.realm
      });
      response.end("Authorization Required");
      return false;
    }

    this.authenticate = function(request, response, _) {
      var credentials = basicMatchRegex.exec(request.headers.authorization)
      if (!(credentials && credentials[1])) return _unAuthenticated(request, response);

      var usrpwd = new Buffer(credentials[1], "base64").toString("utf8").split(":");
      if (usrpwd.length < 2) return _unAuthenticated(request, response);

      var user = usrpwd[0];
      var pass = usrpwd[1];
      if (!(user && pass)) return _unAuthenticated(request, response);

      var ok = validatePassword(request.session, user, pass, _);

      if (!ok) return _unAuthenticated(request, response);

      tracer && tracer("User authenticated.");
      // TODO: should not keep password around!
      request.session && request.session.afterAuthentication({
        user: user,
        password: pass
      });
      return true;
    };
    this.forbidden = function(request, response) {
      response.writeHead(403, {
        "Content-Type": "text/plain"
      });
      response.end("Authorization Required");
    };
  }

}