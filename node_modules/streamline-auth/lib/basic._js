"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var config = require('syracuse-main/lib/nodeconfig').config;
var fs = require('streamline-fs');
var crypto = require('crypto');
var locale = require('syracuse-core/lib/locale');
var basicMatchRegex = /^[Bb]asic\s([a-zA-Z0-9\+\/]+\=*)/;


function setLocaleFromRequest(request, _) {
	var header = request.headers['accept-language'];
	if (header) {
		var loc = /^[-a-zA-Z]+/.exec(header);
		if (loc) {
			locale.setCurrent(_, loc[0]);
		}
	}
}

function getRedirectPageContent(reason, _) {
	var delay = 5,
		unauth = locale.format(module, "unauth"),
		url = "/index.html",
		redirect = locale.format(module, "redirect", "<a href='" + url + "'>", "</a>&nbsp;", "<span id='counter'>" + delay + "</span>"),
		content = '<!DOCTYPE html>';
	content += '<html><head>';
	content += '<META HTTP-EQUIV="refresh" content="' + delay + ';URL=' + url + '">';
	content += '<style>';
	content += 'body { font-family:Arial, Helvetica, sans-serif; font-stretch:wider; }';
	content += '</style>';
	content += '<script type="text/javascript">';
	content += 'var delay=' + delay + ';';
	content += 'function init(){ setTimeout(countdown, 1000);}';
	content += 'function countdown(){';
	content += "document.getElementById('counter').innerHTML = '' + (--delay);";
	content += 'if (delay === 0) return;';
	content += 'setTimeout(countdown, 1000);';
	content += '}';
	content += "window.addEventListener ? window.addEventListener('load',init,false) : window.attachEvent('onload',init);";
	content += '</script>';
	content += '</head>';
	content += '<body>';
	content += '<h1>' + reason + '</h1><br>' + redirect + '';
	content += '</body></html>';
	return content;
}

exports.textUnauth = function(request, _) {
	setLocaleFromRequest(request, _);
	return getRedirectPageContent(locale.format(module, "unauth"), _);
};

exports.textUnlicensed = function(request, _) {
	setLocaleFromRequest(request, _);
	return getRedirectPageContent(locale.format(module, "nolicense"), _);
};

exports.create = function(validatePassword, standardConfig) {
	return new function() {
		function _unAuthenticated(_, request, response, reason) {
			response.writeHead(401, {
				"Content-Type": "text/html; charset=utf-8",
				"WWW-Authenticate": 'Basic realm=' + config.session.realm
			});
			var text = reason || exports.textUnauth(request, _);
			response.end(text);
			return false;
		}

		function _unLicensed(request, response, _) {
			response.writeHead(402, {
				"Content-Type": "text/html; charset=utf-8"
			});
			response.end(exports.textUnlicensed(request, _));
			return false;
		}

		this.authenticate = function(request, response, _) {
			if (request.specialLogin) return true;
			var credentials = basicMatchRegex.exec(request.headers.authorization);
			if (!(credentials && credentials[1])) return _unAuthenticated(_, request, response);

			var usrpwd = new Buffer(credentials[1], "base64").toString("binary");
			var index = usrpwd.indexOf(':');
			if (index < 0) return _unAuthenticated(_, request, response);

			var user = usrpwd.substr(0, index);
			var pass = usrpwd.substr(index + 1);

			if (!(user && pass)) return _unAuthenticated(_, request, response);

			// var passHash = computeHash(user, pass);

			var status = validatePassword(request.session, user, pass, null, "basic", standardConfig, _);
			switch (status) {
				case 1:
					return _unAuthenticated(_, request, response);
				case 2:
					return _unLicensed(request, response, _);
				case 3:
					return require('./changePassword').setPassword(request, response, user, _);
				case 4:
					return _unAuthenticated(_, request, response, locale.format(module, "userInactive", user));
				case 0:
					break;
				default:
					// non-fatal error
					response.writeHead(406, {
						"Content-Type": "text/plain"
					});
					response.end("Status: " + status);
					return false;
			}

			tracer && tracer("User authenticated.");
			request.session && request.session.afterAuthentication({
				user: user,
				authorization: request.headers.authorization
			});
			return true;
		};
		this.unAuthenticated = function(request, response, _) {
			return _unAuthenticated(_, request, response);
		};

		this.forbidden = function(request, response, message) {
			response.writeHead(403, {
				"Content-Type": "text/plain"
			});
			response.end(message || locale.format(module, "unauth"));
		};
	};

};