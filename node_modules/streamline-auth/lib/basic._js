"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var config = require('syracuse-main/lib/nodeconfig').config;
var locale = require('syracuse-core/lib/locale');
var checkUser = require('streamline-auth/lib/checkUser');
var authHelper = require('streamline-auth/lib/helpers');
var changePasswordError = require('streamline-auth/lib/changePassword').changePasswordError;

function unauthorized() {
	return authHelper.unauthorized('Basic realm=' + config.session.realm);
}

exports.authenticate = function(_, request, response, session) {
	var credentials = /^basic\s([\w\+\/]+\=*)/i.exec(request.headers.authorization);
	if (!(credentials && credentials[1])) throw unauthorized();
	var usrpwd = new Buffer(credentials[1], "base64");
	// Chrome uses UTF8 for authentication
	var agent = request.headers["user-agent"];
	if (agent && (agent.indexOf(" Chrome/") >= 0)) {
		usrpwd = usrpwd.toString("utf8");
	} else {
		usrpwd = usrpwd.toString("binary");
	}
	var index = usrpwd.indexOf(':');
	if (index < 0) throw unauthorized();

	var login = usrpwd.substr(0, index);
	var pass = usrpwd.substr(index + 1);

	if (!(login && pass)) throw unauthorized();

	var user = checkUser.fromLoginPage(_, request, "basic", login, pass, 'Basic realm=' + config.session.realm);

	// redirect to password change dialog if requested by config
	if (user.changePassword(_)) throw changePasswordError(_, request, response, login);

	tracer && tracer("User authenticated.");
	session.authData = {
		user: login,
		authorization: request.headers.authorization
	};
	return true;
};