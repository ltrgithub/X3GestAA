"use strict";

var helpers = require('syracuse-core/lib/helpers');
var sys = require("util");

var tracer; // = console.log;

exports.create = function(validatePassword, standardConfig) {
	return new function() {
		function _unAuthenticated(request, response, options) {
			if (!options) options = {};
			if (!options.realm) options.realm = '"Syracuse"';
			response.writeHead(401, {
				"Content-Type": "text/plain",
				"WWW-Authenticate": "Basic realm=" + options.realm
			});
			response.end("Authorization Required");
			return false;
		}

		function _unLicensed(request, response) {
			response.writeHead(402, {
				"Content-Type": "text/plain"
			});
			response.end("No license");
			return false;
		}

		this.authenticate = function(request, response, _) {
			//
			if (!request.client.authorized) return this.forbidden(request, response);
			var user = ((request.connection.getPeerCertificate() || {}).subject || {}).CN;
			if (!user) return _unAuthenticated(request, response);
			var status = validatePassword(request.session, user, standardConfig, _);

			switch (status) {
				case 1:
					return _unAuthenticated(request, response);
				case 2:
					return _unLicensed(request, response);
			}

			tracer && tracer("User authenticated.");
			// TODO: should not keep password around!
			request.session && request.session.afterAuthentication({
				user: user,
				//		        password: pass
			});
			//
			return true;
		};
		this.forbidden = function(request, response) {
			response.writeHead(403, {
				"Content-Type": "text/plain"
			});
			response.end("Authorization Required");
		};
	};
};