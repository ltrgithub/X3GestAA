'use strict';

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer('session.trace');
var mongodb = require('streamline-mongodb');
var config = require("../../../nodelocal").config || {};
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var checkUser = require('streamline-auth/lib/checkUser');
var urlHelper = require('url');
var authHelper = require('streamline-auth/lib/helpers');

// Temp for debugging
tracer = tracer || console.log;

// Extract pfx certificate and password
// Save to variables and pass as options in Sage ID methods
var path = require('path');
var fs = require('fs');
var pfxPath = path.join(__dirname, "../..") + '/streamline-auth/lib/pfx/Sage_ERP_X3_Development.pfx';
var pfx_object = fs.readFileSync(pfxPath);
var pfxTxtPath = path.join(__dirname, "../..") + '/streamline-auth/lib/pfx/Sage_ERP_X3_Development.txt';
var array = fs.readFileSync(pfxTxtPath).toString().split('\n');
var pass = "";
for (var i = 0; i < array.length; i++) {
	var text = array[i].replace(/(\r\n|\n|\r)/gm, "");
	if (text.indexOf("CertPwd") > -1) {
		pass = array[i].split("=")[1].trim();
	}
};
// Accept sessionId from Sage ID
// Remove session from list of sessions and redirect to home page
exports.logoutSessionEnded = function(request, response, sessionId, _) {
	return sessionManager.logout(_, request, response, {
		sessionEnd: true,
		sessionId: sessionId
	});
};

// Determine which action is necessary for session based on last activity time and timeout
// Execute respected sage-id method to extend or end session
exports.extendSession = function(request, response, session, data, _) {
	if (data.notificationType === 'ExpiryDue') {
		var expirationDate = data.expireDate;
		var lastActivity = session.lastAccess;
		var newExpirationDate = new Date(lastActivity.getTime() + 1800000);
		if (newExpirationDate > expirationDate) return true;

		// Mark session as expiration due
		// If any activity is done, session must be extended
		session.expireDue = true;
		session.authData = null;
	}

	return false;
};

function redirect(_, response, url) {
	response.writeHead(307, {
		location: url,
	});
	response.end();
}

function baseOptions() {
	return {
		sageIdBase: "https://services.sso.staging.services.sage.com/SSO",
		pfx_object: pfx_object,
		pass: pass,
	};
}

function logout(_, request, response) {
	var options = baseOptions();
	options.sessionEnd = false;
	options.sessionId = "";
	if (require('sage-id').create(options).logout(request, response, request.session, _)) {
		// logout successful
		request.session.authData = null;
	}
}

function renew(_, request, response) {
	var session = request.session;
	// sanity check
	if (!session || !session.authData || !session.authData.auth) throw new Error("internal error: renew outside of auth context");
	// if we don't need to renew, auth is ok so return true.
	return true; // for now
	/*
	if (!session.expireDue) return true;
	
	var options = baseOptions();
	var authModule = require('sage-id').create(options);
	var authModule 
	var authData = .sessionExtend(request, response, session, _);
	if (!authData || !authData.auth) throw authHelper.unauthenticated();
	return true;
		require("streamline-auth/lib/sage-id").verifyUser(request, response, authData, _);
	} else {
		// Returned authData, contains email, accessToken, identityId, and auth
		// auth contains whether or not user was authenticated successfully
		authData = authModule.dispatch(request, response, session, _);
		// sessionNotify only apart of authData during notification handling
		// Extract session and determine whether or not to extend or end session
		if (authData.sessionNotify) {
			session = _sessions[authData.sessionId];
			var extend = require("streamline-auth/lib/sage-id").extendSession(request, response, session, authData, _);
			if (extend) authData = authModule.sessionExtend(request, response, session, _);
		}
	}*/
}

exports.dispatch = function(_, request, response) {
	var session = request.session;

	// intercept /auth/sage-id/failure URL
	if (/^\/auth\/sage-id\/failure/.test(request.url)) {
		session.loginError = "Sage ID operation cancelled!";
		authHelper.redirect(_, response, "/auth/login/page");
		return false;
	}

	var sageIdAuth = require("sage-id").create({
		httpClient: require('syracuse-httpclient/lib/httpClient').httpRequest,
		sageIdBase: "https://services.sso.staging.services.sage.com/SSO",
		prefix: "/auth/sage-id/",
		pfx_object: pfx_object,
		pass: pass,
		CallbackBase: "http://" + request.headers.host + "/auth/sage-id/",
		FailureUri: "http://" + request.headers.host + "/auth/sage-id/failure",
		CancelAllowed: true,
		State: "test",
		SessionLengthMinutes: 10,
		SignOnAfterSuccess: true,
		ActivateAfterSuccess: true,
	});
	var authData = sageIdAuth.dispatch(request, response, session, _);
	if (!authData) return; // sage-id redirected user to the Sage ID site.
	if (authData.auth) {
		var user = checkUser.fromLoginPage(_, request, 'sage-id', authData.email, null);

		authData.logout = logout;
		authData.renew = renew;
		session.authData = {
			user: request.session.getData('userLogin'),
			password: authData.accessToken
		};
		session.getUserProfile(_);
		authHelper.redirect(_, response, session.authTargetUrl || '/');
	} else {
		// see later
	}
};