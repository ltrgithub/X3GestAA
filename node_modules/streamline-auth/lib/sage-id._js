'use strict';

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer('session.trace');
var mongodb = require('streamline-mongodb');
var config = require("../../../nodelocal").config || {};
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;

// Temp for debugging
tracer = tracer || console.log;

// Verify user authenicated into Sage ID exists in X3 users table in mongoDB
exports.verifyUser = function(request, response, data, _) {
	// Lookup user by email in users table
	var mongoConfig = config.mongo || {};
	var server = new mongodb.Server(mongoConfig.host || 'localhost', mongoConfig.port || 27017, {});
	var db = new mongodb.Db(mongoConfig.database || 'syracuse', server, {
		w: 1 // majority
	});

	// Find specific user based on email
	var filter = {
		email: '' + data.email
	};
	var user = db.open(_).collection('User', _).find(filter, _).toArray(_)[0];
	request.session.data.userID = user._id;
	db.close(_);

	// Finish authentication
	// Save token and user login in session
	request.session && request.session.afterAuthentication({
		user: user.login,
		password: data.accessToken
	});

	return true;
};

// Update session with new sessionId provided by Sage ID
// This is required as when the session is extended it will need to be able to find
// session to update accessToken
exports.updateSessionWithID = function(request, response, _sessions, cookie, data, _) {
	var session = _sessions[cookie];
	delete _sessions[cookie];
	session.id = data.sessionId;
	_sessions[data.sessionId] = session;
	return session;
};

// Accept sessionId from Sage ID
// Remove session from list of sessions and redirect to home page
exports.logoutSessionEnded = function(request, response, sessionId, _) {
	return sessionManager.logout(_, request, response, {
		sessionEnd: true,
		sessionId: sessionId
	});
};

// Determine which action is necessary for session based on last activity time and timeout
// Execute respected sage-id method to extend or end session
exports.extendSession = function(request, response, session, data, _) {
	var expirationDate = data.expireDate;
	var lastActivity = session.lastAccess;
	if (data.notificationType === 'ExpiryDue') {
		var newExpirationDate = new Date(lastActivity.getTime() + 1800000);
		if (newExpirationDate > expirationDate)
			return true;

		// Mark session as expiration due
		// If any activity is done, session must be extended
		session.expireDue = true;
		session.authData = null;
	}

	return false;
};
