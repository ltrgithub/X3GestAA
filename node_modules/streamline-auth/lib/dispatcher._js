"use strict";

var adminHelpers = require('syracuse-collaboration/lib/helpers');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var locale = require('syracuse-core/lib/locale');
var fs = require('streamline-fs');
var querystring = require('querystring');
var url = require('url');

exports.dispatcher = function(config) {
	return function(_, request, response) {

		// listing of all authentication methods
		if (/index2\.html$/.exec(request.url)) {
			var path = "/syracuse-main/html/main.html?url=" + encodeURIComponent("?representation=home.$navigation");
			response.writeHead(200, {
				"Content-type": "text/html"
			});
			response.write(_, '<html>Authentication methods:<br><a href="' + request.url.replace("/index2.html", path) + '">Standard</a><br>');
			response.write(_, '<html><a href="' + request.url.replace("/index2.html", '/auth/digest' + path) + '">Digest</a><br>');
			response.write(_, '<html><a href="' + request.url.replace("/index2.html", '/auth/basic' + path) + '">Basic</a><br>');
			var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
			// fetch OAuth2 server data
			var oauth2s = db.fetchInstances(_, db.model.getEntity(_, "oauth2"), {
				sdataWhere: ""
			});
			var i;
			for (i = 0; i < oauth2s.length; i++) {
				if (oauth2s[i].active(_)) {
					var name = oauth2s[i].name(_);
					var displayname = oauth2s[i].displayName(_) || name;
					response.write(_, '<html><a href="' + request.url.replace("/index2.html", "/auth/oauth2-" + name + path) + '">' + displayname + '</a><br>');
				}
			}
			// if there is not setting instance, also provide link for OAuth2 server in global configuration
			var setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {
				sdataWhere: ""
			});
			if (!setting && config.session.auth === "oauth2" && typeof(config.oauth2) != "undefined") {
				response.write(_, '<html><a href="' + request.url.replace("/index2.html", "/auth/oauth2-" + path) + '">Configured OAuth2 server</a><br>');
			}
			return response.end();
		}

		// OAuth2 redirect path equals "/redirect". In order to avoid parsing every url, it will be searched using a substring function first
		if (request.url.indexOf("/oauth2/redirect") >= 0 && url.parse(request.url).pathname === "/oauth2/redirect") {
			// second step of authentication
			if (!sessionManager.sessionManagement(_, request, response, {
				authRequired: true,
				forceAuth2: true
			})) return;
			// redirect to start page
			response.writeHead(303, {
				"Content-Type": "text/html",
				"Location": request.syracuseOriginalPath
			});
			response.end('<html><a href="/test">Link</a></html>');
			return;
		}

		// Processing the password change dialog
		if (request.url.indexOf("/auth/pwd--") === 0) {
			var token = request.url.substr(9);
			var newUrl = "/";
			var changePasswordModule = require('streamline-auth/lib/changePassword');
			var tmpLogin = changePasswordModule.getTempLogin(token, request.method === "GET"); // do not delete token for get request, because it will be necessary for subsequent POST request
			if (tmpLogin) {
				console.log("Login found for user " + tmpLogin.user);
				if (request.method === "GET") {
					// try to set locale for given user
					var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
					if (db) {
						var whereClause = "(login eq \"" + tmpLogin.user + "\")";
						var user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
							sdataWhere: whereClause
						});
						if (user) {
							var up = db.model.getEntity(_, "userProfile").factory.createInstance(_, null, db);
							up.loadUserProfile(_, user);
							var loc = up.selectedLocale(_);
							if (loc) {
								var code = loc.code(_);
								console.log("Set locale for password page " + code);
								if (code) locale.setCurrent(_, code);
							}
						}
					}
					// make changes in template for password page to enable localization
					var answer = fs.readFile(__dirname + "/../../syracuse-main/html/newPassword.html", "utf8", _);
					answer = changePasswordModule.localizeAnswer(answer, user);
					answer = answer.replace("{login}", user.login(_));
					answer = answer.replace("{realm}", config.session.realm);
					answer = answer.replace("{action}", "/auth/pwd" + token); // re-use token;
					response.writeHead(403, {
						"Content-Type": "text/html; charset=utf8"
					});
					response.end(answer);
					return;
				} else {
					// set new password
					var content = request.readAll(_);
					if (content) {
						var stringContent = content.toString("utf8");
						var query = querystring.parse(stringContent);
						var user;
						if (tmpLogin.user.toLowerCase() === query.login.toLowerCase()) {
							var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
							// fetch user
							var whereClause = "(login eq \"" + query.login + "\")";
							var users = db.fetchInstances(_, db.model.getEntity(_, "user"), {
								sdataWhere: whereClause
							});
							if (users && users.length) {
								// console.log("User found");
								user = users[0];
							}
						}
						if (user) {
							user.password(_, query.passwordHash);
							user.changePassword(_, false);
							user.save(_);
							// console.log("Password changed");
							/*
						var token = changePasswordModule.setTempLogin({
							user: query.login
						});
						// new url: replace or set authentication token in path, when it already starts with /auth/...,
						// otherwise add /auth/std prefix with authentication token
						/*						if (tmpLogin.url.substr(0, 6) === "/auth/") {
							newUrl = tmpLogin.url.replace(/^(\/auth\/(?:std|digest|basic|oauth2-\w*))(?:\-\-[0-9a-fA-F]*)?/, "$1" + token);
						} else {
							newUrl = "/auth/std" + token + tmpLogin.url;
						}*/
							newUrl = "/auth/std" + token + "/syracuse-main/html/main.html?url=%3Frepresentation%3Dhome.%24navigation";
						}
					}
				}
			}
			response.writeHead(303, {
				"Content-Type": "text/html",
				"Location": newUrl
			});
			response.end('<html><a href="/test">Link</a></html>');
			return;
		}

		if (request.url.indexOf("/sage-id/") >= 0) {
			return sessionManager.sessionManagement(_, request, response, {
				authRequired: true,
				forceAuth: false,
				forceAuth2: true,
				authType: "sage-id"
			});
		}

		// strip authentication header
		if (request.url.indexOf("/auth/") >= 0 && url.parse(request.url).pathname.indexOf("/auth/") === 0) {
			request.url = request.url.replace(/\/auth\/[\w-]+/, "");
			if (!request.url || request.url === "/") request.url = '/index.html';
			response.writeHead("301", {
				location: request.url,
			});
			return response.end();
		}

		if (/index3\.html$/.exec(request.url)) {
			var html = fs.readFile(__dirname + "/../../index3.html", "utf8", _);
			response.writeHead("200", {
				"Content-Type": "text/html"
			});
			response.write(_, html);
			return response.end();
		}
	};
};