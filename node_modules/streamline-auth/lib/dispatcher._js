"use strict";

var adminHelpers = require('syracuse-collaboration/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var fs = require('streamline-fs');
var querystring = require('querystring');
var url = require('url');
var config = require('config');
var authHelper = require('streamline-auth/lib/helpers');
var checkUser = require('streamline-auth/lib/checkUser');
var loginPage = require('streamline-auth/lib/loginPage');
var changePassword = require('streamline-auth/lib/changePassword');

function badRequest(_, request, response, message) {
	response.writeHead(400, {
		"content-type": "text/plain",
	});
	response.end(message);
	return false;
}

function invalidAuthMethod(_, request, response, tok) {
	return badRequest(_, request, response, "invalid authentication method: " + tok);
}

function _ensureUserProfileLoaded(_, session) {
	session && session.getUserProfile(_);
	return true;
}

exports.ensureAuthenticated = function(_, request, response) {
	var session = request.session;
	if (!session) throw new Error("internal error: no session");

	var httpStatus, location;
	try {
		// Dispatch to authenticate handlers.
		// These handlers should throw if authentication fails and return true 
		// (without sending any response) if it succeeds.

		// if session is already authenticated, invoke renew hook if any, otherwise we are ok
		if (session.authData) {
			if (!session.authData.renew) return true;
			return session.authData.renew(_, request, response);
		}

		// if request is authenticated by a client-side certificate, handle it
		if (request.connection.authorized) {
			var certAuth = authHelper.getAuthModule("certificate");
			if (!certAuth) return invalidAuthMethod(_, request, response, tok);
			return certAuth.authenticate(_, request, response, request.session) && _ensureUserProfileLoaded(_, request.session);
		}

		// if request carries an authorization header, handle it
		if (request.headers.authorization) {
			var tok = request.headers.authorization.split(' ')[0].toLowerCase();
			var authModule = authHelper.getAuthModule(tok);
			if (!authModule) return invalidAuthMethod(_, request, response, tok);
			return authModule.authenticate(_, request, response, request.session) && _ensureUserProfileLoaded(_, request.session);
		}
		location = "/auth/login/page";
		session.loginError = "";
	} catch (ex) {
		location = ex.$httpLocation || "/auth/login/page";
		session.loginError = ex.message;
	}

	if (!/^\/auth\//.test(request.url)) session.authTargetUrl = request.url || '/';

	authHelper.redirect(_, request, response, location);

	// we are not authenticated
	return false;
};

exports.dispatcher = authHelper.dispatcher(2, {
	login: loginPage.dispatch,
	changePassword: changePassword.dispatch,
	oauth2: require('streamline-auth/lib/oauth2').dispatch,
	'sage-id': require('streamline-auth/lib/sage-id').dispatch,
});