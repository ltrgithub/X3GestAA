"use strict";

var locale = require("syracuse-core/lib/locale");
var fs = require('streamline-fs');
var config = require('syracuse-main/lib/nodeconfig').config;

//temporary login tokens (which preserve authentication after relocation)
var tempLogins = {};
var TOKEN_VALIDITY = 600000;

function setPassword(request, response, user, _) {
	var token = setTempLogin({
		user: user,
		url: request.url
	});
	var isJson = request && request.headers && ((request.headers["accept"] || "").indexOf("application/json") >= 0);
	if (isJson) {
		response.writeHead(200, {
			"Content-Type": "application/json"
		});
		response.end(JSON.stringify({
			$diagnoses: [{
				$message: locale.format(module, "explanation"),
				$severity: "error",
				$links: {
					continue: {
						$title: locale.format(module, "continue"),
						$type: "html",
						$target: "_self",
						$url: "/auth/pwd" + token
					}
				}
			}]
		}));
	} else {
		response.writeHead(303, {
			"Content-Type": "text/html",
			"Location": "/auth/pwd" + token
		});
		response.end('<html><a href="/test">Link</a></html>');
	}
	return false;
};
exports.setPassword = setPassword;

// build random hex string of length 6
function makeRString() {
	var n = Math.floor(Math.random() * (1 << 24));
	var st = n.toString(16);
	return st.length === 6 ? st : ("000000" + st).substr(st.length);
}

// add a new authentication token for this user
function setTempLogin(data) {
	var date = _clearLogins();
	var key = "--" + makeRString() + makeRString() + makeRString();
	while (key in tempLogins) {
		var n = Math.floor(Math.random() * (1 << 4));
		key += n.toString(16).substr(0, 1);
	}
	data._date = date;
	tempLogins[key] = data;
	return key;
};

// remove outdated authentication tokens
function _clearLogins() {
	var date = Date.now();
	var dateComp = date - TOKEN_VALIDITY;
	for (var id in tempLogins) {
		if (tempLogins[id]._date < dateComp) {
			delete tempLogins[id];
		}
	}
	return date;
}

// get user name of specified login token. If token is not available, null is returned.
function getTempLogin(key, keep) {
	var value = tempLogins[key];
	_clearLogins();
	if (value) {
		if (!keep) {
			delete tempLogins[key];
		}
		return value;
	}
	return null;
}

exports.getTempLogin = getTempLogin;
exports.setTempLogin = setTempLogin;