var locale = require("syracuse-core/lib/locale");
var fs = require('fs');
var config = require('syracuse-main/lib/nodeconfig').config

//temporary login tokens (which preserve authentication after relocation)
var tempLogins = {};
var TOKEN_VALIDITY = 600000;

function setPassword(request, response, user, _) {
	var answer = fs.readFile(__dirname+"/html/answer.html", "utf8", _);
	answer = answer.replace("{login}", user)
	answer = answer.replace("{changePasswdHeader}", locale.format(module, "changePasswdHeader", user));
	answer = answer.replace("{newPwd}", locale.format(module, "newPwd"));
	answer = answer.replace("{chgPasswd}", locale.format(module, "chgPasswd"));
	answer = answer.replace("{newPwdAgain}", locale.format(module, "newPwdAgain"));
	answer = answer.replace("{auth}", setTempLogin(user));
	answer = answer.replace("{realm}", config.session.realm)			
	answer = answer.replace("{url}", request.url)
	answer = answer.replace("{different}", locale.format(module, "different"));
	answer = answer.replace("{empty}", locale.format(module, "notEmpty"));


	response.writeHead(200, {
		"Content-Type": "text/html"
	});
	response.end(answer);
	return false;
};
exports.setPassword = setPassword;


// build random hex string of length 6
function makeRString() {
	var n = Math.floor(Math.random() * (1 << 24));
	var st = n.toString(16);
	return st.length === 6 ? st : ("000000"+st).substr(st.length);
}

// add a new authentication token for this user
function setTempLogin(user) {
	var date = _clearLogins();
	var key = "--"+makeRString()+makeRString()+makeRString();
	while (key in tempLogins) {
		var n = Math.floor(Math.random() * (1 << 4));
		key += n.toString(16).substr(0, 1);				
	}
	tempLogins[key] = [user, date];			
	return key;
};

// remove outdated authentication tokens
function _clearLogins() {
	var date = Date.now();
	var dateComp = date-TOKEN_VALIDITY;
	for (id in tempLogins) {
		if (tempLogins[id][1] < dateComp) {
			delete tempLogins[id];
		}
	}
	return date;
}

// get user name of specified login token. If token is not available, null is returned.
function getTempLogin(key) {
	var value = tempLogins[key];
	_clearLogins();
	if (value) {
		delete tempLogins[key];
		return value[0];
	}
	return null;
}

exports.getTempLogin = getTempLogin;
exports.setTempLogin = setTempLogin;