"use strict";

var locale = require('syracuse-core/lib/locale');
var authHelper = require('streamline-auth/lib/helpers');

function genPage(_, request, response) {
	var params = {};
	['loginLabel', 'passwordLabel', 'dbGo', 'ldapGo', 'oauth2Title', 'sageIdTitle', 'sageIdSignOn', 'sageIdRegister'].forEach(function(label) {
		params[label] = locale.format(module, label);
	});
	// set visibility flags for the different authentication methods
	['basic', 'digest', 'ldap', 'oauth2', 'sage-id'].forEach(function(method) {
		params[method + "Visibility"] = authHelper.isAllowed(method) ? 'visible' : 'hidden';
	});
	params.passwordVisibility = //
	params.basicVisibility || //
	params.digestVisibility || //
	params.sageerpx3Visibility || //
	params.ldapVisibility;

	params.oauth2s = JSON.stringify(require('streamline-auth/lib/oauth2').getServerList(_));

	// set error message if last authentication failed
	if (request.session && request.session.loginError) {
		params.errorMessage = request.session.loginError;
		// display it only once
		request.session.loginError = "";
	} else {
		params.errorMessage = "";
	}

	authHelper.genPage(_, response, __dirname + "/../html/login.html", params);
}

function submit(_, request, response) {
	if (!require('streamline-auth/lib/dispatcher').ensureAuthenticated(_, request, response)) return;

	authHelper.redirect(_, request, response, request.session.authTargetUrl || '/');
}

exports.dispatch = authHelper.dispatcher(3, {
	page: genPage,
	submit: submit,
});