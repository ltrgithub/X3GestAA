"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var config = require('syracuse-main/lib/nodeconfig').config;
var fs = require('streamline-fs');
var crypto = require('crypto');
var locale = require('syracuse-core/lib/locale');
var basic = require('./basic');

exports.noAccess = function(_, request, response, status, user) {
	return basic.noAccess(_, request, response, status, user, true);
};

exports.create = function(validatePassword) {
	return new function() {
		function _unAuthenticated(_, request, response) {
			if (request.unauthUseRedirect) {
				response.writeHead(307, {
					"location": self.loginBaseUrl + "?callbackUrl=" + encodeURIComponent(request.url)
				});
				response.end();
			} else {
				response.writeHead(401, {
					"Content-Type": "application/json",
					"WWW-Authenticate": "SageERPX3"
				});
				response.end(JSON.stringify({
					$diagnoses: [{
						$severity: "error",
						$message: locale.format(module, "unauth")
					}],
					$location: {
						$url: "/auth/login" // To Be Defined !!!
					}
				}));
			}
			return false;
		}

		function _unLicensed(request, response, _) {
			response.writeHead(402, {
				"Content-Type": "text/html; charset=utf-8"
			});
			response.end(locale.format(module, "noLicense"));
			return false;
		}

		var self = this;
		this.loginBaseUrl = "/auth/login";

		this.authenticate = function(request, response, session, _) {
			if (request.specialLogin) return true;
			var credentials = (request.headers.authorization || "").split(" ");
			if (!(credentials && credentials[1])) return _unAuthenticated(_, request, response);
			var usrpwd = new Buffer(credentials[1], "base64");
			// Chrome uses UTF8 for authentication
			var agent = request.headers["user-agent"];
			if (agent && (agent.indexOf(" Chrome/") >= 0)) {
				usrpwd = usrpwd.toString("utf8");
			} else {
				usrpwd = usrpwd.toString("binary");
			}
			var index = usrpwd.indexOf(':');
			if (index < 0) return _unAuthenticated(_, request, response);

			var user = usrpwd.substr(0, index);
			var pass = usrpwd.substr(index + 1);

			if (!(user && pass)) return _unAuthenticated(_, request, response);

			// var passHash = computeHash(user, pass);

			var status = validatePassword(_, request.session, user, pass, null, "sageerpx3", request);
			switch (status) {
				case "unAuthenticated":
					return _unAuthenticated(_, request, response);
				case "noLicense":
				case "inactiveUser":
				case "noGroup":
				case "noRole":
					return exports.noAccess(_, request, response, status, user);
				case "changePassword":
					return require('./changePassword').setPassword(request, response, user, _);
				case "ok":
					break;
				default:
					// non-fatal error
					response.writeHead(406, {
						"Content-Type": "text/plain"
					});
					response.end("Status: " + status);
					return false;
			}

			tracer && tracer("User authenticated.");
			request.session && request.session.afterAuthentication({
				user: user,
				authorization: request.headers.authorization
			});
			return true;
		};
		this.unAuthenticated = function(request, response, _) {
			return _unAuthenticated(_, request, response);
		};

		this.forbidden = function(request, response, message) {
			response.writeHead(403, {
				"Content-Type": "text/plain"
			});
			response.end(message || locale.format(module, "unauth"));
		};
	};

};