var module = QUnit.module;

var flows = require("streamline/lib/util/flows");

var fs = require("fs");
var unzip = require("streamline-zip/lib/unzip/unzip");
 

var filesToTest = ["node_modules/streamline-zip/test/server/data/test_deflate.zip",
                   "node_modules/streamline-zip/test/server/data/test_store.zip"];

asyncTest("Unzip filecount", filesToTest.length * 3, function(_) {

	flows.each(_, filesToTest, function(_, file) {
		var files = [];
		var data = fs.readFile(file, _);
		new unzip.Unzip(
				data, 
				function(filename, filecontent, headers, _) {
					files.push(filename);
				},	{
					filter: function(filename, headers, _) {
						return true;
					}
				}
			).unzip(_);
		
		strictEqual(2, files.length);
		strictEqual(true, files.indexOf("abc.txt") >= 0);
		strictEqual(true, files.indexOf("123.txt") >= 0);
	});
	
	start();
});

asyncTest("Unzip filecount filter", filesToTest.length * 2, function(_) {

	flows.each(_, filesToTest, function(_, file) {
		var files = [];
		var data = fs.readFile(file, _);
		new unzip.Unzip(
				data, 
				function(filename, filecontent, headers, _) {
					files.push(filename);
				},	{
					filter: function(filename, headers, _) {
						if (filename.slice(0, 3) !== "abc") return false; 
						return true;
					}
				}
			).unzip(_);
		
		strictEqual(1, files.length);
		strictEqual(true, files.indexOf("abc.txt") >= 0);
	});
	
	start();
});

asyncTest("Unzip filesize/content", filesToTest.length * 9, function(_) {

	flows.each(_, filesToTest, function(_, file) {
		var files = [];
		var size = [];
		var data = fs.readFile(file, _);
		new unzip.Unzip(
				data, 
				function(filename, filecontent, headers, _) {
					files.push(filename);
					size.push(headers.size);
					
					if (filename === "abc.txt") {
						strictEqual(true, filecontent.toString("ascii").indexOf("What, from her last glimmers of the the scenes that of million years, but not be") >= 0);
					} else if (filename === "123.txt") {
						strictEqual(true, filecontent.toString("ascii").indexOf("Zaphod scribbled a great length of the image of to compose a paying proposition") >= 0);
					}

					strictEqual(true, headers.filename === filename);
				},	{
					filter: function(filename, headers, _) {
						return true;
					}
				}
			).unzip(_);
		
		strictEqual(2, files.length);

		strictEqual(true, files.indexOf("abc.txt") >= 0);
		strictEqual(true, files.indexOf("123.txt") >= 0);
		
		strictEqual(2359, size[files.indexOf("abc.txt")]);
		strictEqual(2358, size[files.indexOf("123.txt")]);
	});
	
	start();
});
