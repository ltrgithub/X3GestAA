"use strict";
var helper = require('license-tool/lib/helper');
var fs = require('streamline-fs');
var util = require('util');
var globals = require('streamline/lib/globals');

module.exports = {
	$title: "Licenses",
	$modes: "duplicate!,query,details,delete,create!,extra!,edit!",
	$links: {
		$extra: {
			$title: "License content",
			$type: "application/x-document",
			$method: "GET",
			$url: "/downloads/license/license-{$uuid}"
		},
		$duplicate: {
			$url: "/data/licenses/$workingCopies/{$uuid}?representation=licenses.$edit&duplicate=1&policy={productCode}-{productVersion}-{policyCode}-{policyVersion}",
			$title: "New license from this license",
			$method: "POST",
		}
	},
	$properties: {
		policyFile: {
			$title: "Policy",
			$isMandatory: true,
			$noQuery: true,
			$type: "application/x-reference",
			$item: {
				$url: "/data/policies/{$uuid}?representation=policies.$thumb",
				$shortUrl: "/data/policies/{$uuid}",
				$value: "{productCode}-{productVersion}-{policyCode}-{policyVersion}",
				$key: "{$uuid}",
				$description: "Policy",
				$properties: {
					productCode: {
						$type: "application/x-string"
					},
					productVersion: {
						$type: "application/x-string"
					},
					policyCode: {
						$type: "application/x-string"
					},
					policyVersion: {
						$type: "application/x-string"
					},
				},
				$prototype: "/page?representation=policies.$thumb",
				$links: {
					$lookup: {
						$type: "application/json",
						$title: "Select the policy",
						$url: "/data/policies?representation=policies.$lookup",
					},
					$details: {
						$type: "application/json",
						$url: "/data/policies/{$uuid}?representation=policies.$details",
					},
				}
			}

		},
		productCode: {
			$title: "Product",
			$type: "application/x-string",
			$isReadOnly: true,
			$displayLength: 4,
			$links: {
				$details: {
					$url: "/data/licenses/{$uuid}?representation=licenses.$details",
				},
			},
		},
		productVersion: {
			$title: "Product version",
			$isReadOnly: true,
			$displayLength: 4,
			$type: "application/x-string"
		},
		policyCode: {
			$title: "Policy code",
			$isReadOnly: true,
			$displayLength: 4,
			$type: "application/x-string",
		},
		policyVersion: {
			$title: "Policy version",
			$isReadOnly: true,
			$displayLength: 4,
			$type: "application/x-string"
		},
		generationStamp: {
			$title: "Generation time",
			$type: "application/x-datetime",
			$displayLength: 5,
			$isReadOnly: true
		},
		genStamp: {
			$title: "Gen time",
			$type: "application/x-string",
			$isReadOnly: true,
			$isHidden: true,
			$noQuery: true
		},
		exported: {
			$title: "Exported",
			$type: "application/x-boolean",
			$isReadOnly: true,
		},
		licenseeName: {
			$title: "Name of licensee",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeReference: {
			$title: "Licensee reference",
			$type: "application/x-string",
			$pattern: "^\\w+$",
			$displayLength: 6,
			$isMandatory: true
		},
		licenseeRegistrationNumber: {
			$title: "Registration number",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeAddress1: {
			$title: "Street",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeAddress2: {
			$title: "Complement",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeCity: {
			$title: "City",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeZip: {
			$title: "ZIP code",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeState: {
			$title: "State",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseeCountry: {
			$title: "Country",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerName: {
			$title: "Name of reseller",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerReference: {
			$title: "Reference",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerRegistrationNumber: {
			$title: "Registration number",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerAddress1: {
			$title: "Street",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerAddress2: {
			$title: "Complement",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerCity: {
			$title: "City",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerZip: {
			$title: "ZIP code",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerState: {
			$title: "State",
			$type: "application/x-string",
			$noQuery: true
		},
		resellerCountry: {
			$title: "Country",
			$type: "application/x-string",
			$noQuery: true
		},
		valStart: {
			$title: "Start of validity",
			$type: "application/x-date",
			$isMandatory: true,
			$noQuery: true
		},
		valEnd: {
			$title: "End of validity",
			$type: "application/x-date",
			$isMandatory: true,
			$noQuery: true
		},
		serial: {
			$title: "Serial number",
			$type: "application/x-string",
			$noQuery: true
		},
		licenseType: {
			$title: "License type",
			$type: "application/x-choice",
			$isMandatory: true,
			$value: {
				$type: "application/x-string",
				$enum: [{
					$value: "NFR",
					$title: "Not for resale"
				}, {
					$value: "DEMO",
					$title: "Demo license"
				}, {
					$value: "STANDARD",
					$title: "Standard license"
				}]
			},
			$noQuery: true
		},
		activityCodes: {
			$title: "Activity codes",
			$type: "application/x-array",
			$capabilities: "sort,filter,delete",
			$item: {
				code: {
					$title: "Code",
					$type: "application/x-string",
					$isReadOnly: true,
				},
				title: {
					$title: "Title",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				valStart: {
					$title: "Start of validity",
					$type: "application/x-date"
				},
				valEnd: {
					$title: "End of validity",
					$type: "application/x-date"
				},
			}
		},
		badges: {
			$title: "Badges",
			$type: "application/x-array",
			$capabilities: "sort,filter,delete",
			$item: {
				code: {
					$title: "Code",
					$type: "application/x-string",
					$isMandatory: true,
				},
				title: {
					$title: "Title",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				max: {
					$title: "Maximum",
					$type: "application/x-integer",
					$isMandatory: true,
					$minimum: 0,
					$minimumCanEqual: true
				},

			}
		},
		parameters: {
			$title: "Parameters",
			$type: "application/x-array",
			$capabilities: "sort,filter,delete",
			$item: {
				code: {
					$title: "Code",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				title: {
					$title: "Title",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				value: {
					$title: "Value",
					$type: "application/x-integer",
					$isMandatory: true
				},
			}
		},
		languages: {
			$title: "Languages",
			$type: "application/x-array",
			$capabilities: "sort,filter,delete",
			$item: {
				code: {
					$title: "Code",
					$type: "application/x-string",
					$isReadOnly: true,
				},
				title: {
					$title: "Title",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				valStart: {
					$title: "Start of validity",
					$type: "application/x-date"
				},
				valEnd: {
					$title: "End of validity",
					$type: "application/x-date"
				},
			}
		},
		legislations: {
			$title: "Legislations",
			$type: "application/x-array",
			$capabilities: "sort,filter,delete",
			$item: {
				code: {
					$title: "Code",
					$type: "application/x-string",
					$isReadOnly: true,
				},
				title: {
					$title: "Title",
					$isReadOnly: true,
					$type: "application/x-string"
				},
				valStart: {
					$title: "Start of validity",
					$type: "application/x-date"
				},
				valEnd: {
					$title: "End of validity",
					$type: "application/x-date"
				},
			}
		},
	},
	$init: function(_, wc, query) {
		return _fillData(_, wc, undefined, query.policy);
	},

	$referenceUpdate: function(_, wc, reference) {
		return _fillData(_, wc, null, reference.$uuid);
	},

	$list: function(_, query) {
		var startIndex = +query.startIndex || 1;
		var endIndex = startIndex + (+query.count || 50) - 1;
		var counter = 0;
		var customers = query.customer ? [query.customer] : fs.readdir(helper.LICENSES, _);
		customers = customers.sort();
		var resources = [];
		var policies = {};
		customers.some_(_, function(_, customer) {
			try {
				var lics = fs.readdir(helper.LICENSES + "/" + customer, _);
				lics = lics.sort();
				if (lics.some(function(p) {
					if (p.indexOf(".json") === p.length - 5) {
						if (++counter < startIndex) return;
						else if (counter > endIndex) {
							resources.truncated = true;
							return true;
						}
						p = p.substr(0, p.length - 5);
						var policyName = p.substr(0, p.lastIndexOf("-"));
						if (policyName in policies) {
							policies[policyName]++;
						} else {
							policies[policyName] = 1;
						}
						var parts = p.split("-");
						var flag = false;
						if (parts[4].substr(-1) === "e") { // exported file
							flag = true;
							parts[4] = parts[4].replace("e", "");
						}
						var date = parts[4] + "00";
						resources.push({
							$uuid: customer + "-" + parts.join("-"),
							productCode: parts[0],
							productVersion: parts[1],
							policyCode: parts[2],
							policyVersion: parts[3],
							licenseeReference: customer,
							exported: flag,
							generationStamp: date.slice(0, 4) + "-" + date.slice(4, 6) + "-" + date.slice(6, 8) + "T" + date.slice(8, 10) + ":" + date.slice(10, 12) + ":" + date.slice(12, 14) + "Z",
						});
					}
				})) return true;
			} catch (e) {
				// ignore
				if (e.code !== "ENOENT") console.log("LLL" + e.stack);
			}
		});
		if (!query.customer) helper.setUsedPolicies(_, policies);
		return resources;
	},
	$load: function(_, key, query, edit) {
		var result = {};
		_fillData(_, result, key, query.policy);
		if (result.exported) {
			if (query.duplicate) result.exported = false;
			else {
				return {
					$diagnoses: [{
						severity: "error",
						message: "Cannot edit exported license"
					}]
				};
			}
		}

		return result;
	},
	$save: function(_, wc, diagnoses) {
		if (!helper.partnerId) {
			diagnoses.push({
				$severity: "error",
				$message: "No partner file",
			});
			return key;
		}
		var filename = wc.productCode + "-" + wc.productVersion + "-" + wc.policyCode + "-" + wc.policyVersion + "-" + new Date().toISOString().replace(/[^\d]/g, "").substr(0, 14);
		var key = wc.licenseeReference + "-" + filename;
		var fullFilename = wc.licenseeReference + "/" + filename + ".json";
		if (key !== wc.$uuid) {
			if (fs.exists(helper.LICENSES + "/" + fullFilename, _)) {
				diagnoses.push({
					$severity: "error",
					$message: "License already exists",
				});
				return key;
			}
		};
		if (wc.valEnd < wc.valStart) {
			diagnoses.push({
				$severity: "error",
				$messages: "End of validity is before start of validity"
			});
			return key;
		};
		var result = {
			fileType: "License",
			generationStamp: new Date(),
			partnerId: helper.partnerId,
			product: {
				code: wc.productCode,
				version: wc.productVersion
			},
			policy: {
				code: wc.policyCode,
				version: wc.policyVersion
			},
			licensedTo: {
				name: wc.licenseeName,
				reference: wc.licenseeReference,
				registrationNumber: wc.licenseeRegistrationNumber,
				address: {
					address1: wc.licenseeAddress1,
					address2: wc.licenseeAddress2,
					city: wc.licenseeCity,
					zip: wc.licenseeZip,
					state: wc.licenseeState,
					country: wc.licenseeCountry
				}
			},
			serial: wc.serial,
			serialControl: !! wc.serial,
			licenseType: wc.licenseType,
			validity: [wc.valStart, wc.valEnd],
			activityCodes: wc.activityCodes.map(function(item) {
				var validity;
				if (item.valStart || item.valEnd) {
					validity = [item.valStart || wc.valStart, item.valEnd || wc.valEnd];
				}
				return {
					$uuid: item.code,
					code: item.code,
					validity: validity
				};
			}),
			languages: wc.languages.map(function(item) {
				var validity;
				if (item.valStart || item.valEnd) {
					validity = [item.valStart || wc.valStart, item.valEnd || wc.valEnd];
				}
				return {
					$uuid: item.code,
					code: item.code,
					validity: validity
				};
			}),
			legislations: wc.legislations.map(function(item) {
				var validity;
				if (item.valStart || item.valEnd) {
					validity = [item.valStart || wc.valStart, item.valEnd || wc.valEnd];
				}
				return {
					$uuid: item.code,
					code: item.code,
					validity: validity
				};
			}),
			badges: wc.badges.map(function(item) {
				var validity;
				return {
					$uuid: item.code,
					code: item.code,
					max: item.max
				};
			}),
			parameters: wc.parameters.map(function(item) {
				var validity;
				return {
					$uuid: item.code,
					code: item.code,
					value: item.value
				};
			}),
			signature: helper.partnerId,
			signatureText: helper.partnerId
		};
		if (wc.resellerName || wc.resellerReference) {
			result.reseller = {
				name: wc.resellerName,
				reference: wc.resellerReference,
				registrationNumber: wc.resellerRegistrationNumber,
				address: {
					address1: wc.resellerAddress1,
					address2: wc.resellerAddress2,
					city: wc.resellerCity,
					zip: wc.resellerZip,
					state: wc.resellerState,
					country: wc.resellerCountry

				}
			};
		}
		var signed = helper.signLicense(result, globals.context);
		// console.log(signed);
		try {
			fs.mkdir(helper.LICENSES + "/" + wc.licenseeReference);
		} catch (e) {
			// ignore
		}
		fs.writeFile(helper.LICENSES + "/" + fullFilename, signed, _);
		if (key !== wc.$uuid) { // add a new used license
			var policyKey = filename.substr(0, filename.lastIndexOf("-"));
			helper.usedPolicies(_, policyKey, 1);
		}
		if (wc.genStamp) {
			var oldFilename = helper.LICENSES + "/" + wc.licenseeReference + "/" + wc.productCode + "-" + wc.productVersion + "-" + wc.policyCode + "-" + wc.policyVersion + "-" + wc.genStamp + ".json";
			console.log("ENTF alt " + oldFilename);
			try {
				fs.unlink(oldFilename, _);
			} catch (e) {
				// if (e.code != "ENOENT") 
				throw e;
			}
		}
		return key;
	},
	$delete: function(_, key) {
		key = key.replace("-", "/"); // replace first dash.
		try {
			fs.unlink(helper.LICENSES + "/" + key + ".json", _);
			var policyKey = key.substring(key.indexOf('/') + 1, key.lastIndexOf("-"));
			helper.usedPolicies(_, policyKey, -1);
		} catch (e) {
			console.error(e);
		}
	}
};

function _fillData(_, result, uuid, policy) {
	var license;
	var generationStamp;
	var genStamp;
	var exported;
	var newLicense; // true when a new license is edited
	if (uuid) {
		var parts = uuid.split("-");
		var filename = helper.LICENSES + "/" + parts[0] + "/" + parts.slice(1).join("-") + ".json";
		if (!fs.exists(filename, _)) {
			exported = true;
			filename = filename.replace(/.json$/, "e.json");
		};
		var license = helper.fileTest(_, filename, "License");
		if (!policy) {
			generationStamp = license.generationStamp;
			genStamp = parts[5];
			policy = parts.slice(1, 5).join("-");
		}
	}
	if (!policy) {
		return {
			$diagnoses: [{
				severity: "error",
				message: "No policy available"
			}]
		};
	}
	result.policyFile = {
		$uuid: policy
	};
	var policy = helper.fileTest(_, helper.POLICIES + "/" + policy + ".json", "Policy");
	result.productCode = policy.product.code;
	// result.productTitle = policy.product.title;
	result.productVersion = policy.product.version;
	result.policyCode = policy.policy.code;
	// result.policyTitle = policy.policy.title;
	result.policyVersion = policy.policy.version;
	result.licenseType = "STANDARD";
	result.exported = exported;
	if (license) {
		result.generationStamp = generationStamp;
		result.genStamp = genStamp;
		var licensedTo = license.licensedTo;
		if (licensedTo) {
			result.licenseeName = licensedTo.name;
			result.licenseeReference = licensedTo.reference;
			result.licenseeRegistrationNumber = licensedTo.registrationNumber;
			if (licensedTo.address) {
				result.licenseeAddress1 = licensedTo.address.address1;
				result.licenseeAddress2 = licensedTo.address.address2;
				result.licenseeCity = licensedTo.address.city;
				result.licenseeZip = licensedTo.address.zip;
				result.licenseeState = licensedTo.address.state;
				result.licenseeCountry = licensedTo.address.country;
			}
		}
		var reseller = license.reseller;
		if (reseller) {
			result.resellerName = reseller.name;
			result.resellerReference = reseller.reference;
			result.resellerRegistrationNumber = reseller.registrationNumber;
			if (reseller.address) {
				result.resellerAddress1 = reseller.address.address1;
				result.resellerAddress2 = reseller.address.address2;
				result.resellerCity = reseller.address.city;
				result.resellerZip = reseller.address.zip;
				result.resellerState = reseller.address.state;
				result.resellerCountry = reseller.address.country;
			}
		}
		result.serial = license.serial;
		result.valStart = license.validity[0];
		result.valEnd = license.validity[1];
		result.licenseType = license.licenseType;
	}
	["activityCodes", "languages", "legislations"].forEach(function(aspect) {
		var array = [];
		var activityCodes = [];
		if (policy[aspect]) {
			policy[aspect].forEach(function(item) {
				if (item.condition === "license") {
					var valStart;
					var valEnd;
					if (license && license[aspect]) {
						license[aspect].some(function(item2) {
							if (item.code === item2.code) {
								if (item2.validity) {
									valStart = item2.validity[0];
									valEnd = item2.validity[1];
								}
								return true;
							}
						});
					} else if (result[aspect]) {
						result[aspect].some(function(item2) {
							if (item.code === item2.code) {
								valStart = item2.valStart;
								valEnd = item2.valEnd;
								return true;
							}
						});
					}
					array.push({
						$uuid: item.code,
						code: item.code,
						title: item.title["en-US"],
						valStart: valStart,
						valEnd: valEnd,
					});
				}
			});
		}
		result[aspect] = array;
	});
	var badges = [];
	if (policy.badges) {
		policy.badges.forEach(function(item) {
			var valStart;
			var valEnd;
			var max = undefined;
			if (license) {
				license.badges.some(function(item2) {
					if (item.code === item2.code) {
						max = item2.max;
						return true;
					}
				});
			} else if (result.badges) {
				result.badges.some(function(item2) {
					if (item.code === item2.code) {
						max = item2.max;
						return true;
					}
				});
			}
			badges.push({
				$uuid: item.code,
				code: item.code,
				title: item.title["en-US"],
				max: max
			});
		});
	}
	result.badges = badges;
	var parameters = [];
	if (policy.parameters) {
		policy.parameters.forEach(function(item) {
			var valStart;
			var valEnd;
			var value = undefined;
			if (license) {
				license.parameters.some(function(item2) {
					if (item.code === item2.code) {
						value = item2.value;
						return true;
					}
				});
			} else if (result.parameters) {
				result.parameters.some(function(item2) {
					if (item.code === item2.code) {
						value = item2.value;
						return true;
					}
				});
			}
			parameters.push({
				$uuid: item.code,
				code: item.code,
				title: item.title["en-US"],
				value: value
			});
		});
	}
	result.parameters = parameters;
	return result;
}