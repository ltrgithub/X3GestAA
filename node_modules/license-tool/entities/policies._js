"use strict";
var locale = require("syracuse-core/lib/locale");
var helper = require('license-tool/lib/helper');
var fs = require('streamline-fs');
var util = require('util');
var globals = require('streamline/lib/globals');
var tracer;

module.exports = {
	$title: "Policies",
	$modes: "duplicate!,query,details,delete,edit!,create!",
	$properties: {
		productCode: {
			$title: "Product code",
			$type: "application/x-string",
			$pattern: "^\\w+$",
			$links: {
				$details: {
					$url: "/data/policies/{$uuid}?representation=policies.$details",
				},
			},
			$displayLength: 10,
			$isMandatory: true,
		},
		productTitle_: {
			$title: "Product title",
			$type: "application/x-string",
			$noQuery: true
		},
		productLocales: {
			$title: "More locales for product",
			$type: "application/x-array",
			$item: {
				localeCode: {},
				title: {
					$title: "Title",
					$isMandatory: true,
					$displayLength: 10,
					$type: "application/x-string"
				}
			}
		},
		productVersion: {
			$title: "Product version",
			$isMandatory: true,
			$displayLength: 10,
			$pattern: "^[\\w\\.]+$",
			$type: "application/x-string"
		},
		policyCode: {
			$title: "Policy code",
			$isMandatory: true,
			$displayLength: 10,
			$pattern: "^\\w+$",
			$type: "application/x-string",
		},
		policyTitle_: {
			$title: "Policy title",
			$type: "application/x-string",
			$noQuery: true
		},
		policyLocales: {
			$title: "More locales for policy",
			$type: "application/x-array",
			$item: {
				localeCode: {},
				title: {
					$title: "Title",
					$displayLength: 10,
					$isMandatory: true,
					$type: "application/x-string"
				}
			}
		},
		policyVersion: {
			$title: "Policy version",
			$isMandatory: true,
			$displayLength: 10,
			$pattern: "^[\\w\\.]+$",
			$type: "application/x-string"
		},
		baseProduct: {
			$title: "Base product",
			$type: "application/x-string",
			$isMandatory: true,
			$noQuery: true
		},
		referred: {
			$title: "Referred",
			$type: "application/x-boolean",
			$isReadOnly: true
		},
		activityCodes: {
			$title: "Activity codes",
			$type: "application/x-array",
			$item: {
				code: {
					$title: "Code",
					$pattern: "^[XYZ][A-Z0-9]+$",
					$type: "application/x-string",
					$displayLength: 5,
					$isMandatory: true,
				},
				itemTitle_: {
					$title: "Title",
					$displayLength: 20,
					$type: "application/x-string"
				},
				itemMore: {
					$title: "More locales",
					$type: "application/x-boolean",
					$isReadOnly: true
				},
				itemLocales: {
					$title: "More locales",
					$type: "application/x-array",
					$item: {
						localeCode: {},
						title: {
							$title: "Text",
							$type: "application/x-string",
						}
					}
				},
				condition: {
					$title: "Condition",
					$type: "application/x-choice",
					$isMandatory: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "never",
							$title: "Never"
						}, {
							$value: "license",
							$title: "License"
						}, {
							$value: "always",
							$title: "Always"
						}],
					},
					$default: "never"
				}
			}
		},
		badges: {
			$title: "Badges",
			$type: "application/x-array",
			$item: {
				code: {
					$title: "Code",
					$type: "application/x-string",
					$displayLength: 5,
					$pattern: "^[A-Z0-9]+$", // this pattern will be changed in helper._js when a partner file is applied!!!
					$isMandatory: true,
				},
				itemTitle_: {
					$title: "Title",
					$displayLength: 20,
					$type: "application/x-string"
				},
				itemMore: {
					$title: "More locales",
					$type: "application/x-boolean",
					$isReadOnly: true
				},
				itemLocales: {
					$title: "More locales",
					$type: "application/x-array",
					$item: {
						localeCode: {},
						title: {
							$title: "Text",
							$type: "application/x-string",
						}
					}
				},
				functions: {
					$title: "Functions",
					$type: "application/x-string",
					$pattern: "^(?:[XYZ][A-Z0-9]+[ ,;]+)*[XYZ][A-Z0-9]+$",
					$displayLength: 30,
					$isMandatory: true,
				}
			}
		},
		parameters: {
			$title: "Parameters",
			$type: "application/x-array",
			$item: {
				code: {
					$title: "Code",
					$pattern: "^[XYZ][A-Z0-9]+$",
					$type: "application/x-string",
					$displayLength: 5,
					$isMandatory: true,
				},
				itemTitle_: {
					$title: "Title",
					$displayLength: 20,
					$type: "application/x-string"
				},
				itemLocales: {
					$title: "More locales",
					$type: "application/x-array",
					$item: {
						localeCode: {},
						title: {
							$title: "Text",
							$type: "application/x-string",
						}
					}
				},
				itemMore: {
					$title: "More locales",
					$type: "application/x-boolean",
					$isReadOnly: true
				},
			}
		},
		languages: {
			$title: "Languages",
			$type: "application/x-array",
			$item: {
				code: {
					$title: "Code",
					$pattern: "^[A-Z0-9]+$",
					$displayLength: 5,
					$type: "application/x-string",
					$isMandatory: true,
				},
				itemTitle_: {
					$title: "Title",
					$displayLength: 20,
					$type: "application/x-string"
				},
				itemMore: {
					$title: "More locales",
					$type: "application/x-boolean",
					$isReadOnly: true
				},
				itemLocales: {
					$title: "More locales",
					$type: "application/x-array",
					$item: {
						localeCode: {},
						title: {
							$title: "Text",
							$type: "application/x-string",
						}
					}
				},
				condition: {
					$title: "Condition",
					$type: "application/x-choice",
					$isMandatory: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "never",
							$title: "Never"
						}, {
							$value: "license",
							$title: "License"
						}, {
							$value: "always",
							$title: "Always"
						}],
					},
					$default: "never"
				}
			}
		},
		legislations: {
			$title: "Legislations",
			$type: "application/x-array",
			$item: {
				code: {
					$title: "Code",
					$pattern: "^[A-Z0-9]+$",
					$displayLength: 5,
					$type: "application/x-string",
					$isMandatory: true,
				},
				itemTitle_: {
					$title: "Title",
					$displayLength: 20,
					$type: "application/x-string"
				},
				itemMore: {
					$title: "More locales",
					$type: "application/x-boolean",
					$isReadOnly: true
				},
				itemLocales: {
					$title: "More locales",
					$type: "application/x-array",
					$item: {
						localeCode: {},
						title: {
							$title: "Text",
							$type: "application/x-string",
						}
					}
				},
				condition: {
					$title: "Condition",
					$type: "application/x-choice",
					$isMandatory: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "never",
							$title: "Never"
						}, {
							$value: "license",
							$title: "License"
						}, {
							$value: "always",
							$title: "Always"
						}],
					},
					$default: "never"
				}
			}
		},
	},
	$list: function(_, query) {
		var startIndex = +query.startIndex || 1;
		var endIndex = startIndex + (+query.count || 50) - 1;
		var counter = 0;
		var pol = fs.readdir(helper.POLICIES, _);
		// dummy query
		helper.usedPolicies(_, "1");
		var resources = [];
		pol.some(function(p) {
			if (p.indexOf(".json") === p.length - 5) {
				if (++counter < startIndex) return;
				else if (counter > endIndex) {
					resources.truncated = true;
					return true;
				}
				p = p.substr(0, p.length - 5);
				var parts = p.split("-");
				resources.push({
					$uuid: p,
					productCode: parts[0],
					productVersion: parts[1],
					policyCode: parts[2],
					policyVersion: parts[3],
					referred: (helper.usedPoliciesUnsafe(p) > 0)
				});
			}
		});
		return resources;
	},
	$load: function(_, key, query, edit) {
		var cnt = helper.usedPolicies(_, key);
		if (edit && !query.duplicate && cnt) {
			return {
				$diagnoses: helper.addError(locale.format(module, "notEditPolicy", cnt))
			};
		}
		try {
			var pol = helper.fileTest(_, helper.POLICIES + "/" + key + ".json", "Policy");
		} catch (e) {
			return {
				$diagnoses: helper.addError(e.message)
			};
		}
		var result = {
			productCode: pol.product.code,
			productVersion: pol.product.version,
			policyCode: pol.policy.code,
			policyVersion: pol.policy.version,
			baseProduct: pol.baseProduct,
			referred: (cnt > 0 && !query.duplicate)
		};
		_distributeLocales(result, "product", pol.product.title);
		_distributeLocales(result, "policy", pol.policy.title);
		if (!query.duplicate) { // do not change key of existing policy
			result.__oldName = key;
		}
		if (pol.activityCodes) {
			result.activityCodes = pol.activityCodes.map(function(ac) {
				return _distributeLocales({
					$uuid: ac.code,
					code: ac.code,
					condition: ac.condition
				}, "item", ac.title);
			});
		}
		if (pol.legislations) {
			result.legislations = pol.legislations.map(function(ac) {
				return _distributeLocales({
					$uuid: ac.code,
					code: ac.code,
					condition: ac.condition
				}, "item", ac.title);
			});
		}
		if (pol.languages) {
			result.languages = pol.languages.map(function(ac) {
				return _distributeLocales({
					$uuid: ac.code,
					code: ac.code,
					condition: ac.condition
				}, "item", ac.title);
			});
		}
		if (pol.badges) {
			result.badges = pol.badges.map(function(item) {
				var result = {
					$uuid: item.code,
					code: item.code,
					functions: item.functions.join(" ")
				};
				return _distributeLocales(result, "item", item.title);
			});
		}
		if (pol.parameters) {
			result.parameters = pol.parameters.map(function(item) {
				return _distributeLocales({
					$uuid: item.code,
					code: item.code
				}, "item", item.title);
			});
		}
		return result;
	},
	$save: function(_, wc, diagnoses) {
		if (!helper.partnerId) {
			helper.addError(locale.format(module, "noPartner"), diagnoses);
			return key;
		}
		var key = wc.productCode + "-" + wc.productVersion + "-" + wc.policyCode + "-" + wc.policyVersion;
		if (key !== wc.$uuid) {
			if (fs.exists(helper.POLICIES + "/" + key + ".json", _)) {
				helper.addError(locale.format(module, "policyExists"), diagnoses);
				return key;
			}
		};
		var unique = {}; // check for unique codes of activity codes etc.
		wc.activityCodes = wc.activityCodes || [];
		wc.languages = wc.languages || [];
		wc.legislations = wc.legislations || [];
		wc.badges = wc.badges || [];
		wc.parameters = wc.parameters || [];
		try {
			var result = {
				fileType: "Policy",
				generationStamp: new Date(),
				partnerId: helper.partnerId,
				product: {
					code: wc.productCode,
					title: _collectLocales(wc, "product"),
					version: wc.productVersion
				},
				policy: {
					code: wc.policyCode,
					title: _collectLocales(wc, "policy"),
					version: wc.policyVersion
				},
				baseProduct: wc.baseProduct,
				activityCodes: wc.activityCodes.map(function(ac) {
					var key = "A_" + ac.code;
					if (key in unique) {
						throw new Error(locale.format(module, "uniqueAC", ac.code));
					} else unique[key] = 1;
					return {
						code: ac.code,
						title: _collectLocales(ac, "item"),
						condition: ac.condition
					};
				}),
				languages: wc.languages.map(function(ac) {
					var key = "L_" + ac.code;
					if (key in unique) {
						throw new Error(locale.format(module, "uniqueL", ac.code));
					} else unique[key] = 1;
					return {
						code: ac.code,
						title: _collectLocales(ac, "item"),
						condition: ac.condition
					};
				}),
				legislations: wc.legislations.map(function(ac) {
					var key = "l_" + ac.code;
					if (key in unique) {
						throw new Error(locale.format(module, "uniqueLE", ac.code));
					} else unique[key] = 1;
					return {
						code: ac.code,
						title: _collectLocales(ac, "item"),
						condition: ac.condition
					};
				}),
				badges: wc.badges.map(function(item) {
					var key = "B_" + item.code;
					if (key in unique) {
						throw new Error(locale.format(module, "uniqueB", item.code));
					} else unique[key] = 1;
					return {
						code: item.code,
						title: _collectLocales(item, "item"),
						functions: (item.functions || "").split(/[^\w]+/)
					};
				}),
				parameters: wc.parameters.map(function(item) {
					var key = "P_" + item.code;
					if (key in unique) {
						throw new Error(locale.format(module, "uniqueP", item.code));
					} else unique[key] = 1;
					return {
						code: item.code,
						title: _collectLocales(item, "item"),
						type: "integer"
					};
				}),
				signature: helper.partnerId,
				signatureText: helper.partnerId
			};
		} catch (e) {
			helper.addError(e.message, diagnoses);
			return key;
		}
		var signed = helper.signLicense(result, globals.context);
		fs.writeFile(helper.POLICIES + "/" + key + ".json", signed, _);
		if (wc.__oldName && wc.__oldName !== key) {
			tracer && tracer("delete old policy " + wc.__oldName);
			try {
				fs.unlink(helper.POLICIES + "/" + wc.__oldName + ".json", _);
			} catch (e) {
				helper.addError(locale.format(module, "errorOld", e), diagnoses);
			}
		}
		wc.__oldName = key;
		return key;
	},
	$delete: function(_, key, diags) {
		var cnt = helper.usedPolicies(_, key);
		if (cnt) return helper.addError(locale.format(module, "notDeletePolicy", cnt), diags);
		fs.unlink(helper.POLICIES + "/" + key + ".json", _);
	}

};






// collect localised titles from working copy
function _collectLocales(source, name) {
	var result = {};
	var en_us = false; // en-us locale
	for (var key in helper.localeObject) {
		var title = source[name + "Title_" + key];
		if (title) {
			if (key === "en-US") en_us = true;
			result[key] = title;
		}
	}
	var extra = source[name + "Locales"];
	if (extra) extra.forEach(function(item) {
		if (item.localeCode && item.localeCode.$uuid) {
			var key = item.localeCode.$uuid;
			if (key in result) throw new Error(locale.format(module, "doubleLocale", (helper.loadLocales()[key] + " [" + key + "]")));
			result[key] = item.title;
			if (key === "en-US") en_us = true;
		}
	});
	if (!en_us) {
		throw new Error(locale.format(module, "noEnUs"));
	}
	return result;
}

// distribute localised titles from policy into working copy
function _distributeLocales(result, name, source) {
	result[name + "Locales"] = [];
	var locObject = helper.loadLocales();
	Object.keys(source).forEach(function(key) {
		if (key in helper.localeObject) {
			// standard locale
			result[name + "Title_" + key] = source[key];
		} else { // extra locale
			result[name + "Locales"].push({
				$uuid: key,
				localeCode: {
					$uuid: key,
					code: key,
					title: locObject[key]
				},
				title: source[key]
			});
			if (name === "item") result[name + "More"] = true;
		}
	});
	return result;
}