"use strict";
var locale = require("streamline-locale");
var helper = require('../lib/helper');
var fs = require('streamline-fs');
var util = require('util');
var globals = require('streamline-runtime').globals;

module.exports = {
	$title: "Users",
	$modes: "create?,delete?,edit,duplicate?,query,details",
	$properties: {
		login: {
			$title: "Login",
			$type: "application/x-string",
			$isMandatory: true,
			$pattern: "^\\w+$",
			$displayLength: 10,
			$links: {
				$details: {
					$url: "/data/users/{$uuid}?representation=users.$details",
				},
			}
		},
		name: {
			$title: "Name",
			$isMandatory: true,
			$displayLength: 10,
			$type: "application/x-string"
		},
		oldPasswd: {
			$title: "Old Password",
			$type: "application/x-password",
			$noQuery: true,
			$adminMode: -1
		},
		passwd: {
			$title: "Password",
			$type: "application/x-password",
			$pattern: "^[ -~]+$",
			$capabilities: "confirm",
			$noQuery: true

		},
		admin: {
			$title: "Administration",
			$type: "application/x-boolean",
			$adminMode: 1,
			$default: false
		}
	},
	// save instance as obtained from wc. The key is in wc.$uuid. Diagnoses can be appended to diagnoses
	// function must return key of instance
	$save: function(_, wc, diagnoses) {
		if (!globals.context.admin && wc.$uuid !== globals.context.login) {
			diagnoses.push({
				$severity: "error",
				$message: locale.format(module, "noAdmin")
			});
			return;
		};

		var users = helper.users;
		// unique
		if (wc.login) wc.login = wc.login.toLowerCase();
		if (wc.$uuid !== wc.login) {
			if (users.some(function(user) {
					return (user.login === wc.login);
				})) {
				diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "uniqueLogin"),
				});
				return;
			}
			if (!wc.passwd) {
				diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "noPassword"),
				});
				return;
			}
		}
		if (globals.context.admin && !wc.admin && wc.$uuid === globals.context.login) {
			diagnoses.push({
				$severity: "error",
				$message: locale.format(module, "noRemoveAdmin")
			});
			return;
		}

		if (wc.passwd && !globals.context.admin && wc.oldPasswd !== globals.context.passwd) {
			diagnoses.push({
				$severity: "error",
				$message: (wc.oldPasswd ? locale.format(module, "wrongOldPwd") : locale.format(module, "noOldPwd")),
			});
			return false;
		}
		if (!users.some(function(user) {
				// update instance
				if (user.login === wc.$uuid) {
					user.login = wc.login;
					user.name = wc.name;
					user.admin = wc.admin;
					if (wc.passwd) {
						// avoid empty password
						helper.updateUserData(user, wc.passwd, null, globals.context);
					}
					// login unique
					return true;
				}
			})) {
			// new instance
			if (!wc.passwd) {
				diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "setPassword"),
				});
				return;
			} else users.push(helper.updateUserData({
				login: wc.login,
				name: wc.name,
				admin: wc.admin
			}, wc.passwd, null, globals.context));
		}

		try {
			fs.writeFile(helper.USER_FILE, JSON.stringify(users), "utf8", _);
		} catch (e) {
			helper.addError(locale.format(module, "cannotWrite", e), diagnoses);
		}
		return wc.login;
	},
	// load a single instance by key. $uuid will be set by framework
	// if no instance available, return undefined
	// parameters: key: primary key of that instance
	//             query: query parameters
	$load: function(_, key, query) {
		var users = helper.users;
		var wc;
		users.forEach(function(user) {
			if (user.login === key) {
				wc = {
					login: user.login,
					name: user.name,
					admin: (user.admin || false)
				};
				if (!query.duplicate) {
					wc.$properties = {
						login: {
							$isReadOnly: true
						}
					};
				}
			}
		});
		return wc;
	},
	// load a list of all instances. $uuid must be set!
	$list: function(_, query) {
		var resources0 = helper.users;
		var startIndex = +query.startIndex || 1;
		var endIndex = startIndex + (+query.count || 50) - 1;
		var resources = [];
		if (globals.context.admin) {
			var upperBound = resources0.length;
			if (upperBound > endIndex) {
				resources.truncated = true;
				upperBound = endIndex;
			}
			for (var i = startIndex - 1; i < upperBound; i++) {
				var resource = resources0[i];
				resources.push({
					login: resource.login,
					name: resource.name,
					"$uuid": resource.login,
					admin: (resource.admin || false)
				});
			}
		} else {
			resources0.some(function(user) {
				if (user.login === globals.context.login) {
					resources[0] = {
						"$uuid": user.login,
						login: user.login,
						name: user.name,
						admin: (user.admin || false)
					};
					return true;
				}
			});
		}
		return resources;
	},
	// delete instance. When there are problems, append diagnostic messages to diagnoses
	$delete: function(_, key, diagnoses) {
		var users = helper.users; // no cloning!
		if (key === globals.context.login) {
			diagnoses.push({
				$severity: "error",
				$message: locale.format(module, "notDeleteSelf")
			});
			return;
		}
		for (var i = 0; i < users.length; i++) {
			if (users[i].login === key) {
				users.splice(i, 1);
				try {
					fs.writeFile(helper.USER_FILE, JSON.stringify(users), "utf8", _);
				} catch (e) {
					helper.addError(locale.format(module, "cannotWrite", e), diagnoses);
				}
				break;
			}
		}
	}
};