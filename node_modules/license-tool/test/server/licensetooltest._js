"use strict";
var helper = require("license-tool/lib/helper");
// Test for passphrase encryption
var tracer; // = console.error;

QUnit.module(module.id);

asyncTest("encryption", 3, function(_) {
	try {
		var passphrase = "abcdef";
		var salt = "A1B2C3D4E5";
		var password = "secret";
		var encrypted = helper.encryptPassphrase(passphrase, salt, password);
		tracer && tracer(encrypted);
		var decrypted = helper.decryptPassphrase(encrypted, salt, password);
		strictEqual(passphrase, decrypted, "Test short");
		var passphrase = "123456789012345678901234567890123456789012345678901234567890";
		var encrypted = helper.encryptPassphrase(passphrase, salt, password);
		tracer && tracer(encrypted);
		var decrypted = helper.decryptPassphrase(encrypted, salt, password);
		strictEqual(passphrase, decrypted, "Test long");
		var passphrase = "";
		var encrypted = helper.encryptPassphrase(passphrase, salt, password);
		tracer && tracer(encrypted);
		var decrypted = helper.decryptPassphrase(encrypted, salt, password);
		strictEqual(passphrase, decrypted, "Test very short");

		start();

	} catch (e) {
		console.error(e);
	}
});

test("pattern", 5, function() {
	strictEqual(helper._makePattern("X"), "^(?:X)\\w*$", "Pattern X");
	strictEqual(helper._makePattern("X, Y"), "^(?:X|Y)\\w*$", "Pattern X, Y");
	strictEqual(helper._makePattern("XA-XC, YB,ZAA-ZAB"), "^(?:X[A-C]|YB|ZA[A-B])\\w*$", "Pattern XA-XC, YB,ZAA-ZAB");
	var reg = new RegExp(helper._makePattern("XA-XC, YB,ZAA-ZAB"));
	strictEqual(reg.test("XBA"), true, "Test prefix");
	strictEqual(reg.test("ZAC"), false, "Test prefix");
});