"use strict";

var helpers = require("syracuse-core/lib/helpers");
var datetime = require("syracuse-core/lib/types/datetime");
var flows = require("streamline/lib/util/flows");
var fs = require("streamline-fs");

exports.tracer = null;

var _scripts = [];
// script index MUST be target version number for this script

function fillPackages(_, db) {
	var rootDir = __dirname + "/../../..";
	fs.readdir(rootDir, _).forEach_(_, function(_, name) {
		var dir = rootDir + "/" + name;
		if (!fs.stat(dir, _).isDirectory()) return;
		dir += "/test";
		if (!fs.exists(dir, _)) return;
		var pack = db.fetchInstance(_, db.model.getEntity(_, "package"), {
			jsonWhere: {
				name: name,
			}
		});
		console.log("package=" + name + ": " + pack);
		if (!pack) {
			pack = db.model.getEntity(_, "package").factory.createInstance(_, null, db);
			pack.name(_, name);
			pack.save(_);
			if (pack.hasErrors(_)) throw new Error("package save failed: " + name);
		}

		function fillUnitTests(_, subdir) {
			if (!fs.exists(dir + "/" + subdir, _)) return;
			fs.readdir(dir + "/" + subdir, _).forEach_(_, function(_, testName) {
				var m = /^(.*)\._?js$/.exec(testName);
				if (!m) return;
				testName = m[1];
				var test = db.fetchInstance(_, db.model.getEntity(_, "unitTest"), {
					jsonWhere: {
						package: {
							_uuid: pack._id,
						},
						scope: subdir,
						name: testName,
					}
				});
				if (!test) {
					console.log("test=" + name + "/" + subdir + "/" + testName);
					test = db.model.getEntity(_, "unitTest").factory.createInstance(_, null, db);
					test.package(_, pack);
					test.scope(_, subdir);
					test.name(_, testName);
					test.active(_, true);
					test.deleted(_, true);
					test.pass(_, false);
					test.lastRun(_, datetime.now());
					test.save(_);
					if (test.hasErrors(_)) throw new Error("unit test save failed: " + testName);
				}
			});
		}
		fillUnitTests(_, "common");
		fillUnitTests(_, "server");
		fillUnitTests(_, "client");
	});
}
exports.initData = function(_, db) {
	exports.tracer && exports.tracer("Initializing database");
	fillPackages(_, db);
	// update related data
	/*db.db.collection("PageData", _).update({}, {
		$set: {
			content: null
		}
	}, {
		safe: true,
		multi: true
	}, _);*/
};

exports.dataUpdate = function(_, db, actualVersion, targetVersion) {
	console.log("actual=" + actualVersion + ", target=" + targetVersion);
	// force log: always
	exports.tracer = console.log;
	//
	_scripts.slice(actualVersion + 1, targetVersion + 1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
};

exports.metadata = {
	fileId: "121b5f7084f3",
	// this id MUST never change and MUST be unique over all update scripts
	description: "Master branch update script" // !important, some description, optional and can change
};