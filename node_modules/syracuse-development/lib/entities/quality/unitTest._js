"use strict";
var locale = require('streamline-locale');
var path = require('path');
var fs = require('streamline-fs');
var datetime = require("syracuse-core/lib/types/datetime");


function run(_, test, testRun) {
	try {
		var db = test._db;
		var start = datetime.now();
		var runner = require("test-runner/lib/server/testServer");
		var prevAssertions = test.assertions(_) || 0;
		var prevErrors = test.errors(_) || 0;
		var results = runner.runUnitTest(_, test.module(_));
		var end = datetime.now();

		var errors = results.filter(function(result) {
			return result.errorStack != null;
		});
		test.assertions(_, results.length);
		test.errors(_, errors.length);
		test.prevAssertions(_, prevAssertions);
		test.prevErrors(_, prevErrors);
		test.lastRun(_, start);
		test.save(_);
		if (test.hasErrors(_)) throw new Error("unit test save failed: " + test.module(_));

		var testResult = db.model.getEntity(_, "testResult").factory.createInstance(_, null, db);
		testResult.start(_, start);
		testResult.end(_, end);
		testResult.assertions(_, results.length);
		testResult.errors(_, errors.length);
		testResult.prevAssertions(_, prevAssertions);
		testResult.prevErrors(_, prevErrors);
		var details = testResult.assertionResults(_);
		results.forEach_(_, function(_, result) {
			var detail = details.add(_);
			detail.message(_, result.message);
			detail.errorStack(_, result.errorStack);
		});
		testResult.unitTest(_, test);
		if (testRun) testResult.testRun(_, testRun);
		testResult.save(_);
		if (testResult.hasErrors(_)) throw new Error("test result save failed");

		// set disagnose for service UI
		if (errors.length > 0) test.$addDiagnose("error", locale.format(module, "TestFailed", errors.length, results.length));
		else test.$addDiagnose("success", locale.format(module, "TestPassed", results.length));
	} catch (ex) {
		console.log(ex.stack);
	}
}


exports.entity = {
	$titleTemplate: "Unit Test {name}",
	$descriptionTemplate: "Unit tests",
	$helpPage: "Development-reference-Unit-Tests",
	$valueTemplate: "{name}",
	$createActionTitle: "New unit test",
	$listTitle: "List of unit tests",
	$properties: {
		scope: {
			$title: "Scope",
			$isMandatory: true,
			$enum: [{
				$value: "common",
				$title: "common",
			}, {
				$value: "server",
				$title: "server",
			}, {
				$value: "client",
				$title: "client",
			}],
		},
		name: {
			$title: "Name",
			$linksToDetails: true,
			$isMandatory: true,
		},
		description: {
			$title: "Description",
		},
		active: {
			$title: "Active",
			$type: "boolean",
		},
		deleted: {
			$title: "Deleted",
			$type: "boolean",
		},
		lastRun: {
			$title: "Last Run",
			$type: "datetime",
			$isNullable: true,
		},
		pass: {
			$title: "Pass",
			$type: "boolean",
			$compute: function(_, instance) {
				var errors = instance.errors(_);
				return errors == null ? null : errors === 0;
			},
		},
		assertions: {
			$title: "Assertions",
			$type: "integer",
			$isNullable: true,
		},
		errors: {
			$title: "Errors",
			$type: "integer",
			$isNullable: true,
		},
		prevAssertions: {
			$title: "Previous assertions",
			$type: "integer",
			$isNullable: true,
		},
		prevErrors: {
			$title: "Previous errors",
			$type: "integer",
			$isNullable: true,
		},
		module: {
			$title: "Module",
			$compute: function(_, instance) {
				return instance.package(_).name(_) + '/test/' + instance.scope(_) + '/' + instance.name(_);
			},
		},
		filename: {
			$title: "File",
			$compute: function(_, instance) {
				var base = path.resolve(__dirname, '../../../..', instance.module(_));
				var exts = ['._js', '.js', '._coffee', '.coffee'];
				for (var i = 0; i < exts.length; i++) {
					if (fs.exists(base + exts[i], _)) return base + exts[i];
				}
				throw new Error("file not found: " + base);
			},
		},
	},
	$relations: {
		package: {
			$title: "Package",
			$type: "package",
			$inv: "unitTests",
		},
		results: {
			$title: "Results",
			$type: "testResults",
			$inv: "unitTest",
			$isComputed: true,
		},
	},
	$searchIndex: {
		$fields: ["description"]
	},
	$uniqueConstraints: [
		["package", "name"]
	],
	$services: {
		run: {
			$method: "POST",
			$isMethod: true,
			$title: "Run",
			$execute: function(_, context, instance) {
				run(_, instance);
			}
		},
		runAll: {
			$method: "POST",
			$isMethod: true,
			// TODO: change it to false once service links work in query facets
			$title: "Run all tests",
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context, instance) {
				try {
					var t = context && context.tracker;
					if (t) t.phase = locale.format(module, "PreparingList");

					var d = t ? (t.$diagnoses = t.$diagnoses || []) : (instance.$diagnoses = instance.$diagnoses || []);
					var runner = require("test-runner/lib/server/testServer");
					var db = context.db;
					var unitTests = db.fetchInstances(_, db.getEntity(_, 'unitTest'), {
						active: true,
						$or: [{
							scope: "common"
						}, {
							scope: "server"
						}],
					});
					var testRun = db.model.getEntity(_, "testRun").factory.createInstance(_, null, db);
					testRun.start(_, datetime.now());

					if (t) t.phase = locale.format(module, "RunningTest");
					unitTests.forEach_(_, function(_, unitTest, i) {
						if (t) {
							if (t.abortRequested) return;
							t.phaseDetail = unitTest.name(_);
							t.progress = 100 * i / unitTests.length;
						}
						run(_, unitTest, testRun);
						var diag = unitTest.$diagnoses[0];
						if (diag && diag.$severity !== 'success') {
							d.push({
								severity: diag.$severity,
								message: unitTest.module(_) + ": " + diag.$message
							});
						}
					});
					testRun.end(_, datetime.now());
					testRun.save(_);
					if (testRun.hasErrors(_)) throw new Error("error saving test run");
				} catch (ex) {
					console.error(ex.stack);
				}
			}
		},
	},
};