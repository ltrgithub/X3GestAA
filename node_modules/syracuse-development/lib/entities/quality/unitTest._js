"use strict";
var locale = require("syracuse-core/lib/locale");
var path = require('path');
var fs = require('streamline-fs');

exports.entity = {
	$titleTemplate: "Unit Test {name}",
	$descriptionTemplate: "Unit tests",
	$helpPage: "Development-reference-Unit-Tests",
	$valueTemplate: "{name}",
	$createActionTitle: "New unit test",
	$listTitle: "List of unit tests",
	$properties: {
		scope: {
			$title: "Scope",
			$isMandatory: true,
			$enum: [{
				$value: "common",
				$title: "common",
			}, {
				$value: "server",
				$title: "server",
			}, {
				$value: "client",
				$title: "client",
			}],
		},
		name: {
			$title: "Name",
			$linksToDetails: true,
			$isMandatory: true,
		},
		description: {
			$title: "Description",
		},
		active: {
			$title: "Active",
			$type: "boolean",
		},
		deleted: {
			$title: "Deleted",
			$type: "boolean",
		},
		lastRun: {
			$title: "Last Run",
			$type: "datetime",
			$isNullable: true,
		},
		pass: {
			$title: "Pass",
			$type: "boolean",
			$compute: function(_, instance) {
				var errors = instance.errors(_);
				return errors == null ? null : errors === 0;
			},
		},
		assertions: {
			$title: "Assertions",
			$type: "integer",
			$isNullable: true,
		},
		errors: {
			$title: "Errors",
			$type: "integer",
			$isNullable: true,
		},
		module: {
			$title: "Module",
			$compute: function(_, instance) {
				return instance.package(_).name(_) + '/test/' + instance.scope(_) + '/' + instance.name(_);
			},
		},
		filename: {
			$title: "File",
			$compute: function(_, instance) {
				var base = path.resolve(__dirname, '../../../..', instance.module(_));
				var exts = ['._js', '.js', '._coffee', '.coffee'];
				for (var i = 0; i < exts.length; i++) {
					if (fs.exists(base + exts[i], _)) return base + exts[i];
				}
				throw new Error("file not found: " + base);
			},
		},
	},
	$relations: {
		package: {
			$title: "Package",
			$type: "package",
			$inv: "unitTests",
		},
		results: {
			$title: "Results",
			$type: "testResult",
			$inv: "unitTest",
			$isComputed: true,
		},
	},
	$searchIndex: {
		$fields: ["description"]
	},
	$uniqueConstraints: [
		["package", "name"]
	],
	$services: {
		run: {
			$method: "POST",
			$isMethod: true,
			$title: "Run",
			$execute: function(_, context, instance) {
				var runner = require("test-runner/lib/server/testServer");
				var results = runner.runUnitTest(_, instance.module(_));
				var errors = results.filter(function(res) {
					return res.errorStack;
				});
				if (errors.length > 0) instance.$addDiagnose("error", locale.format(module, "TestFailed", errors.length, results.length));
				else instance.$addDiagnose("success", locale.format(module, "TestPassed", results.length));
			}
		},
		runAll: {
			$method: "POST",
			$isMethod: true,
			// TODO: change it to false once service links work in query facets
			$title: "Run all tests",
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context) {
				try {
					var t = context && context.tracker;
					t.phase = locale.format(module, "PreparingList");
					var d = (t.$diagnoses = t.$diagnoses || []);
					var runner = require("test-runner/lib/server/testServer");
					var unitTests = context.db.fetchInstances(_, context.db.getEntity(_, 'unitTest'), {
						active: true
					});
					t.phase = locale.format(module, "RunningTest");
					unitTests.forEach_(_, function(_, unitTest, i) {
						if (t.abortRequested) return;
						t.phaseDetail = unitTest.name(_);
						t.progress = i / unitTests.length;
						exports.entity.$services.run.$execute(_, context, unitTest);
						var diag = unitTest.$diagnoses[0];
						if (diag && diag.$severity !== 'success') {
							d.push({
								severity: diag.$severity,
								message: unitTest.module(_) + ": " + diag.$message
							});
						}
					});
				} catch (ex) {
					console.error(ex.stack);
				}
			}
		},
	},
};