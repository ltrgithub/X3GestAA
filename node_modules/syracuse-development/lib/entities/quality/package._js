"use strict";
var locale = require("syracuse-core/lib/locale");
var datetime = require("syracuse-core/lib/types/datetime");
var flows = require("streamline/lib/util/flows");
var fs = require("streamline-fs");

exports.entity = {
	$titleTemplate: "Package {name}",
	$descriptionTemplate: "{description}",
	$helpPage: "Development-reference-Package",
	$valueTemplate: "{name}",
	$createActionTitle: "New package",
	$listTitle: "List of packages",
	$properties: {
		name: {
			$title: "Description",
			$linksToDetails: true,
			$isMandatory: true,
		},
		description: {
			$title: "Description",
		},
	},
	$relations: {
		unitTests: {
			$title: "Unit Tests",
			$type: "unitTests",
			$inv: "package",
			$isComputed: true,
		},
	},
	$searchIndex: {
		$fields: ["description"]
	},
	$uniqueConstraints: [
		["name"]
	]
};

exports.fillPackages = function(_, db) {
	var rootDir = __dirname + "/../../../..";
	fs.readdir(rootDir, _).forEach_(_, function(_, name) {
		var dir = rootDir + "/" + name;
		if (!fs.stat(dir, _).isDirectory()) return;
		dir += "/test";
		if (!fs.exists(dir, _)) return;
		var pack = db.fetchInstance(_, db.model.getEntity(_, "package"), {
			jsonWhere: {
				name: name,
			}
		});
		console.log("package=" + name + ": " + pack);
		if (!pack) {
			pack = db.model.getEntity(_, "package").factory.createInstance(_, null, db);
			pack.name(_, name);
			pack.save(_);
			if (pack.hasErrors(_)) throw new Error("package save failed: " + name);
		}

		function fillUnitTests(_, subdir) {
			if (!fs.exists(dir + "/" + subdir, _)) return;
			fs.readdir(dir + "/" + subdir, _).forEach_(_, function(_, testName) {
				var m = /^(.*)\._?js$/.exec(testName);
				if (!m) return;
				testName = m[1];
				var test = db.fetchInstance(_, db.model.getEntity(_, "unitTest"), {
					jsonWhere: {
						package: {
							_uuid: pack._id,
						},
						scope: subdir,
						name: testName,
					}
				});
				if (!test) {
					console.log("test=" + name + "/" + subdir + "/" + testName);
					test = db.model.getEntity(_, "unitTest").factory.createInstance(_, null, db);
					test.package(_, pack);
					test.scope(_, subdir);
					test.name(_, testName);
					test.active(_, true);
					test.deleted(_, false);
					//test.pass(_, false);
					//test.lastRun(_, null);
					test.save(_);
					if (test.hasErrors(_)) throw new Error("unit test save failed: " + testName);
				}
			});
		}
		fillUnitTests(_, "common");
		fillUnitTests(_, "server");
		fillUnitTests(_, "client");
	});
};