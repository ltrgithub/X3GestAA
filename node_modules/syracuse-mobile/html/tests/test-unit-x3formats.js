"use strict";
(function($) {		
	var exports = $.x3formats;
	var _settings = {
		decimalSep: '.',
		dateOrder: 0,
		thousandSep: ',',
		dateSep: '/',
		datePivot: 1957,
		timeSep: ':',
		vOn: true,
		zOn: true,
		dynFormats: {},
		skipBadFormat: true,
		skipBadDynFmt: true,
		tracer: null
	};	
	function _format(log , fmt, val, expect, opts){
		try{
			opts = $.extend({}, _settings, opts || {})
			var res = exports.format (opts, fmt, val);
			if (res === expect)
				log.nbok++;
			else log.nbko++;
			log.log.push((res === expect ? "OK" : "KO") + " - fmt [" + fmt + "] - Val[" + val + "] - Res[" + res + "] - expect[" + expect + "]");
		}catch(e){
			log.nbko++;
			log.log.push("KO - fmt [" + fmt + "] - Val[" + val + "] - Res[" + res + "] - Error[" + e.message + "]");
		}
		return 
	}
	
	function _updateLog(log, mainLog, title){
		mainLog.log.push("\n********************* " + title + (log.nbko==0 ? " SUCCEEDED" : " FAILED") + " **********************");
		mainLog.log.push("Nb OK = " + log.nbok + " - Nb KO = " + log.nbko);
		mainLog.log.push(log.log.join('\n'));
		mainLog.log.push("\n\n");
		mainLog.nbok +=  log.nbok;
		mainLog.nbko +=  log.nbko;
		return mainLog;
	}
	function _testAlphanum(mainLog){
		var log = {
			log:[],
			nbok:0,
			nbko:0					
		}
		_format(log, 'K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', '115566', '11.az55.zeaaz66.zae  .eaz   zaez');
		_format(log, 'K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', '115566', '11.az55.zeaaz66.zae  .eaz   zaez');
		_format(log, 'K:11X', ' A ', ' A');
		_format(log, 'K:11X', ' A ', ' A');
		_format(log, 'Kv1:11X', ' A ', ' A');
		_format(log, 'Kv1:11X', ' A ', ' A');
		_format(log, 'K:2#[.]2#[.]2#[.]2#[.]2#[ ]', '115566', '11.55.66.  .');
		_format(log, 'K:2#[.]2#[.]2#[.]2#[.]2#[ ]', '115566', '11.55.66.  .');
		_format(log, 'Kv2:10X', '', '');
		_format(log, 'K:10X', '', '          ', {
			vOn: false
		});
		_format(log, 'K:10X', 'abcde', 'abcde     ', {
			vOn: false
		});
		_format(log, 'K:10X', ' abcde ', ' abcde    ', {
			vOn: false
		});
		_format(log, 'Kv2:10X', 'abcde', 'abcde');
		_format(log, 'Kv2:10X', ' rr rr  ', 'rr rr');
		_format(log, 'Kv2:10X', '          ', '');
		_format(log, 'Kv2:10X', ' abcde ', 'abcde');
		_format(log, 'Kv2:[    ]10X[    ]', ' abcde ', 'abcde');
		_format(log, 'K:[    ]10X[    ]', ' abcde ', '     abcde');
		_format(log, 'K:3A', 'ABC', 'ABC');
		_format(log, 'K:3A', 'ABC', 'ABC');
		_format(log, 'K:3A', 'ABz', 'ABZ');
		_format(log, 'KTD:20X', 'if0 if1 if2 if3', 'if0 if1 if2 if3');
		_format(log, 'K:10X', '', '');
		_format(log, 'Kz:10X', '', '');
		_format(log, 'K:10A', '', '');
		_format(log, 'Kz:10A', '', '');
		_format(log, 'K:10A', '  ', '');
		_format(log, 'Kz:10A', '  ', '');
		_format(log, 'K:2B', 'abc', 'AB');
		_format(log, 'K:2B', 'abc', 'AB');
		_format(log, 'K:2B', 'aB', 'AB');
		_format(log, 'K:2B', 'aB', 'AB');
		_format(log, 'K:2B', 'AB', 'AB');
		_format(log, 'K:2B', 'AB', 'AB');
		_format(log, 'KA:2B', 'AB', 'AB');
		_format(log, 'KA:2B', 'AB', 'AB');
		_format(log, 'KAv2:10X', '   a  ', 'a');
		_format(log, 'KAv2:10X', '   a  ', 'a');
		_format(log, 'KAv2:10X', '     ', '');
		_format(log, 'KAv2:10X', '     ', '');
		_format(log, 'KA:10X', 'A', 'A');
		_format(log, 'KA:10X', 'A', 'A');
		_format(log, 'K:2B', 'abc', 'AB');
		_format(log, 'K:2B', 'abc', 'AB');
		_format(log, 'K:5X', 'abcdefghijk', 'abcde');
		_format(log, 'K:5X', 'abcdefghijk', 'abcde');
		return _updateLog(log, mainLog, "Test AlphaNumeric");
	}
	if (exports && !exports.test){		
		exports.test = function(){
			var log = {
				log:[],
				nbok:0,
				nbko:0					
			}
			_testAlphanum(log);
			var result = [];
			result.push("********************* TEST X3 FORMATS " + (log.nbko==0 ? "SUCCEEDED" : "FAILED") + " **********************")
			result.push("Nb OK = " + log.nbok + " - Nb KO = " + log.nbko);
			result.push(log.log.join('\n'));
			return result;
		}	
	}
})(jQuery)