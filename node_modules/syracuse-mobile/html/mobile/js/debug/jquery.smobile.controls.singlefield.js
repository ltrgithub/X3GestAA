"use strict";
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	var $helpers = $.helpers; // == require
	var $proto = $.proto; // == require
	/* used for $query or $lookup */

	that.controls.SingleField = {
		sync: true,
		initData: function(cp, ft, title, opts, $article) {
			var res = "";
			switch (ft) {
				case "application/x-string":
				case "application/x-password":
					opts.label = title;
					opts.type = "text";
					opts.$minLength = cp.$minLength;
					opts.$maxLength = cp.$maxLength;
					opts.$article = $article;
					if (cp.$format == "$email") opts.type = "email";
					else if (cp.$format == "$url") opts.type = "url";
					else if (cp.$format == "$phone") opts.type = "tel";
					if (ft === "application/x-password") opts.type = "password";
					if (cp.$isMandatory) opts.$isMandatory = true;
					res = "Edit";
					break;
				case "application/x-choice":
					var items = [];
					opts.items = items;
					opts.$isMandatory = true;
					opts.$article = $article;
					cp.$value.$enum.forEach(function(value) {
						items.push({
							value: value.$value,
							title: $proto.execExpression(value.$title, cp)
						});

					});

					opts.label = title;
					res = "Combo";
					break;
				case "application/x-integer":
				case "application/x-real":
				case "application/x-decimal":
				case "application/x-quantity":
					//ok
					opts.type = "number";
					opts.decimals = 0;
					opts.$article = $article;
					var isQuantity = (ft === "application/x-quantity"); //ok
					var cpp = isQuantity ? cp.$value : cp;
					if (cpp.$format != null) opts.decimals = $helpers.format2decimals(cpp.$format);
					else if (cpp.$scale != null) opts.decimals = cpp.$scale;
					opts.label = title;
					if (opts.$article.$minimum != null) opts.$minimum = opts.$article.$minimum;
					if (opts.$article.$maximum != null) opts.$maximum = opts.$article.$maximum;
					if (cpp.$minimum != null) opts.$minimum = cpp.$minimum;
					if (cpp.$maximum != null) opts.$maximum = cpp.$maximum;
					if ((opts.$minimum != null) && (opts.$maximum != null) && (opts.$minimum || opts.$maximum)) opts.type = "range";
					opts.$isMandatory = true;
					if (isQuantity) opts.quantity = cp.$unit;
					res = "Edit";
					break;
				case "application/x-boolean":
					opts.label = title;
					opts.$article = $article;
					res = "CheckBox";
					break;
				case "image":
					opts.label = title;
					opts.$article = $article;
					res = "Picture";
					break;
				case "application/x-date":
					opts.type = "date";
					opts.$article = $article;
					opts.label = title;
					opts.$isMandatory = cp.$isMandatory;
					res = "Edit";
					break;
				case "application/x-time":
					opts.type = "time";
					opts.$article = $article;
					opts.label = title;
					opts.$isMandatory = cp.$isMandatory;
					res = "Edit";
					break;
				case "application/x-datetime":
					opts.type = "datetime";
					opts.$article = $article;
					opts.label = title;
					opts.$isMandatory = cp.$isMandatory;
					res = "Edit";
					break;
			}
			return res;


		},
		handler: function(c, after) {
			var controller = this,
				fieldData;
			var options = c.data || {};
			var page = controller.getPageData();
			if (!page) return after({
				html: "",
				options: {}
			});
			var html = [];
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var cp = $proto.getProto(page, options.$bind),
				pp = cp;
			var entityProto = $proto.getProto(page);
			if (cp.$rtype === "application/x-reference") {
				pp = cp.$protoparent;
			}
			var $article = options.$article;
			if (edit) {
				var $article = options.$article;
				options.$article = null;
				var controls = [];
				var cp = $proto.getProto(page, options.$bind),
					cc = null,
					ft = cp.$type || cp.$rtype;
				var scc = {
					id: c.id + "_" + options.$bind,
					data: {
						inline: false,
						bind: options.$bind
					}
				};
				var opts = scc.data,
					cclass;
				if (pp.$isReadOnly) opts.$isReadOnly = true;
				if (pp.$isDisabled) opts.$isDisabled = true;
				if (pp.$isHidden || pp.$isExcluded) return after(null);
				var title = $proto.parseExpression(pp.$shortTitle || pp.$title, {
					data: null,
					$prototype: pp
				}, "$title");
				switch (ft) {
					case "application/x-reference":
						opts.type = "text";
						fieldData = controller.getValue(options.$bind);
						opts.label = title;
						opts.$article = $article;
						scc.id = c.id + "_" + options.$bind;
						if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
							opts.$lookupurl = cp.$links.$lookup.$url;
						}

						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Lookup.createLookup(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Lookup";
						cc.scid = "_" + options.$bind;
						break;
					default:
						cclass = that.controls.SingleField.initData(cp, ft, title, opts, $article);
						break;
				}
				if (cclass) {
					scc.id = c.id + "_" + options.$bind;
					cc = that.controls[cclass]["create" + cclass](controller, scc);
					cc.id = scc.id;
					cc.uiClass = cclass;
					cc.scid = "_" + options.$bind;
				}

				if (cc) {
					controls.push(cc);
				}
				if (controls.length) return after(controls);
				else return after(null);
			} else {
				if (cp.$isHidden || $article.$isHidden || cp.$isExcluded || $article.$isExcluded) return after({
					html: "",
					bind: false
				});
				var labelAfter = false,
					cssl;


				html.push('<div class="s-m-relative');
				var valproto = controller.getProtoDataValue(options.$bind);
				if (valproto && valproto.$isHidden) html.push(" s-m-hidden");
				html.push('">');
				cssl = ["s-m-style", "s-m-label"];
				if (!$article.$isTitleHidden) {
					if (cp.$type === "image") {
						$article.$label = $article.$label || {};
						$article.$label.$styles = $article.$label.$styles || [];
						$article.$label.$styles.push("top");
					}

					if ($article.$label) {
						$proto.auth.mobileExtentions(cssl, $article.$label);
						labelAfter = $article.$label.$after;
					}

					if (!labelAfter) {
						html.push('<label class="' + cssl.join(' ') + '">');
						html.push($proto.parseExpression(pp.$shortTitle || pp.$title || "", {
							data: null,
							$prototype: pp
						}, "$title", {
							html: true
						}));
						html.push('</label>');
					}
				} else {
					// FDN - We don't display the label - There's awith 40% in css that dispaly balnc label instead of hidden it
					//html.push('<label class="' + cssl.join(' ') + '"></label>');
				}
				var css = ["s-m-style s-m-value"];

				$proto.auth.mobileExtentions(css, $article);
				var _createparentDiv = function(isImage) {
					html.push('<div class="');
					html.push(css.join(' '));
					if ($article.$cssPrefix) html.push(' noindent');
					if (isImage === true) html.push(' image');
					html.push('"');
					if ($article.$style) html.push(' style="' + $article.$style + '"');
					html.push('>');
				};
				if (cp.$rtype === "application/x-reference") {
					_createparentDiv();
					fieldData = controller.getValue(options.$bind);
					var toptions = that.controls.types.addReference(cp, fieldData, controller, options.$bind, true);
					that._addLink(html, toptions, controller);
				} else {
					var updproto = {}, added = false;
					$proto.updproto(updproto, cp);
					if ($proto.isNumeric(cp.$type)) {
						if ($article.$maximum != null) updproto.$maximum = $article.$maximum;
						if ($article.$minimum != null) updproto.$minimum = $article.$minimum;
						$proto.updproto(updproto, valproto);
						if ((updproto.$maximum != null) && (updproto.$minimum != null)) {
							var value = controller.getValue(options.$bind) || 0;
							if (value < $article.$minimum) value = $article.$minimum;
							if (value > $article.$maximum) value = $article.$maximum;
							added = true;
							var proc = 0;
							try {
								proc = parseInt(value * 10000 / ($article.$maximum - $article.$minimum)) / 100;

							} catch (ex) {}
							css.push("top");
							_createparentDiv();
							html.push('<div class= "s-m-slider"><div class="s-m-slider-ind" style="left:' + proc + '%"><center>');
							html.push($proto.htmlValue(controller.getValue(), entityProto, updproto, {
								$bind: options.$bind,
								$type: cp.$type
							}, value, {
								useValue: true
							}));
							html.push('</center></div></div>');
							//
							//html.push("***");

						}

					}
					if (!added) {
						_createparentDiv(updproto.$type === "image");
						var dd = controller.getValue();
						var defvalue = $proto.htmlValue(dd, entityProto, updproto, {
							$bind: options.$bind,
							$type: cp.$type
						}, null, {
							cssPrefix: $article.$cssPrefix
						});
						var nvalue = defvalue;
						if ($article && $article.$expression) {
							nvalue = $article.$expression.replace(/\{(.*?)\}/g, function(match, prop) {
								if (prop === options.$bind) return defvalue;

								var cppp = $proto.getProto(page, prop);
								if (!cppp) return "";
								return $proto.htmlValue(dd, entityProto, cppp, {
									$bind: prop,
									$type: cppp.$type
								}, '', {
									list: true
								});
							});

						}
						$proto.auth.mobileCssPrefix(nvalue, html, $article, controller.getValue(), null, false, false);
						//html.push(nvalue);

					}
				}
				html.push('</div>');
				if (labelAfter) {
					html.push('<label class="' + cssl.join(' ') + '">');
					html.push($proto.parseExpression(pp.$shortTitle || pp.$title || "", {
						data: null,
						$prototype: pp
					}, "$title", {
						html: true
					}));
					html.push('</label>');
				}
				html.push('</div>');

				return after({
					html: html.join(''),
					bind: options.bind,
					options: options
				});
			}
		}
	};
})(jQuery);