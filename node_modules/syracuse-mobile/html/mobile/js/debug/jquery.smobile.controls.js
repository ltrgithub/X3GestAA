"use strict";
(function($) {
    var that = $.smobile || {};
    $.smobile = that;

    var $helpers = $.helpers;
    var $proto = $.proto;
    var $sdata = $.sdata;
    var consts = $helpers.ui.consts;

    that.ui = that.ui || {};
    that.ui.menuItem = function(title, description, icon) {
        icon = icon || consts.default_menu_name;
        title = (title || "").trim();
        description = (description || "").trim();
        if (title.length === 0) {
            title = description;
            description = "";
        }
        if (description === "-") description = "";
        if (title.equalsIgnoreCase(description)) description = "";
        if (title.length === 0) title = $helpers.locale().ui.notitle;
        var css = icon.split(".");
        if (css.length === 1) css.splice(0, 0, consts.default_menu_class);
        var res = '<div class="' + consts.menu_icon_size + ' ' + css.join(" ") + '"></div><h3 class="uppercase">' + title + '</h3>';
        if (description.length > 0) res += '<p><strong>' + description + '</strong></p>';
        return res;
    };
    that.ui.iconItem = function(title, description, icon) {
        icon = icon || consts.default_icon_name;
        var css = icon.split(".");
        if (css.length === 1) css.splice(0, 0, consts.default_icon_class);
        return '<div class="' + consts.normal_icon_size + ' ' + css.join(" ") + '"></div><h3>' + title + '</h3><p><strong>' + description + '</strong></p>';
    };
    that.ui.panelItem = function(title, icon, description, count) {
        icon = icon || consts.default_panel_name;
        var css = icon.split(".");
        if (css.length === 1) css.splice(0, 0, consts.default_panel_class);
        var res = '<div class="' + consts.panel_icon_size + ' ' + css.join(" ") + '"></div>' + $helpers.htmlEncode(title);
        if (description) res += '<p class="s-m-pspace">' + $helpers.htmlEncode(description) + '</p>';
        if (count != null) {
            res += '<span class="s-m-notify-sync ui-li-count s-m-hidden">0</span>';
        }
        return res;
    };
    that.ui.sdata_link = function(data, options) {
        var url = "";
        if (options.url) {
            url = options.url;
        } else if (options.facet) {
            var cd = {
                $role: $.sdata.config.role || "",
                $baseUrl: $.sdata.config.baseUrl,
                $pluralType: options.entity,
                $representation: options.representation || ""
            };
            if (options.facet === "$dashboard") {
                url = options.dashboard + ".$dashboard";
            } else if (options.facet === "$query") {
                url = "{$baseUrl}/{$pluralType}?representation={$representation}.$query&role={role}" + (options.params ? ("&" + options.params) : "");
                url = $proto.parseExpression(url, {
                    data: $proto.exprData(cd)
                }, "$url");
            } else if (options.facet === "$create") {
                var ce = ".$edit";
                // use edit
                var value = $.sdata.config.pages[options.representation + ce];
                if (!value) {
                    // use create
                    ce = ".$create";
                    value = $.sdata.config.pages[options.representation + ce];
                }
                url = "{$baseUrl}/{$pluralType}/$template/$workingCopies?representation={$representation}" + ".$edit" + "&role={role}" + (options.params ? ("&" + options.params) : "");
                url = $proto.parseExpression(url, {
                    data: $proto.exprData(cd)
                }, "$url");
            }
        }
        return url;
    };
    that.ui.urlHref = function(url, controller) {
        var res = [($helpers.hashFirst() ? ('#' + that.linkDetailPage(controller)) : "")];
        res.push($helpers.encodeJsmQuery('?url=' + $helpers.encodeURIComponent(url)));
        res.push(($helpers.hashFirst() ? ("") : '#' + that.linkDetailPage(controller)));
        return res.join("");

    };
    that.controls = {};
    that.addJqmData = function(options, html, filter, inline, inlinePrefix) {
        if (options.jmdata) {
            Object.keys(options.jmdata).forEach(function(name) {
                if (filter && (filter.indexOf(name) < 0)) return;
                var value = options.jmdata[name];
                var qu = ((options.jmdata === "true") || (options.jmdata === "false")) ? "" : "\"";
                if (inline) html.push(' ' + inlinePrefix + value);
                else html.push(' ' + name + '=' + qu + value + qu);
            });
        }
    };
    that.controls.navFooter = function(query, hasNext, hasPrev, id, create, options, html) {
        var isVisible = hasNext || hasPrev,
            nState = (hasPrev ? ((hasNext ? 3 : 1)) : (hasNext ? 2 : 0));
        if (create) {
            if (!options) {
                options = {
                    "jmdata": {
                        "data-role": "footer",
                        "data-position": "fixed"
                    }
                };
            }
            html.push('<div id="' + id + '"');
            $helpers.addJqmData(options, html);
            html.push('class="s-m-navig-parent ui-bar' + (isVisible ? '' : ' s-m-hidden') + (query ? "" : " detail") + '">');
            html.push('<center class="s-m-navig">');
            html.push('<div class="s-m-dot' + ((nState === 2) ? ' active' : '') + '"></div>');
            html.push('<div class="s-m-dot' + ((nState === 3) ? ' active' : '') + '"></div>');
            html.push('<div class="s-m-dot' + ((nState === 1) ? ' active' : '') + '"></div>');
            html.push('</center></div>');
        } else {
            var $nav = $('#' + id);
            if (isVisible) {
                var kids = $($nav.children()[0]).children();
                $(kids[0]).attr('class', 's-m-dot' + ((nState === 2) ? ' active' : ''));
                $(kids[1]).attr('class', 's-m-dot' + ((nState === 3) ? ' active' : ''));
                $(kids[2]).attr('class', 's-m-dot' + ((nState === 1) ? ' active' : ''));
                if ($nav.hasClass('s-m-hidden')) $nav.removeClass("s-m-hidden");
            } else {
                if (!$nav.hasClass('s-m-hidden')) $nav.addClass("s-m-hidden");
            }
        }
    };

    // Read field errors returned by server
    that.ui.refreshErrors = function(controller, bind, id) {
        return controller.getDiagnoses(bind);
    };
    // id of error dom elmt attached to a field
    that.ui.getErrId = function(fldId) {
        return fldId + '_error';
    };
    // Add error viewer for an field
    that.ui.addErrors = function(errors, id, html) {
        html.push('<div  data-role="none" class="s-m-flderr" id="' + that.ui.getErrId(id) + '">');
        if (errors) {
            html.push(errors.join('<br/>'));
        }
        html.push('</div>');
        return html;
    };
    that.ui.setErrorFocus = function($content) {
        var e = $content.find(".fieldError");
        e.parents('div:jqmData(role="collapsible")').filter('div[data-collapsed=true]').trigger("expand");
        var e = $content.find(".fieldError:first:visible");
        if (e.length > 0) {
            // We scroll parent instead of error message ?? - Solves issue #3062
            $.smobile.scrollIntoView(e.parent());
            var e = e.find('input');
            if (e.focus) {
                e.focus();
            }
            // Issue #3067  - Used to recalculate lastScroll
            // If error field is a lookup a selection in a lookup do nnot reposition the field in the page if we don't trigger this event
            $content.trigger("scrollstop");
        }
        $helpers.clearErrors();
    };
    // Append a field container to html
    // Return field errors if any
    that.ui.addFieldContainer = function(controller, html, ctrlId, bind, css) {
        html.push('<div id="' + ctrlId + '"');
        var errors = controller.getDiagnoses(bind); //	 ["test error messages - Field " + bind];
        html.push(' class="');
        if (errors) {
            html.push('fieldError');
        }
        if (css) {
            html.push(' ');
            html.push(css);
        }
        html.push('" data-role="fieldcontain">');
        return errors;
    };
    // Display errors on checkValue or Refresh method
    that.ui.updateError = function(controller, $elmt, ctrlId, error) {
        if (!$elmt) return;
        var $err = $elmt.find('#' + that.ui.getErrId(ctrlId));
        if (error) {
            // Controller error to block action processing
            controller.pushError(error);
            $elmt.addClass("fieldError");
            if ($err) {
                if (Array.isArray(error)) error = error.join('<br>');
                error = error.replace(/[\n\r]/g, '<br>');
                $err.html(error);
            }
            return $elmt;
        } else {
            if ($err) $err.html("");
            if ($elmt.hasClass("fieldError")) {
                $elmt.removeClass("fieldError");
            }
        }
        return null;
    };
    // Called by control if an error has been caught
    that.ui.doOnblurKo = function(controller, ctrlId, error) {
        controller.pushError(error);
        var parent = $('#' + ctrlId);
        if (!parent) {
            console.log("!! Parent id[" + ctrlId + "] not found - Onblur Error [" + error.message + "]");
            return;
        }
        var errElmt = parent.find('#' + that.ui.getErrId(ctrlId));
        if (errElmt.length == 0) {
            // If no errElmt insert one after parent - should occur
            errElmt = $(that.ui.addErrors([error.message], ctrlId, []).join('')).append(parent);
        }
        errElmt.html(error.message);
        parent.addClass("fieldError");
        return errElmt;
    };
    that.ui.doOnblurOk = function(ctrlId) {
        var parent = $('#' + ctrlId);
        if (parent && parent.hasClass("fieldError")) {
            parent.removeClass("fieldError");
        }
    };
    that.ui.addArrayLinks = function(id, controller, html, cp, bind) {
        var page = controller.getPageData();
        var proto = $proto.getProto(page);
        var edit = $sdata.representation2facet(controller.ui);
        var links = $proto.extractLinks(cp, proto, controller.getCurrentData(), edit, page);
        if (links && links.length) {
            // add inline buttons
            links.forEach(function(link) {
                controller.alinks = controller.alinks || {};
                var cdid = $helpers.uuid();
                controller.alinks[cdid] = {
                    bind: bind,
                    $title: link.$title,
                    url: link.$url,
                    $method: link.$method,
                    $parameters: link.$parameters
                };
                html.push('<a href="#actionservice" data-role="button" data-action-global="true"  data-action="' + cdid + '" data-iconpos="left" data-mini="true" data-theme="d" data-icon="gear" data-inline="true">' + link.$title + '</a>');
            });
        }
    };
    that._addLink = function(html, options, controller, oncontent) {
        var ccss = options.css || [],
            closeA = false,
            startLen = html.length;
        if (options.disabled) ccss.push("ui-disabled ui-state-disabled");
        if (options.$isHidden) ccss.push("s-m-hidden");
        var putLink = options.url || options.hash || options.action;
        if (putLink && options.noLinkOffline) {
            // check offline
            putLink = $helpers.online();
        }
        if (putLink) {
            closeA = true;
            if (options.action) {
                if (options.action === "popup") {
                    html.push('<a href="#' + options.popupId + '"');
                    html.push(' data-rel="popup"');
                } else {
                    html.push('<a href="#"');
                    if (!options.actionParams) options.actionParams = options.action;
                }
            } else if (options.hash) {

                if ((controller.applicationId) && (options.hash.indexOf(that.hash_sep) < 0)) {
                    var pc = that.PAGES[options.hash];
                    if (pc && (pc.useAppId === 2)) options.hash = options.hash + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
                }
                html.push('<a href="#' + options.hash + '"');
            } else {
                /*url*/
                if (options.linkType === "$external") {
                    html.push('<a href="' + options.url + '"');
                } else {
                    html.push('<a href="');
                    html.push(that.ui.urlHref(options.url, controller));
                    html.push('"');
                }
            }
            if (options.actionParams) html.push(" data-action='" + options.actionParams + "'");
            if (options.actionData) html.push(" data-action-param='" + options.actionData + "'");
            $helpers.addJqmData(options, html);
            if (options.controlId) html.push(' id="' + options.controlId + '"');
            if (ccss.length) html.push(' class="' + ccss.join(" ") + '"');
            if (options.linkId) html.push(" id='" + options.linkId + "'");
            html.push('>');
        }
        if (options.value != null) {
            html.push($helpers.htmlEncode(options.value));
            if (!options.$article) options.$article = {};
            if (options.title && options.$article.$isRrefDescrHidden !== true) {
                var cssl = ["s-m-style", "s-m-linkdesc"];
                if (options.$article.$refDescription) {
                    $proto.auth.mobileExtentions(cssl, options.$article.$refDescription);
                }
                html.push('<span class="' + cssl.join(' ') + '"> ' + $helpers.htmlEncode(options.title) + '</span>');
            }
        } else if (oncontent) {
            oncontent();
        }
        if (closeA) html.push('</a>');
        // True if link added
        return (html.length - startLen) != 0;
    };
    that.controls.Html = {
        sync: true,
        handler: function(c, after) {
            //var controller = this;
            var options = c.data;
            var l = {
                html: options.html,
                options: options
            };
            options.html = null;
            return after(l);
        }
    };
    that.addControl = function(parentLayout, c, after) {
        var controller = this;
        //	var id = c.id;
        var obj = that.controls[c.uiClass];
        if (obj && obj.handler) {
            obj.handler.apply(controller, [c,
                function(ctrl) {
                    if (ctrl) {
                        if (Array.isArray(ctrl)) {
                            ctrl.forEach(function(cc) {
                                parentLayout.childs.push(cc);
                            });
                        } else {
                            parentLayout.childs.push(ctrl);
                        }
                    }
                    after(ctrl);
                },
                parentLayout.layoutClass
            ]);
        } else after(null);
    };
    that.setEvents = function($c, c) {
        var controller = this;
        var obj = that.controls[c.uiClass];
        if (obj && obj.events) {
            return obj.events.apply(controller, [$c, c]);
        }
        return null;
    };

})(jQuery);