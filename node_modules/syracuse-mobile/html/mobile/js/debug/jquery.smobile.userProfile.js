"use strict";

(function($) {
	var that = $.smobile;
	var $helpers = $.helpers || {};
	var $sdata = $.sdata || {};

	that.userProfile = that.userProfile || {};

	/*
	 * Set the server side locale for the current session
	 */
	that.userProfile.setLocale = function(locale, cb) {
		var ecb = function() {
			cb();
		};
		that.userProfile._checkUserProfileLocale(locale, function(needUpdate) {
			if (needUpdate === true) {
				that.userProfile.queryLocalePreferences(function(localePreferences) {
					_createUserProfileWC(function(userProfile) {
						_updateUserProfileWC(userProfile, locale, localePreferences, cb, ecb);
					}, ecb);
				}, ecb);
			} else {
				cb(); // Done, UP is already ok
			}
		}, ecb);
	};

	that.userProfile._checkUserProfileLocale = function(locale, cb, ecb) {
		$sdata.GET($sdata.sdataHost + "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current", function(data) {
			if (data) {
				if (data.selectedLocale && data.selectedLocale.code === locale) {
					cb();
				} else {
					cb(true);
				}
			} else {
				ecb();
			}
		}, null, {
			timeout: 0
		});
	};

	function _createUserProfileWC(cb, ecb) {
		var trackingId = $helpers.uuid();
		var url = $sdata.sdataHost + "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit&role=&trackingId=" + trackingId;
		$sdata.post(url, null, function(data) {
			if (data) {
				cb(data);
			} else {
				ecb();
			}
		});
	}

	function _updateUserProfileWC(userProfile, locale, localePreferences, cb, ecb) {
		var localePreference = _find(localePreferences, function(l) {
			return l.code === locale;
		});
		if (!localePreference) {
			ecb();
			return;
		}
		// Since the GET (_checkUserProfileLocale) on the current UP tests this already, one should never end up here
		if (userProfile && userProfile.selectedLocale && userProfile.selectedLocale.code === locale) { // userProfile already up to date
			$sdata.DELETE(userProfile.$url, function() {
				cb();
			}, undefined, {
				noDiagnoses: true
			});
			return;
		}
		var userProfileData = {
			$uuid: userProfile.$uuid,
			selectedLocale: {
				$uuid: localePreference.$uuid
			},
			$actions: {
				$save: {
					$isRequested: true
				}
			}
		};
		$sdata.put(userProfile.$url, userProfileData, function(data) {
			$sdata.DELETE(userProfile.$url, function() {
				if (data) {
					cb();
				} else {
					ecb();
				}
			}, undefined, {
				noDiagnoses: true
			});
		}, undefined, {
			noDiagnoses: true
		});
	}

	function _find(arr, matcher) {
		var i;
		for (i = 0; i < arr.length; i++) {
			if (matcher(arr[i])) {
				return arr[i];
			}
		}
	}

	that.userProfile.queryLocalePreferences = function(cb, ecb) {
		var url = $sdata.sdataHost + "/sdata/syracuse/collaboration/syracuse/localePreferences?representation=localePreference.$query&role=";
		$sdata.GET(url, function(data) {
			if (data) {
				var locales = [];
				data.$resources.forEach(function(locale) {
					locales.push({
						"$uuid": locale.$uuid,
						"code": locale.code,
						"description": locale.description
					});
				});
				cb(locales);
			} else {
				ecb();
			}
		});
	};
	
	that.getLicenseInformation = function() {
		var url = $sdata.sdataHost + "/sdata/syracuse/collaboration/syracuse/licenses/$service/current";
		return $sdata.GETSYNC(url);
	};
	
	that.userProfile.getUserProfileVersionInfo = function(cb) {
		$sdata.GET($sdata.sdataHost + "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current", function(data) {
			if (data) {
				cb(data);
			}
		}, null, {
			timeout: 0
		});
		cb(null);
	};
	
})(jQuery);