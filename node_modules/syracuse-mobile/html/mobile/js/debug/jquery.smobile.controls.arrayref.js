"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.ArrayRef = {
		_createItem: function(html, cp, value, index, controller, field, candel) {

			html.push('<li class="s-m-slist-item" data-icon="s-noicon" data-corners="false"  data-iconpos="right">');
			html.push('<a href="#">');
			var ioptions = that.controls.types.addReference(cp, value, controller, field, true);
			html.push($helpers.htmlEncode(ioptions.value));
			if (ioptions.title) {
				html.push('<span class="s-m-style s-m-linkdesc"> ' + $helpers.htmlEncode(ioptions.title) + '</span>');
			}
			html.push('</a>');
			html.push('<div class="s-m-custom-icon" data-action="delete" data-action-param="' + index + '">');
			html.push('<div data-action-param="' + index + '" data-action="delete" class="ui-icon ui-icon-' + (candel ? 's-delete-dark' : 's-noicon') + '"></div></div>');
			html.push('</li>');

		},
		refresh: function(controller, options, $c, id) {
			var fieldData = controller.getValue(options.bind, null, []);
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var arrayproto = $proto.getProto(page, options.bind, true);
			var oldHasBtn = options.hasButton;
			options.hasButton = $proto.canAdd(arrayproto, fieldData);
			options.candel = $proto.canDel(arrayproto);

			var html = [];
			if (!options.$isTitleHidden) html.push('<li data-role="list-divider">' + options.title + '</li>');
			fieldData.forEach(function(value, index) {
				that.controls.ArrayRef._createItem(html, cp, value, index, controller, options.bind, options.candel);
			});
			if (oldHasBtn && options.hasButton) {
				var save = $('#' + id + '_last').detach();
				$c.html(html.join(''));
				$c.append(save);
			} else if (!options.hasButton) {
				$c.html(html.join(''));
			} else {
				html.push(that.controls.ArrayRef._addBtn(id, options));
				$c.html(html.join(''));
				$("#" + id + '_new').button();
			}
			$c.listview("refresh");

		},
		_addBtn: function(id, options) {
			var html = [];
			html.push('<li id="' + id + '_last">');
			html.push('<button id="' + id + '_new" data-action="new" data-action-param="' + options.$lookupurl + '" class="s-m-min40 ui-btn-right" data-role="button" data-mini="true" data-inline="false" data-theme="f" data-icon="plus" data-iconpos="left" ');
			html.push('href="#');
			html.push('">');
			html.push($helpers.locale().ui.add_item);
			html.push('</button>');
			html.push('</li>');
			return html.join('');

		},
		createArrayRef: function(controller, c, fieldData) {
			if (fieldData == null) fieldData = controller.getValue(c.data.bind, null, []);
			var options = c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var arrayproto = $proto.getProto(page, options.bind, true);
			if (options.$lookupurl) options.$lookupurl = options.$lookupurl + "&control=" + $helpers.encodeURIComponent(c.id);
			var html = [];
			html.push('<ul id="' + c.id + '" class="s-m-list" data-role="listview" data-inset="true"');
			$helpers.addJqmData(options, html);
			html.push('>');

			if (options.title && !options.$isTitleHidden) html.push('<li data-role="list-divider">' + options.title + '</li>');
			options.hasButton = $proto.canAdd(arrayproto, fieldData);
			options.candel = $proto.canDel(arrayproto);
			fieldData.forEach(function(value, index) {
				that.controls.ArrayRef._createItem(html, cp, value, index, controller, options.bind, options.candel);
			});
			if (options.hasButton) {
				html.push(that.controls.ArrayRef._addBtn(c.id, options));
			}
			html.push('</ul>');
			that.ui.addLinks(c.id, controller, html, cp, c.data.bind);
			options.$lookup = 1;
			return {
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},

		setValue: function(controller, c, value, next) {
			var $ul = $('#' + c.id + "");

			var page = controller.getPageData();
			// proto of reference
			var cp = $proto.getProto(page, c.options.bind);
			// value of reference
			var cv = $proto.getRefFromValue(value, cp);
			var newkey = "",
				oldkey = "";
			var isuuid = $proto.useUuid(cp);
			// calculate new $key
			if (isuuid) newkey = cv.$key || cv.$uuid;
			else {
				cp.noRef = true;
				newkey = $proto.parseExpression(cp.$key, {
					data: $proto.exprData(cv),
					$prototype: cp
				}, "$key");
				delete cp.noRef;
			}
			var fieldData = controller.getValue(c.options.bind, null, []);
			var i = fieldData.length;
			while (i--) {
				var co = fieldData[i];
				if (isuuid) {
					oldkey = co.$key || co.$uuid;
					if (oldkey === newkey) return next();
				} else {
					oldkey = $proto.parseExpression(cp.$key, {
						data: controller.exprData(co),
						$prototype: cp
					}, "$key");
					if (oldkey === newkey) return next();
				}
			}
			var nd = $proto.setArrayRef(cv, cp, controller.exprData(), c.options.bind);
			fieldData.push(nd);
			controller.setData(c.options.bind, fieldData);
			controller.notifyChange();
			controller.setNeedRefresh();
			return next();
		},

		handler: function(c, after, layoutClass) {
			return after(that.controls.ArrayRef.createArrayRef(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				var target = e.target;
				var page = controller.getPageData();
				var cp = $proto.getProto(page, c.options.bind);
				var arrayproto = $proto.getProto(page, c.options.bind, true);

				var p = $(target).attr("data-action");
				if (p && (p === 'delete') && c.options.candel) {
					p = parseInt($(target).attr("data-action-param"), 10);
					e.preventDefault();
					p = parseInt(p, 10);
					var fieldData = controller.getValue(c.options.bind, null, []);

					var oldHasBtn = c.options.hasButton;
					fieldData.splice(p, 1);
					c.options.hasButton = $proto.canAdd(arrayproto, fieldData);
					controller.notifyChange();
					$($ul.children()[p + 1]).remove();
					if (c.options.hasButton && !oldHasBtn) {
						c.options.hasButton = oldHasBtn;
						that.controls.ArrayRef.refresh(controller, c.options, $c, c.id);
					}


				} else if (p && (p === 'new')) {
					p = $(target).attr("data-action-param");
					var url = $proto.parseExpression(p, {
						data: controller.exprData(),
						$prototype: cp
					}, "$url");
					window.location.hash = that.ui.urlHref(url, controller);

				}
			});
		}
	};

})(jQuery);