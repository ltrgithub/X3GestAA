"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	that.controls = that.controls || {};

	that.controls.CheckBox = {
		createCheckBox: function(controller, c) {
			var options = c.data || {};
			var html = [];
			var $article = options.$article || {};
			var errors = that.ui.addFieldContainer(controller, html, c.id, options.bind);
			html.push('<input type="checkbox" name="' + c.id + '_i" id="' + c.id + '_i" ');
			var value = options.value || false;
			if (options.bind) value = controller.getValue(options.bind, null, false);
			if (value) html.push("checked");
			html.push('/>');
			if (!$article.$isTitleHidden) {
				var cssl = ["s-m-style", "s-m-label"];
				$.proto.auth.mobileExtentionsLbl(cssl, $article);
				html.push('<label  for="' + c.id + '_i" class="');
				html.push(cssl.join(' '));
				html.push('">');
				html.push($helpers.htmlEncode(options.label));
				html.push('</label>');
			}
			that.ui.addErrors(errors, c.id, html);
			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},
		refresh: function(controller, options, $c, id) {
			$('#' + id + "_i").attr('checked', controller.getValue(options.bind, null, false)).checkboxradio("refresh");
			return that.ui.refreshErrors(controller, options.bind, id);
		},
		sync: true,
		handler: function(c, after, layoutClass) {
			return after(that.controls.CheckBox.createCheckBox(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			$input.change(function(target) {
				var _aftercchange = controller.afterChangeHnd(c);
				controller.checkChange(c.id, $input[0].checked, _aftercchange, null);
			});

		},
		checkValue: function($c, c) {
			return null;
		}
	};
})(jQuery);