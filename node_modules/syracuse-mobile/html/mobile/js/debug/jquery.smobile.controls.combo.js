"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	that.controls = that.controls || {};
	that.controls.Combo = {
		createCombo: function(controller, c, $article) {
			// $article we are able to change the format of the combo bu authoring (desktop compliance)
			// "$format": "$combo" by default
			if ($article && $article.$format == "$radios") {
				return that.controls.Combo._createRadio(controller, c, $article.$choiceLayout);
			}
			return that.controls.Combo._createSelect(controller, c);
		},
		_createSelect: function(controller, c) {
			var options = c.data || {};
			var html = [];
			var errors = that.ui.addFieldContainer(controller, html, c.id, options.bind, "ui-icon-alt");
			html.push('<label class="ui-input-text" for="' + c.id + '_i">' + options.label + ': </label>');
			html.push('<select id="' + c.id + '_i"');
			$helpers.addJqmData(options, html);
			html.push('>');
			var cv = controller.getValue(options.bind, null, null);
			var key = cv || options.value;
			options.items = options.items || [];
			if ((cv == null) && options.items.length) {
				key = options.items[0].value;
				controller.setData(options.bind, key);
			}
			options.items.forEach(function(item) {
				html.push("<option value=\"" + item.value + "\"" + ((key == item.value) ? " selected=\"selected\"" : "") + ">" + item.title + "</option>");
			});
			html.push('</select>');
			that.ui.addErrors(errors, c.id, html);
			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		_createRadio: function(controller, c, choiceLayout) {
			var nbCols = 1;
			if (choiceLayout != null && choiceLayout.length > 0) {
				if (isNaN(choiceLayout)) {
					if (choiceLayout == "row") {
						nbCols = -1;
					}
				} else {
					nbCols = Math.max(1, parseInt(choiceLayout, 10));
				}
			}
			var options = c.data || {};
			var html = [];
			var errors = that.ui.addFieldContainer(controller, html, c.id, options.bind, "ui-icon-alt");
			html.push('<fieldset data-role="controlgroup" data-mini="true" id="');
			html.push(c.id);
			html.push('_i" ');
			if (nbCols == -1) {
				html.push(' data-type="horizontal"');
			}
			$helpers.addJqmData(options, html);
			html.push('>');
			html.push('<legend>');
			html.push(options.label);
			html.push('</legend>');
			var cv = controller.getValue(options.bind, null, null);
			var key = cv || options.value;
			options.items = options.items || [];
			if ((cv == null) && options.items.length) {
				key = options.items[0].value;
				controller.setData(options.bind, key);
			}
			var id;
			if (nbCols > 1 && options.items.length > 0) {
				html.push('<div class="s-m-radio-table">');
			}
			options.items.forEach(function(item, idx) {
				if (nbCols > 1) {
					if (idx % nbCols == 0) {
						if (idx > 0) html.push('</div>');
						html.push('<div class="s-m-radio-row">');
					}
					html.push('<div class="s-m-radio-cell">');
				}
				html.push('<input type="radio" name="');
				html.push(c.id + "_name");
				html.push('" value="');
				html.push(item.value);
				html.push('"  id="');
				html.push(id = c.id + "_" + idx);
				html.push('"');
				if (key == item.value) {
					html.push(' checked="checked"');
				}
				html.push('>');
				html.push('<label for="');
				html.push(id);
				html.push('">');
				html.push(item.title);
				html.push('</label>');
				if (nbCols > 1) {
					html.push('</div>');
				}
			});
			if (nbCols > 1 && options.items.length > 0) {
				html.push('</div></div>');
			}
			html.push('</fieldset>');
			that.ui.addErrors(errors, c.id, html);
			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		sync: true,
		handler: function(c, after) {
			after(that.controls.Combo.createCombo(this, c));
		},
		checkValue: function($c, c) {
			var controller = this;
			var value;
			var $ctrl = $c.find('#' + c.id + "_i");
			if ($ctrl.is("fieldset")) {
				// Maybe there's another way to get he selected value
				$ctrl.find('input[type="radio"]').each(function(idx, x) {
					if ($(x).prop("checked")) {
						value = $(x).val();
					}
				});
			} else {
				value = $ctrl.find('option:selected').val();
			}
			// Not used 
			return null;
		},
		refresh: function(controller, options, $c, id) {
			return that.ui.refreshErrors(controller, options.bind, id);
		},
		events: function($c, c) {
			var controller = this;
			var $ctrl = $c.find('#' + c.id + "_i");
			var isRadio = $ctrl.is("fieldset");
			var $bind = isRadio ? $ctrl.find('input[type="radio"]') : $ctrl;
			$bind.bind("change", function(event, ui) {
				var value = $(this).val();
				var _aftercchange = controller.afterChangeHnd(c);
				var oldValue = controller.getValue(c.bind, null, null);
				if (oldValue != value) {
					controller.setData(c.bind, value);
					controller.notifyChange();
					if (_aftercchange) _aftercchange();
					var hnd = (c.options.action && controller.pageActions) ? controller.pageActions["action" + c.options.action] : null;
					if (hnd) hnd.bind(controller)();
				}
			});
		}

	};
})(jQuery);