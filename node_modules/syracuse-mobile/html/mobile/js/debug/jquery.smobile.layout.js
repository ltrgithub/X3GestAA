"use strict";
(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	var $helpers = $.helpers;
	var layout = {
		CollapsibleLayout: function(layoutData) {
			var options = layoutData.data;
			var controller = this,
				cd = layoutData,
				isChild = false;
			while (cd) {
				if (cd.parent && controller._html[cd.parent]) {
					cd = controller._html[cd.parent];
					if ((cd.layoutClass === "CollapsibleLayout") || (cd.layoutClass === "TabsLayout")) {
						isChild = true;
					}
				} else break;
			}
			var addpadding = !layoutData.data.hasChildren;
			var b = ['<div id="' + layoutData.id + '" class="s-m-cl' + (addpadding ? '' : ' s-m-nopad') + '" data-role="collapsible"  data-iconpos="right" data-collapsed="' + (options.collapsed ? "true" : "false") + '"'],
				res = {
					childs: [],
					before: "",
					after: "",
					event: null
				};
			options.jmdata = options.jmdata || {};
			if (isChild) {
				options.jmdata["data-theme"] = "e";

			}
			if (options.notCollapsable) {
				options.jmdata["data-expanded-icon"] = "s-noicon";
				options.jmdata["data-collapsed-icon"] = "s-noicon";
				res.event = function($l, id) {
					$l.unbind("expand collapse");
				};

			} else {
				if (isChild) {
					options.jmdata["data-expanded-icon"] = "s-minus";
					options.jmdata["data-collapsed-icon"] = "s-plus";
				} else {

				}
			}
			$helpers.addJqmData(options, b);
			b.push('>');
			if (options.text) b.push('<h' + (layoutData.size || 3) + (!isChild ? ' class="uppercase">' : '>') + $helpers.htmlEncode(options.text || "") + '</h' + (layoutData.size || 3) + '>');
			res.before = b.join('');
			res.after = '</div>';
			return res;

		},
		CollapsibleSetsLayout: function(layoutData) {
			var options = layoutData.data;
			var b = ['<div id="' + layoutData.id + '" data-role="collapsible-set"'];
			$helpers.addJqmData(options, b);
			b.push('>');

			return {
				before: b.join(''),
				after: "</div>",
				childs: []
			};

		},
		Block: function(layoutData) {
			var options = layoutData.data;
			var b = ['<div id="' + layoutData.id + '" data-role="controlgroup"'];
			b.push(' class="');
			if (options.$isHeader) {
				b.push('s-m-pageheader ');
			}
			if (options.$isHidden) {
				b.push('s-m-hidden ');
			}
			b.push('" ');
			$helpers.addJqmData(options, b);
			b.push('">');
			return {
				before: b.join(''),
				after: "</div>",
				childs: []
			};

		},

		BlockBodyLayout: function(layoutData) {
			var options = layoutData.data;
			var b = ['<div id="' + layoutData.id + '" class="ui-body s-m-block'];
			$helpers.addJqmData(options, b, ["data-theme"], true, "ui-body-");
			b.push('">');
			return {
				before: b.join(''),
				after: "</div>",
				childs: []
			};

		},
		BlockLayout: function(layoutData) {
			var options = layoutData.data;
			var b = ['<div id="' + layoutData.id + '" class="'];
			$helpers.addJqmData(options, b, ["data-theme"], true, "ui-body-");
			b.push('">');
			return {
				before: b.join(''),
				after: "</div>",
				childs: []
			};

		},
		AvancedBlock: function(layoutData) {
			var res = {
				before: "",
				after: "",
				childs: [],
				options: {}
			};
			var options = layoutData.data,
				id = layoutData.id,
				b = ['<div id="' + id + '" class="s-m-avanced">'],
				css = [];
			res.options.$opened = (layoutData.$opened === true) ? true : false;
			b.push('<div id="' + id + '_content"');
			if (!res.options.$opened) {
				css.push('s-m-hidden');

			}
			if (css.length) {
				b.push(' class="' + css.join(' ') + '"');
			}
			b.push('>');
			res.before = b.join('');
			b = [];
			b.push('</div><div id="' + id + '_expand" class="s-m-expand">');
			if (res.options.$opened) {
				b.push($helpers.htmlEncode($helpers.locale().ui.array_nodetail));
			} else {
				b.push($helpers.htmlEncode($helpers.locale().ui.array_detail));
			}
			b.push('<span class="ui-icon ui-icon-arrow-d"> </span>');

			b.push('</div></div>');
			res.after = b.join('');
			res.event = function($l, id) {
				var controller = this;
				var $expand = $('#' + id + '_expand');
				$expand.click(function(event) {
					var $expand = $('#' + id + '_expand');
					var $content = $('#' + id + '_content');
					var ll = controller.layouts[id];
					if (ll.options.$opened) {
						$content.addClass("s-m-hidden");
						$expand.html($helpers.htmlEncode($helpers.locale().ui.array_detail) + '<span class="ui-icon ui-icon-arrow-d"> </span>');
					} else {
						$content.removeClass("s-m-hidden");
						$expand.html($helpers.htmlEncode($helpers.locale().ui.array_nodetail) + '<span class="ui-icon ui-icon-arrow-u"> </span>');
					}
					ll.options.$opened = !ll.options.$opened;
				});

			};

			return res;
		},

		TabsLayout: function(layoutData) {
			var controller = this,
				html = [];
			var options = layoutData.data;
			html.push('<div id="' + layoutData.id + '" data-role="collapsible-set" data-iconpos="right"');
			html.push(' data-expanded-icon="arrow-u"');
			html.push(' data-collapsed-icon="arrow-d"');
			html.push('>');

			var res = {
				childs: []
			};
			var ccid = layoutData.id.substring(controller.prefix.length);
			options.tabs.forEach(function(tab, index) {
				var chtml = ['<div id="' + layoutData.id + '_' + index + '" data-role="collapsible"'];
				chtml.push(' data-expanded-icon="arrow-u"');
				chtml.push(' data-collapsed-icon="arrow-d"');

				if (!index) chtml.push(' data-collapsed="false">');
				else chtml.push('>');
				chtml.push('<h' + (layoutData.size || 3) + ' class="s-m-style uppercase">' + $helpers.htmlEncode(tab || "") + '</h' + (layoutData.size || 3) + '>');
				var l = {
					id: ccid + "_" + index,
					before: chtml.join(""),
					after: "</div>",
					childs: [],
					parent: ccid
				};
				res.childs.push(l);
			});
			res.before = html.join('');
			res.after = "</div>";
			return res;
		},
		RowLayout: function(layoutData) {
			var controller = this,
				html = [];
			var options = layoutData.data;
			var rclass = ["s-m-l-table"];
			if (options.responsive) rclass.push("responsive");
			if (options.$theme) rclass.push("theme" + options.$theme.toUpperCase());
			if (options.$styles) options.$styles.forEach(function(s) {
				rclass.push(s);
			});


			html.push('<div id="' + layoutData.id + '" class="' + rclass.join(' ') + '">');
			var res = {
				childs: []
			};
			var ccid = layoutData.id.substring(controller.prefix.length);
			var len = options.widths.length - 1;
			options.widths.forEach(function(width, index) {
				if ((width.indexOf("%") < 0) && (width.indexOf("px") < 0)) width = width + '%';
				var cc = "";
				// try to use css classes(for media query css)
				switch (width) {
					case "20%":
						cc = "s-proc-20";
						break;
					case "25%":
						cc = "s-proc-25";
						break;
					case "30%":
						cc = "s-proc-30";
						break;
					case "50%":
						cc = "s-proc-50";
						break;
					case "75%":
						cc = "s-proc-75";
						break;
					case "33%":
					case "33.33%":
						cc = "s-proc-33";
						break;
					case "66%":
					case "67%":
					case "66.66%":
						cc = "s-proc-67";
						break;
					case "70%":
						cc = "s-proc-70";
						break;

				}
				var rcss = ["s-m-l-row"];
				if ((index === 0) && (index !== len)) rcss.push("first");
				else if ((index !== 0) && (index === len)) rcss.push("last");
				if (options.responsive) rcss.push("responsive");
				if (cc) rcss.push(cc);
				var chtml = ['<div id="' + layoutData.id + '_' + index + '" class="' + rcss.join(" ") + '"'];
				if (!cc) {
					chtml.push(' style="width:' + width + ';"');
				}
				chtml.push('>');

				var l = {
					id: ccid + "_" + index,
					before: chtml.join(""),
					after: "</div>",
					parent: ccid,
					childs: []
				};
				res.childs.push(l);
			});
			res.before = html.join('');
			res.after = "</div>";
			return res;

		}

	};

	that.addLayout = function(parentLayout, layoutData) {
		var controller = this;
		if (layout[layoutData.layout]) {
			var l = layout[layoutData.layout].apply(controller, [layoutData]);
			l.layoutClass = layoutData.layout;
			parentLayout.childs.push(l);
			return l;
		}
		return null;
	};
})(jQuery);