"use strict";
(function($) {
	var $helpers = $.helpers;
	var $proto = $.proto;
	var that = $.sdata || {};
	$.sdata = that;
	var _status = {
		ORIGINAL: 0,
		CREATED: 1,
		MODIFIED: 2,
		DELETED: 3
	};
	var _consts = {
		vnd_sage: "syracuse",
		store_facet: "$edit",
		edit_facet: "$edit"

	};

	function initSdataConfig() {
		try {
			//get settings
			var settings = $helpers.settings();
			settings.sdata = settings.sdata || {};
			if (settings.sdata.sdataHost) {
				that.sdataHost = settings.sdata.sdataHost;
			} else {
				settings.sdata.sdataHost = (window.location.protocol.toLowerCase() === "file:") ? "" : (window.location.protocol + "//" + window.location.host);
				that.sdataHost = settings.sdata.sdataHost;
			}
			//save settings
			$helpers.settings("", settings);
		} catch (e) {
			console.log("initSdataConfig ERROR");
			console.log(e);
		}
	}

	that.consts = _consts;
	that.capabilities = {
		nativeDevice: false,
		showSettings: false,
		authRequired: false,
		showSearch: false,
		loadLocale: false,
		installUrl: "",
		auth: null,
		localeLoader: null
	};
	$helpers.baseUrl = function() {
		return that.config.baseUrl;
	};
	// Remove anonymous function that causes an error on iPhone
	initSdataConfig();
	that.sdataAdmin = function() {
		var settings = $helpers.settings();
		settings.sdata = settings.sdata || {};
		if (settings.sdata.sdataHost && that.capabilities.installUrl) {
			that.sdataHost = settings.sdata.sdataHost;
			return settings.sdata.sdataHost + that.capabilities.installUrl;
		}
		return "";
	};
	//START REPRESENTATION
	var _purl2rep = function(purl) {
		var rep = purl.entity;
		if (purl.query && purl.query.representation) rep = purl.query.representation;
		return rep;
	};
	var _repPart = function(rep) {
		var i = rep.indexOf(".");
		if (i > 0) return rep.substr(0, i);
		return rep;
	};
	var _facetPart = function(rep) {
		var i = rep.indexOf(".");
		if (i > 0) return rep.substr(i + 1);
		return rep;
	};

	that.extractKey = function(value) {
		var a = value.split("'");
		if (a.length > 2) return a[1];
		return value;
	};

	that.store = function(url) {
		if (typeof url !== "object") url = that.parseSdataUri(url);
		var rep = _purl2rep(url);
		if (rep) {
			rep = _repPart(rep);
			if (that.config && that.config.entities && that.config.entities[rep] && that.config.entities[rep].sync) return true;
		}
		return false;
	};

	that.canUseFav = function(url) {
		if (typeof url !== "object") url = that.parseSdataUri(url);
		var rep = _purl2rep(url);
		if (rep) {
			rep = _facetPart(rep);
			return (rep === "$lookup") || (rep === "$query");
		}
		return false;
	};
	that.representation2facet = _facetPart;
	that.editUrl = function(url) {
		if (typeof url !== "object") url = that.parseSdataUri(url);
		url.editActivity = true;
		if (url.query && url.query.representation) {
			var rep = url.query.representation;
			if (rep.indexOf(".") < 0) {
				rep = rep + "." + _consts.edit_facet;
				url.query.representation = rep;
			}
		}
		return that.getUri(url);
	};
	that.url2proto = function(purl, find) {
		var rep = _purl2rep(purl);
		if (!that.config || !that.config.pages) return null;
		if (rep.indexOf(".") < 0) {
			var cr = rep + "." + _consts.store_facet;
			if (find && !that.config.pages[cr]) {
				cr = rep + ".$details";
			}
			if (that.config.pages[cr]) return that.config.pages[cr].$prototype;
		} else {
			if (that.config.pages[rep]) return that.config.pages[rep].$prototype;
		}
		return null;
	};
	that.url2search = function(purl) {
		if (purl && purl.query && purl.query.search) {
			var res = {};
			var proto = that.url2proto(purl);
			var props = proto.$properties.$resources.$item.$properties;
			Object.keys(props).forEach(function(pn) {
				var p = props[pn];
				if (p.$type === "application/x-string") {
					if (p.$capabilities && p.$capabilities.indexOf('filter') >= 0) {
						res[pn] = {
							$type: p.$type
						};
					}
				}
			});
			return res;
		}
		return null;
	};
	that.data2id = function(purl, data, proto) {
		proto = proto || that.url2proto(purl);
		if (!proto) return data.$uuid || "";
		var isuuid = $proto.useUuid(proto);
		if (isuuid) {
			data.$uuid = data.$uuid || $helpers.uuid();
			return data.$uuid;
		}
		return $proto.parseExpression(proto.$key, {
			data: $proto.exprData(data),
			$prototype: proto
		}, "$key");
	},
	that.data2url = function(purl, data, proto) {
		proto = proto || that.url2proto(purl);
		var key = "";
		if (proto) {
			var isuuid = $proto.useUuid(proto);
			if (isuuid) {
				data.$uuid = data.$uuid || $helpers.uuid();
				key = data.$uuid;
			} else key = $proto.parseExpression(proto.$key, {
				data: $proto.exprData(data),
				$prototype: proto
			}, "$key");
		}
		return that.entityUri(purl) + "('" + key + "')?representation=" + _repPart(_purl2rep(purl)) + "&appid=" + that.config.id;
	};
	that.bestProto = function(purl) {
		var rep = _repPart(_purl2rep(purl));
		var facets = [{
			name: "$sync",
			detail: true
		}, {
			name: "$edit",
			detail: true
		}, {
			name: "$details",
			detail: true
		}, {
			name: "$query",
			detail: false
		}, {
			name: "$lookup",
			detail: false
		}];
		var proto = null;
		for (var i = 0, len = facets.length; i < len; i++) {
			proto = that.config.pages[rep + "." + facets[i].name];
			if (proto) {
				proto = proto.$prototype;
				if (!facets[i].detail) proto = proto.$properties.$resources.$item;
				break;
			}
		}
		return proto;
	};
	that.url2local = function(purl, fav) {
		var query = purl.query;
		purl.query = {};
		if (query) {
			if (fav) purl.query.representation = query.representation;
			else purl.query.representation = _repPart(query.representation || "");
		}
		var res = $.sdata.getUri(purl);
		purl.query = query;
		if (purl.id || purl.template) res = res + "&appid=" + $.sdata.config.id;
		return res;
	};

	that.url2entity = function(purl) {
		var rep = _purl2rep(purl);
		return _repPart(rep);
	};
	that.url2representation = function(purl) {
		return _purl2rep(purl);
	};
	that.createUrl = function(newurl, sendUrl, data) {
		var proto = that.url2proto(sendUrl);
		if (proto.$url) newurl = proto.$url;
		newurl = $proto.parseExpression(newurl, {
			data: $proto.exprData(data),
			$prototype: proto
		}, "$url");
		var purl = that.parseSdataUri(newurl);
		if (sendUrl.query && sendUrl.query.representation) {
			purl.query = purl.query || {};
			purl.query.representation = sendUrl.query.representation;
		}
		return $.sdata.getUri(purl);

	};
	that.detailUrl = function(newurl) {
		var purl = that.parseSdataUri(newurl);
		if (purl.query && purl.query.representation) {
			var rep = _repPart(purl.query.representation);
			purl.query.representation = rep + ".$details";
		}
		return $.sdata.getUri(purl);

	};
	//END REPRESENTATION
	that.loadRepData = function(representation) {
		if (!that.config && that.config.id) return null;
		var value = window.localStorage.getItem(that.config.id);
		if (value) {
			value = JSON.parse(value);
			if (value) value = value[representation];
			return value;
		}
		return null;
	};
	that.saveRepData = function(representation, value) {
		if (!that.config && that.config.id) return;
		var dd = window.localStorage.getItem(that.config.id) || "{}";
		try {
			dd = JSON.parse(dd);
		} catch (ex) {
			dd = {};
		}
		dd[representation] = value;
		try {
			window.localStorage.setItem(that.config.id, JSON.stringify(dd));
		} catch (ex) {
			for (var v in window.localStorage) {
				if (v.indexOf("-") >= 0) delete window.localStorage[v];
			}
			window.localStorage.setItem(that.config.id, JSON.stringify(dd));

		}
	};
	that.favorite = function(representation, value) {
		var rep = that.loadRepData(representation);
		if (value != null) {
			rep = rep || {};
			rep.favorite = value;
			that.saveRepData(representation, rep);
			return value;
		} else {
			return rep ? rep.favorite : false;
		}
	};

	that.$url = function(data, url) {
		url = url || data.$url;
		if (data.$baseURI && (url.indexOf(data.$baseURI) < 0)) return data.$baseURI + url;
		else return url;
	};
	that.$purl = function(url) {
		url = url || "";
		var burl = that.config.baseUrl;
		if (burl && (url.indexOf(burl) < 0)) return burl + url;
		else return url;
	};
	var _sdata_types = {
		ENTITY: 0,
		TEMPLATE: 1,
		UNKNOWN: 10
	};

	that.STATUS = _status;
	that.TYPES = _sdata_types;
	that.options = {
		statefulServerPrtocol: true
	};
	//todo remove
	that.funcs = {
		yearMonth: function(value) {
			return $helpers.date.str2dateym(value);
		},
		yearMONTH: function(value) {
			return $helpers.date.str2dateYM(value);
		},
		thisMonth: function(value) {
			var dd = $helpers.date.isoToDate(value);
			var yy = dd.getFullYear(),
				mm = dd.getMonth(),
				day = 1;
			var start = new Date(yy, mm + 1, 1, 0, 0, 0, 0);
			var end = new Date(new Date(yy, mm + 2, 1, 0, 0, 0, 0) - 1 / 24 / 60 / 60 / 1000);
			return '@' + start.toISOString() + '@ and @' + end.toISOString() + '@';
		},
		asString: function(value) {
			return "'" + value.replace("'", "''") + "'";
		}

	};

	var _rID = /^(.*)\(\'(.*)\'\)$/i;
	that.config = {
		id: "",
		baseUrl: "",
		resources: {}
	};

	var _private = {
		groups: {
			$count: function() {},
			$sum: function() {}
		},
		funcs: {
			month: function(value) {
				var date = $helpers.date.isoToDate(value);
				return date.getMonth();
			},
			year: function(value) {
				var date = $helpers.date.isoToDate(value);
				return date.getFullYear();
			},
			day: function(value) {
				var date = $helpers.date.isoToDate(value);
				return date.getDay();
			},
			left: function(value, index) {
				var length = parseInt((index || 0) + "", 10);
				return (value || "").substr(0, length);
			},
			right: function(value, index) {
				var length = parseInt((index || 0) + "", 10);
				var s = (value || ""),
					len = length(s);
				return s.substr(Math.max(0, len - length), length);
			},
			upper: function(value, index) {
				var s = (value || "");
				return s.toUpperCase();
			},
			lower: function(value, index) {
				var s = (value || "");
				return s.toLowerCase();
			},
			substring: function(value, start, len) {
				start = parseInt((start || 0) + "", 10);
				len = parseInt((len || 0) + "", 10);
				return (value || "").substr(start, len);
			},
			length: function(value) {
				return (value || "").length;
			},
			trim: function(value) {
				return (value || "").trim();
			},
			concat: function() {
				var res = [];
				for (var i = 0; i < arguments.length; i++)
					res.push(arguments[i]);
				return res.join('');
			},
			"char": function(code) {
				return String.fromCharCode(parseInt((code || 0) + "", 10));
			},
			"ascii": function(str) {
				if (str && str.length) return str.charCodeAt(0);
				return 0;
			},
			"abs": function(str) {
				var val = parseFloat(str) || 0.0;
				return Math.abs(val);
			},
			"round": function(str) {
				var val = parseFloat(str) || 0.0;
				return Math.round(val);
			},
			"floor": function(str) {
				var val = parseFloat(str) || 0.0;
				return Math.floor(val);
			},
			"ceil": function(str) {
				var val = parseFloat(str) || 0.0;
				return Math.ceil(val);
			},
			"pow": function(x, y) {
				var x = parseFloat(x) || 0.0;
				var y = parseInt(x || "0", 10) || 0;
				return Math.pow(x, y);
			}
		},
		_parseQuery: function(query) {
			var params = {};
			if (query) {
				query.replace(/([^&=;]*)=?([^&;]*)/g, function($0, $1, $2) {
					if ($1) params[$1] = decodeURIComponent($2);
				});
			}
			return params;
		},

		_execSDATA: function(url, options) {
			if (url.createActivity || url.editActivity) {
				/* 
				 *  New edit activity  -- CREATE OR EDIT - Back office URL /sdata/x3/erp/entity/$workingCopies
				 *  Ex:   http://host/sdata/app/-/-/salesOrders/$template/$workingCopies?trackingId=xxx
				 *  Ex:   http://host/sdata/app/-/-/salesOrders('id')/$workingCopies?trackingId=xxx
				 */
				return _private._startEditActivity(url, options);
			} else if (url.entity == $proto.sdataKey.workingCopies) {
				// Local workingcopie - no entity -> Data have been stored in local database
				// /sdata/x3/erp/$workingCopies
				return _private._loadDraft(url, options);
			} else {
				_private.makeURL(url);
				return that.sendSDataRequest(url, options);
			}
		},
		makeURL: function(url) {
			var u = [url.base, url.application, '/' + url.contract, '/' + url.dataset];
			u.push('/' + url.entity);
			if (url.id) u.push("('" + url.id + "')");
			if (url.template) u.push("/$template");
			if (url.createActivity) u.push("/" + $proto.sdataKey.workingCopies);
			if (url.editActivity) u.push("/" + $proto.sdataKey.workingCopies);
			if (url.createActivity || url.editActivity) {
				url.query = url.query || {};
				if (!url.query.trackingId) url.query.trackingId = $helpers.uuid();
			}
			if (url.query) {
				var keys = Object.keys(url.query);
				if (keys) keys.forEach(function(value, index) {
					if (index) u.push('&');
					else u.push('?');
					u.push(value + '=' + $helpers.encodeURIComponent(url.query[value]));
				});
			}
			url.uri = u.join('');
		},
		logSdata: function(desc, url) {
			if ($helpers.trace.sdata) {
				$helpers.log(desc);
				$helpers.log((url.method || "GET") + ": " + url.uri);
			}
		},
		_loadDraft: function(url, options) {
			that.loadDraft(url.id, function(draft) {
				if (!draft) return options.success(null, {
					status: 404
				});
				var response = draft.data;
				response.$info = {
					original_url: draft.original_url,
					// #3369 - We need to know if current mode is creation - It's given by original_url because of local working copies
					isCreation: draft.original_url.indexOf("/$template") > 0
				};
				return options.success(response, {
					status: 200
				});
			});

		},
		/**
		 * @param {{$title: string, $ui:  string, $type: string}} options
		 */
		_startEditActivity: function(url, options) {
			_private.makeURL(url);
			_private.logSdata("Virtual operation: Start edit activity ", url);
			/*  Simulate  stateful server  protocol */
			var newUrl = $.extend(newUrl, url);
			var sendURL = $.extend(true, {}, url);
			delete sendURL.query.trackingId;
			// remove activity to call_execSDATA.sendSDataRequest
			if (sendURL.createActivity) {
				//SEND  GET  /$template
				delete sendURL.createActivity;
			} else if (sendURL.editActivity) {
				//SEND  GET on entity(id)
				delete sendURL.editActivity;
				/*xxx*/
				//sendURL.template = true;
				//delete sendURL.id;
			}

			_private._execSDATA(sendURL, {
				success: function(data, headers) {
					headers = headers || {};
					_private.makeURL(sendURL);
					var ourl = sendURL.uri;
					if (!data && (headers.status > 400) && sendURL.template && that.config) {
						// Issue #3069 - Don't try to create dummy  data - Display error
						return options.success(null, headers);
						var eproto = that.url2proto(sendURL);
						if (eproto) {
							data = $proto.proto2Instance(eproto);
							headers.status = 200;
						}

					}
					if (headers.status > 300) {
						if ((headers.status == 404) && sendURL.template) {
							$helpers.pushException({
								title: $helpers.locale().actions.syncronize,
								message: $helpers.format($helpers.locale().sdata.S404, [newUrl.uri])
							});
						}
						return options.success(null, headers);
					}
					var isTemplate = false;
					if (sendURL.template) {
						data = data || {};
						//TODO update all data
						var tproto = that.url2proto(sendURL);
						isTemplate = true;
						if (tproto) {
							if ($proto.useUuid(tproto)) {
								data.$uuid = $helpers.uuid();
							}
						} else data.$uuid = $helpers.uuid();
					} else {
						if (!data) return options.success(null, headers);
					}
					//	
					data.$trackingId = url.query.trackingId;
					sendURL.entity = $proto.sdataKey.workingCopies;
					sendURL.template = false;
					sendURL.id = url.query.trackingId;
					_private.makeURL(sendURL);
					var draftData = {
						id: data.$trackingId,
						data: data,
						original_url: ourl
					};
					if (!isTemplate) {
						draftData.original_data = $.extend(true, {}, data);
						delete draftData.original_data.$trackingId;
					}
					that.createDraft(draftData, function(draft) {
						var response = draft.data;
						//save original data
						var odata = $.extend(true, {}, response);
						odata.$info = {
							original_url: draft.original_url,
							// #3369 - We need to know if current mode is creation - It's given by original_url because of local working copies
							isCreation: draft.original_url.indexOf("/$template") > 0
						};
						return options.success(odata, {
							status: 201,
							location: sendURL.uri
						});
					});
				}
			});

		},
		_parseSE: function(param) {
			var res = {
				prefix: param,
				content: ""
			};
			var match = _rID.exec(param);
			if (match && (match.length == 3)) {
				res.prefix = match[1];
				res.content = match[2];
			}
			return res;

		},
		parseSDataURL: function(url) {
			var a = url.split("/sdata/"),
				res = null,
				s;
			if (a.length == 2) {
				res = {
					base: a[0] + "/sdata/",
					query: {},
					sdata: "sdata",
					origUri: url
				};
				a = a[1].split("?");
				if (a.length == 2) res.query = _private._parseQuery(a[1]);
				var ss = a[0].split("'");
				var co = "";
				if (ss.length === 3) {
					ss[1] = encodeURIComponent(decodeURIComponent(ss[1]));
					co = ss.join("'");
				} else co = a[0];
				a = co.split('/');

				if (a.length < 3) return null;
				res.application = a[0];
				res.contract = a[1];
				res.dataset = a[2];
				if (a.length < 4) return res;
				res.entity = a[3];
				var p = _private._parseSE(res.entity);
				res.entity = p.prefix;
				res.id = p.content;
				if (a.length > 4) {
					s = a[4];
					if (s == '$template') {
						res.template = true;
						res.createActivity = true;
					} else if (s == $proto.sdataKey.workingCopies) {
						if (res.id) {
							res.editActivity = true;
						} else {
							res.createActivity = true;
							res.template = true;

						}
					}
				}
				if (a.length > 5) {
					s = a[5];
					if (res.template && (s == $proto.sdataKey.workingCopies)) res.createActivity = true;
				}
			}
			return res;
		}
	};
	that._cleanHeaders = function(value) {
		if (value) {
			delete value.$httpMethod;
			delete value.$httpStatus;
			delete value.$httpMessage;
			delete value.$httpLocation;
		}
	};
	that.authenticate = function(after) {
		if ($helpers.online()) {
			//exec auth 
			if (that.capabilities.authRequired && that.capabilities.auth) {
				return that.capabilities.auth(function(ad, error) {
					after(ad, error, !$helpers.online());
				});
			} else {
				if (that.capabilities.loadLocale && that.capabilities.localeLoader) {
					// load locale
					return that.capabilities.localeLoader(function() {
						return after(null, false, !$helpers.online());
					}, false);
				}

			}
		}
		return after(null, false, !$helpers.online());
	};
	that.execBatch = function(syncData, options, resync) {
		if (!syncData && !resync) return options.success();
		that.authenticate(function(ad, error, offline) {
			if (error || offline) {
				if (options.success) options.success();
			} else {
				return that._execBatch(syncData, options, resync);
			}
		});
	};
	that._checkBatchMsgs = function(data) {
		if (data) $helpers.pushDiagnoses(data);
	};
	that.extractErrors = function(data, defaultMsg, types, prototype) {
		return $helpers.dataReadErrors(data, defaultMsg, true, "", null, types, prototype);
	};
	that._postBatch = function(toSend, options, infos, doNext) {
		var _retry;
		var doPost = function(retry) {

			var ch = {
				"Accept": "application/json;vnd.sage=" + _consts.vnd_sage
			};

			var canRetry = $helpers.addCustomHeaders(ch, retry);
			var tpurl = that.translateURL(toSend.$url);
			$.ajax({
				headers: ch,
				type: "POST",
				dataType: "json",
				contentType: "application/json; charset=utf-8",
				url: tpurl,
				data: JSON.stringify(toSend),
				success: function(cd) {
					if (cd.$resources) {
						$helpers.each(cd.$resources,
							/**
							 * @param {{$httpMethod: string, $httpStatus: string, $uuid: string}} value
							 */

							function(value, index, next) {
								var send = toSend.$resources[index];
								var info = infos[index];
								var resUrl = info.url,
									errors, newurl;
								var presUrl = that.parseSdataUri(resUrl);
								if (send.$httpMethod == "PUT") {
									switch (value.$httpStatus) {
										case 200:
											//PUT was successful. Resource has been updated.
											that._cleanHeaders(value);
											// Should be only success or info message - No error
											that._checkBatchMsgs(value);
											return $.sdata.updData(resUrl, {
												data: value,
												original_data: null,
												status: $.sdata.STATUS.ORIGINAL,
												last_error: ""
											}, next);
											//400 Bad Request -The request cannot be fulfilled due to bad syntax
										case 400:
											//Generic status for consumer side error.Client MUST modify the request before resubmitting.
											that._cleanHeaders(value);
											errors = that.extractErrors(value, value.$httpMessage, undefined, options && options.prototype);
											// if editActivity we don't generate global error if only fields errors are returned by server
											if (options.editActivity && errors.hasFieldsErrors) {
												$helpers.setFieldsErrors();
											} else {
												$helpers.pushException({
													title: $helpers.locale().sdata.modify_before,
													message: errors.message
												});
											}
											that._cleanHeaders(send);
											return $.sdata.updData(resUrl, {
												$load: true,
												data: value,
												status: $.sdata.STATUS.MODIFIED,
												last_error: errors.message
											}, next);
											// 410 Gone Indicates that the resource requested is no longer available and will not be available again
										case 410:
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.S410,
												message: errors.message
											});
											that._cleanHeaders(value);
											return $.sdata.delData(resUrl, next);
											// 412 Precondition Failed - The server does not meet one of the preconditions that the requester put on the request
										case 412:
											//The If-Match header was provided but does not match the state of the resource on the provider side.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.S412,
												message: errors.message
											});
											$helpers.setDisplayErrorAsDialog();
											that._cleanHeaders(value);
											return $.sdata.updData(resUrl, {
												data: value,
												original_data: null,
												status: $.sdata.STATUS.ORIGINAL,
												last_error: ""
											}, next);
											// 500 Internal Server Error
										case 500:
											errors = that.extractErrors(value, value.$httpMessage);
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
											// 503 Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance)
										case 503:
											//Transient provider error. Client MAY retry the request.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.S503,
												message: errors.message
											});
											return next();
										default:
											that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: "Protocol error",
												message: $helpers.format($helpers.locale().sdata.unexpected_status, [value.$httpStatus])
											});
											return next();
									}

								} else if (send.$httpMethod == "POST") {
									switch (value.$httpStatus) {
										//201 Created - The request has been fulfilled and resulted in a new resource being created.
										case 201:
											//POST was successful. Resource has been created.
											that._checkBatchMsgs(value);
											newurl = value.$httpLocation || value.$url;
											if (newurl) newurl = that.createUrl(newurl, presUrl, value);
											return $.sdata.delData(resUrl, function() {
												var nfunc = function(data, error) {
													if (error) {
														return next(data, error);
													} else {
														info._cburl = that.detailUrl(newurl);
														return next(data, error);
													}

												};
												if (newurl && that.store(newurl)) {
													return $.sdata.insData(newurl, value, nfunc);
												} else nfunc();
											});
											//202 Accepted - The request has been accepted for processing,
										case 202:
											// Not implemented
											$helpers.pushException({
												title: $helpers.locale().post_ni
											});
											return next();
											//400 Bad Request -The request cannot be fulfilled due to bad syntax
										case 400:
											//Generic status for consumer side error.
											//Client MUST modify the request before resubmitting.
											errors = that.extractErrors(value, value.$httpMessage);
											// if editActivity we don't generate global error if only fields errors are returned by server
											if (options.editActivity && errors.hasFieldsErrors) {
												$helpers.setFieldsErrors();
											} else {
												$helpers.pushException({
													title: $helpers.locale().sdata.modify_before,
													message: errors.message
												});
											}
											return $.sdata.updData(resUrl, {
												$load: true,
												// Store data returned by server (with fields errors)
												data: value,
												last_error: errors.message
											}, next);
											//403 Forbidden - The request was a valid request, but the server is refusing to respond to it.
										case 403:
											//Consumer is not authorized to CREATE the resource.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.SC_canceled,
												message: errors.message
											});
											// delete
											return $.sdata.undoUpdate(resUrl, next);
											//404 Not Found - The requested resource could not be found but may be available again in the future.
										case 404:
											//never
											//One of the elements specified in the URL does not exist. For example, application name, contract name, or resource kind.
											errors = that.extractErrors(value, value.$httpMessage);
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
											//409 Conflict - Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.[
										case 409:
											//The resource cannot be created because of a conflict with existing resources. 
											//For example a violation on a unique index.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.modify_before,
												message: errors.message
											});
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
											//503 Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
										case 503:
											//Transient provider error. Client MAY retry the request.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.S503,
												message: errors.message
											});
											return next();
											// 500 Internal Server Error
										case 500:
											errors = that.extractErrors(value, value.$httpMessage);
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
										default:
											that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: "Protocol error",
												message: $helpers.format($helpers.locale().sdata.unexpected_status, [value.$httpStatus])
											});
											return next();
									}

								} else if (send.$httpMethod == "DELETE") {
									switch (value.$httpStatus) {
										case 200:
											// 410 Gone Indicates that the resource requested is no longer available and will not be available again
										case 410:
											that._checkBatchMsgs(value);
											//DELETE was successful. Resource has been deleted.
											return $.sdata.delData(resUrl, next);
										case 400:
											//Generic status for consumer side error.
											//Client MUST modify the request before resubmitting.
											that._cleanHeaders(value);
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.modify_before,
												message: errors.message
											});
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
											//403 Forbidden - The request was a valid request, but the server is refusing to respond to it.
										case 403:
											//Consumer is not authorized to delete the resource.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.SD_canceled,
												message: errors.message
											});
											return $.sdata.undoUpdate(resUrl, next);
											// 412 Precondition Failed - The server does not meet one of the preconditions that the requester put on the request
										case 412:
											//The If-Match header was provided but does not match the state of the resource on the provider side.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.SD412,
												message: errors.message
											});
											$helpers.setDisplayErrorAsDialog();
											that._cleanHeaders(value);
											return $.sdata.updData(resUrl, {
												data: value,
												original_data: null,
												status: $.sdata.STATUS.ORIGINAL,
												last_error: ""
											}, next);
										case 500:
											//Generic status for consumer side error.
											//Client MUST modify the request before resubmitting.
											that._cleanHeaders(value);
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.modify_before,
												message: errors.message
											});
											errors = that.extractErrors(value, value.$httpMessage);
											return $.sdata.updData(resUrl, {
												$load: true,
												last_error: errors.message
											}, next);
											//503 Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
										case 503:
											//Transient provider error. Client MAY retry the request.
											errors = that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: $helpers.locale().sdata.S503,
												message: errors.message
											});
											return next();
										default:
											that.extractErrors(value, value.$httpMessage);
											$helpers.pushException({
												title: "Protocol error",
												message: $helpers.format($helpers.locale().sdata.unexpected_status, [value.$httpStatus])
											});
											return next();
									}

								}
								next();

							}, function() {

								doNext();
							});

					} else doNext();
				},
				error: function(jqXHR, textStatus, errorThrown) {
					var status = jqXHR ? jqXHR.status : 200;
					if ((status === 401) && canRetry) {
						--retry;
						return _retry(retry);
					}
					$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, toSend.$url, "POST", $helpers.locale().ui.app_exception);
					if (status === 401) that.capabilities.resetInterval = true;
					doNext();
				}
			});
		};
		_retry = function(value) {
			setTimeout(function() {
				return doPost(value);
			}, 10);
		};
		doPost(2);


	};

	var _mobileInfo = ["$info", "$nbFieldErrors", "$localUrl", "$properties", "$baseUrl", "$actions", "$prototype", "$representation", "$type", "$diagnoses"];
	// $url must not be removed
	that._clone = function(data) {
		if (!data) return data;
		if (Array.isArray(data)) {
			var res = [],
				i, len;
			for (i = 0, len = data.length; i < len; i++) {
				res.push(that._clone(data[i]));
			}
			return res;
		} else if (typeof data === "object") {
			var res = {};
			for (var p in data) {
				if (_mobileInfo.indexOf(p) === -1) {
					res[p] = that._clone(data[p]);
				}
			}
			return res;
		} else {
			return data;
		}
	};
	that._removeMobileInfo = function(data) {
		return that._clone(data);
	};
	// resync=true to reinstall applications
	that._execBatch = function(syncData, options, resync) {
		$.mobile.loading('show', {
			theme: "a",
			text: $helpers.locale().ui.sending
		});
		var _dosync = function(opt) {
			resync({
				$reinstall: true
			}, null, function() {
				opt.success();
			});
			return;
		};
		var _resync = function(opt) {
			if (!$helpers.hasErrors() && resync) {
				return _dosync({
					success: function() {
						$.mobile.loading('hide');
						if (opt.success) return opt.success();
					}
				});
			} else {
				$.mobile.loading('hide');
				if (opt.success) return opt.success(opt._cburl ? opt : null);
				return;
			}

		};
		if (!syncData) {
			return _resync(options);
		}
		var allInfos = [];

		$helpers.each(Object.keys(syncData), function(entityKey, ii, doNext) {
			var res = syncData[entityKey];
			var meta = that.entityMeta(entityKey);
			var proto = that.config.pages[entityKey + ".$edit"];
			if (proto) proto = proto.$prototype;
			else proto = {
				$properties: {}
			};

			var entity_url = that.config.baseUrl + "/" + meta.pluralType;
			var toSend = {
				$url: entity_url + "/$batch?representation=" + entityKey + "." + _consts.store_facet,
				$resources: []

			};
			var infos = [];
			res.forEach(function(value) {
				var d;
				if (value.$info.status == $.sdata.STATUS.CREATED) {
					infos.push(value.$info);
					d = value;
					$proto.setDeleteMissing(proto, d);
					d.$httpMethod = "POST";
					d.$url = entity_url + "?representation=" + entityKey + "." + _consts.store_facet;
				} else if (value.$info.status == $.sdata.STATUS.MODIFIED) {
					infos.push(value.$info);
					d = value;
					$proto.setDeleteMissing(proto, d);
					d.$httpMethod = "PUT";
					d.$httpifMatch = d.$etag;
				} else if (value.$info.status == $.sdata.STATUS.DELETED) {
					infos.push(value.$info);
					d = {};
					d.$httpMethod = "DELETE";
					d.$httpifMatch = value.$etag;
					d.$url = value.$info.url + ".$details";
					var surl = that.parseSdataUri(d.$url);
					if (value.$uuid) d.$uuid = value.$uuid;
					d.$key = surl.id;
				}
				if (d) toSend.$resources.push(that._removeMobileInfo(d));
			});
			if (toSend.$resources.length) {
				allInfos = allInfos.concat(infos);
				// pass options to _postBatch (editActivity)
				that._postBatch(toSend, options, infos, doNext);
			} else doNext();
		}, function() {
			// Called once all the resources have been sent -> options.success
			if (options.fromPage && (allInfos.length === 1) && allInfos[0]._cburl) {
				options._cburl = allInfos[0]._cburl;
			}
			return _resync(options);
		});
	};

	that.createDraft = function(data, cb) {
		cb(data);
	};
	that.saveDraft = function(draftid, data, cb) {
		cb();
	};
	that.deleteDraft = function(workingCopy_url, cb) {
		cb();
	};
	that.undoUpdate = function(url, cb) {
		cb();
	};
	that.deleteDataByDraft = function(url, cb) {
		cb();
	};
	that.deleteDataByUrl = function(url, odata, cb) {
		cb();
	};
	that.updateDraft = function(draftId, data, cb) {};
	that.loadDraft = function(draftId, cb) {
		cb(null);
	};
	that.initData = function(config, data, doclean, cb) {
		cb();
	};
	that.updData = function(oldURL, data, cb) {
		cb(null);
	};
	that.insData = function(url, data, cb) {
		cb(null);
	};

	// sdataUrl!=null returns this data Else returns all pending data
	that.getSyncData = function(cb, sdataUrl) {
		cb(null);
	};
	that.execWhere = function(dataContext, exp) {
		return true;
	};
	that.parseWhere = function(exp, entity, ecache) {
		return null;
	};
	that.groupFunc = function(fn) {
		if (!fn) return false;
		return (_private.groups[fn] != null);

	};
	that._parseProp = function(p, func) {
		p = p.trim();
		var res = {
			name: p,
			func: null
		};
		if (!func) return res;
		if (p[p.length - 1] == ")") {
			var i = p.indexOf("(");
			if (i > 0) {
				res.func = p.substr(0, i);
				if (res.func == "$count") res.name = "$count";
				else res.name = p.substr(i + 1, p.length - i - 2);

			}
		}
		return res;
	};
	that.getFunc = function(func) {
		return _private.funcs[func];
	};
	that.applyFunc = function(v, func) {
		var hnd = that.getFunc(func);
		if (hnd) return hnd(v);
		return v;
	};
	that.addSelected = function(data, selected, value, create) {
		selected.forEach(function(field, index) {
			if (field.group) {
				if (create) {
					if (field.name == "$count") value.$count = 1;
				} else {
					if (field.name == "$count") value.$count++;
				}

			} else if (create) {
				var v = $.sdata.syncGetValue(data, field.name);
				if (field.func) v = $.sdata.applyFunc(v, field.func);
				var co = value;
				if (field.func) {
					co[field.func + "(" + field.name + ")"] = v;
				} else {
					var s = field.name.split(".");
					for (var j = 0, len = s.length - 1; j < len; j++) {
						if (!co[s[j]]) co[s[j]] = {};
						co = co[s[j]];
					}
					co[s[s.length - 1]] = v;
				}
			}
		});
	};
	that.getSyncCount = function(cb) {
		that.getSyncDataCount(function(value) {
			cb(value);
		});
	};
	that.getSyncDataCount = function(cb) {
		cb(0);
	};
	that.getModifiedData = function(purl, cb) {
		cb(null);
	};
	that.translateURL = function(url) {
		var i;
		if (that.urlmap) {
			i = that.urlmap.key.indexOf(url);
			if (i >= 0) return that.urlmap.value[i];
		} else if (that.hack_replace) {
			i = url.indexOf(that.hack_replace.src);
			if (i == 0) url = that.hack_replace.dst + url.substring(that.hack_replace.src.length);
		}
		//add device 
		if (url.indexOf("device=") < 0) {
			var sep = (url.indexOf("?") < 0) ? "?" : "&";
			url = url + sep + "device=phone";
		}
		return url;
	};
	that._success = function(cd, hack, noDiagnoses) {
		if (that.hack_replace && hack) {
			var reg = new RegExp(that.hack_replace.src.replace(/\//g, "\/"), "g");
			cd = JSON.parse(JSON.stringify(cd).replace(reg, that.hack_replace.dst));
		}
		if ($helpers.trace.ajax) {
			$helpers.log("Response: ");
			$helpers.log(cd);
		}
		if (cd && noDiagnoses !== true) $helpers.pushDiagnoses(cd);
	};
	that.post = function(url, data, next, headers, opts) {
		opts = opts || {};
		var _retry;
		var doPost = function(retry) {
			if ($helpers.trace.ajax) {
				$helpers.log("POST " + url);
			}
			var h = {
				"Accept": "application/json;vnd.sage=" + _consts.vnd_sage
			};
			if (headers) {
				$.extend(h, headers);
			}
			var canRetry = $helpers.addCustomHeaders(h, retry);

			var curl = that.translateURL(url);
			$.ajax({
				headers: h,
				type: "POST",
				dataType: "json",
				data: data ? JSON.stringify(data) : null,
				url: curl,
				contentType: "application/json; charset=utf-8",
				success: function(cd) {
					try {
						that._success(cd, url != curl, opts.noDiagnoses);
						next(cd);
					} catch (e) {
						if (opts.errHandler) {
							opts.errHandler(e);
						} else {
							next(null);
						}
					}
				},
				error: function(jqXHR, textStatus, errorThrown) {
					if ($helpers.trace.ajax) {
						$helpers.log("\tError: " + jqXHR.status);
						if (jqXHR.responseText) $helpers.log("\t" + jqXHR.responseText);
					}
					if (opts.errHandler) {
						// First param is an exception
						opts.errHandler(null, jqXHR, textStatus, errorThrown);
					} else {
						var status = jqXHR ? jqXHR.status : 200;
						if ((status === 401) && canRetry) {
							--retry;
							return _retry(retry);
						}
						$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "POST", $helpers.locale().ui.app_exception);
						if (status === 401) that.capabilities.resetInterval = true;
						next(null);
					}
				}
			});
		};
		_retry = function(value) {
			setTimeout(function() {
				return doPost(value);
			}, 10);
		};
		doPost(2);
	};
	that.put = function(url, data, next, headers, opts) {
		opts = opts || {};
		var _retry;
		var doPut = function(retry) {
			if ($helpers.trace.ajax) {
				$helpers.log("PUT " + url);
			}
			var h = {
				"Accept": "application/json;vnd.sage=" + _consts.vnd_sage
			};
			if (headers) {
				$.extend(h, headers);
			}
			var canRetry = $helpers.addCustomHeaders(h, retry);

			var curl = that.translateURL(url);
			$.ajax({
				headers: h,
				type: "PUT",
				dataType: "json",
				data: data ? JSON.stringify(data) : null,
				url: curl,
				contentType: "application/json; charset=utf-8",
				success: function(cd) {
					try {
						that._success(cd, url !== curl, opts.noDiagnoses);
						next(cd);
					} catch (e) {
						if (opts.errHandler) {
							opts.errHandler(e);
						} else {
							next(null);
						}
					}
				},
				error: function(jqXHR, textStatus, errorThrown) {
					if ($helpers.trace.ajax) {
						$helpers.log("\tError: " + jqXHR.status);
						if (jqXHR.responseText) $helpers.log("\t" + jqXHR.responseText);
					}
					if (opts.errHandler) {
						// First param is an exception
						opts.errHandler(null, jqXHR, textStatus, errorThrown);
					} else {
						var status = jqXHR ? jqXHR.status : 200;
						if ((status === 401) && canRetry) {
							--retry;
							return _retry(retry);
						}
						$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "POST", $helpers.locale().ui.app_exception);
						if (status === 401) that.capabilities.resetInterval = true;
						next(null);
					}
				}
			});
		};
		_retry = function(value) {
			setTimeout(function() {
				return doPut(value);
			}, 10);
		};
		doPut(2);
	};
	that.DELETE = function(url, next, headers, opts) {
		opts = opts || {};
		var _retry;
		var doDelete = function(retry) {
			if ($helpers.trace.ajax) {
				$helpers.log("DELETE " + url);
			}
			var h = {
				"Accept": "application/json;vnd.sage=" + _consts.vnd_sage
			};
			if (headers) {
				$.extend(h, headers);
			}
			var canRetry = $helpers.addCustomHeaders(h, retry);

			var curl = that.translateURL(url);
			$.ajax({
				headers: h,
				type: "DELETE",
				dataType: "json",
				url: curl,
				contentType: "application/json; charset=utf-8",
				success: function(cd) {
					try {
						that._success(cd, url !== curl, opts.noDiagnoses);
						next(cd);
					} catch (e) {
						if (opts.errHandler) {
							opts.errHandler(e);
						} else {
							next(null);
						}
					}
				},
				error: function(jqXHR, textStatus, errorThrown) {
					if ($helpers.trace.ajax) {
						$helpers.log("\tError: " + jqXHR.status);
						if (jqXHR.responseText) $helpers.log("\t" + jqXHR.responseText);
					}
					if (opts.errHandler) {
						// First param is an exception
						opts.errHandler(null, jqXHR, textStatus, errorThrown);
					} else {
						var status = jqXHR ? jqXHR.status : 200;
						if ((status === 401) && canRetry) {
							--retry;
							return _retry(retry);
						}
						$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "DELETE", $helpers.locale().ui.app_exception);
						if (status === 401) that.capabilities.resetInterval = true;
						next(null);
					}
				}
			});
		};
		_retry = function(value) {
			setTimeout(function() {
				return doDelete(value);
			}, 10);
		};
		doDelete(2);
	};

	that.GET = function(url, next, headers, options) {
		var _retry;

		var doGet = function(retry) {
			if ($helpers.trace.ajax) {
				$helpers.log("GET " + url);
			}
			var h = {
				"Accept": "application/json;vnd.sage=" + _consts.vnd_sage
			};
			if (headers) {
				$.extend(h, headers);
			}
			var canRetry = $helpers.addCustomHeaders(h, retry);
			var curl = that.translateURL(url);
			$.ajax({
				headers: h,
				type: "GET",
				dataType: "json",
				url: curl,
				timeout: (options && options.timeout) ? options.timeout : 0,
				success: function(cd, textStatus, jqXHR) {
					that._success(cd, url != curl);
					var rheaders = {
						status: jqXHR ? jqXHR.status : 200,
						location: jqXHR ? jqXHR.getResponseHeader("Location") : ""
					};
					next(cd, rheaders);
				},
				error: function(jqXHR, textStatus, errorThrown) {
					var status = jqXHR ? jqXHR.status : 200;
					if (status === 404 && options && options.ignore_HTTP_NOT_FOUND) {
						next();
						return;
					}
					if ($helpers.trace.ajax) {
						$helpers.log(textStatus);
						$helpers.log(errorThrown);
						$helpers.log(jqXHR);
					}
					if ((status === 401) && canRetry) {
						--retry;
						return _retry(retry);
					}
					if (options && options.Authenticate && (status === 401)) {
						$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "GET");
						var s = (jqXHR ? jqXHR.getResponseHeader("WWW-Authenticate") : "");
						return next(null, {
							status: status,
							"WWW-Authenticate": s
						});
					}
					$helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "GET", (status === 401) ? $helpers.locale().errorauth_title : null, (status === 401) ? $helpers.locale().errorauth : null);
					if (status === 401) that.capabilities.resetInterval = true;
					var rheaders = {
						status: status,
						location: jqXHR ? jqXHR.getResponseHeader("Location") : ""
					};
					next(null, rheaders);
				}
			});
		};
		_retry = function(value) {
			setTimeout(function() {
				return doGet(value);
			}, 10);
		};
		doGet(2);

	};
	/* streamline compatible */
	that.applicationDetails = function(appData, cb) {
		var cd = {
			baseURL: appData.baseURL
		};
		var purl = that.parseSdataUri(appData.baseURL);
		cd.applicationName = purl.application;
		cd.contractName = purl.contract;
		cd.endpointName = purl.dataset;
		that.post(that.$url(appData, appData.url), cd, function(data) {
			cb(data);
		});
	};
	that.syncGetValue = function(data, field) {
		var values = field.split('.');
		var doContinue = false;
		var cd = data,
			oldData = null;
		if (!data) return null;
		values.forEach(function(name, idx) {
			if (doContinue) return;
			oldData = cd;
			cd = cd[name];
			var cacheid = cd ? (cd.$key || cd.$uuid) : false;
			if (cacheid && that.loadCache && that.loadCache[cacheid]) {
				cd = that.loadCache[cacheid].data;
			}
			doContinue = (cd == null);
		});
		return cd;
	};
	/*
	 *
	 */
	that.applicationList = function(options) {
		var url = that.sdataAdmin();
		var purl = that.parseSdataUri(url);
		that.authenticate(function(ad, errors, offline) {
			if (errors || offline) {
				if (options.success) options.success(null);
				return;
			}
			that.GET(url, function(data) {
				var res = [];
				var burl = "";
				if (data && data.$resources) {
					if (data.$baseUrl) {
						burl = data.$baseUrl;
						delete data.$baseUrl;
					}
					data.$resources.forEach(function(cd) {
						if (cd && cd.endpoints && cd.endpoints.length) {
							var ad = {
								url: cd.installUrl,
								title: cd.title,
								description: cd.description || cd.title,
								icon: cd.icon || "",
								baseURL: purl.base + cd.applicationName + "/" + cd.contract + "/",
								datasets: cd.endpoints
							};
							if (burl && (ad.url.indexOf(burl) < 0)) ad.url = burl + ad.url;
							if (ad.url && (ad.url.charAt(0) == "/")) ad.url = that.sdataHost + ad.url;
							delete cd.endpoints;
							res.push(ad);
						}
					});
				}
				if (options.success) options.success(res);
			});
		});

	};
	that.removeFromDB = function(id, cb) {
		cb();
	};
	that.clearSdata = function(id, cb) {
		cb();
	};
	that.delData = function(url, cb) {
		cb();
	};
	that.sendSDataRequest = function(url, options) {
		_private.logSdata("Real operation: Send SDATA request: ", url);
		var old = options.success,
			favoptions = {};
		options.success = function(data, headers) {
			if ($helpers.trace.ajax) {
				$helpers.log("Response: ");
				$helpers.log(data);
			}
			if (old) old(data, headers);
		};

		var loadFav = function(options, after) {
			after(null);
		};
		if (options.$uiRequest && options.$loadFav) {
			if (url.query && url.query.representation) { //xxxxxxxxxxxx
				var facet = _facetPart(url.query.representation);
				if ((facet === "$query") || (facet === "$lookup")) {
					// True if favorites header icon is checked
					favoptions.details = that.favorite(url.query.representation);
					var purl = $.extend(true, {}, url);
					purl.query = {
						representation: url.query.representation
					};
					favoptions.entity_url = that.getUri(purl);
					if (!favoptions.details) {
						// Read data in local db favorites object store
						loadFav = that.loadFavoriteList;
					}
				}
			}
		}
		loadFav(favoptions, function(favorites) {
			if (that.store(url.uri)) {} else {
				// load from local DB
				return that.getModifiedData(url, function(data) {
					if (url.id) {
						if (data && data[url.id]) {
							if (data[url.id].status === $.sdata.STATUS.DELETED) {
								return options.success(null, {
									status: 404
								});
							} else {
								var d = data[url.id];
								// d.url!=null -> This is a local data - Draft mode
								d.data.$localUrl = d.url;
								return options.success(d.data, {
									status: 200
								});
							}
						}
						that.execGetSData(url, options);
					} else {
						if (!url.template && data && Object.keys(data).length) {
							var isuuid = true;
							var proto = that.url2proto(url);
							if (proto && proto.$properties.$resources) {
								proto = proto.$properties.$resources.$item;
								proto = proto.$item || proto;
								isuuid = $proto.useUuid(proto);
							}
							that.execGetSData(url, {
								success: function(sdata, headers) {
									if (sdata && sdata.$resources) {
										var ii = sdata.$resources.length,
											key, res;
										while (ii--) {
											res = sdata.$resources[ii];
											if (isuuid) key = res.$uuid || res.$key;
											else key = $proto.parseExpression(proto.$key, {
												data: $proto.exprData(res),
												$prototype: proto
											}, "$key");
											if (data[key]) {
												if (data[key].status === $.sdata.STATUS.DELETED) {
													sdata.$resources.splice(ii, 1);
												} else {
													sdata.$resources[ii] = data[key].data;
												}
											}
										}
									}
									headers = headers || {};
									headers.favorites = headers.favorites || favorites;
									options.success(sdata, headers);

								},
								useFav: favoptions.details
							});
						} else {
							that.execGetSData(url, {
								success: function(sdata, headers) {
									headers = headers || {};
									// favorites sets bookmarks controler info to hilite favorites icon if any
									headers.favorites = headers.favorites || favorites;
									options.success(sdata, headers);
								},
								useFav: favoptions.details
							});
						}
					}

				});

			}
		});
	};
	that.execGetSData = function(uri, options) {
		var local = that.store(uri);
		// True if favorites filter - click on header icon
		var usefav = options.useFav;
		var canUseFav = that.canUseFav(uri);
		if (!usefav && canUseFav && !$helpers.online() && !local) usefav = true; //use fav on offline
		usefav = (usefav && canUseFav);
		if (!local && !usefav) {
			that.authenticate(function(ad, errors, offline) {
				if (errors || offline) return options.success();
				that.GET(uri.uri, function(data, headers) {
					options.success(data, headers);
				});
			});
		} else {
			// read data in local db
			try {
				var proto = that.url2proto(uri);
				if (proto && proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) {
					var filter = uri.query.filter || $proto.defaultFilter(proto);
					if (uri.query.where || filter) {
						var str = uri.query.where || "";
						if (filter) {
							if (proto && proto.$filters && proto.$filters[filter]) {
								var fwhere = proto.$filters[filter].$where || "";
								if (fwhere) str = (str ? (str + " and " + fwhere) : fwhere);
							}

						}
						if (str) uri.pwhere = that.parseWhere(str);
					}
					if (!uri.query || !uri.query.orderBy || proto.$properties.$resources.$item.$defaultOrder) {
						uri.query = uri.query || {};
						uri.query.orderBy = proto.$properties.$resources.$item.$defaultOrder;
					}
				}
				var _cb = options.success;
			} catch (ex) {
				$.helpers.pushException(ex);
				return options.success(null, {});
			}
			that.getSData(uri, usefav, _cb);
		}
	};

	// Overriden by jquery.mobile.sdata.db - Read favorites or stored data
	that.getSData = function(uri, usefav, cb) {
		if (cb) cb("Not found", {
			status: 404
		});
	};
	that.execURL = function(url, options) {
		if (that.config && that.config.baseUrl) url = that.$url({
			$baseURI: that.config.baseUrl
		}, url);
		var sdataURL = _private.parseSDataURL(url);
		if (sdataURL) {
			_private._execSDATA(sdataURL, options);
		} else if (options.success) {
			options.success("Not Implemented", {
				status: 500
			});
		}
	};
	that.parseSdataUri = function(uri) {
		return _private.parseSDataURL(uri);
	};
	that.getUri = function(puri) {
		_private.makeURL(puri);
		return puri.uri;
	};
	that.entityUri = function(url, rep) {
		var u = [url.base, url.application, '/' + url.contract, '/' + url.dataset];
		u.push('/' + url.entity);
		if (rep && url.query) u.push('?representation=' + _repPart(url.query.representation || ''));
		return u.join('');
	};

	that.getBaseUrl = function(puri) {
		return [puri.base, puri.application, '/' + puri.contract, '/' + puri.dataset, '/'].join('');
	};
	that.entityMeta = function(entity) {
		if (that.config.entities) return that.config.entities[entity];
		return null;
	};
	that.getInstalledApps = function(grouped, cb) {
		cb([]);
	};
	that.startLoad = function() {},
	that.endLoad = function() {},
	that.getAppConfig = function(data, cb) {
		cb(null);
	};
	that.saveAppConfig = function(data, cb) {
		cb(null);
	};
	that.loadFavoriteList = function(options, cb) {
		return cb(null);
	};
	that.switchFav = function(url, data, cb) {
		return cb({
			op: 0
		});
	};
	that.insertFav = function(appid, entity_url, data, cb) {
		return cb();
	};
	that.installApp = function(data, cb) {
		cb(null, true);
	};
	that.execSearch = function(data, map, value) {
		var props = Object.keys(map);
		var i = props.length;
		value = value.toUpperCase();
		while (i--) {
			var pvalue = data[props[i]];
			if (pvalue && (pvalue.toUpperCase().indexOf(value) >= 0)) return true;

		}
		return false;
	};
	/*
    value: Term that was entered in input field and has to be used to lookup search proposals
    opts: options, not used yet
    cb: callack fn
     */
	that.getAutocompleteList = function(value, opts, cb) {
		var matches = [];
		var stored = window.localStorage["s-search-terms-array"];
		if (stored) {
			try {
				stored = JSON.parse(stored);
			} catch (e) {
				stored = null;
			}
		}
		if (stored && (stored instanceof Array) && value) {
			value = value.toLowerCase();
			$.each(stored, function(i, val) {
				if (val && val.toLowerCase().indexOf(value) >= 0) {
					matches.push(val);
				}
			});
		}
		cb(matches);
	};
	/*
     value: Term that must be remembered for next searches
     opts: options, not used yet
     cb: callack fn
     */
	that.updateAutocompleteList = function(value, opts, cb) {
		// TODO: Instead of using local storage, we could connect elastic search as soon as it's available
		var stored;
		if (value) {
			stored = window.localStorage["s-search-terms-array"];
			if (stored) {
				try {
					stored = JSON.parse(stored);
				} catch (e) {
					stored = null;
				}
			}

			if (!stored || !(stored instanceof Array)) {
				stored = [];
			}

			var newList = [];
			$.each(stored, function(i, val) {
				if (!(val && val.toLowerCase() === value)) {
					newList.push(val);
				}
			});

			newList.unshift(value);
			while (newList.length > 10) {
				newList.pop();
			}
			window.localStorage["s-search-terms-array"] = JSON.stringify(newList);
		}
		cb();
	};
	that.downloadLocale = function(locale, next) {
		// TODO: Instead of using local storage, we could connect elastic search as soon as it's available
		var lang = $helpers.extractLang(locale),
			nl = "";
		if (lang) {
			return that.GET("./mobile/js/resources/strings-" + lang + ".json", function(data, headers) {
				if (data) {
					$helpers.translate(lang, data);
					return next(lang);
				}
				return that.GET("./mobile/js/resources/strings-en.json", function(data, headers) {
					if (data) {
						$helpers.translate(lang, data);
						return next(lang);
					}
					return next("");
				});
				return next("");
			}, null, {
				ignore_HTTP_NOT_FOUND: true
			});
		}
		return next();
	};

})(jQuery);