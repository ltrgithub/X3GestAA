"use strict";
(function($) {
	$.proto = $.proto || {};
	var $proto = $.proto;
	var $helpers = $.helpers;
	var that = $proto.auth || {};
	$proto.auth = that;
	$proto.auth.designMode = false;
	$proto.auth.notifyParent = function(event, eventData, info) {
		return eventData;
	};

	function _scanObj(obj, match, trace, continueOnMatch) {
		var i, len;
		if (Array.isArray(obj)) {
			for (i = 0, len = obj.length; i < len; i++) {
				var ci = obj[i];
				if (ci && (typeof ci === "object")) {
					if (trace)
						trace(ci, obj);
					ci = _scanObj(ci, match, trace, continueOnMatch);
					if (ci && !continueOnMatch)
						return ci;
				}
			}
			return null;
		}
		if (typeof obj !== "object")
			return null;
		var matchObj = match(obj);
		if (matchObj)
			return matchObj;
		var keys = Object.keys(obj);
		for (i = 0, len = keys.length; i < len; i++) {
			var p = keys[i];
			if (p.charAt(0) === "_")
				continue;
			var o = obj[keys[i]];
			if (o && (typeof o === "object")) {
				if (trace)
					trace(o, obj);
				o = _scanObj(o, match, trace, continueOnMatch);
				if (o)
					return o;
			}
		}
		return null;
	}
	// get default layout for details/edit/create

	function _defaultDetailArticle(proto, info) {
		var res = {
			$layout: {
				$layoutType: "stack",
				$items: []
			}
		};
		//$proto.$properties
		var items = res.$layout.$items;
		if (proto.$properties)
			Object.keys(proto.$properties).forEach(function(pn) {
				var pi = proto.$properties[pn];
				if (pi.$isHidden || pi.$isExcluded)
					return;
				items.push({
					$bind: pn
				});

			});
		return res;

	};
	that.defaultDetailArticle = _defaultDetailArticle;

	function _copyproto(proto, res) {
		if (!proto)
			return;
		if (Array.isArray(proto)) {
			proto.forEach(function(val) {
				if (typeof val === "object") {
					var cv = Array.isArray(val) ? [] : {};
					res.push(cv);
					_copyproto(val, cv);
				} else
					res.push(val);
			});
		} else {
			Object.keys(proto).forEach(function(pn) {
				if ((pn === "$rtype") || (pn === "$protoparent") || (pn === "$rprotoparent"))
					return;
				var val = proto[pn];
				if (typeof val === "object") {
					res[pn] = Array.isArray(val) ? [] : {};
					_copyproto(val, res[pn]);
				} else
					res[pn] = val;
			});
		}

	};
	that.copyProto = function(proto) {
		var res = {};
		_copyproto(proto, res);
		return res;
	};

	function _cardsLayout(o, detail) {
		var res = o.$layout || null;
		if (o.$format === "cards") {
			if (o.$cards && o.$cards.$layout) {
				$helpers.propagateMobileExt(o.$cards.$layout, o);
				return o.$cards.$layout;
			}
		}
		if (detail && (o.$cardItem && o.$cardItem.$layout)) {
			$helpers.propagateMobileExt(o.$cardItem.$layout, o);
			if (o.$cardItem.$layout.$items) {
				o.$cardItem.$layout.$items.forEach(function(x) {
					$helpers.propagateMobileExt(x, o);
				});
			}
			return o.$cardItem.$layout;
		}
		$helpers.propagateMobileExt(res, o);
		return res;
	};
	// find sub layout by name 

	function _findLayout(article, name, parent, detail) {
		if (!article)
			return null;
		article = _scanObj(article, function(o) {
			if (o.$bind === name) {
				//
				if (parent)
					return o;
				// cards
				var cards = _cardsLayout(o, detail);
				return cards;
			}
			return null;
		});
		return article;
	};
	that.findSlayout = _findLayout;

	// get only the layout for $resources.$item

	function _filterItem(article, list) {
		var styles = {};
		$helpers.propagateMobileExt(styles, article);
		article = _scanObj(article, function(o) {
			if (o.$bind === "$resources") {
				// only for $query || $facet
				var cards = _cardsLayout(o, true);
				$helpers.propagateMobileExt(cards, styles);
				return cards;
			}
			$helpers.propagateMobileExt(styles, o);
			return null;
		});
		return article;
	};
	// get default layout for lists

	function _defaultListArticle(proto, imageProp, info) {
		if (!info.list)
			return null;
		var $title = '$title';
		var $description = '$description';
		if (!proto.$title && proto.$value) {
			$title = '$value';
		} else
		if (proto.$title && (proto.$title === proto.$description)) {
			$description = null;
		}
		var article = {
			$layout: {
				$layoutType: "stack",
				$items: [{
					$bind: "$resources",
					$format: "cards",
					$cards: {
						$layout: {
							$layoutType: "stack",
							$items: []

						}
					}
				}]
			}
		};
		var items = article.$layout.$items[0].$cards.$layout.$items;
		items.push({
			$bind: $title,
			$isTitle: true
		});
		if ($description) {
			items.push({
				$bind: $description,
				$lines: 2
			});
		}
		if (imageProp) {
			if (info.design) {
				items.push({
					$bind: imageProp
				});
			} else {
				info.$image = imageProp;
				article.$image = imageProp;
			}
		}
		return article;

	};
	// scan check and correct $article (layout of lists) 
	function _checkListArticle(proto, article, info) {
		if (!info.list)
			return article;
		// check if exists an image property 
		var imageProp = null;
		Object.keys(proto.$properties).forEach(function(pn) {
			var p = proto.$properties[pn];
			if (!imageProp && (p.$type === "image")) {
				imageProp = pn;
			}
		});
		var filteredItem = null;
		if (article) {
			if (info.noCache) {
				// copy article don't modify it
				article = $.extend(true, {}, article);
			}
			filteredItem = _filterItem(article);
			if (!filteredItem)
				article = null; // $bind on $resources not found
		}
		if (!article) {
			// no layout / get default layout
			article = _defaultListArticle(proto, imageProp, info);
		} else {
			if (imageProp && !article.$image && !info.design) {
				// get out image from layout 
				// 
				var obj = _scanObj(article, function(o) {
					if (o.$bind === imageProp)
						return o;
					return null;
				}, function(child, parent) {
					if (Array.isArray(parent))
						child._parent = parent._parent;
					else
						child._parent = parent;
				});
				if (obj) {
					info.$image = imageProp;
					article.$image = imageProp;
					// try to remove image from design : the image is 
					if (obj._parent) {
						var cl = obj._parent,
							remove = true;
						while (remove) {
							if (!cl.$items) {
								obj = cl;
								cl = cl._parent;
								if (!cl)
									break;
							} else {
								var ii = cl.$items.indexOf(obj);
								if (ii >= 0) {
									cl.$items.splice(ii, 1);
									if (!cl.$items.length) {
										obj = cl;
										cl = cl._parent;
										//go up
									} else {
										remove = false;
										if ((cl.$layoutType === "row") && cl.$widths) {
											// for row layout update widths 
											var widths = cl.$widths.split(",");
											var oldw = parseFloat(widths[ii]);
											widths.splice(ii, 1);
											var neww = parseFloat(widths[0]);
											neww = neww + oldw;
											widths[0] = neww + '%';
											cl.$widths = widths.join(",");

										}
									}

								} else
									remove = false; //never
							}
						}
					}
				} else {
					article.$image = "";
				}
				// remove circular references
				_scanObj(article, function(o) {
					return null;
				}, function(child, parent) {
					child._parent = null;
				});
			} else {
				info.$image = article.$image;
			}
			if (!article)
				article = _defaultListArticle(proto, imageProp, info);
		}
		if (!info.design) {
			if (filteredItem)
				article = filteredItem;
			else
				article = _filterItem(article);
		}
		return article;
	};
	that.checkQueryArticle = _checkListArticle;
	that.checkDesign = function(proto, article, info) {
		if (info.list) {
			var p = proto.$properties.$resources.$item;
			return that.checkQueryArticle(p, article, info);
		}
		return article;
	};

	function _checkWidths($layout) {
		var widths;
		if (!$layout.$widths) {
			if (!$layout.$items.length)
				return;
			var size = parseInt(10000 / $layout.$items.length, 10) / 100; //33.33
			var j = $layout.$items.length;
			widths = new Array(j);
			while (j--) {
				widths[j] = size + '';
			}
		} else {
			widths = $layout.$widths.split(",");
		}
		return widths;
	}

	function _execRowlayout($layout, html, options, controller, cp, cd, exprData, info) {
		var widths = _checkWidths($layout);
		info.inRow = true;
		var pclass = ["s-m-l-table"];
		var exclude = null;
		if ($layout.$theme && ($layout.$propagated == null || $layout.$propagated.indexOf("$theme") === -1)) {
			// #3817 - We replace the old version $theme for rowLayout by new themeLayout and delete the old version 
			// $theme is used by fields and when we propagate global styles there are conflicts between layout themes and fields themes
			$layout.$themeLayout = $layout.$theme;
			exclude = ["$theme"];
		}
		if ($layout.$themeLayout) {
			pclass.push("theme" + $layout.$themeLayout.toUpperCase());
		}
		html.push('<div class="' + pclass.join(' ') + '">');
		var len = widths.length - 1;
		widths.forEach(function(width, index) {
			var cclass = ["s-m-l-row"];
			if ((index === 0) && (index !== len)) {
				cclass.push("first");
			} else
			if ((index !== 0) && (index === len)) {
				cclass.push("last");
			}
			if ((width.indexOf("%") < 0) && (width.indexOf("px") < 0)) {
				width = width + '%';
			}
			html.push('<div class="' + cclass.join(' ') + '" style="width:' + width + '">');
			info.root = false;
			$helpers.propagateMobileExt($layout.$items[index], $layout, exclude);
			_execLayoutItem($layout.$items[index], html, options, controller, cp, cd, exprData, info);
			html.push('</div>');

		});
		html.push('</div>');
	}

	function hasOnlyFields($layout, info) {
		if (info.inRow)
			return false;
		var i = $layout.$items.length;
		while (i--) {
			if (!$layout.$items[i].$bind && !$layout.$items[i].$expression) {
				return false;
				break;
			}
		}
		return true;
	}

	function _execStackLayout($layout, html, options, controller, cp, cd, exprData, info) {
		var addContainer = !hasOnlyFields($layout, info);
		var len = $layout.$items.length - 1;
		$layout.$items.forEach(function(item, index) {
			if (!addContainer)
				info.defContainer = "p";
			else {
				var css = ["s-m-l-stack"];
				if ((index === 0) && (index < len))
					css.push("first");
				if ((index > 0) && (index === len))
					css.push("last");
				html.push('<div class="' + css.join(' ') + '">');
			}
			$helpers.propagateMobileExt(item, $layout);
			_execLayoutItem(item, html, options, controller, cp, cd, exprData, info);
			if (!addContainer)
				info.defContainer = "";
			else
				html.push('</div>');
		});
	}

	var _mobileProps = function(css, item) {
		if (item.$theme)
			css.push("theme" + item.$theme);
		if (item.$styles && item.$styles.forEach) {
			item.$styles.forEach(function(style) {
				if (style === "aside") {
					style = "ui-li-aside";
					style = "s-m-aside";
				}
				css.push(style);
			});
		}
		if (item.$isTopLabelAlignment === true && css.indexOf("top") == -1) {
			css.push("top");
		}
		if (item.$lines) {
			css.push("s-line-" + item.$lines);
		}
		if (item.$cssPrefix) {
			css.push("s-hasprefix");
		}

	};
	that.mobileExtentions = _mobileProps;
	that.mobileExtentionsLbl = function(cssl, item) {
		if (item.$isTopLabelAlignment === true || (item.$styles && item.$styles.indexOf && (item.$styles.indexOf("top") >= 0 || item.$styles.indexOf("stack") >= 0))) {
			cssl.push("fullwidth");
		}
		if (item.$label) {
			_mobileProps(cssl, item.$label);
		}
		if (item.$isRightTextLabelAlignment === true) {
			cssl.push("rightAlign");
		}
		return item.$label && item.$label.$after;
	};
	var _addCssPrefix = function(ev, html, item, cd, cp, cover, addTitle, addSpan) {
		if (item.$cssPrefix) {
			if (typeof ev != "object") {
				ev = {
					value: ev
				};
			}
			var cv = ev.value;
			if (item.$cssMap) {
				cv = item.$cssMap[cv + ""];
			} else
			if (item.$cssFunc) {
				try {
					var f = new Function("value", item.$cssFunc);
					f = f.bind(cd);
					cv = f(cv);
				} catch (e) {
					console.log(e);
				}
			} else {
				var dm = {
					"true": "green",
					"false": "red"
				};
				if (dm[cv + ""])
					cv = dm[cv + ""];
			}
			if (["green", "red", "orange", "yellow"].indexOf(cv) < 0) {
				cv = "unknown";
			}
			html.push('<span class="s-indicator s-prefix-' + cv + '"></span>');
			if (!item.$isTitleHidden && ev.title) {
				html.push(ev.title);
			} else {
				if (item.$isTitleHidden || !cover) {
					html.push("&nbsp;");
				} else
				if (addTitle && cp && cp.$properties && cp.$properties[item.$bind]) {
					var pi = cp.$properties[item.$bind];
					html.push($proto.parseExpression(pi.$shortTitle || pi.$title, {
						data: null,
						$prototype: cp
					}, "$title", {
						html: true
					}));
				}

			}
		} else {
			html.push(addSpan == true ? '<span>' + ev + '</span>' : ev);
		}
	};
	that.mobileCssPrefix = _addCssPrefix;

	function _findCardEntries($layout, dest, max) {
		if ($layout.$items) {
			for (var i = 0; i < $layout.$items.length; i++) {
				if (dest.length < max) {
					if ($layout.$items[i].$bind) {
						dest.push({
							$bind: $layout.$items[i].$bind
						});
					} else {
						_findCardEntries($layout.$items[i], dest, max);
					}
				} else {
					return;
				}
			}
		}
	}

	function _articleArrayComposition2Layout($article, cp, filter, grid) {
		var fn = [];
		if (cp && cp.$properties) {
			Object.keys(cp.$properties).forEach(function(pn) {
				if (filter && (filter.indexOf(pn) < 0))
					return;
				var pi = cp.$properties[pn];
				if (pi.$isHidden || pi.$isExcluded)
					return;
				// ignore array fields
				fn.push(pn);
			});
		}

		if ($article && ($article.$cards || $article.$layout)) {
			if (!$article.$format) {
				if ($article.$layout) {
					$article.$format = "grid";
				} else {
					$article.$format = "cards";
				}
			}
			if ($article.$format != "grid") {
				if (grid) {
					var maxlen = 3;
					grid.$items = grid.$items || [];
					if ($article.$layout && $article.$layout.$items && $article.$layout.$items.length) {
						_findCardEntries($article.$layout, grid.$items, 3);
					} else {
						var ff = [];
						_scanObj($article.$cards, function(o) {
							if (o.$bind) {
								if (fn.indexOf(o.$bind) >= 0)
									ff.push(o.$bind);
								return true;
							}
							return false;
						}, null, true);

						for (var i = 0, len = Math.min(maxlen, ff.length); i < len; i++) {
							grid.$items.push({
								$bind: ff[i]
							});
						}
					}

				}
			}
			return $article;
		} else {
			var res = {
				$format: "grid",
				$layout: {
					$items: []
				}
			};
			$helpers.propagateMobileExt(res, $article);
			fn.forEach(function(pn) {
				res.$layout.$items.push({
					$bind: pn
				});
			});
			return res;
		}
	}
	that.compositionLayout = _articleArrayComposition2Layout;

	function _execField(item, html, options, controller, cp, cd, exprData, info) {
		var css = [],
			labelAfter = false;
		//$theme: A-Z
		//$styles: ["aside", "u", "i"]
		//$lines: 1-3
		//$isTitle -- is a title ?
		var tag = "span",
			cover = true;
		if (info.defContainer)
			tag = info.defContainer;
		var defTag = tag;
		if (item.$isTitle || (item.$bind === "$title" && (item.$isTitle !== false))) {
			tag = "h3";
			css.push("title");
		}
		_mobileProps(css, item);
		if (css.length || info.defContainer) {
			css.push("s-m-style");
			cover = !((item.$isTitleHidden === true) && item.$cssPrefix);
			if (!cover) {
				css.push('notitle');
				tag = "span";
			}
			html.push('<' + tag + ' class="' + css.join(' ') + '">');
		}
		var exp = item.$bind,
			isExpression = false;
		if (item.$expression) {
			isExpression = true;
			exp = item.$expression;
		} else {
			if (exp && (exp.charAt(0) === "$")) {
				isExpression = true;
				exp = '{' + exp + '}';
			}
		}
		if (!(item.$isTitleHidden === false))
			item.$isTitleHidden = true;
		var title = "",
			cssl, pi;
		if (!item.$isTitleHidden && !item.$cssPrefix && item.$bind) {
			if (cp && cp.$properties && cp.$properties[item.$bind]) {
				pi = cp.$properties[item.$bind];
				title = $proto.parseExpression(pi.$shortTitle || pi.$title, {
					data: null,
					$prototype: cp
				}, "$title", {
					html: true
				});
			}
			if (title) {
				if (item.$label) {
					cssl = ["s-m-style", "s-m-label"], $proto.auth.mobileExtentions(cssl, item.$label);
					labelAfter = item.$label.$after;
					if (!labelAfter) {
						html.push('<label class="' + cssl.join(' ') + '">');
						html.push(title);
						html.push('</label>');
					}
				} else
					html.push(title + ": ");
			}
		}
		var ev, doparse = true;
		if (!isExpression && cp && cp.$properties && cp.$properties[item.$bind]) {
			var cpi = cp.$properties[item.$bind];
			if (cpi.$type === "application/x-reference") {
				doparse = false;
				var toptions = $.smobile.controls.types.addReference(cpi, [cd[item.$bind], cd], controller, item.$bind, item.$refDescription && item.$refDescription.$withTitle);
				var before = false;
				cssl = null;
				if (toptions.title && item.$isRrefDescrHidden !== true) {
					cssl = ["s-m-style", "s-m-linkdesc"];
					if (item.$refDescription) {
						before = item.$refDescription.$before === true;
						$proto.auth.mobileExtentions(cssl, item.$refDescription);
					}
				}
				var rtitle = $helpers.htmlEncode(before ? toptions.value : toptions.title),
					rvalue = $helpers.htmlEncode(before ? toptions.title : toptions.value);
				ev = rvalue;
				if (cssl) {
					ev = ev + ' <span class="' + cssl.join(' ') + '"> ' + rtitle + '</span>';
				}
			}

		}
		if (doparse) {
			ev = $proto.parseExpression(exp, exprData, item.$bind || "", {
				html: true,
				list: true,
				onlyValue: false,
				keepBrackets: true,
				cssPrefix: (item.$cssPrefix ? "s-prefix" : "")
			});
		}
		//#3770 We add a span around the value for aside alignment -TODO Put a span for all values and apply styles on this span
		// In the current version the label is located inside the span of the value and label font-size is multiplied by the one of value 
		// Medium size on value and medium size on label -> 80% * 80% = small size for label
		var spans = title != null && title.length > 0 && css.indexOf("s-m-aside") >= 0;
		that.mobileCssPrefix(ev, html, item, cd, cp, cover, true, spans);
		if (title && labelAfter) {
			html.push('<label class="' + cssl.join(' ') + '">');
			html.push(title);
			html.push('</label>');
		}
		if (css.length)
			html.push('</' + tag + '>');
	}

	function _execLayoutItem(item, html, options, controller, cp, cd, exprData, info) {
		var np, info = info || {};
		var layoutType = item.$layoutType;
		if (!layoutType && item.$items)
			layoutType = "stack";
		if (!layoutType && item.$layout) {
			$helpers.propagateMobileExt(item.$layout, item);
			return _execLayoutItem(item.$layout, html, options, controller, cp, cd, exprData, info);
		}
		if (layoutType) {
			switch (layoutType) {
				case "stack":
				case "tabs":
					info.root = false;
					_execStackLayout(item, html, options, controller, cp, cd, exprData, info);
					break;
				case "row":
					info.root = false;
					_execRowlayout(item, html, options, controller, cp, cd, exprData, info);
					break;
			}
		} else
		if (item.$bind || item.$expression) {
			if (item.$format == "cards" && item.$cards) {
				$helpers.propagateMobileExt(item.$cards, item);
				var layout = item.$cards.$layout;
				info.root = false;
				$helpers.propagateMobileExt(layout, item.$cards);
				_execLayoutItem(layout, html, options, controller, cp, cd, exprData, info);
			} else {
				_execField(item, html, options, controller, cp, cd, exprData, info);
			}
		}
	}

	function _execListArticle($article, html, options, controller, cp, cd, layoutInfo) {
		//$article -- is $layout of item
		var cl = null;
		var $layout = $article;
		var consts = $helpers.ui.consts;
		var expData = {
			data: controller.exprData(cd),
			$prototype: cp
		};
		if (layoutInfo.$image) {
			html.push('<div class="' + consts.normal_image_list + '"');
			var icon = cd[layoutInfo.$image];
			if (icon) {
				if (icon.$value) {
					icon = "data:" + (icon.$contentType || "image/jpeg") + ";base64," + icon.$value;
				} else {
					var curl = icon.$url;
					if (!curl && cp.$properties && cp.$properties[layoutInfo.$image])
						curl = cp.$properties[layoutInfo.$image].$url;
					if (curl)
						icon = $proto.parseExpression(curl, expData, "$image");
					else
						icon = null;

				}
				if (icon)
					html.push(' style="background-image: url(\'' + icon.replace(/'/g, "\\'") + '\'),  url(\'./mobile/images/no-image.png\')"');
			}
			html.push('></div>');

		}
		_execLayoutItem($layout, html, options, controller, cp, cd, expData, {
			root: true,
			list: true
		});
	};

	function _genContainerId(options) {
		options.iid++;
		var s = options.iid + "";
		while (s.length < 3)
			s = '0' + s;
		if (options.prefix)
			return options.prefix + s;
		else
			return 'c_' + s;

	}

	function _showfieldsInParent(item, content, options, cp, exprData, info, parentId) {
		var advancedFields = null;
		var edit = (info.facet === "$edit") || (info.facet === "$create");
		var p = item.$items;
		if (!p && item.$bind)
			p = [item];

		if (p) {
			p.forEach(function(item) {
				if (item.$isAdvanced) {
					if (!advancedFields)
						advancedFields = [];
					item = $.extend(true, {}, item);
					delete item.$isAdvanced;
					advancedFields.push(item);
					return;
				}
				var pi = cp.$properties[item.$bind];
				if (pi) {
					var cid = _genContainerId(options);
					var g = $proto.isSingleField(pi);
					if (g) {
						content[cid] = {
							parent: parentId,
							"uiClass": "SingleField",
							data: {
								facet: info.facet,
								$bind: item.$bind,
								$article: $.extend(true, {}, item)
							}
						};
						var $gauge = item.$gauge;
						if ($gauge) {
							content[cid].data.$gauge = jQuery.extend(true, {}, $gauge);
						}
					} else {
						if (pi.$type === "application/x-array")
							content[cid] = {
								parent: parentId,
								"uiClass": "ArrayField",
								data: {
									jmdata: $proto.jqmDataArray(),
									facet: info.facet,
									field: {
										$bind: item.$bind,
										$type: pi.$type,
										$title: pi.$shortTitle || pi.$title,
										$proto: pi.$item
									},
									$article: $.extend(true, {}, item)
								}
							};
					}
				};
			});
		}
		return advancedFields ? {
			advancedFields: advancedFields
		} : null;
	};

	function _detailArticle2Design($article, content, cp, layoutInfo) {
		var options = {
			iid: 0,
			prefix: layoutInfo.prefix
		};
		var expData = {
			data: null,
			$prototype: cp
		};
		var x = content["root"] = {
			parent: "root",
			layout: null,
			data: {}
		};
		if (!$helpers.propagateMobileExt(x.data, $article) && $article.$layout) {
			// Try to find extention in $article first and $article.$layout if not found
			$helpers.propagateMobileExt(x.data, $article.$layout);
		}
		return _layoutItem($article, content, options, cp, expData, layoutInfo, "root", null, false);
	};

	function _layoutStackItem(item, content, options, cp, exprData, info, parentId) {
		if (!item.$bind && !item.$items && item.$layout) {
			_layoutItem(item.$layout, content, options, cp, exprData, info, parentId, item, false);
		}
		if (item.$items && item.$items.length) {
			if (item.$items[0].$bind) {
				return _showfieldsInParent(item, content, options, cp, exprData, info, parentId);
			} else {
				item.$items.forEach(function(ci, idx) {
					var res = _layoutItem(ci, content, options, cp, exprData, info, parentId, item, false);
					if (res && res.advancedFields) {
						var ci = {
							"$category": "section",
							"$isAvanced": true,
							"$isBoxCollapsable": true,
							"$layout": {
								"$items": res.advancedFields
							}
						};
						_layoutItem(ci, content, options, cp, exprData, info, parentId, item, false);
					}
				});
			}
		}
	}

	function _layoutTabItem(item, content, options, cp, exprData, info, parentId) {
		var tabs = [];
		item.$items.forEach(function(ii) {
			tabs.push($proto.parseExpression(ii.$title || "", exprData, "$title", {
				html: true,
				$opened: ii.$opened
			}));
		});
		var ncid = _genContainerId(options);
		content[ncid] = {
			parent: parentId,
			layout: "TabsLayout",
			data: {
				tabs: tabs
			}
		};
		$helpers.propagateMobileExt(content[ncid].data, item);
		info.root = false;
		item.$items.forEach(function(ci, index) {
			return _layoutItem(ci.$layout, content, options, cp, exprData, info, ncid + '_' + index, item, true);
		});
	}

	function _layoutRowItem(item, content, options, cp, exprData, info, parentId) {
		var widths = _checkWidths(item);
		var ncid = _genContainerId(options);
		/*content[ncid] = {
			parent: parentId,
			layout: "RowLayout",
			data: {
				widths: widths,
				responsive: item.$responsive,
				$theme: item.$theme,
				$styles: item.$styles,
				$emptycell: item.$emptycell
			}
		};*/
		var cnt = {
			parent: parentId,
			layout: "RowLayout",
			data: {
				widths: widths,
				responsive: item.$responsive,
				// #3817 - Copy new property $themeLayout
				$themeLayout: item.$themeLayout
			}
		};
		var exclude = null;
		if (!item.$themeLayout && item.$theme && (item.$propagated == null || item.$propagated.indexOf("$theme") === -1)) {
			// #3817 - We replace the old version $theme for rowLayout by new themeLayout and delete the old version 
			// $theme is used by fields and when we propagate global styles there are conflicts between layout themes and fields themes
			cnt.data.$themeLayout = item.$theme;
			exclude = ["$theme"];
		}
		content[ncid] = cnt;
		$helpers.propagateMobileExt(cnt.data, item, exclude);
		info.root = false;
		item.$items.forEach(function(ci, index) {
			return _layoutItem(ci, content, options, cp, exprData, info, ncid + '_' + index, item, false);
		});
	}

	function _layoutItem(item, content, options, cp, exprData, info, parentId, parent, onlyChildren) {
		if (!item)
			return;
		var layoutType = item.$layoutType,
			dd, ncid;
		if (item.$bind && item.$layout) {
			if (!$proto.acceptSubLayout(cp))
				item.$layout = null;
		}

		if (!layoutType && item.$items)
			layoutType = "stack";
		var category = item.$category;
		// section with only one block use the block
		if ((category === "section") && item.$layout && item.$layout.$items && (item.$layout.$items.length === 1) && (item.$layout.$items[0].$category === "block")) {
			$helpers.propagateMobileExt(item.$layout.$items[0], item);
			return _layoutItem(item.$layout.$items[0], content, options, cp, exprData, info, parentId, item.$layout, false);
		}
		// default layout type is stack
		if (!layoutType && item.$items)
			layoutType = "stack";
		if (!item.$bind && !item.$items && item.$layout && !category) {
			return _layoutItem(item.$layout, content, options, cp, exprData, info, parentId, item, false);
		}
		if (item.$category && !item.$title && !item.$isAvanced) {
			return _layoutItem(item.$layout, content, options, cp, exprData, info, parentId, item, false);
		}
		if (item.$category) {
			// layout 
			dd = {
				size: 6
			};
			var layoutClass = "CollapsibleLayout";
			if ((item.$isTitleHidden || item.$isHeader) && !item.$isAvanced) {
				if (item.$isHeader)
					dd.$isHeader = true;
				layoutClass = "Block";
			} else {
				if (item.$isAvanced) {
					layoutClass = "AvancedBlock";
					dd.$opened = dd.$opened;
				}
				if (item.$isBoxCollapsable == null)
					item.$isBoxCollapsable = true;
				dd.notCollapsable = !item.$isBoxCollapsable;
			}

			dd.jmdata = $proto.settings.CollapsibleLayout.jmdata(info.root);
			dd.text = ((!item.$isTitleHidden) && (item.$title === "-")) ? "" : $proto.parseExpression(item.$title, exprData, "$title", {
				html: true
			});
			if (item.$opened === false) {
				dd.collapsed = true;
			}
			ncid = _genContainerId(options);
			content[ncid] = {
				parent: parentId,
				layout: layoutClass,
				data: dd
			};
			$helpers.propagateMobileExt(content[ncid].data, item);
			info.root = false;
			return _layoutItem(item.$layout, content, options, cp, exprData, info, ncid, item, false);
		} else
		if (layoutType) {
			switch (layoutType) {
				case "stack":
					return _layoutStackItem(item, content, options, cp, exprData, info, parentId);
					break;
				case "tabs":
					_layoutTabItem(item, content, options, cp, exprData, info, parentId);
					break;
				case "row":
					if (item.$responsive == null) {
						//not defined
						if (item.$items[0] && !item.$items[0].$bind) {
							item.$responsive = true;
						}
					}
					_layoutRowItem(item, content, options, cp, exprData, info, parentId);
					break;
			}
		} else if (item.$bind != null) {
			if (item.$bind) {
				if (!item.$layout && !item.$cards) {
					var pp = cp.$properties[item.$bind];
					if (pp) {
						if (parent)
							_showfieldsInParent(item, content, options, cp, exprData, info, parentId);
					}


				}
			}

		}
	}
	that.sdi = _execListArticle;
	that.detailArt2design = _detailArticle2Design;

})(jQuery);