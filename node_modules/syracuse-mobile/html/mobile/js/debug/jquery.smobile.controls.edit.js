"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $scroller = $.scroller;
	var $proto = $.proto; // == require
	that.controls = that.controls || {};

	that.controls.Edit = {
		_nativeToString: function(value, type) {
			if (type == "range") {
				return (value || 0) + "";
			}
			if (type == "number") return (value || 0) + "";
			if (type == "date") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat, value);
			} else if (type == "datetime") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat + "  " + $helpers.dateSettings.timeFormat, value);
			} else if (type == "time") {
				if (!value) return "";
				return value.format();
			}
			return (value || "");
		},
		_getvalue: function(options, controller) {
			var cv = null,
				def;
			if (options.type == "date") {
				//OK
				var saveDate = true;
				cv = controller.getValue(options.bind, null, null);
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
						saveDate = true;
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
						saveDate = true;
					}
				}
				if (saveDate) {
					//controller.setValue(options.bind, cv);
					// notify changes : controller.donotify
				}
			} else if (options.type == "time") {
				cv = controller.getValue(options.bind, null, 0);
				var saveTime = true;
				try {
					cv = $helpers.Time.parse(cv);
				} catch (ex) {
					cv = new $helpers.Time(0);
					saveTime = true;
				}
			} else if (options.type == "datetime") {
				cv = controller.getValue(options.bind, null, 0);
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
					}
				}
			} else if (options.type == "number") {
				if (!def) def = 0;
				cv = controller.getValue(options.bind, null, 0);
			} else if (options.type == "range") {
				if (!def) def = options.$minimum;
				cv = controller.getValue(options.bind, null, 0);
			} else {
				cv = controller.getValue(options.bind, null, "");
			}
			return that.controls.Edit._nativeToString(cv, options.type);
		},

		createEdit: function(controller, c) {
			var options = c.data;
			var html = ['<div data-role="fieldcontain" id="' + c.id + '">'];
			var valproto = controller.getProtoDataValue(options.bind);
			$proto.updproto(options, valproto);
			if (options.type === "number") {
				if ((options.$minimum != null) && (options.$maximum != null) && (options.$minimum || options.$maximum)) options.type = "range";
			} else if (options.type === "range") {
				if (!options.$minimum && !options.$maximum) options.type = "number";
			}
			that.ui.addErrors(controller, options.bind, c.id, html);
			var itype = (options.type || "text"),
				cv = that.controls.Edit._getvalue(options, controller);;
			html.push('<label class="ui-input-text" for="' + c.id + '_i">' + $helpers.htmlEncode(options.label) + (options.$isMandatory ? "*" : "") + '</label>');
			html.push('<input ');

			if ((itype == "date") || (itype == "time") || (itype == "datetime")) itype = "text";
			html.push('type="' + itype + '" name="' + c.id + '" id="' + c.id + '_i" ');
			if (options.$isReadOnly) {
				html.push('readonly="true" ');
			}
			html.push('value="');

			html.push($helpers.htmlEncode(cv));
			html.push('"');
			if (options.$pattern) html.push(' pattern="' + options.$pattern + '"');
			if (options.$minimum != null) html.push(' min="' + options.$minimum + '"');
			if (options.$maximum != null) html.push(' max="' + options.$maximum + '"');
			if (options.$maxLength) html.push(' maxlength="' + options.$maxLength + '"');
			if (options.$isMandatory) html.push(' required="required"');
			html.push('/>');
			if (options.$confirm) {
				html.push('<label class="ui-input-text" for="' + c.id + '_i_c"> </label>');
				html.push('<input ');
				if ((itype == "date") || (itype == "time") || (itype == "datetime")) itype = "text";
				html.push('type="' + itype + '" name="' + c.id + '_i_c" id="' + c.id + '_i_c" ');
				if (options.$isReadOnly) {
					html.push('readonly="true" ');
				}
				html.push('value="');
				var cdata = controller.getValue();
				cv = cdata[options.bind + "_confirm"] || '';
				html.push($helpers.htmlEncode(cv));
				html.push('"');
				if (options.$pattern) html.push(' pattern="' + options.$pattern + '"');
				if (options.$maxLength) html.push(' maxlength="' + options.$maxLength + '"');
				if (options.$isMandatory) html.push(' required="required"');
				html.push('/>');
			}


			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		refresh: function(controller, options, $c, id) {
			var $input = $('#' + id + "_i");
			$input.val(that.controls.Edit._getvalue(options, controller));
			return that.ui.refreshErrors(controller, options.bind, id);
		},
		sync: true,
		handler: function(c, after) {
			return after(that.controls.Edit.createEdit(this, c));
		},
		checkValue: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			var e = $c.find('#' + c.id + "_error");
			var nvalue = $input[0].value,
				cvalue = "";
			e.html("");
			var opts = c.options,
				error;
			if (opts.$confirm) {
				var $confirm = $c.find('#' + c.id + "_i_c");
				cvalue = $confirm[0].value;
				if (nvalue === cvalue) {
					if (nvalue === "") {
						var cdata = controller.getValue();
						delete cdata[opts.bind + '_confirm'];
						delete cdata[opts.bind];
					}

				} else {
					error = {
						field: $c,
						message: $helpers.format($helpers.locale().ui.password_mismatch, [opts.label])
					};
					controller.pushError(error);
					e.html(error.message);
					return {
						$element: e,
						id: c.id,
						uiClass: "Edit"
					};

				}

			}
			if (opts.$isMandatory && (nvalue === "") && !opts.$confirm) {

				error = {
					field: $c,
					message: $helpers.format($helpers.locale().ui.mandatory_field, [opts.label])
				};
				controller.pushError(error);
				e.html(error.message);
				return {
					$element: e,
					id: c.id,
					uiClass: "Edit"
				};
			} else if (opts.$minLength && ($input[0].value.length < opts.$minLength)) {
				error = {
					field: $c,
					message: $helpers.format($helpers.locale().ui.minlength_field, [opts.label])
				};
				controller.pushError(error);
				e.html(error.message);
				return {
					$element: e,
					id: c.id,
					uiClass: "Edit"
				};
			}

		},

		_checkDateTime: function(c, controller) {
			var $input = $('#' + c.id + "_i"),
				value, ovalue, nnvalue, _aftercchange = controller.afterChangeHnd(c);
			if (c.options.type == "date") {
				value = $input.val();
				if (!value) return controller.checkChange(c.id, value, _aftercchange, null);
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat, value);
				} catch (ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				nnvalue = $helpers.date.checkString(value, ovalue);
				if (value != nnvalue) {
					var s = $scroller.formatDate($helpers.dateSettings.dateFormat, $helpers.date.isoToDate(value));
					$input.val(s);
				}
				if (ovalue != nnvalue) controller.checkChange(c.id, nnvalue, _aftercchange, null);
			} else if (c.options.type == "time") {
				value = $input.val();
				ovalue = controller.getValue(c.bind, null, "");
				if (!value) value = $helpers.Time.parse(ovalue).format();
				try {
					value = $helpers.Time.parseTime(value);
				} catch (ex) {
					value = $helpers.Time.parse("00:00");
				}
				$input.val(value.format());
				value = value.toISO();
				if (value != ovalue) controller.checkChange(c.id, value, _aftercchange, null);
			} else if (c.options.type == "datetime") {
				value = $input.val();
				if (!value) return controller.checkChange(c.id, value, _aftercchange, null);
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat + ' ' + $helpers.dateSettings.timeFormat, value);
				} catch (ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				var s = $scroller.formatDate($helpers.dateSettings.dateFormat + ' ' + $helpers.dateSettings.timeFormat, $helpers.date.isoToDate(value));
				$input.val(s);
				if (ovalue != value) controller.checkChange(c.id, value, _aftercchange, null);
			}

		},
		_updNumber: function(controller, $input, c) {
			var _aftercchange = controller.afterChangeHnd(c),
				value, ovalue, nnvalue;
			var def = c.options.$minimum;
			if (!def) def = 0;
			value = controller.getValue(c.bind, null, def);
			nnvalue = parseFloat($input[0].value);
			if (isNaN(nnvalue)) nnvalue = value;
			if (c.options.type == "range") {
				if (nnvalue < c.options.$minimum) nnvalue = c.options.$minimum;
				else if (nnvalue > c.options.$maximum) nnvalue = c.options.$maximum;
			}
			var decimals = c.options.decimals;
			if ((c.options.decimals == null) && c.options.bindDecimals) decimals = controller.getValue(c.options.bindDecimals, null, 0);
			if (decimals != null) nnvalue = parseFloat(nnvalue.toFixed(decimals));
			$input[0].value = nnvalue;
			controller.checkChange(c.id, nnvalue, _aftercchange, null);
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			var $confirm = $c.find('#' + c.id + "_i_c");
			if (c.options.type == "date") $input.scroller({
				preset: 'date'
			});
			else if (c.options.type == "datetime") $input.scroller({
				preset: 'datetime'
			});
			else if (c.options.type == "time") $input.scroller({
				preset: 'time'
			});

			if (c.options.type == "range") $input.slider({
				stop: function(event, ui) {
					that.controls.Edit._updNumber(controller, $input, c);
				}
			});

			$input.blur(function() {
				var _aftercchange = controller.afterChangeHnd(c),
					value, ovalue, nnvalue;
				if (c.bind) {
					if ((c.options.type === "number") || (c.options.type === "range")) {
						that.controls.Edit._updNumber(controller, $input, c);
					} else if (c.options.type == "datetime") {
						window.setTimeout(function() {
							that.controls.Edit._checkDateTime(c, controller);
						}, 0);
					} else if (c.options.type == "time") {
						window.setTimeout(function() {
							that.controls.Edit._checkDateTime(c, controller);
						}, 0);
					} else if (c.options.type == "date") {
						window.setTimeout(function() {
							that.controls.Edit._checkDateTime(c, controller);
						}, 0);
					} else {
						controller.checkChange(c.id, $input.val(), _aftercchange, null);
					}
				}
			});
			$confirm.blur(function() {
				if (c.bind) {
					var cdata = controller.getValue();
					var ovalue = cdata[c.options.bind + "_confirm"] || '',
						nnvalue = $input.val();
					if (ovalue != nnvalue) {
						cdata[c.options.bind + "_confirm"] = nnvalue;
						controller.notifyChange();
					}
				}
			});
		}
	};
})(jQuery);