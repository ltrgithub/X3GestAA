"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $scroller = $.scroller;
	var $proto = $.proto; // == require
	that.controls = that.controls || {};

	function decimalPlaces(n) {
		// Make sure it is a number and use the builtin number -> string.
		var s = "" + (+n);
		// Pull out the fraction and the exponent.
		var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(s);
		// NaN or Infinity or integer.
		// We arbitrarily decide that Infinity is integral.
		if (!match) {
			return 0;
		}
		// Count the number of digits in the fraction and subtract the
		// exponent to simulate moving the decimal point left by exponent places.
		// 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1
		// 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5
		return Math.max(
			0, // lower limit.
			(match[1] === '0' ? 0 : (match[1] || '').length) - (match[2] || 0)); // exponent

	}

	function trim(myString) {
		return myString.replace(/^\s+/g, '').replace(/\s+$/g, '');
	}

	that.controls.Edit = {
		_nativeToString: function(value, type) {
			if (type === "range") {
				return (value || 0) + "";
			}
			if (type === "number") return (value || 0) + "";
			if (type === "date") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat, value);
			} else if (type === "datetime") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat + "  " + $helpers.dateSettings.timeFormat, value);
			} else if (type === "time") {
				if (!value) return "";
				return value.format();
			}
			return (value || "");
		},
		_getvalue: function(options, controller) {
			var cv = null;
			if (options.type === "date") {
				cv = controller.getValue(options.bind, null, null);
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
					}
				}
			} else if (options.type === "time") {
				cv = controller.getValue(options.bind, null, 0);
				try {
					cv = $helpers.Time.parse(cv);
				} catch (ex) {
					cv = new $helpers.Time(0);
				}
			} else if (options.type === "datetime") {
				cv = controller.getValue(options.bind, null, 0);
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
					}
				}
			} else if (options.type === "number") {
				cv = controller.getValue(options.bind, null, 0);
			} else if (options.type === "range") {
				// def = options.$minimum;
				cv = controller.getValue(options.bind, null, 0);
			} else {
				cv = controller.getValue(options.bind, null, "");
			}
			return that.controls.Edit._nativeToString(cv, options.type);
		},

		createEdit: function(controller, c) {
			var options = c.data || {};
			var html = [];
			var errors = that.ui.addFieldContainer(controller, html, c.id, options.bind);
			var valproto = controller.getProtoDataValue(options.bind);
			$proto.updproto(options, valproto);
			if (options.type === "number") {
				if ((options.$minimum != null) && (options.$maximum != null) && (options.$minimum || options.$maximum)) {
					options.type = "range";
				}
			} else if (options.type === "range") {
				if (!options.$minimum && !options.$maximum) {
					options.type = "number";
				}
			}
			var itype = (options.type || "text");
			var cv = that.controls.Edit._getvalue(options, controller);
			html.push('<label class="ui-input-text" for="' + c.id + '_i">' + $helpers.htmlEncode(options.label) + (options.$isMandatory ? "*" : "") + '</label>');
			html.push('<div class="ui-input-text s-m-editfld " ><input ');
			if ((itype === "date") || (itype === "time") || (itype === "datetime")) {
				itype = "text";
			}
			html.push('type="' + itype + '" name="' + c.id + '" id="' + c.id + '_i" ');
			if (options.$isReadOnly) {
				html.push('readonly="true" ');
			}
			html.push('value="' + $helpers.htmlEncode(cv) + '"');
			/* Commented by Darina
			 * if (options.$pattern) html.push(' pattern="' + options.$pattern + '"');
			if (options.$minimum != null) html.push(' min="' + options.$minimum + '"');
			if (options.$maximum != null) html.push(' max="' + options.$maximum + '"');
			if (options.$isMandatory) html.push(' required="required"');
			*/
			if (itype === "string" && options.$maxLength) {
				html.push(' maxlength="' + options.$maxLength + '"');
			}
			html.push('/>');
			that.ui.addErrors(errors, c.id, html);
			html.push('</div>');
			if (options.$confirm) {
				html.push('<label class="ui-input-text" for="' + c.id + '_i_c"> </label><input ');
				if ((itype === "date") || (itype === "time") || (itype === "datetime")) {
					itype = "text";
				}
				html.push('type="' + itype + '" name="' + c.id + '_i_c" id="' + c.id + '_i_c" ');
				if (options.$isReadOnly) {
					html.push('readonly="true" ');
				}
				html.push('value="');
				var cdata = controller.getValue();
				cv = cdata[options.bind + "_confirm"] || '';
				html.push($helpers.htmlEncode(cv));
				html.push('"');
				// Commented by Darina
				//if (options.$pattern) html.push(' pattern="' + options.$pattern + '"');
				//if (options.$isMandatory) html.push(' required="required"');
				if (itype === "string" && options.$maxLength) {
					html.push(' maxlength="' + options.$maxLength + '"');
				}
				html.push('/>');
			}
			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		refresh: function(controller, options, $c, id) {
			var $input = $('#' + id + "_i");
			$input.val(that.controls.Edit._getvalue(options, controller));
			return that.ui.refreshErrors(controller, options.bind, id);
		},
		sync: true,
		handler: function(c, after) {
			return after(that.controls.Edit.createEdit(this, c));
		},
		checkValue: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			var nvalue = $input[0].value;
			var opts = c.options;
			var errKey;
			if (opts.$confirm) {
				var $confirm = $c.find('#' + c.id + "_i_c");
				var cvalue = $confirm[0].value;
				if (nvalue === cvalue) {
					if (nvalue === "") {
						var cdata = controller.getValue();
						delete cdata[opts.bind + '_confirm'];
						delete cdata[opts.bind];
					}
				} else {
					errKey = "password_mismatch";
				}
			}
			if (opts.$isMandatory && (nvalue === "") && !opts.$confirm) {
				errKey = "input_required";
			} else if (opts.$minLength && ($input[0].value.length < opts.$minLength)) {
				errKey = "minlength_field";
			}
			if (errKey) {
				return $helpers.format($helpers.locale().ui[errKey], [opts.label]);
			}
			if (opts.$salt) {
				return that.controls.Edit._computePasswordHash.apply(this, [$c, c]);
			}
			return null;
		},

		_computePasswordHash: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			var nvalue = $input[0].value;
			var opts = c.options;
			var errors = [];
			var salt = opts.$salt;
			if (salt) {
				var r = /[^ -\x7E\xA0-\xFF]/.exec(nvalue); // when you change regexp, also change it in newPassword.html
				if (r) {
					// "Password contains illegal character: {0}"
					errors.push($helpers.format($helpers.locale().ui.fpwIllegal, [r[0]]));
				} else {
					var cdata = controller.getValue();
					salt = salt.replace(/\{(\w+)\}/g, function(d0, d1) {
						if (cdata[d1]) {
							return cdata[d1];
						}
						// Field {0} not found for salting
						errors.push($helpers.format($helpers.locale().ui.fpwReplFieldNotFound, [d1]));
					});
					var md5result = md5(salt + ":" + nvalue);
					cdata[opts.bind + '_confirm'] = md5result;
					cdata[opts.bind] = md5result;
				}
				if (errors.length > 0) {
					return errors.join("\n");
				}
			}
			return null;
		},

		_checkDateTime: function(c, controller) {
			var $input = $('#' + c.id + "_i"),
				value, ovalue, nnvalue, _aftercchange = controller.afterChangeHnd(c);
			if (c.options.type === "date") {
				value = $input.val();
				if (!value) {
					return controller.checkChange(c.id, value, _aftercchange, null);
				}
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat, value);
				} catch (ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				nnvalue = $helpers.date.checkString(value, ovalue);
				if (value !== nnvalue) {
					var s = $scroller.formatDate($helpers.dateSettings.dateFormat, $helpers.date.isoToDate(value));
					$input.val(s);
				}
				if (ovalue !== nnvalue) controller.checkChange(c.id, nnvalue, _aftercchange, null);
			} else if (c.options.type === "time") {
				value = $input.val();
				ovalue = controller.getValue(c.bind, null, "");
				if (!value) value = $helpers.Time.parse(ovalue).format();
				try {
					value = $helpers.Time.parseTime(value);
				} catch (ex) {
					value = $helpers.Time.parse("00:00");
				}
				$input.val(value.format());
				value = value.toISO();
				if (value !== ovalue) {
					controller.checkChange(c.id, value, _aftercchange, null);
				}
			} else if (c.options.type === "datetime") {
				value = $input.val();
				if (!value) {
					return controller.checkChange(c.id, value, _aftercchange, null);
				}
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat + ' ' + $helpers.dateSettings.timeFormat, value);
				} catch (ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				var s = $scroller.formatDate($helpers.dateSettings.dateFormat + ' ' + $helpers.dateSettings.timeFormat, $helpers.date.isoToDate(value));
				$input.val(s);
				if (ovalue !== value) {
					controller.checkChange(c.id, value, _aftercchange, null);
				}
			}

		},
		_updNumber: function(controller, $input, c) {

			var _aftercchange = controller.afterChangeHnd(c),
				value, nnvalue;
			var def = c.options.$minimum;
			value = controller.getValue(c.bind, null, def == null ? 0 : def);
			nnvalue = parseFloat($input[0].value);
			if (isNaN(nnvalue)) {
				throw new Error($helpers.format($helpers.locale().ui.invalid_number, [$input[0].value]));
			}
			if (c.options.type === "range") {
				if (nnvalue < c.options.$minimum) {
					throw new Error($helpers.format($helpers.locale().ui.range_overflow_number, [c.options.$minimum, c.options.$maximum]));
				} else if (nnvalue > c.options.$maximum) {
					throw new Error($helpers.format($helpers.locale().ui.range_overflow_number, [c.options.$minimum, c.options.$maximum]));
				}
			}
			var expectedDecimals = c.options.decimals;
			if (c.options.decimals == null && c.options.bindDecimals) {
				expectedDecimals = controller.getValue(c.options.bindDecimals, null, 0);
			}
			if (expectedDecimals !== null) {
				var gotDecimals;
				gotDecimals = decimalPlaces(nnvalue);
				if (gotDecimals > expectedDecimals) {
					throw new Error($helpers.format($helpers.locale().ui.number_precision_error, [expectedDecimals]));
				} else {
					nnvalue = parseFloat(nnvalue.toFixed(expectedDecimals));
				}
			}
			$input[0].value = nnvalue;
			controller.checkChange(c.id, nnvalue, _aftercchange, null);
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find('#' + c.id + "_i");
			var $confirm = $c.find('#' + c.id + "_i_c");
			if (c.options.type === "date") {
				$input.scroller({
					preset: 'date'
				});
			} else if (c.options.type === "datetime") {
				$input.scroller({
					preset: 'datetime'
				});
			} else if (c.options.type === "time") {
				$input.scroller({
					preset: 'time'
				});
			}
			if (c.options.type === "range") {
				$input.slider({
					stop: function() {
						that.controls.Edit._updNumber(controller, $input, c);
					}
				});
			}
			$input.blur(function(evt) {
				var _aftercchange = controller.afterChangeHnd(c);
				try {
					if (c.bind) {
						if (c.options.$isMandatory && trim($input.val()) === "") {
							throw new Error($helpers.format($helpers.locale().ui.input_required));
						}
						if (c.options.$pattern && !c.options.$pattern.exec($input.val())) {
							throw new Error($helpers.format($helpers.locale().ui.incorrect_format));
						}
						if ((c.options.type === "number") || (c.options.type === "range")) {
							that.controls.Edit._updNumber(controller, $input, c);
						} else if (["datetime", "time", "date"].indexOf(c.options.type) >= 0) {
							window.setTimeout(function() {
								that.controls.Edit._checkDateTime(c, controller);
							}, 0);
						} else {
							controller.checkChange(c.id, $input.val(), _aftercchange, null);
						}
					}
				} catch (error) {
					that.ui.doOnblurKo(controller, c.id, error);
					return;
				}
				that.ui.doOnblurOk(c.id);
			});

			$confirm.blur(function() {
				if (c.bind) {
					var cdata = controller.getValue();
					var ovalue = cdata[c.options.bind + "_confirm"] || '',
						nnvalue = $input.val();
					if (ovalue !== nnvalue) {
						cdata[c.options.bind + "_confirm"] = nnvalue;
						controller.notifyChange();
					}
				}
			});
		}
	};
})(jQuery);