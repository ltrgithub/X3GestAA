"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.Picture = {
		_setPhoto: function(controller, $c, c, value) {
			var $image = $c.find('#' + c.id + "_image");
			var $remove = $c.find('#' + c.id + "_remove");
			var $cont = $c.find('#' + c.id + "_cont");
			var page = controller.getPageData();
			var cp = $proto.getProto(page, c.options.bind);
			var _doNodata = function() {
				$cont.addClass("s-m-noimage");
				$image.addClass("s-m-hidden");
				$image[0].src = "";
				$remove.addClass("s-m-hidden");
			};
			if (!cp) return _doNodata();
			var _showImg = function() {
				$cont.removeClass("s-m-noimage");
				$image.removeClass("s-m-hidden");
				$remove.removeClass("s-m-hidden");
			};
			value = value || (controller ? controller.getValue(c.options.bind, null, null) : null);
			if (value == null) {
				_doNodata();
			} else {
				var url = value.$url;
				if (!url && cp.$url) {
					url = cp.$url.replace(/\~%C2%A8~\{\$uuid\}/, "").replace(/\~%C2%A8~\{\$trackingId\}/, "");
					url = $proto.parseExpression(url, {
						data: controller.exprData(),
						$prototype: cp
					}, "$url");
				}
				if (value.$value) {
					var ct = value.$contentType || "image/jpeg";
					$image[0].src = "data:" + ct + ";base64," + value.$value;
					_showImg();
				} else if (url) {
					if ($proto.isExpression(url)) url = $proto.parseExpression(url, {
						data: controller.exprData(),
						$prototype: cp
					}, "$url");
					$image[0].src = url;
					_showImg();
				} else _doNodata();
			}
		},
		createPicture: function(controller, c) {
			var options = c.data;
			var html = [];
			that.ui.addErrors(null, c.id, html);
			if (options.label) {
				html.push($helpers.htmlEncode(options.label));
			}
			html.push('<div id="' + c.id + '">');
			html.push('<div id="' + c.id + '_cont" class="ui-body s-m-image-container s-m-noimage" >');
			html.push('<input id="' + c.id + '_input" class="s-hidden-file" accept="image/*" type="file" data-role="none" data-ajax="false" name="' + c.id + '_input"/>');
			html.push('<center><img class="s-m-image s-m-hidden" id="' + c.id + '_image" src="');
			html.push('"/></center>');
			html.push('</div>');
			html.push('<a id="' + c.id + '_remove" class="s-m-min40space ui-btn-right" data-theme="f" data-role="button" data-mini="true" data-icon="minus" data-iconpos="left" data-inline="false">' + $helpers.locale().ui.picture_remove + '</a>');
			html.push('<a id="' + c.id + '_file" class="s-m-min40space ui-btn-right" data-theme="f" data-role="button" data-mini="true" data-icon="plus" data-iconpos="left" data-inline="false">' + $helpers.locale().ui.picture_file + '</a>');
			html.push('</div>');
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};

		},
		sync: true,
		handler: function(c, after) {
			return after(that.controls.Picture.createPicture(this, after));
		},
		checkValue: function($c, c) {
			var opt = c.options || {};
			if (opt.$isReadOnly === true || opt.$isDisabled === true) {
				return null;
			}
			var controller = this;
			if (c.options.$isMandatory) {
				var value = controller.getValue(c.options.bind, null, null);
				if (!value) {
					return $helpers.format($helpers.locale().ui.input_required, [c.options.label]);
				}
			}
		},
		events: function($c, c) {
			var controller = this;
			var $file = $c.find('#' + c.id + "_file");
			var $remove = $c.find('#' + c.id + "_remove");
			var $input = $c.find('#' + c.id + "_input");
			$file.bind("click", function(event, ui) {
				var $cinput = $c.find('#' + c.id + "_input");
				$cinput.click();
			});
			$remove.bind("click", function(event, ui) {
				var $cinput = $c.find('#' + c.id + "_input");
				controller.setData(c.options.bind, null);
				controller.notifyChange();
				that.controls.Picture._setPhoto(controller, $c, c, null);
			});
			$input.bind("change", function(event) {
				if (window.File && window.FileReader && window.FileList && window.Blob) {
					var files = event.target.files; // FileList object
					var res = {};
					if (files && files.length) {
						var f = files[0];
						if (!f.type.match('image.*')) return;
						res.$contentType = f.type;
						res.$fileName = f.name;
						res.$type = "image";
						var reader = new FileReader();
						reader.onload = (function(theFile, cont) {
							return function(e) {
								var i = e.target.result.indexOf("base64,");
								if (i > 0) cont.$value = e.target.result.substring(i + 7);
								else cont.$value = e.target.result;
								delete cont.$url;
								that.controls.Picture._setPhoto(controller, $c, c, cont);
								controller.setData(c.options.bind, cont);
								controller.notifyChange();
							};
						})(f, res);
						reader.readAsDataURL(f);
					}
				}
			});

			that.controls.Picture._setPhoto(controller, $c, c);
		}
	};
})(jQuery);