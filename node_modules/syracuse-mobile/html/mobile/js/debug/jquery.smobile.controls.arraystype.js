"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	var _controls = that.controls;
	function _detailUi(cp) {
		var title = $helpers.htmlEncode($proto.execExpression(cp.$protoparent.$shortTitle || cp.$protoparent.$title, cp.$protoparent));
		var opts = {bind: "value"};
		var cclass =  that.controls.SingleField.initData(cp, cp.$type, title, opts, {});
		var res = {
			"$title": title,
			"content": {
				"cp": {
					"layout": "BlockBodyLayout",
					"data": {}
				},			
				"fieldvalue": {
					"uiClass": cclass,
					"parent": "cp",
					"data":opts
				}
			}
		};
		res.roptions = {
			nopanel: true
		};
		res.hbuttons = [
		{
			title: $helpers.locale().ui.cancel_item,
			action: "cancelDetail",
			"jmdata": {
				"data-icon": "s-cancel",
				"data-transition": "none"
			}		
		},
		{
			title: $helpers.locale().ui.ok_item,
			action: "saveDetail",
			"jmdata": {
				"data-icon": "s-ok",
				"data-transition": "none"
			}
		}
		

		];
		res.actions = {
			saveDetail: function(after) {
				var controller = this;
				if (controller.pageOptions && controller.pageOptions.info && controller && controller.parent) {
					var pcontroller = controller.parent;
					pcontroller.setNeedRefresh();
					var fieldData = pcontroller.getValue(controller.pageOptions.info.bind, null, []);
					fieldData.push(controller.data.value);
					pcontroller.setData(controller.pageOptions.info.bind, fieldData, null);
					pcontroller.notifyChange();
				}
				$.smobile.doBack(controller);
			},
			cancelDetail: function(after) {
				var controller = this;
				$.smobile.doBack();
			}

		};

		return res;
	};

	
	_controls.ArraySimpleType = {
		_renderContent: function(controller, options, cp, id, html, fieldData) {
			if (options.title && !options.$isTitleHidden) html.push('<li data-role="list-divider">' + options.title + '</li>');
			if (fieldData && fieldData.length) {
				fieldData.forEach(function(value, index) {
					html.push('<li class="s-m-slist-item" data-icon="s-noicon" data-corners="false"  data-iconpos="right">');
					value = $proto.htmlValue(null, null, cp, {
						$type: cp.$type
					}, value, {
						useValue: true
					});
					html.push('<a href="#"> ');
					html.push(value);
					html.push('</a>');
					html.push('<div class="s-m-custom-icon" data-action="delete" data-action-param="' + index + '"><div data-action-param="' + index + '" data-action="delete" class="ui-icon ui-icon-s-delete-dark"></div></div>');
					html.push('</li>');
				});
			}
		},
		_addLast: function(controller, options, cp, id, html, fieldData) {
			html.push('<li id="' + id + '_new" class="s-m-slist-item" data-icon="s-noicon" data-corners="false"  data-iconpos="right">');
			html.push('<button class="s-m-min40 ui-btn-right" data-action="new" data-role="button" data-mini="true" data-inline="false" data-theme="f" data-icon="plus" data-iconpos="left" ');
			html.push('href="#">');
			html.push($helpers.locale().ui.add_item);
			html.push('</button>');
			html.push('</li>');
		},

		refresh: function(controller, options, $c, id) {
			var fieldData = controller.getValue(options.bind, null, []);
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var html = [];
			_controls.ArraySimpleType._renderContent(controller, options, cp, id, html, fieldData);
			var save = $('#' + id + '_new').detach();
			$c.empty();
			$c.html(html.join(''));
			$c.append(save);
			$c.listview("refresh");
		},

		createArraySimpleType: function(controller, c, fieldData) {
			if (fieldData == null) fieldData = controller.getValue(c.data.bind, null, []);
			var options = c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var html = [];
			html.push('<ul id="' + c.id + '" class="s-m-list" data-role="listview" data-inset="true"');
			$helpers.addJqmData(options, html);
			html.push('>');
			_controls.ArraySimpleType._renderContent(controller, options, cp, c.id, html, fieldData);
			_controls.ArraySimpleType._addLast(controller, options, cp, c.id, html, fieldData);
			html.push('</ul>');
			that.ui.addLinks(c.id, controller, html, cp, c.data.bind);
			return {
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},

		setValue: function(controller, c, value, next) {
			return next();
		},
		sync: true,
		handler: function(c, after, layoutClass) {
			return after(_controls.ArraySimpleType.createArraySimpleType(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				var target = e.target,
					cp;
				if (!target) return;
				var p = $(target).attr("data-action");
				if (p === "delete") {
					p = $(target).attr("data-action-param");
					p = parseInt(p, 10);
					var fieldData = controller.getValue(c.options.bind, null, []);
					fieldData.splice(p, 1);
					controller.notifyChange();
					var tag = "LI";
					while (target && (target.tagName.toUpperCase() !== tag)) {
						target = target.parentNode;
					}
					if (target) $(target).remove();

				} else if (p === "new") {
					var page = controller.getPageData();
					cp = $proto.getProto(page, c.options.bind);
					var fieldData = controller.getValue(c.options.bind, null, []);
					if (cp.$protoparent.$maxItems && (fieldData.length >= cp.$protoparent.$maxItems)) return;
					var uidata = _detailUi(cp);
					uidata.options= {info: {bind: c.options.bind}};
					var cv = {};
					$proto.proto2Value(cp, "value", cv);
					that.createDetail(uidata, cv, controller);
					
				}
			});
		}
	};

})(jQuery);