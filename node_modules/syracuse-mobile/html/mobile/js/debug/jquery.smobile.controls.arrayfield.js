"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	that.controls = that.controls || {};
	var _controls = that.controls;
	// move in  controls
	_controls.types = _controls.types || {};
	_controls.types._addArray = function(bind, parentbind, index) {
		return {
			value: $helpers.locale().ui.array_detail,
			action: "show_detail",
			actionParams: JSON.stringify({
				"action": "show_detail",
				"$bind": bind,
				"$parentbind": parentbind,
				"$index": index
			})
		};


	},
	_controls.types.addReference = function(proto, data, controller, field, addtitle) {
		var res = {};
		var cd = data,
			pp;
		proto = proto.$item || proto;

		if (data && Array.isArray(data)) {
			if (addtitle) pp = data[0];
			cd = data[data.length - 1];
		} else {
			pp = data;
		}
		var isuuid = $proto.useUuid(proto);
		if (isuuid && !cd) {
			res.value = "";
			return res;
		}
		if (cd && cd.hasOwnProperty("$value")) {
			res.value = cd.$value;
		} else if (proto.$value) {
			res.value = $proto.parseExpression(proto.$value, {
				data: controller.exprData(data),
				$prototype: proto
			}, "$value");
		} else {
			res.value = $proto.parseExpression(proto.$key, {
				data: controller.exprData(data),
				$prototype: proto
			}, "$key");
		}
		if (pp) {
			if (pp.$title && pp.$title != res.value) {
				res.title = pp.$title;
			} else if (pp.$description && pp.$description != res.value) {
				res.title = pp.$description;
			} else {
				// #3448
				res.title = pp.$title ? pp.$title : pp.$description ? pp.$description : "";
			}
		}
		if (proto.$links && proto.$links.$details) {
			var url = $proto.parseExpression(proto.$links.$details.$url, {
				data: controller.exprData(data),
				$prototype: proto
			}, "$url");
			var purl = $sdata.parseSdataUri(url);
			if ($sdata.url2proto(purl)) res.url = url;
		}
		return res;
	};
	_controls.types._table_refresh = function($parent, refresh) {
		var table = $parent.find("table.s-m-table");
		if (refresh) {
			// Force responsive (mode with largest width)
			table.addClass("ui-responsive");
			// Create table widget after html update
			$parent.trigger('create');
		}
		// Force responsive (stacked fields) if overflow (if large number of columns)
		// Responsive mode is automatically triggered regarding the width (see JQM css)
		// We want to force it if there an overflow (not static width dependent)
		// I tried to deal with overflow and overflowchanged event but it's not really cross browsers
		// ON a mobile user don't change the width (like on a desktop) except for portrait/landscape so it's not necessary to handle such events
		if (table.length > 0 && table.attr("data-mode") == "reflow") {
			// div.table
			var overflowDiv = table.parent().get(0);
			if (overflowDiv && parseInt(overflowDiv.offsetWidth) < parseInt(overflowDiv.scrollWidth)) {
				table.removeClass("ui-responsive");
			}
		}
	};
	_controls.types._table_header = function(html, fields, $prototype, noDetailLink, edit) {
		if (!fields) return;
		html.push('<div class="table" style="overflow: hidden; white-space: nowrap; width: 100%;"> <table data-role="table" data-mode="reflow" class="s-m-table ui-responsive table-stripe"');
		html.push('>');
		html.push('<thead><tr>');
		var prop = $prototype.$properties;
		var first = true;
		fields.forEach(function(field, index) {
			if (field && field.$bind) field = field.$bind;
			var proto = prop[field];
			//  application/x-array -> We don't display More.. be cause in edit we have the editdetail icon
			if (proto.$isHidden || proto.$isExcluded || (edit && proto.$type === "application/x-array")) return;
			if (first) {
				first = false;
				html.push('<th data-priority="persist">');
			} else {
				html.push('<th data-priority="' + index + '">');
			}
			if (true || proto.$type != "application/x-array") { // Display header for all types - even for More link
				html.push($helpers.htmlEncode($proto.parseExpression(prop[field].$shortTitle || prop[field].$title, {
					data: null,
					$prototype: $prototype
				}, "$title")));
			}
			html.push('</th>');
		});
		if (noDetailLink !== true) {
			html.push('<th data-priority="' + fields.length + '">' + '</th>');
		}
		html.push('</tr></thead>');
		html.push('<tbody>');
	};
	_controls.types._table_row = function(html, fields, $prototype, rowVal, controller, edit, index, noDetailLink, parentBind) {
		if (!fields) return;
		html.push('<tr');
		if (rowVal.$nbFieldErrors > 0) {
			html.push(' class="fieldError"');
		}
		html.push('>');
		var prop = $prototype.$properties;
		var first = true;
		var props = rowVal.$properties;
		fields.forEach(function(field) {
			if (field && field.$bind) field = field.$bind;
			var proto = prop[field];
			// We don't display More.. in edit mode because in edit we have the editdetail icon - see header	
			if (proto.$isHidden || proto.$isExcluded || (edit && proto.$type === "application/x-array")) return;
			// reference field - meta-data are given by rvalue field - ADEV_SITE meta-data for ADEV_SITE_REF (X3) 
			var rValue = proto.$rvalue ? proto.$rvalue : proto.$item ? proto.$item.$rvalue : null;
			var fieldMeta = props == null ? null : rValue == null ? props[field] : props[rValue];
			var fieldHidden = fieldMeta != null && fieldMeta.$isHidden === true;
			var fieldEmpty = false;
			var htmlVal = [];
			if (!fieldHidden) {
				var value = rowVal ? rowVal[field] : null;
				fieldEmpty = value == null;
				if (!fieldEmpty) {
					if (proto.$type === "application/x-reference") {
						//ok
						var options = _controls.types.addReference(proto, [value, rowVal], controller, field, true);
						fieldEmpty = options.value == null || options.value.trim().length == 0;
						that._addLink(htmlVal, options, controller);
					} else if (proto.$type === "application/x-array") {
						if (!edit) {
							if (value.length) {
								options = _controls.types._addArray(field, parentBind, index);
								fieldEmpty = !that._addLink(htmlVal, options, controller);
							} else {
								htmlVal.push(' ');
								fieldEmpty = true;
							}

						}
					} else {
						var v = ($proto.htmlValue(rowVal, $prototype, proto, {
							$type: proto.$type,
							$bind: field
						}) || "").trim();
						if (v.length == 0) {
							fieldEmpty = true;
						} else {
							htmlVal.push(v);
						}
					}
				}
			}
			html.push('<');
			html.push(first ? 'th' : 'td');
			if (fieldHidden) {
				// #3220 - We add this class to hide the label when the table switch to reflow mode 
				// http://api.jquerymobile.com/table-reflow/
				html.push(' class="hidden"');
			} else if (fieldEmpty) {
				// In reflow mode we don't' display empty field to save room
				html.push(' class="empty"');
			}
			html.push('>');
			html.push(htmlVal.join(''));
			if (first) {
				html.push('</th>');
				first = false;
			} else {
				html.push('</td>');
			}
		});
		if (edit || noDetailLink !== true) {
			html.push('<td>');
			if (edit) {
				html.push('<a href="#" data-role="button"  data-index="' + index + '" data-action="edit" data-iconpos="notext" data-theme="f" data-inline="true"  data-mini="true" data-icon="s-edit">');
				html.push($helpers.locale().ui.edit_item);
			} else {
				//noDetailLink !== true
				html.push('<a href="#" data-role="button"  data-index="' + index + '" data-action="detail" data-theme="f" data-inline="true"  data-mini="true" data-icon="false">');
				html.push("...");
			}
			html.push('</a></td>');
		}
		html.push('</tr>');
		if (rowVal && rowVal.$nbFieldErrors > 0) {
			html.push('<tr><td colspan="' + (fields.length + 1) + '" class="fieldError"><div class="s-m-flderr">See detail</div></td></tr>');
		}
	};
	_controls.types._table_end = function(html, edit) {

		html.push('</tbody>');
		html.push('</table></div>');
	};
	_controls.ArrayField = {
		syncc: true,
		_cards: function(controller, id, options, html) {
			var ui = that.detailUiData(controller, options.cacheData.$proto, options.cacheData.data[options.$index], options.cacheData.layout, {
				inlinePrefix: options.$bind + "_",
				readOnly: true
			});
			var dhtml = {
				root: {
					before: "",
					after: "",
					childs: []
				}
			};
			var detailpagedata = {
				$prototype: ui.uiData.$prototype,
				$article: options.cacheData.layout
			};
			that.renderPageHTML(controller, ui.uiData.content, dhtml, {
				pageData: detailpagedata,
				prefix: options.$bind,
				data: options.cacheData.data[options.$index]
			});
			var dcontent = [];
			that.struct2html(dhtml.root, dcontent);
			html.push(dcontent.join(''));
		},
		handler: function(c, after) {
			var controller = this;
			var html = [],
				options = c.data || {};

			var field = options.field;
			delete options.field;
			var page = controller.getPageData();
			if (!page) return after({
				html: "",
				options: {}
			});
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var cpt = field.$proto.$rtype; //see $helpers.linkParents
			var protoProp = field.$proto.$protoparent;
			var fieldData = controller.getValue(field.$bind, null, cpt === ("application/x-reference") ? null : []);
			var cp = field.$proto.$item || field.$proto;
			var $article = options.$article,
				isTitleHidden = $article && $article.$isTitleHidden;
			if (!isTitleHidden && protoProp.$isTitleHidden) isTitleHidden = true;
			if (edit) {
				var scc = {
					id: c.id + "_" + field.$bind,
					data: {
						inline: false,
						bind: field.$bind
					}
				};
				var opts = scc.data,
					cc;
				switch (cpt) {
					case "application/x-reference":
						opts.type = "text";
						opts.label = isTitleHidden ? "" : $proto.parseExpression(protoProp.$shortTitle || protoProp.$title, {
							data: null,
							$prototype: cp
						}, "$title");
						scc.id = c.id + "_" + field.$bind;
						if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
							opts.$lookupurlparsed = true;
							opts.$lookupurl = cp.$links.$lookup.$url;
							opts.$lookupurl = $proto.parseExpression(cp.$links.$lookup.$url, {
								data: controller.exprData(fieldData),
								$prototype: cp
							}, "$url");
						}
						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Lookup.createLookup(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Lookup";
						cc.scid = "_" + field.$bind;
						break;
					case "application/x-array":
						switch (field.$proto.$type) {
							case "application/x-reference":
								opts.title = isTitleHidden ? "" : $proto.parseExpression(protoProp.$shortTitle || protoProp.$title, {
									data: null,
									$prototype: cp
								}, "$title");
								opts.jmdata = $proto.jqmDataArray();
								scc.id = c.id + "_" + field.$bind;
								//protoProp = field.$proto.$item || field.$proto;
								if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
									opts.$lookupurl = cp.$links.$lookup.$url;
								}
								cc = that.controls.ArrayRef.createArrayRef(controller, scc, fieldData);
								cc.id = scc.id;
								cc.uiClass = "ArrayRef";
								cc.scid = "_" + field.$bind;
								break;
							case "application/x-object":
							case "application/json":
								// for old compatibility
								opts.title = isTitleHidden ? "" : $proto.execExpression(field.$shortTitle || field.$title, field.$proto.$item || field.$proto);
								opts.jmdata = $proto.jqmDataArray();
								var clayout, glayout = {};
								clayout = $proto.auth.compositionLayout($article, (field.$proto.$item || field.$proto), null, true, glayout);
								opts.$article = clayout;
								opts.$gridItems = glayout.$items;
								scc.id = c.id + "_" + field.$bind;
								cc = that.controls.ArrayObjectRef.createArrayObjectRef(controller, scc, fieldData);
								cc.id = scc.id;
								cc.uiClass = "ArrayObjectRef";
								cc.scid = "_" + field.$bind;
								break;
							default:
								opts.title = isTitleHidden ? "" : $proto.execExpression(field.$shortTitle || field.$title, field.$proto.$item || field.$proto);
								opts.jmdata = $proto.jqmDataArray();
								scc.id = c.id + "_" + field.$bind;
								cc = that.controls.ArraySimpleType.createArraySimpleType(controller, scc, fieldData);
								cc.id = scc.id;
								cc.uiClass = "ArraySimpleType";
								cc.scid = "_" + field.$bind;
								break;
						}
						break;

				}
				if (cc) return after([cc]);
				else return after(null);

			} else {
				if (field) options.$bind = field.$bind;
				var layout = null;
				if ((cpt === "application/x-array") && ((field.$proto.$type === "application/x-object") || (field.$proto.$type === "application/json"))) {
					layout = $proto.auth.compositionLayout($article, (field.$proto.$item || field.$proto), null, true);
					options.div = true;

				}
				//options.div = false;
				options.$index = 0;
				options.$len = 0;
				if (options.div) {
					html.push('<div id="' + c.id + '" class="s-m-list">');
				} else {
					html.push('<ul id="' + c.id + '" data-role="listview" class="s-m-list"');
					$helpers.addJqmData(options, html);
					html.push('>');
				}
				var ct = "",
					toptions;
				switch (cpt) {
					case "application/x-reference":
						ct = isTitleHidden ? "" : $helpers.htmlEncode($helpers.htmlEncode($proto.execExpression(protoProp.$shortTitle || protoProp.$title, protoProp)));
						if (ct) html.push('<li data-role="list-divider">' + ct + '</li>');
						// lookup 
						toptions = _controls.types.addReference(field.$proto, fieldData, controller, field.$bind, true);
						html.push('<li>');
						that._addLink(html, toptions, controller);
						html.push('</li>');
						break;
					case "application/x-array":
						ct = isTitleHidden ? "" : $helpers.htmlEncode($helpers.htmlEncode($proto.execExpression(field.$shortTitle || field.$title, field.$proto.$item || field.$proto)));
						if (ct) {

							if (options.div) {
								html.push('<ul data-role="listview" data-role="listview" class="s-m-list nobottom"');
								$helpers.addJqmData(options, html);
								html.push('>');
							}
							html.push('<li data-role="list-divider">' + ct + '</li>');
							if (options.div) html.push('</ul>');
						}
						if (fieldData) {
							options.$len = fieldData.length;
							// x-array
							switch (field.$proto.$type) {
								case "application/x-reference":
									if (fieldData.length) fieldData.forEach(function(value) {
										toptions = _controls.types.addReference(field.$proto.$item || field.$proto, value, controller);
										html.push('<li>');
										that._addLink(html, toptions, controller);
										html.push('</li>');
									});
									break;
								case "application/x-object":
								case "application/json":
									// array composition 
									if ((layout.$layout && !layout.$format) || (layout.$format === "grid")) {
										_controls.types._table_header(html, layout.$layout.$items, field.$proto, layout.$cards ? false : true, false);
										fieldData.forEach(function(value, index) {
											_controls.types._table_row(html, layout.$layout.$items, field.$proto, value, controller, false, index, layout.$cards ? false : true, field.$bind);
										});
										_controls.types._table_end(html);

									} else {
										if (layout.$format === "cards") {
											if (fieldData && fieldData.length) {
												options.$cards = true;
												options.cacheData = {
													$proto: field.$proto,
													data: fieldData,
													layout: (layout.$cards && layout.$cards.$layout) ? layout.$cards.$layout : layout.$layout
												};
												html.push('<div id="' + c.id + 'cards">');
												_controls.ArrayField._cards(controller, c.id, options, html);
												html.push('</div>');
												that.controls.navFooter(false, ((options.$index + 1) < options.cacheData.data.length), (options.$index > 0), c.id + '_nav', true, {
													"jmdata": {
														"data-role": "footer"
													}
												}, html);

											}
										}
									}
									break;
								case "application/x-choice":
									var map = {};
									cp.$value.$enum.forEach(function(value) {
										map[value.$value + ""] = $proto.execExpression(value.$title, field.$proto);
									});
									fieldData.forEach(function(value) {
										html.push('<li>' + $helpers.htmlEncode(map[value + ""]) + '</li>');
									});

									break;

								default:
									fieldData.forEach(function(value) {
										html.push('<li>' + value || "" + '</li>');
									});
									break;
							}
						}
						break;
				}
				if (options.div)
					html.push('</div>');
				else
					html.push('</ul>');
				return after({
					html: html.join(''),
					bind: !edit,
					options: options
				});

			}

		},
		refresh: function(controller, options, $c, id) {
			// Refresh table - Adjust reflow mode
			_controls.types._table_refresh($c, true);
		},
		onWindowResize: function(controller, $c, c) {
			// Force ui-responsive est recreate the table to calculate the best display
			_controls.types._table_refresh($c, true);
		},
		events: function($c, c) {
			var controller = this;
			var edit = (c.options.facet === "$edit") || (c.options.facet === "$create");
			if (!edit) {
				if (c.options.$cards) {
					$c.on("swipeleft", function(event) {
						if ((c.options.$index + 1) < c.options.$len) {
							c.options.$index++;
							var html = [];
							_controls.ArrayField._cards(controller, c.id, c.options, html);
							var $ci = $('#' + c.id + "cards");
							$ci.html(html.join(''));
							$ci.trigger('create');
							controller.setHtmlEvents();
							that.controls.navFooter(false, ((c.options.$index + 1) < c.options.cacheData.data.length), (c.options.$index > 0), c.id + '_nav', false);


						}
						event.stopPropagation();
					});
					$c.on("swiperight", function(event) {
						if (c.options.$index > 0) {
							c.options.$index--;
							var html = [];
							_controls.ArrayField._cards(controller, c.id, c.options, html);
							var $ci = $('#' + c.id + "cards");
							$ci.html(html.join(''));
							$ci.trigger('create');
							controller.setHtmlEvents();
							that.controls.navFooter(false, ((c.options.$index + 1) < c.options.cacheData.data.length), (c.options.$index > 0), c.id + '_nav', false);

						}
						event.stopPropagation();
					});


				} else {
					$c.click(function(e) {
						var target = $helpers.getTarget(e);
						if (!target) return;
						var p = $(target).attr("data-action"),
							page, cp, cd, pp, $layout, ui, nd;
						if (p) {
							if (p === "detail") {
								p = parseInt($(target).attr("data-index"), 10);
								page = controller.getPageData();
								cp = $proto.getProto(page, c.options.$bind);
								cd = controller.getValue(c.options.$bind, null, []);
								if (cd && Array.isArray(cd) && (p >= 0)) {
									cd = cd[p];
									//TODO
									$layout = $proto.auth.findSlayout(c.options.$article, c.options.$bind, false, true);
									pp = cp;
									nd = cd;
									if (!$layout) $layout = $proto.auth.compositionLayout(null, pp, null, false);
									ui = that.detailUiData(controller, pp, nd, $layout, {
										readOnly: true
									});
									that.createDetail(ui.uiData, nd, controller);

								}
							} else {
								try {
									p = JSON.parse(p);
									page = controller.getPageData();
									cd = controller.getValue(p.$parentbind, null, []);
									if (cd) {
										cp = $proto.getProto(page, p.$parentbind);
										if (cd && Array.isArray(cd) && (p.$index >= 0)) {
											cd = cd[p.$index];
											if (cd) {
												nd = cd;
												nd[p.$bind] = cd[p.$bind];
												if (cd && cd[p.$bind]) {
													//cp = cp.$properties[p.$bind].$item;
													pp = cp;
													var $layout = $proto.auth.findSlayout(c.options.$article, p.$bind, true);
													$layout = $proto.auth.compositionLayout($layout, pp, [p.$bind], true);
													ui = that.detailUiData(controller, pp, nd, $layout, {
														readOnly: true
													});
													that.createDetail(ui.uiData, nd, controller);
												}
											}
										}
									}
								} catch (ex) {}

							}
						}
					});
				}
			}
			// Refresh table - Adjust reflow mode
			_controls.types._table_refresh($c, false);
		}
	};
})(jQuery);