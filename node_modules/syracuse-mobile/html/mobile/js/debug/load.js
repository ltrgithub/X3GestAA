"use strict";
$(function() {
	var _errCatched = false;
	var cache = window.applicationCache;
	var that = $.smobile;

	var _step = 0;

	function _log(step, text, indent) {
		var str = step + " - ";
		if (indent != null && indent > 0) {
			for (var i = 0; i < indent; i++) {
				str += "\t";
			}
		}
		console.log(str + text);
	}

	_log = null;

	that.changePage = function(toPage, options) {
		_log && _log(_step, "changePage");
		$.mobile.changePage(toPage, options);
	};
	that.docEvents = {
		"swipeleft": function(event) {
			var page = $.mobile.activePage;
			if (page) {
				var controller = that.pageController(page);
				if (controller) controller.actionnext({});
			}
		},
		"swiperight": function(event) {
			var page = $.mobile.activePage;
			if (page) {
				var controller = that.pageController(page);
				if (controller) controller.actionprevious({});
			}
		},

		"pagebeforechange": function(e, data) {
			if (!data || !e) { //!window.location.hash || 
				e.preventDefault();
				return;
			}
			if (!$.helpers.isOfflineAvail() && $.sdata.sessionStorage.getItem("s-m-new-ios") != "no") {
				// Displays message 'offline mode is disabled on IOS'
				$.sdata.sessionStorage.setItem("s-m-new-ios", "no");
				$.helpers.pushInfoMessage($.helpers.locale().noofflineios);
				$.helpers.setDisplayErrorAsMessage();
			}
			if (typeof data.toPage === "string") {
				if (data.toPage == '#sage-mobile-dlog') {
					// Confirm dialog 10%% JQM
					return;
				}
				if (data.toPage.indexOf('#send-') > 0) {
					// FDB - Display drafts with no drafts - Just a try but this case shoudl'nt occur even with back button (see _myGoBack in sync view)
					var url = $.mobile.path.parseUrl(data.toPage);
					var pageInfo = $.smobile.pageName(url.hash);
					// Check empty draft page
					$.sdata.getSyncDataCount(function(count) {
						window.setTimeout(function() {
							if (count == 0) {
								$.smobile.changePage('#' + $.smobile.PAGES.home.id + $.smobile.hash_sep + $.helpers.encodeURIComponent(pageInfo.application), {
									changeHash: true
								});
								return;
							} else {
								that.docEvents._pagebeforechange(e, data);
							}
						}, 10);
					});
					return;
				}
			}
			that.docEvents._pagebeforechange(e, data);
		},
		_checkInquiryResult: function(controller) {
			if (controller.data && controller.data.$info && controller.data.$info.isMethodCall === true) {
				var result = $('.inquiryrootresult:jqmData(role="collapsible")');
				if (result.length > 0) {
					result.trigger("expand");
				}
			}
		},
		_updateTempales: function(controller) {
			$.proto.getProto(controller.$page);
			var json = $.sdata.localStorage.getItem("s-template-transfer");
			try {
				if (json) {
					json = JSON.parse(json);
					if (json && json.action === "apply") {
						controller.applyTemplate(json);
					}
				}
			} catch (e) {}
			/*
			 * If target page is not template management, always remove template data
			 */
			if (controller.pageInfo && controller.pageInfo.pageName !== "templates") {
				$.sdata.localStorage.removeItem("s-template-transfer");
			}
		},
		_tabletAfterDisplay: function(controller, panel) {
			if ($.helpers.isTablet) {
				if (window.orientation == 90 || window.orientation == -90) {
					if (controller.pageInfo.rightPanel) {
						var rpanel = $("#" + controller.prefix + "rpanel");
						rpanel && panel.attr("data-display", "push");
						rpanel && panel.panel({
							display: "push"
						});
						rpanel.panel("open");
						rpanel && rpanel.attr("data-display", "overlay");
						rpanel && rpanel.panel({
							display: "overlay"
						});
					}
				}
			}
		},
		_pagebeforechange: function(e, data) {
			var step = _step;
			var $helpers = $.helpers;
			var $sdata = $.sdata;
			var fromPage = data.options.fromPage && data.options.fromPage[0] || null;
			var force = false;
			var isStart = $.mobile.$start;
			var hasFieldsErrors = $.helpers.hasFieldsErrors();
			var newPage;
			// typeof data.toPage === "string"
			//  -> Hash= pageId
			//     http://host:8124/syracuse-mobile/html/mobile-debug.html#start	
			//	   pageIds $/mobile.PAGES -> start, errors, apperrors, home, about, settings, send, page, dialog, apps 
			//  -> Hash= page stored in DOM
			//     http://host:8124/syracuse-mobile/html/mobile-debug.html#page-a7e314e4-fc88-42bf-9bf4-ad176670d82b%3Furl%3Dhttp%253A%252F%252Fpc101329.sagefr.adinternal.com%253A8124%252Fsdata%252Fx3%252Ferp%252FSUPERV%252FAUTILIS(%252704040%2527)%253Frepresentation%253DAUTILISM.%2524details
			//  -> Action call
			//     http://host:8124/syracuse-mobile/html/mobile-debug.html#F16_filterpopupMenu			
			if (typeof data.toPage === "string") {
				// Page identified by a hash
				force = true;
				$.mobile.$start = false;
				$.mobile.hashListeningEnabled = true;
				newPage = data.toPage;
			} else if (isStart) {
				// $start=true page has just been loaded (called once after by F5 or window.location.reload();
				force = true;
				$.mobile.$start = false;
				$.mobile.hashListeningEnabled = true;
				newPage = window.location.href;
				data = null;
			} // Else toPage contains be a DOM element
			if (force) {
				step = ++_step;
			}
			_log && _log(step, "START pagebeforechange" + (force ? "Page is a string" : "Page is a DOM elmt"));
			if (!force) {
				// Page is in the DOM - Called after buildPage
				// Pages addressed by url are created in the DOM by the code below which create DOM elment and calls changePage
				if (data && data.toPage.length && (data.toPage[0].id == "page-template")) {
					_log && _log(step, "Page is template - Force load by URL", 1);
					//Bug jquery Mobile 1.2 back && forward with "page-template" - FDB can't repeat this case
					data = null;
					newPage = window.location.href;
					force = true;
				}
			}
			if (force) {
				_log && _log(step, "Load page by URL", 1);
				// We only want to handle changePage() calls where the caller is asking us to load a page by URL
				// -> Page restored -> We have to refresh it and also chck errors
				// For authoring mode
				$.proto.auth.notifyParent("pagechange", null, {
					name: ""
				});
				// We are being asked to load a page by URL, but we only want to handle URLs that request the data for a specific category.
				var u = $.mobile.path.parseUrl(newPage),
					dataUrl;

				//hashFormat:   [#]pagename[-appid[-pageId]][encodeURIComponent(?query)]
				var page = $.smobile.pageName(u.hash);
				if (!page) {
					_log && _log(step, "No page found by hash", 2);
					// An action that applied on current page has been called - Ex: Add a filter
					var action = $.smobile.actionName(u.hash);
					if (action) {
						_log && _log(step, "Page is an action process", 2);
						// Process only known actions - see $.mobile.ACTIONS
						e.preventDefault();
						$.smobile.execAction(u.hash, action, function(refresh) {
							if (refresh) $.smobile.refreshPage();
						});
					} else if (isStart) {
						// Bad hash in url
						$.smobile.goHome();
					} else if (fromPage) {
						// Try to find an anchor - Link inside the page <a href="#elmtId">Click</a>
						var e = $(fromPage).find(u.hash);
						if (e.length > 0) {
							e = $(e.get(0));
							$.smobile.scrollIntoView(e, e.offset().top - 43); // 43 header height
						}
						return;
					} // Else Ex : Add a filter not processed here
				} else {
					_log && _log(step, "Page found by hash", 2);
					// A page has been called
					if (page && page.page && page.page.isHome) {
						$.mobile.navigate.history.clearForward();
					}
					var activePage = $.mobile.activePage;
					var $foundPage = page.domid ? $("#" + page.domid) : false;
					if ($foundPage && $foundPage.length) {
						_log && _log(step, "Page found by domID", 2);
						// Page found in DOM
						var controller = that.pageController($foundPage);
						that.docEvents._updateTempales(controller);
						var cpp = {
							transition: "none"
						};
						if ($sdata.config && page.application && (page.application != $sdata.config.id)) $sdata.config = null;
						if (!$sdata.config && !controller.parent) {
							_log && _log(step, "Unexpected - No page config (detail) and No parent\t\tDisplay found page", 2);
							// Appli ID as changed - FBD can't repeat
							e.preventDefault();
							$.smobile.changePage($foundPage, cpp);
							$.smobile.removeAllPages([$foundPage[0].id]);
							return;
						} else {
							e.preventDefault();
							controller.notifyAuthoring('pageload');
							var cbAfterChange = [];
							if (controller.needRefresh) {
								controller.needRefresh = false;
								if (controller.child) controller.doRefresh(null, cbAfterChange);
							}
							cpp.fromHashChange = true;
							if (controller.child) {
								cpp.reverse = true;
							}
							//  Issue #2592 Close panels if any to trigger onclosepanel event
							var panel = $('#' + controller.prefix + 'rpanel');
							if (panel) panel.panel("close");
							var panel = $('#' + controller.prefix + 'panel');
							if (panel) panel.panel("close");
							//  Issue #2592 Close panels if any to trigger onbeforeclose panel event
							var panel = $('#' + controller.prefix + 'rpanel');
							if (panel) panel.panel("close");
							var panel = $('#' + controller.prefix + 'panel');
							if (panel) panel.panel("close");
							// Restore active buttons - #2579
							controller.activeBtnsRestore();
							_log && _log(step, "Change page with DOM elmt", 2);
							// Call jqm changePage with DOM element
							$.smobile.changePage($foundPage, cpp);
							if (page.page.isHome) {
								$.smobile.removeAllPages([$foundPage[0].id]);
							}
							cbAfterChange.forEach(function(cb) {
								if (cb) cb();
							});
						}
						_log && _log(step, "Refresh errors", 2);
						if ($helpers.hasErrors()) {
							//  Issue #3070  - Force display errors
							$.smobile.showErrors(controller);
						}
						if ($.helpers.displayErrorAsMessage()) {
							//  Issue #3070  - Force display messages
							controller.refreshErrorMessage();
						}
						_log && _log(step, "Stop Page found by domID", 2);
						return;
					}
					_log && _log(step, "Page not found by domID", 2);
					// Page NOT found in DOM --> load page 
					var options = data ? data.options : {};
					options.allowSamePageTransition = true;
					options.showLoadMsg = true;
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					e.preventDefault();
					// Read config (installed representation) and build page ui structure
					// afterdata -> handler called after read data (set contextual items in header)
					_log && _log(step, "Start load page", 2);
					$.smobile.loadPage(u.hash, page, function(uiId, ui, error, afterdata) {
						//ui describe the Tree structure of the pages - Layouts and Controls 
						//uid : ex TABCOUNTRYM.$details
						if (!ui) {
							// unexpected case - No user interface - FDB should display an error
							$.mobile.loading('hide');
							_log && _log(step, "Load page KO - do back", 3);
							return $.smobile.doBack(null);
						}
						_log && _log(step, "Load page ok", 3);
						$sdata.startLoad();
						// Read Data -> resData
						$.smobile.parseURL(u, page, function(href, resData, error, info) {
							if (error) {
								_log && _log(step, "parseURL ko", 3);
								$sdata.endLoad();
								$.mobile.loading('hide');
								if ((page.page.id != $.smobile.PAGES.errors.id)) {
									if ($helpers.hasErrors()) {
										if ($.helpers.displayErrorAsDialog()) {
											$.helpers.displayErrDialog();
										} else {
											$.smobile.showErrors(that.pageController(fromPage));
										}
									} else {
										if (resData) $.smobile.showError(options, resData || '');
										if (href) window.location.href = href;
									}
									return;
								}
							}
							if (info && info.stop) {
								_log && _log(step, "parseURL ok with STOP", 3);
								$.mobile.loading('hide');
								$sdata.endLoad();
								if ($helpers.hasErrors() && (data == null && data.fromPage == null)) {
									$.smobile.showErrors(that.pageController(fromPage));
								}
								return;
							}
							_log && _log(step, "parseURL ok", 3);
							// Set contextual items - #5814 add page param
							if (afterdata) afterdata(resData, page);
							options.dataUrl = href;
							// Create DOM jqm page from a template by clone (Header/Content/Footer)
							var cp = $.smobile.createPage(page);
							var $ptemplate = cp.$template,
								$page = cp.$page;
							// Build DOM page according to ui content and data
							// --> Page : <div id='pageid'> rightpanel, leftpanels, Header, content (layouts and controls)</div>
							_log && _log(step, "Start build page", 3);
							$.smobile.buildPage(uiId, activePage, $page, ui, resData, info, page, $ptemplate, function() {
								var controller = that.pageController($page);
								var panel = cp.$page.children('#panel-template');
								panel.attr("id", controller.prefix + "panel");
								panel = cp.$page.children('#right-panel-template');
								panel.attr("id", controller.prefix + "rpanel");
								if ($helpers.hasErrors() && !$.helpers.displayErrorAsMessage() && !$.helpers.displayErrorAsDialog()) {
									_log && _log(step, "build page KO display errors", 4);
									$sdata.endLoad();
									controller.remove();
									$page.remove();
									return $.smobile.showErrors(that.pageController(fromPage));
								}
								_log && _log(step, "build page OK", 4);
								if (ui.actions) {
									controller.pageActions = ui.actions;
									ui.actions = null;
								}
								if (!controller.pageOptions.dialog && options.dataUrl) {
									$page.attr('data-url', $.smobile.hashOfUrl(options.dataUrl));
								}
								var co = data ? data.options : {};
								if (controller.pageOptions.changeHash != null) co.changeHash = controller.pageOptions.changeHash;
								controller.notifyAuthoring('pageload');
								_log && _log(step, "changePageto DOM elemt", 4);
								// Call jqm changePage with DOM element
								$.smobile.changePage($page, co);
								_log && _log(step, "BindData", 4);
								// Bind events to controls
								controller.bindData();
								$sdata.endLoad();
								if ($.helpers.displayErrorAsDialog()) {
									$.helpers.displayErrDialog();
								} else if ($.helpers.displayErrorAsMessage()) {
									// Errors as been displayed as a top message
								} else if (controller.hasErrors()) {
									// Errors as displayed in a dialog
									$.smobile.showErrors(controller);
								}
								if (hasFieldsErrors) {
									// Fields error first because there an general error message that should be displayed as a message info
									that.ui.setErrorFocus($page);
								}
								that.docEvents._updateTempales(controller);
								that.docEvents._checkInquiryResult(controller);
								$helpers.clearInfos();
								_log && _log(step, "end build page OK", 4);
								that.docEvents._tabletAfterDisplay(controller, panel);
							});
						});
					});
				}
			} else {
				_log && _log(step, "STOP pageBeforeLoad");
			}
		},
		"pagehide": function(fromPage, data) {
			_log && _log(_step, "pagehide");
			var $helpers = $.helpers;
			if (!window.location.hash) return;
			if (fromPage && fromPage.target != data.nextPage[0]) {
				var currentController = that.pageController(fromPage.target);
				if (currentController && currentController.pageInfo && currentController.pageInfo.page.cache) {
					//this page must be cached (home page by example) : don't  remove current page
					//$helpers.log("cache current page: this page can be cached");
					return;
				}
				var dialog = $.smobile.pageIsDialog(data.nextPage);
				var detail = (dialog ? false : $.smobile.pageIsDetail(data.nextPage));
				if (detail || dialog) {
					var nextController = that.pageController(data.nextPage);
					// next page is dialog/detail don't  remove current page
					if (nextController && nextController.child === currentController) {
						$.smobile.removePage(fromPage.target);
					} else {
						// $helpers.log("cache current page: next page is  detail/dialog");
					}
					return;
				}
				if (currentController) {
					if (currentController.config && currentController.config.ui && (currentController.config.ui.indexOf(".$query") > 0)) return;
					if (currentController.pageActions && currentController.pageActions.close) {
						currentController.pageActions.close.apply(currentController);
					}
					$.smobile.removePage(fromPage.target);
				}

			}
		},
		"pageshow": function(event, ui) {
			_log && _log(_step, "pageshow");
			var newPageController;
			var json;
			var tpl;
			if (false && event && event.target) {
				newPageController = that.pageController(event.target);
				if (newPageController) {
					json = $.sdata.localStorage.getItem("s-template-transfer");
					try {
						if (json) {
							tpl = JSON.parse(json);
							if (tpl && tpl.action === "apply") {
								newPageController.applyTemplate(tpl);
							}
						}
					} catch (e) {}
					/*
					 * If target page is not template management, always remove template data
					 */
					if (newPageController.pageInfo && newPageController.pageInfo.pageName !== "templates") {
						$.sdata.localStorage.removeItem("s-template-transfer");
					}
				}
			}
		},
		"enableSwipe": function() {
			$(document).on("swipeleft", that.docEvents.swipeleft);
			$(document).on("swiperight", that.docEvents.swiperight);
		},
		"disableSwipe": function() {
			$(document).off("swipeleft", that.docEvents.swipeleft);
			$(document).off("swiperight", that.docEvents.swiperight);
		}
	};

	function setJMobileEvents() {
		that.docEvents.enableSwipe();
		$(document).bind("pagebeforechange", that.docEvents.pagebeforechange);
		$(document).bind("pagehide", that.docEvents.pagehide);
		$(document).bind("pageshow", that.docEvents.pageshow);

	};

	function mobileStart() {
		// nonDebugModeis set by the build process see index.html to true for non-debug version
		$.smobile.isDebugMode = $.smobile.nonDebugMode !== true;
		// Set $start=true - initialize jqm
		// page has just been loaded (called after F5 or window.location.reload();
		setJMobileEvents();
		var setDefaultTransition = function() {
			$.mobile.defaultPageTransition = "none";
		};
		setDefaultTransition();
		$(window).bind("throttledresize", setDefaultTransition);
		if (window.location.hash) {
			$.mobile.$start = true;
			$.mobile.initializePage();
		} else {
			setTimeout(function() {
				var p = window.location.href.indexOf('?forcereload');
				if (p > 0) {
					window.location.href = window.location.href.substring(0, p);
				}
				window.location.hash = "#start";
				$.mobile.$start = true;
				$.mobile.initializePage();
			}, 0);
		}
		$(window).bind("orientationchange", function(event) {
			var controller = $.smobile.pageController($.mobile.activePage);
			if (controller) controller.orientationChanged(event.orientation);
		});

	}
	window.onerror = function(errorMsg, url, lineNumber, error) {
		var $helpers = $ ? $.helpers : null;
		var msg = $helpers && $helpers.locale ? $helpers.locale().errorjs : "A javascript error occured\nPlease contact the administrator";
		msg += "\n" + errorMsg + "\n" + (error ? +JSON.stringify(error, null, 2) : (url ? "Url : " + url + "\nLineNumber : " + lineNumber : ""));
		try {
			// _errCatched to avoid multiple calls if an error occurs in showErrors
			if (!_errCatched && $ && $.mobile && $.mobile.activePage) {
				_errCatched = true;
				$.helpers.pushException({
					message: msg
				});
				$.smobile.showErrors($.smobile.pageController($.mobile.activePage));
				$.mobile.loading('hide');
				return;
			}
		} catch (e) {
			alert(e);
		}
		if (!_errCatched) {
			alert(msg);
			var l = window.location;
			window.location = l.protocol + '//' + l.host + l.pathname + "#start";
		}
		_errCatched = false;
	};
	if ($.helpers.isIOSWithManifestIssue() && window.location.href.indexOf("/mobile.html") > 0) {
		// Force the use of mobile-ios page - no cache manifest and no offline mode
		window.location.replace(window.location.href.replace("/mobile.html", "/mobile-ios.html"));
	} else if ($ && $.sdata && $.sdata.capabilities && $.sdata.capabilities.loadLocale && $.sdata.capabilities.localeLoader) {
		// load locale
		var s = $.helpers.settings();
		$.helpers.setOfflineMode(s && s.offline);
		$.helpers.clearErrors();
		$.sdata.capabilities.localeLoader(function() {
			mobileStart(false);
		}, true);
	} else {
		// Clear errors only if no localeLoader in order to display errors that occured during local loading
		// No clear is error page
		if (window.location.hash.indexOf("#apperrors") != 0 && window.location.hash.indexOf("#errors") != 0) {
			$.helpers.clearErrors();
		}
		mobileStart(true);
	}
});