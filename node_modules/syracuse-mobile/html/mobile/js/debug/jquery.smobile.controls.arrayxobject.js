"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	var _controls = that.controls;
	_controls.ArrayObjectRef = {
		_renderContent: function(controller, options, cp, id, html, fieldData) {
			if (options.title && !options.$isTitleHidden) html.push('<li data-role="list-divider">' + options.title + '</li>');
			var iid = $helpers.uuid();
			html.push('<li id="' + iid + '" >');
			var $lyt = options.$gridLayout ? options.$gridLayout : options.$article.$layout;
			_controls.types._table_header(html, $lyt, cp, false, true);
			fieldData.forEach(function(value, index) {
				_controls.types._table_row(html, $lyt, cp, value, controller, true, index);
			});
			_controls.types._table_end(html, true);
			html.push('</li>');
			return iid;
		},
		_addLast: function(id, options) {
			var html = [];
			html.push('<li id="' + id + '_last">');
			html.push('<button id="' + id + '_new" class="s-m-min40 ui-btn-right" data-action="new" data-role="button" data-mini="true" data-inline="false" data-theme="f" data-icon="plus" data-iconpos="left" ');
			html.push('href="#">');
			html.push($helpers.locale().ui.add_item);
			html.push('</button>');
			html.push('</li>');
			return html.join('');

		},
		refresh: function(controller, options, $c, id) {
			var fieldData = controller.getValue(options.bind, null, []);
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var arrayproto = $proto.getProto(page, options.bind, true);
			var oldHasBtn = options.hasButton;
			options.hasButton = $proto.canAdd(arrayproto, fieldData);
			options.candel = $proto.canDel(arrayproto);

			var html = [];
			var uuid = _controls.ArrayObjectRef._renderContent(controller, options, cp, id, html, fieldData);
			if (oldHasBtn && options.hasButton) {
				var save = $('#' + id + '_last').detach();
				$c.html(html.join(''));
				$c.append(save);
			} else if (!options.hasButton) {
				$c.html(html.join(''));
			} else {
				html.push(_controls.ArrayObjectRef._addLast(id, options));
				$c.html(html.join(''));
				$("#" + id + '_new').button();
			}
			// Refresh table - Adjust reflow mode
			_controls.types._table_refresh($("#" + uuid), true);
			$c.listview("refresh");
		},
		onWindowResize: function(controller, $c, c) {
			// Force ui-responsive est recreate the table to calculate the best display
			_controls.types._table_refresh($c, true);
		},
		createArrayObjectRef: function(controller, c, fieldData) {
			if (fieldData == null) fieldData = controller.getValue(c.data.bind, null, []);
			var options = c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var arrayproto = $proto.getProto(page, options.bind, true);
			options.hasButton = $proto.canAdd(arrayproto, fieldData);
			options.candel = $proto.canDel(arrayproto);
			var html = [];
			html.push('<ul class="s-m-list"  id="' + c.id + '" data-role="listview"');
			html.push(' data-inset="true" data-split-theme="d" data-split-theme="d"');
			$helpers.addJqmData(options, html);
			html.push('>');
			_controls.ArrayObjectRef._renderContent(controller, options, cp, c.id, html, fieldData);
			if (options.hasButton) html.push(_controls.ArrayObjectRef._addLast(c.id, options));
			html.push('</ul>');
			that.ui.addArrayLinks(c.id, controller, html, cp, c.data.bind);
			return {
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},

		setValue: function(controller, c, value, next) {
			var $ul = $('#' + c.id + "");
			return next();
		},
		sync: true,
		handler: function(c, after, layoutClass) {
			return after(_controls.ArrayObjectRef.createArrayObjectRef(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				if (e && e.target) {
					var cp, ui, layout, cd, ooptions;
					var target = $helpers.getTarget(e);
					if (!target) return;
					var p = $(target).attr("data-action");
					if (p === "edit") {
						p = $(target).attr("data-index");
						p = parseInt(p, 10);
						var page = controller.getPageData();
						cp = $proto.getProto(page, c.options.bind);
						var efieldData = controller.getValue(c.options.bind, null, []);
						layout = c.options.$article;
						cd = $.extend(true, {}, efieldData[p]);
						ooptions = {
							actions: {
								save_detail: function() {
									var self = this;
									if (self.pageOptions && self.pageOptions.info) {
										self.parent.setNeedRefresh();
										var fieldData = self.parent.getValue(self.pageOptions.info.bind, null, []);
										fieldData[self.pageOptions.info.index] = self.getValue();
										self.parent.notifyChange();
									}
									$.smobile.doBack(self);
								},
								cancel_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								}
							}
						};
						if (c.options.candel) {
							ooptions.actions.delete_detail = function() {
								var self = this;
								if (self.pageOptions && self.pageOptions.info) {
									self.parent.setNeedRefresh();
									var fieldData = self.parent.getValue(self.pageOptions.info.bind, null, []);
									fieldData.splice(self.pageOptions.info.index, 1);
									self.parent.notifyChange();
								}

								$.smobile.doBack(self);
							};

						}
						ui = that.detailUiData(controller, cp, cd, layout, ooptions);
						ui.uiData.options = {
							info: {
								index: p,
								bind: c.options.bind
							}

						};
						that.createDetail(ui.uiData, cd, controller);
					} else if (p === "new") {
						var page = controller.getPageData();
						cp = $proto.getProto(page, c.options.bind);
						var nfieldData = controller.getValue(c.options.bind, null, []);
						var nv = $proto.proto2Instance(cp);
						layout = c.options.$article;
						ooptions = {
							actions: {
								save_detail: function() {
									var self = this;
									if (self.pageOptions && self.pageOptions.info) {
										self.parent.setNeedRefresh();
										var fieldData = self.parent.getValue(self.pageOptions.info.bind, null, []);
										var dd = self.getValue();
										fieldData.push(dd);
										self.parent.setData(self.pageOptions.info.bind, fieldData);
										self.parent.notifyChange();
									}
									$.smobile.doBack(self);
								},
								cancel_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								}

							}
						};
						ui = that.detailUiData(controller, cp, nv, layout, ooptions);
						ui.uiData.options = {
							info: {
								index: -1,
								bind: c.options.bind
							}

						};
						that.createDetail(ui.uiData, nv, controller);
					}
				}
			});
			// Refresh table - Adjust reflow mode
			_controls.types._table_refresh($c, false);
		}
	};

})(jQuery);