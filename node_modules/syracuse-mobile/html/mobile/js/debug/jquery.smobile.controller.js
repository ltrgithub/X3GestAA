"use strict";
(function($) {
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	var $smobile = $.smobile || {};

	/**
	 * @constructor
	 */
	var Controller = function($page, options) {
		var self = this;
		self.$page = $page;
		self.page = $page[0];
		if (options.id)
			options.id = options.id.replace(/\./g, "_").replace(/\$/g, "_");
		var old = $.jqmData(self.page, "controller");
		if (old)
			old.remove();
		$.jqmData(self.page, "controller", this);
		self.options = options;
		self.controls = {};
		self.extraData = {};
		self.activeButtons = {};
		return self.init();
	};
	Controller.prototype = {
		defaults: {
			id: "empty"
		},
		init: function() {
			var self = this;
			self.config = $.extend({}, self.defaults, self.options);
			self.prefix = self.config.id + "_";
			self.prefix = 'F' + $helpers.incId() + "_";
			self.ui = self.config.ui;
			self.errors = [];
			self.detData = {};
			self.detPrefix = '';
			return this;
		},
		exprData: function(propData) {
			var self = this;
			var res = $proto.exprData();
			var cc = self;
			if (propData) {
				if (Array.isArray(propData)) {
					propData.forEach(function(value) {
						if (value) {
							res.push(value);
						}
					});
				} else {
					res.push(propData);
				}
			}
			while (true) {
				res.push(cc.data);
				if (cc.parent && cc.$bind)
					cc = cc.parent;
				else
					break;
			}
			return res;

		},
		clearErrors: function() {
			this.errors.length = 0;
		},
		hasErrors: function() {
			return this.errors.length > 0;
		},
		pushError: function(error) {
			this.errors.push(error);
		},
		getPageData: function() {
			var self = this;
			if (self.detailpagedata)
				return self.detailpagedata;
			if (!self.page)
				return null;
			if (!$sdata.config || !$sdata.config.pages || !$sdata.config.pages[self.page])
				return null;
			var data = $sdata.config.pages[self.page];
			return data;
		},
		// #2579 - Store active element - o.target: jqm elmt - o.klass:class to
		// restore if any - o.restoreShow:restore the class on page Show
		// Used for navBar which remove activeButon on pageHide - Used to store
		// active line in list->Detail
		activeBtnAdd: function(ctrlId, o) {
			this.activeBtnRemove(ctrlId);
			if (o && ctrlId) {
				this.activeButtons[ctrlId] = o;
			}
		},
		activeBtnRemove: function(ctrlId) {
			if (ctrlId) {
				var x = this.activeButtons[ctrlId];
				if (x) {
					if (x.klass && x.target.is('.' + x.klass)) {
						// Remove old active
						x.target.removeClass(x.klass);
					}
					delete this.activeButtons[ctrlId];
				}
			}
		},
		// Remove all active lines
		activeLineRemove: function() {
			var self = this;
			Object.keys(self.activeButtons).forEach(function(key) {
				var x = self.activeButtons[key];
				// Todo - Change active by activeLine
				if (x && x.klass == "active") {
					self.activeBtnRemove(key);
				}
			});
		},
		// #2579
		activeBtnsRestore: function() {
			var self = this;
			for (var p in self.activeButtons) {
				var x = self.activeButtons[p];
				// restoreShow->restore the class on pageShow (navBar widget)
				if (x && x.klass && x.target && x.target.length != 0) {
					if (x.restoreShow) {
						// Restore class on page show
						x.target.addClass(x.klass);
					} else if (x.restoreTimeout > 0) {
						// Remove class on page show after a delay
						window.setTimeout(function() {
							self.activeBtnRemove(p);
						}, x.restoreTimeout);
					}
				}
			}
		},
		getSortFields: function() {
			var self = this;
			if (!self.page)
				return null;
			var page = self.page + "";
			if ((page.indexOf(".$query") > 0) || (page.indexOf(".$lookup") > 0) || (page.indexOf(".$select") > 0)) {
				var pd = self.getPageData(),
					res = [];
				if (!pd.$prototype || !pd.$prototype.$properties)
					return;
				var proto = pd.$prototype.$properties.$resources.$item;

				Object
					.keys(proto.$properties)
					.forEach(
						function(name) {
							var prop = proto.$properties[name],
								oprop = prop;
							if (prop.$isHidden)
								return;
							if (prop.$capabilities && (prop.$capabilities
								.indexOf('sort') >= 0)) {
								var cn = name;
								if (prop.$type === "application/x-reference") {
									var cn = prop.$item.$rvalue;
									if (!cn)
										return;
									if (cn != name) {
										prop = proto.$properties[cn];
										if (res.filter(function(elem) {
											if (cn === elem.value)
												return cn;
										}).length)
											return;
									}
								}
								res.push({
									value: cn,
									title: $proto.parseExpression(
										oprop.$shortTitle || oprop.$title, {
											data: null,
											$prototype: proto
										}, "$title"),
									type: oprop.$type
								});
							}
						});
				if (res.length)
					return res;

			};
			return null;
		},
		getFilterFields: function(withDetails) {
			var self = this;
			if (!self.page)
				return null;
			var page = self.page + "";
			if ((page.indexOf(".$query") > 0) || (page.indexOf(".$lookup") > 0) || (page.indexOf(".$select") > 0)) {
				var pd = self.getPageData(),
					res = [];
				if (!pd.$prototype || !pd.$prototype.$properties)
					return;
				var proto = pd.$prototype.$properties.$resources.$item;
				Object
					.keys(proto.$properties)
					.forEach(
						function(name) {
							var prop = proto.$properties[name];
							if (prop.$isHidden || prop.$isExcluded)
								return;
							var tt = prop.$type;
							var fv = name;
							if (prop.$capabilities && (prop.$capabilities.indexOf('filter') >= 0)) {
								if (withDetails) {
									res.push({
										value: fv,
										title: $proto.parseExpression(
											prop.$shortTitle || prop.$title, {
												data: null,
												$prototype: proto
											}, "$title"),
										type: tt
									});
								} else {
									res.push({
										value: fv,
										type: tt
									});
								}
							}
						});
				if (res.length)
					return res;

			};
			return null;
		},

		afterChangeHnd: function(c) {
			var self = this,
				f;
			if (c.options && c.options.action && self["action" + c.options.action]) {
				f = self["action" + c.options.action];
				return f.bind(self);
			}
			return null;
		},
		checkData: function() {
			var self = this;
			var $firstErr;
			self.clearErrors();
			Object.keys(self.controls).forEach(function(name) {
				var control = self.controls[name];
				var f = $smobile.controls[control.uiClass].checkValue;
				var $c = $('#' + control.id);
				if (f && $c) {
					var $err = $.smobile.ui.updateError(self, $c, control.id, f.apply(self, [$c, control]));
					if (!$firstErr) {
						$firstErr = $err;
					}
				}
			});
			if (self.hasErrors()) {
				self.errorInView($firstErr);
				return false;
			}
			return true;

		},
		errorInView: function($err) {
			if ($err && $err.length) {
				$smobile.scrollIntoView($err);
			}
		},
		checkChange: function(cid, value, next, cp) {
			var self = this,
				oldValue;
			var ctrl = self.controls[cid];
			if (ctrl && ctrl.bind) {
				var dd = self.getValue();
				var isLookup = ctrl.options && ctrl.options.$lookup;
				oldValue = self.getValue(ctrl.bind, null, "");
				if (isLookup) {
					if ($proto.useUuid(cp)) {
						dd[ctrl.bind] = value == null ? null : {
							$value: value
						};
					} else if (cp.$rvalue) {
						// Issue #2298 - cp.$rvalue contains the reference field
						// who contains the value (see X3 lookup fields)
						dd[cp.$rvalue] = value;
					}
					self.notifyChange();
					if (next)
						return next(value);
					return;
				} else if (oldValue != value) {
					self.setData(ctrl.bind, value);
					self.notifyChange();
				}
				if (next)
					return next(value);
			}
			if (next)
				return next(value);

		},
		editActivity: function() {
			//
			var self = this;
			return (self.options && self.options.url && (self.options.url.entity === $proto.sdataKey.workingCopies));
		},
		draftId: function() {
			var self = this;
			return self.options.url.id;
		},
		// notifyChange acces local db -> if a proccess uses db after notify we coudl have a confilc in db access
		// Use cb in that case
		notifyChange: function(cb) {
			var self = this;
			if (self.editActivity()) {
				if (self.parent) {
					// don't propagate to parent
					// self.parent.notifyChange();
				} else {
					$sdata.updateDraft(self.draftId(), self.getValue(), function(data, event) {
						if (event && event.target) {
							var e = event.target.error;
							if (data == null && e) {
								$helpers.pushException({
									message: "updateDraft error",
									stackTrace: (e.name ? e.name + "\n" : "") + e.message
								});
							}
						}
					});
				}
			}
		},
		getDiagnoses: function(bind) {
			var cd = this.getValue();

			if (!cd)
				return null;
			cd = cd.$properties || cd.$;
			if (!cd)
				return null;
			cd = cd[bind];
			if (!cd)
				return null;
			cd = cd.$diagnoses;
			if (!cd)
				return null;
			var res = [];
			cd.forEach(function(diag) {
				if (diag.severity === "error") {
					if (res.indexOf(diag.$message || diag.message)) {
						res.push(diag.$message || diag.message);
					}
				}
			});
			return res.length ? res : null;

		},
		getValue: function(bind, data, defValue) {
			var name, cd;
			if (data) {
				cd = data;
			} else {
				if (this.detPrefix)
					cd = this.detData[this.detPrefix];
				else
					cd = this.data;
			}
			if (bind) {
				var values = bind.split('.');
				while (values.length) {
					if (!cd)
						break;
					name = values.shift();
					cd = cd[name];
				}
			}
			if (defValue) {
				if (cd == null)
					cd = defValue;
			}
			return cd;
		},
		getProtoDataValue: function(bind, data, defValue) {
			var cd = this.getValue("", data),
				name;
			if (cd)
				cd = cd.$properties;
			var values = bind.split('.');
			while (values.length) {
				if (!cd)
					break;
				name = values.shift();
				cd = cd[name];
			}
			if (cd == null)
				cd = defValue;
			return cd;
		},
		allData: function(value) {
			var controller = this;
			while (controller.parent)
				controller = controller.parent;
			if (value) {
				controller.setData('', value);
			} else
				return controller.getCurrentData();
		},
		// Check if parent is in Edit mode -> Send current edit data
		getParentEditData: function() {
			var controller = this;
			while (controller.parent)
				controller = controller.parent;
			if (!controller.editActivity())
				return null;
			return controller.getCurrentData();

		},
		getCurrentData: function() {
			return this.getValue();
		},
		setData: function(bind, value) {
			if (bind) {
				var cd = this.getValue();
				var values = bind.split('.');
				for (var i = 0, len = values.length - 1; i < len; i++) {
					var nv = cd[values[i]];
					if (!nv) {
						nv = {};
						cd[values[i]] = nv;
					};
					cd = nv;
				}
				cd[values[values.length - 1]] = value;
			} else {
				if (this.detPrefix)
					this.detData[this.detPrefix] = value;
				else
					this.data = value;
			}
		},
		getsDataList: function() {
			var self = this;
			if (!self._$sdataList) {
				self._$sdataList = $('#' + self.controlByClass('SDataList').id);
			}
			return self._$sdataList;
		},
		getHeaderTab: function() {
			var self = this;
			if (!self._$headerTab) {
				self._$headerTab = $("#" + self.prefix + "headerTab");
			}
			return self._$headerTab;
		},
		getSearchForm: function() {
			if (!self._$searchForm) {
				self._$searchForm = $('#' + this.getsDataList().attr('id') + '_search_form');
			}
			return self._$searchForm;
		},
		actioncancel: function(options) {
			var self = this;
			if (self.editActivity()) {
				var localUrl = self.data.$localUrl;
				if (localUrl == null || localUrl.length == 0) {
					// NO local Data -> Back
					options.success();
					return;
				}
				// Read local data
				$sdata.getSyncData(function(res) {
					// If data actually exist ask user to keep or not the draft data
					if (res) {
						var goToDetail = function(msg) {
							// Delete the draft associated to edit mode
							$sdata.deleteDraft(self.draftId(), function() {
								$.smobile.removeAllPages();
								if (msg) {
									$helpers.pushInfoMessage(msg);
								}
								$helpers.historyBack(function(url) {
									// Find details or query page in history depending on the page from where edit/create mode has been activated
									return url && (url.indexOf("details") > 0 || url.indexOf("query") > 0);
								}, true);
							});
						};
						var locale = $helpers.locale();
						var opts = {
							text1: locale.dlog1,
							text2: locale.dlog2,
							yesCb: function() {
								// SAve current draft data
								$sdata.saveDraft(self.draftId(), self.getValue(), function(result) {
									goToDetail($helpers.locale().saveasdraft);
								});
							},
							noCb: function() {
								// Delete local data -> No more draft mode
								$.sdata.delData(localUrl, function() {
									goToDetail(null);
								});
							},
							cancelCb: function() {
								// Don't delete the draft associated to edit mode
								// Nothing - Just to enable cancel
							}
						};
						$helpers.confirmDlog.call(self, opts);
					} else {
						// Delete the draft associated to edit mode
						$sdata.deleteDraft(self.draftId(), function() {
							options.success();
						});
					}
				}, localUrl);
			} else if (options.success) {
				options.success();
			}
		},
		actionlanguage: function(options) {
			if (!$helpers.online()) {
				$helpers.pushInfoMessage($helpers.locale().changelangonline);
				$.smobile.changePage("#settings", {
					allowSamePageTransition: true,
					reverse: true
				});
			} else {
				$.smobile.changePage("#language", {
					allowSamePageTransition: true,
					reverse: true
				});
			}
		},
		actionlogout: function(options) {
			var self = this;
			var loc = window.location;
			var host = "";
			host += loc.protocol + "//" + loc.hostname;
			if (loc.port)
				host += ":" + loc.port;
			var url = host + "/logout";
			$sdata.post(url, {}, function(data) {
				if (data) {
					$.smobile.changePage("#logout", {
						allowSamePageTransition: true,
						reverse: true
					});
				} else {
					window.location.reload();
				}
			});
		},
		actiontesterrors: function(options) {
			var self = this,
				stack = "";
			try {
				throw (new Error("message with stack"));
			} catch (ex) {
				stack = ex.stack;
			}
			$helpers.pushDiagnoses({
				"$diagnoses": [{
					"$severity": "fatal",
					"$message": "It's the Fatal message",
					"$stackTrace": stack
				}, {
					"$severity": "error",
					"$message": "It's the Error message",
					"$stackTrace": stack
				}, {
					"$severity": "warning",
					"$message": "It's the Warning message",
					"$stackTrace": stack
				}, {
					"$severity": "info",
					"$message": "It's the Info message",
					"$stackTrace": stack
				}, {
					"$severity": "success",
					"$message": "It's the Success message",
					"$stackTrace": stack
				}]
			});
			/*
			 * var msgs = $helpers.allMessages(); $smobile.openErrorDlg(self);
			 */
			$smobile.goHome();
			// Mandatory - enable the controller
			if (options.success)
				options.success(null, false, true);
		},
		actionsave: function(options) {
			var self = this;
			// Check data according field's properties described in proptotype
			// -> Each control has a method checkValue that check and display
			// error if any
			if (!self.checkData()) {
				// If error stay on current page
				return options.success(null, true);
			}
			$helpers.clearErrors();
			if (self.editActivity()) {
				// EDIT/CREATE Mode
				// Override standard _sendLocalData success callback to deal with field error
				// sDataUrl is the sdataUrl (ID for local db) of current page data returned by saveDraft - Used to reload page if fields errors
				var after = function(cbOpts, errors, sDataUrl) {
					if ($helpers.hasErrors()) {
						// #3050 Mobile - Edit mode - Action (Save) do not works if error dialog has been opend in a previous try
						// We force to display errors in top message even if no fields errors
						// -> Error dialog makes the Save button fail on second try due to back button which do not reload the page
						$helpers.setDisplayErrorAsMessage();
					}
					if (sDataUrl && $helpers.hasMessages() && $helpers.displayErrorAsMessage()) {
						// #2887 - We can have a field error + a generale diagnose 'Save action failed'
						// -> If fields error we display general error in the top of the current page and don't go to draft page or error dialog
						// Reload edited page to refresh error messages by using mobile client workingcopies standard url
						// !! this version keep the draft which will be removed after a success savec action
						// This is difficult to deal with back partcularly if there is dialog/page displayed before going back to detail (confirm or lookup to select a value)
						// Tests I've done
						//  - Query -> Detail -> Edit + cancel or validate
						//  ----> Ok we go back to the detail and then to query
						//  - Query -> Detail -> Edit -> input a bad value + validate  multiple time -> candel or validate
						//  ----> Ok we go back to the detail and then to query
						//  - Idem previous case but with click on lookup to select a value
						//  ----> Ok we go back to the detail and then to query		
						// Change page is the best way to reload the current page compared to window.reload, window.back or refreshing the page
						// Refresh do not work because the draft associated to the edit form is created on the reply of GET method that read data
						// --> If we call doRefresh nessages are displayed but there's no draft associated -> save failed
						var url = $.smobile.ui.urlHref($sdata.editUrl(sDataUrl), self);
						// Change the page WITHOUT MODIFYING HISTORY to keep back navigation edit -> Detail -> query
						$.smobile.changePage(url, {
							changeHash: true
						});
						return;
					} else {
						if (!$helpers.online()) {
							// In online mode the success message is returned by server
							$helpers.pushInfoMessage($helpers.locale().saveasdraft);
						}
						//Issue #2811 - Do Back do not work every time
						// -> This way works (see test above) by finding the first detail page in history.stack
						// -> Go to detail if page found
						var queryFound = false;
						if ($.helpers.historyBack(function(url) {
							// Find first detail page in history and goto to this page if found
							var detail = url.indexOf("details") > 0;
							if (!detail) return false;
							// Details page after query are ignored
							queryFound = queryFound || url.indexOf("query") > 0;
							if (queryFound) return false;
							if (cbOpts && cbOpts._cburl) {
								// We check if deatil page data is the same as _cburl - Issue #3136 
								var dataUrl = $.smobile.parsePageURI(url).url;
								return dataUrl == cbOpts._cburl;
							}
							return true;
						}, false)) {
							// Stop processing 
							return;
						}
						// If detail page not found in history we've to go to this page
						if ((cbOpts && cbOpts._cburl) || sDataUrl) {
							// If create comes from query we force display detail
							var url;
							if (cbOpts && cbOpts._cburl) {
								url = $.smobile.ui.urlHref(cbOpts._cburl, self);
							} else if (sDataUrl) {
								url = $.smobile.ui.urlHref($sdata.detailUrl(sDataUrl), self);
							}
							$.smobile.changePage(url, {
								changeHash: false
							});
						} else {
							$.smobile.doBack();
						}
						return;
					}
				};
				// Save current draft / create a sData record in local DB /
				// Delete current draft if no error
				return $sdata
					.saveDraft(
						self.draftId(),
						self.getValue(),
						function(result) {
							//		self.removeCachePages();
							if (result && result.status == 400) {
								// Issue #3029 - 400 means error in data - We display a top message
								self.doRefresh(true);
								self.disabled = false;
								return;
							}
							if ($helpers.hasErrors()) {
								return options.success();
							}
							var sDataUrl = result && result.sDataUrl ? result.sDataUrl : null;
							if (result && result.status == 404) {
								$helpers.pushInfoMessage($helpers.locale().unmodified);
								after();
								return;
							}
							// Send sdata http request
							// --> sDataUrl tells _sendLocalData to send
							// only this data (not sent pending/draft data)
							// --> We send only current data to
							// catch/display fields error (see displayErrorAsMessage() below)
							// True -> Call after call back in any cases
							self._sendLocalData(after, sDataUrl, true);
						});
			} else {
				options.success();
			}
		},
		actionback: function(options) {
			if (options.success)
				options.success(null, false, false);
		},
		setNeedRefresh: function(onlyParent) {
			var self = this;
			var ctrl = self;
			if (onlyParent) {
				if (ctrl && ctrl.parent)
					ctrl.parent.needRefresh = true;
				return;
			}
			while (ctrl) {
				ctrl.needRefresh = true;
				ctrl = ctrl.parent;
			}
		},
		doMessagesRefresh: function(clearErrors) {
			var controller = this;
			controller.refreshErrorMessage();
			if (clearErrors) {
				$helpers.clearErrors();
			}
		},
		doRefresh: function(clearErrors) {
			var self = this;
			var $firstErr;
			Object.keys(self.controls).forEach(function(cn) {
				var c = self.controls[cn];
				if (c.uiClass && c.id) {
					var f = ($.smobile.controls[c.uiClass] ? $.smobile.controls[c.uiClass].refresh : null);
					var $c = $('#' + c.id);
					if (f && $c) {
						var $err = $.smobile.ui.updateError(self, $c, c.id, f(self, c.options, $c, c.id));
						if (!$firstErr) {
							$firstErr = $err;
						}
					}
				}
			});
			if ($firstErr) self.errorInView($firstErr);
			if (clearErrors) {
				$helpers.clearErrors();
			}
			self._refreshHeader();
		},
		_refreshHeader: function() {
			var controller = this;
			if (controller.extraData.sortorderBtnId) {
				// Refresh sort icon
				var $c = $("#" + controller.extraData.sortorderBtnId);
				var ordInfo = controller.extraData.sortStatus;
				if (ordInfo != null && ordInfo.asc && ordInfo.asc.length > 0) {
					var $icon = $c.find("span.ui-icon");
					$icon.removeClass("ui-icon-s-sort-asc ui-icon-s-sort-desc");
					$icon.addClass("ui-icon-s-sort-" + ordInfo.asc);
					$c.removeClass('s-m-hidden');
				} else {
					$c.addClass('s-m-hidden');
				}
			}
		},
		showHideFav: function($c, showOnlyFav) {
			var self = this;
			if (!self.extraData.favoriteBtnId)
				return;
			var $c = $c || $("#" + self.extraData.favoriteBtnId);
			if (showOnlyFav || (self.extraData.bookmarks && self.extraData.bookmarks.length > 0)) {
				$c.removeClass("s-m-hidden");
			} else {
				$c.addClass("s-m-hidden");
			}
		},
		changeFav: function(fav) {
			var self = this;
			var oldc = "ui-icon-s-fav-on",
				ncc = "ui-icon-s-fav-off";
			if (fav) {
				ncc = oldc;
				oldc = "ui-icon-s-fav-off";
			}
			if (self.extraData.favoriteBtnId) {
				var $c = $("#" + self.extraData.favoriteBtnId);
				var icons = $c.find('.' + oldc);
				self.showHideFav($c, fav);
				icons.addClass(ncc).removeClass(oldc);
			}

		},
		actionsyncdrafts: function(options) {
			// get sync count
			var controller = this;
			$sdata.getSyncCount(function(count) {
				if (!count) {
					options.success(null, false, true);
				}
				if (!count) {
					$helpers.pushInfoMessage($helpers.locale().ui.nodrafts);
					controller.doRefresh();
					if (options.success)
						options.success(null, false, true);
					return;
				}
				if (options.success)
					options.success(null, false, true);
				window.location.hash = "#" + $smobile.PAGES.send.id + $smobile.hash_sep + $helpers.encodeURIComponent(controller.applicationId);;
			});
		},
		actionsortorder: function(options) {
			$.smobile.openSortDlg(this);
			if (options.success)
				options.success(null, false, true);
		},
		actionfavorite: function(options) {
			var self = this;
			var rep = self.ui;
			var fav = $sdata.favorite(rep);
			fav = !fav;
			$sdata.favorite(rep, fav);
			var _after = function() {
				self.changeFav(fav);
				if (options.success)
					options.success(null, false, true);
			};
			var purl = self.config.url;
			self.disabled = false;
			$smobile.controls.SDataList._execUrl(purl, self, _after);
		},

		actionnext: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after = function(s) {
				if (options.success)
					options.success(null, false, true);
			};
			if (ccd && ccd.$links && ccd.$links.$next) {
				var url = $proto.parseExpression(ccd.$links.$next.$url, {
					data: null,
					$prototype: $proto.getProto(self.getPageData())
				}, "$url");
				if (url) {
					if (self.disabled)
						return _after();
					self.disabled = true;
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					$sdata
						.execURL(
							url, {
								$uiRequest: true,
								$loadFav: self.canLoadFav(),
								error: function(data) {
									self.disabled = false;
									$.mobile.loading('hide');
									_after();
								},
								success: function(cd, headers) {
									self.disabled = false;
									self.extraData.bookmarks = headers ? headers.favorites : null;
									$.mobile.loading('hide');
									if (cd) {
										// refresh sdatalist
										self.setData('', cd);
										self.doRefresh();
									}
									_after();

								}
							});
				} else
					_after();
			} else
				_after();
		},
		actionprevious: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after = function() {
				if (options.success)
					options.success(null, false, true);
			};
			if (ccd && ccd.$links && ccd.$links.$previous) {
				var url = $proto.parseExpression(ccd.$links.$previous.$url, {
					data: null,
					$prototype: $proto.getProto(self.getPageData())
				}, "$url");
				if (url) {
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					if (self.disabled)
						return _after();
					self.disabled = true;
					$sdata
						.execURL(
							url, {
								$uiRequest: true,
								$loadFav: self.canLoadFav(),
								error: function(data) {
									self.disabled = false;
									$.mobile.loading('hide');
									_after();
								},
								success: function(cd, headers) {
									self.extraData.bookmarks = headers ? headers.favorites : null;
									self.disabled = false;
									$.mobile.loading('hide');
									if (cd) {
										// refresh sdatalist
										self.setData('', cd);
										self.doRefresh();
									}
									_after();
								}
							});
				} else
					_after();
			} else
				_after();
		},
		// Dom elmt that contrains error view - See data-role=errorview in htlm page
		_getErrorView: function() {
			if (!this._$errorView) {
				this._$errorView = this.$page.find('div[data-role="errorview"]').children("ul");
			}
			return this._$errorView;
		},
		refreshErrorMessage: function() {
			var controller = this;
			if (controller.controlByClass("MsgView")) {
				$.smobile.controls["MsgView"].refresh(controller);
			}
		},
		_clearErrorMessage: function() {
			this._getErrorView().empty();
		},
		_clearErrors: function() {
			// FDB - clear erros and messages
			$helpers.clearErrors();
			this._clearErrorMessage();
		},
		actionservice: function(options, params) {
			return this._actionservice(options, params, true);
		},
		actionlink: function(options, params) {
			return this._actionservice(options, params, false);
		},
		_actionservice: function(options, params, post) {
			var controller = this;
			if (params && params.id && controller.alinks) {
				// Issue #2372
				params = $.extend(true, {}, controller.alinks[params.id]);
			} else {
				params = null;
			}
			var _after = function(error) {
				if (error)
					controller.doRefresh();
				if (options.success) {
					options.success(null, error, true);
				}
			};
			if (!params)
				return _after(false);
			if (!$helpers.online())
				return _after(false);
			var page = controller.getPageData();
			if (!params.url)
				return _after();
			var paramData = null;
			if (params.$parameters) {
				paramData = {};
				Object.keys(params.$parameters).forEach(
					function(pn) {
						paramData[pn] = $proto.parseExpression(
							params.$parameters[pn], {
								data: controller.exprData(),
								$prototype: $proto.getProto(page,
									params.bind)
							}, "$parameters");
					});
			}
			var url = $proto.parseExpression(params.url, {
				data: controller.exprData(paramData),
				$prototype: $proto.getProto(page, params.bind)
			}, "$url");
			controller._clearErrors();
			if (post) {
				$sdata.authenticate(function(ad, error, offline) {
					if (error || offline)
						_after(error);
					var postData = controller.getParentEditData();
					var edit = postData != null;
					if (!edit) {
						postData = {};
						if (params.$parameters) {
							postData = paramData;
						}
					}
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					$sdata.post(url, postData, function(data) {
						$.mobile.loading('hide');
						var cd = data;
						if (edit) {
							$helpers.clearErrors();
							if (cd) {
								controller.allData(cd);
								controller.doRefresh();
								controller.notifyChange();
							} else
								return _after(true);
						} else {
							controller.removeCachePages();
							if (!cd)
								return _after(true);
							// FDB - Display all Errors/Warning/info
							if ($helpers.hasMessages())
								controller.doRefresh();
						}
						_after();
					});
				});

			} else {
				if (options.success) {
					options.success({
						url: url
					}, false, true);
				}

			}
		},

		// Install an application from applications view page
		installApplication: function(options, data) {
			var hasDatasets = false;
			if (!data) {
				if (options.fail)
					return options.fail();
				return;
			}
			this._clearErrors();
			if (data.datasets) {
				var i = data.datasets.length;
				while (i--) {
					hasDatasets = !(data.datasets[i].selected === false);
					if (hasDatasets)
						break;
				}
			}
			if (!hasDatasets) {
				return options.fail();
			}
			var self = this;
			$.smobile.load(data, function(index, count, msg) {
				if ((index == 0) && count) {
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.installing
					});
				} else if (index === count) {
					$.mobile.loading('hide');
				}
			}, function(res) {
				$.mobile.loading('hide');
				if ($helpers.hasErrors()) {
					if (options.fail)
						options.fail();
					$.smobile.showErrors(self);
				} else if (options.success)
					options.success();
			});
		},
		removeApplication: function(options, id) {
			$helpers.clearErrors();
			var self = this;
			$sdata.removeFromDB(id, function() {
				if ($helpers.hasErrors()) {
					$.smobile.showErrors(self);

				} else {
					window.localStorage.setItem(id, "");
					if (options.success)
						options.success();
				}
			});
		},
		// sDataUrl=null -> Send all pending draft data Else send one data identified by sDataUrl
		// noCheckErrs = true -> bypass error checking
		_sendLocalData: function(after, sDataUrl, noCheckErrs) {
			var self = this;
			if (!$helpers.AutomaticSendBatch() || !$helpers.online()) {
				if (after)
					after();
				return;
			}
			$sdata.getSyncData(function(data, error) {
				if (!error && data) {
					var opts = {
						fromPage: true,
						// editActivity is used to deal with fields errors when
						// client receives data from server
						// -> field Errors (diagnoses in $properties) don't
						// generate global errors if editActivity
						editActivity: self.editActivity() && sDataUrl != null,
						// Called after all resources have been sent
						// cbOpts : callback otions
						// --> cbOpts._cburl - Call back url
						// --> execBatch can return a callback url if succeeded
						// - Ex create action diplays detail page if succeeded
						success: function(cbOpts) {
							if ($helpers.hasErrors() && noCheckErrs !== true) {
								// Display draft if drafts tosend - Some error
								// do not create draft - 403 on DELETE
								$sdata.getSyncCount(function(count) {
									if (count > 0) {
										// Display Draft (synchro) page
										$.smobile.showSends(self);
									} else {
										// Call std callback
										if (after)
											after(cbOpts, $helpers.hasErrors(),
												sDataUrl);
									}
								});
								return;
							}
							// Call std callback
							if (after)
								after(cbOpts, $helpers.hasErrors(), sDataUrl);
						}
					};
					return $sdata.execBatch(data, opts);
				} else if (after)
					after();
			}, sDataUrl);
		},
		removeCachePages: function() {
			var cont = this;
			var exclude = [];
			while (true) {
				if (cont && cont.config && cont.config.page && cont.config.page.pageId)
					exclude.push(cont.config.page.pageId);
				if (cont.parent && cont.$bind)
					cont = cont.parent;
				else
					break;
			}

			$.smobile.removeAllPages(exclude);
		},
		actionreinstall: function(options) {
			var self = this;
			var _resync = $.smobile.load;
			var opts = {
				success: function() {
					if ($helpers.hasErrors()) {
						if (options.success)
							options.success(null, true, true);
						$.smobile.showErrors(self);
						return;
					}
					if (options.success)
						options.success(null, false, true);
					var appid = self.applicationId;
					var domid = self.currentDoomId();
					if (domid === appid)
						return window.location.reload();
					else
						$.smobile.removeAllPages([self.currentDoomId()]);
					return $smobile.goHome(null, appid);
				}
			};

			$sdata.getSyncCount(function(count) {
				if (!count) {
					return $sdata.execBatch(null, opts, _resync);
				}
				$helpers.pushInfoMessage($helpers.locale().ui.rmvdrafts);
				self.doRefresh();
				if (options.success)
					options.success(null, false, true);
			});
		},
		currentDoomId: function() {
			var self = this;
			if (self.config.page.id = $smobile.PAGES.home.id)
				return self.applicationId;
			return self.config.page.pageId;
		},
		clearFilter: function() {
			var self = this;
			var repdata = $sdata.loadRepData(this.ui);
			if (repdata) {
				repdata.filter = null;
				$sdata.saveRepData(this.ui, repdata);
			}
		},
		saveFilter: function(value) {
			var self = this;
			var repdata = $sdata.loadRepData(this.ui) || {};
			repdata.filter = value;
			$sdata.saveRepData(this.ui, repdata);
		},
		actiondelete: function(options) {
			var self = this;
			var page = self.getPageData();
			var cp = $proto.getProto(page);
			if (cp && cp.$links && cp.$links.$delete && cp.$links.$delete.$confirm) {
				var conf = $proto.parseExpression(cp.$links.$delete.$confirm, {
					data: self.exprData(null),
					$prototype: cp
				}, "$confirm");
				if (conf && !window.confirm(conf)) {
					if (options.success)
						options.success(null, false, true);
					return;
				}
			}

			$helpers.clearErrors();
			if (self.editActivity()) {
				return $sdata.deleteDataByDraft(self.draftId(), function(
					sdataUrl) {
					if ($helpers.hasErrors()) {
						return options.success(null, true);
					}
					var after = function(cbOpts, errors, sDataurl) {
						$.smobile.goHome(self);
					};
					self._sendLocalData(after, sdataUrl, false);
				});
			} else {
				if (self.config && self.config.url && self.config.url.origUri) {
					return $sdata.deleteDataByUrl(self.config.url.origUri, self
						.getValue(), function(sdataUrl) {
							if ($helpers.hasErrors()) {
								return options.success(null, true);
							}
							var after = function(cbOpts, errors, sDataurl) {
								self.removeCachePages();
								self.setNeedRefresh(true);
								$.mobile.back();
							};
							self._sendLocalData(after, null, false);
						});
				}
			}
			if (options.success)
				options.success();
		},
		// Favorites can be disabled by authoring
		canLoadFav: function() {
			var res = true,
				controller = this;
			var pd = controller.getPageData();
			if (pd && pd.$article && (pd.$article.$favorites === false))
				res = false;
			return res;
		},

		refreshPanel: function(left) {
			var self = this,
				pl;
			if (left) {
				var pl = self.controls[self.prefix + "left_panel"];
				if (pl) {
					if (pl && pl.options.syncHandler)
						pl.options.syncHandler.bind(self)(pl, left);
				}
			} else {
				var pl = self.controls[self.prefix + "right_panel"];
				if (pl) {
					if (pl && pl.options.syncHandler)
						pl.options.syncHandler.bind(self)(pl, left);
				}
			}

		},
		remove: function() {
			var self = this;
			if (self.page) $.jqmRemoveData(self.page, "controller");
			self.$page = null;
			self.page = null;
			if (self.pageInfo)
				self.pageInfo.page = null;
			if (self.options && self.options.page)
				self.options.page = null;
			if (self.parent) {
				self.options = null;
				self.parent = null;
				self.data = null;
			}
			self.extraData = null;
			self.child = null;
			self.detailpagedata = null;
			self.detData = null;
			if (self.controls) {
				Object.keys(self.controls).forEach(function(cn) {
					var c = self.controls[cn];
					if (c.options && c.options.cacheData) {
						$helpers.cleanUp(c.options.cacheData, true);
						c.options.cacheData = null;
					}
				});
			}
			if (self.cleanupHnd)
				self.cleanupHnd(self);
			$helpers.cleanUp(self);
		},
		registerControl: function(data) {
			var self = this;
			self.controls[data.id] = data;
		},
		controlByClass: function(uiClass) {
			var self = this;
			for (var p in self.controls) {
				var o = self.controls[p];
				if (o.uiClass == uiClass)
					return o;
			}
			return null;
		},
		notifyAuthoring: function(event) {
			var self = this;
			switch (event) {
				case "pageload":
					if (self.ui && $sdata.config && $sdata.config.pages[self.ui]) {
						if ($proto.auth.designMode) {
							var info = {
								name: self.ui,
								url: self.config.url
							};
							var design = $sdata.config.pages[self.ui];
							info.$authorUrl = design.$authorUrl;
							info.dataset = self.data;
							info.$prototype = $proto.auth
								.copyProto(design.$prototype);
							design = $proto.getArticle(design);
							var facet = $sdata.representation2facet(self.ui);
							design = $proto.auth.checkDesign(
								$sdata.config.pages[self.ui].$prototype,
								design, {
									design: true,
									list: (facet === "$query") || (facet === "$lookup")
								});
							$proto.auth.notifyParent("pageload", design, info);
						}
					}
					break;
			}
		},
		setHtmlEvents: function() {
			var self = this;
			if (self.layouts) {
				Object.keys(self.layouts).forEach(function(id) {
					var l = self.layouts[id];
					if (l.event) {
						var $l = $('#' + l.id);
						if ($l)
							l.event.apply(self, [$l, id]);
						l.event = null;
					}
				});

			}
			Object.keys(self.controls).forEach(function(id) {
				var c = self.controls[id];
				if (c.noevent)
					return;
				var $c = $('#' + c.id);
				if ($c)
					$smobile.setEvents.apply(self, [$c, c]);
				c.noevent = true;
			});

		},
		bindData: function(cb) {
			var self = this;
			self.setHtmlEvents();
			if (self.asyncs) {
				var i = self.asyncs.length;
				while (i--) {
					self.asyncs[i]();
					self.asyncs[i] = null;
				}
				self.asyncs = null;
			}
			if (cb)
				cb();
		}
	};
	/* 
	 * **************************
	 * MULTISELECTION EXTENSION *
	 * **************************
	 */
	$.extend(Controller.prototype, {
		multiselActStart: function($selectActs, nbSel) {
			var self = this;
			// Processing starts from a clean selected list
			// --> It doesn't start from a processed list beacus cancel returns to unselected mode
			var $lst = self.getsDataList();
			$lst.find("li").each(function(idx) {
				var li = $(this);
				if (li.hasClass("multisel")) {
					// Disable click on lines
					li.addClass("ui-disabled");
				} else {
					// Hide not selected
					li.hide();
				}
			});
			// Remove search form
			self.getSearchForm().hide();
			// Hide actions menu - Show empty title
			var head = self.getHeaderTab();
			head.find(".s-m-header-cell-select").hide();
			// Processin Status
			$lst.addClass("processing");
			// Hide cancel icon
			self.getMultiSwitch().addClass("ui-disabled");
			$.mobile.loading('show', {
				text: $helpers.format($helpers.locale().ui.multiselprocess, [0, nbSel])
			});
			return $lst;
		},
		multiselActStop: function(error) {
			var self = this;
			$.mobile.loading('hide');
			if (error) {
				$helpers.pushException(error);
				self.actionmultiswitch();
				$.smobile.showErrors(self);
				return;
			}
			var $lst = self.getsDataList();
			// Enable 
			self.getMultiSwitch().removeClass("ui-disabled");
			// processed status
			$lst.removeClass("processing").addClass("processed");
			// Display a messages in header - Could be optimized
			var nbok = $lst.find(".multisel.ok").length;
			var nbko = $lst.find(".multisel.ko").length;
			self.getHeaderTab().find(".s-mF-header-cell-ttl").show().html(nbok + " succedeed - " + nbko + " failed");
		},
		multiselActUpdt: function($line, ok, message, nbProcessed, nbSel) {
			var self = this;
			var locale = $helpers.locale();
			var message = message || locale.nomessage;
			// Change background and add message according to status OK/KO
			var msg = $line.addClass(ok ? "ok" : "ko").find("a.ui-link-inherit").append('<div class="s-m-multisel-msg ' + (ok ? "ok" : "ko") + '">' + message + "</div>");
			// Make line visible
			$smobile.scrollIntoView($line);
			$.mobile.loading('show', {
				text: $helpers.format(locale.ui.multiselprocess, [nbProcessed, nbSel])
			});
		},
		getMultiSwitch: function() {
			return this.getHeaderTab().find('a[data-action="multiswitch"]');
		},
		multiSelOn: function() {
			return this.getHeaderTab().hasClass("multisel");
		},
		multiSelProcessed: function() {
			var self = this;
			return self.multiSelOn() && self.getsDataList().hasClass("processed");
		},
		multiSelProcessing: function() {
			var self = this;
			return self.multiSelOn() && self.getsDataList().hasClass("processing");
		},
		multiSelData: function() {
			var self = this;
			var uuids = [];
			if (self.extraData.multiSel) {
				self.extraData.multiSel.forEach(function(e) {
					uuids.push($(e).attr("data-uuid"));
				});
			}
			var res = [];
			if (self.data.$resources) {
				self.data.$resources.forEach(function(d) {
					var idx = uuids.indexOf(d.$uuid);
					if (idx >= 0) {
						res.push({
							data: d,
							$elmt: $(self.extraData.multiSel[idx])
						});
					}
				});
			}
			return res;
		},
		multiSelReset: function() {
			var self = this;
			// We assume 1 list by page
			// remove all css classes uses by multiselection
			var list = self.getsDataList();
			list.removeClass("processing processed");
			list.find("li").show().removeClass("multisel ok ko ui-disabled").find(".s-m-multisel-msg").remove();
			self.extraData.multiSel = null;
			self.multiSelUpdtHead();
			return list;
		},
		multiSelSelectAll: function() {
			var self = this;
			var $list = self.multiSelReset();
			$list.find("li").addClass("multisel").each(function(idx, $elmt) {
				self.multiSelToggle($elmt);
			});
			self.multiSelUpdtHead(true);
		},
		multiSelClick: function(li) {
			if (!li) return;
			var self = this;
			if (self.multiSelProcessing() || self.multiSelProcessed()) return;
			self.multiSelToggle(li);
			self.multiSelUpdtHead();
		},
		// Toggle status line selected/unselected
		multiSelToggle: function(li) {
			if (!li) return;
			if (!li.jquery) li = $(li);
			var self = this;
			// Pop/Push line we have one multiSel array by controler which is reseted when list is refreshed by multiSelReset (case with multiple filters in query)
			var lines = self.extraData.multiSel;
			if (!lines) {
				lines = self.extraData.multiSel = [];
			}
			// We store dom elmt (invariant)
			var i = lines.indexOf(li[0]);
			if (i >= 0) {
				li.removeClass("multisel ok ko");
				li.find(".s-m-multisel-msg").remove();
				lines.splice(i, 1);
			} else {
				li.addClass("multisel");
				lines.push(li[0]);
			}
		},
		multiSelUpdtHead: function(force) {
			var self = this;
			var nbSel = self.extraData.multiSel == null ? 0 : self.extraData.multiSel.length;
			var acts = $("#" + self.prefix + 'multisel-acts');
			// force = true -> force selectmenu if nbSel >1
			if (nbSel <= 1 || force) {
				// Disable/Enable menu actions
				acts.selectmenu(nbSel == 0 ? "disable" : "enable");
			}
			// Update menu unSelectAll/selectAll
			var info = $("#" + self.prefix + 'multisel-select');
			var opt = info.find('option[data-placeholder="true"]');
			opt.html($helpers.format($helpers.locale().ui.multinbsel, [nbSel]));
			info.selectmenu("refresh");
		},
		// Query multiselection - Switch to multilines selection / no selection
		actionmultiswitch: function(options) {
			var self = this;
			var h = self.getHeaderTab();
			var ttl = h.find(".s-m-header-cell-ttl");
			// header class show/hide elements via mobile.css
			h.toggleClass("multisel");
			// Show search form
			self.getSearchForm().show();
			if (self.multiSelOn()) {
				self.multiSelUpdtHead();
				// Remove all active lines
				self.activeLineRemove();
				ttl.hide();
				// Show actions menu
				$("#" + self.prefix + 'multisel-acts').closest(".ui-select").show();
				// Show selectall menu
				$("#" + self.prefix + 'multisel-select').closest(".ui-select").show();
				h.find(".s-m-header-cell-select").show();
			} else {
				// Remove all selected lines
				self.multiSelReset();
				h.find(".s-m-header-cell-select").hide();
				// restore title and force show because it has been change by multiselActStop
				ttl.show().html(self.pgtitle);
			}
			window.scrollTo(0, 0);
			// No Error - No Back - No Data
			if (options && options.success)
				options.success(null, false, true);
		}
	});
	/* 
	 * **************************
	 *         FOOTER           *
	 * **************************
	 */
	$.extend(Controller.prototype, {
		_getFooter: function(create) {
			self = this;
			if (!self._$footer) {
				var foot = self.$page.find('div[data-role="footer"]');
				if (!foot) return null;
				self._$footer = foot.children("div.s-m-footer-tab");
				if (create === true) {
					self._$footer = $('<div class="s-m-footer-tab" id="' + self.prefix + 'footerTab"></div>').appendTo(foot);
				}
			}
			return self._$footer;
		},
		footerAddBtns: function(buttons) {
			var self = this;
			$(self.footerHtmlBtns(buttons)).appendTo(self._getFooter(true));
			buttons.forEach(function(btn) {
				$('#' + btn.linkId).button();
			});
		},
		footerHtmlBtns: function(buttons) {
			var self = this;
			if (!buttons || buttons.length == 0) return '';
			var btnHtml = [];
			buttons.forEach(function(btn) {
				btnHtml.push('<div class="s-m-footer-cell-btn">');
				$.extend(btn.jmdata, {
					"data-iconpos": "left",
					"data-min": true,
					"data-transition": "none",
					"data-action-global": true
				});
				$.smobile._addLink(btnHtml, btn, self, function() {
					btnHtml.push($helpers.htmlEncode(btn.title));
				});
				btnHtml.push('</div>');
				if (btn.handler) {
					var ext = {};
					ext["action" + btn.action] = btn.handler;
					$.extend(Controller.prototype, ext);
					delete btn.handler;
				}
			});
			return btnHtml.join('');
		}
	});
	$.fn.uiController = function(options) {
		new Controller(this, options);
		return this;
	};
})(jQuery);