"use strict";
//
// Filter control
//
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	that.controls = that.controls || {};

	function _filterUi(controller) {
		var res = {
			"$title": $helpers.locale().ui.filter,
			"content": {
				"filter": {
					"uiClass": "SDataFilter",
					"data": {
						"filters": []
					}
				}
			}
		};
		res.roptions = {
			nopanel: true
		};
		res.hbuttons = [{
				title: $helpers.locale().ui.ok_item,
				action: "saveFilter",
				"jmdata": {
					"data-icon": "s-ok",
					"data-transition": "none"
				}
			}, {
				title: $helpers.locale().ui.remove_item,
				action: "clearFilter",
				"jmdata": {
					"data-icon": "s-delete",
					"data-transition": "none"
				}
			}

		];
		res.actions = {
			saveFilter: function(after) {
				var controller = this;
				if (controller && controller.parent) {
					var dd = controller.getValue();
					var pcontroller = controller.parent;
					pcontroller.extraData.filters = dd.filters;
					pcontroller.saveFilter({
						filters: dd.filters
					});
					if (that.controls.SDataList) {
						return that.controls.SDataList.applyFilter(pcontroller, function() {
							$.smobile.doBack(controller);
						}, true);
					}
				}
				$.smobile.doBack(controller);
			},
			clearFilter: function(after) {
				var controller = this;
				if (controller && controller.parent) {
					controller.parent.extraData.filters = null;
					controller.parent.clearFilter();
					if (that.controls.SDataList) {
						return that.controls.SDataList.applyFilter(controller.parent, function() {
							$.smobile.doBack();
						}, true);
					}
				}
				$.smobile.doBack();
			}

		};

		return res;
	};

	function _sortUi(controller, order) {
		var res = {
			"$title": $helpers.locale().ui.sort,
			"content": {
				"sort": {
					"uiClass": "SDataSorter",
					"data": {
						"items": []
					}
				}
			},
			"hbuttons": []
		};
		if (order && (order.asc != null)) {
			res.hbuttons.push({
				title: $helpers.locale().ui.cancel_sort,
				action: "resetSort",
				jmdata: {
					"data-icon": "s-undo",
					"data-transition": "back"
				}
			});

		}
		res.hbuttons.push({
			title: $helpers.locale().ui.validate_item,
			action: "validateSort",
			jmdata: {
				"data-icon": "s-ok",
				"data-transition": "back"
			}

		});
		res.roptions = {
			nopanel: true
		};
		res.actions = {
			validateSort: function(after) {
				that.controls.SDataSorter.validateSort(this);
			},
			resetSort: function(after) {
				that.controls.SDataSorter.resetSort(this);
			}
		};
		return res;
	};

	function _filterOpen(controller, filters) {
		var ui = _filterUi(controller);
		that.createDetail(ui, {
			filters: filters
		}, controller);

	};

	function _sortOpen(controller, sortFields) {
		var order = that.controls.SDataSorter.getOrderBy(controller);
		var ui = _sortUi(controller, order);
		that.createDetail(ui, {
			items: sortFields || controller.getSortFields(),
			order: order
		}, controller);
		return true;
	};
	that.openSortDlg = _sortOpen;
	that.openFilterDlg = _filterOpen;
	//ui data for filter 

	function _getOperators($type) {
		switch ($type) {
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
			case "application/x-decimal":
			case "application/x-quantity": //ok
			case "application/x-real":
			case "application/x-integer":
				return ["none", "gt", "ge", "lt", "le", "eq", "ne"];
				break;
			case "application/x-string":
				return ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like"];
				break;
			case "application/x-reference":
				return ["none", "eq", "ne"];
				break;
			default:
				return ["none", "eq", "ne"];
				break;
		}
	};

	function _type2ops($type) {
		var ops = _getOperators($type);
		if (ops) {
			var res = [];
			var fl = $helpers.locale().filters;
			ops.forEach(function(op) {
				res.push({
					value: op,
					title: fl[op]
				});

			});
			return {
				values: res,
				value: ops[0]
			};
		}
		return null;

	};

	function _filter2css(value) {
		return value;
	}

	that.controls.SDataSorter = {
		getOrderBy: function(queryPageCtrl) {
			var url = queryPageCtrl.options.url;
			var orderBy = url.query.orderBy || "";
			var proto = $sdata.url2proto(url);
			if (!orderBy && proto.$properties.$resources.$item.$defaultOrder) orderBy = proto.$properties.$resources.$item.$defaultOrder;
			if (orderBy) {
				var ob = orderBy.split(',')[0].split(' ');
				orderBy = ob[0];
				var asc = (ob.length > 1) ? ob[1].toLowerCase() : 'asc';
			}
			return {
				orderBy: orderBy,
				asc: asc
			};
		},
		_statusIcon: function(asc, def) {
			return asc == null || asc.length == 0 ? def : 's-sort-' + (asc === 'asc' ? "d" : "u");
		},
		createSDataSorter: function(sortPageCtrl, c, filters) {
			var html = [],
				options = c.data || {}, cd = sortPageCtrl.data;
			cd.items = cd.items || [];
			var ord = sortPageCtrl.sortStatus = cd.order || {};
			html.push('<ul class="s-m-list" data-role="listview" id="' + c.id + '"');
			html.push(' data-inset="true" data-theme="d"');
			html.push('>');
			cd.items.forEach(function(cd) {
				var checked = cd.value == ord.orderBy;
				var icon = that.controls.SDataSorter._statusIcon(checked ? ord.asc : null, 'false');
				html.push('<li id="' + $helpers.uuid() + '" data-icon="');
				html.push(icon);
				html.push('"><a href="#" data-action="');
				html.push(cd.value);
				html.push('">');
				html.push($helpers.htmlEncode(cd.title));
				html.push('</a></li>');
			});
			html.push('</ul>');
			return {
				html: html.join(''),
				bind: " ",
				options: options
			};
		},
		handler: function(c, after) {
			return after(that.controls.SDataSorter.createSDataSorter(this, c));
		},
		refresh: function(controller, options, $c, id) {
			$c.listview("refresh");
		},
		events: function($c, c) {
			var sortPageCtrl = this;
			$c.click(function(e) {
				e.preventDefault();
				var target = $helpers.getTarget(e);
				if (!target) return;
				target = $(target);
				var p = $(target).attr("data-action");
				if (!p) return;
				var status = sortPageCtrl.sortStatus;
				if (p == "resetSort") {
					// Click on cancel button
					that.controls.SDataSorter.resetSort(sortPageCtrl);
				} else {
					// Click on list item
					if (!status) {
						status = that.controls.SDataSorter.getOrderBy(sortPageCtrl.parent);
						status.lastClickedId = null;
					} else if (!status.lastClickedId && status.orderBy && status.orderBy.length > 0) {
						// First click on item list
						status.lastClickedId = target.closest("ul").find("a[data-action=" + status.orderBy + "]").closest("li").attr("id");
					}
					if (status.orderBy === p) {
						status.asc = status.asc !== 'asc' && status.asc !== 'desc' ? 'asc' : status.asc === 'asc' ? 'desc' : '';
					} else {
						status.orderBy = p;
						status.asc = 'asc';
					}
					if (status.lastClickedId) {
						$('#' + status.lastClickedId).buttonMarkup({
							'icon': ''
						});
					}
					status.lastClickedId = target.closest("li").attr("id");
					sortPageCtrl.sortStatus = status;
					$('#' + status.lastClickedId).buttonMarkup({
						icon: that.controls.SDataSorter._statusIcon(status.asc, '')
					});
				}
			});
		},
		validateSort: function(sortPageCtrl) {
			var order = sortPageCtrl.sortStatus;
			order = order && order.orderBy && order.asc ? order.orderBy + ' ' + order.asc : '';
			var url = sortPageCtrl.options.url;
			url.query.orderBy = order;
			$sdata.getUri(url);
			$.mobile.loading('show', {
				theme: "a",
				text: $helpers.locale().ui.loading
			});
			$sdata.execURL(url.uri, {
				$uiRequest: true,
				$loadFav: sortPageCtrl.parent.canLoadFav(),
				success: function(cd, headers) {
					var queryPageCtrl = sortPageCtrl.parent;
					queryPageCtrl.extraData.bookmarks = headers ? headers.favorites : null;
					queryPageCtrl.extraData.sortStatus = $.extend(true, {}, sortPageCtrl.sortStatus);
					$.mobile.loading('hide');
					if (headers.status != 200) {
						queryPageCtrl.extraData.sortStatus = null;
					}
					queryPageCtrl.data = cd;
					// Refresh data and errors
					sortPageCtrl.setNeedRefresh(true);
					$.smobile.doBack(queryPageCtrl);
				}
			});
		},
		resetSort: function(sortPageCtrl) {
			sortPageCtrl.sortStatus = null;
			that.controls.SDataSorter.validateSort(sortPageCtrl);
		}
	};

	that.controls.SDataFilter = {
		_createItem: function(html, value, index) {
			html.push('<li');
			html.push('  data-icon="s-noicon" data-corners="false"  data-iconpos="right" class="s-m-slist-item ui-li-has-icon ' + $helpers.ui.consts.normal_icon + ' filter_item"');
			html.push('>');
			//icon of filter
			html.push('<div class="s-m-filter ' + _filter2css(value.op) + '"></div>');
			html.push('<a href="#" ');
			html.push('data-action="edit" data-action-param="' + index + '">');
			html.push("<h3>" + $helpers.htmlEncode(value.title || value.field) + "</h3>");
			html.push('<p>');
			html.push($helpers.htmlEncode($helpers.locale().filters[value.op] + ' "' + value.valueTitle + '"'));
			html.push('</p>');
			html.push('</a>');
			html.push('<div class="s-m-custom-icon" data-action="delete" data-action-param="' + index + '"><div data-action-param="' + index + '" data-action="delete" class="ui-icon ui-icon-s-delete-dark"></div></div>');
			html.push('</li>');
		},
		createSDataFilter: function(controller, c, filters) {
			var options = c.data || {};
			var cd = controller.getValue();
			cd.filters = cd.filters || [];
			var html = [];
			html.push('<div id="' + c.id + '">');
			html.push('<ul class="s-m-list"  data-role="listview" id="' + c.id + '_items" data-inset="true"');
			//html.push('  data-theme="d" data-split-icon="delete" data-split-theme="d"');			
			$helpers.addJqmData(options, html);
			html.push('>');
			html.push('<li data-theme="c"  data-role="list-divider">' + $helpers.locale().ui.filter + '</li>');
			cd.filters.forEach(function(value, index) {
				that.controls.SDataFilter._createItem(html, value, index);
			});
			html.push('<a  id="' + c.id + '_footer" href="#');
			html.push(c.id);
			html.push('popupMenu" data-rel="popup" data-iconpos="left" data-mini="false" data-role="button" data-inline="false" data-theme="f" data-icon="plus" id="');
			html.push(c.id);
			html.push('_new" data-inline="false">');
			html.push($helpers.locale().ui.add_item);
			html.push('</a>');
			html.push('</ul>');
			html.push('</div>');
			html.push('<div id="' + c.id + 'popupMenu" data-corners="false" data-role="popup">');
			html.push('<ul class="s-m-list"  data-mini="true" data-role="listview" style="min-width:210px;">');
			var filtersFields = controller.parent.getFilterFields(true);
			options.filtersFields = filtersFields;
			filtersFields.forEach(function(field, index) {
				html.push('<li><a data-action-param="' + index + '">');
				html.push($helpers.htmlEncode(field.title));
				html.push('</a></li>');
			});
			html.push('</ul>');
			html.push('</div>');
			return {
				html: html.join(''),
				bind: " ",
				action: options.action,
				options: options
			};
		},
		handler: function(c, after) {
			return after(that.controls.SDataFilter.createSDataFilter(this, c));
		},
		refresh: function(controller, options, $c, id) {
			var cd = controller.getValue();
			cd.filters = cd.filters || [];
			var html = [];
			cd.filters.forEach(function(value, index) {
				that.controls.SDataFilter._createItem(html, value, index);
			});
			var $ul = $('#' + id + '_items');
			var $items = $ul.children(".filter_item");
			$items.remove();
			var toolbar = $('#' + id + '_footer');
			toolbar.before(html.join(''));

			$ul.listview("refresh");

		},
		uidlg: function(data, controller) {
			var locale = $helpers.locale();
			var opvalues = data.opvalues;
			data.opvalues = null;
			var cp = that.controls.SDataList.field2proto(controller.parent, data.fieldValue);
			if (!cp) return;
			var ui = {
				"$title": locale.ui.filter,
				"content": {
					"cp": {
						"layout": "BlockBodyLayout",
						"data": {}
					},
					"field": {
						"uiClass": "Edit",
						"data": {
							"label": locale.ui.filter_field,
							"bind": "field",
							$isReadOnly: true
						},
						"parent": "cp"
					},
					"op": {
						"uiClass": "Combo",
						"data": {
							"label": locale.ui.filter_op,
							"bind": "op",
							items: opvalues
						},
						"parent": "cp"
					},
					"value": {
						"uiClass": "Edit",
						"data": {
							$filter: true,
							"label": locale.ui.filter_val,
							"bind": "value"
						},
						"parent": "cp"
					}
				},
				"hbuttons": [{
					"title": locale.ui.save_item,
					action: "savesettings",
					"jmdata": {
						"data-icon": "s-ok",
						"data-transition": "back"
					}
				}],
				roptions: {
					nopanel: true
				},
				actions: {
					savesettings: function(after) {
						var ctrl = this;
						var cd = ctrl.data;
						var filters = ctrl.parent.data.filters;
						if (cp.$type === "application/x-choice") {
							data.valueTitle = null;
							cp.$value.$enum.forEach(function(value) {
								if (value.$value === data.value) data.valueTitle = $proto.execExpression(value.$title, cp);
							});
						}
						if (cd.newFilter) {
							filters.push({
								title: cd.field,
								field: cd.fieldValue,
								op: cd.op,
								value: cd.value,
								valueTitle: cd.valueTitle ? cd.valueTitle : cd.value,
								refresh: true
							});
							ctrl.setNeedRefresh(true);
						} else {
							filters[cd.fi] = {
								title: cd.field,
								field: cd.fieldValue,
								op: cd.op,
								value: cd.value,
								valueTitle: cd.valueTitle ? cd.valueTitle : cd.value,
								refresh: true
							};
							ctrl.setNeedRefresh(true);
						}
						after(false);
						$.smobile.doBack(ctrl);
					}

				}
			};
			var edtCtrl = ui.content.value;
			switch (cp.$type) {
				case "application/x-date":
					edtCtrl.data.type = "date";
					break;
				case "application/x-time":
					edtCtrl.data.type = "time";
					break;
				case "application/x-datetime":
					edtCtrl.data.type = "datetime";
					break;
				case "application/x-boolean":
					edtCtrl.uiClass = "CheckBox";
					edtCtrl.data.label = data.field;
					break;
				case "application/x-integer":
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-quantity":
					edtCtrl.data.type = "number";
					break;
				case "application/x-reference":
					edtCtrl.uiClass = "Lookup";
					edtCtrl.data.bind = "valueTitle";
					edtCtrl.data.$lookupurlparsed = true;
					edtCtrl.data.$lookupurl = $proto.parseExpression(cp.$item.$links.$lookup.$url, {
						data: null,
						$prototype: cp.$item
					}, "$url");
					//
					edtCtrl.data.exitHandler = function(controller, value) {
						var cd = controller.getValue();
						if (value) {
							if (value != cd.valueTitle) {
								cd.value = null;
								cd.valueTitle = value;
							}
						} else {
							cd.value = null;
							cd.valueTitle = "";
						}

					};
					edtCtrl.data.setValueHandler = function(controller, value, next) {
						var cd = controller.getValue();
						if (value.$value) cd.valueTitle = value.$value;
						cd.value = value.$uuid;
						controller.child.setNeedRefresh(true);
						return next();
					};
					edtCtrl.data.refreshHandler = function(controller, $input, bind) {
						var dd = controller.getValue(),
							val = dd[bind] || "";
						$input.val(val);
					};
					break;
				case "application/x-choice":
					var vals = [];
					cp.$value.$enum.forEach(function(value) {
						vals.push({
							value: value.$value,
							title: $proto.execExpression(value.$title, cp)
						});
					});
					edtCtrl.uiClass = "Combo";
					edtCtrl.data.items = vals;
					break;
			}
			$.smobile.createDetail(ui, data, controller);
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				var target = $helpers.getTarget(e);
				if (!target) return;
				var data;
				var p = $(target).attr("data-action");
				if (p) {
					var ii = parseInt($(target).attr("data-action-param"), 10);
					var dd = controller.getValue();
					var cf = dd.filters[ii];
					var cp = that.controls.SDataList.field2proto(controller.parent, cf.field);
					var ops = _type2ops(cp.$type);
					var data = {
						newFilter: false,
						fi: ii,
						fieldValue: cf.field,
						field: cf.title,
						op: cf.op,
						value: cf.value,
						opvalues: ops.values
					};
					switch (p) {
						case "edit":
							that.controls.SDataFilter.uidlg(data, controller);
							break;
						case "delete":
							dd.filters.splice(ii, 1);
							controller.doRefresh();
							break;

					}
				}
			});
			var $list = $('#' + c.id + 'popupMenu');
			$list.click(function(e) {
				var target = $helpers.getTarget(e);
				if (!target) return;
				var p = parseInt($(target).attr("data-action-param"), 10);
				var sf = c.options.filtersFields[p];
				var cp = that.controls.SDataList.field2proto(controller.parent, sf.value);
				var ops = _type2ops(sf.type);
				var data = {
					newFilter: true,
					fieldValue: sf.value,
					field: sf.title,
					op: ops.value,
					opvalues: ops.values
				};
				that.controls.SDataFilter.uidlg(data, controller);
			});

		}
	};

})(jQuery);