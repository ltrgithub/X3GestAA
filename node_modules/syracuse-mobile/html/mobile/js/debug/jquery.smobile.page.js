"use strict";
(function($) {
	var that = $.smobile || {};
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	var q_parser = /([^&=;]*)=?([^&;]*)/g; // query parser
	that._uiCache = {};

	// mobile client pages by hash
	that.PAGES = {
		"start": {
			ui: "start.$static",
			useAppId: false,
			isHome: true,
			db: false
		},
		/* start page */
		"errors": {
			ui: "errors.$static",
			useAppId: false,
			db: false
		},
		/* error page */
		"apperrors": {
			ui: "apperrors.$static",
			useAppId: 2,
			db: false,
			home: true
		},
		/* error page */
		"home": {
			ui: "home.$static",
			useAppId: 2,
			isHome: true,
			db: true,
			cache: true
		},
		/* home page of application */
		"about": {
			ui: "about.$static",
			useAppId: false,
			db: false,
			home: true
		},
		/* about sage */
		"settings": {
			ui: "settings.$static",
			useAppId: false,
			db: false,
			home: true
		},
		/* settings sage */
		"send": {
			ui: "send.$static",
			useAppId: 2,
			home: true
		},
		/* send page */
		"page": {
			useAppId: 2,
			db: true,
			home: true
		},
		/* regular page */
		"dialog": {
			useAppId: 1,
			db: true,
			home: false
		},
		/* regular page */
		"apps": {
			ui: "applications.$static",
			useAppId: 0,
			db: false,
			home: true
		},
		/* application manager* */
		"logout": {
			ui: "logout.$static",
			useAppId: false,
			isHome: false,
			noLeftPanel: true,
			db: false
		}
	};
	Object.keys(that.PAGES).forEach(function(id) {
		that.PAGES[id].id = id;
	});

	that.pageIsDialog = function(page) {
		return (page.attr("data-" + $.mobile.ns + "role") === "dialog");
	};
	that.pageController = function(page) {
		if (page != null && page.jquery) {
			page = page.length == 0 ? null : page[0];
		}
		if (page == null) return null;
		return $.jqmData(page, "controller");
	};
	that.activeController = function() {
		return that.activePage ? that.pageController(that.activePage) : null;
	};
	that.pageIsDetail = function(page) {
		return ($.jqmData(page[0], 'detail') === "detail");
	};
	that.hash_sep = "-";
	$.smobile = that;
	that.loadFilter = function(representation) {
		var value = $sdata.loadRepData(representation);
		if (value && value.filter)
			return value.filter;
		return null;
	};
	// Called after loadPage
	that.PAGES.start.enhanceHandler = function(pdata, after) {
		// add installed applications
		var items = (pdata && pdata.content && pdata.content.menu && pdata.content.menu.data && pdata.content.menu.data.items) ? pdata.content.menu.data.items : null;
		if (!items)
			return after(pdata);

		$sdata.getInstalledApps(false, function(installed) {
			var locale = $helpers.locale();
			if (installed && installed.length) {
				installed.forEach(function(app) {
					items.push({
						data: {
							title: app.title,
							description: app.description,
							dsdescription: app.dsdescription,
							icon: app.icon,
							hash: that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(app.id)
						}
					});
				});
			} else {
				// items.push({data:{title: locale.applicationmanager.title,
				// divider:true}});
				items.push({
					data: {
						title: locale.applicationmanager.title,
						description: locale.applicationmanager.description,
						icon: "dash.appmanager",
						hash: that.PAGES.apps.id
					}
				});

			}
			after(pdata);
		});
	};
	// FDB - Issue #2488 - Called after data have been loaded
	// Override standard enhanceHeader method - enhanceHeader is bind to an
	// object that contains page uiData, left panel and right panel
	// data contains page's data
	// FDB I added this hander to give the capability to the (static) page to
	// modify content according to data
	// To see - Maybe it would be better to call a handler once DOM object has
	// been created in order to manipulate DOM elemt instead of ui objects
	that.PAGES.settings.enhanceHeader = function(data) {
		var self = this,
			autoLogon = null,
			logon;
		// hide/show authentication block if autoLogon==true
		for (var p in self.ui.content) {
			if (p === "logonblock") {
				var x = self.ui.content[p];
				if (!x.data)
					x.data = {};
				x.data.$isHidden = data.autoLogon !== true;
			}
		}
	};
	// Called after loadPage
	that.PAGES.apps.enhanceHandler = function(pdata, after) {
		var locale = $helpers.locale();
		if (pdata)
			pdata.$title = locale.applicationmanager.title;
		after(pdata);
	};

	// Page hash
	that.linkDetailPage = function(controller) {
		if (controller.applicationId) {
			return that.PAGES.page.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
		} else
			return that.PAGES.page.id;
	};
	var _parseRepresentation = function(param) {
		if (param.representation) {
			var a = param.representation.split(".");
			if (a.length >= 2) {
				param.representation = a[0];
				param.facet = a[1];
			}
		}
	};

	that.scrollIntoView = function(element) {
		if (element == null || element.length == 0) return;
		var fixedHeader = true;
		if (fixedHeader) {
			var fixedHeaderHeight = 45;
			var dummy = $('<div></div>').css({
				position: 'absolute',
				top: $(element).offset().top - fixedHeaderHeight
			}).appendTo('body');
			dummy[0].scrollIntoView();
			dummy.remove(); // remove the dummy element
		} else {
			element.scrollIntoView();
		}
	};
	// Used to retrieve representation/facet in page hash
	var _parsePageURI = function(query, page) {
		var params = {}, pRegex = new RegExp("#" + page, "");
		var qq = $helpers.decodeJsmQuery(query),
			ii;
		ii = qq.indexOf('?');
		if (ii > 0) {
			qq.substring(ii + 1).replace(q_parser, function($0, $1, $2) {
				if ($1)
					params[$1] = decodeURIComponent($2);
			});
		}
		if (params.url) {
			params.dataurl = "";
			ii = params.url.indexOf("?");
			if (ii >= 0) {
				params.dataurl = params.url.substr(0, ii);
				qq = params.url.substr(ii + 1);
				qq.replace(q_parser, function($0, $1, $2) {
					if ($1)
						params[$1] = decodeURIComponent($2);
				});
			} else {
				ii = params.url.indexOf(".$dashboard");
				if (ii >= 0)
					params.representation = params.url;

			}
		}
		_parseRepresentation(params);
		return params;

	};
	// parse page hash
	// hashFormat: [#]pagename[-appid[-pageId]][encodeURIComponent(?query)]
	var _pageName = function(hash) {
		if (!hash)
			return null;
		var isEncoded = (hash.indexOf("=") < 0);
		var ch = (hash[0] === "#") ? hash.substring(1) : hash;
		var idx = ch.indexOf((isEncoded ? $helpers.encodeJsmQuery("?") : "?"));
		if (idx > 0)
			ch = ch.substring(0, idx);
		var res = {
			page: null
		};
		idx = ch.indexOf(that.hash_sep);
		if (idx > 0) {
			res.page = that.PAGES[ch.substring(0, idx)];
			res.application = decodeURIComponent(ch.substr(idx + 1));
			// 36 is
			if (res.application.length > 36) {
				res.pageId = res.application.substr(36 + 1);
				res.application = res.application.substr(0, 36);
			}

		} else {
			res.page = that.PAGES[ch];
			res.application = "";
		}
		if (!res.page)
			return null;
		if ((res.page.useAppId === 2) && !res.application)
			return null; // no appid found
		if ((res.page.useAppId === 1) && !res.application) {
			res.application = ($sdata.config ? $sdata.config.id : "");
		}
		if (!res.pageId)
			res.pageId = $helpers.uuid();
		res.pageName = res.page.id + (res.application ? (that.hash_sep + $helpers
			.encodeURIComponent(res.application)) : "");
		res.domid = (that.PAGES.home.id === res.page.id) ? res.application : res.pageId;
		if (that.PAGES.home.id === res.page.id)
			res.longPageName = res.pageName;
		else
			res.longPageName = res.page.id + (res.application ? (that.hash_sep + $helpers
				.encodeURIComponent(res.application + '-' + res.pageId)) : "");
		return res;
	};
	// Mobile client actions - FDB not used?
	that.ACTIONS = {
		"home": {
			name: "home",
			execute: function(params, after) {
				that.goHome(null);
				after(null);
			}
		}
	};
	// Check if Mobile client action
	var _actionName = function(hash) {
		if (!hash)
			return null;
		var a = Object.keys(that.ACTIONS);
		var pn = "",
			i = a.length;
		while (i--) {
			var s = a[i];
			var ii = hash.indexOf(s);
			if ((ii === 0) || (ii === 1))
				return that.ACTIONS[s];
		}
		return null;
	};
	// Execute a Mobile client action
	var _execAction = function(hash, action, after) {
		var params = _parsePageURI(hash, action.name);
		return action.execute(params, after);

	};

	var _createHtml = function(cl, res) {
		if (cl.before) {
			res.push(cl.before);
			cl.before = null;
		}
		if (cl.html) {
			res.push(cl.html);
			cl.html = null;
		}
		if (cl.childs) {
			cl.childs.forEach(function(child) {
				_createHtml(child, res);
			});
		}
		if (cl.after) {
			res.push(cl.after);
			cl.after = null;
		}
	};
	that.struct2html = _createHtml;

	var _hasMsgControl = function(controls) {
		for (var name in controls) {
			if (controls[name].uiClass === "MsgView")
				return true;
		}
		return false;
	};

	// Create layouts and controls and linked with parents
	var _createPage = function(controller, controls, html, options) {
		var old = controller._html || null,
			olddetailpagedata, oldPrefix;
		controller._html = html;
		if (options) {
			if (options.pageData) {
				olddetailpagedata = controller.detailpagedata || null;
				controller.detailpagedata = options.pageData;
			}
			if (options.prefix) {
				oldPrefix = controller.detPrefix || "";
				controller.detPrefix = options.prefix;
			}
			if (options.data)
				controller.setData('', options.data);
		}
		try {
			Object.keys(controls).forEach(function(id, index) {
				var c = controls[id];
				if (c.layout) {
					var parent = controls[c.parent];
					if (parent) {
						parent.data = parent.data || {};
						parent.data.hasChildren = true;
					}
				}
			});
			Object
				.keys(controls)
				.forEach(
					function(id, index) {
						var c = controls[id];
						var parent = html[c.parent] || html.root;
						// Control id : controller.prefix + prefix - Ex:
						// F1_items for a query list - representation2ui
						c.id = controller.prefix + id;
						if (c.layout) {
							// Layout controls - see
							// jquery.smobile.layout.js
							var l = $.smobile.addLayout.apply(
								controller, [parent, c]);
							l.parent = l.parent || c.parent || "root";
							if (l && l.event) {
								controller.layouts = controller.layouts || {};
								controller.layouts[c.id] = {
									id: c.id,
									event: l.event,
									options: l.options
								};
								l.event = null;
							}
							html[id] = l;
							if (l.childs && l.childs.length) {
								l.childs.forEach(function(child) {
									html[child.id] = child;
									child.parent = id;
								});
							}
						} else if (c.uiClass) {
							// UI Controls with handler, refresh, events methods - Class defined in $.smobile.controls[c.uiClass] 
							// Calls 'handler' method to initcontrol(create html)
							$.smobile.addControl
								.apply(
									controller, [
										parent,
										c,
										function(ctrl) {
											// ctrl -> is not a class object it contains { html, action, options}
											if (ctrl && Array
												.isArray(ctrl)) {
												// isArray(ctrl) means edit mode - ?? FBD
												ctrl
													.forEach(function(
														cc) {
														html[id + cc.scid] = cc;
														if (cc.bind || cc.action) {
															controller
																.registerControl({
																	id: c.id + cc.scid,
																	bind: cc.bind,
																	action: cc.action,
																	options: cc.options,
																	uiClass: cc.uiClass,
																	refresh: cc.refresh
																});
														}
													});
											} else if (ctrl) {
												html[id] = ctrl;
												if (ctrl.bind || ctrl.action) {
													controller
														.registerControl({
															id: c.id,
															bind: ctrl.bind,
															action: ctrl.action,
															options: ctrl.options,
															uiClass: c.uiClass,
															refresh: ctrl.refresh
														});
												}
												if (ctrl.async) {
													// View control with asynchronous handler called by bindData - See appView and syncView
													controller.asyncs = controller.asyncs || [];
													controller.asyncs
														.push(ctrl.async);
													ctrl.async = null;
												}
											}
										}
									]);
						}
					});
		} finally {
			controller._html = old;
			if (options) {
				if (options.pageData)
					controller.detailpagedata = olddetailpagedata;
				if (options.prefix)
					controller.detPrefix = oldPrefix;
			}

		}
	};

	// Call to display arrayField wit card view
	that.renderPageHTML = _createPage;

	var _createPanelIcon = function(controller, html, opts) {
		html
			.push('<a data-role="button" class="s-m-hbutton" data-theme="a"  data-inline="true" data-iconpos="notext" ');
		if (opts) {
			for (var p in opts) {
				html.push(p);
				html.push('="');
				html.push(opts[p]);
				html.push('" ');
			}
		}
		html
			.push('" data-corners="false" data-iconshadow="false" data-shadow="false"> </a>');
	};
	// Create header right icons
	var _createHeaderRight = function(controller, uiData, nopanel, multisel) {
		var html = [];
		var opts = {
			"data-theme": "a",
			"data-inline": "true",
			"data-role": "button",
			"data-corners": "false",
			"data-iconshadow": "false",
			"data-iconpos": "notext",
			"data-shadow": "false"
		};
		if (uiData && uiData.hbuttons) {
			if (multisel) {
				that.multisel.addRightBtn(uiData);
			}
			uiData.hbuttons.forEach(function(btn) {
				btn.jmdata = btn.jmdata || {};
				$.extend(btn.jmdata, opts);
				btn.css = ["s-m-hbutton"];
				if (btn.id === "filter") {
					btn.$isHidden = !controller.extraData.filters;
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.filterBtnId = btn.xcontrolId;
				} else if (btn.id === "favorite") {
					var fav = $sdata.favorite(controller.ui);
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.favoriteBtnId = btn.xcontrolId;
					btn.$isHidden = controller.extraData == null || controller.extraData.bookmarks == null || controller.extraData.bookmarks.length === 0;
					// No favorites in offline mode
					if (!$helpers.online()) btn.$isHidden = true;
					if (fav) {
						btn.jmdata["data-icon"] = "s-fav-on";
					}
				} else if (btn.id === "sortorder") {
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.sortorderBtnId = btn.xcontrolId;
					btn.$isHidden = true;
				}
				// #2489 - we use tab-cell for each icons
				html.push('<div class="s-m-header-cell-icon ');
				html.push(btn.isMultiSel ? 'multisel ' : 'nosel ');
				if (btn.$isHidden) {
					html.push(' s-m-hidden');
				}
				html.push('" id="');
				html.push(btn.xcontrolId);
				html.push('">');
				// We force false because the show/hide is managed by parent div
				// for header buttons
				btn.$isHidden = false;
				that._addLink(html, btn, controller, function() {
					html.push($helpers.htmlEncode(btn.title));
				});
				html.push('</div>');

			});
		}
		if ((uiData && uiData.roptions && uiData.roptions.nopanel) || nopanel) {
			// Nothing
		} else {
			// #2489 - we use tab-cell for each icons - Add right panel icon -
			// only for no multiline selection
			html.push('<div class="s-m-header-cell-icon nosel" id="');
			html.push(controller.prefix + 'right_panel"');
			html.push('">');
			html.push(_createPanelIcon(controller, html, {
				'data-icon': 's-rpanel',
				'href': '#' + controller.prefix + 'rpanel'
			}));
			html.push('</div">');
		}
		return html.join('');
	};

	var _error2Type = function(value) {
		switch (value) {
			case $helpers.ERRORS.fatal:
				return "fatal";
			case $helpers.ERRORS.error:
				return "error";
			case $helpers.ERRORS.warning:
				return "warning";
			case $helpers.ERRORS.success:
				return "success";
			default:
				// case $helpers.ERRORS.info:
				return "info";
		}
	};

	var _createHeader = function(controller, ui, pgtitle, nopanel, isLocalData) {
		var html = [],
			opts = {};
		var type;
		controller.pgtitle = pgtitle;
		// -1- Create left icon - Navigation
		// #2489 - we use tab-cell for each icon
		// -> nosel to hide this in in multiseletion mode
		html.push('<div class="s-m-header-tab" id="');
		html.push(controller.prefix + 'headerTab">');
		// No leftpanel - Ex for logout page
		if (controller.pageInfo.page.noLeftPanel !== true) {
			html.push('<div class="s-m-header-cell-icon nosel">');
			if (controller.parent) {
				// Back arrow to return to parent - Ex : detail of a grid line,
				// object reference
				opts["data-action"] = "back";
				opts["data-icon"] = "arrow-l";
			} else {
				// Display left panel
				opts.href = "#" + controller.prefix + "panel";
				opts["data-icon"] = "s-bars";
			}
			_createPanelIcon(controller, html, opts);
			html.push('</div>');
		}
		// -2- Add title / Message
		html.push('<div class="s-m-header-cell-ttl"><h1 class="s-m-header-ttl" id="');
		html.push(controller.prefix + 'headerTtl">');
		// pgtitle Could be HTML (home page sage in green)
		html.push(pgtitle);
		html.push('</h1>');
		if (isLocalData) {
			html.push('<div class="s-header-draft">');
			html.push($helpers.locale().draftmode);
			html.push('</div>');
		}
		html.push('</div>');
		var multisel = ui.$facet == '$query' && that.multisel.addMultiselMenus(controller, ui, html);
		// -3- Create rights icons - actions
		var htmRight = _createHeaderRight(controller, ui, nopanel, multisel);
		html.push(htmRight);
		html.push('</div>');
		return html.join('');
	};

	// Click events on header
	var _clickOnHeader = function(e, check) {
		var cpage = $.mobile.activePage,
			hnd;
		if (cpage) {
			var ctrl = that.pageController(cpage);
			if (ctrl) {
				if (ctrl.disabled)
					return;
				var target = $helpers.getTarget(e);
				if (target) {
					var p;
					if (check) {
						p = $(target).attr("data-action-global");
						if (!p)
							return;
					}

					p = $(target).attr("data-action");
					if (p) {
						if (p === "filter" && that.openFilterDlg) {
							that.openFilterDlg(ctrl, ctrl.extraData.filters);
							e.preventDefault();
						}

						hnd = ctrl.pageActions ? ctrl.pageActions[p] : null;
						if (hnd) {
							ctrl.disabled = true;
							return hnd.call(ctrl, function(doCont) {
								if (doCont)
									ctrl.disabled = false;
							});
						}
						hnd = ctrl["action" + p];
						if (hnd) {
							ctrl.disabled = true;
							var actp = $(target).attr("data-action-param");
							if (actp)
								actp = JSON.parse(actp);
							$helpers.clearErrors();
							return hnd
								.call(
									ctrl, {
										success: function(cbOpts,
											error, noback) {
											ctrl.disabled = false;
											if (!error && !noback) {
												// if cbOpts._cburl -> Goto this page - Else back
												if (cbOpts && cbOpts._cburl) {
													window.location.hash = that.ui
														.urlHref(
															cbOpts._cburl,
															ctrl);
												} else {
													$.smobile
														.doBack(ctrl);
												}
											}
										}
									}, actp

							);
						}
					}
				}
			}
		}
	};

	// Click events on content
	var _clickOnContent = function(e) {
		return _clickOnHeader(e, true);
	};


	var _bindEvents = function(controller, ui, $header, $content) {
		$header.click(_clickOnHeader);
		$content.click(_clickOnContent);
		that.multisel.bindEvents(controller, ui);
	};


	// Build page accoridng to ui description and page's data
	var _buildPage = function(pagename, $currentPage, $page, ui, data, info,
		pageInfo, $template, cb) {
		var sd = new Date(),
			pgtitle;
		var page = $page[0],
			htmlContent = {
				root: {
					before: "",
					after: "",
					childs: []
				}
			}, parentController = null;
		var htmlLeftPanel = {
			root: {
				before: "",
				after: "",
				childs: []
			}
		}, htmlRightPanel = {
				root: {
					before: "",
					after: "",
					childs: []
				}
			}, hasPanel = false,
			hasrPanel = false;
		if ($currentPage && $currentPage[0]) {
			parentController = $.jqmData($currentPage[0], "controller");
		}
		if (info.url) {
			info.url = $sdata.parseSdataUri(info.url);
		}
		$page.uiController({
			id: pagename,
			ui: pagename,
			entity: info.entity,
			inCreate: info.$createActivity,
			page: pageInfo,
			url: info.url
		});

		var controller = $.jqmData(page, "controller");
		controller.pageInfo = pageInfo;
		if (info.filters) {
			controller.extraData.filters = info.filters;
			info.filters = null;
		}
		if (info.favorites) {
			controller.extraData.bookmarks = info.favorites;
			info.favorites = null;
		}
		// Allows to add ad css class in page body - Ex $"css":"error" ->
		// s-m-app-bkg.error gives the backgropund
		if (ui.$css) {
			var klass = ui.$css;
			if (Array.isArray(klass))
				klass = klass.join(' ');
			$page.addClass("s-m-app-bkg " + klass);
		}
		if ((pageInfo.page.useAppId === 2) && pageInfo.application) {
			controller.applicationId = pageInfo.application;
			controller.homeRef = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
			if (pageInfo.page.isHome || (ui && (ui.$facet === "$dashboard"))) {
				$page.addClass("s-m-app-bkg");
				if ($sdata.config && $sdata.config.code)
					$page.addClass($sdata.config.code);
			}
		} else {

			if (pageInfo.page.useAppId == false) {
				controller.applicationId = "";
				controller.homeRef = "#" + that.PAGES.start.id;
			}
		}

		if (ui.$page) {
			controller.page = ui.$page;
			delete ui.$page;
		}
		var dd = data || {};
		controller.setData('', dd);
		controller.pageOptions = ui.options || {};
		pgtitle = ui.$title || (dd ? dd.$title : "") || "";
		if (controller.pageOptions.detail && parentController) {
			controller.parent = parentController;
			parentController.child = controller;
			controller.applicationId = parentController.applicationId;

			if (ui.$prototype)
				controller.detailpagedata = {
					$prototype: ui.$prototype
				};
		}
		var $header = $page.children(":jqmData(role=header)"),
			$content = $page
				.children(":jqmData(role=content)")
				.children(".content-primary"),
			$panel = $page
				.children(":jqmData(sagerole=panel)"),
			$rpanel = $page
				.children(":jqmData(sagerole=rpanel)");
		ui.content = ui.content || {};
		if (ui.content.$title && pgtitle) {
			ui.content.$title.data.html = pgtitle;
			pgtitle = "";
		}
		if (ui.panel) {
			hasPanel = true;
			_createPage(controller, ui.panel, htmlLeftPanel);
		}
		if (ui.rpanel) {
			hasrPanel = true;
			_createPage(controller, ui.rpanel, htmlRightPanel);
		} else {
			ui.roptions = ui.roptions || {};
			ui.roptions.nopanel = true;
		}
		/*if (!_hasMsgControl(ui.content)) {
			$helpers.clearErrors();
		} else {*/
		if (_hasMsgControl(ui.content))
			controller.hasMsgView = true;

		_createPage(controller, ui.content, htmlContent);
		// Set page header Html - and left icons
		$header.html(_createHeader(controller, ui, pgtitle, !pageInfo.page.useAppId, dd.$localUrl != null));
		var content = [];
		_createHtml(htmlContent.root, content);
		// Set page content Html
		$content.html(content.join(''));

		if (hasPanel) {
			content = [];
			_createHtml(htmlLeftPanel.root, content);
			// Set page left panel Html
			$panel.html(content.join(''));
			$panel.on("panelbeforeopen", function(event, ui) {
				that.docEvents.disableSwipe();
				var cpage = $.mobile.activePage;
				if (cpage) {
					var ctrl = that.pageController(cpage);
					if (ctrl)
						ctrl.refreshPanel(true);
				}

			});
			// Issue #2592 panelbeforeclose instead de panelclose to be able to
			// call this method in pagebeforechange
			$panel.on("panelbeforeclose", function(event, ui) {
				that.docEvents.enableSwipe();
			});
		}
		if (hasrPanel) {
			content = [];
			_createHtml(htmlRightPanel.root, content);
			// Set page right panel Html
			$rpanel.html(content.join(''));
			$rpanel.on("panelbeforeopen", function(event, ui) {
				that.docEvents.disableSwipe();
				var cpage = $.mobile.activePage;
				if (cpage) {
					var ctrl = that.pageController(cpage);
					if (ctrl)
						ctrl.refreshPanel(false);
				}

			});
			// Issue #2592 panelbeforeclose instead de panelclose to be able to
			// call this method in pagebeforechange
			$rpanel.on("panelbeforeclose", function(event, ui) {
				that.docEvents.enableSwipe();
			});
		}
		// $page.page();
		if (controller.pageOptions.dialog) {
			$page.removeAttr('data-' + $.mobile.ns + 'role');
			$page.attr('data-' + $.mobile.ns + 'role', 'dialog');
			controller.pageOptions.detail = false;
		} else if (controller.pageOptions.detail) {
			$.jqmData($page[0], "detail", 'detail');
		}
		if (ui.actions) {
			// Set controller methods that will handle actions "action +
			// actionName" - Ex actionsave, actiondelete,actionreinstall ..
			for (var action in ui.actions) {
				controller["action" + action] = ui.actions[action];
			}
		}
		// $page.attr( "data-" + $.mobile.ns + "external-page", true ).one(
		// 'pagecreate', $.mobile._bindPageRemove );
		var f = $('#' + $page[0].id);
		// remove html
		if (f.length) {
			$page.remove();
			return;
		}
		// Add footer - FBD no footer
		controller.addFooter($page);
		if ($template) {
			// Page created from #page-template by clone
			$page.insertBefore($template);
		} else {
			// No template
			$page.appendTo($("body"));
		}
		// Set events
		_bindEvents(controller, ui, $header, $content);
		cb();
	};
	// Retun static page descriptions
	that.getStaticUI = function(name, page) {
		if (name === "apppanel") {
			return that.staticui[name](page && page.page.id === "page");
		} else {
			return that.staticui[name]();
		}
	};

	var _private = {
		menu2link: function(menuItem, mi) {
			if (menuItem.linkType == "$representation") {
				mi.entity = menuItem.entity;
				mi.representation = menuItem.representation;
				mi.facet = menuItem.facet || "$query";
				mi.params = menuItem.params || "";
			} else if (menuItem.linkType == "$dashboard") {
				mi.facet = menuItem.facet || "$dashboard";
				mi.dashboard = menuItem.dashboard;
				mi.facet = "$dashboard";
			}

		},
		// Create a mobile page description from representations ($prototype)
		representation2ui: function(params, data) {
			var cd = {}, iaddErrorView = true;
			if (params.facet == "$dashboard") {
				cd = {
					"content": {
						"error": {
							"uiClass": "MsgView"
						},
						"menu": {
							"uiClass": "MainMenu",
							"data": {
								"items": []
							}
						}
					}
				};
				data.forEach(function(menuItem) {
					var mi = {
						title: menuItem.title,
						description: menuItem.description,
						icon: menuItem.icon
					};
					_private.menu2link(menuItem, mi);
					cd.content.menu.data.items.push({
						data: mi
					});
				});
				cd.$facet = "$dashboard";
				iaddErrorView = false;
			} else if ((params.facet === "$query") || (params.facet === "$lookup")) {
				iaddErrorView = false;
				cd = {
					"content": {
						"error": {
							"uiClass": "MsgView"
						},
						"items": {
							"uiClass": "SDataList",
							"data": {
								"bind": "$resources"
							}
						}
					}
				};
				var isLookup = (params.facet === "$lookup");
				if (isLookup) {
					cd.options = {
						detail: true
					};
					cd.content.items.data.$lookup = 1;
				}
				if (data && data.$prototype && data.$prototype.$title) {
					cd.$title = $proto.parseExpression(data.$prototype.$title, {
						data: null,
						$prototype: data.$prototype
					}, "$title");
				}
				cd.$page = params.representation + "." + params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else if ((params.facet === "$details") || (params.facet == "$edit") || (params.facet == "$create")) {
				iaddErrorView = false;
				cd = {};
				var map = {};
				var article = data.$article || data.$prototype.$article;
				if (!article) {
					// If no article(no authoring) create a default
					// representations for the page
					article = $proto.auth.defaultDetailArticle(data.$prototype, {
						list: false,
						facet: params.facet

					});
				}

				var content = {
					"error": {
						"uiClass": "MsgView"
					}
				};
				// Create mobile ui structure from SYracuse representation
				$proto.auth.detailArt2design(article, content, data.$prototype, {
					root: true,
					list: false,
					facet: params.facet,
					prefix: params.prefix || ""
				});
				cd.content = content;
				if (data && data.$prototype && data.$prototype.$title) {
					cd.$title = $proto.parseExpression(data.$prototype.$title, {
						data: null,
						$prototype: data.$prototype
					}, "$title");
				}
				cd.$page = params.representation + "." + params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else {
				cd = data;
			}
			if (iaddErrorView && cd && cd.content) {
				cd.content.error = {
					uiClass: "MsgView"
				};
			}

			return cd;

		},
		// Calculate contextual header actions
		getCtxItems: function(facet, representation, data, items) {
			var page = $sdata.config.pages[representation + "." + facet],
				url, ppurl;
			if (page) {
				var query = facet === "$query";
				if (query || (facet === "$lookup")) {
					/*
					 * Icons if no multiline selection displayed if no multisel
					 * class in header div
					 */
					items.push({
						id: "sortorder",
						title: $helpers.locale().ui.sort_order,
						action: "sortorder",
						"jmdata": {
							"data-icon": "s-sort-asc",
							"data-transition": "none"
						}
					});
					items.push({
						id: "filter",
						title: $helpers.locale().ui.filter,
						action: "filter",
						"jmdata": {
							"data-icon": "s-filter",
							"data-transition": "none"
						}
					});
					items.push({
						id: "favorite",
						title: $helpers.locale().ui.favorite,
						action: "favorite",
						"jmdata": {
							"data-icon": "s-fav-off",
							"data-transition": "none"
						}
					});
				}

				var links = page.$prototype.$links;
				if (query) {
					// Add create action from Query as an Icon
					if (links && links.$create && !links.$create.$isHidden) {
						url = $proto.parseExpression(
							links.$create.$url, {
								data: null,
								$prototype: page.$prototype
							}, "$url");
						ppurl = $sdata.parseSdataUri(url);
						if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
							items.push({
								title: $helpers.locale().ui.add_item,
								url: url,
								"jmdata": {
									"data-icon": "s-add",
									"data-transition": "none"
								}
							});
						}
					}

				} else if (facet === "$details") {
					// add $create link if exists
					if ($sdata.config && $sdata.config.pages && $sdata.config.pages[representation + ".$query"]) {
						var pq = $sdata.config.pages[representation + ".$query"].$prototype;
						if (pq.$links && pq.$links.$create && !pq.$links.$create.$isHidden) {
							url = $proto.parseExpression(
								pq.$links.$create.$url, {
									data: null,
									$prototype: pq
								}, "$url");
							ppurl = $sdata.parseSdataUri(url);
							if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
								items.push({
									title: $helpers.locale().ui.add_item,
									url: url,
									"jmdata": {
										"data-icon": "s-add",
										"data-transition": "none"
									}
								});
							}

						}
					}

					// add $edit link if exists
					if (links && links.$edit && !links.$edit.$isHidden) {
						url = $proto.parseExpression(
							links.$edit.$url, {
								data: $proto.exprData(data),
								$prototype: page.$prototype
							}, "$url");
						ppurl = $sdata.parseSdataUri(url);
						if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
							items.push({
								title: $helpers.locale().ui.edit_item,
								url: url,
								"jmdata": {
									"data-icon": "s-edit",
									"data-transition": "none"
								}
							});
						}
					}
					if (links && links.$delete && !links.$delete.$isHidden) {
						items.push({
							title: $helpers.locale().ui.remove_item,
							action: "delete",
							"jmdata": {
								"data-icon": "s-delete",
								"data-transition": "none"
							}
						});
					}
				} else if ((facet === "$edit") || (facet === "$create")) {
					items.length = 0;
					items.push({
						title: $helpers.locale().ui.cancel_item,
						action: "cancel",
						"jmdata": {
							"data-icon": "s-cancel",
							"data-transition": "none"
						}
					});
					if (links && links.$delete && !links.$delete.$isHidden)
						items.push({
							title: $helpers.locale().ui.remove_item,
							action: "delete",
							"jmdata": {
								"data-icon": "s-delete",
								"data-transition": "none"
							}
						});
					items.push({
						title: $helpers.locale().ui.save_item,
						action: "save",
						"jmdata": {
							"data-icon": "s-ok",
							"data-transition": "none"
						}
					});
				}
			}
		},
		// Set headers icon actions
		enhanceHeader: function(data) {
			var uiData = this.ui,
				leftPanel = this.panel,
				rightPanel = this.rpanel;
			if (leftPanel)
				uiData.panel = {
					left_panel: leftPanel
				};
			if (rightPanel) {
				uiData.rpanel = {
					right_panel: rightPanel
				};
			}
			var hbuttons = uiData.hbuttons || [];
			if (uiData && uiData.$facet && $sdata.config) {
				_private.getCtxItems(uiData.$facet, uiData.$representation,
					data, hbuttons); // context items
				if (hbuttons.length)
					uiData.hbuttons = hbuttons;
			}
		}
	};
	// Create an ui mobile structure for a detail view (card view,
	// application/x-object object...)
	// these views are created dynamically and injected into parent html
	that.detailUiData = function(controller, cp, data, $layout, options) {
		var res = {};
		var cl = $layout;
		if (cl.$cards)
			cl = cl.$cards;
		else if (cl.$layout)
			cl = cl.$layout;
		var isReadOnly = (options && options.readOnly);
		var inline = (options && options.inlinePrefix) ? options.inlinePrefix : "";

		var repData = {
			$prototype: cp,
			$article: cl
		};
		res.uiData = _private.representation2ui({
			facet: isReadOnly ? "$details" : "$edit",
			representation: "x-object",
			prefix: inline
		}, repData);
		res.uiData.$prototype = cp;
		res.uiData.hbuttons = [{
			title: $helpers.locale().ui.cancel_item,
			action: "cancel_detail",
			"jmdata": {
				"data-icon": "s-cancel",
				"data-transition": "back"
			}
		}, {
			title: $helpers.locale().ui.ok_item,
			action: "save_detail",
			"jmdata": {
				"data-icon": "s-ok",
				"data-transition": "back"
			}
		}];
		if (options && options.actions && options.actions.delete_detail) {
			res.uiData.hbuttons.push({
				title: $helpers.locale().ui.remove_item,
				action: "delete_detail",
				"jmdata": {
					"data-icon": "s-delete",
					"data-transition": "back"
				}
			});
		}

		if (options) {
			if (isReadOnly) {
				delete res.uiData.hbuttons;
			}
			if (options.actions) {
				res.uiData.actions = options.actions;
				options.actions = null;
			}
		}
		if (inline) {
			var cont = res.uiData.content;
			if (cont.error) {
				delete cont.error;
			}
		}
		return res;
	};

	// called after page Syracuse representations has been read in local DB

	function _afterEnhance(page, params, uiData, pageData, panel, rpanel, cb) {
		var _afterData;
		if (!page.page.db) {
			var cd = that.getStaticUI(params.representation);
			if (!cd) {
				return cb(params.representation, uiData, pageData, null);
			}
			uiData = cd;
			var obj = {
				ui: uiData,
				panel: panel,
				rpanel: rpanel
			};
			var _stdEnhanceHeader = _private.enhanceHeader.bind(obj);
			var _pageEnhanceHeader = page.page.enhanceHeader ? page.page.enhanceHeader
				.bind(obj) : null;
			var _afterData = function(data) {
				_stdEnhanceHeader(data);
				// Specific page data processing
				if (_pageEnhanceHeader) {
					_pageEnhanceHeader(data);
				}
			};

			if (page.page.enhanceHandler) {
				page.page.enhanceHandler(uiData, function(newUiData) {
					return cb(params.representation, newUiData, pageData,
						_afterData);
				});
			} else {
				return cb(params.representation, uiData, pageData, _afterData);
			}
		} else {
			var uimap = null,
				rep = params.representation;
			if (page.page.isHome) {
				params.representation = $sdata.config.home;
				rep = params.representation;
				params.facet = "$dashboard";
			}
			var isPage = false;
			if (params.facet === "$dashboard") {
				uimap = $sdata.config.dashboards;
			} else if (params.facet) {
				rep = params.representation + "." + params.facet;
				uimap = $sdata.config.pages;
			}
			if (uimap && uimap[rep]) {
				uiData = uimap[rep];
				uiData = _private.representation2ui(params, uiData);
				if (uiData) {
					_afterData = _private.enhanceHeader.bind({
						ui: uiData,
						panel: panel,
						rpanel: rpanel
					});
					if (page.page.isHome) {
						uiData.$title = $sdata.config.title;
					}
					if (page.page.enhanceHandler)
						page.page.enhanceHandler(uiData, function(newUiData) {
							return cb(rep, newUiData, pageData, _afterData);
						});
					else {
						return cb(rep, uiData, pageData, _afterData);
					}
				} else {
					return cb("", null, null, null);
				}
			} else
				return cb("", null, null, null);
		}
	};
	// add left (items) and right(ritems) panels items

	function _addappItems(items, ritems, params, page) {
		var apps = $sdata.applications;
		var itms = items[items.length - 1];
		if (apps) {
			// Left panel - only for applications (with Syracuse reprsentation)
			var needEndPoint = [],
				titles = [];
			apps.forEach(function(app) {
				if (app.id != page.application || true !== page.page.isHome) {
					if (app.dsdescription) {
						if (titles.indexOf(app.title) < 0) {
							titles.push(app.title);
						} else {
							needEndPoint.push(app.title);
						}
					}
					itms.items.push({
						title: app.title,
						description: app.dsdescription ? app.dsdescription : undefined,
						icon: app.icon,
						hash: that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(app.id)
					});

				} else {
					// dont display current page if application home
					// add endppoitn if duplicated application
					if (titles.indexOf(app.title) < 0) {
						titles.push(app.title);
					} else {
						needEndPoint.push(app.title);
					}
				} // Else we skip application item if we are on application
				// home page
			});
			// Add endpoint only if duplicated applications
			itms.items.forEach(function(itm, idx) {
				if (needEndPoint.indexOf(itm.title) < 0)
					delete itm.description;
			});
		}
		// Logout always present
		itms.items.push({
			"type": "logout"
		});
		// Right panel displays in all pages
		var locale = $helpers.locale(),
			item;
		// No right items in offline mode
		if (params.facet && $helpers.online()) {
			// navBar for attached actions
			if ((params.facet === "$query") || (params.facet === "$lookup")) {
				ritems.push({
					code: "topactions",
					load: true,
					items: [{
						title: locale.ui.multilines,
						icon: "multilines",
						action: "multiswitch"
					}]
				});
				item = {
					code: "filtersort",
					load: true,
					title: locale.ui.filtersort,
					items: []
				};
				ritems.push(item);
			}

			item = {
				code: "actions",
				load: true,
				title: locale.ui.Actions,
				items: []
			};
			ritems.push(item);
		}

		item = {
			code: "links",
			load: true,
			title: locale.ui.links,
			items: []
		};
		if ($sdata.config.footer) {
			$sdata.config.footer.forEach(function(ci) {
				var itmdata = {
					title: ci.title,
					icon: ci.icon
				};
				var url = that.ui.sdata_link(null, ci);
				if (url)
					itmdata.url = url;
				item.items.push(itmdata);

			});
		}
		ritems.push(item);

		item = {
			title: locale.ui.misc,
			items: []
		};
		// add application menu items
		// add sync button
		if ($sdata.config && $sdata.config.pages) {
			var iaddSync = false;
			Object.keys($sdata.config.pages).forEach(
				function(pn) {
					if (!iaddSync) {
						iaddSync = (pn.indexOf(".$edit") >= 0) || (pn.indexOf(".$create") >= 0);
					}
				});
			if (iaddSync) {
				item.items.push({
					"type": "sync"
				});
			}
		}

		// add reinstall button
		item.items.push({
			"type": "reinstall"
		});
		ritems.push(item);
	};

	// Create a mobile ui structure for the page

	function _addLogout(panel) {
		var itms = panel.data.items[panel.data.items.length - 1];
		itms.push({
			"type": "logout"
		});
	}

	function _load_page(page, params, uiData, pageData, cb) {
		var panel = null,
			rpanel = null;
		if ((page.page.useAppId === 2) && (!$sdata.config || ($sdata.config.id != page.application))) {
			$sdata.getAppConfig(page.application,
				function(config, error) {
					if (!config)
						throw new Error(
							"Application not found in local database\nPlease try to reinstall it\nhostname " + window.location.host + "\nappid[" + page.application + "]");
					$sdata.config = config;
					var apps = $sdata.config.applications;
					delete $sdata.config.applications;
					$sdata.applications = apps;
					if (!$sdata.config) {
						return cb("", null, {
							action: "start"
						}, null);
					}
					if ($sdata.config.pages) {
						Object.keys($sdata.config.pages).forEach(
							function(pagename) {
								var cp = $sdata.config.pages[pagename];
								if (cp.$prototype) {
									$proto.linkParents(cp.$prototype,
										null);
								}
							});
					}
					panel = that.getStaticUI("apppanel", page);
					rpanel = that.getStaticUI("ctxpanel");
					_addappItems(panel.data.items, rpanel.data.items,
						params, page);
					_afterEnhance(page, params, uiData, pageData, panel,
						rpanel, cb);
				});

		} else {
			if (!page.page.useAppId) {
				$sdata.config = null;
				panel = that.getStaticUI("mainpanel");
			} else {
				panel = that.getStaticUI("apppanel", page);
				rpanel = that.getStaticUI("ctxpanel");
				_addappItems(panel.data.items, rpanel.data.items, params, page);
			}
			_afterEnhance(page, params, uiData, pageData, panel, rpanel, cb);

		}

	};

	// Create a mobile ui structure for the page
	var _loadDataAndDesign = function(query, page, cb) {
		var pageData = null,
			uiData = {};
		// Apge information is stored in URi
		var params = _parsePageURI(query, page.pageName);
		if (!params.representation && page.page.ui) {
			params.representation = page.page.ui;
			// try to get representation and facet
			_parseRepresentation(params);
		}
		if (!params.representation)
			return cb("", null, null, null);

		_load_page(page, params, uiData, pageData, cb);

	};

	// remove a given page
	that.removePage = function(page) {
		var controller = $.jqmData(page, "controller");
		if (controller) {
			//$helpers.log("Remove page" + (controller ? (": " + (controller.pageInfo && controller.pageInfo.page && controller.pageInfo.page.id) + "-" + (controller.pageInfo && controller.pageInfo.pageId || "")) : ""));
			controller.remove();
		}
		var $t = $(page);
		$.removeWithDependents($t);

	};

	// remove all pages
	that.removeAllPages = function(exclude) {
		exclude = exclude || [];
		exclude.push("page-template");

		var $pages = $('div[data-role="page"]');
		if ($pages && $pages.length) {
			var i = $pages.length,
				page;
			while (i--) {
				page = $pages[i];
				if (exclude.indexOf(page.id) < 0)
					that.removePage(page);
			}
		}
	};

	that.hashOfUrl = function(url) {
		var ii = url.indexOf('#');
		if (ii >= 0)
			return url.substring(ii);
		return "";
	};

	// Parse page hash
	that.pageName = _pageName;

	// Check static actions
	that.actionName = _actionName;

	// Create a mobile ui structure for the page
	that.loadPage = function(query, page, cb) {
		_loadDataAndDesign(query, page, cb);
	};

	// Execute a static action
	that.execAction = _execAction;

	// Build page html from mobile ui structure
	that.buildPage = _buildPage;
	that.refreshPage = function() {
		return window.location.reload();
		window.setTimeout(function() {
			return $.mobile.changePage(window.location.hash, {
				// changeHash: true,
				allowSamePageTransition: true,
				transition: "none"
			});

		}, 0);
		// return;
	};

	// Open home page
	that.goHome = function(controller, appid) {
		var hash = "#" + that.PAGES.start.id;
		if (!appid && !controller && $.mobile.activePage) {
			controller = $.jqmData($.mobile.activePage[0], "controller");
		}
		if (controller && controller.applicationId)
			appid = controller.applicationId;
		if (appid)
			hash = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(appid);
		$.mobile.changePage(hash, {
			allowSamePageTransition: true,
			reverse: true
		});
	};

	// Open a given page
	that.goToPage = function(controller, hash, appid) {
		var hash = "#" + hash;
		if (!controller && $.mobile.activePage) {
			controller = $.jqmData($.mobile.activePage[0], "controller");
		}
		if (controller && controller.applicationId)
			appid = controller.applicationId;
		if (appid)
			hash = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(appid);
		$.mobile.changePage(hash, {
			allowSamePageTransition: true,
			reverse: true
		});
	};

	// History.back
	that.doBack = function(controller) {
		$.mobile.back();
	};

	// Display errors
	that.showErrors = function(controller) {
		$.smobile.openErrorDlg(controller);
	};

	// Display error page if no error viewer in a page
	that.gotoErrPage = function() {
		var hash = "#errors";
		if ($sdata.config && $sdata.config.id)
			hash = "#apperrors-" + $sdata.config.id;
		$.mobile.changePage(hash, {
			allowSamePageTransition: true
		});
	};

	// Display Draft (synchro) page
	that.showSends = function(controller) {
		if ($sdata.config && $sdata.config.id) {
			$.mobile.changePage("#send-" + $sdata.config.id, {
				allowSamePageTransition: true
			});
		}
	};

	// Create a JQM DOM page from template
	that.createPage = function(page) {
		var $ptemplate = $("#page-template");
		var $page = $ptemplate.clone().attr('data-' + $.mobile.ns + 'url',
			page.pageName).attr('id', page.domid);
		if (page.page.isHome) {
			if (!page.page.useAppId) {
				$page.attr('data-' + $.mobile.ns + 'theme', "h");
			}
		}
		return {
			$page: $page,
			$template: $ptemplate
		};
	};

	// Create a dialog
	that.createDialog = function(uiData, pageData) {
		var page = _pageName('#dialog'),
			uiId = "dialog";
		var cp = that.createPage(page);
		var options = {
			transition: 'pop',
			role: 'dialog',
			changeHash: true
		};
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData,
			pageData, {
				$createActivity: true
			}, page, cp.$template, function() {
				var controller = $.jqmData(cp.$page[0], "controller");
				var panel = cp.$page.children('#panel-template');
				panel.attr("id", controller.prefix + "panel");
				panel = cp.$page.children('#right-panel-template');
				panel.attr("id", controller.prefix + "rpanel");
				if (uiData.actions) {
					controller.pageActions = uiData.actions;
					delete uiData.actions;
				}

				$.mobile.changePage(cp.$page, options);
				controller.bindData();
			});

	};

	// Create and got to a detail page for a x-reference , x-array line, filter
	// object
	// Optionnal - cb called afet page has been built
	that.createDetail = function(uiData, pageData, parent, cb) {
		pageData = $helpers.clone(true, {}, pageData);
		uiData.options = uiData.options || {};
		uiData.options.detail = true;
		var page = _pageName(parent ? ('#page-' + parent.applicationId + '-' + $helpers
			.uuid()) : "#dialog"),
			uiId = "dialog";
		var cp = that.createPage(page);
		cp.$page.attr('data-url', '#' + page.longPageName);
		var options = {
			transition: "slide",
			changeHash: true
		};
		// elf.options.url.entity
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData,
			pageData, {
				$createActivity: true
			}, page, cp.$template, function() {
				var controller = $.jqmData(cp.$page[0], "controller");
				var panel = cp.$page.children('#panel-template');
				panel.attr("id", controller.prefix + "panel");
				panel = cp.$page.children('#right-panel-template');
				panel.attr("id", controller.prefix + "rpanel");
				if (parent)
					controller.options.url = parent.options.url;
				if (uiData.actions) {
					controller.pageActions = uiData.actions;
					delete uiData.actions;
				}
				if (cb) {
					cb(controller, cp.$page);
				}
				$.mobile.changePage(cp.$page, options);
				controller.bindData();
			});

	};

	that.showError = function(settings, msg) {
		$.mobile.showPageLoadingMsg($.mobile.pageLoadErrorMessageTheme, msg || $.mobile.pageLoadErrorMessage, true);
		// hide after delay
		setTimeout($.mobile.hidePageLoadingMsg, 3000);
	};

	that.silentAction = function(error) {
		if (error.action === "start") {
			that.goHome(null);
		}
	};

	that.addLayout = function(parentLayout, layoutData) {
		return null;
	};

	that.addControl = function(parentLayout, c, after) {
		after();
	};

	that.setEvents = function(c, $c) {
		return null;
	};

	// execute an Sdata URL
	that.parseURL = function(u, page, cb) {
		var doEncodeHref = true;
		var filter = null,
			initData = null,
			url = {
				method: "GET"
			};
		var params = _parsePageURI(u.search || u.hash, page.pageName);
		var filters = null;
		var base = u.domain + u.pathname + ($helpers.hashFirst() ? ('#' + page.longPageName) : "");
		if (!params.representation && page.page.ui)
			params.representation = page.page.ui;
		var options = {
			url: params.url
		};
		if (params.url && (params.facet !== "$dashboard")) {
			if (((params.facet === "$query") || (params.facet === "$lookup")) && !params.nofilter) {
				filters = that.loadFilter(params.representation + '.' + params.facet);
				filters = (filters && filters.filters && filters.filters.length) ? filters.filters : null;
			}
			var doLoadFav = false;
			if ((params.facet === "$query") || (params.facet === "$lookup")) {
				doLoadFav = true;
				if ($sdata.config) {
					var pd = $sdata.config.pages[params.representation + '.' + params.facet];
					if (pd && pd.$article && (pd.$article.$favorites === false))
						doLoadFav = false;
				}
			}
			var opts = {
				$uiRequest: true,
				$loadFav: doLoadFav,
				$title: params.title,
				$method: url.method,
				$init: initData,
				$filter: filter,
				$ui: params.ui,
				$type: params.type,
				success: function(data, headers) {
					headers = headers || {};
					var href = u.domain + u.pathname;
					if (headers.location) {
						if (headers.location.indexOf("http") !== 0)
							delete headers.location;
					}
					var newURI = headers.location ? headers.location : params.url;
					if (headers && headers.favorites)
						options.favorites = headers.favorites;

					options.url = newURI;
					if (headers.status > 300) {
						if (page.application)
							href = href + "#" + that.PAGES.home.id + that.hash_sep + page.application;
						/*if ((headers.status == 404) && page.application) {
							headers.status = 500 ;
						}*/

						if ((headers.status == 404) && page.application) {

							var purl = $sdata.parseSdataUri(newURI);
							if (purl.id) {
								// detail or edit not found ---> show query
								var param = {
									representation: purl.query.representation
								};
								_parseRepresentation(param);
								purl.query.representation = param.representation + '.$query';
								purl.id = '';
								var qurl = $sdata.getUri(purl);
								// redirect to $query
								//$helpers.clearErrors();
								options.stop = true;
								window.location.hash = that.PAGES.page.id + that.hash_sep + $helpers
									.encodeURIComponent(page.application) + $helpers
									.encodeURIComponent('?url=' + $helpers
										.encodeURIComponent(qurl));
								//return ;
							} else {
								// redirect to home
								//$helpers.clearErrors();
								options.stop = true;
								window.location.hash = that.PAGES.home.id + that.hash_sep + $helpers
									.encodeURIComponent(page.application);
								//
							}
						} else
							href = href + "#" + that.PAGES.start.id;
						return cb(href, data, true, options);
					} else if (headers.status === 100) {
						options.stop = true;
						return cb("", data, false, {
							stop: true
						});
					} else {
						var search = '?url=' + $helpers.encodeURIComponent(newURI);
						search = base + (doEncodeHref ? $helpers
							.encodeJsmQuery(search) : search) + ($helpers.hashFirst() ? "" : ('#' + page.longPageName));
						options.filters = filters;
						return cb(search, data, false, options);
					}

				}
			};
			if (url && url.options)
				$.extend(opts, url.options);
			if (filters) {
				return opts.success({
					$resources: []
				}, {
					status: 200
				});
			}
			return $sdata.execURL(params.url, opts);
		}
		var ch = base;
		if ((params.facet === "$dashboard") && params.url) {
			var ch = '?url=' + $helpers.encodeURIComponent(params.url);
			ch = base + (doEncodeHref ? $helpers.encodeJsmQuery(ch) : ch) + ($helpers.hashFirst() ? "" : ('#' + page.longPageName));
			options.url = params.url;
		}
		var cpd = null;
		// This is the way data are sent to static pages
		// -> ui[page.id] describes the page and ui[page.id + '_data'] describes
		// the data
		if (page.page && !page.page.db && !page.page.useAppId && that.staticui[page.page.id + "_data"]) {
			cpd = that.staticui[page.page.id + "_data"]();
		}
		return cb(ch, cpd, false, options);
	};

	// Load application Data
	that.load = function(appData, progress, after) {
		$sdata.authenticate(function(ad, error, offline) {
			if (error) {
				if (after)
					after();
			} else {
				return that._load(appData, progress, after);
			}
		});
	};

	that._installDatainLocalDB = function(urls, after, doDelete) {
		var len = urls.length + 1,
			count = 1,
			fail = false;
		var entities = {}, favs = {};
		$helpers
			.each(
				urls,
				function(url, index, next) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						return next();
					}
					var purl = $sdata.parseSdataUri(url.url);
					if (url.method === "POST") {
						var rep = $sdata
							.url2representation(purl);
						if (favs[rep])
							return next();
						favs[rep] = true;
						$sdata
							.post(
								url.url,
								url.data,
								function(data, headers) {
									if (fail || $helpers
										.hasErrors()) {
										fail = true;
										return next();
									}
									data.$resources = data.$resources || [];
									var ins = [];
									try {
										if ($sdata.config.pages[purl.query.representation]) {
											var cp = $sdata.config.pages[purl.query.representation].$prototype.$properties.$resources.$item;
											data.$resources
												.forEach(function(
													ii) {
													if (ii.$httpStatus === 200) {
														purl.id = $proto
															.parseExpression(
																cp.$key, {
																	data: $proto
																		.exprData(ii),
																	$prototype: cp
																},
																"$key");
														delete ii.$httpStatus;
														ins
															.push({
																data: ii,
																url: $sdata
																	.getUri(purl)
															});
													}
												});
										}
									} catch (ex) {
										return next();
									}
									delete purl.id;
									// Refresh favorites
									// - set new appid
									return $sdata
										.insertFav(
											url.appid,
											$sdata
											.getUri(purl),
											ins,
											next);
								});
					} else {
						var key = $sdata.url2entity(purl);
						if (entities[key])
							return next();
						entities[key] = true;
						$sdata.GET(url.url, function(data,
							headers) {
							if (fail || $helpers.hasErrors()) {
								fail = true;
								return next();
							}
							if (data && data.$resources && data.$resources.length) {
								// find best entity prototype
								var proto = $sdata
									.bestProto(purl);
								var cfg = {
									id: url.appid,
									url: purl,
									$prototype: proto
								};
								if (proto) {
									return $sdata.initData(cfg,
										data.$resources,
										true, next);
								}
							}
							return next();

						});
					}
				}, function() {
					if (after)
						after();
				});

	},

	// SAve application in local DB after install ou reinstall
	that._saveAppsInDB = function(after, apps, fail, progress, count,
		len) {
		// Parallel processes
		$helpers
			.each(
				apps,
				function(capp, index, next) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						return next();
					}
					var favorites = capp.favorites;
					capp.favorites = null;
					if (capp.data) {
						var urls = [];
						if (capp.data && capp.data.entities) {
							Object
								.keys(capp.data.entities)
								.forEach(
									function(
										representation) {
										var config = capp.data.entities[representation],
											url;
										if (config.sync || $proto.forceSync) {
											config.sync = true;
											url = {
												method: "GET",
												appid: capp.id,
												url: capp.baseURL + "/" + config.pluralType + "?representation=" + representation + ".$bulk" + "&role=",
												entity: capp.baseURL + "/" + config.pluralType,
												config: capp.data,
												representation: representation
											};
											urls
												.push(url);
										}

									});
							if (favorites) {
								var batchList = Object
									.keys(favorites);
								batchList
									.forEach(function(
										favName) {
										var fav = favorites[favName];
										var curl = {
											method: "POST",
											url: fav.$url,
											data: fav,
											appid: capp.id,
											representation: favName
										};
										urls.push(curl);
									});
							}

						}

					}
					$sdata
						.installApp(
							capp,
							function(resdata, error) {
								if (!error) {
									count++;
									if (progress)
										progress(count,
											len,
											"Done");
								} else
									fail = true;
								if (fail || $helpers
									.hasErrors()) {
									fail = true;
									return next();
								}
								$sdata
									.clearSdata(
										capp.id,
										function() {
											$sdata.config = capp.data;
											$sdata.config.id = capp.id;
											$sdata.config.$info = {
												url: capp.url,
												version: capp.version,
												title: capp.title,
												icon: capp.icon,
												description: capp.description,
												dsdescription: capp.dsdescription
											};
											if ($sdata.config.pages) {
												Object
													.keys(
														$sdata.config.pages)
													.forEach(
														function(
															pagename) {
															var cp = $sdata.config.pages[pagename];
															if (cp.$prototype) {
																$proto
																	.linkParents(
																		cp.$prototype,
																		null);
															}
														});
											}

											return that
												._installDatainLocalDB(
													urls,
													next,
													true);
										});
							});
				}, function() {
					// All threads complete - cal after
					if (progress)
						progress(len, len, "Done");
					if (after)
						after();
				});
	};

	// Get application data (representations) and stores data in local DB

	function _doinstall(apps, appData, progress, after) {
		var len = apps.length * 2 + 1,
			count = 0;
		if (progress)
			progress(0, len, "");
		var fail = false;
		// FDB - manage errors
		var res = {
			ko: [],
			ok: []
		};
		$helpers.each(apps, function(capp, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				res.ko.push(capp);
				return next();
			}

			$sdata.applicationDetails(capp, function(data) {
				count++;
				if (progress)
					progress(count, len, "Done");
				capp.data = data;
				if (!data) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						res.ko.push(capp);
						return next();
					}
				}
				if (data) {
					res.ok.push(capp);
					capp.title = data.title;
					capp.description = data.description;
					capp.icon = data.icon || data.code;
					data.dsdescription = capp.dsdescription;
					data.baseUrl = capp.baseURL;
				}
				return next();
			});
		}, function() {
			if (fail) {
				if (after)
					return after(res);
			}
			if (appData.$reinstall)
				delete appData.datasets;
			that._saveAppsInDB(function() {
				after(res);
			}, apps, false, progress, count, len);
		});
	}

	// Install/Reinstal applications
	that._load = function(appData, progress, after) {
		var apps = [];
		if (appData.$reinstall) {
			delete appData.$reinstall;
			if ($sdata.config && $sdata.config.id) {
				var cd = {};
				cd.id = $sdata.config.id;
				cd.baseURL = $sdata.config.baseUrl;
				cd.description = $sdata.config.$info.description;
				cd.dsdescription = $sdata.config.$info.dsdescription;
				cd.url = $sdata.config.$info.url;
				cd.title = $sdata.config.$info.title;
				cd.icon = $sdata.config.$info.icon;
				cd.version = $sdata.config.$info.version;
				apps.push(cd);
				// Load favorite list before
				return $sdata.loadFavoriteList({}, function(favorites) {
					if (favorites)
						cd.favorites = favorites;
					return _doinstall(apps, appData, progress, after);

				});
			} else {
				return after();
			}
		} else {
			var datasets = appData.datasets;
			datasets.forEach(function(dataset) {
				if (dataset.selected === false)
					return;
				var cd = $.extend(true, {}, appData);
				cd.id = $helpers.uuid();
				cd.baseURL = cd.baseURL + dataset.dataset;
				cd.description = cd.description;
				cd.dsdescription = dataset.description;
				cd.version = cd.version || "0.000";
				apps.push(cd);
			});
		}
		_doinstall(apps, appData, progress, after);
	};
	/* 
	 * **************************
	 * MULTISELECTION EXTENSION *
	 * **************************
	 */
	that.multisel = {
		addRightBtn: function(uiData) {
			uiData.hbuttons.push({
				id: "multiswitch",
				title: $helpers.locale().ui.multiswitch,
				disabled: false,
				isMultiSel: true,
				action: "multiswitch",
				jmdata: {
					"data-icon": "s-cancel",
					"data-transition": "none"
				}
			});
		},
		_addMenus: function(controller, html, options, ui) {
			options = options || {};
			html.push('<div class="s-m-header-cell-select');
			if (options.type) html.push(' ' + options.type);
			html.push('">');
			var id = controller.prefix + options.id;
			html.push('<select id ="' + id + '" ');
			options.nativeDlog = false;
			if (!options.nativeDlog) html.push('data-native-menu="false" data-theme="a" data-overlay-theme="a" ');
			html.push('>');
			var itms = options.items || [];
			itms.forEach(function(itm, i) {
				html.push('<option ');
				if (i == 0) html.push('data-placeholder="true" ');
				html.push('value="' + itm.value + '" >');
				html.push(itm.title);
				html.push('</option>');
			});
			html.push('</select>');
			html.push('</div>');
			if (!ui.hmenus) {
				ui.hmenus = [];
			}
			ui.hmenus.push(id);
		},
		addMultiselMenus: function(controller, ui, html) {
			var self = this;
			var cp = $proto.getProto(controller.getPageData());
			var links = cp.$links || {};
			var multiSelLinks = [];
			for (var p in links) {
				if (p.indexOf("$") !== 0) {
					var lnk = links[p];
					var ttl = $proto.execExpression(lnk.$title || "", cp);
					if (ttl.length > 0) {
						multiSelLinks.push({
							value: p,
							title: ttl
						});
					}
				}
			}
			if (multiSelLinks.length > 0) {
				var locale = $helpers.locale();
				self._addMenus(controller, html, {
					id: 'multisel-select',
					type: 'left',
					items: [{
						title: $helpers.format(locale.ui.multinbsel, [0])
					}, {
						value: "unselall",
						title: locale.ui.unselall
					}, {
						value: "selall",
						title: locale.ui.selall
					}]
				}, ui);
				multiSelLinks.splice(0, 0, {
					title: locale.ui.multinacts
				});
				self._addMenus(controller, html, {
					id: 'multisel-acts',
					items: multiSelLinks,
					type: 'right'
				}, ui);
				return true;
			}
			return false;
		},
		_confirm: function(controller, cb, action, nbSel) {
			var locale = $helpers.locale();
			var opts = {
				text1: $helpers.format(locale.confirmact, [action]),
				text2: $helpers.format(locale.ui.multinbsel, [nbSel]),
				noBack: true,
				yesBack: true,
				yesCb: cb
			};
			$helpers.confirmDlog.call(controller, opts);
		},
		_selectMenuHeader: function($select, controller) {
			var self = this;
			var _log = null; //console.log
			if (!$select || !controller) {
				return;
			}
			var $option = $select.find('option:selected');
			try {
				if ($.mobile.activePage && $option) {
					var data = controller.multiSelData();
					var value = $select.find('option:selected').val();
					if (value == "unselall") {
						controller.multiSelReset(false);
					} else if (value == "selall") {
						controller.multiSelSelectAll();
					} else if (value && data.length > 0) {
						var cp = $proto.getProto(controller.getPageData());
						var links = cp.$links || {};
						var lnk = links[value];
						if (lnk) {
							self._confirm(controller, function() {
								var $lst = controller.multiselActStart($select, data.length);
								try {
									var parallelException = null;
									$helpers.each(data, function(lineData, ii, doNext) {
										var record = controller.exprData(lineData.data);
										var url = $proto.parseExpression(lnk.$url, {
											data: record,
											$prototype: cp
										}, "$url");
										_log && _log("_selectMenuHeader send action " + value + "\n\t" + url);
										// Customization of post - no diagnoses pushed and errorHandler
										var postOptions = {
											noDiagnoses: true,
											errHandler: function(exception, jqXHR, textStatus, errorThrown) {
												if (exception) {
													// To catch JS Exception in parallel mode
													//  -> doNext(true) -> Stop execution
													parallelException = exception;
													doNext(true);
												} else {
													// Http exception - Display message
													_log && _log("\tResult KO - " + jqXHR.status);
													var message;
													if (jqXHR.responseText) {
														try {
															var resData = JSON.parse(jqXHR.responseText);
															_log && _log(JSON.stringify(resData, null, 2));
															message = $helpers.dataReadErrors(resData).messages;
														} catch (e) {
															message = jqXHR.responseText;
															_log && _log(jqXHR.responseText);
														}
													}
													controller.multiselActUpdt(lineData.$elmt, false, message, ii + 1, data.length);
													doNext();
												}
											}
										};
										$sdata.post(url, {}, function(resdata) {
											_log && _log("\tResult OK");
											var ok, message;
											if (false) {
												// To test parallel exception handling
												throw new Error("Test parallel Exception");
											}
											if (true && value == "UNLOC") {
												// To test display of errors returned by server
												ok = ii % 2 == 0;
												message = ok ? "Test action succeeded" : "It's just to test error display";
											} else if (resdata == null) {
												ok = true;
												message = null;
											} else {
												var infos = $helpers.dataReadErrors(resdata);
												_log && _log(JSON.stringify(infos, null, 2));
												ok = true;
												message = infos.message;
											}
											controller.multiselActUpdt(lineData.$elmt, ok, message, ii + 1, data.length);
											doNext();
										}, null, postOptions);
									}, function() {
										controller.multiselActStop(parallelException);
									});
								} catch (e) {
									controller.multiselActStop(e);
								}
							}, $option.html(), data.length);
						}
					}
				}
			} finally {
				$select.selectmenu("close");
				// Display place-holder instead of selected value
				var $ttl = $select.find('option[data-placeholder="true"]');
				if ($ttl) $ttl.attr("selected");
				if ($option) $option.removeAttr("selected");
				$select.selectmenu("refresh");
			}
		},
		bindEvents: function(controller, ui) {
			var self = this;
			// Menu header
			if (ui.hmenus) {
				ui.hmenus.forEach(function(id) {
					$('#' + id).bind("change", function() {
						var $select = $(this);
						var controller = that.pageController($.mobile.activePage);
						if (controller == null) {
							// If action list is too large the widget displays a page with the list
							// -> Active page is not the $query page
							// -> We call _selectMenuHeader with controller as parameter witn timeout to cal after current page is closed
							// TODO - Temporailly -> To see how to make sur the page is closed
							window.setTimeout(function() {
								// Normally we should be on quey page
								var controller = that.pageController($.mobile.activePage);
								self._selectMenuHeader($select, controller);
							}, 200);
						} else {
							// Current page is query page
							self._selectMenuHeader($select, controller);
						}
					});
				});
			}
		}
	};

})(jQuery);