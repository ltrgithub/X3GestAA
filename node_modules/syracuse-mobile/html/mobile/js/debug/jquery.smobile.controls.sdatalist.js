"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $auth = $proto.auth;
	var $sdata = $.sdata || {};
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	that.controls.SDataList = {
		field2proto: function(controller, fn) {
			var pc = controller;
			var pd = pc.getPageData(),
				res = [];
			if (pd && pd.$prototype && pd.$prototype.$properties && pd.$prototype.$properties.$resources && pd.$prototype.$properties.$resources.$item) {
				return pd.$prototype.$properties.$resources.$item.$properties[fn];
			}
			return null;
		},
		rightValue: function(controller, filter) {
			var cp = that.controls.SDataList.field2proto(controller, filter.field);
			var cv, value = filter.value == null ? "" : filter.value;
			switch (cp.$type) {
				case "application/x-password":
				case "application/x-string":
					cv = value.replace(/'/g, "\\'");
					if (filter.op === "like") cv = '%' + cv + '%';
					else if (filter.op === "like_s") cv = cv + '%';
					cv = "'" + cv + "'";
					return cv;
				case "application/x-integer":
					return value;
				case "application/x-real":
					return value;
				case "application/x-decimal":
					return value;
				case "application/x-quantity":
					//ok
					return value;
				case "application/x-date":
					if (!value) return null;
					return '@' + value + '@';
				case "application/x-datetime":
					return '@' + value + '@';
				case "application/x-time":
					return null;
				case "application/x-boolean":
					return value ? "true" : "false";
				case "application/x-choice":
					if (cp.$value.$type === "application/x-string") {
						return "'" + value.replace(/'/g, "\\'") + "'";
					} else return value + "";
					break;
				case "application/x-reference":
					cv = (value || '').replace(/'/g, "\\'");
					cv = "'" + cv + "'";
					return cv;
				default:
					break;

			}
			return null;
		},
		refresh: function(controller, options, $c, id) {
			var html = [];
			that.controls.SDataList.createItems(controller, options, html);
			$c.html(html.join('')).listview("refresh");
			controller.footerHandler(null, false);
		},
		createItems: function(controller, options, html) {
			var page = controller.getPageData();
			var favs = controller.extraData.bookmarks || [];
			if (!favs.length) favs = null;
			var pageproto = $proto.getProto(page);
			var cp = $proto.getProto(page, options.bind);
			var coptions = {}, info = {
					list: true,
					noCache: $proto.auth.designMode,
					// No favorites in offline mode
					addFav: controller.canLoadFav() && $helpers.online()
				};
			var $article = $proto.getArticle(page, options.bind);
			$article = $auth.checkQueryArticle(cp, $article, info);
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			var online = $helpers.online();
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {
					jmdata: {
						"data-iconshadow": false,
						"data-corners": false,
						"data-shadow": false,
						"data-icon": "s-noicon",
						// is c theme changes change also mobile.css (s-m-slist-item) end ui-btn-up-c class below
						"data-theme": "c"
					}
				};
				var chtml = [],
					licss = ["s-m-slist-item"];
				$proto.auth.sdi($article, chtml, coptions, controller, cp, value, info);
				var content = chtml.join('');
				html.push('<li');
				$helpers.addJqmData(cd, html);
				if (info.$image) {
					licss.push($helpers.ui.consts.normal_icon);
					cd.css = [$helpers.ui.consts.normal_icon];
				}
				if (licss.length) html.push(' class="' + licss.join(' ') + '"');
				if (value.$uuid) html.push('data-uuid=' + value.$uuid);
				html.push('>');
				if (detail) {
					cd.url = $proto.parseExpression(detail, {
						data: controller.exprData(value),
						$prototype: cp
					}, "$url");
				}
				if (options.$lookup) {
					cd.action = "validate";
					cd.actionParams = index + "";
					// link enabled for lookup in offline mode
					cd.noLinkOffline = false;
				} else {
					// No link to detail in offline mode
					cd.noLinkOffline = true;
				}
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});
				if (info.addFav) {
					var favi = 'off';
					if (favs) {
						var key = $proto.parseExpression(cp.$key, {
							data: controller.exprData(value),
							$prototype: cp
						}, "$key");
						if (favs.indexOf(key) >= 0) favi = 'on';
					}
					html.push('<div class="s-m-custom-icon" data-action="setfavorite" data-action-param="' + index + '"><div data-action-param="' + index + '" data-action="setfavorite" class="ui-icon ui-icon-s-fav-' + favi + '"></div></div>');
				};
				html.push('</li>');
			});
			if (resources.length === 0 && !$helpers.online()) {
				html.push('<li>' + $helpers.locale().ui.no_fav_online + "</li>");
			}

		},
		sync: true,

		navFooter: function(html, create) {
			var controller = this,
				ccd = controller.getValue(),
				hasNext = ccd && ccd.$links && ccd.$links.$next,
				hasPrev = ccd && ccd.$links && ccd.$links.$previous,
				html = html || [];
			that.controls.navFooter(true, hasNext, hasPrev, controller.prefix + 'nav', create, null, html);
			return html;

		},
		handler: function(c, after) {
			var controller = this;
			var online = $helpers.online();
			controller.footerHandler = that.controls.SDataList.navFooter.bind(controller);
			var html = [],
				options = c.data || {};
			var page = controller.getPageData();
			if (!page) return after({
				html: "",
				options: {}
			});
			var cp = $proto.getProto(page);
			var article = $proto.getArticle(page, options.bind);

			if (!cp) return after({
				html: "",
				options: {}
			});
			if (online) {
				if ($sdata.capabilities.showSearch) {
					html.push('<div class=""><table class="s-m-design" cellpadding="0" cellspacing="0" border="0"><tbody><tr>');
					html.push('<td class="space"></td>');
					html.push('<td class="all"><input id="' + c.id + '_search" data-type="text"  data-mini="true" /></td>');
					html.push('<td class="space"></td>');
					html.push('<td class="button"><a id="' + c.id + '_sbutton" href="#" data-role="button" data-mini="true" data-icon="search">' + $helpers.locale().ui.search + '</a></td>');
					html.push('</tr></tbody></table></div>');
				} else {
					html.push('<form class="ui-icon-alt s-m-space" id="' + c.id + '_search_form">');
					html.push('<input id="' + c.id + '_search" data-type="search"  data-mini="true" />');
					html.push('<ul id="' + c.id + '_list" data-role="listview" data-theme="d" data-autodividers="false" class="ui-listview-search"></ul>');
					html.push('</form>');
				}
			} else {
				html.push('<br>');
			}
			if (!options.$lookup) {
				var $filters = cp.$filters;
				if (article && article.$filters) $filters = article.$filters;
				var filters = $filters ? Object.keys($filters) : null;
				if (filters && filters.length && controller.config && controller.config.url) {
					var purl = controller.config.url;
					var af = ((purl.query && purl.query.filter) ? purl.query.filter : $proto.defaultFilter(cp));


					var sf = true;
					html.push('<div data-role="navbar" id = "' + c.id + '_filter"><ul>');
					filters.forEach(function(filter, i) {
						var cf = $filters[filter];
						html.push('<li><a data-action-filter="' + filter + '" href="#"');
						if (sf && (filter == af)) {
							sf = false;
							html.push(' class="ui-btn-active"');
						}
						html.push('>');
						html.push($helpers.htmlEncode($proto.parseExpression(cf.$shortTitle || cf.$title, {
							data: null,
							$prototype: cp
						}, "$title")));
						html.push('</a></li>');
					});
					html.push('</ul></div>');
				}
			}
			html.push('<ul id="' + c.id + '" class="s-m-list"  data-role="listview" data-filter="false"');
			$helpers.addJqmData(options, html);
			//html.push(' data-inset="true"');			
			html.push('>');
			that.controls.SDataList.createItems(controller, options, html);
			html.push('</ul>');
			controller.footerHandler(html, true);
			return after({
				html: html.join(''),
				bind: options.bind,
				options: options
			});

		},
		clickAll: function(e) {
			var controller = this.controller;
			var target = $(e.target);
			if (target) {
				if (controller.multiSelOn()) {
					target = target.closest(".s-m-slist-item");
					if (target) {
						controller.multiSelClick(target);
						// Return false to stop evt processing - detail link is canceld 
					}
					return false;
				} else {
					var a = target.attr("data-action");
					if (a === "setfavorite") {
						that.controls.SDataList._clickFav(controller, e);
						return true;
					} else {
						var to = target.attr("click-action-timeout");
						if (to) return false;
						setTimeout(function() {
							$(e.target).removeAttr("click-action-timeout");
						}, 500);
						target.attr("click-action-timeout", true);
						//#2579 - check active line to eventually hilite this lien on detail->List
						target = target.is("li") ? target : $(target.closest("li"));
						if (target && !target.is(".active")) {
							target.addClass("active");
							controller.activeBtnAdd(this.ctrlId, {
								target: target,
								klass: "active",
								restoreShow: false
							}); //restoreTimeout remove the class afetr tthe given timeout, restoreTimeout:2000})
						}
						// No return - continue std process
					}
				}
			}
		},
		_clickFav: function(controller, e) {
			if (controller.disabled) return false;
			$helpers.clearErrors();
			var p = parseInt($(e.target).attr("data-action-param"), 10);
			var elem = controller.getValue().$resources[p];
			if (elem) {
				var page = controller.getPageData();
				var pageproto = $proto.getProto(page);
				var cp = $proto.getProto(page, "$resources");
				var url = $proto.parseExpression(cp.$url, {
					data: controller.exprData(elem),
					$prototype: cp
				}, "$url");
				var purl = $sdata.parseSdataUri(url);
				purl.query = purl.query || {};
				purl.query.representation = controller.ui;
				url = $sdata.getUri(purl);
				controller.disabled = true;
				$sdata.switchFav(url, elem, function(res) {
					if ($helpers.hasErrors()) {
						//controller.doRefresh();
						$.smobile.showErrors(controller);
					}
					if (!res) res = {
						op: 0
					};
					controller.disabled = false;
					var favs = controller.extraData.bookmarks = controller.extraData.bookmarks || [],
						oldc, newc, i;
					if (res.op === 2) {
						// 2 -> Remove
						i = favs.indexOf(res.key);
						if (i >= 0) {
							favs.splice(i, 1);
							newc = 'ui-icon-s-fav-off';
							oldc = 'ui-icon-s-fav-on';
						}

					} else if (res.op === 1) {
						// 1 -> Insert
						i = favs.indexOf(res.key);
						if (i < 0) {
							favs.push(res.key);
							newc = 'ui-icon-s-fav-on';
							oldc = 'ui-icon-s-fav-off';
						}
					}
					if (newc) {
						var elem = e.target.firstChild || e.target;
						$(elem).addClass(newc).removeClass(oldc);
					}
					// favSelection == true if filter on favorites is enabled
					var rep = controller.ui,
						favSelection = $sdata.favorite(rep);
					// We reload if favSelection and delete -> refresh the list
					var reload = favSelection && res.op === 2;
					//  Issue #2594 
					if (favSelection && favs.length == 0) {
						// Disabled favorite selectio if no favorites
						favSelection = $sdata.favorite(rep, false);
					}
					controller.showHideFav(null, favSelection);
					if (reload) {
						window.location.reload();
					}
				});
			}
			e.preventDefault();
		},
		_clickLookup: function(e) {
			var controller = this;
			e.preventDefault();
			if (e && e.target) {
				var target = $helpers.getTarget(e);
				if (!target) return;
				var p = $(target).attr("data-action");
				if (p == "setfavorite") {
					that.controls.SDataList._clickFav(controller, e);
					return;
				} else if (!isNaN(p = parseInt(p, 10))) {
					if (controller.getCurrentData()) {
						var item = controller.getCurrentData().$resources[p];
						if (controller.parent) {
							if (controller.config && controller.config.url && controller.config.url.query && controller.config.url.query.control) {
								var cc = controller.parent.controls[controller.config.url.query.control];
								if (cc) {
									var ccp = that.controls[cc.uiClass];
									if (ccp.setValue) {
										var proto = $proto.getProto($sdata.config.pages[this.page]);
										var cp = proto ? proto.$properties.$resources.$item : null;
										if (cp && cp.$lookupdescr) {
											item.$lookupdescr = item[cp.$lookupdescr];
										}
										return ccp.setValue(controller.parent, cc, item, that.doBack);
									}
								}
							}
						}

					}
				}
			}
			that.doBack();
		},
		events: function($c, c) {
			var controller = this;
			var ceid = c.id;
			var online = $helpers.online();
			if (c.options.$lookup) {
				$c.click(that.controls.SDataList._clickLookup.bind(controller));
			} else if (online) {
				// Only in mode online
				$c.click(that.controls.SDataList.clickAll.bind({
					ctrlId: ceid,
					controller: controller
				}));
				$('#' + ceid + "_filter").click(that.controls.SDataList._execFilter.bind({
					ctrlId: ceid,
					controller: controller
				}));
			}
			if (online) {
				// Only in mode online
				if ($sdata.capabilities.showSearch) {
					$('#' + ceid + "_sbutton").click(that.controls.SDataList._execSearch.bind({
						id: ceid,
						controller: controller
					}));
				} else {
					that.controls.SDataList._initSearchEvents($c, c, controller);
				}
				if (controller.extraData.filters) {
					that.controls.SDataList.applyFilter(controller, function() {}, true);
				}
			}
		},
		/*
        Bind required events to search input field
         */
		_initSearchEvents: function($c, c, controller) {
			var ceid = c.id;
			var $form = $('#' + ceid + "_search_form");
			var $input = $('#' + ceid + "_search");
			var $clear = $input.siblings('.ui-input-clear');
			var $ul = $('#' + ceid + "_list");

			// Submit search
			$form.submit(that.controls.SDataList._execSearch.bind({
				id: ceid,
				controller: controller
			}));

			// Input changes on seach tearm
			$input.on("input", function(e) {
				that.controls.SDataList._searchInputChanged($input, $ul);
			});

			// Clear button of input field
			$clear.on('click', function(e) {
				that.controls.SDataList._updateAutocompleteList($ul, "");
			});
		},
		/*
         $input: search term input field
         $ul: <ul> containing matching auto complete suggestions
         */
		_searchInputChanged: function($input, $ul) {
			var value = $input.val();

			if (value) {
				$sdata.getAutocompleteList(value, {}, function(values) {
					var html = "";
					if (values !== null) {
						$.each(values, function(i, val) {
							html += '<li data-icon="search" data-filtertext="' + val + '"><a href="#">' + val + '</a></li>';
						});
					}
					that.controls.SDataList._updateAutocompleteList($ul, html);
					$ul.delegate('li', 'click', function() {
						$input.val($(this).attr('data-filtertext'));
						$input.focus();
						that.controls.SDataList._updateAutocompleteList($ul, "");
					});
				});
			} else {
				that.controls.SDataList._updateAutocompleteList($ul, "");
			}
		},
		/*
        $ul: <ul> containing matching auto complete suggestions
        content: empty string or <li> html tags to add into auto complete list
         */
		_updateAutocompleteList: function($ul, content) {
			$ul.html(content || "");
			$ul.listview("refresh");
			$ul.trigger("updatelayout");
		},
		_execUrl: function(purl, controller, after, noClearError) {
			if (controller.disabled) {
				if (after) after();
				return;
			}
			// Clear multiselected lines
			controller.multiSelReset();
			$sdata.getUri(purl);
			$.mobile.loading('show', {
				theme: "a",
				text: $helpers.locale().ui.loading
			});
			if (noClearError !== true) {
				$helpers.clearErrors();
			}
			controller.disabled = true;
			$sdata.execURL(purl.uri, {
				$uiRequest: true,
				$loadFav: controller.canLoadFav(),
				error: function() {
					controller.disabled = false;
					$.mobile.loading('hide');
					if (after) after();
				},
				success: function(cd, headers) {
					controller.disabled = false;
					controller.extraData.bookmarks = headers ? headers.favorites : null;
					$.mobile.loading('hide');
					if (cd) {
						controller.config.url = purl;
						// refresh sdatalist 
						controller.setData('', cd);
						controller.doRefresh();
					} else {
						if ($helpers.hasErrors()) {
							controller.config.url = purl;
							// refresh sdatalist 
							controller.setData('', {
								$ressources: []
							});
							$.smobile.showErrors(controller);
							//controller.doRefresh();
						}
					}

					if (after) after();

				}
			});
		},
		_execSearch: function(e) {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			e.preventDefault();
			var purl = controller.config.url;
			var cv = ($('#' + id + "_search")[0].value || "");
			var $ul = $('#' + id + "_list");
			var sv = (purl.query ? (purl.query.search || "") : "");
			that.controls.SDataList._updateAutocompleteList($ul, "");
			if (sv !== cv) {
				if (!cv) delete purl.query.search;
				else {
					purl.query = purl.query || {};
					purl.query.search = cv;
				}
				/*
                Remember search term and execute search
                 */
				$sdata.updateAutocompleteList(cv, {}, function() {
					that.controls.SDataList._execUrl(purl, controller);
				});
			}
		},
		applyFilter: function(controller, after, init) {
			var purl = controller.config.url;
			var filters = controller.extraData.filters;
			var lastFilter = controller.extraData.lastFilter || "";
			var newFilter = "",
				stag = "";
			if (filters) {
				filters.forEach(function(filter) {
					var cf = '(' + filter.fieldRequest + ' ' + (filter.op === "like_s" ? "like" : filter.op) + ' ' + that.controls.SDataList.rightValue(controller, filter) + ')';
					newFilter = newFilter + stag + cf;
					stag = ' and ';
				});
			}
			if (init || lastFilter != newFilter) {
				var hasFilter = newFilter && newFilter.length > 0;
				if (hasFilter) {
					purl.query = purl.query || {};
					purl.query.where = newFilter;
				} else if (purl.query) {
					delete purl.query.where;
				}
				if (controller.extraData.filterBtnId) {
					var $c = $('#' + controller.extraData.filterBtnId);
					if (hasFilter) {
						$c.removeClass('s-m-hidden');
					} else {
						$c.addClass('s-m-hidden');
					}
				}
				controller.extraData.lastFilter = newFilter + (filters ? filters.length : 0);
				that.controls.SDataList._execUrl(purl, controller, after, init === true);
			} else {
				after();
			}
		},
		_execFilter: function(e) {
			var obj = this;
			var controller = obj.controller;
			e.preventDefault();
			var target = $helpers.getTarget(e);
			if (!target) return;

			var purl = controller.config.url;
			var cv = $(target).attr("data-action-filter") || "";
			var sv = (purl.query ? (purl.query.filter || "") : "");
			if (sv !== cv) {
				if (!cv) delete purl.query.filter;
				else {
					purl.query = purl.query || {};
					purl.query.filter = cv;
				}
				that.controls.SDataList._execUrl(purl, controller);
			}
			//#2579
			var target = $(e.target);
			target = target.is("a") ? target : target.closest("a");
			if (target && !target.is(".ui-disabled, .ui-btn-active")) {
				controller.activeBtnAdd(obj.ctrlId + "_filter", {
					target: target,
					klass: "ui-btn-active",
					restoreShow: true
				});
			}
		}
	};

})(jQuery);