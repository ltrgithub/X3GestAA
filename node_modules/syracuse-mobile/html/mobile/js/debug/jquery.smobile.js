"use strict";
(function($) {
	var that = $.smobile || {};
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	var q_parser = /([^&=;]*)=?([^&;]*)/g; //  query parser
	that._uiCache = {};

	// mobile client pages by hash
	that.PAGES = {
		"start": {
			ui: "start.$static",
			useAppId: false,
			isHome: true,
			db: false
		},
		/* start page */
		"errors": {
			ui: "errors.$static",
			useAppId: false,
			db: false
		},
		/*error page  */
		"apperrors": {
			ui: "apperrors.$static",
			useAppId: 2,
			db: false,
			home: true
		},
		/*error page  */
		"home": {
			ui: "home.$static",
			useAppId: 2,
			isHome: true,
			db: true,
			cache: true
		},
		/*home page of application  */
		"about": {
			ui: "about.$static",
			useAppId: false,
			db: false,
			home: true
		},
		/*about sage*/
		"settings": {
			ui: "settings.$static",
			useAppId: false,
			db: false,
			home: true
		},
		/*settings sage*/
		"send": {
			ui: "send.$static",
			useAppId: 2,
			home: true
		},
		/*send page  */
		"page": {
			useAppId: 2,
			db: true,
			home: true
		},
		/* regular  page */
		"dialog": {
			useAppId: 1,
			db: true,
			home: false
		},
		/*regular  page */
		"apps": {
			ui: "applications.$static",
			useAppId: 0,
			db: false,
			home: true
		},
		/*application manager* */
		"logout": {
			ui: "logout.$static",
			useAppId: false,
			isHome: false,
			noLeftPanel: true,
			db: false
		}
	};
	Object.keys(that.PAGES).forEach(function(id) {
		that.PAGES[id].id = id;
	});

	that.pageIsDialog = function(page) {
		return (page.attr("data-" + $.mobile.ns + "role") === "dialog");
	};
	that.pageController = function(page) {
		return $.jqmData(page[0], "controller");
	};
	that.activeController = function() {
		return that.activePage ? that.pageController(that.activePage) : null;
	};
	that.pageIsDetail = function(page) {
		return ($.jqmData(page[0], 'detail') === "detail");
	};
	that.hash_sep = "-";
	$.smobile = that;
	that.loadFilter = function(representation) {
		var value = $sdata.loadRepData(representation);
		if (value && value.filter) return value.filter;
		return null;
	};
	// Called after loadPage
	that.PAGES.start.enhanceHandler = function(pdata, after) {
		// add installed applications
		var items = (pdata && pdata.content && pdata.content.menu && pdata.content.menu.data && pdata.content.menu.data.items) ? pdata.content.menu.data.items : null;
		if (!items) return after(pdata);

		$sdata.getInstalledApps(false, function(installed) {
			var locale = $helpers.locale();
			if (installed && installed.length) {
				installed.forEach(function(app) {
					items.push({
						data: {
							title: app.title,
							description: app.description,
							dsdescription: app.dsdescription,
							icon: app.icon,
							hash: that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(app.id)
						}
					});
				});
			} else {
				//	items.push({data:{title: locale.applicationmanager.title, divider:true}});
				items.push({
					data: {
						title: locale.applicationmanager.title,
						description: locale.applicationmanager.description,
						icon: "dash.appmanager",
						hash: that.PAGES.apps.id
					}
				});

			}
			after(pdata);
		});
	};
	// FDB -  Issue #2488 - Called after data have been loaded
	// Override standard enhanceHeader method - enhanceHeader is bind to an object that contains page uiData, left panel and right panel
	// data contains page's data
	// FDB I added this hander to give the capability to the (static) page to modify content according to data
	// To see - Maybe it would be better to call a handler once DOM object has been created in order to manipulate DOM elemt instead of ui objects
	that.PAGES.settings.enhanceHeader = function(data) {
		var self = this,
			autoLogon = null,
			logon;
		// hide/show authentication block if autoLogon==true
		for (var p in self.ui.content) {
			if (p === "logonblock") {
				var x = self.ui.content[p];
				if (!x.data) x.data = {};
				x.data.$isHidden = data.autoLogon !== true;
			}
		}
	};
	// Called after loadPage
	that.PAGES.apps.enhanceHandler = function(pdata, after) {
		var locale = $helpers.locale();
		if (pdata) pdata.$title = locale.applicationmanager.title;
		after(pdata);
	};



	// Page hash
	that.linkDetailPage = function(controller) {
		if (controller.applicationId) {
			return that.PAGES.page.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
		} else return that.PAGES.page.id;
	};
	var _parseRepresentation = function(param) {
		if (param.representation) {
			var a = param.representation.split(".");
			if (a.length >= 2) {
				param.representation = a[0];
				param.facet = a[1];
			}
		}
	};

	that.scrollIntoView = function(element) {
		var fixedHeader = true;
		if (fixedHeader) {
			var fixedHeaderHeight = 45;
			var dummy = $('<div></div>').css({
				position: 'absolute',
				top: $(element).offset().top - fixedHeaderHeight
			}).appendTo('body');
			dummy[0].scrollIntoView();
			dummy.remove(); // remove the dummy element
		} else element.scrollIntoView();
	};
	// Used to retrieve representation/facet in page hash
	var _parsePageURI = function(query, page) {
		var params = {}, pRegex = new RegExp("#" + page, "");
		var qq = $helpers.decodeJsmQuery(query),
			ii;
		ii = qq.indexOf('?');
		if (ii > 0) {
			qq.substring(ii + 1).replace(q_parser, function($0, $1, $2) {
				if ($1) params[$1] = decodeURIComponent($2);
			});
		}
		if (params.url) {
			params.dataurl = "";
			ii = params.url.indexOf("?");
			if (ii >= 0) {
				params.dataurl = params.url.substr(0, ii);
				qq = params.url.substr(ii + 1);
				qq.replace(q_parser, function($0, $1, $2) {
					if ($1) params[$1] = decodeURIComponent($2);
				});
			} else {
				ii = params.url.indexOf(".$dashboard");
				if (ii >= 0) params.representation = params.url;

			}
		}
		_parseRepresentation(params);
		return params;

	};
	// parse page hash
	// hashFormat:   [#]pagename[-appid[-pageId]][encodeURIComponent(?query)]
	var _pageName = function(hash) {
		if (!hash) return null;
		var isEncoded = (hash.indexOf("=") < 0);
		var ch = (hash[0] === "#") ? hash.substring(1) : hash;
		var idx = ch.indexOf((isEncoded ? $helpers.encodeJsmQuery("?") : "?"));
		if (idx > 0) ch = ch.substring(0, idx);
		var res = {
			page: null
		};
		idx = ch.indexOf(that.hash_sep);
		if (idx > 0) {
			res.page = that.PAGES[ch.substring(0, idx)];
			res.application = decodeURIComponent(ch.substr(idx + 1));
			// 36 is
			if (res.application.length > 36) {
				res.pageId = res.application.substr(36 + 1);
				res.application = res.application.substr(0, 36);
			}

		} else {
			res.page = that.PAGES[ch];
			res.application = "";
		}
		if (!res.page) return null;
		if ((res.page.useAppId === 2) && !res.application) return null; // no appid found
		if ((res.page.useAppId === 1) && !res.application) {
			res.application = ($sdata.config ? $sdata.config.id : "");
		}
		if (!res.pageId) res.pageId = $helpers.uuid();
		res.pageName = res.page.id + (res.application ? (that.hash_sep + $helpers.encodeURIComponent(res.application)) : "");
		res.domid = (that.PAGES.home.id === res.page.id) ? res.application : res.pageId;
		if (that.PAGES.home.id === res.page.id) res.longPageName = res.pageName;
		else res.longPageName = res.page.id + (res.application ? (that.hash_sep + $helpers.encodeURIComponent(res.application + '-' + res.pageId)) : "");
		return res;
	};
	// Mobile client actions - FDB not used?
	that.ACTIONS = {
		"home": {
			name: "home",
			execute: function(params, after) {
				that.goHome(null);
				after(null);
			}
		}
	};
	// Check if  Mobile client action
	var _actionName = function(hash) {
		if (!hash) return null;
		var a = Object.keys(that.ACTIONS);
		var pn = "",
			i = a.length;
		while (i--) {
			var s = a[i];
			var ii = hash.indexOf(s);
			if ((ii === 0) || (ii === 1)) return that.ACTIONS[s];
		}
		return null;
	};
	// Execute a Mobile client action
	var _execAction = function(hash, action, after) {
		var params = _parsePageURI(hash, action.name);
		return action.execute(params, after);

	};

	var _createHtml = function(cl, res) {
		if (cl.before) {
			res.push(cl.before);
			cl.before = null;
		}
		if (cl.html) {
			res.push(cl.html);
			cl.html = null;
		}
		if (cl.childs) {
			cl.childs.forEach(function(child) {
				_createHtml(child, res);
			});
		}
		if (cl.after) {
			res.push(cl.after);
			cl.after = null;
		}
	};
	that.struct2html = _createHtml;

	var _hasErrorControl = function(controls) {
		for (var name in controls) {
			if (controls[name].uiClass === "ErrorView") return true;
		}
		return false;
	};

	// Create layouts and controls and linked with parents
	var _createPage = function(controller, controls, html, options) {
		var old = controller._html || null,
			olddetailpagedata, oldPrefix;
		controller._html = html;
		if (options) {
			if (options.pageData) {
				olddetailpagedata = controller.detailpagedata || null;
				controller.detailpagedata = options.pageData;
			}
			if (options.prefix) {
				oldPrefix = controller.detPrefix || "";
				controller.detPrefix = options.prefix;
			}
			if (options.data) controller.setData('', options.data);
		}
		try {
			Object.keys(controls).forEach(function(id, index) {
				var c = controls[id];
				if (c.layout) {
					var parent = controls[c.parent];
					if (parent) {
						parent.data = parent.data || {};
						parent.data.hasChildren = true;
					}
				}
			});
			Object.keys(controls).forEach(function(id, index) {
				var c = controls[id];
				var parent = html[c.parent] || html.root;
				// Control id : controller.prefix + prefix - Ex: F1_items for a query list - representation2ui
				c.id = controller.prefix + id;
				if (c.layout) {
					// Layout controls  - see jquery.smobile.layout.js
					var l = $.smobile.addLayout.apply(controller, [parent, c]);
					l.parent = l.parent || c.parent || "root";
					if (l && l.event) {
						controller.layouts = controller.layouts || {};
						controller.layouts[c.id] = {
							id: c.id,
							event: l.event,
							options: l.options
						};
						l.event = null;
					}
					html[id] = l;
					if (l.childs && l.childs.length) {
						l.childs.forEach(function(child) {
							html[child.id] = child;
							child.parent = id;
						});
					}
				} else if (c.uiClass) {
					// UI Controls  with handler, refresh, events methods - Class defined in $.smobile.controls[c.uiClass]
					// Calls 'handler' method to initcontrol (create html)
					$.smobile.addControl.apply(controller, [parent, c,
						function(ctrl) {
							// ctrl ->  is not a class object it contains { html, action, options}
							if (ctrl && Array.isArray(ctrl)) {
								// isArray(ctrl) means edit mode - ?? FBD
								ctrl.forEach(function(cc) {
									html[id + cc.scid] = cc;
									if (cc.bind || cc.action) {
										controller.registerControl({
											id: c.id + cc.scid,
											bind: cc.bind,
											action: cc.action,
											options: cc.options,
											uiClass: cc.uiClass,
											refresh: cc.refresh
										});
									}
								});
							} else if (ctrl) {
								html[id] = ctrl;
								if (ctrl.bind || ctrl.action) {
									controller.registerControl({
										id: c.id,
										bind: ctrl.bind,
										action: ctrl.action,
										options: ctrl.options,
										uiClass: c.uiClass,
										refresh: ctrl.refresh
									});
								}
								if (ctrl.async) {
									// View control with asynchronous handler called by bindData  - See appView and syncView
									controller.asyncs = controller.asyncs || [];
									controller.asyncs.push(ctrl.async);
									ctrl.async = null;
								}
							}
						}
					]);
				}
			});
		} finally {
			controller._html = old;
			if (options) {
				if (options.pageData) controller.detailpagedata = olddetailpagedata;
				if (options.prefix) controller.detPrefix = oldPrefix;
			}

		}
	};

	// Call to display arrayField wit card view
	that.renderPageHTML = _createPage;

	var _createPanelIcon = function(controller, html, opts) {
		html.push('<a data-role="button" class="s-m-hbutton" data-theme="a"  data-inline="true" data-iconpos="notext" ');
		if (opts) {
			for (var p in opts) {
				html.push(p);
				html.push('="');
				html.push(opts[p]);
				html.push('" ');
			}
		}
		html.push('" data-corners="false" data-iconshadow="false" data-shadow="false"> </a>');
	};
	// Create header right icons
	var _createHeaderRight = function(controller, uiData, nopanel) {
		var html = [];
		var opts = {
			"data-theme": "a",
			"data-inline": "true",
			"data-role": "button",
			"data-corners": "false",
			"data-iconshadow": "false",
			"data-iconpos": "notext",
			"data-shadow": "false"
		};
		if (uiData && uiData.hbuttons) {
			uiData.hbuttons.forEach(function(btn) {
				btn.jmdata = btn.jmdata || {};
				$.extend(btn.jmdata, opts);
				btn.css = ["s-m-hbutton"];
				if (btn.id === "filter") {
					btn.$isHidden = !controller.extraData.filters;
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.filterBtnId = btn.xcontrolId;
				} else if (btn.id === "favorite") {
					var fav = $sdata.favorite(controller.ui);
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.favoriteBtnId = btn.xcontrolId;
					btn.$isHidden = controller.extraData === null || controller.extraData.bookmarks === null || controller.extraData.bookmarks.length === 0;
					if (fav) btn.jmdata["data-icon"] = "s-fav-on";
				} else if (btn.id === "sortorder") {
					btn.xcontrolId = controller.prefix + btn.id;
					controller.extraData.sortorderBtnId = btn.xcontrolId;
					btn.$isHidden = true;
				}
				// #2489 - we use tab-cell for each icons
				html.push('<div class="s-m-header-cell-icon ');
				html.push(btn.isMultiLine ? 'multisel ' : 'nosel ');
				if (btn.$isHidden) html.push(' s-m-hidden');
				html.push('" id="');
				html.push(btn.xcontrolId);
				html.push('">');
				// We force false because the show/hide is managed by parent div for header buttons
				btn.$isHidden = false;
				that._addLink(html, btn, controller, function() {
					html.push($helpers.htmlEncode(btn.title));
				});
				html.push('</div>');

			});
		}
		if ((uiData && uiData.roptions && uiData.roptions.nopanel) || nopanel) {
			// Nothing
		} else {
			// #2489 - we use tab-cell for each icons - Add right panel icon - only for no multiline selection
			html.push('<div class="s-m-header-cell-icon nosel" id="');
			html.push(controller.prefix + 'right_panel"');
			html.push('">');
			html.push(_createPanelIcon(controller, html, {
				'data-icon': 's-rpanel',
				'href': '#' + controller.prefix + 'rpanel'
			}));
			html.push('</div">');
		}
		return html.join('');
	};

	var _error2Type = function(value) {
		switch (value) {
			case $helpers.ERRORS.fatal:
				return "fatal";
			case $helpers.ERRORS.error:
				return "error";
			case $helpers.ERRORS.warning:
				return "warning";
			case $helpers.ERRORS.success:
				return "success";
			default:
				//case $helpers.ERRORS.info:
				return "info";
		}
	};

	var _createHeader = function(controller, ui, pgtitle, nopanel) {
		var html = [],
			opts = {};
		var type;
		controller.pgtitle = pgtitle;
		// -1- Create left icon - Navigation
		// #2489 - we use tab-cell for each icon
		// -> nosel to hide this in in multiseletion mode
		html.push('<div class="s-m-header-tab" id="');
		html.push(controller.prefix + 'headerTab">');
		// No leftpanel - Ex for logout page
		if (controller.pageInfo.page.noLeftPanel !== true) {
			html.push('<div class="s-m-header-cell-icon nosel">');
			if (controller.parent) {
				// Back arrow to return to parent - Ex : detail of a grid line, object reference
				opts["data-action"] = "back";
				opts["data-icon"] = "arrow-l";
			} else {
				// Display left panel
				opts.href = "#" + controller.prefix + "panel";
				opts["data-icon"] = "s-bars";
			}
			_createPanelIcon(controller, html, opts);
			html.push('</div>');
		}
		// -2- Add title / Message
		html.push('<div class="s-m-header-cell-ttl"><h1 class="s-m-header-ttl" ');
		html.push('id="');
		html.push(controller.prefix + 'headerTtl">');
		// pgtitle Could be HTML (home page sage in green)
		html.push(pgtitle);
		html.push('</h1></div>');
		// -3- Create rights icons - actions
		var htmRight = _createHeaderRight(controller, ui, nopanel);
		html.push(htmRight);
		html.push('</div>');
		return html.join('');
	};

	// Click events on header
	var _clickOnHeader = function(e, check) {
		var cpage = $.mobile.activePage,
			hnd;
		if (cpage) {
			var ctrl = that.pageController(cpage);
			if (ctrl) {
				if (ctrl.disabled) return;
				var target = $helpers.getTarget(e);
				if (target) {
					var p;
					if (check) {
						p = $(target).attr("data-action-global");
						if (!p) return;
					}

					p = $(target).attr("data-action");
					if (p) {
						if (p === "filter") {
							if (that.openFilterDlg) { // declared in jquery.smobile.controls.filter.js
								that.openFilterDlg(ctrl, ctrl.extraData.filters);
								e.preventDefault();
							}
						}

						hnd = ctrl.pageActions ? ctrl.pageActions[p] : null;
						if (hnd) {
							ctrl.disabled = true;
							return hnd.call(ctrl, function(doCont) {
								if (doCont) ctrl.disabled = false;
							});
						}
						hnd = ctrl["action" + p];
						if (hnd) {
							ctrl.disabled = true;
							var actp = $(target).attr("data-action-param");
							if (actp) actp = JSON.parse(actp);
							$helpers.clearErrors();
							return hnd.call(ctrl, {
									success: function(cbOpts, error, noback) {
										ctrl.disabled = false;
										if (!error && !noback) {
											// if cbOpts.cburl -> Goto this page - Else back
											if (cbOpts && cbOpts.cburl) {
												window.location.hash = that.ui.urlHref(cbOpts.cburl, ctrl);
											} else {
												$.smobile.doBack(ctrl);
											}
										}
									}
								},
								actp

							);
						}
					}
				}
			}
		}
	};

	// Click events on content
	var _clickOnContent = function(e) {
		return _clickOnHeader(e, true);
	};

	// Build page accoridng to ui description and page's data
	var _buildPage = function(pagename, $currentPage, $page, ui, data, info, pageInfo, $template, cb) {
		var sd = new Date(),
			pgtitle;
		var page = $page[0],
			htmlContent = {
				root: {
					before: "",
					after: "",
					childs: []
				}
			}, parentController = null;
		var htmlLeftPanel = {
			root: {
				before: "",
				after: "",
				childs: []
			}
		},
			htmlRightPanel = {
				root: {
					before: "",
					after: "",
					childs: []
				}
			},
			hasPanel = false,
			hasrPanel = false;
		if ($currentPage && $currentPage[0]) {
			parentController = $.jqmData($currentPage[0], "controller");
		}
		if (info.url) {
			info.url = $sdata.parseSdataUri(info.url);
		}
		$page.uiController({
			id: pagename,
			ui: pagename,
			entity: info.entity,
			inCreate: info.$createActivity,
			page: pageInfo,
			url: info.url
		});

		var controller = $.jqmData(page, "controller");
		controller.pageInfo = pageInfo;
		if (info.filters) {
			controller.extraData.filters = info.filters;
			info.filters = null;
		}
		if (info.favorites) {
			controller.extraData.bookmarks = info.favorites;
			info.favorites = null;
		}
		// Allows to add ad css class in page body - Ex  $"css":"error" -> s-m-app-bkg.error gives the backgropund
		if (ui.$css) {
			var klass = ui.$css;
			if (Array.isArray(klass)) klass = klass.join(' ');
			$page.addClass("s-m-app-bkg " + klass);
		}
		if ((pageInfo.page.useAppId === 2) && pageInfo.application) {
			controller.applicationId = pageInfo.application;
			controller.homeRef = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
			if (pageInfo.page.isHome || (ui && (ui.$facet === "$dashboard"))) {
				$page.addClass("s-m-app-bkg");
				if ($sdata.config && $sdata.config.code) $page.addClass($sdata.config.code);
			}
		} else {

			if (pageInfo.page.useAppId == false) {
				controller.applicationId = "";
				controller.homeRef = "#" + that.PAGES.start.id;
			}
		}

		if (ui.$page) {
			controller.page = ui.$page;
			delete ui.$page;
		}
		var dd = data || {};
		controller.setData('', dd);
		controller.pageOptions = ui.options || {};
		pgtitle = ui.$title || (dd ? dd.$title : "") || "";
		if (controller.pageOptions.detail && parentController) {
			controller.parent = parentController;
			parentController.child = controller;
			controller.applicationId = parentController.applicationId;

			if (ui.$prototype) controller.detailpagedata = {
				$prototype: ui.$prototype
			};
		}
		var $header = $page.children(":jqmData(role=header)"),
			$content = $page.children(":jqmData(role=content)").children(".content-primary"),
			$panel = $page.children(":jqmData(sagerole=panel)"),
			$rpanel = $page.children(":jqmData(sagerole=rpanel)");
		ui.content = ui.content || {};
		if (ui.content.$title && pgtitle) {
			ui.content.$title.data.html = pgtitle;
			pgtitle = "";
		}
		if (ui.panel) {
			hasPanel = true;
			_createPage(controller, ui.panel, htmlLeftPanel);
		}
		if (ui.rpanel) {
			hasrPanel = true;
			_createPage(controller, ui.rpanel, htmlRightPanel);
		} else {
			ui.roptions = ui.roptions || {};
			ui.roptions.nopanel = true;
		}
		if (!_hasErrorControl(ui.content)) {
			$helpers.clearErrors();
		} else {
			controller.hasErrorView = true;
		}
		_createPage(controller, ui.content, htmlContent);
		// Set page header Html - and left icons
		$header.html(_createHeader(controller, ui, pgtitle, !pageInfo.page.useAppId));
		var content = [];
		_createHtml(htmlContent.root, content);
		// Set page content Html
		$content.html(content.join(''));


		if (hasPanel) {
			content = [];
			_createHtml(htmlLeftPanel.root, content);
			// Set page left panel Html
			$panel.html(content.join(''));
			$panel.on("panelbeforeopen", function(event, ui) {
				that.docEvents.disableSwipe();
				var cpage = $.mobile.activePage;
				if (cpage) {
					var ctrl = that.pageController(cpage);
					if (ctrl) ctrl.refreshPanel(true);
				}

			});
			// Issue #2592 panelbeforeclose instead de panelclose to be able to call this method in pagebeforechange
			$panel.on("panelbeforeclose", function(event, ui) {
				that.docEvents.enableSwipe();
			});
		}
		if (hasrPanel) {
			content = [];
			_createHtml(htmlRightPanel.root, content);
			// Set page right panel Html
			$rpanel.html(content.join(''));
			$rpanel.on("panelbeforeopen", function(event, ui) {
				that.docEvents.disableSwipe();
				var cpage = $.mobile.activePage;
				if (cpage) {
					var ctrl = that.pageController(cpage);
					if (ctrl) ctrl.refreshPanel(false);
				}

			});
			// Issue #2592 panelbeforeclose instead de panelclose to be able to call this method in pagebeforechange
			$rpanel.on("panelbeforeclose", function(event, ui) {
				that.docEvents.enableSwipe();
			});
		}
		//$page.page();
		if (controller.pageOptions.dialog) {
			$page.removeAttr('data-' + $.mobile.ns + 'role');
			$page.attr('data-' + $.mobile.ns + 'role', 'dialog');
			controller.pageOptions.detail = false;
		} else if (controller.pageOptions.detail) {
			$.jqmData($page[0], "detail", 'detail');
		}
		if (ui.actions) {
			// Set controller methods that will handle actions "action + actionName" - Ex actionsave, actiondelete,actionreinstall ..
			for (var action in ui.actions) {
				controller["action" + action] = ui.actions[action];
			}
		}
		//$page.attr( "data-" + $.mobile.ns + "external-page", true ).one( 'pagecreate', $.mobile._bindPageRemove );
		var f = $('#' + $page[0].id);
		// remove html
		if (f.length) {
			$page.remove();
			return;
		}
		//Add footer - FBD no footer
		controller.addFooter($page);
		if ($template) {
			// Page created from #page-template by clone
			$page.insertBefore($template);
		} else {
			// No template
			$page.appendTo($("body"));
		}
		// Set events
		$header.click(_clickOnHeader);
		$content.click(_clickOnContent);
		cb();
		/***********************TESTS*****************/
		var errfields = $content.find(".s-m-error");
		var errfieldsprev = $content.find(".s-m-error").prev();
		var prevparent = errfieldsprev.parent();
		//		prevparent.addClass("s-m-input-error");
		var errfieldsprevchildren = $content.find(".s-m-error").prev().children();
		var first = errfieldsprevchildren.first();
		first.focus();
		var errfield = $content.find(".s-m-error").prev().children().first();
		/**********TESTS*************/
	};
	// Retun static page descriptions
	that._loadStaticUI = function(name, page) {
		if (name === "apppanel") {
			return that.staticui[name](page && page.page.id === "page");
		} else {
			return that.staticui[name]();
		}
	};

	var _private = {
		menu2link: function(menuItem, mi) {
			if (menuItem.linkType == "$representation") {
				mi.entity = menuItem.entity;
				mi.representation = menuItem.representation;
				mi.facet = menuItem.facet || "$query";
				mi.params = menuItem.params || "";
			} else if (menuItem.linkType == "$dashboard") {
				mi.facet = menuItem.facet || "$dashboard";
				mi.dashboard = menuItem.dashboard;
				mi.facet = "$dashboard";
			}

		},
		// Create a mobile page description from representations ($prototype)
		representation2ui: function(params, data) {
			var cd = {}, iaddErrorView = true;
			if (params.facet == "$dashboard") {
				cd = {
					"content": {
						"error": {
							"uiClass": "ErrorView"
						},
						"menu": {
							"uiClass": "MainMenu",
							"data": {
								"items": []
							}
						}
					}
				};
				data.forEach(function(menuItem) {
					var mi = {
						title: menuItem.title,
						description: menuItem.description,
						icon: menuItem.icon
					};
					_private.menu2link(menuItem, mi);
					cd.content.menu.data.items.push({
						data: mi
					});
				});
				cd.$facet = "$dashboard";
				iaddErrorView = false;
			} else if ((params.facet === "$query") || (params.facet === "$lookup")) {
				iaddErrorView = false;
				cd = {
					"content": {
						"error": {
							"uiClass": "ErrorView"
						},
						"items": {
							"uiClass": "SDataList",
							"data": {
								"bind": "$resources"
							}
						}
					}
				};
				var isLookup = (params.facet === "$lookup");
				if (isLookup) {
					cd.options = {
						detail: true
					};
					cd.content.items.data.$lookup = 1;
				}
				if (data && data.$prototype && data.$prototype.$title) {
					cd.$title = $proto.parseExpression(data.$prototype.$title, {
						data: null,
						$prototype: data.$prototype
					}, "$title");
				}
				cd.$page = params.representation + "." + params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else if ((params.facet === "$details") || (params.facet == "$edit") || (params.facet == "$create")) {
				iaddErrorView = false;
				cd = {};
				var map = {};
				var article = data.$article || data.$prototype.$article;
				if (!article) {
					// If no article(no authoring) create a default representations for the page
					article = $proto.auth.defaultDetailArticle(data.$prototype, {
						list: false,
						facet: params.facet

					});
				}

				var content = {
					"error": {
						"uiClass": "ErrorView"
					}
				};
				// Create mobile ui structure from SYracuse representation
				$proto.auth.detailArt2design(article, content, data.$prototype, {
					root: true,
					list: false,
					facet: params.facet,
					prefix: params.prefix || ""
				});
				cd.content = content;
				if (data && data.$prototype && data.$prototype.$title) {
					cd.$title = $proto.parseExpression(data.$prototype.$title, {
						data: null,
						$prototype: data.$prototype
					}, "$title");
				}
				cd.$page = params.representation + "." + params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else {
				cd = data;
			}
			if (iaddErrorView && cd && cd.content) {
				cd.content.error = {
					uiClass: "ErrorView"
				};
			}

			return cd;

		},
		// Calculate contextual header actions
		getCtxItems: function(facet, representation, data, items) {
			var page = $sdata.config.pages[representation + "." + facet],
				url, ppurl;
			if (page) {
				var query = facet === "$query";
				if (query || (facet === "$lookup")) {
					/* Icons if no multiline selection displayed if no multisel class in header div*/
					items.push({
						id: "sortorder",
						title: $helpers.locale().ui.sort_order,
						action: "sortorder",
						"jmdata": {
							"data-icon": "s-sort-asc",
							"data-transition": "none"
						}
					});
					items.push({
						id: "filter",
						title: $helpers.locale().ui.filter,
						action: "filter",
						"jmdata": {
							"data-icon": "s-filter",
							"data-transition": "none"
						}
					});
					items.push({
						id: "favorite",
						title: $helpers.locale().ui.favorite,
						action: "favorite",
						"jmdata": {
							"data-icon": "s-fav-off",
							"data-transition": "none"
						}
					});
					if (query) {
						/* Icons for multti selection displayed if multisel class in header div*/
						items.push({
							id: "multiinvalid",
							title: $helpers.locale().ui.multivalid,
							disabled: true,
							isMultiLine: true,
							action: "multiinvalid",
							"jmdata": {
								"data-icon": "s-reset",
								"data-transition": "none"
							}
						});
						items.push({
							id: "multivalid",
							title: $helpers.locale().ui.multivalid,
							disabled: true,
							isMultiLine: true,
							action: "multivalid",
							"jmdata": {
								"data-icon": "s-ok",
								"data-transition": "none"
							}
						});
						items.push({
							id: "multidel",
							title: $helpers.locale().ui.multidel,
							disabled: true,
							isMultiLine: true,
							action: "multidel",
							jmdata: {
								"data-icon": "s-delete",
								"data-transition": "none"
							}
						});
						items.push({
							id: "multiswitch",
							title: $helpers.locale().ui.multiswitch,
							disabled: false,
							isMultiLine: true,
							action: "multiswitch",
							jmdata: {
								"data-icon": "s-cancel",
								"data-transition": "none"
							}
						});
					}
				}

				if (query) {
					// Add create action from Query as an Icon
					if (page.$prototype.$links && page.$prototype.$links.$create && !page.$prototype.$links.$create.$isHidden) {
						url = $proto.parseExpression(page.$prototype.$links.$create.$url, {
							data: null,
							$prototype: page.$prototype
						}, "$url");
						ppurl = $sdata.parseSdataUri(url);
						if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
							items.push({
								title: $helpers.locale().ui.add_item,
								url: url,
								"jmdata": {
									"data-icon": "s-add",
									"data-transition": "none"
								}
							});
						}
					}

				} else if (facet === "$details") {
					//add $create  link if exists
					if ($sdata.config && $sdata.config.pages && $sdata.config.pages[representation + ".$query"]) {
						var pq = $sdata.config.pages[representation + ".$query"].$prototype;
						if (pq.$links && pq.$links.$create && !pq.$links.$create.$isHidden) {
							url = $proto.parseExpression(pq.$links.$create.$url, {
								data: null,
								$prototype: pq
							}, "$url");
							ppurl = $sdata.parseSdataUri(url);
							if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
								items.push({
									title: $helpers.locale().ui.add_item,
									url: url,
									"jmdata": {
										"data-icon": "s-add",
										"data-transition": "none"
									}
								});
							}

						}
					}

					//add $edit link if exists
					if (page.$prototype.$links && page.$prototype.$links.$edit && !page.$prototype.$links.$edit.$isHidden) {
						url = $proto.parseExpression(page.$prototype.$links.$edit.$url, {
							data: $proto.exprData(data),
							$prototype: page.$prototype
						}, "$url");
						ppurl = $sdata.parseSdataUri(url);
						if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
							items.push({
								title: $helpers.locale().ui.edit_item,
								url: url,
								"jmdata": {
									"data-icon": "s-edit",
									"data-transition": "none"
								}
							});
						}
					}
					if (page.$prototype.$links && page.$prototype.$links.$delete && !page.$prototype.$links.$delete.$isHidden) {
						items.push({
							title: $helpers.locale().ui.remove_item,
							action: "delete",
							"jmdata": {
								"data-icon": "s-delete",
								"data-transition": "none"
							}
						});
					}
				} else if ((facet === "$edit") || (facet === "$create")) {
					items.length = 0;
					items.push({
						title: $helpers.locale().ui.cancel_item,
						action: "cancel",
						"jmdata": {
							"data-icon": "s-cancel",
							"data-transition": "none"
						}
					});
					if (page.$prototype.$links && page.$prototype.$links.$delete && !page.$prototype.$links.$delete.$isHidden) items.push({
						title: $helpers.locale().ui.remove_item,
						action: "delete",
						"jmdata": {
							"data-icon": "s-delete",
							"data-transition": "none"
						}
					});
					items.push({
						title: $helpers.locale().ui.save_item,
						action: "save",
						"jmdata": {
							"data-icon": "s-ok",
							"data-transition": "none"
						}
					});
				}
			}
		},
		// Set headers icon actions
		enhanceHeader: function(data) {
			var uiData = this.ui,
				leftPanel = this.panel,
				rightPanel = this.rpanel;
			if (leftPanel) uiData.panel = {
				left_panel: leftPanel
			};
			if (rightPanel) {
				uiData.rpanel = {
					right_panel: rightPanel
				};
			}
			var hbuttons = uiData.hbuttons || [];
			if (uiData && uiData.$facet && $sdata.config) {
				_private.getCtxItems(uiData.$facet, uiData.$representation, data, hbuttons); // context items
				if (hbuttons.length) uiData.hbuttons = hbuttons;
			}
		}
	};
	// Create an ui mobile structure for a detail view (card view, application/x-object object...)
	// these views are created dynamically and injected into parent html
	that.detailUiData = function(controller, cp, data, $layout, options) {
		var res = {};
		var cl = $layout;
		if (cl.$cards) cl = cl.$cards;
		else if (cl.$layout) cl = cl.$layout;
		var isReadOnly = (options && options.readOnly);
		var inline = (options && options.inlinePrefix) ? options.inlinePrefix : "";

		var repData = {
			$prototype: cp,
			$article: cl
		};
		res.uiData = _private.representation2ui({
			facet: isReadOnly ? "$details" : "$edit",
			representation: "x-object",
			prefix: inline
		}, repData);
		res.uiData.$prototype = cp;
		res.uiData.hbuttons = [{
			title: $helpers.locale().ui.cancel_item,
			action: "cancel_detail",
			"jmdata": {
				"data-icon": "s-cancel",
				"data-transition": "back"
			}
		}, {
			title: $helpers.locale().ui.ok_item,
			action: "save_detail",
			"jmdata": {
				"data-icon": "s-ok",
				"data-transition": "back"
			}
		}];
		if (options && options.actions && options.actions.delete_detail) {
			res.uiData.hbuttons.push({
				title: $helpers.locale().ui.remove_item,
				action: "delete_detail",
				"jmdata": {
					"data-icon": "s-delete",
					"data-transition": "back"
				}
			});
		}

		if (options) {
			if (isReadOnly) {
				delete res.uiData.hbuttons;
			}
			if (options.actions) {
				res.uiData.actions = options.actions;
				options.actions = null;
			}
		}
		if (inline) {
			var cont = res.uiData.content;
			if (cont.error) {
				delete cont.error;
			}
		}
		return res;
	};

	// called after page Syracuse representations has been read in local DB

	function _afterEnhance(page, params, uiData, pageData, panel, rpanel, cb) {
		var _afterData;
		if (!page.page.db) {
			var cd = that._loadStaticUI(params.representation);
			if (!cd) return cb(params.representation, uiData, pageData, null);
			uiData = cd;
			/*var _afterData= _private.enhanceHeader.bind({
				ui: uiData,
				panel: panel,
				rpanel: rpanel
			});*/
			var obj = {
				ui: uiData,
				panel: panel,
				rpanel: rpanel
			};
			var _stdEnhanceHeader = _private.enhanceHeader.bind(obj);
			var _pageEnhanceHeader = page.page.enhanceHeader ? page.page.enhanceHeader.bind(obj) : null;
			var _afterData = function(data) {
				_stdEnhanceHeader(data);
				// Specific page data processing
				if (_pageEnhanceHeader) _pageEnhanceHeader(data);
			};

			if (page.page.enhanceHandler) {
				page.page.enhanceHandler(uiData, function(newUiData) {
					return cb(params.representation, newUiData, pageData, _afterData);
				});
			} else {
				return cb(params.representation, uiData, pageData, _afterData);
			}
		} else {
			var uimap = null,
				rep = params.representation;
			if (page.page.isHome) {
				params.representation = $sdata.config.home;
				rep = params.representation;
				params.facet = "$dashboard";
			}
			var isPage = false;
			if (params.facet === "$dashboard") {
				uimap = $sdata.config.dashboards;
			} else if (params.facet) {
				rep = params.representation + "." + params.facet;
				uimap = $sdata.config.pages;
			}
			if (uimap && uimap[rep]) {
				uiData = uimap[rep];
				uiData = _private.representation2ui(params, uiData);
				if (uiData) {
					_afterData = _private.enhanceHeader.bind({
						ui: uiData,
						panel: panel,
						rpanel: rpanel
					});
					if (page.page.isHome) {
						uiData.$title = $sdata.config.title;
					}
					if (page.page.enhanceHandler) page.page.enhanceHandler(uiData, function(newUiData) {
						return cb(rep, newUiData, pageData, _afterData);
					});
					else {
						return cb(rep, uiData, pageData, _afterData);
					}
				} else {
					return cb("", null, null, null);
				}
			} else return cb("", null, null, null);
		}
	};
	// add left (items) and right(ritems) panels items

	function _addappItems(items, ritems, params, page) {
		var apps = $sdata.applications;
		var itms = items[items.length - 1];
		if (apps) {
			// Left panel - only for applications (with Syracuse reprsentation)
			var needEndPoint = [],
				titles = [];
			apps.forEach(function(app) {
				if (app.id != page.application || true !== page.page.isHome) {
					if (app.dsdescription) {
						if (titles.indexOf(app.title) < 0) {
							titles.push(app.title);
						} else {
							needEndPoint.push(app.title);
						}
					}
					itms.items.push({
						title: app.title,
						description: app.dsdescription ? app.dsdescription : undefined,
						icon: app.icon,
						hash: that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(app.id)
					});

				} else {
					// dont display current page if application home
					// add endppoitn if duplicated application
					if (titles.indexOf(app.title) < 0) {
						titles.push(app.title);
					} else {
						needEndPoint.push(app.title);
					}
				} // Else we skip application item if we are on application home page
			});
			// Add endpoint only if duplicated applications
			itms.items.forEach(function(itm, idx) {
				if (needEndPoint.indexOf(itm.title) < 0) delete itm.description;
			});
		}
		// Logout always present
		itms.items.push({
			"type": "logout"
		});
		// Right panel displays in all pages
		var locale = $helpers.locale(),
			item;
		if (params.facet) {
			// navBar for attached actions
			if ((params.facet === "$query") || (params.facet === "$lookup")) {
				ritems.push({
					code: "topactions",
					load: true,
					items: [{
						title: locale.ui.multilines,
						icon: "multilines",
						action: "multiswitch"
					}]
				});
				item = {
					code: "filtersort",
					load: true,
					title: locale.ui.filtersort,
					items: []
				};
				ritems.push(item);
			}

			item = {
				code: "actions",
				load: true,
				title: locale.ui.Actions,
				items: []
			};
			ritems.push(item);
		}

		item = {
			code: "links",
			load: true,
			title: locale.ui.links,
			items: []
		};
		if ($sdata.config.footer) {
			$sdata.config.footer.forEach(function(ci) {
				var itmdata = {
					title: ci.title,
					icon: ci.icon
				};
				var url = that.ui.sdata_link(null, ci);
				if (url) itmdata.url = url;
				item.items.push(itmdata);

			});
		}
		ritems.push(item);

		item = {
			title: locale.ui.misc,
			items: []
		};
		// add application menu items
		// add sync button
		if ($sdata.config && $sdata.config.pages) {
			var iaddSync = false;
			Object.keys($sdata.config.pages).forEach(function(pn) {
				if (!iaddSync) {
					iaddSync = (pn.indexOf(".$edit") >= 0) || (pn.indexOf(".$create") >= 0);
				}
			});
			if (iaddSync) {
				item.items.push({
					"type": "sync"
				});
			}
		}

		// add reinstall button
		item.items.push({
			"type": "reinstall"
		});
		ritems.push(item);
	};

	// Create a mobile ui structure for the page

	function _addLogout(panel) {
		var itms = panel.data.items[panel.data.items.length - 1];
		itms.push({
			"type": "logout"
		});
	}

	function _load_page(page, params, uiData, pageData, cb) {
		var panel = null,
			rpanel = null;
		if ((page.page.useAppId === 2) && (!$sdata.config || ($sdata.config.id != page.application))) {
			$sdata.getAppConfig(page.application, function(config, error) {
				if (!config) throw new Error("Application not available for hostname " + window.location.host + "\nappid[" + page.application + "]");
				$sdata.config = config;
				var apps = $sdata.config.applications;
				delete $sdata.config.applications;
				$sdata.applications = apps;
				if (!$sdata.config) {
					return cb("", null, {
						action: "start"
					}, null);
				}
				if ($sdata.config.pages) {
					Object.keys($sdata.config.pages).forEach(function(pagename) {
						var cp = $sdata.config.pages[pagename];
						if (cp.$prototype) {
							$proto.linkParents(cp.$prototype, null);
						}
					});
				}
				panel = that._loadStaticUI("apppanel", page);
				rpanel = that._loadStaticUI("ctxpanel");
				_addappItems(panel.data.items, rpanel.data.items, params, page);
				_afterEnhance(page, params, uiData, pageData, panel, rpanel, cb);
			});

		} else {
			if (!page.page.useAppId) {
				$sdata.config = null;
				panel = that._loadStaticUI("mainpanel");
			} else {
				panel = that._loadStaticUI("apppanel", page);
				rpanel = that._loadStaticUI("ctxpanel");
				_addappItems(panel.data.items, rpanel.data.items, params, page);
			}
			_afterEnhance(page, params, uiData, pageData, panel, rpanel, cb);

		}

	};

	// Create a mobile ui structure for the page
	var _loadDataAndDesign = function(query, page, cb) {
		var pageData = null,
			uiData = {};
		// Apge information is stored in URi
		var params = _parsePageURI(query, page.pageName);
		if (!params.representation && page.page.ui) {
			params.representation = page.page.ui;
			// try to get representation and facet
			_parseRepresentation(params);
		}
		if (!params.representation) return cb("", null, null, null);

		_load_page(page, params, uiData, pageData, cb);

	};

	// remove a given page
	that.removePage = function(page) {
		var controller = $.jqmData(page, "controller");
		if (controller) {
			$helpers.log("Remove page" + (controller ? (": " + (controller.pageInfo && controller.pageInfo.page && controller.pageInfo.page.id) + "-" + (controller.pageInfo && controller.pageInfo.pageId || "")) : ""));
			controller.remove();
		}
		var $t = $(page);
		$.removeWithDependents($t);

	};

	// remove all pages
	that.removeAllPages = function(exclude) {
		exclude = exclude || [];
		exclude.push("page-template");

		var $pages = $('div[data-role="page"]');
		if ($pages && $pages.length) {
			var i = $pages.length,
				page;
			while (i--) {
				page = $pages[i];
				if (exclude.indexOf(page.id) < 0) that.removePage(page);
			}
		}
	};

	that.hashOfUrl = function(url) {
		var ii = url.indexOf('#');
		if (ii >= 0) return url.substring(ii);
		return "";
	};

	// Parse page hash
	that.pageName = _pageName;

	//Check static actions
	that.actionName = _actionName;


	// Create a mobile ui structure for the page
	that.loadPage = function(query, page, cb) {
		_loadDataAndDesign(query, page, cb);
	};


	//Execute a static action
	that.execAction = _execAction;

	// Build page html from mobile ui structure
	that.buildPage = _buildPage;
	that.refreshPage = function() {
		return window.location.reload();
		window.setTimeout(function() {
			return $.mobile.changePage(window.location.hash, {
				//changeHash: true,
				allowSamePageTransition: true,
				transition: "none"
			});

		}, 0);
		//return;
	};

	// Open home page
	that.goHome = function(controller, appid) {
		var hash = "#" + that.PAGES.start.id;
		if (!appid && !controller && $.mobile.activePage) {
			controller = $.jqmData($.mobile.activePage[0], "controller");
		}
		if (controller && controller.applicationId) appid = controller.applicationId;
		if (appid) hash = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(appid);
		$.mobile.changePage(hash, {
			allowSamePageTransition: true,
			reverse: true
		});
	};


	// Open a given page
	that.goToPage = function(controller, hash, appid) {
		var hash = "#" + hash;
		if (!controller && $.mobile.activePage) {
			controller = $.jqmData($.mobile.activePage[0], "controller");
		}
		if (controller && controller.applicationId) appid = controller.applicationId;
		if (appid) hash = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(appid);
		$.mobile.changePage(hash, {
			allowSamePageTransition: true,
			reverse: true
		});
	};


	// History.back
	that.doBack = function(controller) {
		$.mobile.back();
	};


	// Display errors
	that.showErrors = function(controller) {
		if (controller && controller.hasErrorView) {
			controller.doRefresh();
			//$helpers.clearErrors();
			return;
		}
		that.gotoErrPage();
	};


	// Display error page if no error viewer in a page
	that.gotoErrPage = function() {
		var hash = "#errors";
		if ($sdata.config && $sdata.config.id) hash = "#apperrors-" + $sdata.config.id;
		$.mobile.changePage(hash, {
			allowSamePageTransition: true
		});
	};

	// Display Draft (synchro) page
	that.showSends = function(controller) {
		if ($sdata.config && $sdata.config.id) {
			$.mobile.changePage("#send-" + $sdata.config.id, {
				allowSamePageTransition: true
			});
		}
	};


	// Create a JQM DOM page from template
	that.createPage = function(page) {
		var $ptemplate = $("#page-template");
		var $page = $ptemplate.clone().attr('data-' + $.mobile.ns + 'url', page.pageName).attr('id', page.domid);
		if (page.page.isHome) {
			if (!page.page.useAppId) {
				$page.attr('data-' + $.mobile.ns + 'theme', "h");
			}
		}
		return {
			$page: $page,
			$template: $ptemplate
		};
	};


	// Create a dialog
	that.createDialog = function(uiData, pageData) {
		var page = _pageName('#dialog'),
			uiId = "dialog";
		var cp = that.createPage(page);
		var options = {
			transition: 'pop',
			role: 'dialog',
			changeHash: true
		};
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData, pageData, {
			$createActivity: true
		}, page, cp.$template, function() {
			var controller = $.jqmData(cp.$page[0], "controller");
			var panel = cp.$page.children('#panel-template');
			panel.attr("id", controller.prefix + "panel");
			panel = cp.$page.children('#right-panel-template');
			panel.attr("id", controller.prefix + "rpanel");
			if (uiData.actions) {
				controller.pageActions = uiData.actions;
				delete uiData.actions;
			}
			$.mobile.changePage(cp.$page, options);
			controller.bindData();
		});

	};

	// Create and got to a detail page for a x-reference , x-array line, filter object
	// Optionnal - cb called afet page has been built
	that.createDetail = function(uiData, pageData, parent, cb) {
		pageData = $helpers.clone(true, {}, pageData);
		uiData.options = uiData.options || {};
		uiData.options.detail = true;
		var page = _pageName(parent ? ('#page-' + parent.applicationId + '-' + $helpers.uuid()) : "#dialog"),
			uiId = "dialog";
		var cp = that.createPage(page);
		cp.$page.attr('data-url', '#' + page.longPageName);
		var options = {
			transition: "slide",
			changeHash: true
		};
		//elf.options.url.entity
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData, pageData, {
			$createActivity: true
		}, page, cp.$template, function() {
			var controller = $.jqmData(cp.$page[0], "controller");
			var panel = cp.$page.children('#panel-template');
			panel.attr("id", controller.prefix + "panel");
			panel = cp.$page.children('#right-panel-template');
			panel.attr("id", controller.prefix + "rpanel");
			if (parent) controller.options.url = parent.options.url;
			if (uiData.actions) {
				controller.pageActions = uiData.actions;
				delete uiData.actions;
			}
			if (cb) {
				cb(controller, cp.$page);
			}
			$.mobile.changePage(cp.$page, options);
			controller.bindData();
		});

	};

	that.showError = function(settings, msg) {
		$.mobile.showPageLoadingMsg($.mobile.pageLoadErrorMessageTheme, msg || $.mobile.pageLoadErrorMessage, true);
		// hide after delay
		setTimeout($.mobile.hidePageLoadingMsg, 3000);
	};

	that.silentAction = function(error) {
		if (error.action === "start") {
			that.goHome(null);
		}
	};

	that.addLayout = function(parentLayout, layoutData) {
		return null;
	};

	that.addControl = function(parentLayout, c, after) {
		after();
	};

	that.setEvents = function(c, $c) {
		return null;
	};

	// execute an Sdata URL
	that.parseURL = function(u, page, cb) {
		var doEncodeHref = true;
		var filter = null,
			initData = null,
			url = {
				method: "GET"
			};
		var params = _parsePageURI(u.search || u.hash, page.pageName);
		var filters = null;
		var base = u.domain + u.pathname + ($helpers.hashFirst() ? ('#' + page.longPageName) : "");
		if (!params.representation && page.page.ui) params.representation = page.page.ui;
		var options = {
			url: params.url
		};
		if (params.url && (params.facet !== "$dashboard")) {
			if (((params.facet === "$query") || (params.facet === "$lookup")) && !params.nofilter) {
				filters = that.loadFilter(params.representation + '.' + params.facet);
				filters = (filters && filters.filters && filters.filters.length) ? filters.filters : null;
			}
			var doLoadFav = false;
			if ((params.facet === "$query") || (params.facet === "$lookup")) {
				doLoadFav = true;
				if ($sdata.config) {
					var pd = $sdata.config.pages[params.representation + '.' + params.facet];
					if (pd && pd.$article && (pd.$article.$favorites === false)) doLoadFav = false;
				}
			}
			var opts = {
				$uiRequest: true,
				$loadFav: doLoadFav,
				$title: params.title,
				$method: url.method,
				$init: initData,
				$filter: filter,
				$ui: params.ui,
				$type: params.type,
				success: function(data, headers) {
					headers = headers || {};
					var href = u.domain + u.pathname;
					if (headers.location) {
						if (headers.location.indexOf("http") !== 0) delete headers.location;
					}
					var newURI = headers.location ? headers.location : params.url;
					if (headers && headers.favorites) options.favorites = headers.favorites;

					options.url = newURI;
					if (headers.status > 300) {
						if (page.application) href = href + "#" + that.PAGES.home.id + that.hash_sep + page.application;

						if ((headers.status == 404) && page.application) {
							var purl = $sdata.parseSdataUri(newURI);
							if (purl.id) {
								// detail or edit not found ---> show query
								var param = {
									representation: purl.query.representation
								};
								_parseRepresentation(param);
								purl.query.representation = param.representation + '.$query';
								purl.id = '';
								var qurl = $sdata.getUri(purl);
								//redirect  to $query
								$helpers.clearErrors();
								options.stop = true;
								window.location.hash = that.PAGES.page.id + that.hash_sep + $helpers.encodeURIComponent(page.application) + $helpers.encodeURIComponent('?url=' + $helpers.encodeURIComponent(qurl));


							} else {
								//redirect  to  home
								$helpers.clearErrors();
								options.stop = true;
								window.location.hash = that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(page.application);
								//
							}
						} else href = href + "#" + that.PAGES.start.id;
						return cb(href, data, true, options);
					} else if (headers.status === 100) {
						options.stop = true;
						return cb("", data, false, {
							stop: true
						});
					} else {
						var search = '?url=' + $helpers.encodeURIComponent(newURI);
						search = base + (doEncodeHref ? $helpers.encodeJsmQuery(search) : search) + ($helpers.hashFirst() ? "" : ('#' + page.longPageName));
						options.filters = filters;
						return cb(search, data, false, options);
					}

				}
			};
			if (url && url.options) $.extend(opts, url.options);
			if (filters) {
				return opts.success({
					$resources: []
				}, {
					status: 200
				});
			}
			return $sdata.execURL(params.url, opts);
		}
		var ch = base;
		if ((params.facet === "$dashboard") && params.url) {
			var ch = '?url=' + $helpers.encodeURIComponent(params.url);
			ch = base + (doEncodeHref ? $helpers.encodeJsmQuery(ch) : ch) + ($helpers.hashFirst() ? "" : ('#' + page.longPageName));
			options.url = params.url;
		}
		var cpd = null;
		// This is the way data are sent to static pages
		// -> ui[page.id] describes the page and ui[page.id + '_data'] describes the data
		if (page.page && !page.page.db && !page.page.useAppId && that.staticui[page.page.id + "_data"]) {
			cpd = that.staticui[page.page.id + "_data"]();
		}
		return cb(ch, cpd, false, options);
	};


	// Load application Data
	that.load = function(appData, progress, after) {
		$sdata.authenticate(function(ad, error, offline) {
			if (error) {
				if (after) after();
			} else {
				return that._load(appData, progress, after);
			}
		});
	};

	that._installDatainLocalDB = function(urls, after, doDelete) {
		var len = urls.length + 1,
			count = 1,
			fail = false;
		var entities = {}, favs = {};
		$helpers.each(urls, function(url, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				return next();
			}
			var purl = $sdata.parseSdataUri(url.url);
			if (url.method === "POST") {
				var rep = $sdata.url2representation(purl);
				if (favs[rep]) return next();
				favs[rep] = true;
				$sdata.post(url.url, url.data, function(data, headers) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						return next();
					}
					data.$resources = data.$resources || [];
					var ins = [];
					try {
						if ($sdata.config.pages[purl.query.representation]) {
							var cp = $sdata.config.pages[purl.query.representation].$prototype.$properties.$resources.$item;
							data.$resources.forEach(function(ii) {
								if (ii.$httpStatus === 200) {
									purl.id = $proto.parseExpression(cp.$key, {
										data: $proto.exprData(ii),
										$prototype: cp
									}, "$key");
									delete ii.$httpStatus;
									ins.push({
										data: ii,
										url: $sdata.getUri(purl)
									});
								}
							});
						}
					} catch (ex) {
						return next();
					}
					delete purl.id;
					// Refresh favorites - set new appid
					return $sdata.insertFav(url.appid, $sdata.getUri(purl), ins, next);
				});
			} else {
				var key = $sdata.url2entity(purl);
				if (entities[key]) return next();
				entities[key] = true;
				$sdata.GET(url.url, function(data, headers) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						return next();
					}
					if (data && data.$resources && data.$resources.length) {
						// find best entity prototype
						var proto = $sdata.bestProto(purl);
						var cfg = {
							id: url.appid,
							url: purl,
							$prototype: proto
						};
						if (proto) {
							return $sdata.initData(cfg, data.$resources, true, next);
						}
					}
					return next();

				});
			}
		}, function() {
			if (after) after();
		});

	},


	// SAve application in local DB after install ou reinstall
	that._saveAppsInDB = function(after, apps, fail, progress, count, len) {
		// Parallel processes
		$helpers.each(apps, function(capp, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				return next();
			}
			var favorites = capp.favorites;
			capp.favorites = null;
			if (capp.data) {
				var urls = [];
				if (capp.data && capp.data.entities) {
					Object.keys(capp.data.entities).forEach(function(representation) {
						var config = capp.data.entities[representation],
							url;
						if (config.sync || $proto.forceSync) {
							config.sync = true;
							url = {
								method: "GET",
								appid: capp.id,
								url: capp.baseURL + "/" + config.pluralType + "?representation=" + representation + ".$bulk" + "&role=",
								entity: capp.baseURL + "/" + config.pluralType,
								config: capp.data,
								representation: representation
							};
							urls.push(url);
						}

					});
					if (favorites) {
						var batchList = Object.keys(favorites);
						batchList.forEach(function(favName) {
							var fav = favorites[favName];
							var curl = {
								method: "POST",
								url: fav.$url,
								data: fav,
								appid: capp.id,
								representation: favName
							};
							urls.push(curl);
						});
					}

				}

			}
			$sdata.installApp(capp, function(resdata, error) {
				if (!error) {
					count++;
					if (progress) progress(count, len, "Done");
				} else fail = true;
				if (fail || $helpers.hasErrors()) {
					fail = true;
					return next();
				}
				$sdata.clearSdata(capp.id, function() {
					$sdata.config = capp.data;
					$sdata.config.id = capp.id;
					$sdata.config.$info = {
						url: capp.url,
						version: capp.version,
						title: capp.title,
						icon: capp.icon,
						description: capp.description,
						dsdescription: capp.dsdescription
					};
					if ($sdata.config.pages) {
						Object.keys($sdata.config.pages).forEach(function(pagename) {
							var cp = $sdata.config.pages[pagename];
							if (cp.$prototype) {
								$proto.linkParents(cp.$prototype, null);
							}
						});
					}

					return that._installDatainLocalDB(urls, next, true);
				});
			});
		}, function() {
			// All threads complete - cal after
			if (progress) progress(len, len, "Done");
			if (after) after();
		});
	};

	// Get application data (representations) and stores data in local DB

	function _doinstall(apps, appData, progress, after) {
		var len = apps.length * 2 + 1,
			count = 0;
		if (progress) progress(0, len, "");
		var fail = false;
		// FDB - manage errors
		var res = {
			ko: [],
			ok: []
		};
		$helpers.each(apps, function(capp, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				res.ko.push(capp);
				return next();
			}

			$sdata.applicationDetails(capp, function(data) {
				count++;
				if (progress) progress(count, len, "Done");
				capp.data = data;
				if (!data) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						res.ko.push(capp);
						return next();
					}
				}
				if (data) {
					res.ok.push(capp);
					capp.title = data.title;
					capp.description = data.description;
					capp.icon = data.icon || data.code;
					data.dsdescription = capp.dsdescription;
					data.baseUrl = capp.baseURL;
				}
				return next();
			});
		}, function() {
			if (fail) {
				if (after) return after(res);
			}
			if (appData.$reinstall) delete appData.datasets;
			that._saveAppsInDB(function() {
				after(res);
			}, apps, false, progress, count, len);
		});
	}


	// Install/Reinstal applications
	that._load = function(appData, progress, after) {
		var apps = [];
		if (appData.$reinstall) {
			delete appData.$reinstall;
			if ($sdata.config && $sdata.config.id) {
				var cd = {};
				cd.id = $sdata.config.id;
				cd.baseURL = $sdata.config.baseUrl;
				cd.description = $sdata.config.$info.description;
				cd.dsdescription = $sdata.config.$info.dsdescription;
				cd.url = $sdata.config.$info.url;
				cd.title = $sdata.config.$info.title;
				cd.icon = $sdata.config.$info.icon;
				cd.version = $sdata.config.$info.version;
				apps.push(cd);
				// Load favorite list before
				return $sdata.loadFavoriteList({}, function(favorites) {
					if (favorites) cd.favorites = favorites;
					return _doinstall(apps, appData, progress, after);

				});
			} else {
				return after();
			}
		} else {
			var datasets = appData.datasets;
			datasets.forEach(function(dataset) {
				if (dataset.selected === false) return;
				var cd = $.extend(true, {}, appData);
				cd.id = $helpers.uuid();
				cd.baseURL = cd.baseURL + dataset.dataset;
				cd.description = cd.description;
				cd.dsdescription = dataset.description;
				cd.version = cd.version || "0.000";
				apps.push(cd);
			});
		}
		_doinstall(apps, appData, progress, after);
	};
})(jQuery);

(function($) {
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	var $smobile = $.smobile;

	/**
	 * @constructor
	 */
	var Controller = function($page, options) {
		var self = this;
		self.$page = $page;
		self.page = $page[0];
		if (options.id) options.id = options.id.replace(/\./g, "_").replace(/\$/g, "_");
		var old = $.jqmData(self.page, "controller");
		if (old) old.remove();
		$.jqmData(self.page, "controller", this);
		self.options = options;
		self.controls = {};
		self.extraData = {};
		self.activeButtons = {};
		return self.init();
	};
	Controller.prototype = {
		defaults: {
			id: "empty"
		},
		init: function() {
			var self = this;
			self.config = $.extend({}, self.defaults, self.options);
			self.prefix = self.config.id + "_";
			self.prefix = 'F' + $helpers.incId() + "_";
			self.ui = self.config.ui;
			self.hasErrorView = false;
			self.errors = [];
			self.detData = {};
			self.detPrefix = '';
			return this;
		},
		exprData: function(propData) {
			var self = this;
			var res = $proto.exprData();
			var cc = self;
			if (propData) {
				if (Array.isArray(propData)) {
					propData.forEach(function(value) {
						if (value) res.push(value);
					});
				} else res.push(propData);
			}
			while (true) {
				res.push(cc.data);
				if (cc.parent && cc.$bind) cc = cc.parent;
				else break;
			}
			return res;

		},
		clearErrors: function() {
			var self = this;

			self.errors.length = 0;
		},
		hasErrors: function() {
			return this.errors.length > 0;
		},
		pushError: function(error) {
			var self = this;
			self.errors.push(error);
		},
		getPageData: function() {
			var self = this;
			if (self.detailpagedata) return self.detailpagedata;
			if (!self.page) return null;
			if (!$sdata.config || !$sdata.config.pages || !$sdata.config.pages[self.page]) return null;
			var data = $sdata.config.pages[self.page];
			return data;
		},
		// #2579 - Store active element - o.target: jqm elmt - o.klass:class to restore uf any - o.restoreShow:retsore the class on page Show
		// Used for navBar which remove activeButon on pageHide - Used to store active line in list->Detail
		activeBtnAdd: function(ctrlId, o) {
			this.activeBtnRemove(ctrlId);
			if (o && ctrlId) {
				this.activeButtons[ctrlId] = o;
			}
		},
		activeBtnRemove: function(ctrlId) {
			if (ctrlId) {
				var x = this.activeButtons[ctrlId];
				if (x && x.klass && x.target.is('.' + x.klass)) {
					// Remove old active
					x.target.removeClass(x.klass);
				}
				delete this.activeButtons[ctrlId];
			}
		},
		// Remove all active lines
		activeLineRemove: function() {
			var self = this;
			Object.keys(self.activeButtons).forEach(function(key) {
				var x = self.activeButtons[key];
				// Todo - Change active by activeLine
				if (x && x.klass == "active") {
					self.activeBtnRemove(key);
				}
			});
		},
		// #2579
		activeBtnsRestore: function() {
			var self = this;
			for (var p in self.activeButtons) {
				var x = self.activeButtons[p];
				// restoreShow->restore the class on pageShow (navBar widget)
				if (x && x.klass && x.target && x.target.length != 0) {
					if (x.restoreShow) {
						// Restore class on page show
						x.target.addClass(x.klass);
					} else if (x.restoreTimeout > 0) {
						// Remove class on page show after a delay
						window.setTimeout(function() {
							self.activeBtnRemove(p);
						}, x.restoreTimeout);
					}
				}
			}
		},
		getSortFields: function() {
			var self = this;
			if (!self.page) return null;
			var page = self.page + "";
			if ((page.indexOf(".$query") > 0) || (page.indexOf(".$lookup") > 0) || (page.indexOf(".$select") > 0)) {
				var pd = self.getPageData(),
					res = [];
				if (!pd.$prototype || !pd.$prototype.$properties) return;
				var proto = pd.$prototype.$properties.$resources.$item;

				Object.keys(proto.$properties).forEach(function(name) {
					var prop = proto.$properties[name],
						oprop = prop;
					if (prop.$isHidden) return;
					if (prop.$capabilities && (prop.$capabilities.indexOf('sort') >= 0)) {
						var cn = name;
						if (prop.$type === "application/x-reference") {
							var cn = prop.$item.$rvalue;
							if (!cn) return;
							if (cn != name) {
								prop = proto.$properties[cn];
								if (res.filter(function(elem) {
									if (cn === elem.value) return cn;
								}).length) return;
							}
						}
						res.push({
							value: cn,
							title: $proto.parseExpression(oprop.$shortTitle || oprop.$title, {
								data: null,
								$prototype: proto
							}, "$title"),
							type: oprop.$type
						});
					}
				});
				if (res.length) return res;

			};
			return null;
		},
		getFilterFields: function(details) {
			var self = this;
			if (!self.page) return null;
			var page = self.page + "";
			if ((page.indexOf(".$query") > 0) || (page.indexOf(".$lookup") > 0) || (page.indexOf(".$select") > 0)) {
				var pd = self.getPageData(),
					res = [];
				if (!pd.$prototype || !pd.$prototype.$properties) return;
				var proto = pd.$prototype.$properties.$resources.$item;
				Object.keys(proto.$properties).forEach(function(name) {
					var prop = proto.$properties[name];
					if (prop.$isHidden) return;
					var tt = prop.$type;
					var fv = name;
					if (prop.$capabilities && (prop.$capabilities.indexOf('filter') >= 0)) {
						if (prop.$type === 'application/x-reference') {
							if (!prop.$item || !prop.$item.$value) return;
							if (!$proto.useUuid(prop.$item)) {
								fv = prop.$item.$value.substring(1, prop.$item.$value.length - 1);
								if (!proto.$properties[fv]) return;
								tt = proto.$properties[fv].$type;
							}
						}
						if (details) res.push({
							value: fv,
							title: $proto.parseExpression(prop.$shortTitle || prop.$title, {
								data: null,
								$prototype: proto
							}, "$title"),
							type: tt
						});
						else res.push({
							value: fv,
							type: tt
						});

					}
				});
				if (res.length) return res;

			};
			return null;
		},

		afterChangeHnd: function(c) {
			var self = this,
				f;
			if (c.options && c.options.action && self["action" + c.options.action]) {
				f = self["action" + c.options.action];
				return f.bind(self);
			}
			return null;
		},
		checkData: function() {
			var self = this,
				error, ce;
			self.clearErrors();
			Object.keys(self.controls).forEach(function(name) {
				var control = self.controls[name];
				var f = $smobile.controls[control.uiClass].checkValue;
				if (f) {
					var $c = $('#' + control.id);
					if ($c) {
						ce = f.apply(self, [$c, control]);
						if (!error && ce) error = ce;
					}
				}

			});
			if (self.hasErrors()) {
				self.errorInView(error);
				return false;
			}
			return true;

		},
		errorInView: function(error) {
			if (error && error.$element && error.$element.length) {
				$smobile.scrollIntoView(error.$element[0]);
			}
		},
		checkChange: function(cid, value, next, cp) {
			var self = this,
				oldValue;
			var ctrl = self.controls[cid];
			if (ctrl && ctrl.bind) {
				var dd = self.getValue();
				var isLookup = ctrl.options && ctrl.options.$lookup;
				oldValue = self.getValue(ctrl.bind, null, "");
				if (isLookup) {
					if ($proto.useUuid(cp)) {
						dd[ctrl.bind] = value == null ? null : {
							$value: value
						};
					} else if (cp.$rvalue) {
						//  Issue #2298 - cp.$rvalue contains the reference field who contains the value (see X3 lookup fields)
						dd[cp.$rvalue] = value;
					}
					self.notifyChange();
					if (next) return next(value);
					return;
				} else if (oldValue != value) {
					self.setData(ctrl.bind, value);
					self.notifyChange();
				}
				if (next) return next(value);
			}
			if (next) return next(value);

		},
		editActivity: function() {
			//
			var self = this;
			return (self.options && self.options.url && (self.options.url.entity === $proto.sdataKey.workingCopies));
		},
		draftId: function() {
			var self = this;
			return self.options.url.id;
		},
		notifyChange: function() {
			var self = this;
			if (self.editActivity()) {
				if (self.parent) {
					// don't propagate to parent
					//self.parent.notifyChange();

				} else $sdata.updateDraft(self.draftId(), self.getValue());
			}
		},
		getDiagnoses: function(bind) {
			var cd = this.getValue();

			if (!cd) return null;
			cd = cd.$properties || cd.$;
			if (!cd) return null;
			cd = cd[bind];
			if (!cd) return null;
			cd = cd.$diagnoses;
			if (!cd) return null;
			var res = [];
			cd.forEach(function(diag) {
				if (diag.severity === "error") {
					if (res.indexOf(diag.$message || diag.message)) {
						res.push(diag.$message || diag.message);
					}
				}
			});
			return res.length ? res : null;

		},
		getValue: function(bind, data, defValue) {
			var name, cd;
			if (data) {
				cd = data;
			} else {
				if (this.detPrefix) cd = this.detData[this.detPrefix];
				else cd = this.data;
			}
			if (bind) {
				var values = bind.split('.');
				while (values.length) {
					if (!cd) break;
					name = values.shift();
					cd = cd[name];
				}
			}
			if (defValue) {
				if (cd == null) cd = defValue;
			}
			return cd;
		},
		getProtoDataValue: function(bind, data, defValue) {
			var cd = this.getValue("", data),
				name;
			if (cd) cd = cd.$properties;
			var values = bind.split('.');
			while (values.length) {
				if (!cd) break;
				name = values.shift();
				cd = cd[name];
			}
			if (cd == null) cd = defValue;
			return cd;
		},
		allData: function(value) {
			var controller = this;
			while (controller.parent) controller = controller.parent;
			if (value) {
				controller.setData('', value);
			} else return controller.getCurrentData();
		},
		// Check if parent is in Edit mode -> Send current edit data
		getParentEditData: function() {
			var controller = this;
			while (controller.parent) controller = controller.parent;
			if (!controller.editActivity()) return null;
			return controller.getCurrentData();

		},
		getCurrentData: function() {
			return this.getValue();
		},
		setData: function(bind, value) {
			if (bind) {
				var cd = this.getValue();
				var values = bind.split('.');
				for (var i = 0, len = values.length - 1; i < len; i++) {
					var nv = cd[values[i]];
					if (!nv) {
						nv = {};
						cd[values[i]] = nv;
					};
					cd = nv;
				}
				cd[values[values.length - 1]] = value;
			} else {
				if (this.detPrefix) this.detData[this.detPrefix] = value;
				else this.data = value;
			}
		},
		// Settings - Show hide authentication detail when check FixedLogon
		actionFixedLogin: function(checked) {
			var self = this;
			var block = $('#' + self.prefix + 'logonblock');
			if (block) {
				block.toggleClass("s-m-hidden");
			}
			console.log('actionFixedLogin');
		},
		multiSelOn: function() {
			var h = $("#" + this.prefix + "headerTab");
			return h && h.hasClass("multisel");
		},
		multiSelUuids: function() {
			var self = this,
				res = [];
			if (self.extraData.multiSel) {
				self.extraData.multiSel.forEach(function(e) {
					var uid = $(e).attr("data-uuid");
					if (uid) {
						res.push(uid);
					}
				});
			}
			return res;
		},
		multiSelReset: function() {
			var self = this;
			// Remove  selected lines
			var multiSel = self.extraData.multiSel;
			if (multiSel) {
				multiSel.forEach(function(e) {
					$(e).removeClass("multisel");
				});
				self.extraData.multiSel = null;
				self._updateHeaderTtl();
			}
		},
		multiSelClick: function(li) {
			var self = this;
			// We remove this class for better ui
			li.removeClass("ui-btn-up-c");
			// Pop/Push line
			// we have one multiSel array by controler which is reseted when list is refreshed by multiSelReset (case with multiple filters in query)
			var lines = self.extraData.multiSel;
			if (!lines) lines = self.extraData.multiSel = [];
			// We store dom elmt (invariant)
			var i = lines.indexOf(li[0]);
			if (i >= 0) {
				li.removeClass("multisel");
				lines.splice(i, 1);
			} else {
				li.addClass("multisel");
				lines.push(li[0]);
			}
			self._updateHeaderTtl();
		},
		_updateHeaderTtl: function() {
			var self = this;
			var ttl;
			if (self.multiSelOn()) {
				var nbSel = self.extraData.multiSel == null ? 0 : self.extraData.multiSel.length;
				ttl = $helpers.format($helpers.locale().ui.multinbsel, [nbSel]);
				if (nbSel <= 1) {
					// enable actions if 1 line selected at least
					$("#" + self.prefix + "headerTab").find(".s-m-header-cell-icon.multisel").each(function(i, e) {
						e = $($(e).get(0).firstChild);
						if (e.attr("data-action") !== "multiswitch") {
							// mumtiline action
							if (nbSel === 0) {
								e.addClass("ui-disabled");
							} else if (nbSel === 1) {
								e.removeClass("ui-disabled");
							}
						}
					});
				}
			} else {
				ttl = self.pgtitle;
			}
			$('#' + self.prefix + 'headerTtl').html(ttl);
		},
		// Query multiselection - Switch to multilines selection / no selection
		actionmultiswitch: function(options, params) {
			var self = this;
			var h = $("#" + self.prefix + "headerTab");
			h.toggleClass("multisel");
			self._updateHeaderTtl();
			if (self.multiSelOn()) {
				// Remove all active lines
				self.activeLineRemove();
			} else {
				// Remove all selected lines
				self.multiSelReset();
			}
			// No Error - No Back - No Data
			if (options && options.success) options.success(null, false, true);
		},
		// Query multiselection - Delete selected lines
		actionmultidel: function(options, params) {
			var self = this;
			var uuids = self.multiSelUuids();
			console.log("actionmultidel" + uuids.length);
			if (options && options.success) options.success(null, false, true);
		},
		// Query multiselection -Validate selected lines
		actionmultivalid: function(options, params) {
			var self = this;
			var uuids = self.multiSelUuids();
			console.log("actionmultivalid" + uuids.length);
			if (options && options.success) options.success(null, false, true);
		},
		// Query multiselection - Invalidate selected lines
		actionmultiinvalid: function(options, params) {
			var self = this;
			var uuids = self.multiSelUuids();
			console.log("actionmultiinvalid " + uuids.length);
			if (options && options.success) options.success(null, false, true);
		},
		actioncancel: function(options) {
			var self = this;
			if (self.editActivity()) {
				return $sdata.deleteDraft(self.draftId(), options.success);
			}
			if (options.success) options.success();
		},
		actionlogout: function(options) {
			var self = this,
				loc = window.location,
				host = "";
			host += loc.protocol + "//" + loc.hostname;
			if (loc.port) host += ":" + loc.port;
			var url = host + "/logout";
			$sdata.post(url, {}, function(data) {
				if (data) {
					$.mobile.changePage("#logout", {
						allowSamePageTransition: true,
						reverse: true
					});
				} else {
					window.location.reload();
				}
			});
		},
		actiontesterrors: function(options) {
			var self = this,
				stack = "";
			try {
				throw (new Error("message with stack"));
			} catch (ex) {
				stack = ex.stack;
			}
			$helpers.pushDiagnoses({
				"$diagnoses": [{
					"$severity": "fatal",
					"$message": "It's the Fatal message",
					"$stackTrace": stack
				}, {
					"$severity": "error",
					"$message": "It's the Error message",
					"$stackTrace": stack
				}, {
					"$severity": "warning",
					"$message": "It's the Warning message",
					"$stackTrace": stack
				}, {
					"$severity": "info",
					"$message": "It's the Info message",
					"$stackTrace": stack
				}, {
					"$severity": "success",
					"$message": "It's the Success message",
					"$stackTrace": stack
				}]
			});
			var msgs = $helpers.allMessages();
			$smobile.openErrorDlg(self);
			// Mandatory - enable the controller
			if (options.success) options.success(null, false, true);
		},
		actionsave: function(options) {
			var self = this;
			// Check data according field's properties described in proptotype
			// -> Each control has a method checkValue that check and display error if any
			if (!self.checkData()) {
				// If error stay on current page
				return options.success(null, true);
			}
			$helpers.clearErrors();
			if (self.editActivity()) {
				// EDIT/CREATE Mode
				// Override standard _sendLocalData success callback to deal with field error
				// sDataUrl is the sdataUrl (ID for local db) of current page data returned by saveDraft - Used to reload page if fields errors
				var after = function(cbOpts, errors, sDataUrl) {
					if ($helpers.hasErrors()) {
						// Display Draft (synchro) page
						$.smobile.showSends(self);
					} else if (sDataUrl && $helpers.hasFieldsErrors()) {
						// Force stay on same page
						options.success(null, true, true);
						// Reload edited page to refresh error messages by using mobile client workingcopies standard url
						var url = $.smobile.ui.urlHref($sdata.editUrl(sDataUrl), self);
						window.location.replace(url);
					} else {
						// Std process
						if (sDataUrl) { // set when a new record is created and we are in online mode
							var url = $.smobile.ui.urlHref($sdata.editUrl(sDataUrl), self);
							window.location.replace(url);
						} else {
							options.success(cbOpts, $helpers.hasErrors());
						}
					}
				};
				// Save current draft / create a sData record in local DB / Delete current draft if no error
				return $sdata.saveDraft(self.draftId(), self.getValue(), function(result) {
					self.removeCachePages();
					if ($helpers.hasErrors()) {
						return options.success();
					}
					var sDataUrl = result && result.sDataUrl ? result.sDataUrl : null;
					// Send sdata http request
					// --> sDataUrl tells _sendLocalData to send only this data (not sent pending/draft data)
					// -->  We send only current data to catch/display fields error (see hasFieldsErrors below)
					// True -> Call after call back in any cases
					self._sendLocalData(after, sDataUrl, true);
				});
			} else {
				options.success();
			}
		},
		actionback: function(options) {
			if (options.success) options.success(null, false, false);
		},
		setNeedRefresh: function(onlyParent) {
			var self = this;
			var ctrl = self;
			if (onlyParent) {
				if (ctrl && ctrl.parent) ctrl.parent.needRefresh = true;
				return;
			}
			while (ctrl) {
				ctrl.needRefresh = true;
				ctrl = ctrl.parent;
			}
		},
		doMessagesRefresh: function(clearErrors) {
			var controller = this;
			if (controller.hasErrorView) {
				if (controller.controls[controller.prefix + "errors"]) {
					var c = controller.controls[controller.prefix + "errors"];
					if (c.uiClass) {
						var f = ($.smobile.controls[c.uiClass] ? $.smobile.controls[c.uiClass].refresh : null);
						if (f) f(controller, c.options, $('#' + c.id), c.id);
					}
				}
			}
			if (clearErrors) $helpers.clearErrors();
		},
		doRefresh: function(clearErrors) {
			var self = this,
				error, ce;
			Object.keys(self.controls).forEach(function(cn) {
				var c = self.controls[cn];
				if (c.uiClass) {
					var f = ($.smobile.controls[c.uiClass] ? $.smobile.controls[c.uiClass].refresh : null);
					if (f) {
						if (c.id) {
							ce = f(self, c.options, $('#' + c.id), c.id);
							if (!error && ce) error = ce;
						}
					}
				}
			});
			if (self) self.errorInView(error);
			if (clearErrors) {
				$helpers.clearErrors();
			}
			self._refreshHeader();
		},
		_refreshHeader: function() {
			var controller = this;
			if (controller.extraData.sortorderBtnId) {
				// Refresh sort icon
				var $c = $("#" + controller.extraData.sortorderBtnId);
				var ordInfo = controller.extraData.sortStatus;
				if (ordInfo != null && ordInfo.asc && ordInfo.asc.length > 0) {
					var $icon = $c.find("span.ui-icon");
					$icon.removeClass("ui-icon-s-sort-asc ui-icon-s-sort-desc");
					$icon.addClass("ui-icon-s-sort-" + ordInfo.asc);
					$c.removeClass('s-m-hidden');
				} else {
					$c.addClass('s-m-hidden');
				}
			}
		},
		showHideFav: function($c, showOnlyFav) {
			var self = this;
			if (!self.extraData.favoriteBtnId) return;
			var $c = $c || $("#" + self.extraData.favoriteBtnId);
			if (showOnlyFav || (self.extraData.bookmarks && self.extraData.bookmarks.length > 0)) {
				$c.removeClass("s-m-hidden");
			} else {
				$c.addClass("s-m-hidden");
			}
		},
		changeFav: function(fav) {
			var self = this;
			var oldc = "ui-icon-s-fav-on",
				ncc = "ui-icon-s-fav-off";
			if (fav) {
				ncc = oldc;
				oldc = "ui-icon-s-fav-off";
			}
			if (self.extraData.favoriteBtnId) {
				var $c = $("#" + self.extraData.favoriteBtnId);
				var icons = $c.find('.' + oldc);
				self.showHideFav($c, fav);
				icons.addClass(ncc).removeClass(oldc);
			}

		},
		actionsyncdrafts: function(options) {
			// get sync count
			var controller = this;
			var hash = "#" + $smobile.PAGES.send.id + $smobile.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
			$sdata.getSyncCount(function(count) {
				if (!count) {
					options.success(null, false, true);
				}
				if (!count) {
					$helpers.pushInfo($helpers.locale().ui.nodrafts);
					controller.doRefresh();
					if (options.success) options.success(null, false, true);
					return;
				}
				if (options.success) options.success(null, false, true);
				window.location.hash = hash;
			});
		},
		actionsortorder: function(options) {
			$.smobile.openSortDlg(this);
			if (options.success) options.success(null, false, true);
		},
		actionfavorite: function(options) {
			var self = this;
			var rep = self.ui;
			var fav = $sdata.favorite(rep);
			fav = !fav;
			$sdata.favorite(rep, fav);
			var _after = function() {
				self.changeFav(fav);
				if (options.success) options.success(null, false, true);
			};
			var purl = self.config.url;
			self.disabled = false;
			$smobile.controls.SDataList._execUrl(purl, self, _after);
		},

		actionnext: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after = function(s) {
				if (options.success) options.success(null, false, true);
			};
			if (ccd && ccd.$links && ccd.$links.$next) {
				var url = $proto.parseExpression(ccd.$links.$next.$url, {
					data: null,
					$prototype: $proto.getProto(self.getPageData())
				}, "$url");
				if (url) {
					if (self.disabled) return _after();
					self.disabled = true;
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					$sdata.execURL(url, {
						$uiRequest: true,
						$loadFav: self.canLoadFav(),
						error: function(data) {
							self.disabled = false;
							$.mobile.loading('hide');
							_after();
						},
						success: function(cd, headers) {
							self.disabled = false;
							self.extraData.bookmarks = headers ? headers.favorites : null;
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist
								self.setData('', cd);
								self.doRefresh();
							}
							_after();

						}
					});
				} else _after();
			} else _after();
		},
		actionprevious: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after = function() {
				if (options.success) options.success(null, false, true);
			};
			if (ccd && ccd.$links && ccd.$links.$previous) {
				var url = $proto.parseExpression(ccd.$links.$previous.$url, {
					data: null,
					$prototype: $proto.getProto(self.getPageData())
				}, "$url");
				if (url) {
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					if (self.disabled) return _after();
					self.disabled = true;
					$sdata.execURL(url, {
						$uiRequest: true,
						$loadFav: self.canLoadFav(),
						error: function(data) {
							self.disabled = false;
							$.mobile.loading('hide');
							_after();
						},
						success: function(cd, headers) {
							self.extraData.bookmarks = headers ? headers.favorites : null;
							self.disabled = false;
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist
								self.setData('', cd);
								self.doRefresh();
							}
							_after();
						}
					});
				} else _after();
			} else _after();
		},
		_clearErrors: function() {
			// FDB - clear erros and messages
			$helpers.clearErrors();
			var errctrl = this.controlByClass("ErrorView");
			if (errctrl) $('#' + errctrl.id).empty();
		},
		actionservice: function(options, params) {
			return this._actionservice(options, params, true);
		},
		actionlink: function(options, params) {
			return this._actionservice(options, params, false);
		},
		_actionservice: function(options, params, post) {
			var controller = this;
			if (params && params.id && controller.alinks) {
				// Issue #2372
				params = $.extend(true, {}, controller.alinks[params.id]);
			} else {
				params = null;
			}
			var _after = function(error) {
				if (error) controller.doRefresh();
				if (options.success) {
					options.success(null, error, true);
				}
			};
			if (!params) return _after(false);
			if (!$helpers.online()) return _after(false);
			var page = controller.getPageData();
			if (!params.url) return _after();
			var paramData = null;
			if (params.$parameters) {
				paramData = {};
				Object.keys(params.$parameters).forEach(function(pn) {
					paramData[pn] = $proto.parseExpression(params.$parameters[pn], {
						data: controller.exprData(),
						$prototype: $proto.getProto(page, params.bind)
					}, "$parameters");
				});
			}
			var url = $proto.parseExpression(params.url, {
				data: controller.exprData(paramData),
				$prototype: $proto.getProto(page, params.bind)
			}, "$url");
			controller._clearErrors();
			if (post) {
				$sdata.authenticate(function(ad, error, offline) {
					if (error || offline) _after(error);
					var postData = controller.getParentEditData();
					var edit = postData != null;
					if (!edit) {
						postData = {};
						if (params.$parameters) {
							postData = paramData;
						}
					}
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.loading
					});
					$sdata.post(url, postData, function(data) {
						$.mobile.loading('hide');
						var cd = data;
						if (edit) {
							$helpers.clearErrors();
							if (cd) {
								controller.allData(cd);
								controller.doRefresh();
								controller.notifyChange();
							} else return _after(true);
						} else {
							controller.removeCachePages();
							if (!cd) return _after(true);
							// FDB - Display all Errors/Warning/info
							if ($helpers.hasMessages()) controller.doRefresh();
						}
						_after();
					});
				});

			} else {
				if (options.success) {
					options.success({
						url: url
					}, false, true);
				}

			}
		},

		// Install an application from applications view page
		installApplication: function(options, data) {
			var hasDatasets = false;
			if (!data) {
				if (options.fail) return options.fail();
				return;
			}
			this._clearErrors();
			if (data.datasets) {
				var i = data.datasets.length;
				while (i--) {
					hasDatasets = !(data.datasets[i].selected === false);
					if (hasDatasets) break;
				}
			}
			if (!hasDatasets) {
				return options.fail();
			}
			var self = this;
			$.smobile.load(data, function(index, count, msg) {
				if ((index == 0) && count) {
					$.mobile.loading('show', {
						theme: "a",
						text: $helpers.locale().ui.installing
					});
				} else if (index === count) {
					$.mobile.loading('hide');
				}
			}, function(res) {
				$.mobile.loading('hide');
				if ($helpers.hasErrors()) {
					if (options.fail) options.fail();
					$.smobile.showErrors(self);
				} else if (options.success) options.success();
			});
		},
		removeApplication: function(options, id) {
			$helpers.clearErrors();
			var self = this;
			$sdata.removeFromDB(id, function() {
				if ($helpers.hasErrors()) {
					$.smobile.showErrors(self);

				} else {
					window.localStorage.setItem(id, "");
					if (options.success) options.success();
				}
			});
		},
		// sDataUrl=null -> Send all pending draft data Else send one data identified by sDataUrl
		_sendLocalData: function(after, sDataUrl, noCheckErrs) {
			var self = this;
			if (!$helpers.AutomaticSendBatch() || !$helpers.online()) {
				if (after) after();
				return;
			}
			$sdata.getSyncData(function(data, error) {
				if (!error && data) {
					var opts = {
						fromPage: true,
						// editActivity is used to deal with fields errors when client receives data from server
						// -> field Errors (diagnoses in $properties) don't generate global errors if editActivity
						editActivity: self.editActivity() && sDataUrl != null,
						// Called after all resources have been sent
						// cbOpts : callback otions - cbOpts._cburl
						//  --> cbOpts._cburl - Call back url
						//  --> execBatch can return a callback url if succeeded - Ex create action diplays detail page if succeeded
						success: function(cbOpts) {
							if ($helpers.hasErrors() && noCheckErrs !== true) {
								// Display draft if drafts tosend - Some error do not create draft - 403 on DELETE
								$sdata.getSyncCount(function(count) {
									if (count > 0) {
										// Display Draft (synchro) page
										$.smobile.showSends(self);
									} else {
										// Call std callback
										if (after) after(cbOpts, $helpers.hasErrors(), sDataUrl);
									}
								});
								return;
							}
							// Call std callback
							if (after) after(cbOpts, $helpers.hasErrors(), sDataUrl);
						}
					};
					return $sdata.execBatch(data, opts);
				} else if (after) after();
			}, sDataUrl);
		},
		removeCachePages: function() {
			var cont = this;
			var exclude = [];
			while (true) {
				if (cont && cont.config && cont.config.page && cont.config.page.pageId) exclude.push(cont.config.page.pageId);
				if (cont.parent && cont.$bind) cont = cont.parent;
				else break;
			}

			$.smobile.removeAllPages(exclude);
		},
		actionreinstall: function(options) {
			var self = this;
			var _resync = $.smobile.load;
			var opts = {
				success: function() {
					if ($helpers.hasErrors()) {
						if (options.success) options.success(null, true, true);
						$.smobile.showErrors(self);
						return;
					}
					if (options.success) options.success(null, false, true);
					var appid = self.applicationId;
					var domid = self.currentDoomId();
					if (domid === appid) return window.location.reload();
					else $.smobile.removeAllPages([self.currentDoomId()]);
					return $smobile.goHome(null, appid);
				}
			};

			$sdata.getSyncCount(function(count) {
				if (!count) {
					return $sdata.execBatch(null, opts, _resync);
				}
				$helpers.pushInfo($helpers.locale().ui.rmvdrafts);
				self.doRefresh();
				if (options.success) options.success(null, false, true);
			});
		},
		currentDoomId: function() {
			var self = this;
			if (self.config.page.id = $smobile.PAGES.home.id) return self.applicationId;
			return self.config.page.pageId;
		},
		addFooter: function($page) {
			var self = this;
			if (self.footerHandler) self.footerHandler($page, true);
		},
		actionsync: function(options) {
			$helpers.clearErrors();
			var self = this,
				errors = [],
				reload = self.resync;
			var opts = {
				success: function() {
					if ($helpers.hasErrors()) {
						if (options.success) options.success(null, true, true);
						$.smobile.showErrors(self);
						return;
					}
					if (reload) {
						if (options.success) options.success(null, false, true);
						var appid = self.applicationId;
						$.smobile.removeAllPages([self.currentDoomId()]);
						return $smobile.goHome(null, appid);

					}
					if (options.success) options.success(null);
				}
			};
			var _resync = (self.resync ? $.smobile.load : null);
			delete self.resync;
			return $sdata.execBatch(self.getValue(), opts, _resync);
		},
		actionresync: function(options) {
			var self = this;
			return self.actionsync(options);
		},
		actionundo: function(options) {
			$helpers.clearErrors();
			var self = this,
				errors = [],
				dd = self.getValue();
			if (dd) {
				$helpers.each(Object.keys(dd), function(value, index, next) {
					var list = dd[value];
					if (list && list.length) {
						$helpers.each(list, function(value, index, next) {
							var url = value.$info.url;
							$sdata.undoUpdate(value.$info.url, next);
						}, next);
					} else next();
				}, function() {
					if (options.success) options.success();
				});
			} else if (options.success) options.success();
		},
		clearFilter: function() {
			var self = this;
			var repdata = $sdata.loadRepData(this.ui);
			if (repdata) {
				repdata.filter = null;
				$sdata.saveRepData(this.ui, repdata);
			}
		},
		saveFilter: function(value) {
			var self = this;
			var repdata = $sdata.loadRepData(this.ui) || {};
			repdata.filter = value;
			$sdata.saveRepData(this.ui, repdata);
		},
		actiondelete: function(options) {
			var self = this;
			var page = self.getPageData();
			var cp = $proto.getProto(page);
			if (cp && cp.$links && cp.$links.$delete && cp.$links.$delete.$confirm) {
				var conf = $proto.parseExpression(cp.$links.$delete.$confirm, {
					data: self.exprData(null),
					$prototype: cp
				}, "$confirm");
				if (conf && !window.confirm(conf)) {
					if (options.success) options.success(null, false, true);
					return;
				}
			}

			$helpers.clearErrors();
			if (self.editActivity()) {
				return $sdata.deleteDataByDraft(self.draftId(), function(sdataUrl) {
					if ($helpers.hasErrors()) {
						return options.success(null, true);
					}
					var after = function(cbOpts, errors, sDataurl) {
						$.smobile.goHome(self);
					};
					self._sendLocalData(after, sdataUrl, false);
				});
			} else {
				if (self.config && self.config.url && self.config.url.origUri) {
					return $sdata.deleteDataByUrl(self.config.url.origUri, self.getValue(), function(sdataUrl) {
						if ($helpers.hasErrors()) {
							return options.success(null, true);
						}
						var after = function(cbOpts, errors, sDataurl) {
							self.removeCachePages();
							self.setNeedRefresh(true);
							$.mobile.back();
						};
						self._sendLocalData(after, null, false);
					});
				}
			}
			if (options.success) options.success();
		},
		// Favorites can be disabled by authoring
		canLoadFav: function() {
			var res = true,
				controller = this;
			var pd = controller.getPageData();
			if (pd && pd.$article && (pd.$article.$favorites === false)) res = false;
			return res;
		},

		refreshPanel: function(left) {
			var self = this,
				pl;
			if (left) {
				var pl = self.controls[self.prefix + "left_panel"];
				if (pl) {
					if (pl && pl.options.syncHandler) pl.options.syncHandler.bind(self)(pl, left);
				}
			} else {
				var pl = self.controls[self.prefix + "right_panel"];
				if (pl) {
					if (pl && pl.options.syncHandler) pl.options.syncHandler.bind(self)(pl, left);
				}
			}

		},
		remove: function() {
			var self = this;
			$.jqmRemoveData(self.page, "controller");
			self.$page = null;
			self.page = null;
			if (self.pageInfo) self.pageInfo.page = null;
			if (self.options && self.options.page) self.options.page = null;
			if (self.parent) {
				self.options = null;
				self.parent = null;
				self.data = null;
			}
			self.extraData = null;
			self.child = null;
			self.detailpagedata = null;
			self.detData = null;
			if (self.controls) {
				Object.keys(self.controls).forEach(function(cn) {
					var c = self.controls[cn];
					if (c.options && c.options.cacheData) {
						$helpers.cleanUp(c.options.cacheData, true);
						c.options.cacheData = null;
					}
				});
			}
			if (self.cleanupHnd) self.cleanupHnd(self);
			$helpers.cleanUp(self);
		},
		registerControl: function(data) {
			var self = this;
			self.controls[data.id] = data;
		},
		controlByClass: function(uiClass) {
			var self = this;
			for (var p in self.controls) {
				var o = self.controls[p];
				if (o.uiClass == uiClass) return o;
			}
			return null;
		},
		notifyAuthoring: function(event) {
			var self = this;
			switch (event) {
				case "pageload":
					if (self.ui && $sdata.config && $sdata.config.pages[self.ui]) {
						if ($proto.auth.designMode) {
							var info = {
								name: self.ui,
								url: self.config.url
							};
							var design = $sdata.config.pages[self.ui];
							info.$authorUrl = design.$authorUrl;
							info.$prototype = $proto.auth.copyProto(design.$prototype);
							design = $proto.getArticle(design);
							var facet = $sdata.representation2facet(self.ui);
							design = $proto.auth.checkDesign($sdata.config.pages[self.ui].$prototype, design, {
								design: true,
								list: (facet === "$query") || (facet === "$lookup")
							});
							$proto.auth.notifyParent("pageload", design, info);
						}
					}
					break;
			}
		},
		setHtmlEvents: function() {
			var self = this;
			if (self.layouts) {
				Object.keys(self.layouts).forEach(function(id) {
					var l = self.layouts[id];
					if (l.event) {
						var $l = $('#' + l.id);
						if ($l) l.event.apply(self, [$l, id]);
						l.event = null;
					}
				});

			}
			Object.keys(self.controls).forEach(function(id) {
				var c = self.controls[id];
				if (c.noevent) return;
				var $c = $('#' + c.id);
				if ($c) $smobile.setEvents.apply(self, [$c, c]);
				c.noevent = true;
			});

		},
		bindData: function(cb) {
			var self = this;
			self.setHtmlEvents();
			if (self.asyncs) {
				var i = self.asyncs.length;
				while (i--) {
					self.asyncs[i]();
					self.asyncs[i] = null;
				}
				self.asyncs = null;
			}
			if (cb) cb();
		}
	};
	$.fn.uiController = function(options) {
		new Controller(this, options);
		return this;
	};
})(jQuery);