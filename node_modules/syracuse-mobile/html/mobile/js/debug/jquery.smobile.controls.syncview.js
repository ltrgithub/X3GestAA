"use strict";
(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var _status2css = function(value) {
		switch (value) {
			case $sdata.STATUS.CREATED:
				return "created";
				break;
			case $sdata.STATUS.DELETED:
				return "deleted";
				break;
			case $sdata.STATUS.MODIFIED:
				return "modified";
				break;
		}
		return "";
	};
	that.controls.SyncView = {
		create_buttons: function(controller, b1html, b2html, buttons, id) {
			var hasdata = controller.data ? true : false;
			if (hasdata) {
				var del_itm = {
					linkId: id + "_undo",
					title: $helpers.locale().ui.delete_all_drafts,
					action: "undo",
					"jmdata": {
						"data-iconpos": "top",
						"data-theme": "b",
						"data-icon": "delete",
						"data-mini": true,
						"data-transition": "none"
					}
				};
				that._addLink(b1html, del_itm, controller, function() {
					b1html.push($helpers.htmlEncode(del_itm.title));
				});
				buttons.push(del_itm.linkId);
				var send_itm = {
					linkId: id + "_sync",
					title: $helpers.locale().ui.send_all_drafts,
					action: "sync",
					"jmdata": {
						"data-iconpos": "top",
						"data-icon": "arrow-u",
						"data-theme": "f",
						"data-transition": "none",
						"data-mini": true,
						"data-inline": false
					}
				};
				that._addLink(b2html, send_itm, controller, function() {
					b2html.push($helpers.htmlEncode(send_itm.title));
				});
				buttons.push(send_itm.linkId);
			} else {
				var rinstall_itm = {
					linkId: id + "_install",
					title: $helpers.locale().ui.sync_resync_data,
					action: "resync",
					"jmdata": {
						"data-iconpos": "top",
						"data-icon": "arrow-d",
						"data-theme": "f",
						"data-transition": "none",
						"data-mini": true,
						"data-inline": false
					}
				};
				that._addLink(b2html, rinstall_itm, controller, function() {
					b2html.push($helpers.htmlEncode(rinstall_itm.title));
				});
				buttons.push(rinstall_itm.linkId);

			}
		},
		create_items: function(controller, data, html, buttons, id) {
			var ci = 0;
			Object.keys(data).forEach(function(value) {
				var meta = $sdata.entityMeta(value);
				if (!meta) return;
				html.push('<li data-role="list-divider">');
				html.push(meta.title || value);
				html.push('</li>');
				var list = data[value];
				list.forEach(function(cd, index) {
					ci++;
					html.push('<li data-role="fieldcontain"');
					var css = [],
						bid = "";
					css.push("ui-li-has-icon");
					css.push($helpers.ui.consts.normal_icon);
					if (css.length) html.push(' class="' + css.join(" ") + '"');
					html.push('>');
					var coptions = [];
					coptions.push("<div class=\"ui-li-icon ui-li-thumb s-m-status " + _status2css(cd.$info.status) + "\"></div>");
					coptions.push($helpers.htmlEncode(cd.$info.title || "..."));
					if (cd.$info.last_error) {
						coptions.push("<p class=\"s-m-error\"><strong>");
						coptions.push($helpers.htmlEncode(cd.$info.last_error));
						coptions.push("</strong></p>");
					}
					if (cd.$info.status == $sdata.STATUS.DELETED) {
						html.push(coptions.join(""));
						html.push('<div class="ui-grid-a"><div class="ui-block-a">');
						html.push('</div><div class="ui-block-b">');
						bid = id + '_' + ci + "_cancel";
						buttons.push(bid);
						html.push('<button data-iconpos="top" id="' + bid + '" data-role="button" data-mini="true"  data-action="cancel" data-theme="f" data-icon="delete"');
						html.push(' data-action-param="' + cd.$info.url + '"');
						html.push('>');
						html.push($helpers.htmlEncode($helpers.locale().ui.delete_draft));
						html.push('</button>');
						html.push('</div></div>');

					} else {
						html.push(coptions.join(""));
						html.push('<div class="ui-grid-a"><div class="ui-block-a">');
						bid = id + '_' + ci + "_detail";
						buttons.push(bid);
						html.push('<a data-role="button" data-iconpos="top" id="' + bid + '" data-action="edit" data-role="button" data-mini="true" data-theme="f" data-icon="edit"');
						html.push(' data-action-param="' + $sdata.editUrl(cd.$info.url) + '"');
						html.push(' href="' + that.ui.urlHref($sdata.editUrl(cd.$info.url), controller) + '"');
						html.push('>');
						html.push($helpers.htmlEncode($helpers.locale().ui.edit_draft));
						html.push('</a>');
						html.push('</div><div class="ui-block-b">');
						bid = id + '_' + ci + "_cancel";
						buttons.push(bid);
						html.push('<button data-iconpos="top" id="' + bid + '" data-action="cancel" data-role="button" data-mini="true" data-theme="f" data-icon="delete"');
						html.push(' data-action-param="' + cd.$info.url + '"');
						html.push('>');
						html.push($helpers.htmlEncode($helpers.locale().ui.delete_draft));
						html.push('</button>');

						html.push('</div></div>');

					}
					html.push('</li>');
				});
			});

		},
		events: function($c, c) {
			var controller = this;
			//var $ul = $c.children("#" + c.id + "_ul");
			$c.click(function(e) {
				// find parent by tag 
				var target = $helpers.getTarget(e);
				if (target) {
					var p = $(target).attr("data-action");
					if (p === "cancel") {
						e.preventDefault();
						$(target).button('disable');
						var fafter = function() {
							$sdata.getSyncDataCount(function(count) {
								$(target).button('enable');
								if (!count) {
									return that.doBack(null);
								}
								controller.doRefresh();
								$helpers.clearErrors();
							});
						};
						var app = $(target).attr("data-action-param");
						$sdata.undoUpdate(app, fafter);
					} else if (c.options.actions[target.id]) {
						var an = c.options.actions[target.id];
						var hnd = controller['action' + an];
						if (hnd) {
							e.preventDefault();
							hnd.call(controller, {
								success: function(data, error, noback) {
									if (!error && !noback) $.smobile.doBack(controller);
								}
							});
							return;
						}

					}
				}
			});
			var $input = $c.find('#' + controller.prefix + "reinstall_i");
			$input.change(function(target) {
				var value = $input[0].checked;
				controller.resync = value;
			});

		},
		sync: false,
		asyncHandler: function() {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			$sdata.getSyncData(function(data, error) {
				var html = [],
					buttons = [],
					b1html = [],
					b2html = [];
				if (!error) {
					controller.data = data;
					if (data) that.controls.SyncView.create_items(controller, data, html, buttons, id);
				}
				var $c = $('#' + id + "_ul");
				$c.html(html.join(''));
				$c.listview("refresh");
				var $b1 = $('#' + id + "_b1");
				var $b2 = $('#' + id + "_b2");
				that.controls.SyncView.create_buttons(controller, b1html, b2html, buttons, id);
				if (b1html.length > 0) {
					$b1.html(b1html.join(''));
				} else {
					$b1.remove();
					$b2.css({
						width: "100%"
					});
				}
				if (b2html.length > 0) {
					$b2.html(b2html.join(''));
				} else {
					$b2.remove();
					$b1.css({
						width: "100%"
					});
				}
				buttons.forEach(function(bid) {
					$('#' + bid).button();
				});
			});
		},
		handler: function(c, after) {
			var controller = this,
				html = [];
			controller.hasSyncView = true;
			html.push('<form  id="' + c.id + '">');
			html.push('<ul class="s-m-list"  data-divider-theme="a" id="' + c.id + '_ul" data-role="listview"');
			html.push(' data-inset="true"');
			html.push('>');
			html.push('</ul>');

			var check = {
				id: controller.prefix + "reinstall"
			};
			check.data = {
				label: $helpers.locale().ui.sync_sync_data,
				value: false,
				action: " ",
				noform: true
			};
			that.controls.CheckBox.handler.apply(controller, [check, function(ctrl) {
				html.push(ctrl.html);
			}]);

			html.push('<div class="ui-grid-a"><div class="ui-block-a" id ="' + c.id + '_b1">');
			html.push('</div><div class="ui-block-b" id ="' + c.id + '_b2">');
			html.push('</div></div>');
			var actions = {};
			actions[c.id + "_undo"] = "undo";
			actions[c.id + "_sync"] = "sync";
			actions[c.id + "_install"] = "resync";

			html.push('</form>');

			after({
				html: html.join(''),
				bind: " ",
				options: {
					actions: actions
				},
				async: that.controls.SyncView.asyncHandler.bind({
					controller: controller,
					id: c.id
				})

			});

		},
		refresh: function(controller, options, $c, id) {
			var html = [],
				buttons = [],
				b1html = [],
				b2html = [];
			var $ul = $c.children("#" + id + "_ul");
			$sdata.getSyncData(function(data, error) {
				if (!error) {
					controller.data = data;
					if (data) that.controls.SyncView.create_items(controller, data, html, buttons, id);
				}
				$ul.html(html.join(''));
				var $b1 = $('#' + id + "_b1");
				var $b2 = $('#' + id + "_b2");
				that.controls.SyncView.create_buttons(controller, b1html, b2html, buttons, id);
				$b1.html(b1html.join(''));
				$b2.html(b2html.join(''));

				buttons.forEach(function(bid) {
					$('#' + bid).button();
				});
				$ul.listview("refresh");
			});
		}

	};
})(jQuery);