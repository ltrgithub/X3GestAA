"use strict";
(function($) {
	var that = $.smobile;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.Gauge = {
		_renderGauge: function(controller, $c, c) {
			var options = c && c.options;
			var bind = options.bind || options.$bind;
			var labelColor = (controller.page && controller.page.indexOf("$details") > -1) ? "#34B233" : "#666";

			var val = controller.getValue(bind, null, 0);
			var valMin = controller.getValue(options.gauge.$bindMin, null, 0);
			var valMax = controller.getValue(options.gauge.$bindMax, null, 0);

			var page = controller.getPageData();
			var cp = $proto.getProto(page, bind);
			var dd = controller.getValue();

			var uom = "";
			if (cp.$rprotoparent && cp.$rprotoparent.$properties[cp.$unit] &&
				dd && dd[cp.$unit] && dd[cp.$unit].$symbol) {
				uom = dd[cp.$unit].$symbol;
			}

			var seg = (valMax - valMin) / 3;
			var label = ((options && options.label) || "");
			var $cont = $c.find('#' + c.id + "_cont");

			$cont.highcharts({
					chart: {
						type: 'gauge',
						plotBackgroundColor: null,
						plotBackgroundImage: null,
						plotBorderWidth: 0,
						plotShadow: false,
						backgroundColor: null,
						height: 180
					},

					title: {
						text: label,
						style: {
							color: labelColor
						}
					},
					pane: {
						startAngle: -90,
						endAngle: 90,
						center: ['50%', '90%'],
						size: 210,
						background: [{
							backgroundColor: '#FFF',
							borderWidth: 0
						}]
					},
					yAxis: {
						min: valMin,
						max: valMax,

						minorTickWidth: 1,
						minorTickInterval: 'auto',
						minorTickLength: 20,
						minorTickPosition: 'inside',
						minorTickColor: '#fff',

						tickPixelInterval: 30,
						tickWidth: 0,
						tickPosition: 'inside',
						tickLength: 15,
						tickColor: '#FFF',
						labels: {
							step: 1,
							rotation: 'auto',
							style: {
								color: "#666",
								cursor: "default",
								fontSize: "12px",
								lineHeight: "14px"
							},
							distance: 3
						},
						title: {
							text: uom,
							style: {
								color: "#666"
							}
						},
						plotBands: [{
							from: valMin,
							to: valMax,
							color: '#ccc',
							innerRadius: '79%',
							outerRadius: '101%'
						}, {
							from: valMin,
							to: valMin + seg,
							color: '#55BF3B',
							innerRadius: '80%',
							outerRadius: '100%'
						}, {
							from: valMin + seg,
							to: valMin + seg * 2,
							color: '#DDDF0D',
							innerRadius: '80%',
							outerRadius: '100%'
						}, {
							from: valMin + seg * 2,
							to: valMax,
							color: '#DF5353',
							innerRadius: '80%',
							outerRadius: '100%'
						}]
					},

					series: [{
						name: label,
						data: [val],
						tooltip: {
							valueSuffix: ' ' + uom
						}
					}]

				},
				function() {});
		},
		createGauge: function(controller, c) {
			var options = c.data;
			var html = [];
			html.push('<div id="' + c.id + '">');
			html.push('<div id="' + c.id + '_cont" class="ui-body s-m-gauge-container" >');
			html.push('</div>');
			html.push('</div>');

			if (!that.ChartsTheme.themeWasSet) {
				Highcharts.setOptions(that.ChartsTheme);
				that.ChartsTheme.themeWasSet = true;
			}

			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		sync: true,
		handler: function(c, after) {
			return after(that.controls.Gauge.createGauge(this, after));
		},
		checkValue: function($c, c) {},
		events: function($c, c) {
			var controller = this;
			that.controls.Gauge._renderGauge(controller, $c, c);
		}
	};
})(jQuery);