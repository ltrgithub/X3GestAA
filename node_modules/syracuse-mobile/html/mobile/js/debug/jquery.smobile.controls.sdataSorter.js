"use strict";
//
// Sorter control
//
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	that.controls = that.controls || {};

	function _sortUi(controller, order) {
		var res = {
			"$title": $helpers.locale().ui.sort,
			"content": {
				"sort": {
					"uiClass": "SDataSorter",
					"data": {
						"items": []
					}
				}
			},
			"hbuttons": []
		};
		if (order && (order.asc != null)) {
			res.hbuttons.push({
				title: $helpers.locale().ui.cancel_sort,
				action: "resetSort",
				jmdata: {
					"data-icon": "s-undo",
					"data-transition": "back"
				}
			});

		}
		res.hbuttons.push({
			title: $helpers.locale().ui.validate_item,
			action: "validateSort",
			jmdata: {
				"data-icon": "s-ok",
				"data-transition": "back"
			}

		});
		res.roptions = {
			nopanel: true
		};
		res.actions = {
			validateSort: function(after) {
				that.controls.SDataSorter.validateSort(this);
			},
			resetSort: function(after) {
				that.controls.SDataSorter.resetSort(this);
			}
		};
		return res;
	};

	that.controls.SDataSorter = {
		getOrderBy: function(queryPageCtrl) {
			var url = queryPageCtrl.options.url;
			var orderBy = url.query.orderBy || "";
			var proto = $sdata.url2proto(url);
			if (!orderBy && proto.$properties.$resources.$item.$defaultOrder) {
				orderBy = proto.$properties.$resources.$item.$defaultOrder;
			}
			if (orderBy) {
				var ob = orderBy.split(',')[0].split(' ');
				orderBy = ob[0];
				var asc = (ob.length > 1) ? ob[1].toLowerCase() : 'asc';
			}
			return {
				orderBy: orderBy,
				asc: asc
			};
		},
		_statusIcon: function(asc, def) {
			return asc == null || asc.length == 0 ? def : 's-sort-' + (asc === 'asc' ? "d" : "u");
		},
		createSDataSorter: function(sortPageCtrl, c, filters) {
			var html = [],
				options = c.data || {}, cd = sortPageCtrl.data;
			cd.items = cd.items || [];
			var ord = sortPageCtrl.sortStatus = cd.order || {};
			html.push('<ul class="s-m-list" data-role="listview" id="' + c.id + '"');
			html.push(' data-inset="true" data-theme="d"');
			html.push('>');
			cd.items.forEach(function(cd) {
				var checked = cd.value == ord.orderBy;
				var icon = that.controls.SDataSorter._statusIcon(checked ? ord.asc : null, 'false');
				html.push('<li id="' + $helpers.uuid() + '" data-icon="');
				html.push(icon);
				html.push('"><a href="#" data-action="');
				html.push(cd.value);
				html.push('">');
				html.push($helpers.htmlEncode(cd.title));
				html.push('</a></li>');
			});
			html.push('</ul>');
			return {
				html: html.join(''),
				bind: " ",
				options: options
			};
		},
		handler: function(c, after) {
			return after(that.controls.SDataSorter.createSDataSorter(this, c));
		},
		refresh: function(controller, options, $c, id) {
			$c.listview("refresh");
		},
		events: function($c, c) {
			var sortPageCtrl = this;
			$c.click(function(e) {
				e.preventDefault();
				var target = $helpers.getTarget(e);
				if (!target) return;
				target = $(target);
				var p = $(target).attr("data-action");
				if (!p) return;
				var status = sortPageCtrl.sortStatus;
				if (p == "resetSort") {
					// Click on cancel button
					that.controls.SDataSorter.resetSort(sortPageCtrl);
				} else {
					// Click on list item
					if (!status) {
						status = that.controls.SDataSorter.getOrderBy(sortPageCtrl.parent);
						status.lastClickedId = null;
					} else if (!status.lastClickedId && status.orderBy && status.orderBy.length > 0) {
						// First click on item list
						status.lastClickedId = target.closest("ul").find("a[data-action=" + status.orderBy + "]").closest("li").attr("id");
					}
					if (status.orderBy === p) {
						status.asc = status.asc !== 'asc' && status.asc !== 'desc' ? 'asc' : status.asc === 'asc' ? 'desc' : '';
					} else {
						status.orderBy = p;
						status.asc = 'asc';
					}
					if (status.lastClickedId) {
						$('#' + status.lastClickedId).buttonMarkup({
							'icon': ''
						});
					}
					status.lastClickedId = target.closest("li").attr("id");
					sortPageCtrl.sortStatus = status;
					$('#' + status.lastClickedId).buttonMarkup({
						icon: that.controls.SDataSorter._statusIcon(status.asc, '')
					});
				}
			});
		},
		validateSort: function(sortPageCtrl) {
			var order = sortPageCtrl.sortStatus;
			order = order && order.orderBy && order.asc ? order.orderBy + ' ' + order.asc : '';
			var url = sortPageCtrl.options.url;
			url.query.orderBy = order;
			$sdata.getUri(url);
			$.mobile.loading('show', {
				theme: "a",
				text: $helpers.locale().ui.loading
			});
			$sdata.execURL(url.uri, {
				$uiRequest: true,
				$loadFav: sortPageCtrl.parent.canLoadFav(),
				success: function(cd, headers) {
					var queryPageCtrl = sortPageCtrl.parent;
					queryPageCtrl.extraData.bookmarks = headers ? headers.favorites : null;
					queryPageCtrl.extraData.sortStatus = $.extend(true, {}, sortPageCtrl.sortStatus);
					$.mobile.loading('hide');
					if (headers.status != 200) {
						queryPageCtrl.extraData.sortStatus = null;
					}
					queryPageCtrl.data = cd;
					// Refresh data and errors
					sortPageCtrl.setNeedRefresh(true);
					$.smobile.doBack(queryPageCtrl);
				}
			});
		},
		resetSort: function(sortPageCtrl) {
			sortPageCtrl.sortStatus = null;
			that.controls.SDataSorter.validateSort(sortPageCtrl);
		}
	};


	function _sortOpen(controller, sortFields) {
		var order = that.controls.SDataSorter.getOrderBy(controller);
		var ui = _sortUi(controller, order);
		that.createDetail(ui, {
			items: sortFields || controller.getSortFields(),
			order: order
		}, controller);
		return true;
	};

	that.openSortDlg = _sortOpen;

})(jQuery);