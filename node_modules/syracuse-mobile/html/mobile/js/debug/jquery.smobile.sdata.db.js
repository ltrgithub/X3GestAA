'use strict';
(function($) {
	var version = 7;
	var that = $.sdatadb || {};
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	$.sdatadb = that;
	var dbName = "sage-mmd";
	var _checkDBHandler = function(db, cb) {
		if (!db) {
			if (cb) cb(null, true);
			return false;
		}
		return true;
	};
	var _log = function(txt) {
		$helpers.log(txt);
	};
	_log = null;
	var _scan = false;

	if ("webkitIndexedDB" in window) {
		window.indexedDB = window.webkitIndexedDB;
		window.IDBTransaction = window.webkitIDBTransaction;
		window.IDBKeyRange = window.webkitIDBKeyRange;
		window.IDBDatabaseException = window.webkitIDBDatabaseException;
	}

	var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB;
	if (indexedDB) {
		if (window.IDBTransaction.READ_ONLY === undefined) {
			window.IDBTransaction.READ_ONLY = "readonly";
		}
		if (window.IDBTransaction.READ_WRITE === undefined) {
			window.IDBTransaction.READ_WRITE = "readwrite";
		}
	}

	function _makeBatchGetUrl(purl, data) {
		if ($proto.x3supportbatch) {
			return $sdata.getUri(purl);
		}
		var cp = $sdata.config.pages[purl.query.representation];
		if (cp && cp.$prototype && cp.$prototype.$properties && cp.$prototype.$properties.$resources && cp.$prototype.$properties.$resources.$item) {
			cp = cp.$prototype.$properties.$resources.$item;

			if (!$proto.useUuid(cp)) {
				var where = "",
					stag = "",
					error = false;
				var keys = cp.$key.split("{");
				keys.forEach(function(value) {
					if (error || !value) return;
					var prop = value.substr(0, value.length - 1);
					var pv = data[prop];
					if (pv == null) pv = "";
					where = where + stag + '(' + prop + ' eq \'' + pv + '\')';
				});
				if (!error) {
					purl.query.where = where;
					delete purl.id;
				}
			}
		}
		return $sdata.getUri(purl);

	};
	var _extractkey = $sdata.extractKey;
	var _tables = {
		migration: {
			columns: {
				version: {
					def: "version text"
				}
			}
		},
		draft: {
			columns: {
				id: {
					def: "id TEXT  PRIMARY KEY"
				}, // uuuid of working copy
				appid: {
					def: "appid TEXT"
				}, //application id
				original_url: {
					def: "original_url TEXT"
				}, //original url  template or resource
				data: {
					def: "data TEXT"
				},
				original_data: {
					def: "original_data TEXT"
				}
			}
		},
		sdata: {
			columns: {
				appid: {
					def: "appid TEXT"
				},
				/*application id */
				url: {
					def: "url TEXT PRIMARY KEY"
				},
				/* appid + ressource or template */
				entity_url: {
					def: "entity_url TEXT"
				},
				/* used for select */
				data: {
					def: "data TEXT"
				},
				original_data: {
					def: "original_data TEXT"
				},
				status: {
					def: "status integer"
				}, // modified, original, deleted  
				updated: {
					def: "updated TEXT"
				}, // $updated
				last_error: {
					def: "last_error TEXT"
				}
			}
		},
		sdatafav: {
			columns: {
				appid: {
					def: "appid TEXT"
				},
				/*application id */
				url: {
					def: "url TEXT PRIMARY KEY"
				},
				/* appid + ressource or template */
				entity_url: {
					def: "entity_url TEXT"
				},
				/* used for select */
				data: {
					def: "data TEXT"
				}
			}
		},
		apps: {
			columns: {
				id: {
					def: "id TEXT PRIMARY KEY"
				},
				/* uuid of application*/
				url: {
					def: "url TEXT"
				},
				/* url of application*/
				title: {
					def: "title TEXT"
				},
				/* application name (title)*/
				description: {
					def: "description TEXT"
				},
				/* application description  */
				dsdescription: {
					def: "dsdescription TEXT"
				},
				/* endpoint desscription */
				icon: {
					def: "icon TEXT"
				},
				/* Icon name */
				baseURL: {
					def: "baseURL TEXT"
				},
				/* baseURL for mobile application http(s)://host:port/sdata/application/contract/dataset/ */
				version: {
					def: "version TEXT"
				},
				/* not used */
				data: {
					def: "data TEXT"
				} /* application structure*/
			}
		},
        template: {
            columns: {
                id: {
                    def: "id TEXT  PRIMARY KEY"
                }, // uuuid of template
                appid: {
                    def: "appid TEXT"
                }, //application id
                page: {
                    def: "page TEXT"
                }, //page this template belongs to
                user: {
                    def: "user TEXT"
                }, //user this template belongs to
                data: {
                    def: "data TEXT"
                } //sdata field values stored in template
            }
        }
	};
	var _sqlLiteGetSQL = function(tableName) {
		var sql = ["CREATE TABLE IF NOT EXISTS"];
		sql.push(tableName);
		sql.push("(");
		var columns = _tables[tableName].columns;
		Object.keys(columns).forEach(function(columnName, index) {
			sql.push((index ? "," : "") + columns[columnName].def);
		});
		sql.push(")");
		return sql.join(" ");
	};
	var _applySort = function(purl, res) {
		var sort = $helpers.sdataSort(purl.query);
		if (sort) $helpers.applySDataSort(sort, res);
	};

	var _acceptStatut = function(row) {
		if (row.status >= $sdata.STATUS.DELETED) return false;
		return true;
	};
	var _addInfo = function(row, data) {
		if (data) {
			data.$info = {
				status: row.status,
				last_error: row.last_error,
				updated: row.updated
			};
		}
		return data;
	};
	var _addResource = function(row, data, resources, purl, values, map, searchmap) {
		if (data) {
			/* apply where */
			if (!$sdata.execWhere(data, purl.pwhere)) return false;
			if (searchmap && !$sdata.execSearch(data, searchmap, purl.query.search)) return false;
			/* get selected */
			var selected = data;
			if (purl.pgroupBy) {
				var key = "",
					stag = "",
					filter = "",
					create = false;
				purl.pgroupBy.forEach(function(field, index) {
					var v = $sdata.syncGetValue(selected, field.name);
					if (field.func) v = $sdata.applyFunc(v, field.func);
					key = key + stag + v;
					stag = "#";
				});
				var i = values.indexOf(key);
				if (i < 0) {
					create = true;
					values.push(key);
					i = values.length - 1;
					map[i + ""] = {};
				}
				$sdata.addSelected(data, purl.pselected, map[i + ""], create);
			} else {
				selected.$info = {
					status: row.status,
					last_error: row.last_error
				};
				resources.push(selected);
				return true;
			}
		}
		return false;
	};


	/**
	 * @param {{url: string, data: {$updated: string, $info: Object}}} data
	 */
	var _checkSdataData = function(data, fav) {
		if (!data.appid) data.appid = $sdata.config.id;
		var purl = $sdata.parseSdataUri(data.url);
		if (data.url.indexOf("appid=") < 0) data.url = data.url + "&appid=" + data.appid;
		delete purl.id;
		delete purl.query.appid;
		data.entity_url = $sdata.getUri(purl);
		if (data.data) {
			delete data.data.$info;
			delete data.data.$trackingId;
		}
		if (!fav) {
			data.status = data.status || $sdata.STATUS.ORIGINAL;
			data.updated = (data.data ? (data.data.$updated || data.data.$updDate || (new Date()).toISOString()) : (new Date()).toISOString());
			data.last_error = data.last_error || "";
		}
	};
	var _addInfoPlus = function(purl, row, data, proto) {
		_addInfo(row, data);
		delete purl.query.appid;
		data.$info.url = $sdata.getUri(purl);
		// Get the label of $value
		var x = $proto.extractFirstProp(proto.$value),
			label = "";
		if (x && proto.$properties) {
			x = proto.$properties[x];
			if (x && x.$title) {
				label = proto.$localization[$proto.extractFirstProp(x.$title)];
			}
		}
		data.$info.titlelbl = label;
		data.$info.title = $proto.parseExpression(proto.$value, {
			data: $proto.exprData(data),
			$prototype: proto
		}, "$value");
		return data;
	};

	var _indexDB = {
		version: version,
		_createObjectStore: function(db) {
			if (db.objectStoreNames.contains("draft")) db.deleteObjectStore("draft");
			if (db.objectStoreNames.contains("sdata")) db.deleteObjectStore("sdata");
			if (db.objectStoreNames.contains("apps")) db.deleteObjectStore("apps");
			if (db.objectStoreNames.contains("sdatafav")) db.deleteObjectStore("sdatafav");
            if (db.objectStoreNames.contains("template")) db.deleteObjectStore("template");

			var objectStore = db.createObjectStore("draft", {
				keyPath: "id"
			});
			objectStore.createIndex("appid", "appid", {
				unique: false
			});
			objectStore.createIndex("original_url", "original_url", {
				unique: false
			});

			objectStore = db.createObjectStore("sdata", {
				keyPath: "url"
			});
			objectStore.createIndex("appid", "appid", {
				unique: false
			});
			objectStore.createIndex("entity_url", "entity_url", {
				unique: false
			});
			objectStore.createIndex("status", "status", {
				unique: false
			});
			objectStore = db.createObjectStore("apps", {
				keyPath: "id"
			});
			objectStore.createIndex("url", "url", {
				unique: false
			});

			objectStore = db.createObjectStore("sdatafav", {
				keyPath: "url"
			});
			objectStore.createIndex("appid", "appid", {
				unique: false
			});
			objectStore.createIndex("entity_url", "entity_url", {
				unique: false
			});

            objectStore = db.createObjectStore("template", {
                keyPath: "$uuid"
            });
            objectStore.createIndex("lookup", "lookup", {
                unique: false
            });
		},
		_openDB: function(ccb) {
			var upgrade = false;
			var cb = function(data, error) {
				if (!upgrade) ccb(data, error);
			};
			try {
				var request = indexedDB.open(dbName, _indexDB.version);
			} catch (ex) {
				$helpers.pushException({
					title: $helpers.locale().ui.no_db_support_sol,
					message: ex.message,
					stackTrace: ex.stackTrace
				});
				return cb(null, ex);
			}
			try {
				request.onupgradeneeded = function(e) {
					//upgrade = true;
					var db = (e.target.result || e.target.source);
					_indexDB._createObjectStore(db);
				};
			} catch (ex) {}
			request.onsuccess = function(e) {
				var db = (e.target.result || e.target.source);
				if (!db.setVersion && (_indexDB.version != db.version)) {
					var sdv = db.setVersion(_indexDB.version);
					sdv.onsuccess = function(e) {
						_indexDB._createObjectStore(db);
						cb(db);
					};
					sdv.onerror = function(e) {
						$helpers.pushdbError(e);
						cb(null, e);
					};
				} else {
					cb(db);
				}
			};
			request.onerror = function(e) {
				$helpers.pushdbError(e);
				cb(null, e);
			};
		},
		//okk
		_getSDataByUrl: function(url, objectstore, cb) {
			if (_log) _log("_getSDataByUrl\n\t" + url);
			if (url.indexOf("appid=") < 0) url = url + "&appid=" + $sdata.config.id;
			var sdr = objectstore.get(url);
			sdr.onerror = function(event) {
				cb(null, event);
			};
			sdr.onsuccess = function(event) {
				cb(event.target.result);
			};
		},
		//okk
		_rmvSDataByUrl: function(url, objectstore, cb) {
			if (_log) _log("_rmvSDataByUrl\n\t" + url);
			if (url.indexOf("appid=") < 0) url = url + "&appid=" + $sdata.config.id;
			var sdr = objectstore["delete"](url);
			sdr.onerror = function(event) {
				cb(null, event);
			};
			sdr.onsuccess = function(event) {
				cb(null);
			};
		},
		// Load favorites - On application load - 
		_loadFavoriteList: function(db, options, cb) {
			if (_log) _log("_loadFavoriteList ");
			if (!_checkDBHandler(db, cb)) return;
			_indexDB._scanDb(db, "sdatafav", null, function() {
				options.appid = options.appid || $sdata.config.id;
				var tx = db.transaction(["sdatafav"], IDBTransaction.READ_ONLY);
				var fav = tx.objectStore("sdatafav");
				var index, keyRange, request;
				if (options.entity_url) {
					var favs = [];
					index = fav.index("entity_url");
					var url = options.entity_url;
					keyRange = IDBKeyRange.only(url);
					request = index.openCursor(keyRange);
					request.onsuccess = function(event) {
						if (event.target.result) {
							var cr = event.target.result;
							favs.push(_extractkey(cr.value.url));
							cr["continue"]();
						} else {
							cb(favs);
						}
					};
					request.onerror = function(event) {
						$helpers.pushdbError(event);
						cb();
					};

				} else {
					var res = {};
					index = fav.index("appid");
					keyRange = IDBKeyRange.only(options.appid);
					request = index.openCursor(keyRange);
					request.onsuccess = function(event) {
						if (event.target.result) {
							var cr = event.target.result;
							var purl = $sdata.parseSdataUri(cr.value.url);
							delete purl.query.appid;

							var cd = cr.value.data;
							var edata = res[purl.query.representation];
							if (!edata) {
								edata = {
									$resources: []
								};
								var oldid = purl.id;
								var oldq = purl.query;
								purl.id = "";
								purl.query = null;
								edata.$url = $sdata.getUri(purl) + "/" + $proto.sdataKey.batchGet + "?representation=" + $helpers.encodeURIComponent(oldq.representation);
								purl.id = oldid;
								purl.query = oldq;
								res[purl.query.representation] = edata;
							}

							var dd = {
								$httpMethod: "GET",
								$httpifMatch: cd.$etag,
								$key: purl.id,
								$url: _makeBatchGetUrl(purl, cd)
							};
							if (cd.$uuid) dd.$uuid = cd.$uuid;
							edata.$resources.push(dd);
							cr["continue"]();
						} else {
							cb(res);
						}
					};
					request.onerror = function(event) {
						$helpers.pushdbError(event);
						cb();
					};

				}
			});

		},
		// Refresh favorites - set new appid after resynchronization
		_insertFav: function(db, appid, entity_url, data, cb) {
			if (_log) _log("_insertFav ");
			try {
				var tx = db.transaction(["sdatafav"], IDBTransaction.READ_WRITE);
				var sdatafav = tx.objectStore("sdatafav");
				var index = sdatafav.index("entity_url");
				var keyRange = IDBKeyRange.only(entity_url);
				var request = index.openCursor(keyRange);

				request.onsuccess = function(event) {
					if (event.target.result) {
						var cr = event.target.result;
						if (cr.value.appid === appid) {
							cr["delete"]();
						}
						cr["continue"]();
					} else {
						if (!data || !data.length) return cb();
						var tnx = db.transaction(["sdatafav"], IDBTransaction.READ_WRITE);
						tnx.oncomplete = function(event) {
							cb();
						};
						tnx.onerror = function(event) {
							$helpers.pushdbError(event);
							cb();
						};
						var fail = false;
						var favobj = tx.objectStore("sdatafav");
						data.forEach(function(value, index) {
							if (fail) return;
							value.entity_url = entity_url;
							value.appid = appid;
							_checkSdataData(value, true);
							var request = favobj.add(value);
							request.onerror = function(event) {
								fail = true;
							};
						});
					}
				};
				request.onerror = function(event) {
					$helpers.pushdbError(event);
					cb();
				};
			} catch (ex) {
				$helpers.log(ex);
			}

			cb();
		},
		_scanDb: function(db, object, props, cb) {
			if (!_log || !_scan) {
				return cb();
			}
			if (!_checkDBHandler(db)) return;
			var tx = db.transaction([object], IDBTransaction.READ_ONLY);
			var fav = tx.objectStore(object);
			if (_log) _log("START SCAN " + object);
			var cpt = 0;
			var c = fav.openCursor();
			c.onsuccess = function(event) {
				var cursor = event.target.result;
				if (cursor) {
					cpt++;
					if (!props || props.length == 0) {
						if (_log) _log("\t[" + cpt + "]  - Key=" + cursor.key + "\n=" + JSON.stringify(cursor.value));
					} else {
						props.forEach(function(p, idx) {
							var val = cursor.value[p];
							if (typeof p == "object") val = JSON.stringify(val);
							if (_log) _log("\t[" + cpt + "]  - " + p + "=" + val);
						});
					}
					cursor["continue"]();
				} else {
					if (_log) _log("STOP SCAN " + object + " - cpt=" + cpt);
					if (cb) cb();
				}
			};
			c.onerror = function(event) {
				if (_log) _log("STOP SCAN " + object + " ERROR " + event.target.errorCode);
				if (cb) cb();
			};
		},
		_switchFav: function(db, url, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdatafav"], IDBTransaction.READ_ONLY);
			var fav = tx.objectStore("sdatafav");
			var cd = {
				data: data,
				url: url
			};
			_checkSdataData(cd, true);
			var request = fav.get(cd.url);
			request.onerror = function(event) {
				cb({
					op: 0
				}); //none
			};
			request.onsuccess = function(event) {
				if (event.target.result) {
					tx = db.transaction(["sdatafav"], IDBTransaction.READ_WRITE);
					fav = tx.objectStore("sdatafav");
					var rd = fav["delete"](cd.url);
					rd.onerror = function(event) {
						cb({
							op: 0
						}); //none
					};
					rd.onsuccess = function(event) {
						cb({
							op: 2,
							key: _extractkey(cd.url)
						}); //deleted
					};
				} else {
					//do insert 
					tx = db.transaction(["sdatafav"], IDBTransaction.READ_WRITE);
					fav = tx.objectStore("sdatafav");
					var rp = fav.add(cd);
					rp.onerror = function(event) {
						cb({
							op: 0
						}); //none
					};
					rp.onsuccess = function(event) {
						cb({
							op: 1,
							key: _extractkey(cd.url)
						}); //inserted
					};
				}
			};
		},

		//ok
		_insData: function(db, url, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			return _indexDB._insertSdata({
				data: data,
				url: url
			}, sdata, cb);
		},

		//ok
		_insertSdata: function(data, objectStore, cb) {
			if (_log) _log("_insertSdata");
			_checkSdataData(data, false);
			try {
				var request = objectStore.add(data);
				request.onerror = function(event) {
					$helpers.pushdbError(event);
					cb(null, event);
				};
				request.onsuccess = function(event) {
					cb(null);
				};
			} catch (ex) {
				$helpers.pushdbError(ex);
			}
		},
		//ok
		_updSDataByUrl: function(url, data, objectStore, cb) {
			if (_log) _log("_updSDataByUrl\n\t" + url);
			_checkSdataData(data, false);
			var request = objectStore.put(data);
			request.onerror = function(event) {
				cb(null, event);
			};
			request.onsuccess = function(event) {
				cb(null);
			};
		},
		//ok
		_saveDraft: function(db, id, data, cb) {
			if (_log) _log("_saveDraft " + id);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY);
			var objectStore = tx.objectStore("draft");
			var request = objectStore.get(id);
			request.onsuccess = function(event) {
				if (event.target.result) {
					var cdata = event.target.result;
					var purl = $sdata.parseSdataUri(cdata.original_url);
					var createActivity = false;
					if (purl.template) {
						createActivity = true;
						purl.template = false;
						purl.id = $sdata.data2id(purl, cdata.data);
					}
					if (purl.id == null || purl.id.trim().length == 0) {
						// Issue #3029 - id is mandatory
						$helpers.pushError($.helpers.locale().emptydraftkey);
						// setDisplayErrorAsMessage -> To display the error message in top of window
						$helpers.setDisplayErrorAsMessage();
						cb({
							status: 400
						});
						return;
					}
					purl.createActivity = false;
					purl.editActivity = false;
					var url = $sdata.url2local(purl);
					var insData = {
						url: url,
						data: data,
						original_data: cdata.original_data
					}
					delete cdata.original_data;
					var tnx = db.transaction(["sdata", "draft"], IDBTransaction.READ_WRITE);
					var sdataObj = tnx.objectStore("sdata");
					_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {
						//$sdata.STATUS.MODIFIED
						if (data) {
							if (data.status === $sdata.STATUS.DELETED) {
								// deleted
								return _indexDB._deleteDraft(db, tnx, id, function(data, error) {
									cb({
										status: 404
									});
								});
							}
							if ((data.status === $sdata.STATUS.ORIGINAL) || (data.status === $sdata.STATUS.MODIFIED)) {
								if (data.status === $sdata.STATUS.ORIGINAL) {
									insData.original_data = $.extend(true, {}, data.data);
									insData.status = $sdata.STATUS.MODIFIED;
								} else if (data.status === $sdata.STATUS.MODIFIED) {
									insData.original_data = $.extend(true, {}, data.original_data);
									insData.status = $sdata.STATUS.MODIFIED;
								}
								delete insData.data.$info;
								delete insData.data.$trackingId;
								if (insData.original_data) {
									delete insData.original_data.$info;
									delete insData.original_data.$trackingId;
									if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
										delete insData.original_data;
										insData.status = $sdata.STATUS.ORIGINAL;
										if (!$sdata.store(insData.url)) {
											// delete sdata record & delete draft
											return _indexDB._rmvSDataByUrl(insData.url, sdataObj, function(data, error) {
												_indexDB._deleteDraft(db, tnx, id, function(data, error) {
													cb({
														status: 200
													});
												});
											});
										}
									}
								}
							} else {
								//$sdata.STATUS.CREATED
								insData.status = $sdata.STATUS.CREATED;
							}
							// update sdata record and delete draft								
							return _indexDB._updSDataByUrl(insData.url, insData, sdataObj, function(data, error) {
								_indexDB._deleteDraft(db, tnx, id, function(data, error) {
									cb({
										status: 200,
										// Returns sDataUrl that identify sData record
										sDataUrl: insData.url
									});
								});
							});
						} else {
							if (createActivity) {
								insData.status = $sdata.STATUS.CREATED;
								delete insData.original_data;

							} else {
								insData.status = $sdata.STATUS.MODIFIED;
							}
							delete insData.data.$info;
							delete insData.data.$trackingId;
							if (insData.original_data) {
								delete insData.original_data.$info;
								delete insData.original_data.$trackingId;
								if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
									delete insData.original_data;
									insData.status = $sdata.STATUS.ORIGINAL;
									return _indexDB._deleteDraft(db, tnx, id, function(data, error) {
										cb({
											status: 404,
											// Returns sDataUrl that identify sData record even if not modify to continue the prosess
											sDataUrl: insData.url
										});
									});
								}
							}
							// create record  && delete draft
							_indexDB._insertSdata(insData, sdataObj, function(data, error) {
								_indexDB._deleteDraft(db, tnx, id, function(data, error) {
									cb({
										status: 200,
										// Returns sDataUrl that identify sData record
										sDataUrl: insData.url
									});
								});
							});
						}
					});
				} else {
					cb({
						status: 404
					});
				}
			};
			request.onerror = function(event) {
				$helpers.pushdbError(event);
				cb({
					status: 404
				});
			};
		},
		//ok
		_deleteDataByUrl: function(db, url, odata, cb) {
			if (_log) _log("_deleteDataByUrl " + url);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			var sdataObj = tx.objectStore("sdata");
			_indexDB._markSdataDeleted(url, sdataObj, odata, function(sdataUrl) {
				// #2362 - sdata urls as cb param
				cb(sdataUrl);
			});

		},
		_deleteDataByDraft: function(db, id, cb) {
			if (_log) _log("_deleteDataByDraft " + id);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["draft", "sdata"], IDBTransaction.READ_WRITE);
			try {
				var os = tx.objectStore("draft");
				var request = os.get(id);

				request.onsuccess = function(event) {
					if (event.target.result) {
						var cdata = event.target.result;
						var url = cdata.original_url;
						var sdataObj = tx.objectStore("sdata");
						_indexDB._markSdataDeleted(url, sdataObj, (cdata.original_data ? cdata.original_data : cdata.data), function(sdataUrl) {
							return _indexDB._deleteDraft(db, tx, id, function(data, error) {
								// #2362 - sdata urls as cb param
								cb(sdataUrl);
							});

						});

						//
					} else cb(null);

				};
				request.onerror = function(event) {
					cb(null);
				};
			} catch (ex) {
				$helpers.pushdbError(ex);
				cb(null);
			}
		},
		//ok
		_markSdataDeleted: function(o_url, sdataObj, odata, cb) {
			if (_log) _log("_markSdataDeleted " + o_url);
			var purl = $sdata.parseSdataUri(o_url),
				createActivity = false;
			if (purl.template) {
				createActivity = true;
				purl.template = false;
				purl.id = $sdata.data2id(purl, odata);
			}
			purl.createActivity = false;
			purl.editActivity = false;
			var url = $sdata.url2local(purl);
			_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {
				if (data) {
					if (data.status === $sdata.STATUS.DELETED) {
						// #2362 - sdata urls as cb param
						return cb(url);
					} else if ((data.status === $sdata.STATUS.MODIFIED) || (data.status === $sdata.STATUS.ORIGINAL)) {
						// mark deleted
						var insData = {
							appid: data.appid,
							url: data.url,
							data: data.original_data ? data.original_data : data.data,
							original_data: null,
							status: $sdata.STATUS.DELETED
						};
						return _indexDB._updSDataByUrl(insData.url, insData, sdataObj, function(data, error) {
							// #2362 - sdata urls as cb param
							return cb(insData.url);
						});
					} else if (data.status === $sdata.STATUS.CREATED) {
						// remove sdata record 
						return _indexDB._rmvSDataByUrl(url, sdataObj, function(data, error) {
							// #2362 - sdata urls as cb param
							return cb(url);
						});
					}
				} else {
					if (createActivity) return cb(null);
					// edit 
					var newData = {
						url: url,
						data: odata,
						original_data: null,
						status: $sdata.STATUS.DELETED
					};
					_indexDB._insertSdata(newData, sdataObj, function(data, error) {
						// #2362 - sdata urls as cb param
						return cb(newData.url);
					});
				}
			});
		},

		//ok
		_deleteDraft: function(db, tx, id, cb) {
			if (_log) _log("_deleteDraft " + id);
			if (!_checkDBHandler(db, cb)) return;
			tx = tx || db.transaction(["draft"], IDBTransaction.READ_WRITE);
			try {
				var objectStore = tx.objectStore("draft");
				var request = objectStore["delete"](id);
				request.onsuccess = function(event) {
					cb(null);
				};
				request.onerror = function(event) {
					$helpers.pushdbError(event);
					cb(null, event);
				};
			} catch (ex) {
				$helpers.pushdbError(ex);
				cb(null, ex);
			}
		},
		//ok
		_uninstallSdataFav: function(sdata, sdatafav, id, cb) {
			if (_log) _log("_uninstallSdataFav - appid=" + id);
			try {
				var index = sdatafav.index("appid");
				var keyRange = IDBKeyRange.only(id);
				var request = index.openCursor(keyRange);
				request.onsuccess = function(event) {
					if (event.target.result) {
						var cr = event.target.result;
						cr["delete"]();
						cr["continue"]();
					} else _indexDB._uninstallSdata(sdata, id, cb);
				};
				request.onerror = function(event) {
					_indexDB._uninstallSdata(sdata, id, cb);
				};
			} catch (ex) {
				$helpers.log(ex);
			}
		},

		//ok
		_uninstallDraft: function(draft, sdata, sdatafav, id, cb) {
			if (_log) _log("_uninstallDraft - appid=" + id);
			try {
				var index = draft.index("appid");
				var keyRange = IDBKeyRange.only(id);
				var request = index.openCursor(keyRange);
				request.onsuccess = function(event) {
					if (event.target.result) {
						var cr = event.target.result;
						cr["delete"]();
						cr["continue"]();
					} else _indexDB._uninstallSdataFav(sdata, sdatafav, id, cb);
				};
				request.onerror = function(event) {
					_indexDB._uninstallSdataFav(sdata, sdatafav, id, cb);
				};
			} catch (ex) {
				$helpers.log(ex);
			}
		},
		_uninstallSdata: function(sdata, id, cb) {
			if (_log) _log("_uninstallSdata - appid=" + id);
			var index = sdata.index("appid");
			var keyRange = IDBKeyRange.only(id);
			try {
				var request = index.openCursor(keyRange);
				request.onsuccess = function(event) {
					if (event.target.result) {
						var cr = event.target.result;
						cr["delete"]();
						cr["continue"]();
					} else cb();
				};
				request.onerror = function(event) {
					cb();
				};
			} catch (ex) {
				$helpers.log(ex);
			}
		},
		//ok
		_updateDraft: function(db, draftId, data, cb) {
			if (_log) _log("_updateDraft - draftId=" + draftId);
			if (!_checkDBHandler(db, cb)) return;
			try {
				var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY);
				var objectStore = tx.objectStore("draft");
				var request = objectStore.get(draftId);
				request.onsuccess = function(event) {
					if (event.target.result) {
						var cd = event.target.result;
						cd.data = data;
						_indexDB._deleteDraft(db, null, draftId, function(data, error) {
							if (error) return cb(null, event);
							var tnx = db.transaction(["draft"], IDBTransaction.READ_WRITE);
							var os = tnx.objectStore("draft");
							var prequest = os.add(cd);
							prequest.onsuccess = function(event) {
								cb(null);
							};
							prequest.onerror = function(event) {
								cb(null, event);
							};
						});
					} else cb(null);
				};
				request.oerror = function(event) {
					cb(null, event);;
				};
			} catch (ex) {
				$helpers.log(ex);
			}
		},
		//ok
		_insertDraft: function(db, tx, data, cb) {
			if (_log) _log("_insertDraft ");
			if (!_checkDBHandler(db, cb)) return;
			var objectStore = tx.objectStore("draft");
			var request = objectStore.add(data);
			request.onsuccess = function(event) {
				cb(data);
			};
			request.onerror = function(event) {
				$helpers.pushdbError(event);
				cb(null, event);
			};
		},
		//Read sdata or favorites
		// favorites -> click on show favorites icon in header
		_getSData: function(db, purl, fav, cb) {
			if (_log) _log("_getSData " + purl);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction([(fav ? "sdatafav" : "sdata")], IDBTransaction.READ_ONLY),
				request;
			var gmap = [],
				gvalues = {};
			var su = $sdata.url2local(purl, fav);
			var objectStore = tx.objectStore((fav ? "sdatafav" : "sdata"));
			try {
				if (purl.id || purl.template) {
					request = objectStore.get(su);
					request.onsuccess = function(event) {
						if (event.target.result && (event.target.result.status < $sdata.STATUS.DELETED)) cb(_addInfo(event.target.result, event.target.result.data), {
							status: 200
						});
						else cb(null, {
							status: 404
						});
					};
					request.onerror = function(event) {
						cb(null, {
							status: 404
						});
					};
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					var smap = $sdata.url2search(purl);
					var index = objectStore.index("entity_url");
					var keyRange = IDBKeyRange.only(su);
					var favs = fav ? [] : null;

					request = index.openCursor(keyRange);
					request.onsuccess = function(event) {
						var cr = event.target.result;
						if (cr) {
							if ((cr.value.appid === $sdata.config.id) && (fav || (cr.value.status < $sdata.STATUS.DELETED))) {
								if (_addResource(cr.value, cr.value.data, result.$resources, purl, gmap, gvalues, smap)) {
									if (fav) favs.push(_extractkey(cr.value.url));
								}
							}
							cr["continue"]();
						} else {
							if (purl.pgroupBy)
								for (var ii in gvalues) result.$resources.push(gvalues[ii]);
							_applySort(purl, result.$resources);
							cb(result, {
								status: 200,
								favorites: favs
							});
						}
					};
					request.onerror = function(event) {
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
							cb(result, {
								status: 200
							});
						} else cb("", {
							status: 500
						});
					};
				}
			} catch (ex) {
				$helpers.log(ex);
			}
		},
		_getModifiedData: function(db, purl, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY);
			var objectStore = tx.objectStore("sdata");
			var index = objectStore.index("status");
			var appid = ($sdata.config ? $sdata.config.id : "");
			var eu = $sdata.entityUri(purl, true);
			var keyRange = IDBKeyRange.lowerBound($sdata.STATUS.ORIGINAL, true);
			var crequest = index.openCursor(keyRange),
				res = {};
			if (_log) _log("_getModifiedData \n\tUrl=" + eu);
			crequest.onsuccess = function(event) {
				var cr = event.target.result;
				if (cr) {
					if ((cr.value.appid === appid) && (cr.value.entity_url === eu)) {
						var data = cr.value.data;
						var purl = $sdata.parseSdataUri(cr.value.url);
						res[purl.id] = {
							data: data,
							status: cr.value.status,
							url: cr.value.url
						};

					}
					cr["continue"]();
				} else {
					cb(res);
				}
			};
			crequest.onerror = function(event) {
				cb(res);
			};
		},
		// If sdataUrl==null returns only data identfied by thus url (used by edit mode)
		// Else returns all pending data
		_getSyncData: function(db, count, cb, sdataUrl) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY);
			var objectStore = tx.objectStore("sdata");
			var index = objectStore.index("status");
			var appid = ($sdata.config ? $sdata.config.id : "");
			if (_log) _log("_getSyncData  - justcount=" + count + "\n\tappid=" + appid + (sdataUrl ? "\n\tsdataUrl=" + sdataUrl : ""));
			var keyRange = IDBKeyRange.lowerBound($sdata.STATUS.ORIGINAL, true);
			var logIdx = 0;
			var logData = function(cr) {
				_log("[" + logIdx+++"]" + (cr.value.appid === appid ? "[*]" : "") + "\tsdataUrl=" + cr.value.url + "\n\tappid=" + cr.value.appid + "\n\tUpdated=" + cr.value.updated);
			}
			if (count) {
				var crequest = index.openCursor(keyRange),
					cc = 0;
				crequest.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						if (cr.value.appid === appid) cc++;
						if (_log) logData(cr);
						cr["continue"]();
					} else {
						cb(cc);
					}
				};
				crequest.onerror = function(event) {
					cb(0);
				};

			} else {
				var data = null;
				var request = index.openCursor(keyRange);
				request.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						if (_log) logData(cr);
						var rdata = null;
						if (cr.value.appid === appid && (sdataUrl == null || sdataUrl == cr.value.url)) {
							var purl = $sdata.parseSdataUri(cr.value.url);
							var key = $sdata.url2entity(purl);
							data = data || {};
							var list = data[key] || [];
							data[key] = list;
							var rdata = cr.value.data;
							_addInfoPlus(purl, cr.value, rdata, $sdata.url2proto(purl, true));
							list.push(rdata);
						}
						if (sdataUrl != null && sdataUrl == cr.value.url) {
							// Stop if sdataUrl!=null
							cb(data);
						} else {
							cr["continue"]();
						}
					} else {
						cb(data);
					}
				};
				request.onerror = function(event) {
					cb(null);
				};
			}
		},
		//ok
		_undoUpdate: function(db, url, cb) {
			if (_log) _log("_undoUpdate  - url=" + url);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			try {
				var sdataObj = tx.objectStore("sdata");
				_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {
					if (data) {
						if (!$sdata.store(url) || (data.status === $sdata.STATUS.CREATED)) {
							// delete sdata record
							return _indexDB._rmvSDataByUrl(url, sdataObj, function(data, error) {
								cb(null);
							});

						} else {
							var insData = {
								appid: data.appid,
								url: data.url,
								data: data.original_data ? data.original_data : data.data,
								original_data: null,
								status: $sdata.STATUS.ORIGINAL
							};
							return _indexDB._updSDataByUrl(url, insData, sdataObj, function(data, error) {
								cb(null);
							});
						}
					}
					cb(null);

				});
			} catch (ex) {
				$helpers.log(ex);
			}
		},

		_installApp: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_WRITE);
			var objectStore = tx.objectStore("apps");
			var index = objectStore.index("url");
			var keyRange = IDBKeyRange.only(data.url);
			var request = index.openCursor(keyRange);
			var doInsert = function() {
				var reqt = objectStore.add(data);
				reqt.onerror = function(event) {
					$helpers.pushdbError(event);
					cb();
				};
				reqt.onsuccess = function(event) {
					cb();
				};

			};
			request.onsuccess = function(event) {
				var cr = event.target.result;
				if (cr) {
					if (cr.value.baseURL == data.baseURL) cr["delete"]();
					cr["continue"]();
				} else {
					doInsert();
				}
			};
			request.onerror = function(event) {
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					doInsert();
				} else {
					$helpers.pushdbError(event);
					cb();
				}
			};

		},
		_addCache: function(db, appid, entity, data, cb) {
			//TODO:FAVORITE
			return cb();
		},
		//okk
		_clearSdata: function(db, id, tx, cb) {
			if (_log) _log("_clearSdata  - appId=" + id);
			if (!_checkDBHandler(db, cb)) return;
			if (!tx) tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			_indexDB._uninstallSdata(sdata, id, cb);
		},
		//okk
		_removeFromDB: function(db, id, cb) {
			if (_log) _log("_removeFromDB  - appId=" + id);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps", "draft", "sdata", "sdatafav"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			var draft = tx.objectStore("draft");
			var sdatafav = tx.objectStore("sdatafav");
			_indexDB._uninstallDraft(draft, sdata, sdatafav, id, function() {
				var apps = tx.objectStore("apps");
				var rmvapp = apps["delete"](id);
				rmvapp.onsuccess = function(event) {
					cb();
				};
				rmvapp.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) return cb();
					$helpers.pushdbError(event);
					cb();
				};

			});
		},
		_getAppConfig: function(db, appId, cb) {
			if (_log) _log("_removeFromDB  - appId=" + appId);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY);
			var objectStore = tx.objectStore("apps");
			var request = objectStore.get(appId);
			request.onsuccess = function(event) {
				var cr = event.target.result;
				if (cr) {
					cr.data.id = cr.id;
					var res = $.extend(true, {}, cr.data);
					res.$info = {
						url: cr.url,
						version: cr.version,
						title: cr.title,
						icon: cr.icon,
						description: cr.description,
						dsdescription: cr.dsdescription
					};
					_indexDB._getInstalledApps(db, false, function(apps) {
						res.applications = apps;
						cb(res);
					});

				} else cb(null);
			};
			request.onerror = function(event) {
				$helpers.pushdbError(event);
				cb(null, event);
			};
		},
		_saveAppConfig: function(db, data, cb) {
			if (_log) _log("_saveAppConfig ");
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_WRITE);
			var objectStore = tx.objectStore("apps");
			var request = objectStore.get(data.id);
			var savedata = null;
			request.onsuccess = function(event) {
				var cr = event.target.result;
				delete data.$info;
				cr.data = data;
				savedata = $.extend(true, {}, cr);
				if (cr) {
					var pr = objectStore.put(savedata);
					pr.onsuccess = pr.onerror = function(event) {
						cb(null);
					};
				} else cb(null);
			};
			request.onerror = function(event) {
				$helpers.pushdbError(event);
				cb(null, event);
			};
		},

		_getInstalledApps: function(db, grouped, cb) {
			if (_log) _log("_getInstalledApps ");
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY);
			//var tx = db.transaction("apps", "readonly");//IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("apps");
			var index = objectStore.index("url");
			var request = index.openCursor();
			var results = [];
			request.onsuccess = function(event) {
				var cr = event.target.result;
				if (cr) {
					var data = cr.value;
					results.push({
						id: data.id,
						url: data.url,
						title: data.title,
						dsdescription: data.dsdescription,
						description: data.description,
						icon: data.icon,
						baseURL: data.baseURL,
						version: data.version
					});
					cr["continue"]();
				} else {
					cb(results);
				}
			};
			request.onerror = function(event) {
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					cb(results);
				} else {
					$helpers.pushdbError(event);
					cb(results);
				}
			};
		},
		//ok 
		_delData: function(db, url, cb) {
			if (_log) _log("_delData " + url);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			_indexDB._rmvSDataByUrl(url, sdata, cb);
		},
		//ok
		_updData: function(db, oldUrl, data, cb) {
			if (_log) _log("_updData " + oldUrl);
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			data.url = oldUrl;
			var _updSdata = function() {
				if ((data.status === $sdata.STATUS.ORIGINAL) && !$sdata.store(oldUrl)) {
					return _indexDB._rmvSDataByUrl(oldUrl, sdata, function(dd, error) {
						cb(null, error);
					});
				} else {
					return _indexDB._updSDataByUrl(oldUrl, data, sdata, function(dd, error) {
						cb(null, error);
					});
				}

			};
			if (data.$load) {
				delete data.$load;
				_indexDB._getSDataByUrl(data.url, sdata, function(gdata, error) {
					Object.keys(data).forEach(function(value) {
						gdata[value] = data[value];
					});
					data = gdata;
					_updSdata();
				});
			} else {
				_updSdata();
			}

		},
		_initData: function(db, config, data, doclean, cb) {
			//if (_log) _log("_initData " + oldUrl); //oldUrl - not found
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			tx.oncomplete = function(event) {
				cb();
			};
			tx.onerror = function(event) {
				$helpers.pushdbError(event);
				cb();
			};
			var fail = false;
			var objectStore = tx.objectStore("sdata");
			data.forEach(function(value, index) {
				if (fail) return;
				var cd = {
					data: value,
					appid: config.id,
					url: $sdata.data2url(config.url, value, config.$prototype)
				};
				_checkSdataData(cd, false);
				var request = objectStore.add(cd);
				request.onerror = function(event) {
					fail = true;
				};
			});
		},
		_loadDraft: function(db, id, cb) {
			if (_log) _log("_loadDraft " + id);
			if (!_checkDBHandler(db, cb)) return;
			try {
				var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY);
				var objectStore = tx.objectStore("draft");
				var request = objectStore.get(id);
				request.onsuccess = function(event) {
					if (event.target.result) cb(event.target.result);
					else cb(null);
				};
				request.onerror = function(event) {
					$helpers.pushdbError(event);
					cb(null);
				};
			} catch (ex) {
				$helpers.pushdbError(ex);
				cb(null, ex);
			}
		},
		//OK
		_createDraft: function(db, data, cb) {
			if (_log) _log("_createDraft ");
			_indexDB._scanDb(db, "draft", ["id"], function() {
				if (!_checkDBHandler(db, cb)) return;
				// start an edit activity
				data.appid = $sdata.config.id;
				var tx = db.transaction(["draft"], IDBTransaction.READ_WRITE);
				var objectStore = tx.objectStore("draft");
				var index = objectStore.index("original_url");
				var keyRange = IDBKeyRange.only(data.original_url);
				try {
					var request = index.openCursor(keyRange);
					request.onsuccess = function(event) {
						if (event.target.result) {
							var cr = event.target.result;
							if (cr.value.appid === data.appid) {
								if (_log) _log("_createDraft - Remove existing Draft");
								cr["delete"]();
							}
							cr["continue"]();
						} else {
							if (_log) _log("_createDraft - New Draft");
							_indexDB._insertDraft(db, tx, data, cb);
						}
					};
					request.onerror = function(event) {
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
							if (_log) _log("_createDraft - New Draft");
							_indexDB._insertDraft(db, null, data, cb);
						}
					};
				} catch (ex) {
					$helpers.pushdbError(ex);
					return cb(null, ex);
				}
			});
		},

        //OK
        _getSavedTemplates: function(db, keys, cb) {
            if (!_checkDBHandler(db, cb)) return;
            var tx = db.transaction(["template"], IDBTransaction.READ_ONLY);
            var objectStore = tx.objectStore("template");
            var index = objectStore.index("lookup");
            var request = index.openCursor(IDBKeyRange.only(keys.appid + "#" + keys.page + "#" + keys.user));
            var results = [];
            request.onsuccess = function(event) {
                var cr = event.target.result;
                if (cr) {
                    var data = cr.value;
                    results.push(data.template);
                    cr["continue"]();
                } else {
                    cb(results);
                }
            };
            request.onerror = function(event) {
                if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
                    cb(results);
                } else {
                    $helpers.pushdbError(event);
                    cb(results);
                }
            };
        },

        _saveTemplate: function(db, keys, template, cb) {
            if (!_checkDBHandler(db, cb)) return;
            var tx = db.transaction(["template"], IDBTransaction.READ_WRITE);
            var objectStore = tx.objectStore("template");
            var uuid = template["$uuid"];
            var request = objectStore["delete"](uuid);

            var saveAfterDelete = function() {
                var request = objectStore.put({
                    "$uuid": template.$uuid,
                    "lookup": keys.appid + "#" + keys.page + "#" + keys.user,
                    "template": template
                });
                request.onsuccess = function(event) {
                    cb();
                };
                request.onerror = function(event) {
                    $helpers.pushdbError(event);
                    cb();
                };
            };
            request.onsuccess = function(event) {
                saveAfterDelete();
            };
            request.onerror = function(event) {
                if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
                    saveAfterDelete();
                } else {
                    $helpers.pushdbError(event);
                    cb();
                }
            };
        },

        _deleteTemplate: function(db, templateUuid, cb) {
            if (!_checkDBHandler(db, cb)) return;
            var tx = db.transaction(["template"], IDBTransaction.READ_WRITE);
            var objectStore = tx.objectStore("template");
            var request = objectStore["delete"](templateUuid);
            request.onsuccess = function(event) {
                cb();
            };
            request.onerror = function(event) {
                if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
                    cb();
                } else {
                    $helpers.pushdbError(event);
                    cb();
                }
            };
        }

	};

	var _private = {
		//okk
		_getSDataByUrl: function(url, tx, cb) {
			if (url.indexOf("appid=") < 0) url = url + "&appid=" + $sdata.config.id;
			tx.executeSql('SELECT * FROM sdata where url=?', [url],

				function(tx, results) {
					var rows = results.rows;
					if (rows && rows.length) {
						var row = rows.item(0);
						cb({
							appid: row.appid,
							url: row.url,
							entity_url: row.entity_url,
							data: (row.data ? JSON.parse(row.data) : null),
							original_data: (row.original_data ? JSON.parse(row.original_data) : null),
							status: row.status,
							updated: row.updated,
							last_error: row.last_error
						});

					} else cb(null);
				},

				function(tx, error) {
					cb(null, error);
				});
		},
		//okk
		_rmvSDataByUrl: function(url, tx, cb) {
			if (url.indexOf("appid=") < 0) url = url + "&appid=" + $sdata.config.id;
			tx.executeSql('DELETE FROM sdata where url=?', [url],

				function(tx, results) {
					cb(null);
				},

				function(tx, error) {
					cb(null, error);
				});
		},
		_switchFavTran: function(data, tx, cb) {
			tx.executeSql('SELECT * FROM sdatafav where url=?', [data.url],

				function(tx, results) {
					var rows = results.rows;
					if (rows && rows.length) {
						var row = rows.item(0);
						// remove entity 
						_private._rmvFav(tx, data.url, function(d, error) {
							if (error) cb({
								op: 0
							});
							else cb({
								op: 2,
								key: _extractkey(data.url)
							});
						});

					} else {
						// insert
						_private._insFav(tx, data, function(d, error) {
							if (error) cb({
								op: 0
							});
							else cb({
								op: 1,
								key: _extractkey(data.url)
							});
						});

					}
				},

				function(tx, error) {
					$helpers.pushdbError(error);
					cb({
						op: 0
					});
				});
		},
		_loadFavoriteList: function(db, options, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				options.appid = options.appid || $sdata.config.id;
				if (options.entity_url) {
					tx.executeSql('SELECT url FROM sdatafav where appid=? and entity_url=?', [options.appid, options.entity_url],

						function(tx, results) {
							var rows = results.rows;
							var favs = [];
							if (rows && rows.length) {
								for (var i = 0, len = rows.length; i < len; i++) {
									var row = rows.item(i);
									favs.push(_extractkey(row.url));
								}
							}
							cb(favs);
						},

						function(tx, error) {
							$helpers.pushdbError(error);
							cb();
						});
				} else {
					tx.executeSql('SELECT * FROM sdatafav where appid=?', [options.appid],

						function(tx, results) {
							var rows = results.rows;
							var res = {};
							if (rows && rows.length) {
								for (var i = 0, len = rows.length; i < len; i++) {
									var row = rows.item(i);
									var purl = $sdata.parseSdataUri(row.url);
									delete purl.query.appid;
									var cd = JSON.parse(row.data);
									var edata = res[purl.query.representation];
									if (!edata) {
										edata = {
											$resources: []
										};
										var oldid = purl.id;
										var oldq = purl.query;
										purl.id = "";
										purl.query = null;
										edata.$url = $sdata.getUri(purl) + "/" + $proto.sdataKey.batchGet + "?representation=" + $helpers.encodeURIComponent(oldq.representation);
										purl.id = oldid;
										purl.query = oldq;
										res[purl.query.representation] = edata;
									}

									var dd = {
										$httpMethod: "GET",
										$httpifMatch: cd.$etag,
										$key: purl.id,
										$url: _makeBatchGetUrl(purl, cd)
									};
									if (cd.$uuid) dd.$uuid = cd.$uuid;
									edata.$resources.push(dd);
								}
							}
							cb(res);
						},

						function(tx, error) {
							$helpers.pushdbError(error);
							cb();
						});

				}

			}, function(tx, error) {
				$helpers.pushdbError(error);
				cb(); //none
			});
		},
		_insertFav: function(db, appid, entity_url, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				tx.executeSql('DELETE from sdatafav where entity_url=? and appid=?', [entity_url, appid],

					function(tx, results) {
						if (!data || !data.length) return;
						var fail = false;
						var sql = 'INSERT INTO sdatafav(url, appid, entity_url, data) values(?,?,?,?)';
						data.forEach(function(value, index) {
							if (fail) return;
							value.entity_url = entity_url;
							value.appid = appid;
							_checkSdataData(value, true);
							tx.executeSql(sql, [
									value.url, value.appid, value.entity_url, (value.data ? JSON.stringify(value.data) : "")
								],

								function(tx, results) {},

								function(tx, error) {
									$helpers.pushdbError(error);
								});

						});

					},

					function(tx, error) {
						$helpers.pushdbError(error);
					});


			}, function(error) {
				cb();
			}, function() {
				cb();
			});

		},

		_switchFav: function(db, url, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				var cd = {
					data: data,
					url: url
				};
				_checkSdataData(cd, true);
				return _private._switchFavTran(cd, tx, cb);
			}, function(tx, error) {
				$helpers.pushdbError(error);
				cb({
					op: 0
				}); //none
			});
		},
		//okk
		_insData: function(db, url, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				return _private._insertSdata({
					data: data,
					url: url
				}, tx, cb);
			}, function(tx, error) {
				$helpers.pushdbError(error);
				return cb(null, error);
			});
		},
		//ok
		_rmvFav: function(tx, url, cb) {
			tx.executeSql('DELETE from sdatafav where url=?', [url],

				function(tx, results) {
					cb(null, false);
				},

				function(tx, error) {
					$helpers.pushdbError(error);
					cb(null, true);
				});
		},
		_insFav: function(tx, data, cb) {
			var sql = 'INSERT INTO sdatafav(url, appid, entity_url, data) values(?,?,?,?)';
			tx.executeSql(sql, [
					data.url, data.appid, data.entity_url, (data.data ? JSON.stringify(data.data) : "")
				],

				function(tx, results) {
					cb(null, false);
				},

				function(tx, error) {
					$helpers.pushdbError(error);
					cb(null, true);
				});
		},
		_addCache: function(db, appid, entity, data, cb) {
			cb();
		},
		//ok
		_insertSdata: function(data, tx, cb, bulk) {
			var sql = 'INSERT INTO sdata(appid, url, entity_url, data, original_data,status, updated, last_error) values(?,?,?,?,?,?,?,?)';
			if (bulk) {
				bulk.forEach(function(data) {
					tx.executeSql(sql, [
							data.appid, data.url, data.entity_url, (data.data ? JSON.stringify(data.data) : ""), (data.original_data ? JSON.stringify(data.original_data) : ""), data.status,
							data.updated, data.last_error
						],

						function(tx, results) {},

						function(tx, error) {
							$helpers.pushdbError(error);
						});
				});
			} else {
				_checkSdataData(data, false);
				tx.executeSql(sql, [
						data.appid, data.url, data.entity_url, (data.data ? JSON.stringify(data.data) : ""), (data.original_data ? JSON.stringify(data.original_data) : ""), data.status,
						data.updated, data.last_error
					],

					function(tx, results) {
						cb(null);
					},

					function(tx, error) {
						$helpers.pushdbError(error);
						cb(null, error);
					});
			}
		},
		//ok
		_updSDataByUrl: function(url, data, tx, cb) {
			_checkSdataData(data, false);
			tx.executeSql('Update sdata set appid=?, url=?, entity_url=?, data=?, original_data=? ,status=?, updated=?, last_error=? where url=?', [
					data.appid, data.url, data.entity_url, (data.data ? JSON.stringify(data.data) : ""), (data.original_data ? JSON.stringify(data.original_data) : ""), data.status,
					data.updated, data.last_error, data.url
				],

				function(tx, results) {
					cb(null);
				},

				function(tx, error) {
					cb(null, error);
				});
		},
		//okk
		_saveDraft: function(db, id, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM draft where id=?', [id], function(rows, error) {
				if (error) {
					$helpers.pushdbError(error);
					return cb({
						status: 404
					});
				}
				if (rows && rows.length) {
					var row = rows.item(0);
					var cdata = {
						id: row.id,
						appid: row.appid,
						original_url: row.original_url,
						data: (row.data ? JSON.parse(row.data) : null),
						original_data: (row.original_data ? JSON.parse(row.original_data) : null)
					};
					var purl = $sdata.parseSdataUri(cdata.original_url);
					var createActivity = false;
					if (purl.template) {
						createActivity = true;
						purl.template = false;
						purl.id = $sdata.data2id(purl, cdata.data);
					}
					if (purl.id == null || purl.id.trim().length == 0) {
						// Issue #3029 - id is mandatory
						$helpers.pushError($.helpers.locale().emptydraftkey);
						// setDisplayErrorAsMessage -> To display the error message in top of window
						$helpers.setDisplayErrorAsMessage();
						cb({
							status: 400
						});
						return;
					}
					purl.createActivity = false;
					purl.editActivity = false;
					var url = $sdata.url2local(purl);
					var insData = {
						url: url,
						data: data,
						original_data: cdata.original_data
					}
					var _failTran = function(tx, error) {
						$helpers.pushdbError(error);
						return cb(null, error);
					};
					db.transaction(function(tnx) {
						delete cdata.original_data;
						_private._getSDataByUrl(url, tnx, function(data, error) {
							//$sdata.STATUS.MODIFIED
							if (data) {
								if (data.status === $sdata.STATUS.DELETED) {
									// deleted
									return _private._deleteDraft(db, tnx, id, function(data, error) {
										cb({
											status: 404
										});
									});
								}
								if ((data.status === $sdata.STATUS.ORIGINAL) || (data.status === $sdata.STATUS.MODIFIED)) {
									if (data.status === $sdata.STATUS.ORIGINAL) {
										insData.original_data = $.extend(true, {}, data.data);
										insData.status = $sdata.STATUS.MODIFIED;
									} else if (data.status === $sdata.STATUS.MODIFIED) {
										insData.original_data = $.extend(true, {}, data.original_data);
										insData.status = $sdata.STATUS.MODIFIED;
									}
									delete insData.data.$info;
									delete insData.data.$trackingId;
									if (insData.original_data) {
										delete insData.original_data.$info;
										delete insData.original_data.$trackingId;
										if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
											delete insData.original_data;
											insData.status = $sdata.STATUS.ORIGINAL;
											if (!$sdata.store(insData.url)) {
												// delete sdata record & delete draft
												return _private._rmvSDataByUrl(insData.url, tnx, function(data, error) {
													_private._deleteDraft(db, tnx, id, function(data, error) {
														cb({
															status: 200
														});
													});
												});
											}
										}
									}
								} else {
									//$sdata.STATUS.CREATED
									insData.status = $sdata.STATUS.CREATED;
								}
								// update sdata record and delete draft								
								return _private._updSDataByUrl(insData.url, insData, tnx, function(data, error) {
									_private._deleteDraft(db, tnx, id, function(data, error) {
										cb({
											status: 200,
											// Returns sDataUrl that identify sData record
											sDataUrl: insData.url
										});
									});
								});
							} else {
								if (createActivity) {
									insData.status = $sdata.STATUS.CREATED;
									delete insData.original_data;

								} else {
									insData.status = $sdata.STATUS.MODIFIED;
								}
								delete insData.data.$info;
								delete insData.data.$trackingId;
								if (insData.original_data) {
									delete insData.original_data.$info;
									delete insData.original_data.$trackingId;
									if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
										delete insData.original_data;
										insData.status = $sdata.STATUS.ORIGINAL;
										return _private._deleteDraft(db, tnx, id, function(data, error) {
											cb({
												status: 404,
												// Returns sDataUrl that identify sData record even if not modify to continue the prosess
												sDataUrl: insData.url
											});
										});
									}
								}
								// create record  && delete draft
								_private._insertSdata(insData, tnx, function(data, error) {
									_private._deleteDraft(db, tnx, id, function(data, error) {
										cb({
											status: 200,
											// Returns sDataUrl that identify sData record
											sDataUrl: insData.url
										});
									});
								});
							}
						});
					}, _failTran);

				} else cb({
					status: 404
				});
			});
		},
		_droptables: function(db, tx, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _exec = function(tx) {
				$helpers.each(["draft", "sdata", "apps", "template"], function(table, index, next) {
					tx.executeSql('drop table if exists ' + table, [], function(tx, result) {
						next();
					}, function(tx, error) {
						next();
					});
				}, function() {
					cb(db);
				});
			};
			if (tx) _exec(tx);
			else db.transaction(_exec);

		},
		_createtables: function(db, tx, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _exec = function(tx) {
				$helpers.each(["draft", "sdata", "apps", "sdatafav", "template"], function(table, index, next) {
					tx.executeSql(_sqlLiteGetSQL(table), [], function(tx, result) {
						next();
					}, function(tx, error) {
						$helpers.pushdbError(error);
						next();
					});
				}, function() {
					cb(db);
				});
			};
			if (tx) _exec(tx);
			else db.transaction(_exec);

		},
		_openDB: function(cb) {
			if (window.openDatabase) {
				var error = function(tx, error) {
					$helpers.alert(error.message, function() {}, true);
				};
				var maxsize = 200000;
				try {
					var db = openDatabase(dbName, "1.0", "HTML 5 Database for Mobile", maxsize);
				} catch (ex) {
					$helpers.pushException({
						title: $helpers.locale().ui.no_db_support_sol,
						message: ex.message,
						stackTrace: ex.stackTrace
					});
					return cb(null);
				}
				if (!db) {
					$helpers.pushException({
						title: $helpers.locale().ui.no_db_support,
						message: $helpers.locale().ui.no_db_support_sol
					});
					return cb(null);
				}

				if (db) {
					db.transaction(function(tx) {
						tx.executeSql(_sqlLiteGetSQL("migration"), [], function(tx, result) {
							tx.executeSql('select version from migration', [], function(tx, results) {
								if (results.rows && results.rows.length) {
									var oldVersion = results.rows.item(0).version;
									if (oldVersion == (version + "")) {
										return cb(db);
									} else {
										_private._droptables(db, tx, function() {
											_private._createtables(db, tx, function() {
												tx.executeSql('update migration set version=?', [version + ""], function(tx, result) {
													return cb(db);
												}, error);

											});

										});

									}
								} else {
									tx.executeSql('insert into migration (version) values (?)', [version], function(tx, result) {
										_private._createtables(db, tx, cb);
									}, error);
								}

							}, error);
						}, error);
					});
				} else {
					$helpers.alert("Failed to open the database on disk.  This is probably because the version was bad or there is not enough space left in this domain's quota", function() {}, true);
				}
			}
		},
		_execOpen: function(db, sql, params, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var failTran = function(tx, error) {
				$helpers.pushdbError(error);
				cb(null, true);
			};
			db.readTransaction(function(tx) {
				tx.executeSql(sql, params, function(tx, results) {
					var rows = results.rows;
					cb(rows);
				}, failTran);
			}, failTran);
		},
		_execSQL: function(db, tx, sql, params, options) {
			var oldFail = options.fail;
			options.fail = function(tx, ex) {
				$helpers.pushdbError(ex);
				if (oldFail) oldFail();
			};
			var failTran = function(tx, error) {
				$helpers.pushdbError(error);
				if (oldFail) oldFail();
			};
			if (tx) {
				tx.executeSql(sql, params, function(tx, results) {
					options.success();
				}, options.fail);
			} else {
				db.transaction(function(tx) {
					tx.executeSql(sql, params, function(tx, results) {
						options.success();
					}, options.fail);
				}, failTran);
			}
		},
		//ok 
		_insertDraft: function(db, tx, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, tx, 'INSERT INTO draft (id, appid, original_url, original_data,  data) values(?,?,?,?,?)', [data.id, data.appid, data.original_url,
				data.original_data ? JSON.stringify(data.original_data) : "", JSON.stringify(data.data)
			], {
				success: function() {
					cb(data);
				}
			});
		},
		//okk
		_deleteDraft: function(db, tx, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, tx, 'DELETE from draft where id=?', [id], {
				success: function() {
					cb(null);
				},
				fail: function() {
					cb(null);
				}
			});
		},

		//okk
		_markSdataDeleted: function(o_url, tx, odata, cb) {
			var purl = $sdata.parseSdataUri(o_url),
				createActivity = false;
			if (purl.template) {
				createActivity = true;
				purl.template = false;
				purl.id = $sdata.data2id(purl, odata);
			}
			purl.createActivity = false;
			purl.editActivity = false;
			var url = $sdata.url2local(purl);
			_private._getSDataByUrl(url, tx, function(data, error) {
				if (data) {
					if (data.status === $sdata.STATUS.DELETED) {
						return cb(url);
					} else if ((data.status === $sdata.STATUS.MODIFIED) || (data.status === $sdata.STATUS.ORIGINAL)) {
						// mark deleted
						var insData = {
							appid: data.appid,
							url: data.url,
							data: data.original_data ? data.original_data : data.data,
							original_data: null,
							status: $sdata.STATUS.DELETED
						};
						return _private._updSDataByUrl(insData.url, insData, tx, function(data, error) {
							return cb(insData.url);
						});
					} else if (data.status === $sdata.STATUS.CREATED) {
						// remove sdata record 
						return _private._rmvSDataByUrl(url, tx, function(data, error) {
							return cb(url);
						});
					}
				} else {
					if (createActivity) return cb(null);
					// edit 
					var newData = {
						url: url,
						data: odata,
						original_data: null,
						status: $sdata.STATUS.DELETED
					};
					_private._insertSdata(newData, tx, function(data, error) {
						return cb(newData.url);
					});
				}
			});
		},
		_deleteDataByUrl: function(db, url, odata, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {
				$helpers.pushdbError(error);
				cb(null, error);
			};
			db.transaction(function(tx) {
				_private._markSdataDeleted(url, tx, odata, function(sdataUrl) {
					// #2362 - sdata urls as cb param
					cb(sdataUrl);
				});
			}, _failTran);
		},

		//ok
		_deleteDataByDraft: function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {
				$helpers.pushdbError(error);
				cb(null, error);
			};
			db.transaction(function(tx) {
				tx.executeSql('SELECT * FROM draft where id=?', [id], function(tx, rows) {
					if (rows && rows.rows && rows.rows.length) {
						var row = rows.rows.item(0);
						var cdata = {
							id: row.id,
							appid: row.appid,
							original_url: row.original_url,
							data: (row.data ? JSON.parse(row.data) : null),
							original_data: (row.original_data ? JSON.parse(row.original_data) : null)
						};

						var url = cdata.original_url;
						_private._markSdataDeleted(url, tx, (cdata.original_data ? cdata.original_data : cdata.data), function(sdataUrl) {
							return _private._deleteDraft(db, tx, id, function(data, error) {
								// #2362 - sdata urls as cb param
								cb(sdataUrl);
							});

						});
					} else cb(null);
				}, _failTran);
			}, _failTran);
		},
		//Ok
		_createDraft: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			// start an edit activity
			data.appid = $sdata.config.id;
			db.transaction(function(tx) {
				_private._execSQL(db, tx, 'DELETE from draft where original_url=? and appid=?', [data.original_url, data.appid], {
					success: function() {
						_private._insertDraft(db, tx, data, cb);
					},
					fail: function(error) {
						_private._insertDraft(db, tx, data, cb);
					}
				});
			}, function(tx, error) {
				$helpers.pushdbError(error);
				cb(null, error);
			});
		},
		//ok
		_updateDraft: function(db, draftId, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, null, 'UPDATE draft set data=? where id=?', [JSON.stringify(data), draftId], {
				success: cb
			});
		},
		//ok
		_getSData: function(db, purl, fav, cb) {
			if (!_checkDBHandler(db, cb)) return;
			try {
				var gmap = [],
					gvalues = {};
				var su = $sdata.url2local(purl, fav);
				if (purl.id || purl.template) {
					db.readTransaction(function(tx) {
						tx.executeSql('SELECT * FROM sdata where url=? and status<?', [su, $sdata.STATUS.DELETED], function(tx, results) {
							var rows = results.rows;
							if (rows.length) cb(_addInfo(rows.item(0), JSON.parse(rows.item(0).data)), {
								status: 200
							});
							else cb(null, {
								status: 404
							});
						});
					}, function() {
						cb(null, {
							status: 404
						});
					});
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					db.readTransaction(function(tx) {
						var smap = $sdata.url2search(purl),
							favs = fav ? [] : null;
						var sql = 'SELECT * FROM sdata where entity_url=? and  appid=? and status<?';
						var params = [su, $sdata.config.id, $sdata.STATUS.DELETED];
						if (fav) {
							sql = 'SELECT * FROM sdatafav where entity_url=? and  appid=?';
							params = [su, $sdata.config.id];

						}
						tx.executeSql(sql, params, function(tx, results) {
							var rows = results.rows;
							if (rows.length) {
								for (var jj = 0, ll = rows.length; jj < ll; jj++) {
									var row = rows.item(jj);
									if (_addResource(row, JSON.parse(row.data), result.$resources, purl, gmap, gvalues, smap)) {
										if (fav) favs.push(_extractkey(row.url));
									}
								}
								if (purl.pgroupBy)
									for (var ii in gvalues) result.$resources.push(gvalues[ii]);
								_applySort(purl, result.$resources);
								cb(result, {
									status: 200,
									favorites: favs
								});

							} else cb(result, {
								status: 200
							});

						});
					}, function(errors) {
						cb(result, {
							status: 404
						});
					});
				}
			} catch (ex) {
				$helpers.log(ex);
			}
		},
		_loadDraft: function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM draft where id=?', [id], function(rows, error) {
				if (error) return cb(null);
				if (rows.length) {
					var row = rows.item(0);
					cb({
						appid: row.appid,
						id: row.id,
						original_url: row.original_url,
						data: JSON.parse(row.data)
					});
				} else {
					cb(null);
				}

			});

		},
		_getModifiedData: function(db, purl, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var res = {}, eu = $sdata.entityUri(purl, true);
			var appid = ($sdata.config ? $sdata.config.id : "");
			_private._execOpen(db, 'SELECT * FROM sdata where status > ? and appid = ? and entity_url = ?', [$sdata.STATUS.ORIGINAL, appid, eu], function(rows, error) {
				if (error) return cb(res);
				if (rows && rows.length) {
					for (var i = 0, len = rows.length; i < len; i++) {
						var row = rows.item(i);
						var data = JSON.parse(row.data);
						var purl = $sdata.parseSdataUri(row.url);
						res[purl.id] = {
							data: data,
							status: row.status,
							url: row.url
						};
					}
					cb(res);
				} else cb(res);
			});
		},
		// If sdataUrl==null returns only data identfied by thus url (used by edit mode)
		// Else returns all pending data
		_getSyncData: function(db, count, cb, sdataUrl) {
			if (!_checkDBHandler(db, cb)) return;
			var data = null;
			var appid = ($sdata.config ? $sdata.config.id : "");
			if (count) {
				_private._execOpen(db, 'SELECT count(*) as sync FROM sdata where status > ? and appid = ?', [$sdata.STATUS.ORIGINAL, appid], function(rows, error) {
					if (error) return cb(0);
					if (rows && rows.length) {
						cb(rows.item(0).sync);
					} else cb(0);
				});
			} else {
				var req = 'SELECT * FROM sdata where status > ? and appid = ?';
				var params = [$sdata.STATUS.ORIGINAL, appid];
				if (sdataUrl != null) {
					req += ' and url = ?';
					params.push(sdataUrl);
				}
				_private._execOpen(db, req, params, function(rows, error) {
					if (error) return cb(null);
					if (rows && rows.length) {
						for (var i = 0, len = rows.length; i < len; i++) {
							var row = rows.item(i);
							var purl = $sdata.parseSdataUri(row.url);
							var key = $sdata.url2entity(purl);
							data = data || {};
							var list = data[key] || [];
							data[key] = list;
							var rdata = JSON.parse(row.data);
							_addInfoPlus(purl, row, rdata, $sdata.url2proto(purl, true));
							list.push(rdata);
						}
						cb(data);
					} else cb(null);
				});
			}
		},
		//ok
		_delData: function(db, url, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				return _private._rmvSDataByUrl(url, tx, cb);
			});
		},
		_installApp: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {
				$helpers.pushdbError(error);
				cb();
			};

			db.transaction(function(tx) {
				var _after = function() {
					tx.executeSql("INSERT INTO apps(id, url, title, description, icon, baseURL, version, data, dsdescription) values(?,?,?,?,?,?,?,?,?)", [data.id, data.url, data.title, data.description, data.icon, data.baseURL, data.version, JSON.stringify(data.data), data.dsdescription],

						function(tx, result) {
							cb();
						}, function(tx, error) {
							$helpers.pushdbError(error);
							cb();
						});

				};
				tx.executeSql("delete from apps where url=? and baseURL= ?", [data.url, data.baseURL],

					function(tx, result) {
						_after();
					}, function(tx, error) {
						_after();
					});
			});
		},
		//ok
		_clearSdata: function(db, id, tx, cb) {
			if (!_checkDBHandler(db, cb)) return;
			if (tx) {
				return _private._execSQL(db, tx, 'DELETE from sdata where appid=?', [id], {
					success: function() {
						cb();
					},
					fail: function() {
						cb();
					}
				});
			} else {
				var _failTran = function(tx, error) {
					$helpers.pushdbError(error);
					return cb();
				};
				db.transaction(function(tx) {
					return _private._execSQL(db, tx, 'DELETE from sdata where appid=?', [id], {
						success: function() {
							cb();
						},
						fail: function() {
							cb();
						}
					});
				}, _failTran);

			}

		},
		//ok
		_removeFromDB: function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {
				$helpers.pushdbError(error);
				return cb();
			};
			db.transaction(function(tx) {
				var _removeFav = function() {
					return _private._execSQL(db, tx, 'DELETE from sdatafav where appid=?', [id], {
						success: function() {
							cb();
						},
						fail: function() {
							cb();
						}
					});
				};
				var _removeApp = function() {
					return _private._execSQL(db, tx, 'DELETE from apps where id=?', [id], {
						success: function() {
							_removeFav();
						},
						fail: function() {
							_removeFav();
						}
					});
				};

				var _removeDrafts = function() {
					return _private._execSQL(db, tx, 'DELETE from draft where appid=?', [id], {
						success: function() {
							_removeApp();
						},
						fail: function() {
							_removeApp();
						}
					});
				};
				return _private._clearSdata(db, id, tx, _removeDrafts);
			}, _failTran);
		},
		_getAppConfig: function(db, appId, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM apps where id=?', [appId], function(rows, error) {
				if (error) cb(null);
				if (rows && rows.length) {
					var cr = rows.item(0);
					var cdata = null;
					try {
						cdata = JSON.parse(cr.data);
					} catch (ex) {}
					cdata = cdata || {};
					cdata.id = cr.id;
					cdata.$info = {
						url: cr.url,
						version: cr.version,
						title: cr.title,
						icon: cr.icon,
						description: cr.description,
						dsdescription: cr.dsdescription
					};
					_private._getInstalledApps(db, false, function(apps) {
						cdata.applications = apps;
						cb(cdata);
					});

				} else cb(null);
			});
		},
		_saveAppConfig: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM apps where id=?', [data.id], function(rows, error) {
				if (error) cb(null);
				if (rows && rows.length) {
					var cr = rows.item(0);
					delete data.$info;
					var cid = data.id;
					_private._execSQL(db, null, 'UPDATE apps set data=? where id=?', [JSON.stringify(data), cid], {
						success: cb
					});
				} else cb(null);
			});
		},

		_getInstalledApps: function(db, grouped, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var results = [];
			_private._execOpen(db, 'SELECT * FROM apps ORDER BY url', [], function(rows, error) {
				if (error) return cb(results);
				if (rows && rows.length) {
					for (var i = 0, len = rows.length; i < len; i++) {
						var data = rows.item(i);
						results.push({
							id: data.id,
							url: data.url,
							title: data.title,
							dsdescription: data.dsdescription,
							description: data.description,
							icon: data.icon,
							baseURL: data.baseURL,
							version: data.version
						});
					}
				}
				cb(results);
			});
		},
		//ok
		_undoUpdate: function(db, url, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {

				_private._getSDataByUrl(url, tx, function(data, error) {
					if (data) {
						if (!$sdata.store(url) || (data.status === $sdata.STATUS.CREATED)) {
							// delete sdata record
							return _private._rmvSDataByUrl(url, tx, function(data, error) {
								cb(null);
							});

						} else {
							var insData = {
								appid: data.appid,
								url: data.url,
								data: data.original_data ? data.original_data : data.data,
								original_data: null,
								status: $sdata.STATUS.ORIGINAL
							};
							return _private._updSDataByUrl(url, insData, tx, function(data, error) {
								cb(null);
							});
						}
					}
					cb(null);

				});
			});
		},

		//ok
		_updData: function(db, oldUrl, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				data.url = oldUrl;
				var _updSdata = function() {
					if ((data.status === $sdata.STATUS.ORIGINAL) && !$sdata.store(oldUrl)) return _private._rmvSDataByUrl(oldUrl, tx, function(dd, error) {
						cb(null, error);
					});
					else return _private._updSDataByUrl(oldUrl, data, tx, function(dd, error) {
						cb(null, error);
					});

				};
				if (data.$load) {
					delete data.$load;
					_private._getSDataByUrl(data.url, tx, function(gdata, error) {
						Object.keys(data).forEach(function(value) {
							gdata[value] = data[value];
						});
						data = gdata;
						_updSdata();
					});
				} else {
					_updSdata();
				}


			});
		},
		_initData: function(db, config, data, doclean, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var bulk = [];
			data.forEach(function(value, index) {
				var cd = {
					data: value,
					appid: config.id,
					url: $sdata.data2url(config.url, value, config.$prototype)
				};
				_checkSdataData(cd, false);
				bulk.push(cd);
			});

			db.transaction(function(tx) {
				_private._insertSdata(null, tx, null, bulk);
			}, function(error) {
				cb();
			}, function() {
				cb();
			});
		},

        _getSavedTemplates: function(db, keys, cb) {
            if (!_checkDBHandler(db, cb)) return;
            var results = [];
            _private._execOpen(db, 'SELECT * FROM template where appid = ? and page = ? and user = ?', [keys.appid, keys.page, keys.user], function(rows, error) {
                if (error) return cb(results, error);
                if (rows && rows.length) {
                    for (var i = 0, len = rows.length; i < len; i++) {
                        var data = rows.item(i);
                        var tpl = JSON.parse(data.data);
                        results.push({
                            $uuid: data.id,
                            label: tpl.label,
                            updated: tpl.updated,
                            data: tpl.data
                        });
                    }
                }
                cb(results);
            });
        },

        _saveTemplate: function(db, keys,template, cb) {
            if (!_checkDBHandler(db, cb)) return;
            db.transaction(function(tx) {
                var _insert = function() {
                    tx.executeSql("INSERT INTO template(id, appid, page, user, data) values(?, ?, ?, ?, ?)",
                        [template.$uuid, keys.appid, keys.page, keys.user, JSON.stringify(template)],
                        function(tx, result) {
                            cb();
                        },
                        function(tx, error) {
                            $helpers.pushdbError(error);
                            cb();
                        }
                    );
                };
                tx.executeSql("delete from template where id = ?", [template.$uuid],
                    function(tx, result) {
                        _insert();
                    }, function(tx, error) {
                        _insert();
                    }
                );
            });
        },

        _deleteTemplate: function(db, uuid, cb) {
            if (!_checkDBHandler(db, cb)) return;
            db.transaction(function(tx) {
                _private._execSQL(db, tx, 'DELETE from template where id = ?', [uuid], {
                    success: function() {
                        cb(null);
                    },
                    fail: function() {
                        cb(null);
                    }
                });
            });
        }
    };
	/**
	 * @constructor
	 */

	function IndexedDBHandler() {
		this.init();
	};
	IndexedDBHandler.prototype = {
		init: function() {

		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _indexDB._openDB(function(db, errors) {
					if (!db) $helpers.pushdbError({
						message: $helpers.locale().ui.open_db_error
					});
					dbcall(db);
				});
			}
			if (!self.db) {
				_indexDB._openDB(function(db, errors) {
					self.db = db;
					if (!self.db) {
						$helpers.pushdbError({
							message: $helpers.locale().ui.open_db_error
						});
					}
					dbcall(self.db);
				});
			} else dbcall(self.db);
		},
		createDraft: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._createDraft(db, data, cb);
			});
		},
		updateDraft: function(draftId, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._updateDraft(db, draftId, data, cb);
			});
		},
		deleteDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._deleteDraft(db, null, id, cb);
			});
		},
		deleteDataByDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._deleteDataByDraft(db, id, cb);
			});
		},
		deleteDataByUrl: function(url, odata, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._deleteDataByUrl(db, url, odata, cb);
			});
		},

		saveDraft: function(draftURL, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._saveDraft(db, draftURL, data, cb);
			});
		},
		loadDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._loadDraft(db, id, cb);
			});
		},
		getSData: function(purl, useFav, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._getSData(db, purl, useFav, cb);
			});
		},

		initData: function(config, data, doclean, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._initData(db, config, data, doclean, cb);
			});
		},
		delData: function(url, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._delData(db, url, cb);
			});
		},
		undoUpdate: function(url, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._undoUpdate(db, url, cb);
			});
		},
		installApp: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._installApp(db, data, cb);
			});
		},
		removeFromDB: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._removeFromDB(db, id, cb);
			});
		},
		clearSdata: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._clearSdata(db, id, null, cb);
			});
		},
		addCache: function(appid, entity, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._addCache(db, appid, entity, data, cb);
			});

		},
		getAppConfig: function(appId, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._getAppConfig(db, appId, cb);
			});
		},
		saveAppConfig: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._saveAppConfig(db, data, cb);
			});
		},
		getInstalledApps: function(grouped, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._getInstalledApps(db, grouped, cb);
			});
		},

		getSyncData: function(cb, sdataUrl) {
			var self = this;
			self.check(function(db) {
				_indexDB._getSyncData(db, false, cb, sdataUrl);
			});
		},
		getModifiedData: function(purl, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._getModifiedData(db, purl, cb);
			});
		},

		getSyncCount: function(cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._getSyncData(db, true, cb);
			});
		},

		updData: function(oldUrl, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._updData(db, oldUrl, data, cb);
			});
		},
		insData: function(url, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._insData(db, url, data, cb);
			});
		},
		insertFav: function(appid, entity_url, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._insertFav(db, appid, entity_url, data, cb);
			});
		},
		switchFav: function(url, data, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._switchFav(db, url, data, cb);
			});
		},
		loadFavoriteList: function(options, cb) {
			var self = this;
			self.check(function(db) {
				_indexDB._loadFavoriteList(db, options, cb);
			});
		},
        getSavedTemplates: function(keys, cb) {
            var self = this;
            self.check(function(db) {
                _indexDB._getSavedTemplates(db, keys, cb);
            });
        },
        saveTemplate: function(keys, template, cb) {
            var self = this;
            self.check(function(db) {
                _indexDB._saveTemplate(db, keys, template, cb);
            });
        },
        deleteTemplate: function(templateUuid, cb) {
            var self = this;
            self.check(function(db) {
                _indexDB._deleteTemplate(db, templateUuid, cb);
            });
        }
	};
	/**
	 * @constructor
	 */

	function DataBaseHandler() {
		this.init();
	};
	DataBaseHandler.prototype = {
		init: function() {

		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _private._openDB(function(db, errors) {
					if (!db) $helpers.pushdbError({
						message: $helpers.locale().ui.open_db_error
					});
					dbcall(db);
				});
			}
			if (!self.db) {
				_private._openDB(function(db, errors) {
					self.db = db;
					if (!self.db) $helpers.pushdbError({
						message: $helpers.locale().ui.open_db_error
					});
					dbcall(self.db);
				});
			} else dbcall(self.db);
		},
		createDraft: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_private._createDraft(db, data, cb);
			});
		},
		updateDraft: function(draftId, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._updateDraft(db, draftId, data, cb);
			});
		},
		deleteDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_private._deleteDraft(db, null, id, cb);
			});
		},
		deleteDataByDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_private._deleteDataByDraft(db, id, cb);
			});
		},
		deleteDataByUrl: function(url, odata, cb) {
			var self = this;
			self.check(function(db) {
				_private._deleteDataByUrl(db, url, odata, cb);
			});
		},
		saveDraft: function(draftURL, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._saveDraft(db, draftURL, data, cb);
			});
		},
		loadDraft: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_private._loadDraft(db, id, cb);
			});
		},
		getSData: function(purl, useFav, cb) {
			var self = this;
			self.check(function(db) {
				_private._getSData(db, purl, useFav, cb);
			});
		},
		initData: function(config, data, doclean, cb) {
			var self = this;
			self.check(function(db) {
				_private._initData(db, config, data, doclean, cb);
			});
		},
		delData: function(url, cb) {
			var self = this;
			self.check(function(db) {
				_private._delData(db, url, cb);
			});
		},
		undoUpdate: function(url, cb) {
			var self = this;
			self.check(function(db) {
				_private._undoUpdate(db, url, cb);
			});
		},
		getInstalledApps: function(grouped, cb) {
			var self = this;
			self.check(function(db) {
				_private._getInstalledApps(db, grouped, cb);
			});
		},
		installApp: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_private._installApp(db, data, cb);
			});
		},
		removeFromDB: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_private._removeFromDB(db, id, cb);
			});
		},
		clearSdata: function(id, cb) {
			var self = this;
			self.check(function(db) {
				_private._clearSdata(db, id, null, cb);
			});
		},
		addCache: function(appid, entity, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._addCache(db, appid, entity, data, cb);
			});
		},
		getAppConfig: function(appId, cb) {
			var self = this;
			self.check(function(db) {
				_private._getAppConfig(db, appId, cb);
			});
		},
		saveAppConfig: function(data, cb) {
			var self = this;
			self.check(function(db) {
				_private._saveAppConfig(db, data, cb);
			});
		},
		getSyncData: function(cb, sdataUrl) {
			var self = this;
			self.check(function(db) {
				_private._getSyncData(db, false, cb, sdataUrl);
			});
		},
		getSyncCount: function(cb) {
			var self = this;
			self.check(function(db) {
				_private._getSyncData(db, true, cb);
			});
		},
		getModifiedData: function(purl, cb) {
			var self = this;
			self.check(function(db) {
				_private._getModifiedData(db, purl, cb);
			});
		},
		updData: function(oldUrl, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._updData(db, oldUrl, data, cb);
			});
		},
		insData: function(url, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._insData(db, url, data, cb);
			});
		},
		switchFav: function(url, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._switchFav(db, url, data, cb);
			});
		},
		insertFav: function(appid, entity_url, data, cb) {
			var self = this;
			self.check(function(db) {
				_private._insertFav(db, appid, entity_url, data, cb);
			});
		},

		loadFavoriteList: function(options, cb) {
			var self = this;
			self.check(function(db) {
				_private._loadFavoriteList(db, options, cb);
			});
		},

        getSavedTemplates: function(keys, cb) {
            var self = this;
            self.check(function(db) {
                _private._getSavedTemplates(db, keys, cb);
            });
        },
        saveTemplate: function(keys, template, cb) {
            var self = this;
            self.check(function(db) {
                _private._saveTemplate(db, keys, template, cb);
            });
        },
        deleteTemplate: function(templateUuid, cb) {
            var self = this;
            self.check(function(db) {
                _private._deleteTemplate(db, templateUuid, cb);
            });
        }
	};
	// We choose indexeddb even if Web SQL is available (window.openDatabase!=null)
	if (indexedDB && !window.openDatabase) {
		var idb = new IndexedDBHandler();
		$sdata.createDraft = function(data, cb) {
			idb.createDraft(data, cb);
		};
		$sdata.updateDraft = function(draftId, data, cb) {
			if (!cb) cb = function() {};
			idb.updateDraft(draftId, data, cb);
		};
		$sdata.loadDraft = function(id, cb) {
			idb.loadDraft(id, cb);
		};
		$sdata.deleteDraft = function(id, cb) {
			idb.deleteDraft(id, cb);
		};
		$sdata.saveDraft = function(draftURL, data, cb) {
			idb.saveDraft(draftURL, data, cb);
		};
		$sdata.getSData = function(url, useFav, options) {
			idb.getSData(url, useFav, options);
		};
		$sdata.initData = function(config, data, doclean, cb) {
			idb.initData(config, data, doclean, cb);
		};
		$sdata.updData = function(oldUrl, data, cb) {
			idb.updData(oldUrl, data, cb);
		};
		$sdata.insData = function(url, data, cb) {
			idb.insData(url, data, cb);
		};
		$sdata.switchFav = function(url, data, cb) {
			idb.switchFav(url, data, cb);
		};
		$sdata.insertFav = function(appid, entity_url, data, cb) {
			idb.insertFav(appid, entity_url, data, cb);
		};
		$sdata.loadFavoriteList = function(options, cb) {
			idb.loadFavoriteList(options, cb);
		};
		$sdata.delData = function(url, cb) {
			idb.delData(url, cb);
		};
		$sdata.deleteDataByDraft = function(id, cb) {
			idb.deleteDataByDraft(id, cb);
		};
		$sdata.deleteDataByUrl = function(url, odata, cb) {
			idb.deleteDataByUrl(url, odata, cb);
		};
		$sdata.getSyncData = function(cb, sdataUrl) {
			idb.getSyncData(cb, sdataUrl);
		};
		$sdata.getSyncDataCount = function(cb) {
			idb.getSyncCount(cb);
		};
		$sdata.getModifiedData = function(purl, cb) {
			idb.getModifiedData(purl, cb);
		};
		$sdata.undoUpdate = function(url, cb) {
			idb.undoUpdate(url, cb);
		};
		$sdata.getInstalledApps = function(grouped, cb) {
			idb.getInstalledApps(grouped, cb);
		};
		$sdata.installApp = function(data, cb) {
			idb.installApp(data, cb);
		};
		$sdata.getAppConfig = function(appid, cb) {
			idb.getAppConfig(appid, cb);
		};
		$sdata.saveAppConfig = function(data, cb) {
			idb.saveAppConfig(data, cb);
		};
		$sdata.removeFromDB = function(id, cb) {
			idb.removeFromDB(id, cb);
		};
		$sdata.clearSdata = function(id, cb) {
			idb.clearSdata(id, cb);
		};
		$sdata.addCache = function(appid, entity, data, cb) {
			idb.addCache(appid, entity, data, cb);
		};
        $sdata.getSavedTemplates = function(keys, cb) {
            idb.getSavedTemplates(keys, cb);
        };
        $sdata.saveTemplate = function(keys, template, cb) {
            idb.saveTemplate(keys, template, cb);
        };
        $sdata.deleteTemplate = function(templateUuid, cb) {
            idb.deleteTemplate(templateUuid, cb);
        };
	} else if (window.openDatabase) {
		var mobiledb = new DataBaseHandler();
		$sdata.createDraft = function(data, cb) {
			mobiledb.createDraft(data, cb);
		};
		$sdata.updateDraft = function(draftId, data, cb) {
			if (!cb) cb = function() {};
			mobiledb.updateDraft(draftId, data, cb);
		};
		$sdata.loadDraft = function(id, cb) {
			mobiledb.loadDraft(id, cb);
		};
		$sdata.deleteDraft = function(id, cb) {
			mobiledb.deleteDraft(id, cb);
		};
		$sdata.saveDraft = function(draftURL, data, cb) {
			mobiledb.saveDraft(draftURL, data, cb);
		};
		$sdata.getSData = function(url, useFav, options) {
			mobiledb.getSData(url, useFav, options);
		};
		$sdata.initData = function(config, data, doclean, cb) {
			mobiledb.initData(config, data, doclean, cb);
		};
		$sdata.updData = function(oldUrl, data, cb) {
			mobiledb.updData(oldUrl, data, cb);
		};
		$sdata.insData = function(url, data, cb) {
			mobiledb.insData(url, data, cb);
		};
		$sdata.switchFav = function(url, data, cb) {
			mobiledb.switchFav(url, data, cb);
		};
		$sdata.insertFav = function(appid, entity_url, data, cb) {
			mobiledb.insertFav(appid, entity_url, data, cb);
		};
		$sdata.loadFavoriteList = function(options, cb) {
			mobiledb.loadFavoriteList(options, cb);
		};
		$sdata.delData = function(url, cb) {
			mobiledb.delData(url, cb);
		};
		$sdata.deleteDataByDraft = function(id, cb) {
			mobiledb.deleteDataByDraft(id, cb);
		};
		$sdata.deleteDataByUrl = function(url, odata, cb) {
			mobiledb.deleteDataByUrl(url, odata, cb);
		};
		$sdata.getSyncData = function(cb, sdataUrl) {
			mobiledb.getSyncData(cb, sdataUrl);
		};
		$sdata.getSyncDataCount = function(cb) {
			mobiledb.getSyncCount(cb);
		};
		$sdata.getModifiedData = function(purl, cb) {
			mobiledb.getModifiedData(purl, cb);
		};
		$sdata.undoUpdate = function(url, cb) {
			mobiledb.undoUpdate(url, cb);
		};
		$sdata.getInstalledApps = function(grouped, cb) {
			mobiledb.getInstalledApps(grouped, cb);
		};
		$sdata.installApp = function(data, cb) {
			mobiledb.installApp(data, cb);
		};
		$sdata.getAppConfig = function(appid, cb) {
			mobiledb.getAppConfig(appid, cb);
		};
		$sdata.saveAppConfig = function(data, cb) {
			mobiledb.saveAppConfig(data, cb);
		};
		$sdata.removeFromDB = function(id, cb) {
			mobiledb.removeFromDB(id, cb);
		};
		$sdata.clearSdata = function(id, cb) {
			mobiledb.clearSdata(id, cb);
		};
		$sdata.addCache = function(appid, entity, data, cb) {
			mobiledb.addCache(appid, entity, data, cb);
		};
        $sdata.getSavedTemplates = function(keys, cb) {
            mobiledb.getSavedTemplates(keys, cb);
        };
        $sdata.saveTemplate = function(keys, template, cb) {
            mobiledb.saveTemplate(keys, template, cb);
        };
        $sdata.deleteTemplate = function(templateUuid, cb) {
            mobiledb.deleteTemplate(templateUuid, cb);
        };
	}

})(jQuery);