"use strict";

(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	var $helpers = $.helpers;

	that.controls.MsgView = {
		_additem: function(cd, html) {
			var title = (cd.title || "").trim();
			var msg = ((cd.data && cd.data.message) || "").trim();
			if (title.length == 0) {
				title = msg;
			}
			if (title.length == 0) return;
			html.push('<li');
			var css = [],
				type = $helpers.error2Type(cd.type);
			css.push("ui-li-has-icon");
			css.push($helpers.ui.consts.normal_icon);
			css.push('s-error-' + type);
			if (css.length)
				html.push(' class="' + css.join(" ") + '"');
			html.push('>');
			html.push('<div class="s-error-ttl">');
			html.push($helpers.htmlEncode(title));
			if (msg.length > 0) {
				// #3050 Mobile - Edit mode - Action (Save) do not works if error dialog has been opend in a previous try
				// We display also the message (returned by X3 Errors) - Title is a general message 'Application exception')
				html.push('<div>');
				html.push($helpers.htmlEncode(msg));
				html.push('</div>');
			}
			html.push('</div>');
			html.push("</li>");
		},
		_renderMessage: function(controller) {
			var html = [];
			var data = $helpers.allMessages() || [];
			var infos = 0,
				errors = 0;
			data.forEach(function(msg) {
				if (msg.type === $helpers.ERRORS.info || msg.type === $helpers.ERRORS.success) {
					infos++;
				} else {
					errors++;
				}
			});
			if (!$helpers.displayErrorAsMessage() && (infos > 0 && errors == 0)) {
				// We force display as top message if info only
				$helpers.setDisplayErrorAsMessage();
			}
			var $err = controller.$page.find('div[data-role="errorview"]').children("ul");
			if ($helpers.displayErrorAsMessage()) {
				data.forEach(function(cd) {
					that.controls.MsgView._additem(cd, html);
				});
				window.setTimeout(function() {
					$err.empty();
				}, 2000);
			}
			$err.html(html.join(''));
		},
		handler: function(c, after) {
			after({
				html: '',
				bind: true
			});
		},
		refresh: function(controller) {
			that.controls.MsgView._renderMessage(controller);
			$helpers.clearInfos();
			// Return null - No error message because already handled by this control
			return null;
		},
		events: function($c, c) {
			that.controls.MsgView._renderMessage(this);
		}
	};
})(jQuery);