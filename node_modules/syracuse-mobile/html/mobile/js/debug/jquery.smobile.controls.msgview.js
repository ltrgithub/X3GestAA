"use strict";

(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	var $helpers = $.helpers; // = require

	that.controls.MsgView = {
		_additem: function(cd, html, isInfoMsg) {
			cd.data = cd.data || {};
			html.push('<li');
			var css = [],
				type = $helpers.error2Type(cd.type);
			css.push("ui-li-has-icon");
			css.push($helpers.ui.consts.normal_icon);
			css.push('s-error-' + type);
			if (css.length)
				html.push(' class="' + css.join(" ") + '"');
			html.push('>');
			html.push('<div class="s-error-ttl">' + $helpers.htmlEncode(cd.title) + '</div>');
			if (!isInfoMsg) {
				cd.data.message = cd.data.message || "";
				if (cd.data.message.length > 0) {
					var msg = cd.origin ? ["ORIGIN : " + $helpers.error2Origine(cd.origin).toUpperCase()] : [];
					msg = msg.concat(cd.data.message.replace(/\r\n/g, '\n').split("\n"));
					html.push('<div data-role="collapsible" data-mini="true" data-theme="t">');
					html.push('<h3><span class="s-m-error">' + $helpers.locale().ui.msg_detail + '</span></h3>');
					html.push('<p class="s-m-error">');
					msg.forEach(function(m) {
						html.push($helpers.htmlEncode(m) + ("<br />"));
					});
					html.push('</p>');
					html.push('</div>');
				}
				if (cd.data.solution) {
					html.push("<p class=\"s-m-info\">");
					html.push($helpers.htmlEncode(cd.data.solution));
					html.push("</p>");
				}
			}
			html.push("</li>");
		},
		sync: true,
		_buildItems: function(html, c) {
			var controller = this;
			var data = $helpers.allMessages();
			var errormsgs = (data || []).filter(function(msg) {
				return (msg.type === $helpers.ERRORS.error || msg.type === $helpers.ERRORS.fatal || msg.type === $helpers.ERRORS.warning);
			});
			var infomsgs = (data || []).filter(function(msg) {
				return (msg.type === $helpers.ERRORS.info || msg.type === $helpers.ERRORS.success);
			});
			controller.errorViewHasErrors = errormsgs.length;
			controller.errorViewHasInfo = infomsgs.length;
			var isInfoMsg = controller.errorViewHasInfo && !controller.errorViewHasErrors;
			// Display success and also the general error message returned by X3 with filed errors
			isInfoMsg = isInfoMsg || ($helpers.hasFieldsErrors() && errormsgs.length > 0);
			if (isInfoMsg) {
				data.forEach(function(cd) {
					that.controls.MsgView._additem(cd, html, isInfoMsg);
				});
				if (isInfoMsg) that.controls.MsgView.autoClose(c.id);
			}
			return isInfoMsg;
		},
		handler: function(c, after) {
			var htmlItems = [],
				html = [];
			var isInfoMsg = that.controls.MsgView._buildItems(htmlItems, c);
			html.push('<ul id="' + c.id + '" data-theme="g" data-role="listview"');
			html.push(' data-inset="true" class="');
			html.push(isInfoMsg ? 's-m-msginfo' : 's-m-error-view');
			html.push('">');
			html.push(htmlItems.join(''));
			html.push('</ul>');
			this.hasMsgView = true;
			after({
				html: html.join(''),
				bind: true
			});
		},
		autoClose: function(id) {
			window.setTimeout(function() {
				$('#' + id).empty();
			}, 2000);
		},
		refresh: function(controller, options, $c, id) {
			var htmlItems = [];
			var isInfoMsg = that.controls.MsgView._buildItems(htmlItems, id);
			var css = ['s-m-error-view', 's-m-msginfo'];
			if (!$c.hasClass(isInfoMsg ? css[1] : css[0])) {
				$c.removeClass(isInfoMsg ? css[0] : css[1]);
				$c.addClass(isInfoMsg ? css[1] : css[0]);
			}
			$c.html(htmlItems.join(''));
			$c.listview('refresh');
			if (isInfoMsg) that.controls.MsgView.autoClose(id);
			$helpers.clearInfos();
			if (controller.errorViewHasInfo) {
				controller.errorInView($c);
			};
			// Return null - No error message because already handled by this control
			return null;
		},
		events: function($c, c) {
			$c.click(function(e) {
				var target = $helpers.getTarget(e);
				if (target) {
					var p = $(target).attr("data-action");
					if (p === "closeerrors") {
						$c.empty();

					}
				}
			});
		}
	};
})(jQuery);