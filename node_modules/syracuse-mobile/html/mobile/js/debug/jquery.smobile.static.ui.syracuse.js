"use strict";
(function($) {
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var that = $.smobile || {};
	that.staticui = that.staticui || {};
	var ui = that.staticui;
	var localeLoaded = false;

	var capabilities = $sdata.capabilities;
	capabilities.showSettings = true;

	function updLocale(value, next) {
		// number thousandSep && numberDecimalSeparator
		if (value.numberGroupSeparator != null) $helpers.number.thousandSep = value.numberGroupSeparator;
		if (value.numberDecimalSeparator != null) $helpers.number.decimalSep = value.numberDecimalSeparator;
		//
		$helpers.lang2DateSettings(value.shortDate, value.shortTime);
		if ($.scroller) $.scroller.setDefaults($helpers.dateSettings);
		localeLoaded = true;
		return next();
	};

	function activateLocale(sl, next) {
		var currentlang = $helpers.extractLang(sl);
		if (!currentlang) {
			var cl = $helpers.extractLang($helpers.browserLanguage());
			// download and activate language
			return $sdata.downloadLocale(cl, function(bl) {
				if (bl) {
					// save last used language
					$helpers.setLanguage(bl + "-" + bl.toUpperCase());
					$helpers.lang2DateSettings();
					if ($.scroller) $.scroller.setDefaults($helpers.dateSettings);
				}
				return next();
			});
		}
		var activelang = $helpers.currentLocale();
		if (currentlang != activelang) {
			return $sdata.downloadLocale(currentlang, function(bl) {
				if (bl) {
					// seave last used language
					$helpers.setLanguage(sl);
					$helpers.lang2DateSettings();
					if ($.scroller) $.scroller.setDefaults($helpers.dateSettings);

				}
				return next();
			});
		}
		$helpers.setLanguage(sl);
		return next();
	};
	capabilities.installUrl = "/sdata/syracuse/collaboration/syracuse/dashboardDefs/$service/mobilePortlets";
	capabilities.authUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
	capabilities.loadLocale = true;
	capabilities.localeLoader = function(next, force) {
		// get saved language 
		if (localeLoaded && !force) return next();
		if (!localeLoaded && $helpers.online() && (!capabilities.authRequired || !capabilities.auth)) {
			return $sdata.GET($sdata.sdataHost + _auth.authurl, function(data, headers) {
				if (data) {
					var localeConfig = data.selectedLocale;
					return updLocale(localeConfig, function() {
						return activateLocale(localeConfig.code, next);
					});

				}
				activateLocale($helpers.language(), next);
			}, null, {
				timeout: 0
			});

		}
		//use last used language or browser language
		activateLocale($helpers.language(), next);
	};
	ui.settings = function() {
		var locale = $helpers.locale();
		return {
			"$title": locale.administration.title,
			"content": {
				"cp": {
					"layout": "BlockBodyLayout",
					"data": {}
				},
				"errors": {
					"uiClass": "ErrorView",
					"parent": "cp"
				},
				"c1": {
					"uiClass": "CheckBox",
					"data": {
						"label": locale.ui.transparent_logon,
						"bind": "autoLogon"
					},
					"parent": "cp"
				},
				"c2": {
					"uiClass": "Combo",
					"data": {
						"label": locale.ui.auth_type,
						"bind": "authType",
						"value": "basic",
						"items": [{
							value: "basic",
							title: "Basic"
						}]
					},
					"parent": "cp"
				},
				"e1": {
					"uiClass": "Edit",
					"data": {
						"label": locale.ui.user,
						"bind": "user"
					},
					"parent": "cp"
				},
				"pass": {
					"uiClass": "Edit",
					"data": {
						"type": "password",
						"label": locale.ui.password,
						"bind": "password"
					},
					"parent": "cp"
				},
				"avanced": {
					"layout": "CollapsibleLayout",
					"parent": "cp",
					"data": {
						"text": locale.ui.avanced_options,
						"collapsed": true
					}
				},
				"d1": {
					"uiClass": "CheckBox",
					"data": {
						"label": locale.ui.dev_mode,
						"bind": "devmode"
					},
					"parent": "avanced"
				},
				"d2": {
					"uiClass": "Edit",
					"data": {
						"label": "Device Name",
						"bind": "deviceName"
					},
					"parent": "avanced"
				},
				"d3": {
					"uiClass": "CheckBox",
					"data": {
						"label": "Ignore errors on install",
						"bind": "installWithErrors"
					},
					"parent": "avanced"
				}
			},
			"hbuttons": [{
				"title": locale.ui.save_item,
				action: "savesettings",
				"jmdata": {
					"data-icon": "s-ok",
					"data-transition": "back"
				}
			}],

			actions: {
				savesettings: function(after) {
					var cd = this.getValue();
					var settings = $helpers.settings();
					settings.sdata = settings.sdata || {};
					settings.connect = settings.connect || {};
					settings.connect.authType = cd.authType;
					settings.connect.autoLogon = cd.autoLogon;
					settings.connect.devmode = cd.devmode;
					settings.connect.user = cd.user;
					settings.connect.password = cd.password;
					settings.debug = settings.debug || {};
					settings.debug.deviceName = cd.deviceName;
					settings.debug.installWithErrors = cd.installWithErrors;
					$helpers.settings("", settings);
					$.smobile.goHome(this);
					after(false);
				}

			}
		};
	};
	ui.settings_data = function() {
		var cd = {};
		var settings = $helpers.settings();
		settings.sdata = settings.sdata || {};
		settings.connect = settings.connect || {};
		cd.autoLogon = settings.connect.autoLogon;
		cd.authType = settings.connect.authType || "basic";
		cd.devmode = settings.connect.devmode;
		cd.user = settings.connect.user || "";
		cd.password = settings.connect.password || "";
		settings.debug = settings.debug || {};
		cd.deviceName = settings.debug.deviceName || "phone";
		cd.installWithErrors = (settings.debug.installWithErrors ? true : false);
		return cd;
	};
	var _auth = {
		lastCheck: null,
		checkInterval: 0,
		authurl: capabilities.authUrl,
		detect: function(auth) {
			var res = "unknown";
			auth = auth || "";
			if (auth) auth = auth.toUpperCase();
			if (auth.indexOf("BASIC") === 0) res = "basic";
			else if (auth.indexOf("DIGEST") === 0) res = "digest";
			return res;
		},
		connect: function(next) {
			var settings = $helpers.settings();
			settings.connect = settings.connect || {};
			$helpers.clearErrors();
			if (capabilities.resetInterval) {
				_auth.lastCheck = null;
				capabilities.resetInterval = false;
			}
			if (_auth.lastCheck && ((new Date() - _auth.lastCheck) < _auth.checkInterval)) return;
			$sdata.GET($sdata.sdataHost + _auth.authurl, function(data, headers) {
				if (headers && (headers.status === 401)) {
					var sauth = _auth.detect(headers["WWW-Authenticate"]);
					if (sauth === "basic") {
						settings.connect = settings.connect || {};
						var user = settings.connect.user || "";
						var password = settings.connect.password || "";
						var aheaders = {
							Authorization: 'Basic ' + window.btoa(user + ":" + password)
						};
						$helpers.clearErrors();
						return $sdata.GET($sdata.sdataHost + _auth.authurl, function(data, headers) {
							_auth.lastCheck = ($helpers.hasErrors() ? null : new Date());
							if (data && !localeLoaded) {
								var localeConfig = data.selectedLocale;
								updLocale(localeConfig, function() {
									return activateLocale(localeConfig.code, function() {
										return next(data, $helpers.hasErrors());
									});
								});
							}
							activateLocale($helpers.language(), function() {
								return next(data, $helpers.hasErrors());
							});
						}, aheaders, {
							Authenticate: true
						});
					} else {
						_auth.lastCheck = null;
						return next(null, true);
					}
				}
				_auth.lastCheck = ($helpers.hasErrors() ? null : new Date());
				return next(null, $helpers.hasErrors());
			}, {}, {
				Authenticate: true
			});
		}
	};
	$sdata.capabilities.auth = function(next) {
		return _auth.connect(next);
	};
	$helpers.authHeaders = function(header, retry) {
		var settings = $helpers.settings();
		settings.connect = settings.connect || {};
		if (settings.connect.autoLogon) {
			if (settings.connect.authType === "basic") {
				header.Authorization = 'Basic ' + window.btoa((settings.connect.user || "") + ":" + (settings.connect.password || ""));
				if (retry) return true;
			}
		}
		return false;
	};
})(jQuery);