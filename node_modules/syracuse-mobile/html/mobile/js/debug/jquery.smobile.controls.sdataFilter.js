"use strict";
//
// Filter control
//
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	that.controls = that.controls || {};

	function _filterUi(controller) {
		var res = {
			"$title": $helpers.locale().ui.filter,
			"content": {
				"filter": {
					"uiClass": "SDataFilter",
					"data": {
						"filters": []
					}
				}
			}
		};
		res.roptions = {
			nopanel: true
		};
		res.hbuttons = [{
				title: $helpers.locale().ui.ok_item,
				action: "saveFilter",
				"jmdata": {
					"data-icon": "s-ok",
					"data-transition": "none"
				}
			}, {
				title: $helpers.locale().ui.remove_item,
				action: "clearFilter",
				"jmdata": {
					"data-icon": "s-delete",
					"data-transition": "none"
				}
			}

		];
		res.actions = {
			saveFilter: function(after) {
				var controller = this;
				if (controller && controller.parent) {
					var dd = controller.getValue();
					var pcontroller = controller.parent;
					pcontroller.extraData.filters = dd.filters;
					pcontroller.saveFilter({
						filters: dd.filters
					});
					if (that.controls.SDataList) {
						return that.controls.SDataList.applyFilter(pcontroller, function() {
							$.smobile.doBack(controller);
						}, false);
					}
				}
				$.smobile.doBack(controller);
			},
			clearFilter: function(after) {
				var controller = this;
				if (controller && controller.parent) {
					controller.parent.extraData.filters = null;
					controller.parent.clearFilter();
					if (that.controls.SDataList) {
						return that.controls.SDataList.applyFilter(controller.parent, function() {
							$.smobile.doBack();
						}, false);
					}
				}
				$.smobile.doBack();
			}

		};

		return res;
	};

	function _getOperators($type) {
		switch ($type) {
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
			case "application/x-decimal":
			case "application/x-quantity": //ok
			case "application/x-real":
			case "application/x-integer":
				return ["eq", "ne", "gt", "ge", "lt", "le"];
				break;
			case "application/x-string":
				return ["like", "gt", "ge", "lt", "le", "eq", "ne", "like_s"];
				break;
			case "application/x-reference":
				return ["eq", "ne"];
				break;
			default:
				return ["eq", "ne"];
				break;
		}
	};

	function _type2ops($type) {
		var ops = _getOperators($type);
		if (ops) {
			var res = [];
			var fl = $helpers.locale().filters;
			ops.forEach(function(op) {
				res.push({
					value: op,
					title: fl[op]
				});

			});
			return {
				values: res,
				value: ops[0]
			};
		}
		return null;

	};

	function _filter2css(value) {
		return value;
	}

	that.controls.SDataFilter = {
		_createItem: function(html, filter, index) {
			html.push('<li');
			html.push('  data-icon="s-noicon" data-corners="false"  data-iconpos="right" class="s-m-slist-item ui-li-has-icon ' + $helpers.ui.consts.normal_icon + ' filter_item"');
			html.push('>');
			//icon of filter
			html.push('<div class="s-m-filter ' + _filter2css(filter.op) + '"></div>');
			html.push('<a href="#" ');
			html.push('data-action="edit" data-action-param="' + index + '">');
			html.push("<h3>" + $helpers.htmlEncode(filter.title || filter.field) + "</h3>");
			html.push('<p>');
			html.push($helpers.htmlEncode($helpers.locale().filters[filter.op] + ' "' + filter.valueTitle + '"'));
			html.push('</p>');
			html.push('</a>');
			html.push('<div class="s-m-custom-icon" data-action="delete" data-action-param="' + index + '"><div data-action-param="' + index + '" data-action="delete" class="ui-icon ui-icon-s-delete-dark"></div></div>');
			html.push('</li>');
		},
		createSDataFilter: function(controller, c, filters) {
			var ctrlData = c.data || {};
			var controllerData = controller.getValue();
			controllerData.filters = controllerData.filters || [];
			var html = [];
			html.push('<div id="' + c.id + '">');
			html.push('<ul class="s-m-list"  data-role="listview" id="' + c.id + '_items" data-inset="true"');
			//html.push('  data-theme="d" data-split-icon="delete" data-split-theme="d"');
			$helpers.addJqmData(ctrlData, html);
			html.push('>');
			html.push('<li data-theme="c"  data-role="list-divider">' + $helpers.locale().ui.filter + '</li>');
			controllerData.filters.forEach(function(filter, index) {
				that.controls.SDataFilter._createItem(html, filter, index);
			});
			html.push('<a  id="' + c.id + '_footer" href="#');
			html.push(c.id);
			html.push('popupMenu" data-rel="popup" data-iconpos="left" data-mini="false" data-role="button" data-inline="false" data-theme="f" data-icon="plus" id="');
			html.push(c.id);
			html.push('_new" data-inline="false">');
			html.push($helpers.locale().ui.add_item);
			html.push('</a>');
			html.push('</ul>');
			html.push('</div>');
			html.push('<div id="' + c.id + 'popupMenu" data-corners="false" data-role="popup">');
			html.push('<ul class="s-m-list"  data-mini="true" data-role="listview" style="min-width:210px;">');
			var filtersFields = controller.parent.getFilterFields(true);
			ctrlData.filtersFields = filtersFields;
			filtersFields.forEach(function(field, index) {
				html.push('<li><a data-action-param="' + index + '">');
				html.push($helpers.htmlEncode(field.title));
				html.push('</a></li>');
			});
			html.push('</ul>');
			html.push('</div>');
			return {
				html: html.join(''),
				bind: " ",
				action: ctrlData.action,
				options: ctrlData
			};
		},
		handler: function(c, after) {
			return after(that.controls.SDataFilter.createSDataFilter(this, c));
		},
		refresh: function(controller, options, $c, id) {
			var controllerData = controller.getValue();
			controllerData.filters = controllerData.filters || [];
			var html = [];
			controllerData.filters.forEach(function(filter, index) {
				that.controls.SDataFilter._createItem(html, filter, index);
			});
			var $ul = $('#' + id + '_items');
			var $items = $ul.children(".filter_item");
			$items.remove();
			var toolbar = $('#' + id + '_footer');
			toolbar.before(html.join(''));
			$ul.listview("refresh");
		},
		uidlg: function(config, filterController, page) {
			var locale = $helpers.locale();
			var opvalues = config.opvalues;
			config.opvalues = null;
			var queryController = filterController.parent;
			var valFieldProto = that.controls.SDataList.field2proto(queryController, config.fieldValue);
			if (!valFieldProto) return;
			var ui = {
				"$page": page,
				"$title": locale.ui.filter,
				"content": {
					"cp": {
						"layout": "BlockBodyLayout",
						"data": {}
					},
					"field": {
						"uiClass": "Edit",
						"data": {
							"label": locale.ui.filter_field,
							"bind": "field",
							$isReadOnly: true
						},
						"parent": "cp"
					},
					"op": {
						"uiClass": "Combo",
						"data": {
							"label": locale.ui.filter_op,
							"bind": "op",
							items: opvalues
						},
						"parent": "cp"
					},
					"value": {
						"uiClass": "Edit",
						"data": {
							$filter: true,
							"label": locale.ui.filter_val,
							"bind": "value"
						},
						"parent": "cp"
					}
				},
				"hbuttons": [{
					"title": locale.ui.save_item,
					action: "savesettings",
					"jmdata": {
						"data-icon": "s-ok",
						"data-transition": "back"
					}
				}],
				roptions: {
					nopanel: true
				},
				actions: {
					savesettings: function(after) {
						var dlogController = this;
						var cd = dlogController.data;
						var f = {
							title: cd.field,
							field: cd.fieldValue,
							op: cd.op,
							refresh: true,
							fieldRequest: cd.fieldValue
						};
						var filters = dlogController.parent.data.filters;
						var value = cd.value;
						var title = cd.valueTitle ? cd.valueTitle : value;
						var valid = true;
						switch (valFieldProto.$type) {
							case "application/x-reference":
								var fieldRequest = valFieldProto.$item.$rvalue;
								valid = fieldRequest != null;
								if (valid) {
									if ($proto.useUuid(valFieldProto.$item)) {
										// x-reference object field used by search
										var lookupvalue = valFieldProto.$item.$lookupvalue;
										valid = lookupvalue != null;
										if (valid) {
											// Syracuse entities
											if (value.$value) {
												// Value entered directly in input field
												value = title = value.$value;
											} else if (value[lookupvalue]) {
												// Value selected in lookup list
												value = title = value[lookupvalue];
											} else {
												value = title = "";
											}
											// xRefValue is used to restore value when the filetr is opened for modification
											f.xRefValue = cd.value;
											fieldRequest = f.field + "." + lookupvalue;
										}
									} else {
										// X3 entities - value is stored in cd[fieldRequest]
										if (cd[fieldRequest] != null && cd[fieldRequest].toString) {
											value = cd[fieldRequest].toString();
										} else if (cd.value && typeof cd.value == "string") {
											// User has opened a filter for modif and clicked save without modifying anything
											value = value;
										} else {
											value = "";
										}
										// xRefValue is used to restore value when the filter is opened for modification
										f.xRefValue = title = value;
									}
									// fieldRequest is the field's name used to build the request
									// Ex: Syrause entities -> Select group with role= Admin 		--> role.description = "Admin"
									//     X3 entities      -> Select Object with SITE_REF = 'ASN'  --> SITE = "ASN"
									f.fieldRequest = fieldRequest;
								}
								break;
							case "application/x-choice":
								config.valueTitle = null;
								valFieldProto.$value.$enum.forEach(function(item) {
									if (item.$value === value) {
										config.valueTitle = $proto.execExpression(item.$title, valFieldProto);
									}
								});
								break;
							case "application/x-date":
								try {
									title = $helpers.date.toDateLocalized(Date.parseISO8601(value));
								} catch (ex) {
									title = value;
								}
								break;
							case "application/x-time":
								try {
									title = $helpers.date.toTimeLocalized(Date.parseISO8601(value));
								} catch (ex) {
									title = value;
								}
								break;
							case "application/x-datetime":
								try {
									title = $helpers.date.toDateTimeLocalized(Date.parseISO8601(value));
								} catch (ex) {
									title = value;
								}
								break;
							default:
								break;
						}
						if (valid) {
							f.value = value;
							f.valueTitle = title;
							if (cd.newFilter) {
								filters.push(f);
							} else {
								filters[cd.fi] = f;
							}
						}
						dlogController.setNeedRefresh(true);
						after(false);
						$.smobile.doBack(dlogController);
					}

				}
			};
			var edtCtrl = ui.content.value;
			switch (valFieldProto.$type) {
				case "application/x-date":
					edtCtrl.data.type = "date";
					break;
				case "application/x-time":
					edtCtrl.data.type = "time";
					break;
				case "application/x-datetime":
					edtCtrl.data.type = "datetime";
					break;
				case "application/x-boolean":
					edtCtrl.uiClass = "CheckBox";
					edtCtrl.data.label = config.field;
					break;
				case "application/x-integer":
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-quantity":
					edtCtrl.data.type = "number";
					break;
				case "application/x-reference":
					edtCtrl.uiClass = "Lookup";
					edtCtrl.data.bind = "value";
					edtCtrl.data.$lookupurlparsed = true;
					edtCtrl.data.$lookupurl = $proto.parseExpression(valFieldProto.$item.$links.$lookup.$url, {
						data: null,
						$prototype: valFieldProto.$item
					}, "$url");
					//
					edtCtrl.data.getFieldProto = function(controller, options, id) {
						if (id == options.bind) return valFieldProto.$item;
						return null;
					};
					break;
				case "application/x-choice":
					var vals = [];
					valFieldProto.$value.$enum.forEach(function(value) {
						vals.push({
							value: value.$value,
							title: $proto.execExpression(value.$title, valFieldProto)
						});
					});
					edtCtrl.uiClass = "Combo";
					edtCtrl.data.items = vals;
					break;
			}
			$.smobile.createDetail(ui, config, filterController);
		},
		events: function($c, c) {
			var controller = this;
			var queryController = controller.parent;
			var $ul = $c;
			$ul.click(function(e) {
				var target = $helpers.getTarget(e);
				if (!target) return;
				var data;
				var p = $(target).attr("data-action");
				if (p) {
					var ii = parseInt($(target).attr("data-action-param"), 10);
					var dd = controller.getValue();
					var cf = dd.filters[ii];
					var cp = that.controls.SDataList.field2proto(controller.parent, cf.field);
					var ops = _type2ops(cp.$type);
					var data = {
						newFilter: false,
						fi: ii,
						fieldValue: cf.field,
						field: cf.title,
						op: cf.op,
						value: cf.xRefValue ? cf.xRefValue : cf.value,
						opvalues: ops.values
					};
					switch (p) {
						case "edit":
							that.controls.SDataFilter.uidlg(data, controller, queryController.page);
							break;
						case "delete":
							dd.filters.splice(ii, 1);
							controller.doRefresh();
							break;

					}
				}
			});
			var $list = $('#' + c.id + 'popupMenu');
			$list.click(function(e) {
				var target = $helpers.getTarget(e);
				if (!target) return;
				var p = parseInt($(target).attr("data-action-param"), 10);
				var sf = c.options.filtersFields[p];
				var cp = that.controls.SDataList.field2proto(controller.parent, sf.value);
				var ops = _type2ops(sf.type);
				var data = {
					newFilter: true,
					fieldValue: sf.value,
					field: sf.title,
					op: ops.value,
					opvalues: ops.values
				};
				that.controls.SDataFilter.uidlg(data, controller, queryController.page);
			});

		}
	};

	function _filterOpen(controller, filters) {
		var ui = _filterUi(controller);
		that.createDetail(ui, {
			filters: filters
		}, controller);

	};

	that.openFilterDlg = _filterOpen;

})(jQuery);