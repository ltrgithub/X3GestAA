"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.Chart = {
		_renderChart: function(controller, $c, c) {
			var $cont = $c.find('#' + c.id + "_cont");
			$cont.highcharts({
					chart: {
						type: 'gauge',
						plotBackgroundColor: null,
						plotBackgroundImage: null,
						plotBorderWidth: 0,
						plotShadow: false
					},

					title: {
						text: 'Speedometer'
					},

					pane: {
						startAngle: -150,
						endAngle: 150,
						background: [{
							backgroundColor: {
								linearGradient: {
									x1: 0,
									y1: 0,
									x2: 0,
									y2: 1
								},
								stops: [
									[0, '#FFF'],
									[1, '#333']
								]
							},
							borderWidth: 0,
							outerRadius: '109%'
						}, {
							backgroundColor: {
								linearGradient: {
									x1: 0,
									y1: 0,
									x2: 0,
									y2: 1
								},
								stops: [
									[0, '#333'],
									[1, '#FFF']
								]
							},
							borderWidth: 1,
							outerRadius: '107%'
						}, {
							// default background
						}, {
							backgroundColor: '#DDD',
							borderWidth: 0,
							outerRadius: '105%',
							innerRadius: '103%'
						}]
					},

					// the value axis
					yAxis: {
						min: 0,
						max: 200,

						minorTickInterval: 'auto',
						minorTickWidth: 1,
						minorTickLength: 10,
						minorTickPosition: 'inside',
						minorTickColor: '#666',

						tickPixelInterval: 30,
						tickWidth: 2,
						tickPosition: 'inside',
						tickLength: 10,
						tickColor: '#666',
						labels: {
							step: 2,
							rotation: 'auto'
						},
						title: {
							text: 'km/h'
						},
						plotBands: [{
							from: 0,
							to: 120,
							color: '#55BF3B' // green
						}, {
							from: 120,
							to: 160,
							color: '#DDDF0D' // yellow
						}, {
							from: 160,
							to: 200,
							color: '#DF5353' // red
						}]
					},

					series: [{
						name: 'Speed',
						data: [80],
						tooltip: {
							valueSuffix: ' km/h'
						}
					}]

				},
				function(chart) {});
		},
		createChart: function(controller, c) {
			var options = c.data;
			var html = [];
			html.push('<div id="' + c.id + '">');
			html.push('<div id="' + c.id + '_cont" class="ui-body s-m-chart-container" >');
			html.push('</div>');
			html.push('</div>');

			Highcharts.setOptions(that.ChartTheme);
			return {
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		sync: true,
		handler: function(c, after) {
			return after(that.controls.Chart.createChart(this, after));
		},
		checkValue: function($c, c) {
			var controller = this;
			if (c.options.$isMandatory) {
				var value = controller.getValue(c.options.bind, null, null);
				if (!value) {
					return $helpers.format($helpers.locale().ui.input_required, [c.options.label]);
				}
			}
		},
		events: function($c, c) {
			var controller = this;
			that.controls.Chart._renderChart(controller, $c, c);
		}
	};
})(jQuery);