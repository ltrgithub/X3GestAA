"use strict";
(function($) {
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var that = $.smobile || {};
	var locale = $helpers.locale();
	that.staticui = that.staticui || {};
	var ui = that.staticui;

	ui.templates = function() {
		var locale = $helpers.locale();
		return {
			"$title": locale.ui.templateMngmtHeader,
			"content": {
				"cp": {
					"layout": "BlockBodyLayout",
					"data": {}
				},
				"templates": {
					"uiClass": "TemplatesView",
					"parent": "cp"
				}
			},
			"hbuttons": [{
				"title": locale.ui.cancel_item,
				"action": "back",
				"jmdata": {
					"data-icon": "s-cancel",
					"data-transition": "back"
				}
			}]
		};
	};

	that.controls.TemplatesView = {
		sync: false,

		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				var target = $helpers.getTarget(e);
				if (target) {
					var action = $(target).attr("data-action"); // action of button
					var uuid = $(target).attr("data-action-param"); // uuid of affected tpl
					var lineid = $(target).attr("data-action-lineid"); // affected template line
					switch (action) {
						case "createNewTemplate":
							that.controls.TemplatesView._createNewTemplate($c, c, controller);
							break;
						case "selectTemplate":
							that.controls.TemplatesView._selectTemplate($c, c, controller, uuid, lineid);
							break;
						case "overwriteTemplate":
							that.controls.TemplatesView._overwriteTemplate($c, c, controller, uuid, lineid);
							break;
						case "deleteTemplate":
							that.controls.TemplatesView._deleteTemplate($c, c, controller, uuid, lineid);
							break;
					}
				}
			});
		},

		asyncHandler: function() {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			that.controls.TemplatesView._refreshTemplates(id, controller, function(html) {
				var $c = $('#' + id + "_ul");
				$c.html(html.join(''));
				$c.listview("refresh");
				$c.find('a[data-role="button"]').button();
			});
		},

		handler: function(c, after) {
			var controller = this;
			var html = [];
			that.controls.TemplatesView._buildContainers(c, html);
			var actions = {};
			after({
				html: html.join(''),
				bind: " ",
				options: {
					actions: actions
				},
				async: that.controls.TemplatesView.asyncHandler.bind({
					controller: controller,
					id: c.id
				})
			});
		},

		refresh: function(controller, options, $c, id) {
			var $ul = $c.children("#" + id + "_ul");
			that.controls.TemplatesView._refreshTemplates(id, controller, function(html) {
				$ul.html(html.join(''));
				$ul.listview("refresh");
				$ul.find('a[data-role="button"]').button();
			});
		},

		_buildContainers: function(c, html) {
			var tpl = that.controls.TemplatesView._getStoredTemplate();

			html.push('<form id="' + c.id + '">');

			html.push('<ul class="s-m-list" data-divider-theme="a" id="' + c.id + '_new_t" data-role="listview" data-inset="true">');
			html.push('<li data-role="list-divider" class="s-m-template-li-title">' + locale.ui.newTemplate + '</li>');
			html.push('<li data-role="fieldcontain">');

			html.push('<label class="ui-input-text" for="' + c.id + '_i">' + $helpers.htmlEncode(locale.ui.templateName) + '</label>');
			html.push('<div style="display:block;">');
			html.push('<div class="s-m-editfld">');
			html.push('<input type="text" name="' + c.id + '_input" id="' + c.id + '_input" value="' + $helpers.htmlEncode((tpl && tpl.label) || locale.ui.valueNewTemplate) + '">');
			html.push('</div>');

			//html.push('<div style="display:inline-block;">');
			html.push('<div style="float:right;">');
			html.push('<div style="display:table">');
			html.push('<div style="display:table-cell">');
			html.push('<a data-iconpos="top" id="' + c.id + '_save" data-role="button" data-theme="f" data-mini="true" data-action="createNewTemplate" data-icon="s-ok"  class="s-btn-icon" ></a>');
			html.push('</div>');
			html.push('</div>');
			html.push('</div>');
			html.push('</div>');

			html.push('</li>');
			html.push('</ul>');

			// Listview will be generated dynamically with existing templates
			html.push('<ul class="s-m-list" data-divider-theme="a" id="' + c.id + '_ul" data-role="listview" data-inset="true">');
			html.push('<li data-role="list-divider">' + locale.ui.avTemplate + '</li>');
			html.push('</ul>');
			html.push('</form>');
		},

		_refreshTemplates: function(id, controller, cb) {
			var tpl = that.controls.TemplatesView._getStoredTemplate();
			var html = [];
			var keys = {
				appid: tpl.appid,
				page: tpl.page,
				user: that.controls.TemplatesView._getUser()
			};
			$sdata.getSavedTemplates(keys, function(templates) {
				var html = [];
				controller.setData("", templates);
				if (templates) {
					that.controls.TemplatesView._buildTemplatesGrid(id, templates, html);
				}
				cb(html);
			});
		},

		_buildTemplatesGrid: function(mainId, templates, html) {
			var lineIdx = 0;
			var prefix = "tpl_" + mainId + "_";

			html.push('<li data-role="list-divider" class="s-m-template-li-title">' + locale.ui.avTemplate + '</li>');
			templates.forEach(function(template) {
				var lineId = prefix + lineIdx;
				html.push('<li data-role="fieldcontain" id="' + lineId + '">');
				html.push('<div style="overflow: hidden; ">');
				html.push('<div style="display:inline-block; ">');
				html.push('<p class="s-m-template-label">');
				html.push(template.label);
				html.push('</p>');
				var date;
				try {
					date = Date.parseISO8601(template.updated);
					date = $.scroller.formatDate($helpers.dateSettings.dateFormat, date);
				} catch (e) {
					date = "";
				}
				html.push('<p class="s-m-template-date">');
				html.push(locale.ui.templateDate);
				html.push(" " + date);
				html.push('</p>');
				html.push('</div>');
				that.controls.TemplatesView._addTemplateButton(html, [{
					id: prefix + (lineIdx * 3) + '_select',
					label: locale.applyTemplate,
					jmdata: {
						'data-action': 'selectTemplate',
						'data-action-param': template.$uuid,
						'data-action-lineid': lineId,
						'data-theme': 'f',
						'data-iconpos': 'none'
					}
				}, {
					id: prefix + (lineIdx * 3 + 1) + '_overwrite',
					jmdata: {
						'data-action': 'overwriteTemplate',
						'data-icon': 's-edit',
						'data-action-param': template.$uuid,
						'data-action-lineid': lineId,
						'data-theme': 'f',
						'data-iconpos': 'top'
					}
				}, {
					id: prefix + (lineIdx * 3 + 2) + '_delete',
					jmdata: {
						'data-action': 'deleteTemplate',
						'data-icon': 's-delete',
						'data-action-param': template.$uuid,
						'data-action-lineid': lineId,
						'data-theme': 'y',
						'data-iconpos': 'top'
					}
				}]);
				html.push('</div>');
				html.push('</li>');
				lineIdx = lineIdx + 1;
			});
		},

		_addTemplateButton: function(html, btns) {
			var mainId = 0;
			html.push('<div style="float: right;">');
			html.push('<div style="display:table;" class="s-template-view-buttons">');

			for (var i = 0; i < btns.length; i++) {
				html.push('<div style="display:table-cell' + (i > 0 ? ';padding-left:20px' : '') + '">');
				var opt = btns[i];
				html.push('<a id="');
				html.push(opt.btnid);
				html.push('" data-role="button" ');
				html.push('data-mini="true" data-inline="true"');
				for (var d in opt.jmdata) {
					html.push(d);
					html.push('="');
					html.push(opt.jmdata[d]);
					html.push('" ');
				}
				if (opt.label) {
					html.push(' class="s-btn-no-icon" ');
				} else {
					html.push(' class="s-btn-icon" ');
				}
				html.push('>');
				if (opt.label) {
					html.push($helpers.htmlEncode(opt.label));
				}
				html.push('</a>');
				html.push('</div>');
			}
			html.push('</div>');
			html.push('</div>');
		},

		/*
        Create new template
         */
		_createNewTemplate: function($c, c, controller) {
			var tpl = that.controls.TemplatesView._getStoredTemplate();
			var $label = $("#" + c.id + "_input");
			var template = {
				$uuid: $helpers.uuid(),
				label: $label[0].value,
				data: tpl.data
			};
			var keys = {
				appid: tpl.appid,
				page: tpl.page,
				user: that.controls.TemplatesView._getUser()
			};
			that.controls.TemplatesView._saveTemplate(keys, template, function(error) {
				if (!error) {
					$helpers.pushInfoMessage($helpers.format(locale.templateSaved, [template.label]));
					window.history.back();
				}
			});
		},

		/*
         Read template and apply to current page
         */
		_selectTemplate: function($c, c, controller, uuid, lineid) {
			that.controls.TemplatesView._getMatchingTemplate(uuid, function(template) {
				if (template == null) {
					// usually cannot happen since we only show templates that are in the db
					$helpers.pushInfoMessage($helpers.format(locale.templateReadError, [uuid]));
				} else {
					$helpers.pushInfoMessage($helpers.format(locale.templateSelected, [template.label]));
					template.action = "apply";
					window.localStorage["s-template-transfer"] = JSON.stringify(template);
					window.history.back();
				}
			});
		},

		/*
         Overwrite existing template with new data
         */
		_overwriteTemplate: function($c, c, controller, uuid, lineid) {
			var tpl = that.controls.TemplatesView._getStoredTemplate();
			var $label = $("#" + c.id + "_input");
			var uuid;
			var template = {
				$uuid: uuid,
				label: $label[0].value,
				data: tpl.data
			};
			var keys = {
				appid: tpl.appid,
				page: tpl.page,
				user: that.controls.TemplatesView._getUser()
			};
			that.controls.TemplatesView._saveTemplate(keys, template, function(error) {
				$helpers.pushInfoMessage($helpers.format(locale.templateUpdated, [template.label]));
				window.history.back();
			});
		},

		/*
         Delet existing template
         */
		_deleteTemplate: function($c, c, controller, uuid, lineid) {
			$sdata.deleteTemplate(uuid, function(error) {
				var $templateLi = $("#" + lineid);
				$templateLi.remove();
				$templateLi.closest("ul").listview("refresh");

				$helpers.pushInfoMessage($helpers.format(locale.templateDeleted));
				controller.doRefresh();
			});
		},

		_getMatchingTemplate: function(uuid, cb) {
			var tpl = that.controls.TemplatesView._getStoredTemplate();
			var keys = {
				appid: tpl.appid,
				page: tpl.page,
				user: that.controls.TemplatesView._getUser()
			};

			$sdata.getSavedTemplates(keys, function(templates, error) {
				if (!templates.some(function(template) {
					if (template.$uuid === uuid) {
						cb(template);
						return true;
					}
					return false;
				})) {
					cb(null);
				}
			});
		},

		_saveTemplate: function(keys, template, cb) {
			template.updated = (new Date()).toISOString();
			$sdata.saveTemplate(keys, template, function(templates, error) {
				cb();
			});
		},

		_getStoredTemplate: function() {
			var json = window.localStorage["s-template-transfer"];
			var tpl;
			try {
				tpl = JSON.parse(json);
				return tpl;
			} catch (e) {

			}
		},

		_getUser: function() {
			return "*"; // TODO: Maybe don't use global user later
		}
	};
})(jQuery);