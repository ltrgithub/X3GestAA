"use strict";
(function($) {
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var that = $.smobile || {};
    var locale = $helpers.locale();
    that.staticui = that.staticui || {};
    var ui = that.staticui;

    ui.templates = function() {
        var locale = $helpers.locale();
        return {
            "$title": locale.ui.templateMngmtHeader,
            "content": {
                "cp": {
                    "layout": "BlockBodyLayout",
                    "data": {}
                },
                "templates": {
                    "uiClass": "TemplatesView",
                    "parent": "cp"
                }
            },
            "hbuttons": [{
                "title": locale.ui.cancel_item,
                "action": "back",
                "jmdata": {
                    "data-icon": "s-cancel",
                    "data-transition": "back"
                }
            }]
        };
    };

    that.controls.TemplatesView = {
        _myGoBack: function(controller) {
            controller.removeCachePages();
            $helpers.pushInfoMessage($helpers.locale().ui.nodrafts);
            $helpers.historyBack(function(url) {
                return url && (url.indexOf("home") > 0 || url.indexOf("query") > 0);
            }, true, function(rks, deltaIdx) {
                // Avoid back to return to draft
                window.history.go(deltaIdx);
            });
            return;
        },
        events: function($c, c) {
            var controller = this;
            $c.click(function(e) {
                var target = $helpers.getTarget(e);
                if (target) {
                    var action = $(target).attr("data-action");         // action of button
                    var uuid = $(target).attr("data-action-param");     // uuid of affected tpl
                    var lineid = $(target).attr("data-action-lineid");     // affected template line
                    switch (action) {
                        case "createNewTemplate":
                            that.controls.TemplatesView._createNewTemplate($c, c, controller);
                            break;
                        case "selectTemplate":
                            that.controls.TemplatesView._selectTemplate($c, c, controller, uuid, lineid);
                            break;
                        case "overwriteTemplate":
                            that.controls.TemplatesView._overwriteTemplate($c, c, controller, uuid, lineid);
                            break;
                        case "deleteTemplate":
                            that.controls.TemplatesView._deleteTemplate($c, c, controller, uuid, lineid);
                            break;
                    }
                }
            });
        },
        sync: false,
        asyncHandler: function() {
            var obj = this;
            var controller = obj.controller;
            var id = obj.id;
            that.controls.TemplatesView._refreshTemplates(id, controller, function(html) {
                var $c = $('#' + id + "_ul");
                $c.html(html.join(''));
                $c.listview("refresh");
                $c.find('a[data-role="button"]').button();
            });
        },
        handler: function(c, after) {
            var controller = this;
            var html = [];
            that.controls.TemplatesView._buildContainers(c, html);
            var actions = {};
            after({
                html: html.join(''),
                bind: " ",
                options: {
                    actions: actions
                },
                async: that.controls.TemplatesView.asyncHandler.bind({
                    controller: controller,
                    id: c.id
                })
            });
        },

        refresh: function(controller, options, $c, id) {
            var $ul = $c.children("#" + id + "_ul");
            that.controls.TemplatesView._refreshTemplates(id, controller, function(html) {
                $ul.html(html.join(''));
                $ul.listview("refresh");
                $ul.find('a[data-role="button"]').button();
            });
        },

        _buildContainers: function(c, html) {
            var tpl = that.controls.TemplatesView._getStoredTemplate();

            html.push('<form id="' + c.id + '">');

            html.push('<div class="ui-body ui-body-c"><h3>' + locale.ui.newTemplate + '</h3>');
            html.push('<label class="ui-input-text" for="' + c.id + '_i">' + $helpers.htmlEncode(locale.ui.templateName) + '</label>');
            html.push('<div class="s-m-editfld">');
            html.push('<input type="text" name="' + c.id + '_input" id="' + c.id + '_input" value="' + $helpers.htmlEncode((tpl && tpl.label) || locale.ui.valueNewTemplate) + '">');
            html.push('</div>');

            html.push('<div style="float:none; display: inline-block;"><div style="display:table">');
            html.push('<div style="display:table-cell">');
            html.push('<a  data-iconpos="top" id="' + c.id + '_save" data-role="button" data-theme="f" data-mini="true" data-action="createNewTemplate" data-icon="s-ok"></a>');
            html.push('</div>');
            html.push('</div></div>');
            html.push('</div>');

            html.push('<div class="ui-body ui-body-c">');
            html.push('<div data-role="controlgroup"><h3>' + locale.ui.avTemplate + '</h3>');

            // Listview will be generated dynamically with existing templates
            html.push('<ul class="s-m-list templatesview" data-divider-theme="a" id="' + c.id + '_ul" data-role="listview" data-inset="true"></ul>');
            html.push('</div>');
            html.push('</div>');
            html.push('</form>');
        },

        _refreshTemplates: function(id, controller, cb) {
            var tpl = that.controls.TemplatesView._getStoredTemplate();
            var html = [];
            var keys = {
                appid: tpl.appid,
                page: tpl.page,
                user: that.controls.TemplatesView._getUser()
            };
            $sdata.getSavedTemplates(keys, function(templates) {
                var html = [];
                controller.setData("", templates);
                if (templates) {
                    that.controls.TemplatesView._buildTemplatesGrid(id, templates, html);
                }
                cb(html);
            });
        },

        _buildTemplatesGrid: function(mainId, templates, html) {
            var lineIdx = 0;
            var prefix = "tpl_" + mainId + "_";
            templates.forEach(function(template) {
                var lineId =  prefix + lineIdx;
                html.push('<li data-role="fieldcontain" class="ui-li-has-icon ' + $helpers.ui.consts.normal_icon + '" id="' + lineId + '">');
                html.push('<div>');
                html.push(template.label);
                html.push('</div>');

                that.controls.TemplatesView._addTemplateButton(html, [{
                    id: prefix + (lineIdx * 3) + '_select',
                    jmdata: {
                        'data-action': 'selectTemplate',
                        'data-icon': 's-ok',
                        'data-action-param': template.$uuid,
                        'data-action-lineid': lineId
                    }
                }, {
                    id: prefix + (lineIdx * 3 + 1) + '_overwrite',
                    jmdata: {
                        'data-action': 'overwriteTemplate',
                        'data-icon': 's-edit',
                        'data-action-param': template.$uuid,
                        'data-action-lineid': lineId
                    }
                }, {
                    id: prefix + (lineIdx * 3 + 2) + '_delete',
                    jmdata: {
                        'data-action': 'deleteTemplate',
                        'data-icon': 's-delete',
                        'data-action-param': template.$uuid,
                        'data-action-lineid': lineId
                    }
                }]);
                html.push('</li>');
                lineIdx = lineIdx + 1;
            });
        },

        _addTemplateButton: function(html, btns) {
            var mainId = 0;
            html.push('<div style="float:right;"><div style="display:table">');
            for (var i = 0; i < btns.length; i++) {
                html.push('<div style="display:table-cell' + (i > 0 ? ';padding-left:20px' : '') + '">');
                var opt = btns[i];
                html.push('<a  data-iconpos="top" id="');
                html.push(opt.btnid);
                html.push('" data-role="button" data-theme="f" ');
                html.push('data-mini="true" ');
                for (var d in opt.jmdata) {
                    html.push(d);
                    html.push('="');
                    html.push(opt.jmdata[d]);
                    html.push('" ');
                }
                html.push('>');
                html.push('</a>');
                html.push('</div>');
            }
            html.push('</div></div>');
        },

        /*
        Create new template
         */
        _createNewTemplate: function($c, c, controller) {
            var tpl = that.controls.TemplatesView._getStoredTemplate();
            var $label = $("#" + c.id + "_input");
            var template = {
                $uuid: $helpers.uuid(),
                label: $label[0].value,
                data: tpl.data
            };
            var keys = {
                appid: tpl.appid,
                page: tpl.page,
                user: that.controls.TemplatesView._getUser()
            };
            that.controls.TemplatesView._saveTemplate(keys, template, function(error) {

            });
        },

        /*
         Read template and apply to current page
         */
        _selectTemplate: function($c, c, controller, uuid, lineid) {
            that.controls.TemplatesView._getMatchingTemplate(uuid, function(template) {
                if (template == null) {

                } else {
                    console.log(template);
                }
            });
        },

        /*
         Overwrite existing template with new data
         */
        _overwriteTemplate: function($c, c, controller, uuid, lineid) {
            var tpl = that.controls.TemplatesView._getStoredTemplate();
            var $label = $("#" + c.id + "_input");
            var uuid;
            var template = {
                $uuid: $helpers.uuid(),
                label: $label[0].value,
                data: tpl.data
            };
            var keys = {
                appid: tpl.appid,
                page: tpl.page,
                user: that.controls.TemplatesView._getUser()
            };
            that.controls.TemplatesView._saveTemplate(keys, template, function(error) {

            });
        },

        /*
         Delet existing template
         */
        _deleteTemplate: function($c, c, controller, uuid, lineid) {
            $sdata.deleteTemplate(uuid, function(error) {
                var $templateLi = $("#" + lineid);
                $templateLi.remove();
                $templateLi.closest("ul").listview("refresh");
            });
        },

        _getMatchingTemplate: function(uuid, cb) {
            var tpl = that.controls.TemplatesView._getStoredTemplate();
            var keys = {
                appid: tpl.appid,
                page: tpl.page,
                user: that.controls.TemplatesView._getUser()
            };

            $sdata.getSavedTemplates(keys, function(templates, error) {
                templates.some(function(template) {
                    if (template.$uuid === uuid) {
                        cb(template);
                        return true;
                    }
                    return false;
                });
            });
            cb(null);
        },

        _saveTemplate: function(keys, template, cb) {
            $sdata.saveTemplate(keys, template, function(templates, error) {
                cb();
            });
        },

        _getStoredTemplate: function() {
            var json = window.localStorage["s-template-transfer"];
            var tpl;
            try {
                tpl = JSON.parse(json);
                return tpl;
            } catch(e) {

            }
        },

        _getUser: function() {
            return "*"; // TODO: Maybe don't use global user later
        }
    };
})(jQuery);
