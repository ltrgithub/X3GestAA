"use strict";
var fs = require('fs');


var mongodb = require('mongodb');
try {
	var config = require('config');
} catch (e) {
	console.error("Error when reading configuration: " + e);
	process.exit(1);
}
config.collaboration = config.collaboration || {};
if (config.collaboration.driver && config.collaboration.driver !== "mongodb") {
	console.error("Only MongoDB supported at the moment");
	process.exit(1);
}

var db = new mongodb.Db(config.collaboration.dataset || "syracuse", new mongodb.Server(config.collaboration.hostname || "localhost", config.collaboration.port || 27017, {}), {
	w: "majority"
});


function finish(err) {
	db.close();
	if (err) {
		console.error("" + err);
		process.exit(1);
	}
}
db.open(_);
var pageDef = db.collection("PageDef");
var pageData = db.collection("PageData");

var data = fs.readFile('mobile.json', 'utf8', _);
data = JSON.parse(data);
//fs.writeFileSync('./mobile.json', JSON.stringify(data, null, 4));

var repsToCheck = {};

Object.keys(data).forEach_(_, function(_, key) {
	//	console.log(key);
	var app = data[key];
	Object.keys(app.pages).forEach_(_, function(_, key) {
		var page = app.pages[key];
		if (page.$prototype.$url.indexOf("$query") > -1 || page.$prototype.$url.indexOf("$lookup") > -1) {
			var rep = page.$prototype.$url.split("=")[1];
			if (repsToCheck[rep] === undefined) {
				repsToCheck[rep] = page;
				var tmp = page.$prototype.$url.split("/")[1];
				repsToCheck[rep].dataclass = tmp.split("?")[0];
				repsToCheck[rep].name = page.$prototype.$title.replace(/\{(@[\w-]+)\}/g, function(match, p1) {
					return (page.$prototype.$localization && page.$prototype.$localization[p1]) || match;
				});

			}
		}
		//console.log(page.$prototype.$properties);
		//console.log(JSON.stringify(page.$prototype.$article, null, 2));
	});
});


console.log("Title;Class;Representation;Property");

var keysSorted = Object.keys(repsToCheck);
keysSorted.sort();
keysSorted.forEach_(_, function(_, key) {
	var rep = repsToCheck[key];
	//	if (key.indexOf("BPCUSTOMERM") > -1) {
	var ak = "x3.erp." + key + ".phone";
	var article = getArticle(_, ak);
	//console.log(key);
	//console.log("---------");
	article = article && article.$article && article.$article.$layout;
	if (!article)
		article = rep.$prototype.$article && rep.$prototype.$article.$layout;

	var binds = [];
	if (article) {
		//console.log(JSON.stringify(article, null, 4));
		getBoundFields(article, binds, _);
		//console.log(binds);
	}
	var props = rep.$prototype.$properties.$resources.$item.$properties;
	Object.keys(props).forEach_(_, function(_, p) {
		var prop = props[p];
		var hidden = (prop.$isHidden === true); // hidden

		if (article && binds.indexOf(p) < 0) { // part of page at all?
			hidden = true;
			//				console.log("NOT BOUND: " + p);
		}

		if (!hidden) {
			console.log(repsToCheck[key].name + ";" + repsToCheck[key].dataclass + ";" + key + ";" + p);
		}
	});
	//	}
});

finish();

function getArticle(_, ak) {
	var article;
	var items = pageDef.find({
		"code": ak
	}).toArray(_);
	items.forEach_(_, function(_, item) {
		if (item.variants.length === 1) {
			var id = item.variants[0].pageData._uuid;
			var pages = pageData.find({
				"_id": id
			}).toArray(_);
			if (pages.length === 1) {
				var page = pages[0];
				article = JSON.parse(page.content);
				//console.log(JSON.stringify(article, null, 4));
			}
		}
	});

	return article;
}

function getBoundFields(article, binds, _) {

	if (article.$items) {
		article.$items.forEach_(_, function(_, item) {

			if (item.$layout && item.$layout.$items) {
				getBoundFields(item.$layout, binds, _);
			}
			if (item.$items) {
				getBoundFields(item, binds, _);
			}

			if (item.$bind) {
				binds.push(item.$bind);
			}
			if (item.$expression) {
				item.$expression.replace(/\{([\w-]+)\}/g, function(match, p1) {
					binds.push(p1);
					//					console.log(p1);
				});
			}

		});
	}
}