var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");

//var tracer = console.log;
var tracer = null;


var _exportTargetsMap = {
    download: function(_, exportObj, options) {
        return {
        	headers: {
        		"content-type": "application/x-file"
        	},
        	body: JSON.stringify(exportObj)
        }
    },
    file: function(_, exportObj, options) {
        if (!options.path) throw new Error(locale.format(module, "missingParameter", "path"));
        fs.writeFile(fsp.join(__dirname, "../../../import", options.path + ".json"), JSON.stringify(exportObj));
        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }
    },
    db_file: function(_, exportObj, options) {
        if(!options.storageDescription || !options.storageVolume)
            throw new Error(locale.format(module, "missingParameter", "storageDescription, storageVolume"));
        var db = adminHelper.getCollaborationOrm(_);
        var doc = db.getEntity(_, "document").createInstance(_, db);
        var vol = db.fetchInstance(_, db.getEntity(_, "storageVolume"), options.storageVolume);
        doc.description(_, options.storageDescription);
        doc.volume(_, vol);
        var s = doc.content(_).createWritableStream(_, {
            contentType: "application/json"
        });
        s.write(_, JSON.stringify(exportObj));
        s.write(_, null);
        doc.save(_);
        options.$diagnoses && doc.getAllDiagnoses(_, options.$diagnoses, {
            addEntityName: true,
            addPropName: true
        });
        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }
    },
    server: function(_, exportObj, options) {
        if(!options.friendServer)
            throw new Error(locale.format(module, "missingParameter", "friendServer"));
        var db = adminHelper.getCollaborationOrm(_);
        var server = db.fetchInstance(_, db.getEntity(_, "friendServer"), options.friendServer);
        if(!server) return;
        var s = server.createWritableStream(_, {
            service: "$import",
            certificatesPath: fsp.join(__dirname, "../../syracuse-import/lib/ssl"),
            certificateName: "import",
            method: "PUT"
        });
        s.write(_, JSON.stringify(exportObj));
        var resp = s.end().response(_);
        var h = httpHelper.parseHeaders(resp.headers);
        var respData = resp.readAll(_);
        if(!respData) return;
        if(h.isJSON()) {
            respData = JSON.parse(respData);
            if(options.$diagnoses && respData.$diagnoses)
                respData.$diagnoses.forEach(function(d) {
                    options.$diagnoses.push(d);
                })
        } else {
            options.$diagnoses.push({
                severity: (resp.statusCode === httpHelper.HttpStatus.OK) ? "info" : "error",
                message: respData
            })
        }
        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }
    }
}

function _iterateProfileItem(_, profileItem, db, entity, cb) {
    if(profileItem.exportAll(_) || profileItem.filter(_)) {
        var cursor = db.createCursor(_, entity, profileItem.filter(_) ? {
            sdataWhere: profileItem.filter(_)
        } : null);
        var item;
        while(item = cursor.next(_))
            cb(_, item);
    } else
        profileItem.exportedObjects(_).toArray(_).forEach_(_, function(_, item) {
            cb(_, item);
        });
}


exports.profileToJsonContent = function(_, profileInst, options) {
    options = options || {};
    tracer = tracer || options.tracer || (require("syracuse-main/lib/nodeconfig").config.export || {}).tracer;
    
    if (!profileInst) {
        tracer && tracer("Export Profile is null");
        return ;
    }

    var opt = options || {};
    var db = profileInst.endpoint(_).getOrm(_);
    var model = db.model;
   
    var items = profileInst.exportProfileItem(_).toArray(_);
    var exportObj = {
        $prototypes: {},
        $items: []
    };

    var profItemDefs={};

    items.forEach_(_,function(_,item){
        var selection={
            props : [],
            keys :[] ,
            keynames : []
        };
    
        var keysel= item.entityKeyAttribute(_).toArray(_) ;
        keysel.forEach_(_, function (_, el) {
            selection.keys.push(el.name(_));
            selection.props.push(el.name(_));
        });
        item.entityAttribute(_).toArray(_).forEach_(_, function (_, el) {
            selection.props.push(el.name(_));
        });
        profItemDefs[item.className(_)]=selection ;

    });


    items.forEach_(_, function (_, item, idx) {
        var profItName =item.className(_) ;
        tracer && tracer("jsonExport exporting profile item :" + profItName);

        if(item.standardProfile(_)) {
            return _exportWithStandardProfile(_, exportObj, item, db);
        }

        var allItems = this;

        var propSelection = [];
        item.entityAttribute(_).toArray(_).forEach_(_, function (_, attr) {
            propSelection.push(attr.name(_));
        });

        
        var keys = [];
        item.entityKeyAttribute(_).toArray(_).forEach_(_, function (_, key) {
            var profItEntity = model.getEntity(model.singularize(profItName));
      
            var property = profItEntity.$properties[key.name(_)];
            if (property && property.$isLocalized) {
                tracer && tracer("jsonExport key"+ key.name(_)+" is Localized "  );
                keys.push(key.name(_) + '.' + locale.current);
                tracer && tracer("**********KEY: "+key.name(_) + '.' + locale.current) ;
            } else keys.push(key.name(_));
            propSelection.push(key.name(_)) ;
        });
        tracer && tracer("jsonExport selected attributes for "+profItName+' :'+ sys.inspect(propSelection));
        
        var profileIt = model.singularize(profItName);
        var entity = model.getEntity(_, profileIt);
        var itemProto = serializeProto(_, entity, propSelection, allItems, model, keys,profileInst);
        tracer && tracer("jsonExport exported itemProto :" + sys.inspect(itemProto));
        exportObj.$prototypes[profileIt] = itemProto;
        
        var filter = item.filter(_);
        var all=item.exportAll(_) ;
        if (filter && filter !== "") {
            tracer && tracer("jsonExport filter: " + filter);
            var cursor = db.createCursor(_, entity,{sdataWhere: filter}  );
            } else if (all) {
             tracer && tracer("jsonExport exportAll: " );
             var cursor = db.createCursor(_, entity );
            }

        if ((filter && filter !== "") || all){
            var inst ;
            while(inst=cursor.next(_)) {
                var exportItem ;
                var clnam=model.singularize(item.className(_)) ;
                exportItem = objSerialize(_, inst, propSelection, keys ,profItemDefs, model, clnam,profileInst);
                if (exportItem){
                    tracer && tracer("jsonExport exported item :" + sys.inspect(exportItem));
                    //exportObj.$items.push(exportItem);
                    exportObj.$items.push(exportItem) ;
                } 
            } ;
           return ; 
        }
            var exportedObjs = item.exportedObjects(_).toArray(_);
            tracer && tracer("jsonExport "+exportedObjs.length+" objects to export " );
            exportedObjs.forEach_(_, function (_, ob, idx) {
                tracer && tracer("exportedObject OB: " + ob.$uuid);

                var inst = db.fetchInstance(_, entity, ob.$uuid);
                var exportItem ;
                exportItem = objSerialize(_, inst, propSelection, keys,profItemDefs, model, model.singularize(profItName),profileInst);
                //tracer && tracer("exportItem: "+sys.inspect(exportItem)) ;
                if (exportItem){
                    tracer && tracer("jsonExport exported item :" + sys.inspect(exportItem));
                    exportObj.$items.push(exportItem);
                }
                else 
                    tracer && tracer("serialization of"+ob.$uuid+"returned null") ;
            });
    });
    //
    return exportObj;
}

exports.jsonExport = function (_, profileInst, options) {
    var exportObj = exports.profileToJsonContent(_, profileInst, options);
    var opt = options || {};
    var result;
    if(!profileInst.$diagnoses || !profileInst.$diagnoses.some(function(d) {
                       return d.severity === "error"
    })) {
        result = _exportTargetsMap[opt.targetType || "download"](_, exportObj, opt);
        opt.$diagnoses && opt.$diagnoses.push({
            severity: "info",
            message: locale.format(module, "exportCompleted", exportObj.$items.length)
        });
    }else 
        result=profileInst ;
    //
    return result;
}

function getProfileItem(_,name,allItems){
        var j; 
        for (j = 0; j < allItems.length; j++) {
          
             if (allItems[j].className(_) === helpers.string.pluralize(name)) {
                return allItems[j] ;
            }
        }
 
         return null ;
    }; 

function serializeProto(_, entity, selection, allItems, model, keys,profileInst) {
    tracer && tracer("jsonExport serializing prototype for profile item "+ entity.className) ;
    //tracer && tracer("****entity.$properties "+sys.inspect(entity.$properties)) ;

    var proto = {};
    if (keys && keys.length === 1) proto["$key"] = keys[0];
    else if (keys && keys.length > 1) proto["$key"] = keys;
    tracer && tracer("jsonExport: attributes selection: " + sys.inspect(selection));
    flows.eachKey(_, entity.$relations, function (_, rel, relation) {
        
        if ( selection.length > 0 && selection.indexOf(rel) == -1) {
            
            if (relation.$isMandatory ) {
                tracer && tracer("WARNING!!!!!! "+rel) ;
               profileInst.$addDiagnose("warning",//
                locale.format(module, "mandatoryRelationProperty", rel, entity.className) );
           }
           return ;
        }
        tracer && tracer("jsonExport relation " + rel+" to add");
        var name = relation.targetEntity.name;
        var profItem =getProfileItem(_,name,allItems) ;
        
        if (!profItem){
            profileInst.$addDiagnose("error",locale.format(module,"missingProfItem",name)) ;
            return ;
        }
        tracer && tracer("exporting prototype for relation " + name);

        var propselNames = [];
        profItem.entityAttribute(_).toArray(_).forEach_(_, function (_, el) {
            propselNames.push(el.name(_));
        });
        var relkeys = profItem.entityKeyAttribute(_).toArray(_);
        var relkeynames = [];
        relkeys.forEach_(_, function (_, k, idx) {
            propselNames.push(k.name(_));

            var pty=relation.targetEntity.$properties[k.name(_)] ;
            if (pty && pty.$isLocalized)
                relkeynames.push(k.name(_)+'.'+locale.current);
            else 
                relkeynames.push(k.name(_) );
               });
        
        if (relation.isChild) {
            tracer && tracer(name+ " is a child relation,serializing it recursively "+sys.inspect(relkeynames));
            var entityRel = model.getEntity(_, name);
            proto[rel] = serializeProto(_, entityRel, propselNames, allItems, model, relkeynames,profileInst);
            tracer && tracer("jsonExport: exporting relation proto: " + sys.inspect(proto[name]));
        }else {
             proto[rel]={"$key" : (relkeynames.length>1)?relkeynames :relkeynames[0]};
        }
    });

    //tracer && tracer("PROTO: " + sys.inspect(proto));
    return proto;
}


function refSerialize(_, targetEntity, data, propSelection, keySelection ,profItemDefs, model, profileInst) {
    
    //tracer && tracer("DATA: "+sys.inspect(data));
    function serializeProperty(_, prop, property){
    tracer && tracer("jsonExport: exporting property: "+prop) ;

        if ( propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
            if (property.$isMandatory )
               profileInst.$addDiagnose("warning", "mandatoryRelationProperty" ,prop,targetEntity.$type)
            else
                tracer && tracer("JsonExport: not selected property:" + prop);
            return;
        }
        //if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
            if (property.isExternalStorage() && !(data[prop](_) && data[prop](_).fileExists(_))) {
            tracer && tracer("jsonExport: property ExternalStorage:" + prop);
            return;
        }

        if (property.$isLazy || property.isExternalStorage()) {

            tracer && tracer("jsonExport: lazy property:" + prop);
        } else {
            tracer && tracer("property:" + prop);
            // ????????????? c'ets different qd c'ets null ou undefined ???
            if (!data[prop](_))
                tracer && tracer("prop value: "+sys.inspect(data[prop](_)));
                resource[prop] = resourceHelpers.formatValue(property, data[prop](_));
        }
    }


    if (!keyControl_(_,data,keySelection)){
         tracer && tracer("error raised : null key") ;
        profileInst.$addDiagnose("error",locale.format(module,"controlKeys",targetEntity.$type)) ;
        return null;
        };


    var resource={} ;
    tracer && tracer("jsonExport: serializing reference ");
    if (!data) {
        tracer && tracer("data null") ;//?????????
        return null ;
    }

    if (!targetEntity) {
         tracer && tracer("jsonExport:null target ");
        return null;
    }

    flows.eachKey(_, targetEntity.$properties, serializeProperty ) ;
    tracer && tracer("the  relations of the relation ");
    flows.eachKey(_, targetEntity.$relations, function (_, rel, relation) {
        tracer && tracer("relation : "+rel) ;
        var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
        if (inv && inv.isChild) {
            return;
        }
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
            return;
        }
        var reltype ;
        if (relation.isPlural)
            reltype=relation.$type ;
        else 
            reltype=helpers.string.pluralize(relation.$type) ;
        if (!profItemDefs[reltype]){
            profileInst.$addDiagnose("warning",locale.format(module,"missingProfItem",reltype )) ;
            return ;
        }
        var propselNames=profItemDefs[reltype].props ;
        
        var keysel=profItemDefs[reltype].keys ;
        
        if (relation.isPlural) {
            tracer && tracer("JsonExport: plural relation ");
            var val = data[rel](_);
             if (!val) {
                tracer && tracer(" relation " +rel +" is undefined") ;
                return null ;
            }
            var collData = val.toArray(_, true);
           
            if (!collData.length) {
                tracer && tracer("empty collection") ; //????????NULL
                return null ;
            }
            tracer && tracer("Collection");
            resource[rel] = [];
            if (relation.isChild) {
                tracer && tracer("Child");
                collData.forEach_(_, function (_, elt) {
                     var serialized = refSerialize(_, val._relMeta.targetEntity, elt, propselNames,keysel, profItemDefs, model,profileInst);
                    if (serialized){
                        tracer && tracer(rel + " is serialized" + JSON.stringify(serialized, null, 2));
                        resource[rel].push(serialized);
                    }
                });
            } else {
               tracer && tracer("jsonExport: reference");
                collData.forEach_(_, function (_, elt) {
                    if (keysel && keysel.length === 1) {
                        resource[rel].push(elt[keysel[0]](_));
                    } else {
                        var it = {};
                        var proto = {};
                        keysel.forEach_(_, function (_, k) {
                           //tracer && tracer("value: " + elt[k](_));
                            it[k] = elt[k](_);
                        });
                        resource[rel].push(it);
                    }
                });
            }
            
        } else {
            tracer && tracer("jsonExport: Single relation");
            var val = data[rel](_);
             if (!val) {
                tracer && tracer("data is null for this relation") ;
                return ;
            }
            if (relation.isChild) {
                tracer && tracer("jsonExport: Child relation");
                var serialized=refSerialize(_, val._relMeta.targetEntity, val, propselNames,keysel, profItemDefs, model,profileInst);
                if (serialized ){
                    resource[rel] = serialized ;
                    tracer && tracer("jsonExport: " + rel + " is serialized: " + JSON.stringify(serialized, null, 2));
                }
            } else {
                tracer && tracer("jsonExport: reference") ;
                if (keysel && keysel.length === 1) {
                    if (!val[keysel[0]](_)){
                        profileInst.$addDiagnose("error",locale.format(module,"nullKeyValue",keysel[0],reltype)) ;
                   tracer && tracer("null key") ;
                   }
                    resource[rel] =  val[keysel[0]](_) ; 
                } else if (keysel && keysel.length > 1) {
                    var it=resource[rel] = {};
                    keysel.forEach_(_, function (_, k) {
                        if (val[k](_)){
                         it[k] = val[k](_);
                        }
                    });
                }
            }
        }
    });
    // tracer && tracer( "RESOURSE: " + JSON.stringify(resource,null,2)) ; 
    return resource;
}


function keyControl_(_,instance,keySelection)  {
        var errorKey=false ;
        keySelection.forEach_(_,function (_,key){
            var parts=key.split('.');
            
            if (parts && parts[1]){ //localizedProperty
                var allLocales=instance.getPropAllLocales(_,parts[0]) ;
                 //tracer && tracer("ALL LOCALES: "+sys.inspect(allLocales) ) ;
                if (!allLocales || !allLocales[parts[1].toLowerCase()])
                {
                   errorKey=true ; 
                   tracer && tracer("jsonExport: key control fails for localized property")  ;
                }    
            }
            else if (!(instance[key](_))){
                tracer && tracer("jsonExport: key control fails")  ;
                errorKey=true ;
            }
            else {
                //tracer && tracer("key contro instance[key](_)"+ sys.isnpect(instance[key](_))) ;
                    tracer && tracer("jsonExport: key control pass")  ;
                    errorKey=false ;
                    return ;
                 }
        });
        //tracer && tracer("controlKey_ RETURNS "+(!errorKey)) ;
        return (!errorKey) ;
    } 



function objSerialize(_, instance, propSelection,  keySelection ,profItemDefs, model, type,profileInst) {
   
    if (!instance) 
        return null;
    if (!keyControl_(_,instance,keySelection)){
         tracer && tracer("error raised : null key") ;
        profileInst.$addDiagnose("error",locale.format(module,"controlKeys",type)) ;
        //tracer && tracer(sys.inspect("DIAGNOSES: "+ profileInst.getAllDiagnoses(_))) ;
        var diagnoses=[] ;
        profileInst.getAllDiagnoses(_, diagnoses);
        tracer && tracer("DIAGNOSES: "+ sys.inspect(diagnoses)) ;

        return null;
        };

    var meta = instance._meta;
    var resource = {
       $type: type
    };

    tracer && tracer('props traversing ');

    flows.eachKey(_, meta.$properties, function (_, prop, property) {

        if (propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
            if (property.$isMandatory) 
                profileInst.$addDiagnose("warning",locale.format(module,"mandatoryRelationProperty",prop,type)) ;
            return;
        } ;
        if (instance[prop](_)== 'undefined'){
            tracer && tracer("jsonExport: "+prop+"is undefined" );
            return ;
        }
        if (instance[prop](_)== 'null'){
            tracer && tracer("jsonExport: "+prop+ " is null");
            resource[prop] = null ;
            return ;
        }
        if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
            tracer && tracer("property ExternalStorage:" + prop);
            return;
        }
        if (property.$isLazy || property.isExternalStorage()) {
            tracer && tracer("jsonExport: lazy property" + prop);
        } else if (property.$isLocalized) {
            resource[prop] = instance.getPropAllLocales(_, prop);
            tracer && tracer("jsonExport: localized property: " + JSON.stringify(resource[prop]));
        } else {
            resource[prop] = resourceHelpers.formatValue(property, instance[prop](_));
            tracer && tracer("jsonExport:  property: " + JSON.stringify(resource[prop]));
        }

    });

    //tracer && tracer(' Relations traversing');
    flows.eachKey(_, meta.$relations, function (_, rel, relation) {

        tracer && tracer("jsonExport: relation " + rel);
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
            if (rel.$isMandatory) 
                profileInst.$addDiagnose(locale.format(module, "mandatoryRelationProperty",rel,type)) 
            return;
        }

        var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
        if (inv && inv.isChild) return;
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) 
            {
                tracer && tracer("propSelection "+sys.inspect(propSelection));
                return;
            }
       
       var reltype ;
       if(relation.isPlural)
            reltype=relation.$type ;
        else
            reltype=helpers.string.pluralize(relation.$type) // targetEntity.name ;
        if (!profItemDefs[reltype]) {
            //tracer && tracer("profItemDefs: "+JSON.stringify(profItemDefs,null,2)) ;
            profileInst.$addDiagnose("error",locale.format(module, "missingProfItem",reltype)); ;
            //tracer && tracer("no profileItem definition for "+reltype ) ;
            return ;
        }
        var propselNames=profItemDefs[reltype].props ;
        var keysel=profItemDefs[reltype].keys ;
        
         //tracer && tracer("reltype: "+ reltype) ;
         //tracer && tracer("keysel: "+ sys.inspect(keysel)) ;

        if (!keysel || !keysel.length){
            profileInst.$addDiagnose("error",locale.format(module, "missingKeys",reltype));
            return ;
        }
   
        if (relation.isPlural) {
            tracer && tracer("jsonExport: plural relation");
            var val = instance[rel](_) ;
            //var targ=val.targetEntity;
            var collData = val.toArray(_, true);
            
            if (!collData.length)
                return null ;

            tracer && tracer("jsonExport: Collection");
            resource[rel] = [];
            if (relation.isChild) {
                tracer && tracer("jsonExport: child relation");
                collData.forEach_(_, function (_, elt) {
                      //tracer && tracer("ligne 498: calling refSerialize") ;
                    var serialized = refSerialize(_, relation.targetEntity, elt, propselNames,keysel, profItemDefs, model,profileInst);
                    //tracer && tracer("RELATION "+rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
                    if (!serialized)
                        return ;
                    resource[rel].push(serialized);
                });
            } else {
                tracer && tracer("jsonExport: reference");
                collData.forEach_(_, function (_, elt) {
                    if (keysel && keysel.length === 1) {
                        if (!elt[keysel[0]](_)) //notValuedkey
                             profileInst.$addDiagnose("error",  locale.format(module, "notValuedkey", keysel[0]) );
                        else
                            resource[rel].push(elt[keysel[0]](_));
                         } else {
                        var it = {};
                        var proto = {};
                        keysel.forEach_(_, function (_, k) {
                            if (elt[k](_))
                                it[k] = elt[k](_);
                        });
                        resource[rel].push(it);
                    }
                });
        }
        } else {
            tracer && tracer ("jsonExport: singular relation") ;
            var val = instance[rel](_);
            if (relation.isChild) {
                tracer && tracer("jsonExport: child relation");
                var serialized = refSerialize(_, relation.targetEntity, val, propselNames,keysel, profItemDefs, model,profileInst);
                tracer && tracer("jsonExport: "+rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
                resource[rel] = serialized;
            } else if (!val){
                tracer && tracer("relation is null") ; 
                return ;
                //resource[rel] =null ; ?????????????????
            }else if (keysel && keysel.length === 1) {
                //tracer && tracer("simple key "+keysel[0].name(_)) ;
                if (!val[keysel[0]](_) )
                    profileInst.$addDiagnose("error",  locale.format(module, "notValuedkey", keysel[0]) );
                else
                    resource[rel] = val[keysel[0]](_);
                    //tracer && tracer("resource["+rel+"]="+sys.inspect(resource[rel])) 
            }
            else {
                //tracer && tracer("list key") ;
                var it = resource[rel] = {};
                var error =true ;
                keysel.forEach_(_, function (_, k) {
                   // tracer && tracer("key: "+el.name(_)) ;
                   //if (!val[k](_))
                        //profileInst.$addDiagnose("error",  locale.format(module, "notValuedkey", keysel[0]) );
                   if(val[k](_)) {
                        it[k] = val[k](_);
                        error=false ;
                    }
                });
                if (error) 
                    profileInst.$addDiagnose("error",  locale.format(module, "controlKeys", type) );
                
            }
            }
    });

    //tracer && tracer( "RESOURSE: " + JSON.stringify(resource)) ; 
    return resource;
}

function _makePrototype(meta) {
	return Object.keys(meta.$relations || {}).reduce(function(prev, k) {
		prev[k] = _makePrototype(meta.$relations[k]);
		return prev;
	}, {
		$key: meta.$key		
	});
}

function _serialize(_, result, stdProfile, entity, item) {
    function _setProp(_, resource, pName, inst) {
        var p = inst.getEntity().$properties[pName];
        if(!p) return;
        if(p.$isLocalized)
            resource[pName] = inst.getPropAllLocales(_, pName);
        else
            resource[pName] = resourceHelpers.formatValue(p, inst[pName](_));
    }
    function _onRelationItem(_, r, relDef, relItem, cb) {
        // opposite object should be exported if: isChild || has $properties || has $relations
        if(r.isChild) {
            // export relation object
            cb(_serialize(_, result, relDef, relItem.getEntity(), relItem));
        } else {
            if(relDef.$properties || relDef.$relations) {
            	var e = relItem.getEntity();
            	// prototype
            	result.$prototypes[e.name] = _makePrototype(relDef);
                // push the serialization before the current object
                result.$items.push(_serialize(_, result, relDef, e, relItem));
            }
            // export keys
            var keys = Array.isArray(relDef.$key) ? relDef.$key : [relDef.$key];
            cb(keys.reduce_(_, function(_, prev, k) {
                _setProp(_, prev, k, relItem);
                return prev;
            }, {}));
        }
    }
    //
    var res = {};
    var std = stdProfile;
    // serialize props
    (std.$properties || []).forEach_(_, function(_, pName) {
        _setProp(_, res, pName, item);
    });
    // force keys serialization
    var keys = Array.isArray(std.$key) ? std.$key : [std.$key];
    keys.forEach_(_, function(_, pName) {
        _setProp(_, res, pName, item);
    });
    // relations
    Object.keys(std.$relations || {}).forEach_(_, function(_, rName) {
        var r = entity.$relations[rName];
        if(!r) return;
        var relDef = std.$relations[rName];
        if(r.isPlural) {
            var resItems = res[rName] = [];
            item[rName](_).toArray(_).forEach_(_, function(_, relItem) {
            	_onRelationItem(_, r, relDef, relItem, function(it) {
            		resItems.push(it);
            	});
            });
        } else {
        	var relItem = item[rName](_);
        	if(relItem) {
            	_onRelationItem(_, r, relDef, relItem, function(it) {
            		res[rName] = it;
            	});
        	} else
        		res[rName] = null;
        }
    });
    //
    return res;
}

function _exportWithStandardProfile(_, result, profileItem, db) {
    var entity = profileItem.getExportedEntity(_);
    var profile = profileItem._parent;
    if(!entity) {
        profile.$addDiagnose("warning", locale.format(module, "entityNotFound", profileItem.className(_), profile.endpoint.description(_)));
        return;
    }
    var exportMeta = entity.$exportProfile;
    //
    result.$prototypes[entity.name] = _makePrototype(exportMeta);
    //
    _iterateProfileItem(_, profileItem, db, entity, function(_, item) {
        result.$items.push(_serialize(_, result, exportMeta, entity, item));
    });
}