var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");

//var tracer = console.log;
var tracer = null;


var _exportTargetsMap = {
	download: function(_, exportObj, options) {
		// TODO: need to reply the content, so override the default services execution behavior
	},
	file: function(_, exportObj, options) {
        if (!options.path) throw new Error(locale.format(module, "missingParameter", "path"));
	    fs.writeFile(fsp.join(__dirname, "../../../import", options.path + ".json"), JSON.stringify(exportObj));
	},
	db_file: function(_, exportObj, options) {
		if(!options.storageDescription || !options.storageVolume)
			throw new Error(locale.format(module, "missingParameter", "storageDescription, storageVolume"));
		var db = adminHelper.getCollaborationOrm(_);
		var doc = db.getEntity(_, "document").createInstance(_, db);
		var vol = db.fetchInstance(_, db.getEntity(_, "storageVolume"), options.storageVolume);
		doc.description(_, options.storageDescription);
		doc.volume(_, vol);
		var s = doc.content(_).createWritableStream(_, {
			contentType: "application/json"
		});
		s.write(_, JSON.stringify(exportObj));
		s.write(_, null);
		doc.save(_);
    	options.$diagnoses && doc.getAllDiagnoses(_, options.$diagnoses, {
    		addEntityName: true,
    		addPropName: true
    	});
 	},
	server: function(_, exportObj, options) {
		if(!options.friendServer)
			throw new Error(locale.format(module, "missingParameter", "friendServer"));
		var db = adminHelper.getCollaborationOrm(_);
		var server = db.fetchInstance(_, db.getEntity(_, "friendServer"), options.friendServer);
		if(!server) return;
		var s = server.createWritableStream(_, {
			service: "$import",
			certificatesPath: fsp.join(__dirname, "../../syracuse-import/lib/ssl"),
			certificateName: "import",
			method: "PUT"
		});
		s.write(_, JSON.stringify(exportObj));
		var resp = s.end().response(_);
        var h = httpHelper.parseHeaders(resp.headers);
        var respData = resp.readAll(_);
        if(!respData) return;
        if(h.isJSON()) {
        	respData = JSON.parse(respData);
        	if(options.$diagnoses && respData.$diagnoses)
        		respData.$diagnoses.forEach(function(d) {
        			options.$diagnoses.push(d);
        		})
        } else {
        	options.$diagnoses.push({
        		severity: (resp.statusCode === httpHelper.HttpStatus.OK) ? "info" : "error",
        		message: respData
        	})
        }
	}
}


exports.jsonExport = function (_, profileInst, options) {

    options = options || {};
    tracer = tracer || options.tracer || (require("syracuse-main/lib/nodeconfig").config.export || {}).tracer;
    
    if (!profileInst) {
        tracer && tracer("Export Profile is null");
        return ;
    }

    var opt = options || {};
    var db = profileInst.endpoint(_).getOrm(_);
    var model = db.model;
   
    var items = profileInst.exportProfileItem(_).toArray(_);
    var exportObj = {
        $prototypes: {},
        $items: []
    };

    items.forEach_(_, function (_, item, idx) {
        var profItName =item.className(_) ;
        tracer && tracer("jsonExport exporting profile item :" + profItName);

        var allItems = this;

        var propSelection = [];
        item.entityAttribute(_).toArray(_).forEach_(_, function (_, attr) {
            propSelection.push(attr.name(_));
        });

        
        var keys = [];
        item.entityKeyAttribute(_).toArray(_).forEach_(_, function (_, key) {
            var profItEntity = model.getEntity(model.singularize(profItName));
      
            var property = profItEntity.$properties[key.name(_)];
            if (property && property.$isLocalized) {
                tracer && tracer("jsonExport key"+ key.name(_)+" is Localized "  );
                keys.push(key.name(_) + '.' + locale.current);
            } else keys.push(key.name(_));
            propSelection.push(key.name(_)) ;
        });
        tracer && tracer ("jsonExport selected attributes for "+profItName+' :'+ sys.inspect(propSelection));
        

        var profileIt = model.singularize(profItName);

        var entity = model.getEntity(_, profileIt);

        var itemProto = serializeProto(_, entity, propSelection, allItems, model, keys,profileInst);
        tracer && tracer("jsonExport exported itemProto :" + sys.inspect(itemProto));
        exportObj.$prototypes[profileIt] = itemProto;

        var filter = item.filter(_);
        if (filter && filter !== "") {
            tracer && tracer("jsonExport filter: " + filter);

            var cursor = db.createCursor(_, entity,{sdataWhere: filter}  );
            var inst ;
            while(inst=cursor.next(_)) {
                var exportItem = {};
                exportItem = objSerialize(_, inst, propSelection, allItems, model, model.singularize(item.className(_)),profileInst);
                tracer && tracer("jsonExport exported item :" + sys.inspect(exportItem));
                exportObj.$items.push(exportItem);  
            } ;
        } else {
            var exportedObjs = item.exportedObjects(_).toArray(_);
            tracer && tracer("jsonExport "+exportedObjs.length+" objects to export " );
            exportedObjs.forEach_(_, function (_, ob, idx) {
                tracer && tracer("exportedObject OB: " + ob.$uuid);

                var inst = db.fetchInstance(_, entity, ob.$uuid);
                var exportItem = {};
                
                exportItem = objSerialize(_, inst, propSelection, allItems, model, model.singularize(profItName),profileInst);
                tracer && tracer("jsonExport exported item :" + sys.inspect(exportItem));

                exportObj.$items.push(exportItem);
        });
        }
    });

    _exportTargetsMap[opt.targetType || "download"](_, exportObj, opt);

    opt.$diagnoses && opt.$diagnoses.push({
		severity: "info",
		message: locale.format(module, "exportCompleted", exportObj.$items.length)
	});
}

function getProfileItem(_,name,allItems){
        var j; 
        for (j = 0; j < allItems.length; j++) {
          
             if (allItems[j].className(_) === helpers.string.pluralize(name)) {
                return allItems[j] ;
            }
        }
 
         return null ;
    } 

function serializeProto(_, entity, selection, allItems, model, keys,profileInst) {
    tracer && tracer("jsonExport serializing prototype for profile item "+ entity.className) ;
    //console.log("****entity.$properties "+sys.inspect(entity.$properties)) ;

    var proto = {};
    if (keys && keys.length === 1) proto["$key"] = keys[0];
    else if (keys && keys.length > 1) proto["$key"] = keys;
    tracer && tracer("jsonExport: attributes selection: " + sys.inspect(selection));
    flows.eachKey(_, entity.$relations, function (_, rel, relation) {
        
        if ( selection.length > 0 && selection.indexOf(rel) == -1) {
            
            if (relation.$isMandatory ) {
                console.log("classname: "+sys.inspect(entity.className));
                console.log("selection: "+sys.inspect(selection));
                console.log("WARNING!!!!!! "+rel) ;
               profileInst.$addDiagnose("warning",//
                locale.format(module, "mandatoryRelationProperty", rel, entity.className) );
           }
           return ;
        }
        tracer && tracer("jsonExport relation " + rel+"to add");
        var name = relation.targetEntity.name;
        var profItem =getProfileItem(_,name,allItems) ;
        
        if (!profItem){
            //profileInst.$addDiagnose("warning","entity "+name+" is not selected for export") ;
            return ;
        }
        tracer && tracer("exporting prototype for relation " + name);

        var propselNames = [];
        profItem.entityAttribute(_).toArray(_).forEach_(_, function (_, el) {
            propselNames.push(el.name(_));
        });
        var relkeys = profItem.entityKeyAttribute(_).toArray(_);
        var relkeynames = [];
        relkeys.forEach_(_, function (_, k, idx) {
            propselNames.push(k.name(_));

            var pty=relation.targetEntity.$properties[k.name(_)] ;
            if (pty && pty.$isLocalized)
                relkeynames.push(k.name(_)+'.'+locale.current);
            else 
                relkeynames.push(k.name(_) );
            //console.log("relkeynames: "+sys.inspect(relkeynames)) ;
        });
        
        if (relation.isChild) {
            tracer && tracer(name+ "is a child relation,serializing it recursively"+sys.inspect(relkeynames));
            var entityRel = model.getEntity(_, name);
            proto[rel] = serializeProto(_, entityRel, propselNames, allItems, model, relkeynames,profileInst);
            tracer && tracer("jsonExport: exporting relation proto: " + sys.inspect(proto[name]));
        }else {
             proto[rel]={"$key" : (relkeynames.length>1)?relkeynames :relkeynames[0]};
        }
    });

    //console.log("PROTO: " + sys.inspect(proto));
    return proto;
}


function refSerialize(_, targetEntity, data, propSelection, allItems, model, profileInst) {
    
    function serializeProperty(_, prop, property){
    tracer && tracer("jsonExport: exporting property: "+prop) ;

        if ( propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
            if (property.$isMandatory )
               ; //profileInst.$addDiagnose("warning", "Mandatory propert "+prop)
            else
                tracer && tracer("JsonExport: not selected property:" + prop);
            return;
        }
        //if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
            if (property.isExternalStorage() && !(data[prop](_) && data[prop](_).fileExists(_))) {
            tracer && tracer("jsonExport: property ExternalStorage:" + prop);
            return;
        }

        if (property.$isLazy || property.isExternalStorage()) {

            tracer && tracer("jsonExport: lazy property:" + prop);
        } else {
            tracer && tracer("property:" + prop);
            //console.log("DATA: "+sys.inspect(data)) ;

            // ????????????? c'ets different qd c'ets null ou undefined ???
            if (!data[prop](_))
                tracer && tracer("prop value"+sys.inspect(data[prop](_))) ;
           tracer && tracer("prop value: "+sys.inspect(data[prop](_)));
            resource[prop] = resourceHelpers.formatValue(property, data[prop](_));
        }
    }


    var resource={} ;
    tracer && tracer("jsonExport: serializing reference ");
    if (!data) 
        tracer && tracer("data null") ;

    if (!targetEntity) {
         tracer && tracer("jsonExport:null target ");
        return null;
    }

    //flows.eachKey(_, instance._relMeta.targetEntity.$properties, function (_, prop, property) {
 
    flows.eachKey(_, targetEntity.$properties, serializeProperty ) ;

    tracer && tracer("the  relations of the relation ");
    
    flows.eachKey(_, targetEntity.$relations, function (_, rel, relation) {

        tracer && tracer("relation : "+rel) ;
       
        var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
        if (inv && inv.isChild) {
              
            return;
        }
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
           // console.log("rel not exportable");
            return;
        }
        
        
        var profileIt=getProfileItem(relation.$type,allItems) ;
        if (!profileIt){
            console.log("profileItem null") ;
            return ;
        }
        var propselNames = [];
        var keysel = profileIt.entityKeyAttribute(_).toArray(_);
        profileIt.entityAttribute(_).toArray(_).forEach_(_, function (_, el) {
            propselNames.push(el.name(_));
        });

        if (!keysel || !keysel.length) 
            return ;
       
        if (relation.isPlural) {
            tracer && tracer("JsonExport: plural relation ");
            var val = data[rel](_);
             if (!val) 
                tracer && tracer(" relation" +rel +"is undefined") ;
            var collData = val.toArray(_, true);
           
            if (!collData.length) {
                tracer && tracer("empty collection") ; //????????NULL
                return null ;
            }
            tracer && tracer("Collection");
            resource[rel] = [];
            if (relation.isChild) {
                tracer && tracer("Child");
                collData.forEach_(_, function (_, elt) {
                    //console.log("ligne 350: calling refSerialize") ;
                    var serialized = refSerialize(_, val._relMeta.targetEntity, elt, propselNames, allItems, model,profileInst);
                   tracer && tracer(rel + " is serialized" + JSON.stringify(serialized, null, 2));
                    resource[rel].push(serialized);
                });
            } else {
               tracer && tracer("jsonExport: reference");
                collData.forEach_(_, function (_, elt) {
                    if (keysel && keysel.length === 1) {
                        resource[rel].push(elt[keysel[0].name(_)](_));
                        //console.log("resource[" + rel + "]=" + elt[keysel[0].name(_)](_));
                    } else {
                        var it = {};
                        var proto = {};
                        keysel.forEach_(_, function (_, el) {
                            //console.log("valuer: " + elt[el.name(_)](_));
                            it[el.name(_)] = elt[el.name(_)](_);
                        });
                        resource[rel].push(it);
                    }
                });
            }
            
        } else {
            //console.log("Reference ligne 337"+rel);
            var val = data[rel](_);
            //console.log("VAL:"+sys.inspect(val)) ;
            if (relation.isChild) {
                tracer && tracer("jsonExport: Child relation");
                //val ou elt ?????????
                //console.log("ligne 339: calling refSerialize") ;
                resource[rel] = refSerialize(_, val._relMeta.targetEntity, val, propselNames, allItems, model,profileInst);
                tracer && tracer("jsonExport: " + rel + " is serialized: " + JSON.stringify(serialized, null, 2));

            } else {
                tracer && tracer("jsonExport: reference") ;
                if (keysel && keysel.length === 1) {
                    //console.log("1 seule clé");
                    //console.log("key: "+keysel[0].name(_)) ;
                    //console.log("valeur: " +val[keysel[0].name(_)](_)) ;

                    resource[rel] = (val[keysel[0].name(_)](_)) ? val[keysel[0].name(_)](_) : null; //val[keysel[0].name(_)](_);
                } else if (keysel && keysel.length > 1) {
                    //console.log("liste de clefs");
                    var it=resource[rel] = {};
                    keysel.forEach_(_, function (_, el) {
                        //console.log("keysel: "+el.name(_)) ;
                         it[el.name(_)] = (val[el.name(_)](_))?val[el.name(_)](_):null;

                    });
                }
            }
        }
    });
    // console.log( "RESOURSE: " + JSON.stringify(resource,null,2)) ; 
    return resource;
}



function objSerialize(_, instance, propSelection,  allItems, model, type,profileInst) {
    if (!instance) return null;
    var meta = instance._meta;
    var resource = {
       $type: type
    };
    
    tracer && tracer('props traversing');
    flows.eachKey(_, meta.$properties, //
    function (_, prop, property) {
       
        if (propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
            /*if property.$isMandatory -->addDiagnose(warning, ) */
            return;
        }
        if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
            tracer && tracer("property ExternalStorage:" + prop);
            return;
        }
        if (property.$isLazy || property.isExternalStorage()) {
            tracer && tracer("jsonExport: lazy property" + prop);
        } else if (property.$isLocalized) {
            resource[prop] = instance.getPropAllLocales(_, prop);
            tracer && tracer("jsonExport: localized property: " + JSON.stringify(resource[prop]));
        } else {
            tracer && tracer("jsonExport:  property: " + JSON.stringify(resource[prop]));
            resource[prop] = resourceHelpers.formatValue(property, instance[prop](_));
        }

    });

    //tracer && tracer(' Relations traversing');
    flows.eachKey(_, meta.$relations, function (_, rel, relation) {

        tracer && tracer("jsonExport: relation" + rel);
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
            if (rel.$isMandatory) 
            //addDiagnose
        ;
            return;
        }
        var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
        if (inv && inv.isChild) return;
        if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) return;
       
        var type=relation.$type // targetEntity.name ;

        var profIt=getProfileItem(_,type,allItems) ;
        if (!profIt){
            console.log("RAISE WARNING!!!")
            //continue ;
            return ; //???? sort de la boucle ou de la f-n objSerialize
        }
        var propselNames = [];
        var keyselNames =[] ;
        var keysel= profIt.entityKeyAttribute(_).toArray(_) ;
        keysel.forEach_(_, function (_, el) {
        keyselNames.push(el.name(_));
        propselNames.push(el.name(_));
        });
        profIt.entityAttribute(_).toArray(_).forEach_(_, function (_, el) {
        propselNames.push(el.name(_));
        });


        if (!keysel || !keysel.length){
            //console.log("relation shouldn't be exported") ;
            return ;
        }
   
        if (relation.isPlural) {
            tracer && tracer("jsonExport: plural relation");
            var val = instance[rel](_) ;
            //var targ=val.targetEntity;
            var collData = val.toArray(_, true);
            
            if (!collData.length)
                return null ;
            tracer && tracer("jsonExport: Collection");
            resource[rel] = [];
            if (relation.isChild) {
                tracer && tracer("sonExport: Child relation");
                collData.forEach_(_, function (_, elt) {
                      //console.log("ligne 498: calling refSerialize") ;
                    var serialized = refSerialize(_, relation.targetEntity, elt, propselNames, allItems, model,profileInst);
                    //console.log("RELATION "+rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
                    if (!serialized){
                        //console.log("child null") ;//???????? CHILD NULL
                    }
                    else
                        resource[rel].push(serialized);
                });
            } else {
                tracer && tracer("jsonExport: reference");
                collData.forEach_(_, function (_, elt) {
                    if (keysel && keysel.length === 1) {
                        //console.log("KEYSELECTION: " + keysel[0].name(_) + " : " + elt[keysel[0].name(_)](_));
                        resource[rel].push(elt[keysel[0].name(_)](_));
                        //console.log("resource[" + rel + "]=" + elt[keysel[0].name(_)](_));
                    } else {
                        var it = {};
                        var proto = {};
                        keysel.forEach_(_, function (_, el) {
                            //console.log("KEYSELECTION 2: " + el.name(_));
                            //console.log("value: " + elt[el.name(_)](_));
                            it[el.name(_)] = elt[el.name(_)](_);
                        });
                        resource[rel].push(it);
                    }
                });
        }
        } else {
            //console.log("Refrence ligne 486" + rel);
            var val = instance[rel](_);
            //console.log("DARY: "+sys.inspect(instance)) ;
            if (relation.isChild) {
                tracer && tracer("jsonExport: Child relation");
               
                //console.log("ligne 491 : calling refSerialize") ;
                //instance ou  val ?????????
                
                var serialized = refSerialize(_, relation.targetEntity, /*instance*/val, propselNames, allItems, model,profileInst);
                tracer && tracer(rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
                resource[rel] = serialized;

                //resource[rel] = refSerialize(_, val,val, propselNames, allItems,model);
                //objSerialize(_, val, propselNames, relation.$type, allItems,model);
            } else if (!val){
                //console.log("relation is null") ; //???????? NULL
                resource[rel] =null ;
            }else if (keysel && keysel.length === 1) {
                //console.log("simple key "+keysel[0].name(_)) ;
                //console.log("VAL: "+sys.inspect(val.)) ;
                if (!val[keysel[0].name(_)](_) )
                    ;
                    //console.log("RAISE ERROR IN DIAGNOSES : KEY NOT VALUATED") ;
                else
                    resource[rel] = val[keysel[0].name(_)](_);
                    //console.log("resource["+rel+"]="+sys.inspect(resource[rel])) 
            }
            else {
                //console.log("list key") ;
                var it = resource[rel] = {};
                keysel.forEach_(_, function (_, el) {
                   // console.log("key: "+el.name(_)) ;
                    it[el.name(_)] = val[el.name(_)](_);

                });
            }
            }
    });

    //console.log( "RESOURSE: " + JSON.stringify(resource)) ; 
    return resource;
}
