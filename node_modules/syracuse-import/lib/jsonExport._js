"use strict";
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var Parser = require("syracuse-sdata/lib/parser/parser").Parser;
var httpHelper = require("syracuse-sdata/lib/httpHelper");

var tracer = console.log;
var tracer = null;

function _normalizeDiag(diag) {
	return {
		$severity: diag.$severity || diag.severity,
		$message: diag.$message || diag.message,
		$stackTrace: diag.$stackTrace
	}
}

var _exportTargetsMap = {
	download: function(_, exportObj, options) {
		return {
			headers: {
				"content-type": "application/x-file"
			},
			body: JSON.stringify(exportObj, null, options.stringifySpace)
		}
	},
	file: function(_, exportObj, options) {
		if (!options.path) throw new Error(locale.format(module, "missingParameter", "path"));

		fs.writeFile(fsp.join(__dirname, "../../../import", options.path + ".json"), JSON.stringify(exportObj, null, options.stringifySpace), "utf8", _);

		/*        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }*/
		return null;
	},
	db_file: function(_, exportObj, options) {
		if (!options.storageDescription || !(options.storageVolume && options.storageVolume.$uuid)) throw new Error(locale.format(module, "missingParameter", "storageDescription, storageVolume"));
		var db = adminHelper.getCollaborationOrm(_);
		var doc = db.getEntity(_, "document").createInstance(_, db);
		var vol = db.fetchInstance(_, db.getEntity(_, "storageVolume"), options.storageVolume.$uuid);
		doc.description(_, options.storageDescription);
		doc.volume(_, vol);
		var s = doc.content(_).createWritableStream(_, {
			contentType: "application/json"
		});
		s.write(_, JSON.stringify(exportObj, null, options.stringifySpace));
		s.write(_, null);
		doc.save(_);
		options.$diagnoses && doc.getAllDiagnoses(_, options.$diagnoses, {
			addEntityName: true,
			addPropName: true
		});
		/*        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }*/
		return null;
	},
	server: function(_, exportObj, options) {
		if (!options.friendServer || !options.friendServer.$uuid) throw new Error(locale.format(module, "missingParameter", "friendServer"));
		var db = adminHelper.getCollaborationOrm(_);
		var server = db.fetchInstance(_, db.getEntity(_, "friendServer"), options.friendServer.$uuid);
		if (!server) return;
		var s = server.createWritableStream(_, {
			service: "$import",
			certificatesPath: fsp.join(__dirname, "../../syracuse-import/lib/ssl"),
			certificateName: "import",
			method: "PUT"
		});
		s.write(_, JSON.stringify(exportObj, null, options.stringifySpace));
		var resp = s.end().response(_);
		var h = httpHelper.parseHeaders(resp.headers);
		var respData = resp.readAll(_);
		if (!respData) return;
		if (options.$diagnoses) {
			if (h.isJSON()) {
				respData = JSON.parse(respData);
				if (options.$diagnoses && respData.$diagnoses) respData.$diagnoses.forEach(function(d) {
					options.$diagnoses.push(d);
				})
			} else {
				options.$diagnoses && options.$diagnoses.push({
					$severity: (resp.statusCode === httpHelper.HttpStatus.OK) ? "info" : "error",
					$message: respData
				})
			}
		}
		/*        return {
        	body: locale.format(module, "exportCompleted", exportObj.$items.length)
        }*/
		return null;
	}
}

	function _iterateProfileItem(_, profileItem, db, entity, cb) {
		if (profileItem.exportAll(_) || profileItem.filter(_)) {
			var cursor = db.createCursor(_, entity, profileItem.filter(_) ? {
				sdataWhere: profileItem.filter(_)
			} : null);
			var item;
			while (item = cursor.next(_))
			cb(_, item);
		} else profileItem.exportedObjects(_).toArray(_).forEach_(_, function(_, item) {
			cb(_, item);
		});
	}

	function _get_supported_locales(_) {
		var db = adminHelper.getCollaborationOrm(_);
		var localePrefs = db.fetchInstances(_, db.model.getEntity(_, "localePreference"));
		var localization = {};
		localePrefs.forEach_(_, function(_, e) {
			/*return { 
            e.code(_) 
            , 
            nativeName: e.description(_),
            englishName: e.description(_)
        };*/
			localization[e.code(_).toLowerCase()] = {};
		});
		return localization;
	}

exports.profileToJsonContent = function(_, profileInst, options) {
	options = options || {};
	tracer = tracer || options.tracer || (require("syracuse-main/lib/nodeconfig").config.export || {}).tracer;

	var localis = _get_supported_locales(_);
	//    console.log("LOCALIZATION: "+sys.inspect(localis)) ;

	if (!profileInst) {
		tracer && tracer("Export Profile is null");
		return;
	}

	var opt = options || {};
	var db = profileInst.endpoint(_).getOrm(_);
	var model = db.model;

	var items = profileInst.exportProfileItem(_).toArray(_);
	var exportObj = {
		$prototypes: {},
		$items: [],
		$localization: localis
	};

	var profItemDefs = {};

	items.forEach_(_, function(_, item) {
		var selection = {
			props: [],
			keys: []
		};

		var keysel = item.entityKeyAttribute(_).toArray(_);
		keysel.forEach_(_, function(_, el) {
			selection.keys.push(el.name(_));
			selection.props.push(el.name(_));
		});
		item.entityAttribute(_).toArray(_).forEach_(_, function(_, el) {
			if (selection.props.indexOf(el.name(_) == -1)) selection.props.push(el.name(_));
		});
		var name = (model.singularize(item.className(_)) || item.className(_)).toLowerCase();
		profItemDefs[name] = selection;

		//console.log("SELECTION for "+nam+ " ="+JSON.stringify(selection,null,2));

	});

	items.forEach_(_, function(_, item, idx) {
		var profItName = item.className(_);
		var profileIt = model.singularize(profItName);
		tracer && tracer("jsonExport exporting profile item :" + profItName);

		if (item.standardProfile(_)) {
			return _exportWithStandardProfile(_, exportObj, item, db, opt);
		}

		var allItems = this;

		tracer && tracer("jsonExport profile item definition for " + profileIt + ' :' + sys.inspect(profItemDefs[profileIt]));

		var entity = model.getEntity(_, profileIt);
		var itemProto = serializeProto(_, entity, profItemDefs, model, profileInst);
		tracer && tracer("jsonExport exported itemProto :" + sys.inspect(itemProto));
		exportObj.$prototypes[profileIt] = itemProto;

		var filter = item.filter(_);
		var all = item.exportAll(_);
		if (filter && filter !== "") {
			tracer && tracer("jsonExport filter: " + filter);
			var cursor = db.createCursor(_, entity, {
				sdataWhere: filter
			});
		} else if (all) {
			tracer && tracer("jsonExport exportAll ");
			var cursor = db.createCursor(_, entity);
		}

		if ((filter && filter !== "") || all) {
			var inst;
			while (inst = cursor.next(_)) {
				var exportItem;

				exportItem = objSerialize(_, inst, profItemDefs, model, profileIt, profileInst, exportObj.$localization);
				if (exportItem) {
					//tracer && tracer("jsonExport serialized object :" + sys.inspect(exportItem));
					//exportObj.$items.push(exportItem);
					exportObj.$items.push(exportItem);
				}
			};
			return;
		}
		var exportedObjs = item.exportedObjects(_).toArray(_);
		tracer && tracer("jsonExport " + exportedObjs.length + " objects to export ");
		exportedObjs.forEach_(_, function(_, ob, idx) {
			tracer && tracer("jsonExport object id: " + ob.$uuid);

			var inst = db.fetchInstance(_, entity, ob.$uuid);
			var exportItem;
			exportItem = objSerialize(_, inst, profItemDefs, model, profileIt, profileInst, exportObj.$localization);
			//tracer && tracer("exportItem: "+sys.inspect(exportItem)) ;
			if (exportItem) {
				//tracer && tracer("jsonExport serialized object :" + sys.inspect(exportItem));
				exportObj.$items.push(exportItem);
			} else tracer && tracer("serialization of" + ob.$uuid + "returned null");
		});
	});
	//tracer && tracer("jsonExport exportObj :" + JSON.stringify(exportObj,null,2));
	return exportObj;
}

exports.jsonExport = function(_, profileInst, options) {
	var exportObj = exports.profileToJsonContent(_, profileInst, options);
	var opt = options || {};
	opt.stringifySpace = opt.beautify ? "\t" : null;
	var result;
	if (!profileInst.$diagnoses || !profileInst.$diagnoses.some(function(d) {
		return (d.$severity || d.severity) === "error"
	})) {
		//console.log("opt.targetType: "+opt.targetType) ;
		result = _exportTargetsMap[opt.targetType || "download"](_, exportObj, opt);
		opt.$diagnoses && opt.$diagnoses.push({
			$severity: "success",
			$message: locale.format(module, "exportCompleted", exportObj.$items.length)
		});
	} else result = profileInst;
	//
	return result;
}

function serializeProto(_, entity, profItemDefs, model, profileInst) {
	var clnam = entity.className.toLowerCase();
	tracer && tracer("jsonExport serializing prototype for profile item " + clnam);
	var keys = profItemDefs[clnam].keys;
	tracer && tracer("jsonExport: keys: " + sys.inspect(keys));

	var selection = profItemDefs[clnam].props;
	var proto = {};
	if (profItemDefs[clnam].keys.length === 1) {
		var prop = entity.$properties[keys[0]];
		if (prop && prop.$isLocalized) proto["$key"] = keys[0] + '.' + locale.current;
		else if (prop || entity.$relations[keys[0]]) proto["$key"] = keys[0];
	} else if (keys.length > 1) {
		var lockeys = keys.map_(_, function(_, k) {
			var prop = entity.$properties[k];
			if (prop && prop.$isLocalized) return k + '.' + locale.current;
			else if (prop || entity.$relations[k]) return k;
		});
		proto["$key"] = lockeys;
	}
	tracer && tracer("jsonExport: attributes selection: " + sys.inspect(selection));

	selection.forEach_(_, function(_, p) {
		var prop = entity.$properties[p];
		if (prop && prop.$isLocalized) {
			if (!proto.$localized) proto.$localized = [];
			proto.$localized.push(p);
		}
	});

	flows.eachKey(_, entity.$relations, function(_, rel, relation) {

		if (selection.length > 0 && selection.indexOf(rel) == -1) {

			if (relation.$isMandatory) {
				tracer && tracer("WARNING!!!!!! " + rel);
				profileInst.$addDiagnose("warning", //
				locale.format(module, "mandatoryRelationProperty", rel, entity.className));
			}
			return;
		}
		tracer && tracer("jsonExport relation " + rel + " to add");
		var name = relation.targetEntity.name.toLowerCase();

		if (!profItemDefs[name]) {
			profileInst.$addDiagnose("error", locale.format(module, "missingProfItem", name));
			return;
		}

		tracer && tracer("exporting prototype for relation " + name);
		var entityRel = model.getEntity(_, relation.targetEntity.name);
		if (relation.isChild) {
			tracer && tracer(name + " is a child relation,serializing it's proptotype recursively ");

			proto[rel] = serializeProto(_, entityRel, profItemDefs, model, profileInst);
			//tracer && tracer("jsonExport: exporting relation proto: " + sys.inspect(proto[rel]));
		} else {
			proto[rel] = {};
			var relkeys = profItemDefs[name].keys;
			if (relkeys.length === 1) {

				var prop = entityRel.$properties[relkeys[0]];
				if (prop && prop.$isLocalized) proto[rel]["$key"] = relkeys[0] + '.' + locale.current;
				else if (prop || entityRel.$relations[relkeys[0]]) proto[rel]["$key"] = relkeys[0];
			} else if (relkeys.length > 1) {
				var keys = relkeys.map_(_, function(_, k) {
					var prop = entityRel.$properties[k];
					if (prop && prop.$isLocalized) return k + '.' + locale.current;
					else if (prop || entityRel.$relations[k]) return k;
				});
				proto[rel]["$key"] = relkeys;
			}
		}
	});

	tracer && tracer("Pproto for profile item " + clnam + sys.inspect(proto));
	return proto;
}

function refSerialize(_, targetEntity, data, profItemDefs, model, profileInst, localization) {

	//tracer && tracer("DATA: "+sys.inspect(data));
	function serializeProperty(_, prop, property) {
		tracer && tracer("jsonExport: exporting property: " + prop);

		if (propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
			if (property.$isMandatory) profileInst.$addDiagnose("warning", "mandatoryRelationProperty", prop, targetEntity.$type)
			else tracer && tracer("JsonExport: not selected property:" + prop);
			return;
		}
		//if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
		if (property.isExternalStorage() && !(data[prop](_) && data[prop](_).fileExists(_))) {
			tracer && tracer("jsonExport: property ExternalStorage:" + prop);
			return;
		}

		if (property.$isLazy || property.isExternalStorage()) {
			tracer && tracer("jsonExport: lazy property:" + prop);
		} else if (property.$isLocalized) {
			var locales = instance.getPropAllLocales(_, prop);

			if (locales) {
				//console.log("LOCALES: "+sys.inspect(locales)) ;
				resource[prop] = _getLocalizationCode(_, prop, instance);
				//console.log("resultat de _getLocalizationCode: "+resource[prop]) ; 
				// console.log("localization: "+JSON.stringify(localization)) ;
				//console.log("localization code of prop "+prop+":"+localization[resource[prop]]) ;

				flows.eachKey(_, localization, function(_, lang) {
					if (!(localization[lang][resource[prop]])) {
						//console.log("localization["+resource[prop]+"] is null or undefined" ) ;
						localization[lang][resource[prop]] = locales[lang] || locales["default"];
						//console.log("locales['en-us']: "+locales['en-us']) ;
					}

					//console.log("Localization :"+JSON.stringify(localization)) ;

					tracer && tracer("jsonExport: localized property " + prop + ' :' + resource[prop]);
				});
			}

		} else {
			tracer && tracer("property:" + prop);
			// ????????????? c'ets different qd c'ets null ou undefined ???
			if (!data[prop](_)) tracer && tracer("prop value: " + sys.inspect(data[prop](_)));
			resource[prop] = resourceHelpers.formatValue(property, data[prop](_));
		}
	}

	var instance = data;
	var localizObj = localization;
	var resource = {};

	if (!targetEntity) {
		tracer && tracer("jsonExport:null target ");
		return null;
	}

	tracer && tracer("jsonExport: serializing reference ");

	if (!data) {
		tracer && tracer("data null"); //?????????
		return null;
	}

	var propSelection = profItemDefs[targetEntity.name.toLowerCase()].props;
	var keySelection = profItemDefs[targetEntity.name.toLowerCase()].keys;

	console.log("propSelection : " + sys.inspect(propSelection));

	if (!keyControl_(_, data, keySelection)) {
		tracer && tracer("error raised : null key");
		profileInst.$addDiagnose("error", locale.format(module, "controlKeys", keySelection, targetEntity.$type));
		return null;
	};

	flows.eachKey(_, targetEntity.$properties, serializeProperty);
	tracer && tracer("the  relations of the relation ");
	flows.eachKey(_, targetEntity.$relations, function(_, rel, relation) {
		tracer && tracer("relation : " + rel);
		var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
		if (inv && inv.isChild) {
			return;
		}
		if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
			return;
		}
		var reltype;
		if (relation.isPlural) reltype = model.singularize(relation.$type);
		else reltype = relation.$type;
		if (!profItemDefs[reltype.toLowerCase()]) {
			profileInst.$addDiagnose("warning", locale.format(module, "missingProfItem", reltype));
			return;
		}
		var propselNames = profItemDefs[reltype.toLowerCase()].props;

		var keysel = profItemDefs[reltype.toLowerCase()].keys;

		if (relation.isPlural) {
			tracer && tracer("JsonExport: plural relation ");
			var val = data[rel](_);
			if (!val) {
				tracer && tracer(" relation " + rel + " is undefined");
				return null;
			}
			var collData = val.toArray(_, true);

			if (!collData.length) {
				tracer && tracer("empty collection"); //????????NULL
				return null;
			}
			tracer && tracer("Collection");
			resource[rel] = [];
			if (relation.isChild) {
				tracer && tracer("Child");
				collData.forEach_(_, function(_, elt) {
					var serialized = refSerialize(_, val._relMeta.targetEntity, elt, profItemDefs, model, profileInst, localization);
					if (serialized) {
						// tracer && tracer(rel + " is serialized" + JSON.stringify(serialized, null, 2));
						resource[rel].push(serialized);
					}
				});
			} else {
				tracer && tracer("jsonExport: reference");
				collData.forEach_(_, function(_, elt) {
					if (keysel && keysel.length === 1) {

						var prop = relation.targetEntity.$properties[keysel[0]];
						if (prop.$isLocalized) {
							console.log("RELATION " + rel + " is localised");
							//resource[rel].push(elt[keysel[0]](_));
							var locCode = keysel[0] + '_' + elt.$uuid;
							resource[rel].push(locCode);

							//flows.eachKey(_,localization , function (_, lang ) {
							if (!localization[locale.current][locCode]) localization[locale.current][locCode] = elt[keysel[0]](_);
							//});
						} else resource[rel].push(elt[keysel[0]](_));
					} else {
						var it = {};
						keysel.forEach_(_, function(_, k) {
							//tracer && tracer("value: " + elt[k](_));

							// it[k] = elt[k](_);
							var prop = relation.targetEntity.$properties[k];
							if (prop && prop.$isLocalized) {
								var locCode = k + '_' + elt.$uuid;
								it[k] = locCode;
								if (!localization[locale.current][locCode]) localization[locale.current][locCode] = elt[k](_);
							} else it[k] = elt[k](_);
						});
						resource[rel].push(it);
					}
				});
			}

		} else {
			tracer && tracer("jsonExport: Single relation");
			var val = data[rel](_);
			if (!val) {
				tracer && tracer("data is null for this relation");
				return;
			}
			if (relation.isChild) {
				tracer && tracer("jsonExport: Child relation");
				var serialized = refSerialize(_, val._relMeta.targetEntity, val, profItemDefs, model, profileInst, localization);
				if (serialized) {
					resource[rel] = serialized;
					//tracer && tracer("jsonExport: " + rel + " is serialized: " + JSON.stringify(serialized, null, 2));
				}
			} else {
				tracer && tracer("jsonExport: reference");
				if (keysel && keysel.length === 1) {
					if (!val[keysel[0]](_)) {
						profileInst.$addDiagnose("error", locale.format(module, "nullKeyValue", keysel[0], reltype));
						tracer && tracer("null key");
					}
					var prop = relation.targetEntity.$properties[keysel[0]];

					if (prop.$isLocalized) {
						console.log("RELATION " + rel + " is localised");
						//resource[rel].push(val[keysel[0]](_));
						var locCode = keysel[0] + '_' + val.$uuid;
						resource[rel] = locCode;
						//resource[rel].push(locCode);
						if (!localization[locale.current][locCode]) localization[locale.current][locCode] = val[keysel[0]](_);
					} else resource[rel] = val[keysel[0]](_);
				} else if (keysel && keysel.length > 1) {

					var it = resource[rel] = {};
					keysel.forEach_(_, function(_, k) {
						if (val[k](_)) {
							var prop = relation.targetEntity.$properties[k];
							if (prop && prop.$isLocalized) {
								var locCode = k + '_' + val.$uuid;
								it[k] = locCode;
								if (!localization[locale.current][locCode]) localization[locale.current][locCode] = val[k](_);
							} else it[k] = val[k](_);
						}

					});
				}
			}
		}
	});
	// tracer && tracer( "RESOURSE: " + JSON.stringify(resource,null,2)) ; 
	return resource;
}

function keyControl_(_, instance, keySelection) {
	var errorKey = false;
	keySelection.forEach_(_, function(_, key) {
		var parts = key.split('.');

		if (parts && parts[1]) { //localizedProperty
			var allLocales = instance.getPropAllLocales(_, parts[0]);
			//tracer && tracer("ALL LOCALES: "+sys.inspect(allLocales) ) ;
			if (!allLocales || !allLocales[parts[1].toLowerCase()]) {
				errorKey = true;
				tracer && tracer("jsonExport: key control fails for localized property");
			}
		} else if (!(instance[key](_))) {
			tracer && tracer("jsonExport: key control fails");
			errorKey = true;
		} else {
			//tracer && tracer("key contro instance[key](_)"+ sys.isnpect(instance[key](_))) ;
			tracer && tracer("jsonExport: key control pass");
			errorKey = false;
			return;
		}
	});
	//tracer && tracer("controlKey_ RETURNS "+(!errorKey)) ;
	return (!errorKey);
}

function _getLocalizationCode(_, prop, instance) {
	var code = prop + '_' + instance.$uuid;
	return code;
}

function objSerialize(_, instance, profItemDefs, model, type, profileInst, localization) {

	function serializeProp(_, prop, property) {
		console.log("jsonExport PROP : " + prop);
		if (propSelection.length > 0 && propSelection.indexOf(prop) == -1) {
			if (property.$isMandatory) profileInst.$addDiagnose("warning", locale.format(module, "mandatoryRelationProperty", prop, type));
			return;
		};
		if (instance[prop](_) == 'undefined') {
			tracer && tracer("jsonExport: " + prop + "is undefined");
			return;
		}
		if (instance[prop](_) == 'null') {
			tracer && tracer("jsonExport: " + prop + " is null");
			resource[prop] = null;
			return;
		}
		if (property.isExternalStorage() && !(instance[prop](_) && instance[prop](_).fileExists(_))) {
			tracer && tracer("property ExternalStorage:" + prop);
			return;
		}
		if (property.$isLazy || property.isExternalStorage()) {
			tracer && tracer("jsonExport: lazy property" + prop);
		} else if (property.$isLocalized) {
			tracer && tracer("jsonExport: localized property" + prop);
			var locales = instance.getPropAllLocales(_, prop);
			if (locales) {
				//console.log("LOCALES: "+sys.inspect(locales)) ;
				resource[prop] = _getLocalizationCode(_, prop, instance);
				//console.log("resultat de _getLocalizationCode: "+resource[prop]) ; 
				// console.log("localization: "+JSON.stringify(localization)) ;
				//console.log("localization code of prop "+prop+":"+localization[resource[prop]]) ;

				flows.eachKey(_, localization, function(_, lang) {
					if (!(localization[lang][resource[prop]])) {
						//console.log("localization["+resource[prop]+"] is null or undefined" ) ;
						localization[lang][resource[prop]] = locales[lang] || locales["default"];
						//console.log("locales['en-us']: "+locales['en-us']) ;
					}

					//console.log("Localization :"+JSON.stringify(localization)) ;

					tracer && tracer("jsonExport: localized property: " + resource[prop]);
				});
			}
		} else {
			resource[prop] = resourceHelpers.formatValue(property, instance[prop](_));
			tracer && tracer("jsonExport:  property: " + JSON.stringify(resource[prop]));
		}

	};

	var propSelection = profItemDefs[type.toLowerCase()].props;
	var keySelection = profItemDefs[type.toLowerCase()].keys;

	//console.log("propSelection : "+sys.inspect(propSelection)) ;

	if (!instance) return null;
	if (!keyControl_(_, instance, keySelection)) {
		tracer && tracer("error raised : null key");
		profileInst.$addDiagnose("error", locale.format(module, "controlKeys", keySelection, type));
		//tracer && tracer(sys.inspect("DIAGNOSES: "+ profileInst.getAllDiagnoses(_))) ;
		var diagnoses = [];
		profileInst.getAllDiagnoses(_, diagnoses);
		tracer && tracer("DIAGNOSES: " + sys.inspect(diagnoses));

		return null;
	};

	var meta = instance._meta;
	var resource = {
		$type: type
	};
	tracer && tracer('props traversing ');

	flows.eachKey(_, meta.$properties, serializeProp);

	//tracer && tracer(' Relations traversing');
	flows.eachKey(_, meta.$relations, function(_, rel, relation) {
		tracer && tracer("jsonExport RELATION: " + rel);
		if (propSelection.length > 0 && propSelection.indexOf(rel) == -1) {
			//tracer && tracer("propSelection "+sys.inspect(propSelection));
			if (rel.$isMandatory) profileInst.$addDiagnose(locale.format(module, "mandatoryRelationProperty", rel, type))
			return;
		}

		var inv = relation.$inv && relation.targetEntity.$relations[relation.$inv];
		if (inv && inv.isChild) return;

		var reltype;

		if (relation.isPlural) reltype = model.singularize(relation.$type);
		else reltype = relation.$type; //helpers.string.pluralize(relation.$type) // targetEntity.name ;

		if (!profItemDefs[reltype.toLowerCase()]) {
			//tracer && tracer("profItemDefs: "+JSON.stringify(profItemDefs,null,2)) ;
			profileInst.$addDiagnose("error", locale.format(module, "missingProfItem", reltype));;
			//tracer && tracer("no profileItem definition for "+reltype ) ;
			return;
		}
		var propselNames = profItemDefs[reltype.toLowerCase()].props;
		var keysel = profItemDefs[reltype.toLowerCase()].keys;

		if (!keysel || !keysel.length) {
			profileInst.$addDiagnose("error", locale.format(module, "missingKeys", reltype));
			return;
		}

		if (relation.isPlural) {
			tracer && tracer("jsonExport: plural relation");
			var val = instance[rel](_);
			//var targ=val.targetEntity;
			var collData = val.toArray(_, true);

			if (!collData.length) return null;

			tracer && tracer("jsonExport: Collection");
			resource[rel] = [];
			if (relation.isChild) {
				tracer && tracer("jsonExport: child relation");
				collData.forEach_(_, function(_, elt) {
					//tracer && tracer("ligne 498: calling refSerialize") ;
					var serialized = refSerialize(_, relation.targetEntity, elt, /*propselNames,keysel,*/ profItemDefs, model, profileInst, localization);
					//tracer && tracer("RELATION "+rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
					if (!serialized) return;
					resource[rel].push(serialized);
				});
			} else {
				tracer && tracer("jsonExport: reference");
				collData.forEach_(_, function(_, elt) {
					if (keysel && keysel.length === 1) {
						if (!elt[keysel[0]](_)) //notValuedkey
						profileInst.$addDiagnose("error", locale.format(module, "notValuedkey", keysel[0]));
						else {
							var prop = relation.targetEntity.$properties[keysel[0]];

							if (prop.$isLocalized) {
								console.log("RELATION " + rel + " is localised");
								//resource[rel].push(elt[keysel[0]](_));
								var locCode = keysel[0] + '_' + elt.$uuid;
								resource[rel].push(locCode);
								if (!localization[locale.current][locCode]) localization[locale.current][locCode] = elt[keysel[0]](_);
							} else resource[rel].push(elt[keysel[0]](_));

						}
					} else {
						var it = {};
						var proto = {};
						keysel.forEach_(_, function(_, k) {
							if (elt[k](_)) {
								var prop = relation.targetEntity.$properties[k];
								if (prop && prop.$isLocalized) {
									var locCode = k + '_' + elt.$uuid;
									it[k] = locCode;
									if (!localization[locale.current][locCode]) localization[locale.current][locCode] = elt[k](_);
								} else it[k] = elt[k](_);
							}
						});
						resource[rel].push(it);
					}
				});
			}
		} else {
			tracer && tracer("jsonExport: singular relation");
			var val = instance[rel](_);
			if (relation.isChild) {
				tracer && tracer("jsonExport: child relation");
				var serialized = refSerialize(_, relation.targetEntity, val, /*propselNames,keysel,*/ profItemDefs, model, profileInst, localization);
				//tracer && tracer("jsonExport: "+rel+" is serialized"+ JSON.stringify(serialized,null,2)) ;
				resource[rel] = serialized;
			} else if (!val) {
				tracer && tracer("relation is null");
				return;
				//resource[rel] =null ; ?????????????????
			} else if (keysel && keysel.length === 1) {
				//tracer && tracer("simple key "+keysel[0].name(_)) ;
				if (!val[keysel[0]](_)) profileInst.$addDiagnose("error", locale.format(module, "notValuedkey", keysel[0]));
				else {
					var prop = relation.targetEntity.$properties[keysel[0]];
					if (prop && prop.$isLocalized) {
						//resource[rel].push(elt[keysel[0]](_));
						var locCode = keysel[0] + '_' + val.$uuid;
						console.log("property " + keysel[0] + " of relation " + rel + " is localised; code: " + locCode);
						resource[rel] = locCode;

						tracer && tracer("resource[" + rel + "]=" + sys.inspect(resource[rel]))

						if (!localization[locale.current][locCode]) localization[locale.current][locCode] = val[keysel[0]](_);
					} else resource[rel] = val[keysel[0]](_);
					tracer && tracer("resource[" + rel + "]=" + sys.inspect(resource[rel]))
				}
			} else {
				//tracer && tracer("list key") ;
				var it = resource[rel] = {};
				var error = true;
				keysel.forEach_(_, function(_, k) {
					// tracer && tracer("key: "+el.name(_)) ;
					//if (!val[k](_))
					//profileInst.$addDiagnose("error",  locale.format(module, "notValuedkey", keysel[0]) );

					if (val[k](_)) {
						var prop = relation.targetEntity.$properties[k];
						if (prop && prop.$isLocalized) {
							var locCode = k + '_' + val.$uuid;
							it[k] = locCode;
							if (!localization[locale.current][locCode]) localization[locale.current][locCode] = val[k](_);
						} else it[k] = val[k](_);
						error = false;
					}
				});
				if (error) profileInst.$addDiagnose("error", locale.format(module, "controlKeys", keysel, type));

			}
		}
	});

	//tracer && tracer( "RESOURSE: " + JSON.stringify(resource)) ; 
	return resource;
}

function _makePrototype(meta, entity, makeLocalized) {
	var proto = Object.keys(meta.$relations || {}).reduce(function(prev, k) {
		var relMeta = entity && entity.$relations && entity.$relations[k];
		prev[k] = _makePrototype(meta.$relations[k], relMeta && relMeta.targetEntity, makeLocalized);
		return prev;
	}, {
		$key: meta.$key
	});
	if (makeLocalized) {
		var loc = (meta.$properties || []).filter(function(propName) {
			var p = entity && (entity.$properties || {})[propName];
			return p && p.$isLocalized;
		});
		if (loc && (loc.length > 0)) proto.$localized = loc;
	}
	return proto;
}

function _serialize(_, result, stdProfile, entity, item, options) {
	function _getProp(_, pName, inst, makeLoc) {
		var p = inst.getEntity(_).$properties[pName];
		if (!p) return null;
		if (p.$isLocalized) {
			var locValue = inst.getPropAllLocales(_, pName);
			if (makeLoc && locValue && result.$localization) {
				var id = _getLocalizationCode(_, pName, inst);
				Object.keys(result.$localization).forEach(function(lang) {
					result.$localization[lang][id] = locValue[lang];
				});
				return id;
			} else return locValue;
		} else return resourceHelpers.formatValue(p, inst[pName](_));
	}

	function _onRelationItem(_, r, relDef, relItem, cb) {
		// opposite object should be exported if: isChild || has $properties || has $relations
		if (r.isChild) {
			// export relation object
			cb(_serialize(_, result, relDef, relItem.getEntity(_), relItem, options));
		} else {
			// export keys
			var keys = Array.isArray(relDef.$key) ? relDef.$key : [relDef.$key];
			var keysObj = keys.reduce_(_, function(_, prev, k) {
				var p = _getProp(_, k, relItem);
				if (p) {
					prev = prev || {};
					prev[k] = p;
				}
				return prev;
			}, null);
			if (keysObj) {
				cb(keysObj);
				if (relDef.$properties || relDef.$relations) {
					var e = relItem.getEntity(_);
					// prototype
					result.$prototypes[e.name] = _makePrototype(relDef, e, (result.$localization != null));
					// push the serialization before the current object
					result.$items.push(_serialize(_, result, relDef, e, relItem, options));
				}
			} else {
				// TODO: better format of error message
				options.$diagnoses && options.$diagnoses.push({
					$severity: "warning",
					$message: locale.format(module, "notValuedkey", keys[0])
				});
			}
		}
	}
	//
	var res = {
		$type: item.getEntity(_).name
	};
	var std = stdProfile;
	options = options || {};
	// serialize props
	(std.$properties || []).forEach_(_, function(_, pName) {
		res[pName] = _getProp(_, pName, item, true);
	});
	// force keys serialization
	// TODO: this forces property keys serialization. Should also force relations key serialization
	if (std.$key) {
		var keys = Array.isArray(std.$key) ? std.$key : [std.$key];
		//        var hasKey = false;
		keys.forEach_(_, function(_, pName) {
			res[pName] = _getProp(_, pName, item);
			//            hasKey = hasKey || (res[pName] != null);
		});
		/*        if(!hasKey)
        	options.$diagnoses && options.$diagnoses.push({
        		severity: "warning",
        		message: locale.format(module, "controlKeys", keys, res.$type)
        	});*/
	}
	// relations
	Object.keys(std.$relations || {}).some_(_, function(_, rName) { // use some instead forEach to be able to stop the loop
		var r = entity.$relations[rName];
		if (!r) return false;
		var relDef = std.$relations[rName];
		if (r.isPlural) {
			var filter = relDef.$filter ? Parser.parse(relDef.$filter) : null;
			var resItems = res[rName] = [];
			item[rName](_).toArray(_).forEach_(_, function(_, relItem) {
				relItem.match(_, filter) && _onRelationItem(_, r, relDef, relItem, function(it) {
					resItems.push(it);
				});
			});
			if ((resItems.length === 0) && (relDef.$exportParentIfEmpty === false)) {
				// this object shouldn't be exported
				res = null;
				return true;
			}
		} else {
			var relItem = item[rName](_);
			if (relItem) {
				_onRelationItem(_, r, relDef, relItem, function(it) {
					res[rName] = it;
				});
			} else res[rName] = null;
		}
		return false;
	});
	//
	return res;
}

function _exportWithStandardProfile(_, result, profileItem, db, options) {
	var entity = profileItem.getExportedEntity(_);
	var profile = profileItem._parent;
	if (!entity) {
		profile.$addDiagnose("warning", locale.format(module, "entityNotFound", profileItem.className(_), profile.endpoint.description(_)));
		return;
	}
	var exportMeta = profileItem.getStandardProfile(_);
	if (!exportMeta) {
		profile.$addDiagnose("warning", locale.format(module, "exportMetaNotFound", profileItem.className(_)));
		return;
	}
	//
	result.$prototypes[entity.name] = _makePrototype(exportMeta, entity, (result.$localization != null));
	//
	profile.$diagnoses = profile.$diagnoses || [];
	_iterateProfileItem(_, profileItem, db, entity, function(_, item) {
		var r = _serialize(_, result, exportMeta, entity, item, {
			$diagnoses: (options && options.$diagnoses) || profile.$diagnoses
		});
		r && result.$items.push(r);
	});
}