"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
//
var tracer = console.log;
//var tracer = null;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_test");

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest",
		headers: {
			"accept-language": "fr,fr-fr",
		}
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	tracer && tracer("Get cookie headers (46): "+sys.inspect(response.headers));
	acceptLanguage = response.headers["content-language"] || acceptLanguage;
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_test/" + url,
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_test");
}

var doStop = false;
module("syracuseImportTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_test"].hostname, endPoint.datasets["mongodb_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

function hasErrors(body) {
	var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
		return diag.severity == "error";
	});
	if(!hasErr) {
		for(var key in body) {
			if(typeof body[key] === "object")
				hasErr = hasErr || hasErrors(body[key]);
		};
	}
	//
	return hasErr;
}

var cookie; 

asyncTest("http import test", 5, function(_) {
	cookie = getCookie(_, "guest", "guest");
	// create a document tag
	var desc = uuid.generate();
	var body = post(_, cookie, "$import", {
		$prototypes: {
			menuCategory: {
				$key: "description"
			}
		},
		$items: [{
			$type: "menuCategory",
			description: desc
		}]
	});
	tracer && tracer("body (184): "+sys.inspect(body));
	ok(onlyInfo(body.$diagnoses || []), "Imported ok");
	// try to find it
	body = get(_, cookie, "menuCategories(description eq \"" + desc + "\")?representation=menuCategory.$details");
	tracer && tracer("body (189): "+sys.inspect(body));
	strictEqual(body.description, desc, "Retrieved created object ok");
	//
	start();
});

asyncTest("stop server", 0, function(_) {
	syracuse.server.close();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
