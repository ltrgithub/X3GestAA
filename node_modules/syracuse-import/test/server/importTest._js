"use strict";

var helpers = require('syracuse-core').helpers;
var uuid = helpers.uuid;
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('mongodb');
var ez = require('ez-streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
//
var tracer; // = console.log;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

var testAdmin = require('syracuse-core').apis.get('test-admin');
var endPoint = testAdmin.modifyCollaborationEndpoint("mongodb_test");

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/mongodb_test/";
var acceptLanguage = "fr,fr-fr";

function getCookie(_, login, pass) {
	var response = new ez.devices.http.client({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "admin",
		password: pass || "admin",
		headers: {
			"accept-language": "fr,fr-fr",
		}
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	tracer && tracer("Get cookie headers (46): " + sys.inspect(response.headers));
	acceptLanguage = response.headers["content-language"] || acceptLanguage;
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = ez.devices.http.client({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_test/" + url,
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = ez.devices.http.client({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_test");
}

QUnit.module(module.id, {});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_test"].hostname, endPoint.datasets["mongodb_test"].port, {});
	var db = testAdmin.newMongoDb(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

function onlyInfo(diags) {
	return testAdmin.onlyInfo(diags);
}

function hasErrors(body) {
	var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
		return diag.severity == "error";
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key]);
		};
	}
	//
	return hasErr;
}

var cookie;

asyncTest("http import test", 5, function(_) {
	cookie = getCookie(_, "admin", "admin");
	// create a document tag
	var desc = uuid.generate();
	var body = post(_, cookie, "$import", {
		$prototypes: {
			menuCategory: {
				$key: "description"
			}
		},
		$items: [{
			$type: "menuCategory",
			description: desc
		}]
	});
	tracer && tracer("body (184): " + sys.inspect(body));
	ok(onlyInfo(body.$diagnoses || []), "Imported ok");
	// try to find it
	body = get(_, cookie, "menuCategories(description eq \"" + desc + "\")?representation=menuCategory.$details");
	tracer && tracer("body (189): " + sys.inspect(body));
	strictEqual(body.description, desc, "Retrieved created object ok");
	//
	start();
});