"use strict";

var fspath = require('path');
var ez = require('ez-streams');
var locale = require('syracuse-core/lib/locale');
var fs = require('streamline-fs');
var url = require('url');

var staticDispatcher = require('streamline-static/lib/staticProvider').staticProvider({
	root: fspath.join(__dirname, '../..'),
	maxAge: 3600 * 1000
});

var requireDispatcher = require('streamline-require/lib/server/require').dispatcher({
	getResources: locale.getResourcesHook
});

function notFound(_, request, response) {
	response.writeHead("404", {});
	return response.end("Resource not found: " + request.url);
}

var ME = {
	user: {
		firstName: "John",
		lastName: "Doe",
	},
	$links: {
		$bookmarks: {}
	}
};

function loadJson(_, item) {
	return JSON.parse(fs.readFile(__dirname + '/../data/' + item + '.json', 'utf8', _));
}

var jsonRoutes = {
	'user-profile': function(_, data) {
		return ME;
	},
	'pageTemplate': function(_, data, query) {
		return loadJson(_, 'test-data');
	},
};

function actionDispatcher(_, request, response) {
	var action = request.url.split(/[\/\?]/)[2];
	var json = request.method == 'POST' ? JSON.parse(request.readAll(_)) : {};
	var route = jsonRoutes[action];
	if (!route) return notFound(_, request, response);
	response.writeHead(200, {
		"content-type": "application/json",
	});
	var result = route(_, json, url.parse(request.url, true).query);
	response.end(JSON.stringify(result), 'utf8');
}

function pageDispatcher(_, request, response) {
	response.writeHead(200, {
		"content-type": "application/json",
	});
	response.end(JSON.stringify(loadJson(_, "test-page")), 'utf8');
}

var routes = {
	require: requireDispatcher,
	page: pageDispatcher,
	action: actionDispatcher,
	"partner-license": staticDispatcher,
	"streamline-require": staticDispatcher,
	"syracuse-ui": staticDispatcher,
}

ez.devices.http.server(function(request, response, _) {
	console.log(request.url);
	if (request.url === '/') {
		var params = {
			url: "/partner-license/data/test-data.json?representation=test.$details",
		}
		params = Object.keys(params).map(function(key) {
			return key + '=' + encodeURIComponent(params[key]);
		}).join('&');
		response.writeHead(307, {
			location: '/partner-license/html/main.html?' + params,
		});
		return response.end();
	}
	var seg = request.url.split(/[\/\?]/)[1];
	var route = routes[seg] || notFound;

	route(_, request, response);
}, {}).listen(_, 8124);