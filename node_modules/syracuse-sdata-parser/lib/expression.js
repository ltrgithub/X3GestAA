"use strict";

exports.Expression = class Expression {
	constructor(config) {
		var self = this;

		self.children = null;
		if (config.operator) {
			self.type = "operator";
			self.value = config.operator;
			self.children = [];
			if (config.expression1) {
				self.children.push(config.expression1);
			}
			if (config.expression2) {
				self.children.push(config.expression2);
			}
		} else if (config.expressionType) {
			self.type = config.expressionType;
			self.value = config.value;
			if (self.type === "function") {
				self.children = [];
			}
		}
	}
	isPredicate() {
		switch (this.type) {
			case "operator":
				return this.value.isPredicate;
			case "identifier":
				return true; // don't know
			case "function":
				return true; // don't know -- will improve later
			case "literal":
				return false;
			default:
				throw new Error("invalid expression type: " + this.type);
		}
	}
	toString() {
		if (this.children == null) {
			return this.value.toString();
		}
		var sb = [];
		sb.push("[" + this.value.toString());
		for (var i = 0; i < this.children.length; i++) {
			sb.push(" " + this.children[i].toString());
		}
		sb.push("]");
		return sb.join('');
	}

};