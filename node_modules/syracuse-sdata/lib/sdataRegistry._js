"use strict";

var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers");
var applications = {};

var tracer; // = console.log;

exports.register = function(endpoints) {
	endpoints.forEach(function(endpoint) {
		if (typeof endpoint.contract === "string") endpoint.contract = require(endpoint.contract);
		// temporary hack to cope with contracts modules defined with module.exports = ... or exports.contract = ...
		// will clean up the contract definitions later
		if (!endpoint.contract.application && endpoint.contract) endpoint.contract = endpoint.contract.contract;
		if (!endpoint.contract.application) throw new Error("bad contract: " + endpoint.contract);
		var application = applications[endpoint.contract.application] || (applications[endpoint.contract.application] = {
			name: endpoint.contract.application,
			contracts: {}
		});
		var contract = application.contracts[endpoint.contract.contract] || (application.contracts[endpoint.contract.contract] = helpers.object.extend({
			name: endpoint.contract.contract,
			datasets: endpoint.datasets
		}, endpoint.contract));
		helpers.object.forEachKey(endpoint.datasets, function(name, ds) {
			ds.name = name;
			// nodejs stuff
			ds.hostname = ds.hostname || "localhost";
			ds.database = name;
			ds.port = ds.port || 3306;
			ds.login = ds.login || null; // must pass null rather than undefined
			ds.password = ds.password || null; // must pass null rather than undefined
			ds.dirty = true;
		});
	});
};
exports.applications = applications;

exports.getContract = function(application, contract, failIfNull) {
	var app = helpers.object.get(applications, application, failIfNull);
	return app && helpers.object.get(app.contracts, contract, failIfNull);
};

exports.getDataset = function(_, contract, datasetName) {
	if (contract.datasets && contract.datasets[datasetName]) return contract.datasets[datasetName];
	//
	var ep = adminHelper.AdminHelper.getEndpoint(_, {
		application: contract.application,
		contract: contract.contract,
		dataset: datasetName
	});
	if (ep) {
		if (!ep.applicationRef(_) || (ep.applicationRef(_).protocol(_) !== "syracuse")) throw new Error("Request of non Syracuse dataset");
		var dataset = ep.makeDataset(_);
		//
		contract.datasets[datasetName] = dataset;
		return dataset;
	}
	//
	return null;
};

exports.loadAllEndpoints = function(_) {
	var app = adminHelper.AdminHelper.getCollaborationApplication(_);
	if (!app) return;
	tracer && tracer("sdataRegistry.loadAllEndpoints collaboration application loaded");
	var eps = adminHelper.AdminHelper.getEndpoints(_, {
		jsonWhere: {
			applicationRef: app.$uuid
		}
	});
	tracer && tracer("sdataRegistry.loadAllEndpoints " + ((eps && eps.length) || 0) + " endpoints found");
	eps && eps.forEach_(_, function(_, ep) {
		tracer && tracer("sdataRegistry.loadAllEndpoints loading " + ep.dataset(_));
		if (!ep.applicationRef(_)) return;
		var appName = ep.applicationRef(_).application(_);
		var ctrName = ep.applicationRef(_).contract(_);
		var application = applications[appName] || (applications[appName] = {
			name: appName,
			contracts: {}
		});
		var contract = application.contracts[ctrName] || (application.contracts[ctrName] = {
			name: ctrName
		});
		contract.datasets = contract.datasets || {};
		contract.datasets[ep.dataset(_)] = contract.datasets[ep.dataset(_)] || ep.makeDataset(_);
	});
	tracer && tracer("sdataRegistry.loadAllEndpoints: endpoints loaded");
};