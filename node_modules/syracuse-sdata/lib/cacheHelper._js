"use strict";
var helpers = require('syracuse-core/lib/helpers');
var config = require('config'); // must be first syracuse require
var trace = console.log;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var serializer = require("syracuse-orm/lib/serializer");
var logConfig = config && config.edi && config.edi.log;




exports.CacheClass = helpers.defineClass(function(_, db, entityName) {
	trace && trace("create Cache Entity Class " + entityName);

	// getting the administration ORM

	this.db = db || adminHelper.getCollaborationOrm(_);
	// the metamodel is associated to the orm
	this.model = this.db.model;
	this.entityName = entityName || "dataCache";
	this.entity = this.model.getEntity(_, this.entityName);
	this.factory = this.entity.factory;
}, null, {
	getInstance: function(_, filter) {
		trace && trace("get instance filter=[" + filter && JSON.stringify(filter) + "]");

		var ent;
		if (filter != null && filter.length !== 0) {
			// fetchInstance(callback, entity, filter)
			ent = this.db.fetchInstance(_, this.entity, filter);
		}
		return ent;
	},
	getInstances: function(_, filter) {
		trace && trace("get instances filter=[" + filter && JSON.stringify(filter) + "]");

		var ent;
		if (filter != null && filter.length !== 0) {
			// fetchInstance(callback, entity, filter)
			ent = this.db.fetchInstances(_, this.entity, filter);
		} else {
			ent = this.db.fetchInstances(_, this.entity, {});
		}
		return ent;
	},
	createInstance: function(_) {
		trace && trace("create instance ");

		// create a new object, createInstance params are : (callback, initialDataJson, ormInstance)
		return this.factory.createInstance(_, null, this.db);
	},
	deleteInstance: function(_, filter) {
		trace && trace("delete instances filter=[" + filter && JSON.stringify(filter) + "]");

		var inst = this.getInstance(_, filter);
		inst && inst.deleteSelf();
	},
	dropAllInstance: function(_) {
		trace && trace("drop all instances ");
		var inst = this.getInstances(_);
		inst && inst.forEach_(_, function(_, item) {
			item && item.deleteSelf();
		});
	}
});