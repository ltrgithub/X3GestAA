"use strict";
const flows = require('streamline-runtime').flows;
const ez = require('ez-streams');
const config = require('config');
const lodash = require('lodash');

function baseUrl() {
	var etna = config.etna || {};
	return 'http://' + (etna.host || 'localhost') + ':' + (etna.port || 8125);
}

function connect(_, conf) {
	const request = ez.devices.http.client({
		url: baseUrl() + '/sessions',
		method: 'POST',
		'content-type': 'application/json',
	});
	request.writer.writeAll(_, JSON.stringify(conf));
	const response = request.response(_);
	if (response.statusCode !== 201) throw new Error("cannot create etna session, statusCode=" + response.statusCode);
	const location = response.headers.location;
	response.reader.readAll(_);
	const cookie = response.headers['set-cookie'];
	if (!cookie) throw new Error("etna cookie missing");
	return {
		location: location,
		cookie: cookie,
	};
}

function disconnect(_, location) {
	const response = ez.devices.http.client({
		url: location,
		method: 'DELETE',
	}).end().response(_);
	if (response.statusCode !== 204) throw new Error("cannot delete etna session, statusCodee=" + response.statusCode);
	response.reader.readAll(_);
}

exports.httpDispatch = function(_, conf, request, response) {
	const session = request.session;
	if (!session.etnaProxy) {
		session.etnaProxy = connect(_, conf);
		session.on('destroyed', function() {
			disconnect(flows.check, session.etnaProxy.location);
			session.etnaProxy = null;
		});
	}
	const req = ez.devices.http.client({
		url: baseUrl() + request.url,
		method: request.method,
		headers: lodash.extend({}, request.headers, {
			cookie: session.etnaProxy.cookie
		}),
	});
	request.reader.pipe(_, req.writer);
	const resp = req.response(_);
	if (!/etna\.session\.id\./.test(resp.headers['set-cookie'])) {
		session.etnaProxy = null;
		if (resp.statusCode < 400) throw new Error("etna cookie lost! statusCode=" + resp.statusCode);
	}
	// keep cookie private too this exchange.
	response.writeHead(resp.statusCode, lodash.omit(resp.headers, 'set-cookie'));
	resp.reader.pipe(_, response.writer);
};