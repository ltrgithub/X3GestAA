"use strict";

var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var util = require('util');

var TrackerResponse =exports.TrackerResponse =  helpers.defineClass(function() {
    this.status = 202;
    this.head = null;
    this.encoding = null;
    this.chunks = [];
}, null, {
    writeHead: function(status, head) {
        this.status = status;
        this.head = head;
    },
    write: function(_, data, encoding) {
        this.encoding = encoding;
        this.chunks.push(data);
    },
    end: function(data) {
        if (data) this.chunks.push(data);
    },
    finish: function(err) {
        if (err) {
            this.status = 500, this.head = {
                "content-type": "application/json"
            };
            this.encoding = "utf8", this.chunks = [JSON.stringify({
                $diagnoses: [{
                    severity: "error",
                    message: err.message
                }]
            })];
        }else {
        	this.status = 200;
        }
    },
    flush: function(_, response) {
        response.writeHead(this.status, this.head);
        for (var i = 0; i < this.chunks.length; i++) {
        	response.write(_, this.chunks[i], this.encoding);
        }
        response.end();
    }
});


var Tracker = exports.Tracker = helpers.defineClass(function(context, trackngId, dispatch) {
    this.trackngId = trackngId;
    	
    this.response = context.response;
    this.status = 202;
    this.done = false;
	this.location ;
	this.convStep;
	this.maxtry ;
	this.nbtry ;

    this.context = context;
	this.phase = "Starting";
	this.phaseDetail = null;
	this.progress = null;
	this.elapsedSeconds = null;
	this.remainingSeconds = null;
    this.pollingMillis = 1000;
    this.startTime = new Date().getTime();
	this.dispatch =dispatch;

   }, null, {
    reply: function(_, response) {
		if (!this.done ) {
			var currentTime = new Date().getTime();
			this.elapsedSeconds = currentTime - this.startTime;
			var headers = {
				"content-type": "application/json",
				location: this.location,
			}
			response.writeHead(this.status, headers);
			var body = {
				phase: this.phase,
				phaseDetail: this.phaseDetail,
				progress: this.progress,
				elapsedSeconds: this.elapsedSeconds,
				remainingSeconds: this.remainingSeconds,
				pollingMillis: this.pollingMillis,
			};
			response.write(_, JSON.stringify(body), "utf8");
			
			response.end();
		} else {
			this.response.flush(_, response);
		}
    },
	start: function(_){
		var self = this;
		this.dispatch(function(err) {
			self.done = true;
			self.phase = "Completed";
			self.response.finish(err);
		}, this.context);

		this.reply(_, this.originResponse);
	}
});


var trackers = exports.trackers = {};


exports.track = function(_, context, id) {
	switch(context.request.method.toLowerCase()) {
		case 'get':
			var tracker = trackers[id]; 
			if (!tracker) return context.reply(_, 404, "tracker not found: " + id); 
			tracker.reply(_, context.response);
			break;
		case 'delete':
			delete trackers[id];
			context.reply(_, 204);
			break;
		default:
			throw new Error("Bad method: "+context.request.method);
	}

}

exports.create = function( context, dispatch) {    
    var trackngId = context.parameters.trackngId;
    var response = context.response;
    var tracker = trackers[trackngId];
    if (tracker) {
    	throw new Error("Tracker already exists.");
    }
    context.response = new TrackerResponse();
    trackers[trackngId] = tracker = new Tracker(context, trackngId, dispatch);
	tracker.originResponse = response;
    context.tracker = tracker;
	return tracker;
}
