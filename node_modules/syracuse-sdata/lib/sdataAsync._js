"use strict";

var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var util = require('util');

var TrackerResponse = helpers.defineClass(function() {
    this.status = 202;
    this.head = null;
    this.encoding = null;
    this.chunks = [];
}, null, {
    writeHead: function(status, head) {
        this.status = status;
        this.head = head;
    },
    write: function(_, data, encoding) {
        this.encoding = encoding;
        this.chunks.push(data);
    },
    end: function(data) {
        if (data) this.chunks.push(data);
    },
    finish: function(err) {
        if (err) {
            this.status = 500, this.head = {
                "content-type": "application/json"
            };
            this.encoding = "utf8", this.chunks = [JSON.stringify({
                $diagnoses: [{
                    severity: "error",
                    message: err.message
                }]
            })];
        }else {
        	this.status = 200;
        }
    },
    flush: function(_, response) {
        response.writeHead(this.status, this.head);
        for (var i = 0; i < this.chunks.length; i++)
        response.write(_, this.chunks[i], this.encoding);
        response.end();
    }
});

var Tracker = helpers.defineClass(function(context, trackngId, dispatch) {
    var self = this;
    this.trackngId = trackngId;
    
	this.headers = {
		"content-type": "application/json",
		location: "/sdata/$trackers('" + this.trackngId + "')",
	}
	
    this.response = context.response;
    this.status = 202;
    this.done = false;
    
	this.phase = "Starting";
	this.phaseDetail = null;
	this.progress = null;
	this.elapsedSeconds = null;
	this.remainingSeconds = null;
    this.pollingMillis = 1000;

    this.startTime = new Date().getTime();
    
    dispatch(function(err) {
    	console.log("DISPATCH");
        self.done = true;
        self.phase = "Completed";
        self.response.finish(err);
    }, context);
}, null, {
    reply: function(_, response) {
        if (!this.done) {
        	console.log("RESPONSE");

        	var currentTime = new Date().getTime();
        	this.elapsedSeconds = currentTime - this.startTime;
        	
            response.writeHead(this.status, this.headers);
            
            var body = {
            	phase: this.phase,
            	phaseDetail: this.phaseDetail,
            	progress: this.progress,
            	elapsedSeconds: this.elapsedSeconds,
            	remainingSeconds: this.remainingSeconds,
                pollingMillis: this.pollingMillis,
            };
            response.write(_, JSON.stringify(body), "utf8");
            
            response.end();
        } else {
       		console.log("FLUSH");
            this.response.flush(_, response);
        }
    }
});

var trackers = exports.trackers = {};

exports.track = function(_, context, id) {
	console.log("TRACK");
	var tracker = trackers[id]; 
	if (!tracker) return context.reply(_, 404, "tracker not found: " + id); 
	tracker.reply(_, context.response);
}

exports.start = function(_, context, dispatch) {
	console.log("START");
    
    var trackngId = context.parameters.trackngId;
    var response = context.response;
    var tracker = trackers[trackngId];
    if (!tracker) {
        context.response = new TrackerResponse();
        trackers[trackngId] = tracker = new Tracker(context, trackngId, dispatch);
        context.tracker = tracker;
    }
    tracker.reply(_, response);
}