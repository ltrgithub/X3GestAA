"use strict";

var module = QUnit.module;
var baseUrl = "http://localhost:3004"
var port = 3004;
var helpers = require('syracuse-core/lib/helpers');
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var sys = require("util");
var forEachKey = helpers.object.forEachKey;

var tracer = console.log;
//var tracer = null;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var testData = require('../fixtures/testDB');
var testEndPoint = testData.endpoint;

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: 27017
	}
};

config.sdata.endpoints.push(testEndPoint);

var requestCount = 0;
var MAX_REQUESTS = 13;
var cookie;

var doStop = false;
module("sdataTest", {
	setup: function() {},
	teardown: function() {
//		if (requestCount == MAX_REQUESTS) {
		if (doStop) {
			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db(testEndPoint.datasets.test.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	console.log("dropping admin db");
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db("mongodb_admin_test", server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	
	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, adminUrl) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, headers) {
	var head = {
		cookie: cookie
	}
	headers && forEachKey(headers, function(key, value) {
		head[key] = value;
	});
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url,
		headers: head
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);
	try {
		return JSON.parse(resp);
	} catch (ex) {
		return resp;
	}
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/qunit/sdataTest/test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}
/*
asyncTest("environnement init", 5, function(_) {
	requestCount++;
	cookie = getCookie(_);
	//
	var body = post(_, cookie, "applications", {
		application: "qunit",
		contract: "sdataTest",
		protocol: "syracuse"
	}, 201);
	var appId = body.$uuid;
	console.log("environnement init body(1): "+sys.inspect(body, null, 4));
	//
	//
	start();
});
*/
asyncTest("various strings", 25, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "strings", {
		string: "01234567890123456789",
		stringTiny: "01234567890123456789",
		stringNormal: "01234567890123456789",
		string10: "0123456789",
		string100: "01234567890123456789",
		string1000: "01234567890123456789",
		stringNullable1: "01234567890123456789",
		stringNullable2: null
	});
	tracer && tracer("various strings (177) body: "+sys.inspect(body, null, 4));
	strictEqual(body.string, "01234567890123456789", "string roundtrip");
	strictEqual(body.stringTiny, "01234567890123456789", "string roundtrip");
	strictEqual(body.stringNormal, "01234567890123456789", "string roundtrip");
	strictEqual(body.string10, "0123456789", "string10 roundtrip");
	strictEqual(body.string100, "01234567890123456789", "string100 roundtrip");
	strictEqual(body.string1000, "01234567890123456789", "string1000 roundtrip");
	strictEqual(body.stringNullable1, "01234567890123456789", "stringNullable roundtrip");
	strictEqual(body.stringNullable2, null, "stringNullable  null roundtrip");
	strictEqual(body.stringDef1, "", "string default empty roundtrip");
	strictEqual(body.stringDef2, "a'b", "string default non empty roundtrip");
	strictEqual(body.stringDefNull, null, "string default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "strings('" + uuid + "')");
	strictEqual(body.string, "01234567890123456789", "string roundtrip");
	strictEqual(body.stringTiny, "01234567890123456789", "string roundtrip");
	strictEqual(body.stringNormal, "01234567890123456789", "string roundtrip");
	strictEqual(body.string10, "0123456789", "string10 roundtrip");
	strictEqual(body.string100, "01234567890123456789", "string100 roundtrip");
	strictEqual(body.string1000, "01234567890123456789", "string1000 roundtrip");
	strictEqual(body.stringNullable1, "01234567890123456789", "stringNullable roundtrip");
	strictEqual(body.stringNullable2, null, "stringNullable  null roundtrip");
	strictEqual(body.stringDef1, "", "string default empty roundtrip");
	strictEqual(body.stringDef2, "a'b", "string default non empty roundtrip");
	strictEqual(body.stringDefNull, null, "string default null roundtrip");
	start();
});
asyncTest("various booleans", 17, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "bools", {
		bool1: true,
		bool2: false,
		boolNullable1: false,
		boolNullable2: null
	});
	strictEqual(body.bool1, true, "bool true roundtrip");
	strictEqual(body.bool2, false, "bool false roundtrip");
	strictEqual(body.boolNullable1, false, "bool nullable false roundtrip");
	strictEqual(body.boolNullable2, null, "bool null roundtrip");
	strictEqual(body.boolDef1, false, "bool default roundtrip");
	strictEqual(body.boolDef2, true, "bool default true roundtrip");
	strictEqual(body.boolDefNull, null, "bool default null roundtrip");

	var uuid = body.$uuid;
	var body = get(_, cookie, "bools('" + uuid + "')");
	strictEqual(body.bool1, true, "bool true roundtrip");
	strictEqual(body.bool2, false, "bool false roundtrip");
	strictEqual(body.boolNullable1, false, "bool nullable false roundtrip");
	strictEqual(body.boolNullable2, null, "bool null roundtrip");
	strictEqual(body.boolDef1, false, "bool default roundtrip");
	strictEqual(body.boolDef2, true, "bool default true roundtrip");
	strictEqual(body.boolDefNull, null, "bool default null roundtrip");
	start();
});
asyncTest("various integers", 37, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "integers", {
		int1: 0,
		int2: 1,
		intTiny1: 127,
		intTiny2: -128,
		intSmall1: 0x7fff,
		intSmall2: -0x7fff - 1,
		intMedium1: 0x7fffff,
		intMedium2: -0x7fffff - 1,
		intNormal1: 0x7fffffff,
		intNormal2: -0x7fffffff - 1,
		intBig1: 0x003fffffffffffff,
		intBig2: -0x003fffffffffffff - 1,
		intNullable1: 0,
		intNullable2: null
	});
	strictEqual(body.int1, 0, "integer 0 roundtrip");
	strictEqual(body.int2, 1, "integer 1 roundtrip");
	strictEqual(body.intTiny1, 127, "integer tiny max roundtrip");
	strictEqual(body.intTiny2, -128, "integer tiny min roundtrip");
	strictEqual(body.intSmall1, 0x7fff, "integer small max roundtrip");
	strictEqual(body.intSmall2, -0x7fff - 1, "integer small min roundtrip");
	strictEqual(body.intMedium1, 0x7fffff, "integer medium max roundtrip");
	strictEqual(body.intMedium2, -0x7fffff - 1, "integer medium min roundtrip");
	strictEqual(body.intNormal1, 0x7fffffff, "integer normal max roundtrip");
	strictEqual(body.intNormal2, -0x7fffffff - 1, "integer normal min roundtrip");
	strictEqual(body.intBig1, 0x003fffffffffffff, "integer big max roundtrip");
	strictEqual(body.intBig2, -0x003fffffffffffff - 1, "integer big min roundtrip");
	strictEqual(body.intNullable1, 0, "integer nullable 0 roundtrip");
	strictEqual(body.intNullable2, null, "integer null roundtrip");
	strictEqual(body.intDef1, 0, "integer default 0 roundtrip");
	strictEqual(body.intDef2, 1, "integer default 1 roundtrip");
	strictEqual(body.intDefNull, null, "integer default null roundtrip");
	var uuid = body.$uuid;
	console.log("============1");
	var body = get(_, cookie, "integers('" + uuid + "')");
	console.log("============1");
	console.log("int body: " + sys.inspect(body));
	strictEqual(body.int1, 0, "integer 0 roundtrip");
	strictEqual(body.int2, 1, "integer 1 roundtrip");
	strictEqual(body.intTiny1, 127, "integer tiny max roundtrip");
	strictEqual(body.intTiny2, -128, "integer tiny min roundtrip");
	strictEqual(body.intSmall1, 0x7fff, "integer small max roundtrip");
	strictEqual(body.intSmall2, -0x7fff - 1, "integer small min roundtrip");
	strictEqual(body.intMedium1, 0x7fffff, "integer medium max roundtrip");
	strictEqual(body.intMedium2, -0x7fffff - 1, "integer medium min roundtrip");
	strictEqual(body.intNormal1, 0x7fffffff, "integer normal max roundtrip");
	strictEqual(body.intNormal2, -0x7fffffff - 1, "integer normal min roundtrip");
	strictEqual(body.intBig1, 0x003fffffffffffff, "integer big max roundtrip");
	strictEqual(body.intBig2, -0x003fffffffffffff - 1, "integer big min roundtrip");
	strictEqual(body.intNullable1, 0, "integer nullable 0 roundtrip");
	strictEqual(body.intNullable2, null, "integer null roundtrip");
	strictEqual(body.intDef1, 0, "integer default 0 roundtrip");
	strictEqual(body.intDef2, 1, "integer default 1 roundtrip");
	strictEqual(body.intDefNull, null, "integer default null roundtrip");
	start();
});

asyncTest("postReals", 25, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "reals", {
		real1: 0,
		real2: 1,
		realSmall1: 3.40282e38,
		realSmall2: -3.40282e38,
		realNormal1: 1.79769313486231e308,
		realNormal2: -1.79769313486231e308,
		realNullable1: 0,
		realNullable2: null
	});
	strictEqual(body.real1, 0, "real 0 roundtrip");
	strictEqual(body.real2, 1, "real 1 roundtrip");
	strictEqual(body.realSmall1, 3.40282e38, "real small max roundtrip");
	strictEqual(body.realSmall2, -3.40282e38, "real small min roundtrip");
	strictEqual(body.realNormal1, 1.79769313486231e308, "real normal max roundtrip");
	strictEqual(body.realNormal2, -1.79769313486231e308, "real normal min roundtrip");
	strictEqual(body.realNullable1, 0, "real nullable 0 roundtrip");
	strictEqual(body.realNullable2, null, "real null roundtrip");
	strictEqual(body.realDef1, 0, "real default 0 roundtrip");
	strictEqual(body.realDef2, 1, "real default 1 roundtrip");
	strictEqual(body.realDefNull, null, "real default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "reals('" + uuid + "')", null);
	strictEqual(body.real1, 0, "real 0 roundtrip");
	strictEqual(body.real2, 1, "real 1 roundtrip");
	strictEqual(body.realSmall1, 3.40282e38, "real small max roundtrip");
	strictEqual(body.realSmall2, -3.40282e38, "real small min roundtrip");
	strictEqual(body.realNormal1, 1.79769313486231e308, "real normal max roundtrip");
	strictEqual(body.realNormal2, -1.79769313486231e308, "real normal min roundtrip");
	strictEqual(body.realNullable1, 0, "real nullable 0 roundtrip");
	strictEqual(body.realNullable2, null, "real null roundtrip");
	strictEqual(body.realDef1, 0, "real default 0 roundtrip");
	strictEqual(body.realDef2, 1, "real default 1 roundtrip");
	strictEqual(body.realDefNull, null, "real default null roundtrip");
	start();
});
asyncTest("postDateTimes", 17, function(_) {
	requestCount++;
	var datetimeBefore = types.datetime.now(false);
	cookie = getCookie(_);
	var body = post(_, cookie, "datetimes", {
		datetime1: testData.testDateTime,
		datetimeNullable1: testData.testDateTime,
		datetimeNullable2: null
	});
	strictEqual(body.datetime1, testData.testDateTime, "datetime test roundtrip 1");
	strictEqual(body.datetimeNullable1, testData.testDateTime, "datetime nullable test roundtrip");
	strictEqual(body.datetimeNullable2, null, "datetime null roundtrip");
	strictEqual(body.datetimeDef1, testData.testDateTime, "datetime default roundtrip");
	ok(body.datetimeDefNow >= datetimeBefore.toString(), "datetime default now roundtrip 1");
	ok((body.datetimeDefNow <= types.datetime.now(false).toString()), "datetime default now roundtrip 2");
	strictEqual(body.datetimeDefNull, null, "datetime default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "datetimes('" + uuid + "')", null);
	strictEqual(body.datetime1, testData.testDateTime, "datetime test roundtrip 2");
	strictEqual(body.datetimeNullable1, testData.testDateTime, "datetime nullable test roundtrip");
	strictEqual(body.datetimeNullable2, null, "datetime null roundtrip");
	strictEqual(body.datetimeDef1, testData.testDateTime, "datetime default roundtrip");
	ok(body.datetimeDefNow >= datetimeBefore.toString(), "datetime default now roundtrip 3");
	ok(body.datetimeDefNow <= types.datetime.now(false).toString(), "datetime default now roundtrip 4");
	strictEqual(body.datetimeDefNull, null, "datetime default null roundtrip");
	start();
});
asyncTest("postDates", 15, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "dates", {
		date1: testData.testDate,
		dateNullable1: testData.testDate,
		dateNullable2: null
	});
	strictEqual(body.date1, testData.testDate, "date test roundtrip 1");
	strictEqual(body.dateNullable1, testData.testDate, "date nullable test roundtrip");
	strictEqual(body.dateNullable2, null, "date null roundtrip");
	strictEqual(body.dateDef1, testData.testDate, "date default roundtrip");
	strictEqual(body.dateDefToday, types.date.today().toString(), "date def today roundtrip");
	strictEqual(body.dateDefNull, null, "date default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "dates('" + uuid + "')", null);
	strictEqual(body.date1, testData.testDate, "date test roundtrip 2");
	strictEqual(body.dateNullable1, testData.testDate, "date nullable test roundtrip");
	strictEqual(body.dateNullable2, null, "date null roundtrip");
	strictEqual(body.dateDef1, testData.testDate, "date default roundtrip");
	strictEqual(body.dateDefToday, types.date.today().toString(), "date def today roundtrip");
	strictEqual(body.dateDefNull, null, "date default null roundtrip");
	start();
});
asyncTest("postTimes", 17, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var timeBefore = types.time.now();
	var body = post(_, cookie, "times", {
		time1: testData.testTime,
		timeNullable1: testData.testTime,
		timeNullable2: null
	});
	strictEqual(body.time1, testData.testTime, "time test roundtrip");
	strictEqual(body.timeNullable1, testData.testTime, "time nullable test roundtrip");
	strictEqual(body.timeNullable2, null, "time null roundtrip");
	strictEqual(body.timeDef1, testData.testTime, "time default roundtrip");
	ok(body.timeDefNow >= timeBefore.toString(), "time def now roundtrip >=");
	ok(body.timeDefNow <= types.time.now().toString(), "time def now roundtrip <=");
	strictEqual(body.timeDefNull, null, "time default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "times('" + uuid + "')", null);
	strictEqual(body.time1, testData.testTime, "time test roundtrip 2");
	strictEqual(body.timeNullable1, testData.testTime, "time nullable test roundtrip 2");
	strictEqual(body.timeNullable2, null, "time null roundtrip 2");
	strictEqual(body.timeDef1, testData.testTime, "time default roundtrip 2");
	ok(body.timeDefNow >= timeBefore.toString(), "time def now roundtrip 2 >=");
	ok(body.timeDefNow <= types.time.now().toString(), "time def now roundtrip 2 <=");
	strictEqual(body.timeDefNull, null, "time default null roundtrip 2");
	start();
});
asyncTest("postUuids", 15, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "uuids", {
		uuid1: testData.testUuid,
		uuidNullable1: testData.testUuid,
		uuidNullable2: null
	});
	strictEqual(body.uuid1, testData.testUuid, "uuid test roundtrip");
	strictEqual(body.uuidNullable1, testData.testUuid, "uuid nullable test roundtrip");
	strictEqual(body.uuidNullable2, null, "uuid null roundtrip");
	strictEqual(body.uuidDef1, testData.testUuid, "uuid default roundtrip");
	strictEqual(body.uuidDefAuto, testData.testUuid, "uuid def auto roundtrip");
	strictEqual(body.uuidDefNull, null, "uuid default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "uuids('" + uuid + "')", null);
	strictEqual(body.uuid1, testData.testUuid, "uuid test roundtrip");
	strictEqual(body.uuidNullable1, testData.testUuid, "uuid nullable test roundtrip");
	strictEqual(body.uuidNullable2, null, "uuid null roundtrip");
	strictEqual(body.uuidDef1, testData.testUuid, "uuid default roundtrip");
	strictEqual(body.uuidDefAuto, testData.testUuid, "uuid def auto roundtrip");
	strictEqual(body.uuidDefNull, null, "uuid default null roundtrip");
	start();
});
asyncTest("postJsons", 13, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "jsons", {
		json1: testData.testJson,
		jsonNullable1: testData.testJson,
		jsonNullable2: null
	});
	same(body.json1, testData.testJson, "json test roundtrip");
	same(body.jsonNullable1, testData.testJson, "json nullable test roundtrip");
	strictEqual(body.jsonNullable2, null, "json null roundtrip");
	same(body.jsonDef1, testData.testJson, "json default roundtrip");
	strictEqual(body.jsonDefNull, null, "json default null roundtrip");
	var uuid = body.$uuid;
	var body = get(_, cookie, "jsons('" + uuid + "')", null);
	same(body.json1, testData.testJson, "json test roundtrip");
	same(body.jsonNullable1, testData.testJson, "json nullable test roundtrip");
	strictEqual(body.jsonNullable2, null, "json null roundtrip");
	same(body.jsonDef1, testData.testJson, "json default roundtrip");
	strictEqual(body.jsonDefNull, null, "json default null roundtrip");
	start();
});
asyncTest("postParent", 77, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "others", {
		name: "other1"
	});
	strictEqual(body.name, "other1", "other1 test roundtrip");
	var other1 = body.$uuid;
	var body = post(_, cookie, "others", {
		name: "other2"
	});
	strictEqual(body.name, "other2", "other2 test roundtrip");
	var other2 = body.$uuid;
	var body = post(_, cookie, "refers", {
		name: "ref1"
	});
	strictEqual(body.name, "ref1", "ref1 test roundtrip");
	var ref1 = body.$uuid;
	var body = post(_, cookie, "refers", {
		name: "ref2"
	});
	strictEqual(body.name, "ref2", "ref2 test roundtrip");
	var ref2 = body.$uuid;
	var body = post(_, cookie, "associates", {
		name: "associate1"
	});
	strictEqual(body.name, "associate1", "associate1 test roundtrip");
	var associate1 = body.$uuid;
	var body = post(_, cookie, "associates", {
		name: "associate2"
	});
	strictEqual(body.name, "associate2", "associate2 test roundtrip");
	var associate2 = body.$uuid;
	var body = post(_, cookie, "associates", {
		name: "associate3"
	});
	strictEqual(body.name, "associate3", "associate3 test roundtrip");
	var associate3 = body.$uuid;
	var mcuuid = helpers.uuid.generate();
	var body = post(_, cookie, "parents?include=associates", {
		name: "parent1",
		children: [{
			$uuid: helpers.uuid.generate(),
			name: "child1"
		}, {
			$uuid: helpers.uuid.generate(),
			name: "child2"
		}, {
			$uuid: helpers.uuid.generate(),
			name: "child3"
		}],
		mandatoryChild: {
			$uuid: mcuuid,
			name: "mandatoryChild"
		},
		mandatoryRef: {
			$uuid: ref1
		},
		associates: [{
			$uuid: associate1
		}, {
			$uuid: associate2
		}]
	});
	strictEqual(body.name, "parent1", "parent name test roundtrip");
	strictEqual(body.children.length, 3, "children length");
	strictEqual(body.children[0].name, "child1", "first child name");
	strictEqual(body.children[1].name, "child2", "second child name");
	strictEqual(body.children[2].name, "child3", "third child name");
	strictEqual(body.mandatoryChild != null, true, "mandatoryChild exists 1");
	strictEqual(body.mandatoryChild.name, "mandatoryChild", "mandatory child name");
	strictEqual(body.mandatoryChild.$uuid, mcuuid, "mandatory child $uuid");
	strictEqual(body.optionalChild, null, "optional child is null");
	strictEqual(body.mandatoryRef != null, true, "mandatoryRef exists");
	strictEqual(body.mandatoryRef.$uuid, ref1, "mandatoryRef ok");
	strictEqual(body.optionalRef, null, "optionalRef null");
	strictEqual(body.associates != null, true, "associates != null");
	strictEqual(body.associates.length, 2, "associates length 1");
	var gotKeys = body.associates.map(function(elt) {
		return elt.$uuid
	});
	var expectedKeys = [associate1, associate2];
	gotKeys.sort();
	expectedKeys.sort();
	same(gotKeys, expectedKeys, "associates keys ok");
	var parentKey = body.$uuid;
	var body = get(_, cookie, "parents('" + parentKey + "')?include=$children", null);
	strictEqual(body.name, "parent1", "parent name test roundtrip");
	strictEqual(body.children.length, 3, "children length");
	strictEqual(body.children[0].name, "child1", "first child name");
	strictEqual(body.children[1].name, "child2", "second child name");
	strictEqual(body.children[2].name, "child3", "third child name");
	strictEqual(body.mandatoryChild != null, true, "mandatoryChild exists 2");
	strictEqual(body.mandatoryChild.name, "mandatoryChild", "mandatory child name");
	strictEqual(body.optionalChild, null, "optional child is null");
	strictEqual(body.mandatoryRef != null, true, "mandatoryRef exists");
	strictEqual(body.mandatoryRef.$uuid, ref1, "mandatoryRef ok");
	strictEqual(body.optionalRef, null, "optionalRef null");
	var body = body;
	var body = put(_, cookie, "parents('" + parentKey + "')?include=associates", {
		name: "parent1",
		children: [{
			$uuid: helpers.uuid.generate(),
			name: "child4"
		}, {
			$uuid: body.children[1].$uuid,
		}],

		optionalChild: {
			$uuid: helpers.uuid.generate(),
			name: "optionalChild"
		},
		optionalRef: {
			$uuid: ref2
		},
		associates: [{
			$uuid: associate3
		}, {
			$uuid: associate1
		}],
		$properties: {
			children: {
				$deleteMissing: true
			},
			associates: {
				$deleteMissing: true
			}
		}

	});
	strictEqual(body.name, "parent1", "parent name test roundtrip");
	strictEqual(body.children.length, 2, "children length 2");
	strictEqual(body.children[0].name, "child2", "first child name");
	strictEqual(body.children[1].name, "child4", "second child name");
	strictEqual(body.mandatoryChild != null, true, "mandatoryChild exists 3");
	strictEqual(body.mandatoryChild.name, "mandatoryChild", "mandatory child name");
	strictEqual(body.optionalChild != null, true, "optional child exists");
	strictEqual(body.optionalChild.name, "optionalChild", "optional child name");
	strictEqual(body.mandatoryRef != null, true, "mandatoryRef exists");
	strictEqual(body.mandatoryRef.$uuid, ref1, "mandatoryRef ok");
	strictEqual(body.optionalRef != null, true, "optionalRef exists");
	strictEqual(body.optionalRef.$uuid, ref2, "optionalRef ok");

	strictEqual(body.associates.length, 2, "associates length 2");
	var gotKeys = body.associates.map(function(elt) {
		return elt.$uuid
	});
	var expectedKeys = [associate1, associate3];
	gotKeys.sort();
	expectedKeys.sort();
	same(gotKeys, expectedKeys, "associates keys ok");
	var body = get(_, cookie, "parents('" + parentKey + "')?include=$children", null);
	strictEqual(body.name, "parent1", "parent name test roundtrip");
	strictEqual(body.children.length, 2, "children length");
	strictEqual(body.children[0].name, "child2", "first child name");
	strictEqual(body.children[1].name, "child4", "second child name");
	strictEqual(body.mandatoryChild != null, true, "mandatoryChild exists 4");
	strictEqual(body.mandatoryChild.name, "mandatoryChild", "mandatory child name");
	strictEqual(body.optionalChild != null, true, "optional child exists");
	strictEqual(body.optionalChild.name, "optionalChild", "optional child name");
	strictEqual(body.mandatoryRef != null, true, "mandatoryRef exists");
	strictEqual(body.mandatoryRef.$uuid, ref1, "mandatoryRef ok");
	strictEqual(body.optionalRef != null, true, "optionalRef exists");
	strictEqual(body.optionalRef.$uuid, ref2, "optionalRef ok");
	// test change on refs
	var data = {
		mandatoryRef: {
			$uuid: ref2
		},
		optionalRef: null,
	};
	var body = put(_, cookie, "parents('" + parentKey + "')", data);
	strictEqual(body.mandatoryRef != null, true, "mandatoryRef exists");
	strictEqual(body.mandatoryRef.$uuid, ref2, "mandatoryRef ok");
	strictEqual(body.optionalRef == null, true, "optionalRef null");
	// create parent without mandatory ref. must fail
	body = post(_, cookie, "parents", {
		name: "parent2",
		mandatoryChild: {
			$uuid: mcuuid,
			name: "mandatoryChild"
		}
	}, 400);
	console.log("postParent body(1):"+sys.inspect(body, null,4));
	// must not have been saved
	body = get(_, cookie, "parents('"+body.$uuid+"')",404);
	
	start();
});

asyncTest("paging", 30, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body = post(_, cookie, "pageds", {
		name: "r1"
	});
	var body = post(_, cookie, "pageds", {
		name: "r2"
	});
	var body = post(_, cookie, "pageds", {
		name: "r3"
	});
	var body = get(_, cookie, "pageds?orderBy=name&count=1", null);
	strictEqual(body.$totalResults, 3, "totalResults ok(1)")
	strictEqual(body.$itemsPerPage, 1, "itemsPerPage ok")
	strictEqual(body.$resources.length, 1, "length ok")
	strictEqual(body.$resources[0].name, "r1", "name ok")
	// first IS null for the first page
	//	ok(body.$links.$first != null, "first != null");
	ok(body.$links.$first == null, "first == null");
	ok(body.$links.$last != null, "last != null");
	ok(body.$links.$next != null, "next != null");
	ok(body.$links.$previous == null, "previous == null");
	var feed1 = body;
	var nextLink = body.$links.$next.$url;
	var body = get(_, cookie, feed1.$links.$next.$url, null);
	strictEqual(body.$totalResults, 3, "totalResults ok(2)")
	strictEqual(body.$itemsPerPage, 1, "itemsPerPage ok")
	strictEqual(body.$resources.length, 1, "length ok")
	strictEqual(body.$resources[0].name, "r2", "name ok")
	ok(body.$links.$first.$url != null, "first ok");
	var firstLink = body.$links.$first.$url;
	strictEqual(body.$links.$last.$url, feed1.$links.$last.$url, "last ok");
	strictEqual(body.$links.$next.$url, feed1.$links.$last.$url, "next ok");
//	strictEqual(body.$links.$previous.$url, feed1.$links.$first.$url, "previous ok");
	var feed2 = body;
	var body = get(_, cookie, feed2.$links.$next.$url, null);
	strictEqual(body.$totalResults, 3, "totalResults ok(3)")
	strictEqual(body.$itemsPerPage, 1, "itemsPerPage ok")
	strictEqual(body.$resources.length, 1, "length ok")
	strictEqual(body.$resources[0].name, "r3", "name ok")
	strictEqual(body.$links.$first.$url, firstLink, "first ok");
	ok(body.$links.$last == null, "last ok");
	strictEqual(body.$links.$next, undefined, "next ok");
	strictEqual(body.$links.$previous.$url, nextLink, "previous ok");
	start();
});

asyncTest("concurency test", 31, function(_) {
	requestCount++;
	tracer && tracer("get cookie (701) ");
	var initialCookie = getCookie(_);
	var body = post(_, initialCookie, "strings", {
		string: "01234567890123456789",
		stringTiny: "01234567890123456789",
		stringNormal: "01234567890123456789",
		string10: "0123456789",
		string100: "01234567890123456789",
		string1000: "01234567890123456789",
		stringNullable1: "01234567890123456789",
		stringNullable2: null,
		$actions:{$save:{$isRequested:true}}
	});
	console.log("concurency body(1): "+sys.inspect(body));
	var uuid = body.$uuid;
	var initialUpdStamp = body.$updDate;
	strictEqual(body.$creUser, "guest", "creUser ok");
	strictEqual(body.$updUser, "guest", "updUser ok");
	ok(body.$creDate != null, "creDate ok");
	ok(body.$updDate != null, "updDate ok");
	// create a different session to read the instance, to make sure we have the database etag
	body = get(_, initialCookie, "strings('"+uuid+"')", 200);
	console.log("concurency body(2): "+sys.inspect(body));
	strictEqual(body.$creUser, "guest", "creUser dbread ok");
	strictEqual(body.$updUser, "guest", "updUser dbread ok");
	strictEqual(body.$creDate, initialUpdStamp, "creDate dbread ok");
	strictEqual(body.$updDate, initialUpdStamp, "updDate dbread ok");
	// modify
	body = put(_, initialCookie, "strings('"+uuid+"')", {
		string: "0123",
		$actions:{$save:{$isRequested:true}}
	});
	console.log("concurency body(3): "+sys.inspect(body));
	ok(body.$updDate > initialUpdStamp, "First modify updStamp ok");
	ok(body.$updDate > body.$creDate, "Cre/mod date different");
	initialUpdStamp = body.$updDate;
	// create a working copy for modify (initialSession)
	body = post(_, initialCookie, "strings('"+uuid+"')/$workingCopies?trackingId="+helpers.uuid.generate(), 201);
	var wcUrl = body.$url;
	console.log("concurency body(4): "+sys.inspect(body));
	// modify, don't save
	body = put(_, initialCookie, wcUrl, {string:"1234", $etag: body.$etag});
	var lastEtag = body.$etag;
	console.log("concurency body(4.1): "+sys.inspect(body));
	// make a chage, other session
	console.log("getting the second session");
	var secondCookie = getCookie(_, "admin", "admin");
	body = put(_, secondCookie, "strings('"+uuid+"')", {
		string: "2345",
		$actions:{$save:{$isRequested:true}}
	});
	console.log("concurency body(5): "+sys.inspect(body));
	strictEqual(body.$creUser, "guest", "creUser unchanged");
	strictEqual(body.$updUser, "admin", "updUser updated");
	ok(body.$updDate > initialUpdStamp, "updDate increased");
	// save the WC, must get an error
	body = put(_, initialCookie, wcUrl, {$etag:lastEtag, $actions:{$save:{$isRequested:true}}}, 200);
	ok(body.$actions.$save.$diagnoses[0].severity == "error", "Has an error");
	console.log("concurency body(6): "+sys.inspect(body, null, 4));
	//
	// PESSIMIST lock test (locked is pessimist)
	body = post(_, cookie, "lockeds", {
		description: "First",
		$actions:{$save:{$isRequested:true}}
	});
	uuid = body.$uuid;
	// create an WC on the initial session
	body = post(_, initialCookie, "lockeds('"+uuid+"')/$workingCopies?trackingId="+helpers.uuid.generate(), null, 201);
	wcUrl = body.$url;
	console.log("concurency body(7): "+sys.inspect(body));
	// try to create an WC on second session, MUST fail
	body = post(_, secondCookie, "lockeds('"+uuid+"')/$workingCopies?trackingId="+helpers.uuid.generate(), null, 201);
	console.log("concurency body(8): "+sys.inspect(body));
	ok(body.$diagnoses[0].severity == "error", "Has an error(2)");
	// logout initial cookie, second WC should succeed as the lock should be removed
	// get the userProfileWC
	console.log("userProfile WC create: "+baseUrl+"/sdata/syracuse/collaboration/mongodb_admin_test/userProfiles/$workingCopies?trackingId="+helpers.uuid.generate());
	body = post(_, initialCookie, baseUrl+"/sdata/syracuse/collaboration/mongodb_admin_test/userProfiles/$template/$workingCopies?trackingId="+helpers.uuid.generate(), null, 201);
	body = put(_, initialCookie, body.$url, {$etag:body.$etag, $actions:{$logout:{$isRequested:true}}}, 200);
	// next get on initial cookie should status 401
	body = get(_, initialCookie, "lockeds", 401);
	// !!!!! AT THIS POINT initialCookie is logged out !!!!!
//	console.log("initial cookie: "+initialCookie+"  -  secondCookie: "+secondCookie);
	// now try to recreate a WC on second cookie
	body = post(_, secondCookie, "lockeds('"+uuid+"')/$workingCopies?trackingId="+helpers.uuid.generate(), null, 201);
	
	start();
});

asyncTest("delete test", 55, function(_) {
	requestCount++;
	cookie = getCookie(_);
	// create the parent
	var body = post(_, cookie, "deleteTestParents", {
		name: "testParent",
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var parentId = body.$uuid;
	// create refering childs
	body = post(_, cookie, "deleteTestRefOnes", {
		name: "testRefOne", ref: {$uuid:parentId},
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var refId = body.$uuid;
	ok(true, "delete ref one start");
	// try to delete parent, must get error
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 403);
	// delete refering child
	body = del(_, cookie, "deleteTestRefOnes('"+refId+"')", 200);
	// delete parent, must succeed
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 200);
	//
	ok(true, "delete ref many start");
	// recreate parent
	body = post(_, cookie, "deleteTestParents", {
		name: "testParent",
		$actions: {$save: {$isRequested:true}}
	}, 201);
	parentId = body.$uuid;
	//
	body = post(_, cookie, "deleteTestRefManies", {
		name: "testRefMany", refs: [{$uuid:parentId}],
		$actions: {$save: {$isRequested:true}}
	}, 201);
	refId = body.$uuid;
	// try to delete parent, must fail
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 403);
	// delete refering child
	body = del(_, cookie, "deleteTestRefManies('"+refId+"')", 200);
	// delete parent, must succeed
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 200);
	console.log("delete test body(1) "+sys.inspect(body, null, 4));
	//
	ok(true, "delete multi ref start");
	// recreate parent
	body = post(_, cookie, "deleteTestParents", {
		name: "testParent",
		$actions: {$save: {$isRequested:true}}
	}, 201);
	parentId = body.$uuid;
	//
	body = post(_, cookie, "deleteTestMultiRefes", {
		name: "testRef1", ref1: {$uuid:parentId},
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var refId1 = body.$uuid;
	body = post(_, cookie, "deleteTestMultiRefes", {
		name: "testRef2", ref2: {$uuid:parentId},
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var refId2 = body.$uuid;
	// try to delete parent, must fail
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 403);
	// delete refering child 1
	body = del(_, cookie, "deleteTestMultiRefes('"+refId1+"')", 200);
	// delete parent, must fail
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 403);
	// delete refering child 1
	body = del(_, cookie, "deleteTestMultiRefes('"+refId2+"')", 200);
	// delete parent, must succeed
	body = del(_, cookie, "deleteTestParents('"+parentId+"')", 200);
	
	// cascade delete
	body = post(_, cookie, "deleteTestCascadeMasters", {
		name: "Cascade Master"
	}, 201);
	var masterUuid = body.$uuid;
	body = post(_, cookie, "deleteTestCascadeDetails", {
		name: "Cascade Detail 1",
		master: { $uuid: masterUuid }
	}, 201);
	var detail1Uuid = body.$uuid;
	body = post(_, cookie, "deleteTestCascadeDetails", {
		name: "Cascade Detail 2"
	}, 201);
	var detail2Uuid = body.$uuid;
	body = put(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", {
		detailsWoInv: [{ $uuid: detail2Uuid}]
	}, 200);
	// check
	body = get(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", 200);
	strictEqual(body.detailsWInv.length, 1, "Has detail with inv ok");
	strictEqual(body.detailsWoInv.length, 1, "Has detail w/o inv ok");
	// delete details, must pass
	body = del(_, cookie, "deleteTestCascadeDetails('" + detail1Uuid + "')", 200);
	body = del(_, cookie, "deleteTestCascadeDetails('" + detail2Uuid + "')", 200);
	// check
	body = get(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", 200);
	ok((!body.detailsWInv || !body.detailsWInv.length), "Del detail with inv ok");
	// This test will fail as if there is no inverse relation is no way (yet) for the relation to be notified of the delete
	// ok((!body.detailsWoInv || !body.detailsWoInv.length), "Del detail w/o inv ok");
	// recreate details
	body = post(_, cookie, "deleteTestCascadeDetails", {
		name: "Cascade Detail 1",
		master: { $uuid: masterUuid }
	}, 201);
/*	var detail1Uuid = body.$uuid;
	body = post(_, cookie, "deleteTestCascadeDetails", {
		name: "Cascade Detail 2"
	}, 201);
	var detail2Uuid = body.$uuid;
	body = put(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", {
		detailsWoInv: [{ $uuid: detail2Uuid}]
	}, 200);*/
	// check
	body = get(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", 200);
	strictEqual(body.detailsWInv.length, 1, "Has detail with inv ok");
	strictEqual(body.detailsWoInv.length, 1, "Has detail w/o inv ok");
	// delete master, must pass
	body = del(_, cookie, "deleteTestCascadeMasters('" + masterUuid + "')", 200);
	// details must not exists
	body = get(_, cookie, "deleteTestCascadeDetails('" + detail1Uuid + "')", 404);
	body = get(_, cookie, "deleteTestCascadeDetails('" + detail2Uuid + "')", 404);
	// many to many unassociate test
	// create As
	body = post(_, cookie, "deleteTestManyToManyAs", {
		name: "A1",
		$actions: { $save: { $isRequested:true }}
	}, 201);
	var A1 = body.$uuid;
	body = post(_, cookie, "deleteTestManyToManyAs", {
		name: "A2",
		$actions: { $save: { $isRequested:true }}
	}, 201);
	var A2 = body.$uuid;
	// create Bs
	body = post(_, cookie, "deleteTestManyToManyBs", {
		name: "B1", Alist: [{$uuid: A1}, {$uuid: A2}],
		$actions: { $save: { $isRequested:true }}
	}, 201);
	var B1 = body.$uuid;
	body = post(_, cookie, "deleteTestManyToManyBs", {
		name: "B2", Alist: [{$uuid:A2}],
		$actions: { $save: { $isRequested:true }}
	}, 201);
	var B2 = body.$uuid;
	// test the lists
	body = get(_, cookie, "deleteTestManyToManyAs('" + A2 + "')", 200);
	strictEqual(body.Blist.length, 2, "A2.Blist count ok");
	// remove B2 from A2.Blist
	body = put(_, cookie, "deleteTestManyToManyAs('" + A2 + "')", {
		Blist: [{$uuid: B2, $isDeleted: true, $index: 0}],
		$actions: { $save: { $isRequested:true }}
	}, 200);
	body = get(_, cookie, "deleteTestManyToManyAs('" + A2 + "')", 200);
	strictEqual(body.Blist.length, 1, "A2.Blist count ok");
	strictEqual(body.Blist[0].$uuid, B1, "A2.Blist item ok");
	// B2 must stil exist
	body = get(_, cookie, "deleteTestManyToManyBs('" + B2 + "')", 200);
	// remove B1 from A1.Blist
	body = put(_, cookie, "deleteTestManyToManyAs('" + A1 + "')", {
		Blist: [{$uuid: B1, $isDeleted: true, $index: 0}],
		$actions: { $save: { $isRequested:true }}
	}, 200);
	body = get(_, cookie, "deleteTestManyToManyAs('" + A1 + "')", 200);
	ok(!body.Blist || !body.Blist.length, "A1.Blist count ok");
	// B1 must stil exist
	body = get(_, cookie, "deleteTestManyToManyBs('" + B1 + "')", 200);
	
	start();
});

asyncTest("history test", 5, function(_) {
	cookie =getCookie(_);
	tracer && tracer("before get with histo");
	var shortUrl = "/sdata/qunit/sdataTest/test/strings?representation=string.$query";
	var url = baseUrl + shortUrl;
	var body = get(_, cookie, url, 200, {
		"x-history-title": "Strings get",
		"x-history-agent": "browser"
	});
	// this test might fail as the historisation is done "no wait"
	var body = get(_, cookie, baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/navHistories?representation=navHistory.$query", 200);
	tracer && tracer("Body(871): "+sys.inspect(body));
	strictEqual(body.$resources.length, 1, "has one history ok");
	strictEqual(body.$resources[0].url, shortUrl, "url check ok");
	
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});