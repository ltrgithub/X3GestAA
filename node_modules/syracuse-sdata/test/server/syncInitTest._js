"use strict";

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var util = require("util");
var dataModel = require('syracuse-orm/lib/dataModel');
var mongodb = require('streamline-mongodb');


var tracer = console.log;
//var tracer = null;

var db;
var testData = require('../fixtures/testDB');
var testEndPoint = testData.endpoint;
testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: 27017
	}
};



var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 1000);
		}
	}
});




asyncTest("Tick management", 13, function(_) {
	//
	// empty database
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname,
		testEndPoint.datasets.test.port, {});
	var db = adminTestFixtures.newMongoDb(testEndPoint.datasets.test.database,
		server, {});
	db = db.open(_);
	db.dropDatabase(_);

	// entity without "allowSync"
	db = dataModel.getOrm(_, dataModel.make(testEndPoint.contract, "test"), testEndPoint.datasets.test);
	ok(db != null, "Environnement initialized");
	var entity = db.model.getEntity(_, "syncEntity");
	var inst = entity.createInstance(_, db);
	inst.name(_, "n0");
	inst.save(_);
	strictEqual(inst.$syncUuid, undefined, "No sync UUID");

	testEndPoint.contract.entities.syncEntity.allowSync = true;
	// entity with "allowSync"
	db = dataModel.getOrm(_, dataModel.make(testEndPoint.contract, "test"), testEndPoint.datasets.test);
	var entity = db.model.getEntity(_, "syncEntity");
	var inst = db.fetchInstance(_, entity, {
		jsonWhere: {
			name: "n0"
		}
	});
	strictEqual( !! inst.$syncUuid, true, "Now sync UUID");
	strictEqual(inst.$tick, 1, "Now tick");
	inst.name(_, "n1");
	inst.save(_);
	strictEqual(inst.$tick, 2, "tick increase");
	var inst = entity.createInstance(_, db);
	inst.name(_, "n2");
	inst.save(_);
	strictEqual( !! inst.$syncUuid, true, "Sync UUID for newly created instance");
	strictEqual(inst.$tick, 3, "Tick after saving newly created instance");
	inst.deleteSelf(_);
	var delInsts = db.fetchInstances(_, db.getEntity(_, "deleted"), {});
	strictEqual(delInsts.length, 1, "one deleted instance");
	strictEqual(delInsts[0].syncUuid(_), inst.$syncUuid, "Same UUID");
	strictEqual(delInsts[0].endpoint(_), inst.$endpoint, "Same endpoint");
	strictEqual(delInsts[0].tick(_), inst.$tick + 1, "Correct tick");
	strictEqual(delInsts[0].entname(_), "syncEntity", "Correct entity name");
	var inst = entity.createInstance(_, db);
	inst.name(_, "n3");
	inst.save(_);
	strictEqual(inst.$tick, 5, "Tick after saving second newly created instance");

	//
	start();
});

asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});