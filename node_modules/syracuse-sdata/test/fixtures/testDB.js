var types= require('syracuse-core/lib/types/allTypes');
var testDateTime = exports.testDateTime = "2010-08-20T09:30:04.000Z";
var testDate = exports.testDate = "2010-08-20";
var testTime = exports.testTime =  "23:30:00";
var testUuid = exports.testUuid = "01234567-89ab-cdef-0123-456789abcdef";
var testJson = exports.testJson = { foo: "bar" };

exports.endpoint={
	contract: {
		application: "qunit",
		contract: "sdataTest",
		entities: {
			string: {
				$properties: {
					string: {},
					stringTiny: {
						size: "tiny"
					},
					stringNormal: {
						size: "normal"
					},
					string10: {
						$constraints: { $maxLength: 10 }
					},
					string100: {
						$constraints: { $maxLength: 100}
					},
					string1000: {
						$constraints: {
							$maxLength: 1000
						}
					},
					stringNullable1: {
						$constraints: { $isNullable: true }
					},
					stringNullable2: {
						$constraints: { $isNullable: true }
					},
					stringDef1: {
						$default: ""
					},
					stringDef2: {
						$default: "a'b"
					},
					stringDefNull: {
						$constraints: { $isNullable: true },
						$default: null 
					}
				}/*,
				$init: function(_, instance) {
					instance.stringDef1(_, "");
					instance.stringDef2(_, "a'b");
				}*/
			},
			bool: {
				$properties: {
					bool1: {
						$type: "boolean"
					},
					bool2: {
						$type: "boolean"
					},
					boolNullable1: {
						$type: "boolean",
						$constraints: { $isNullable: true }
					},
					boolNullable2: {
						$type: "boolean",
						$constraints: { $isNullable: true }
					},
					boolDef1: {
						$type: "boolean",
						$default: false
					},
					boolDef2: {
						$type: "boolean",
						$default: true
					},
					boolDefNull: {
						$type: "boolean",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			integer: {
				$properties: {
					int1: {
						$type: "integer"
					},
					int2: {
						$type: "integer"
					},
					intTiny1: {
						$type: "integer",
						size: "tiny"
					},
					intTiny2: {
						$type: "integer",
						size: "tiny"
					},
					intSmall1: {
						$type: "integer",
						size: "small"
					},
					intSmall2: {
						$type: "integer",
						size: "small"
					},
					intMedium1: {
						$type: "integer",
						size: "medium"
					},
					intMedium2: {
						$type: "integer",
						size: "medium"
					},
					intNormal1: {
						$type: "integer",
						size: "normal"
					},
					intNormal2: {
						$type: "integer",
						size: "normal"
					},
					intBig1: {
						$type: "integer",
						size: "big"
					},
					intBig2: {
						$type: "integer",
						size: "big"
					},
					intNullable1: {
						$type: "integer",
						$constraints: { $isNullable: true }
					},
					intNullable2: {
						$type: "integer",
						$constraints: { $isNullable: true }
					},
					intDef1: {
						$type: "integer",
						$default: 0
					},
					intDef2: {
						$type: "integer",
						$default: 1
					},
					intDefNull: {
						$type: "integer",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			real: {
				$properties: {
					real1: {
						$type: "real"
					},
					real2: {
						$type: "real"
					},
					realSmall1: {
						$type: "real",
						size: "small"
					},
					realSmall2: {
						$type: "real",
						size: "small"
					},
					realNormal1: {
						$type: "real",
						size: "normal"
					},
					realNormal2: {
						$type: "real",
						size: "normal"
					},
					realNullable1: {
						$type: "real",
						$constraints: { $isNullable: true }
					},
					realNullable2: {
						$type: "real",
						$constraints: { $isNullable: true }
					},
					realDef1: {
						$type: "real",
						$default: 0
					},
					realDef2: {
						$type: "real",
						$default: 1
					},
					realDefNull: {
						$type: "real",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			datetime: {
				$properties: {
					datetime1: {
						$type: "datetime"
					},
					datetimeNullable1: {
						$type: "datetime",
						$constraints: { $isNullable: true }
					},
					datetimeNullable2: {
						$type: "datetime",
						$constraints: { $isNullable: true }
					},
					datetimeDef1: {
						$type: "datetime",
						$default: types.datetime.parse(testDateTime)
					},
					datetimeDefNow: {
						$type: "datetime",
						$default: function() {
							return types.datetime.now(false);
						}
					},
					datetimeDefNull: {
						$type: "datetime",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			date: {
				$properties: {
					date1: {
						$type: "date"
					},
					dateNullable1: {
						$type: "date",
						$constraints: { $isNullable: true }
					},
					dateNullable2: {
						$type: "date",
						$constraints: { $isNullable: true }
					},
					dateDef1: {
						$type: "date",
						$default: types.date.parse(testDate)
					},
					dateDefToday: {
						$type: "date",$default: function() {
							return types.date.today();
						}
					},
					dateDefNull: {
						$type: "date",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			time: {
				$properties: {
					time1: {
						$type: "time"
					},
					timeNullable1: {
						$type: "time",
						$constraints: { $isNullable: true }
					},
					timeNullable2: {
						$type: "time",
						$constraints: { $isNullable: true }
					},
					timeDef1: {
						$type: "time",
						$default: types.time.parse(testTime)
					},
					timeDefNow: {
						$type: "time",
						$default: function() {
							return types.time.now();
						}
					},
					timeDefNull: {
						$type: "time",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			uuid: {
				$properties: {
					uuid1: {
						$type: "uuid"
					},
					uuidNullable1: {
						$type: "uuid",
						$constraints: { $isNullable: true }
					},
					uuidNullable2: {
						$type: "uuid",
						$constraints: { $isNullable: true }
					},
					uuidDef1: {
						$type: "uuid"
						,$default: testUuid
					},
					uuidDefAuto: {
						$type: "uuid"
						,$default: function() {
							return testUuid;
						}
					},
					uuidDefNull: {
						$type: "json",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			json: {
				$properties: {
					json1: {
						$type: "json"
					},
					jsonNullable1: {
						$type: "json",
						$constraints: { $isNullable: true }
					},
					jsonNullable2: {
						$type: "json",
						$constraints: { $isNullable: true }
					},
					jsonDef1: {
						$type: "json"
						,$default: testJson
					},
					jsonDefNull: {
						$type: "json",
						$constraints: { $isNullable: true },
						$default: null
					}
				}
			},
			parent: {
				$properties: {
					name: {}
				},
				$relations: {
					children: {
						inv: "parent",
						isChild: true,
						defaultOrder: [["name"]]
					},
					mandatoryChild: {
						$type: "other",
						isChild: true,
						mandatory: true
					},
					optionalChild: {
						$type: "other",
						isChild: true,
						$constraints: { $isNullable: true },
						defaultValue: null
					},
					mandatoryRef: {
						$type: "refer",
						$isMandatory: true
					},
					optionalRef: {
						$type: "refer",
						$constraints: { $isNullable: true },
						defaultValue: null
					},
					associates: {
						inv: "parents"
					}
				},
				defaultOrder: [["name"]]
			},
			child: {
				plural: "children",
				$properties: {
					name: {}
				},
				$relations: {
					parent: {}
				},
				defaultOrder: [["name"]]
			},
			other: {
				$properties: {
					name: {}
				}
			},
			refer: {
				$properties: {
					name: {}
				}
			},
			associate: {
				$properties: {
					name: {}
				},
				$relations: {
					parents: {
						inv: "associates"
					}
				}
			},
			paged: {
				$properties: {
					name: {}
				}
			},
			locked: {
				$lockType: "pessimist",
				$properties: {
					description: {}
				}
			},
			deleteTestParent: {
				$properties: {
					name: {}
				}
			},
			deleteTestRefOne: {
				$properties: {
					name: {}
				},
				$relations: {
					ref: {
						$type: "deleteTestParent"
					}
				}
			},
			deleteTestRefMany: {
				$properties: {
					name: {}
				},
				$relations: {
					refs: {
						$type: "deleteTestParents"
					}
				}
			},
			deleteTestMultiRefe: {
				$properties: {
					name: {}
				},
				$relations: {
					ref1: {
						$type: "deleteTestParent"
					},
					ref2: {
						$type: "deleteTestParent"
					}
				}
			},
			deleteTestCascadeMaster: {
				$properties: {
					name: {}
				},
				$relations: {
					detailsWInv: {
						$type: "deleteTestCascadeDetails",
						$inv: "master",
						$isComputed: true,
						$cascadeDelete: true
					},
					detailsWoInv: {
						$type: "deleteTestCascadeDetails",
						$cascadeDelete: true
					}
				}
			},
			deleteTestCascadeDetail: {
				$properties: {
					name: {}
				},
				$relations: {
					master: {
						$type: "deleteTestCascadeMaster",
						$inv: "detailsWInv"
					}
				}
			}
		}
	}
};