"use strict";

var sys = require("util");
var patchcreate = require("syracuse-patch/lib/patchcreate");
var write = require("syracuse-patch/lib/write");
var fs = require('fs');
var os = require('os');
// semaphore file
var sem = os.tmpDir()+"/semaphore.txt"

function _getSha1(version, _) {
	return version ? version.rollout(_) : "";
}
			
exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$properties: {
		newPatch: {
			$type: "boolean",
			$title: "Make new patch",
			$default: true,
			$isDisabled: function(_, instance) { 
				return instance.newRelease(_)
			}
		},
		newRelease: {
			$type: "boolean",
			$title: "Create new release",
			$default: false
		},
		startFromRelease: {
			$type: "boolean",
			$title: "Start from release",
			$default: false			
		},
		x3Information: {
			$type: "boolean",
			$title: "Include X3 patch information",
			$default: true
		},
		newReleaseNumber: {
			$title: "New release",
            $default: "1", // ""
    		$isDisabled: function(_, instance) { 
    			return !instance.newRelease(_)
    		},
			$isMandatory: function(_, instance) { 
    			return instance.newRelease(_)
    		} 
		},
		comment: {
			$title: "Description",
			$default: "",
			$isDisabled: function(_, instance) {
				return !instance.newRelease(_) && !instance.newPatch(_);
			}
		},
		baseRelease: {
			$title: "Base release",
			$isDisabled: function(_, instance) {
				return instance.newRelease(_);
			}
		},
		patchFile: {
			$title: "Patch file name",
			$default: os.tmpDir()+"/patch.dat",
		},
		checkSource: {
			$title: "Check source repository",
			$type: "boolean",
			$default: true,
			$isDisabled: function(_, instance) {
				return !instance.newRelease(_) && !instance.newPatch(_);
			}
		}
	},
	$titleTemplate: "Patch creation",
    $valueTemplate: "Patch creation",
    $descriptionTemplate: "Patch creation",
    $relations: {
		versionOld: {
			$title: "Start version",
			$isDisabled: function(_, instance) {
				return instance.newRelease(_) || instance.newPatch(_) || instance.baseRelease(_) || instance.startFromRelease(_);
			},
			$type: "patchLevel",
			$inv: "patches"
		},
		versionNew: {
			$title: "End version",
			$isDisabled: function(_, instance) {
				return instance.newRelease(_) || instance.newPatch(_);
			},
			$type: "patchLevel",
			$inv: "patches"
		}
    },
    $functions: {
    },
	$services: {
	    $createPatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Create patch",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!fs.existsSync(sem)) {
					fs.appendFile(sem, "A", _);
					try {
						console.log("Before");
						var config = require('syracuse-main/lib/nodeconfig').config;
						var sha1Old = _getSha1(instance.versionOld(_), _);
						var sha1New = _getSha1(instance.versionNew(_), _);
						patchcreate.patch(instance.newPatch(_), instance.startFromRelease(_), instance.newRelease(_), instance.newReleaseNumber(_), instance.comment(_), instance.baseRelease(_), instance.patchFile(_), sha1Old, sha1New, instance.x3Information(_), config, instance.checkSource(_), _);
						console.log("After");
						instance.$diagnoses.push({severity: "info", message: "OK"});
						} catch (e) {
							console.log("Error2 "+e);
							instance.$diagnoses.push({severity: "error", message: ""+e})
					} finally {
						fs.unlink(sem, _);
					}
					console.log("End");
				} else {
					instance.$diagnoses.push({severity: "error", message: "System is already locked by another call"});
					console.log("Parallel");
				}
			}
		},
	    $customerDir: {
			$method : "PUT",
			$isMethod : true,
			$title : "Create customer image",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!fs.existsSync(sem)) {
					fs.appendFile(sem, "A", _);
					try {
						var config = require('syracuse-main/lib/nodeconfig').config;
						console.log("CONFIG "+JSON.stringify(config.patch))
						patchcreate.createCustomerImage(config.patch, _, instance.baseRelease(_));
						instance.$diagnoses.push({severity: "info", message: "OK"});
						} catch (e) {
							instance.$diagnoses.push({severity: "error", message: ""+e})
					} finally {
						fs.unlink(sem, _);
					}
				} else {
					instance.$diagnoses.push({severity: "error", message: "System is already locked by another call"});
					console.log("Parallel");
				}
			}
		},
		$deleteSemaphore: {
			$method : "PUT",
			$isMethod : true,
			$title : "Unlock system",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!write.exists(sem, _))
					instance.$diagnoses.push({severity: "warning", message: "System has not been locked"});
				else {
					try {
						fs.unlink(sem, _);
						instance.$diagnoses.push({severity: "info", message: "OK"});					
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: e})
						console.log("Error when deleting semaphore file "+e)
					}					
				}
				console.log("Deleted");
			}
		}		
	},
};
