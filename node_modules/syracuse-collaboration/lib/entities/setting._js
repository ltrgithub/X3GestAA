"use strict";

var sys = require("util");

exports.entity = {
	$canCreate: false,
	$canDelete: false,
	$helpPage: "Administration-reference-Global-Settings",
	$properties: {
		authentication: {
			$title: "Authentication",
			$enum: [{
				$value: "basic",
				$title: "Basic"
			}, {
				$value: "digest",
				$title: "Digest"
			}, {
				$value: "oauth2",
				$title: "OAuth2"
			}],
			$default: "basic",
			$isMandatory: true
		},
		patchLock: {
			$title: "Patch system locked",
			$type: "boolean",
			$isNullable: true,
			$default: false
		},
		proxy: {
			$title: "Proxy server",
			$type: "boolean",
			$default: false,
			$isNullable: true
		},
		endpoint: {
			$title: "Synchronization endpoint"
		},
		conflictPriority: {
			$title: "Conflict priority",
			$type: "integer",
			$maximum: 9,
			$minimum: 1,
			$default: 5
		},
		twoDigitYearMin: {
			$title: "Lower bound of two-digit year expansion interval",
			$type: "integer",
			$compute: function(_, instance) {
				return instance.twoDigitYearMax(_) - 99;
			}
		},
		twoDigitYearMax: {
			$title: "Upper bound of two-digit year expansion interval",
			$isMandatory: true,
			$type: "integer",
			$minimum: 1930,
			$maximum: 9000,
			$default: 2029
		}
	},
	$titleTemplate: "Global settings",
	$valueTemplate: "Global settings",
	$descriptionTemplate: "Global settings",
	$relations: {
		ldap: {
			$title: "Default LDAP server",
			$type: "ldap",
			$isHidden: function(_, instance) {
				return instance.authentication(_) !== "basic";
			}
		},
		oauth2: {
			$title: "Default OAuth2 server",
			$type: "oauth2",
			$isMandatory: function(_, instance) {
				return instance.authentication(_) === "oauth2";
			},
			$isHidden: function(_, instance) {
				return instance.authentication(_) !== "oauth2";
			}
		},
		proxyConf: {
			$title: "Default proxy configuration",
			$type: "proxyConfiguration",
			$isMandatory: function(_, instance) {
				return instance.proxy(_);
			},
			$isHidden: function(_, instance) {
				return !instance.proxy(_);
			}
		},
		logger: {
			$title: "Logger device",
			$type: "device",
		},
	},
	$functions: {
		startLogger: function(_) {
			var logger = this.logger(_);
			var logmod = require('syracuse-etl/lib/logger');
			if (logmod.writer !== logger.writer(_)) {
				logmod.writer.write(_); // close it by writing undefined
				logmod.writer = logger.writer(_) || require('ez-streams').devices.console.log;
			}
		},
	},
	$events: {
		$afterSave: [

			function(_, instance) {
				instance.startLogger(_);
			}
		],
	}

};