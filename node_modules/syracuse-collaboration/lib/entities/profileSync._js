"use strict";

var helpers = require("syracuse-core/lib/helpers");
var dataModel = require("syracuse-orm/lib/dataModel");
var linkedin = require("syracuse-linkedin/lib/linkedin");
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;

exports.entity = {
	$titleTemplate: "Linkedin profiles",
	$isPersistent: true,
	$canEdit: true,
	$properties: {
		id: {
			$title: "Profile URL"
		},
		email: {
			$title: "Email"
		},
		firstName: {
			$title: "First name"
		},
		lastName: {
			$title: "Last name"
		},
		raw: {
			$title: "Profile data"
		}
	},
	$services: {
		testlogin: {
			$title: "Sync with linkedin",
			$method: "GET",
			$isMethod: false,
			$execute: function(_, context, instance, parameters) {
				if (!linkedin.isAuthenticated()) {
					return context.reply(_, 200, {
						$diagnoses: [{
							$severity: "error",
							$message: "You need to login on Linkedin first to be granted to sync matching profiles",
							$links: {
								login: {
									$title: "Go to login",
									$type: "html",
									$url: linkedin.getAuthUrl()
								}
							}
						}]
					});
				}
				var map = {
					"dominique.bopp@sage.com": "http://fr.linkedin.com/in/dbopp",
					"mathias.walz@sage.de": "http://de.linkedin.com/pub/mathias-walz/97/206/354",
					"norbert.butzke@sage.com": "http://de.linkedin.com/pub/norbert-butzke/85/b87/138",
					"sophie.rebeyrotte@sage.com": "http://fr.linkedin.com/in/sophierebeyrotte/de"
				};

				Object.keys(map).forEach_(_, function(_, key) {
					var url = map[key];
					var profile = linkedin.getUserByUrlOnline(_, url);
					var db = adminHelper.getCollaborationOrm(_);

					var prof = db.fetchInstances(_, context.model.getEntity(_, "profileSync"), {
						jsonWhere: {
							id: url
						}
					});
					if (prof && prof.length) {
						prof = prof[0];
					} else {
						prof = context.model.getEntity(_, "profileSync").createInstance(_, db, null);
					}
					saveProfile(_, prof, url, key, profile);
				});

				return context.reply(_, 200, {
					$diagnoses: [{
						$severity: "success",
						$message: "Matching profiles were synchronised, click to refresh the list",
						$links: {
							login: {
								$title: "Click to refresh",
								$url: "/sdata/syracuse/collaboration/syracuse/profileSyncs?representation=profileSync.$query"
							}
						}
					}]
				});
			},
		},
		cleanup: {
			$title: "Cleanup profiles",
			$method: "GET",
			$isMethod: false,
			$execute: function(_, context, instance, parameters) {
				var db = adminHelper.getCollaborationOrm(_);
				var prof = db.fetchInstances(_, context.model.getEntity(_, "profileSync"), {});
				prof.forEach_(_, function(_, p) {
					p.deleteSelf(_);
				});

				return context.reply(_, 200, {
					$diagnoses: [{
						$severity: "success",
						$message: "Existing profiles were cleaned up",
						$links: {
							login: {
								$title: "Click to refresh",
								$url: "/sdata/syracuse/collaboration/syracuse/profileSyncs?representation=profileSync.$query"
							}
						}
					}]
				});
			}
		}
	},
	$searchIndex: {
		$fields: ["firstName", "lastName", "email", "raw"]
	},

};

function saveProfile(_, prof, url, email, profile) {
	var data = JSON.parse(profile);
	prof.id(_, url);
	prof.email(_, email);
	prof.firstName(_, data.firstName);
	prof.lastName(_, data.lastName);
	prof.raw(_, profile);
	prof.save(_);
}