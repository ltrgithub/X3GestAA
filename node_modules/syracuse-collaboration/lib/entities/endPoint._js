"use strict";

var sys = require("util");
var x3pool = require("syracuse-x3/lib/pool");
var locale = require("syracuse-core/lib/locale");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");

var _proxyMap = {
	"syracuse": function(_, endpoint) {
		return null;
	},
	"x3": function(_, endpoint) {
		return null;
	},
	"sdata": function(_, endpoint) {
		return null;
	}
}

function _getSolutionDescriptor(_, endpoint) {
	if(endpoint._solutionDescriptor) return endpoint._solutionDescriptor;
	// TODO look for the solution descriptor on the WebServer (not yet implemented)
	var config = require("syracuse-main/lib/nodeconfig").config;
//	console.log("config.x3: " +sys.inspect(config));
	return config && config.x3 && config.x3.solutions && config.x3.solutions[endpoint.x3server(_).serverHost(_)];
}

exports.entity = {
	$properties: {
		description: {
			$title: "Description",
			$linksToDetails: true,
			$isMandatory: true
		},
		application: {
			// deprecate !!!
			$title: "Application",
			$isMandatory: true,
			$isHidden: true
		},
		contract: {
			// deprecate !!!
			$title: "Contract",
			$isMandatory: true,
			$isHidden: true
		},
		dataset: {
			$title: "Name",
			$isMandatory: true,
			$constraints: {
				$isUnique: true
			}
		},
		enableSearch: {
			$title: "Enable search",
			$type: "boolean",
			$default: false
		},
		databaseDriver: {
			$title: "Database driver",
			$enum: ["mongodb"],
			$enumCaptions: ["Mongodb"],
			$isMandatory: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			},
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			},
			$default: "mongodb"
		},
		databaseHost: {
			$title: "Database host",
			$isMandatory: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			},
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			}
		},
		databasePort: {
			$title: "Database port",
			$type: "integer",
			$isMandatory: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			},
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "syracuse"));
			}
		},
		x3ServerFolder: {
			$title: "Server folder",
			$isMandatory: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
			$default: "superv",
			$lookup: {
				entity: "lookupX3Folder",
				field: "name"
			}
		},
		transitionWebServer: {
			$title: "Transition web server",
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
			$isDeveloppementFeature: true
		}/*,
		fusionJsonMode: {
			$title: "Use json for transition client",
			$type: "boolean",
			$constraints: { $isNullable: true },
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
			$default: false
		}*/
	},
	$titleTemplate: "Endpoint",
	$descriptionTemplate: "Endpoints describes services locations",
	$valueTemplate: "{description}",
	$relations: {
		groups: {
			$title: "Groups",
			$type: "groups",
			$inv: "endPoints",
			isComputed: true
		},
		// should rename as application
		applicationRef:{
			$title: "Application",
			$type: "application",
			$inv: "endpoints",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				// set legacy application / contract, to deprecate
				instance.application(_, val.application(_));
				instance.contract(_, val.contract(_));
			}
		},
		x3server: {
			$title: "X3 server",
			$type: "x3server",
			$inv: "endpoints",
			$isMandatory: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
			$isDefined: function(_, instance) {
				return (instance.applicationRef(_) && (instance.applicationRef(_).protocol(_) === "x3"));
			},
		}
	},
	$functions: {
		isSame: function(_, application, contract, dataset, host, port) {
			// TODO: host and port
			return ((application === this.application(_)) && (contract === this.contract(_)) && (dataset === this.dataset(_)));
		},
		getBaseUrl: function(_) {
			return ["/sdata",this.application(_),this.contract(_),this.dataset(_)].join("/");
		},
		getIndexName: function(_) {
			// TODO : does we need to provide an index name or we just concatenate keys ?
			return ([this.application(_),this.contract(_),this.dataset(_)].join(".")).toLowerCase();
		},
		useProxy: function(_) {
			return (this.applicationRef(_) && this.applicationRef(_).protocol(_) && (this.applicationRef(_).protocol(_) !== "syracuse"));
		},
		getProxyMapEntry: function(_) {
			return this.applicationRef(_) && _proxyMap[this.applicationRef(_).protocol(_)] && _proxyMap[this.applicationRef(_).protocol(_)](_, this);
//			return null;
		},
		//
		getOrm: function(_) {
			if(this.applicationRef(_) && (this.applicationRef(_).protocol(_) !== "syracuse")) return null;
			//
			var contract = registry.getContract(this.applicationRef(_).application(_), this.applicationRef(_).contract(_), true);
			var ds = registry.getDataset(_, contract, this.dataset(_));
			if (!ds) return null;
			var model = dataModel.make(contract, this.dataset(_));
			//
			return dataModel.getOrm(_, model, ds);
		},
		// X3 stuff
		getSolutionName: function(_) {
			// load the solution descriptor
			var solutionDesc = _getSolutionDescriptor(_, this);
			return solutionDesc && solutionDesc.solution && solutionDesc.solution.name;
		},
		getApplicationServerName: function(_) {
			var solutionDesc = _getSolutionDescriptor(_, this);
			return solutionDesc && solutionDesc.application && solutionDesc.application.server;
		},
		getApplicationServerBaseUrl: function(_, withFolder, secure) {
			var solutionDesc = _getSolutionDescriptor(_, this);
			var application = solutionDesc && solutionDesc.application;
			return (secure?"https://":"http://")+[application.server+":"+application.mainPort, "Adonix_"+this.getSolutionName(_)].join("/") + (withFolder ? "/" + this.x3ServerFolder(_) : "");
		},
		getWebServerBaseUrl: function(_, withFolder, secure) {
			var x3server = this.x3server(_);
			return (secure?"https://":"http://")+[(x3server.webServer(_) || x3server.serverHost(_))+":"+x3server.webServerPort(_), "Adonix_"+this.getSolutionName(_)].join("/") + (withFolder ? "/" + this.x3ServerFolder(_) : "");
		},
		getFusionPrototypeBaseUrl: function(_, secure) {
			var x3server = this.x3server(_);
			return (secure?"https://":"http://")+[(x3server.webServer(_) || x3server.serverHost(_))+":"+x3server.webServerPort(_), "Adonix_"+this.getSolutionName(_), this.x3ServerFolder(_), "GEN", locale.isoLanguageMap[locale.current.toLowerCase()], "FENW"].join("/");
		},
		getFusionDataServerBaseUrl: function(_, secure) {
			var x3server = this.x3server(_);
			var solutionDesc = _getSolutionDescriptor(_, this);
			var solutionWebServer = this.transitionWebServer(_) || (solutionDesc && solutionDesc.webServers[0] && (solutionDesc.webServers[0].server + ":" + solutionDesc.webServers[0].mainPort)) ||
				((x3server.webServer(_) || x3server.serverHost(_))+":"+x3server.webServerPort(_));
			//
//			if(this.fusionJsonMode(_))
				return (secure?"https://":"http://")+[solutionWebServer, "sdata", "x3", "trans", "-"].join("/");
//			else
//				return (secure?"https://":"http://")+[solutionWebServer, "adxweb", "servlet", "Request.svc"].join("/");
		}
	},
	$searchIndex: {
		$fields: ["applicationRef", "dataset", "groups", "x3server", "x3ServerFolder", "databaseDriver", "databaseHost"]
	}
};