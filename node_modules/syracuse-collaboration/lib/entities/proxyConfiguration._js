"use strict";

var streams = require('streamline/lib/streams/streams');
var httpHelper = require('syracuse-httpclient/lib/helper');

exports.entity = {
	$titleTemplate: "Proxy server configuration",
	$descriptionTemplate: "Configure proxy for HTTP clients",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true
		},
		host: {
			$title: "Host",
			$isMandatory: true,
		},
		port: {
			$title: "Port",
			$isMandatory: true,
		},
		auth: {
			$title: "Authentication",
			$enum: [
				{
					$value: "none",
					$title: "None"
				},
				{
					$value: "basic",
					$title: "Basic"
				},
//				{
//					$value: "digest",
//					$title: "Digest"
//				},
//				{
//					$value: "ntlm",
//					$title: "NTLM"
//				}
			],
			$default: "none"
		},
		user: {
			$title: "User",
			$isHidden: function(_, instance) {
		      var auth = instance.auth(_) || "";
              return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.auth(_) || "";
              return auth !== "none";
            }    
		},
		password: {
			$title: "Password",
			$type: "password",
			$isHidden: function(_, instance) {
		      var auth = instance.auth(_) || "";
                  return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.auth(_) || "";
                  return auth !== "none";
            }  
		},
	},
	$relations: {},
	$functions: {
		toJSON: function(_) {
			var conf = {
				host: this.host(_),
				port: this.port(_)
			};

			var auth = this.auth(_);
			if (auth !== "none") {
				conf.auth = auth;
				conf.user = this.user(_);
				conf.password = this.password(_);
				// TODO: NTLM and Digest authentications
				// domain: "sagefr.adinternal.com",
				// workstation: "server_name"
			}
			return conf;
		},
	},
	$services: {
	    test: {
			$method : "GET",
			$isMethod : true,
			$title : "Test connection",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					var proxy = instance.toJSON(_);
					var opt = {
						method: "GET",
						url: context.httpSession.host + "/syracuse-main/html/main.html",
						proxy: proxy,
						headers: {
							cookie: context.httpSession.cookie
						}
					};
					var request = streams.httpRequest(opt);
					var response = request.end().response(_);
					var statusCode = response.statusCode;

					if (statusCode === 200) {
						instance.$diagnoses.push({severity: "info", message: "OK"});
					} else {
						instance.$diagnoses.push({severity: "error", message: statusCode + ": " + httpHelper.getStatusMessage(statusCode)});
					}

				} catch (e) {
					console.log("Error: "+e.stack);
					instance.$diagnoses.push({severity: "error", message: ""+e});
				}
			}
		},
	}
};