"use strict";

var index = require("syracuse-search/lib/elasticIndex");
var helpers = require("syracuse-core/lib/helpers");
var sys = require("util");

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Search indexes administration",
	$descriptionTemplate: "Administration interface for full text search indexes",
	$properties: {
	},
	$relations: {
		endpoint:{
			$title: "Endpoint",
			$type: "endPoint"
		}
	},
	$functions: {
		$setParameters: function(_, context) {
			// loads the current user profile
			var self = this;
			this.$uuid = this.$key = helpers.uuid.generate();
			this.$created = true;
			//
			this._initialize(_, context);
		}
	},
	$services: {
		updateIndex: {
			$method: "PUT",
			$title: "Index update",
			$isMethod: true,
			$execute: function(_, context, instance) {
				if(!instance.endpoint(_)) {
					context.reply(_, 404,"Please select an endpoint");
					return;
				}
				//
				var ep = instance.endpoint(_);
				var res = {$diagnoses:[]}
//				index.updateIndex(_, context, ep.contract(_), ep.application(_), ep.dataset(_), null, res.$diagnoses);
				index.updateEndpointIndex(_, context, ep, null, res.$diagnoses);
				//
				if(!ep.enableSearch(_)) {
					ep.enableSearch(_, true);
					ep.save(_);
				}
				//
				context.reply(_, 200, res);
			}
		},
		deleteIndex: {
			$method: "DELETE",
			$title: "Delete index",
			$isMethod: true,
			$execute: function(_, context, instance) {
				if(!instance.endpoint(_)) {
					context.reply(_, 404,"Please select an endpoint");
					return;
				}
				//
				var ep = instance.endpoint(_);
//				instance.$etag++;
//				var res = instance.serializeInstance(_);
//				res.$ = res.$ || {};
//				res.$.$diagnoses = res.$.$diagnoses || [];
				var res = {$diagnoses:[]}
				index.deleteEndpointIndex(_, context, ep, null, res.$diagnoses);
				//
				context.reply(_, 200, res);
			}
		}
	}
}