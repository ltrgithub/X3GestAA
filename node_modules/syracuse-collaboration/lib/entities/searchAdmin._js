"use strict";

var index = require("syracuse-search/lib/elasticIndex");
var IndexHelper = index.IndexHelper;
var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Search indexes administration",
	$descriptionTemplate: "Administration interface for full text search indexes",
	$properties: {
		differentialUpdate: {
			$title: "Update modified records only",
			$type: "boolean",
			$default: true
		},
		representations: {
			$title: "Representations",
			$description: "Representations to be indexed. Leave empty for all representations",
			$isArray: true,
			$select: {
				// TODO: should be lookupRepresentation
				entity: "lookupEntity",
				field: "name",
//				parameters: "application={applicationName}&contract={contractName}&dataset={endpointName}"
			}
		}
	},
	$relations: {
		endpoint:{
			$title: "Endpoint",
			$type: "endPoint"
		}
	},
	$functions: {
		$setParameters: function(_, context) {
			// loads the current user profile
			var self = this;
			this.$uuid = this.$key = helpers.uuid.generate();
			this.$created = true;
			//
			this._initialize(_, context);
		}
	},
	$services: {
		updateIndex: {
			$method: "PUT",
			$title: "Index update",
			$isMethod: true,
			$execute: function(_, context, instance) {
				if(!instance.endpoint(_)) {
					context.reply(_, 404,"Please select an endpoint");
					return;
				}
				//
				var config = require("syracuse-main/lib/nodeconfig").config;
				instance.$diagnoses = instance.$diagnoses || [];
				var ep = instance.endpoint(_);
				var h = new IndexHelper(ep);
				h.updateIndex(_, instance.differentialUpdate(_), {
					diagnoses: instance.$diagnoses,
					tracer: config && config.searchEngine && config.searchEngine.tracer,
					representations: instance.representations(_) 
					//tracer: console.log
				});
/*				h.updateIndex(null, instance.differentialUpdate(_), {
					//diagnoses: instance.$diagnoses,
					tracer: config && config.searchEngine && config.searchEngine.tracer,
					representations: instance.representations(_) 
					//tracer: console.log
				});*/
				instance.$addDiagnose("info", "Indexing in progress");
				//
				if(!ep.enableSearch(_)) {
					ep.enableSearch(_, true);
					ep.save(_);
				}
			}
		},
		deleteIndex: {
			$method: "DELETE",
			$title: "Delete index",
			$isMethod: true,
			$execute: function(_, context, instance) {
				if(!instance.endpoint(_)) {
					context.reply(_, 404,"Please select an endpoint");
					return;
				}
				//
				var ep = instance.endpoint(_);
				instance.$diagnoses = instance.$diagnoses || [];
				index.deleteEndpointIndex(_, ep, "", instance.$diagnoses);
				index.deleteEndpointIndex(_, ep, locale.current, instance.$diagnoses);
			}
		},
		deleteFunctionsIndex: {
			$method: "DELETE",
			$title: "Delete functions index",
			$isMethod: true,
			$execute: function(_, context, instance) {
				//
				var ep = instance.endpoint(_);
				instance.$diagnoses = instance.$diagnoses || [];
				index.deleteIndex(_, null, "sage.x3.functions", instance.$diagnoses);
				index.deleteIndex(_, null, "sage.x3.functions." + locale.current.toLowerCase(), instance.$diagnoses);
			}
		},
		schedule: {
			$method: "POST",
			$title: "Schedule index update",
			$isMethod: true,
			$parameters: {
				$url: "{$baseUrl}/selectScheduler/$template/$workingCopies?representation=selectScheduler.$edit",
				$method: "POST",
				$properties: {}	
			},
			$urlParameters: "scheduler={$uuid}&",
			$execute: function(_, context, instance) {
				
			}
		}
	}
}
