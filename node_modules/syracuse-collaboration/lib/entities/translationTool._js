"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var translation = require("syracuse-translation/lib/translation");
var jsurl = require("jsurl");
var helpers = require("syracuse-core/lib/helpers");

exports.entity = {
	$isPersistent : false,
	$canSave : false,

	$titleTemplate : "Translation",
	$descriptionTemplate : "Translation of syracuse messages and administration data",
	$valueTemplate : "{description}",
	$relations : {
		endpoint : {
			$title : "Production environnement endpoint",
			$description : "Select the endpoint used as reference for translation teams",
			$type : "endPoint",
			$isMandatory : true,
			$isDefined : true,
			$lookupFilter : {
				protocol : "x3"
			}
		}
	},
	$functions : {
		getProductionEndpoint : function(_, instance) {
			console.log("*******getProductionEndpoint: " + sys.inspect(this.serializeInstance(_)));
			//console.log("___________endp:  " +sys.inspect(instance.endpoint(_))) ;
			return instance.endpoint(_);
		},
		$setId : function(_, context, id) {
			console.log("$setId " + id);
		}
	},
	$services : {
		fromSyracuseToX3 : {
			$method : "POST",
			$isMethod : true,
			$title : "Syracuse -> X3",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				instance.$diagnoses = instance.$diagnoses || [];
				if (parameters) {
					parameters.$diagnoses = instance.$diagnoses;
				}
				console.log("extractResources");
				translation.extractResources(_, instance, parameters, context);

			}
		},
		fromX3toSyracuse : {
			$method : "POST",
			$isMethod : true,
			$title : "X3 -> Syracuse",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				translation.updateResources(_, instance, parameters, context);
			}
		},
		fromSyracuseToX3Admin : {
			$method : "POST",
			$isMethod : true,
			$title : "Admin resources, Syracuse -> X3",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				try {

					instance.$diagnoses = instance.$diagnoses || [];

					if (parameters) {
						parameters.$diagnoses = instance.$diagnoses;
					}
					translation.extractAdminResources(_, instance, parameters, context);
				} catch (e) {
					console.log("fromSyracuseToX3Admin ERROR\n" + e.stack);
				}
			}
		},
		fromX3toSyracuseAdmin : {
			$method : "POST",
			$isMethod : true,
			$title : "Admin resources, X3 -> Syracuse",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				translation.updateAdminResources(_, instance, parameters, context);
			}
		},
		fromSyracuseToX3Dotnet : {
			$method : "POST",
			$isMethod : true,
			$title : "Dotnet resources, Syracuse -> X3",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				try {

					instance.$diagnoses = instance.$diagnoses || [];

					if (parameters) {
						parameters.$diagnoses = instance.$diagnoses;
					}
					translation.extractDotnetResources(_, instance, parameters, context);
				} catch (e) {
					console.log("fromSyracuseToX3Dotnet ERROR\n" + e.stack);
				}
			}
		},
		fromX3toSyracuseDotnet : {
			$method : "POST",
			$isMethod : true,
			$title : "Dotnet resources, X3 -> Syracuse",
			$invocationMode : "async",
			$execute : function(_, context, instance, parameters) {
				translation.updateDotnetResources(_, instance, parameters, context);
			}
		},
		deleteAll : {
			$method : "POST",
			$isMethod : true,
			$title : "Delete All",
			$execute : function(_, context, instance, parameters) {
				translation.deleteAll(_, instance, parameters, context);
			}
		},
		testCreate : {
			$method : "POST",
			$isMethod : true,
			$title : "TEMP test creation",
			$execute : function(_, context, instance) {
				console.log("test create");
				var db = instance.endpoint(_).getOrm(_);
				var ent = db.getEntity(_, "APLSTD", "$edit");
				var inst = ent.createInstance(_, db);
				inst.LANCHP(_, 10030);
				inst.LANNUM(_, 102);
				inst.LANMES(_, "Test message from crnit");
				inst.LAN(_, "ENG");
				inst.save(_);
				// copy diags
				instance.$diagnoses = instance.$diagnoses || [];
				inst.getAllDiagnoses(_, instance.$diagnoses, {
					addPropName : true,
					addEntityName : true
				});
				console.log("diags: " + sys.inspect(instance.$diagnoses));
			}
		}
	}
};