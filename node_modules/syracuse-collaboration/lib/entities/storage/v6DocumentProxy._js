"use strict";

var jsurl = require("jsurl");
var streams = require("streamline/lib/streams/streams");

function _deleteDocument(_, docUrl, headers) {
	var par = {
		url: docUrl,
		method: "DELETE",
		headers: headers
	};
	var resp = streams.httpRequest(par).end().response(_);
	try {
		var content = JSON.parse(resp.readAll(_));
		return {
			statusCode: resp.statusCode,
			$diagnoses: content && content.$diagnoses
		};
	} catch (e) {
		return {
			statusCode: 500,
			$diagnoses: [{
				$severity: "error",
				$message: e.message
			}]
		};
	}
}

exports.entity = {
	$isPersistent: false,
	$canEdit: false,
	$canDelete: false,
	$capabilities: "",
	$properties: {
		content: {
			$title: "Document",
			$type: "binary",
			$storage: "proxy",
			$url: function(_, instance) {
				return instance._properties.docUrl;
			}
		},
		parameters: {
			$isHidden: true,
			$compute: function(_, instance) {
				return jsurl.toString(instance._properties);
			}
		}
	},
	$functions: {
		$setParameters: function(_, context) {},
		$setId: function(_, context, id) {
			var self = this;
			var params = (context && context.parameters) || {};
			params.fileName = id; // x3keys
			switch (params.what) {
				case "V6WORD":
				case "V6EXCEL":
					params.docUrl = params.v6DocUrl + (params.v6DocUrl.indexOf("?") >= 0 ? "&" : "?") + "buildevenlope=true";
					delete params.v6DocUrl;
					break;
				case "V7WORD":
					// find V7 document
					var d = self._db.fetchInstance(_, self._db.getEntity(_, "document"), {
						jsonWhere: {
							className: params.className,
							x3Keys: id,
							representationName: params.reprName
						}
					});
					params.docUrl = d && d.computeUrl();
					break;
			}
			self._properties = params;
		}
	},
	$services: {
		deleteDocument: {
			$title: "Delete document",
			$method: "POST",
			$isMethod: true,
			$confirm: "The document will be deleted. Do you want to continue ?",
			$urlParameters: "parameters={parameters}",
			$execute: function(_, context) {
				var p = context.parameters && context.parameters.parameters && jsurl.parse(context.parameters.parameters);
				//
				return _deleteDocument(_, p.v6DocUrl, context.request.headers);
			}
		}
	}
};