"use strict"

var Template = require("syracuse-core/lib/resource/resourceProxy").Template;
var fsp = require("path");
var globals = require("streamline/lib/globals");
var helpers = require("syracuse-core/lib/helpers");

var _pathSolverMap = {
	"file": function(_, volume, fileName) {
		var path = volume.path(_).replace(/\\/g, "/");
		var session = globals.context.session;
		var userLogin = (session && session.getUserLogin(_)) || "anonymous";
		path = (new Template(path)).resolve({
			syracuse: "../../../..",
			user: userLogin
		});
		//
		return fsp.join(__dirname, path, fileName);
	}, 
	"db_file": function(_, volume, fileName) {
		return helpers.uuid.generate();
	}
}

var _browseLinkMap = {
	"file": {
		$title: "List of files",
		$url: "{$baseUrl}/storageVolumeItems?representation=storageVolumeItem.$query&volume={$uuid}",
		$target: "blank"
	},
	"db_file":{
		$title: "List of files",
		$url: "{$baseUrl}/documents?representation=document.$query&where=(volume eq \"{$uuid}\")",
		$target: "blank"
	}
}

exports.entity = {
	$titleTemplate: "Storage volume",
	$valueTemplate: "{description}",
	$properties: {
		code: {
			$title: "Code"
		},
		description: {
			$title: "Description",
			$isMandatory: true,
			$isLocalized: true,
			$constraints: {
				$isUnique: true
			}
		},
		storageType: {
			$title: "Storage",
			$enum: ["db_file", "rest", "file"],
			$enumCaptions: ["Syracuse Standard", "Web Server", "File"],
			$default: "db_file",
			$control: function(_, instance, val) {
				// check if there is a document
//				if(instance.content(_) && instance.content(_).fileExists(_))
//					throw new Error(locale.format(module, "storageTypeChange"));
			},
			$propagate: function(_, instance, val) {
				// reset property store to allow creating the appropriate type
//				instance._propertyStores["content"] = null;
			},
			$isDisabled: function(_, instance) {
//				return (instance.content(_) && instance.content(_).fileExists(_));
				return false;
			}
		},
		path: {
			$title: "Path",
			$isDefined: function(_, instance) {
				return (instance.storageType(_) === "file");
			}
		},
		dynamic: {
			$title: "Dynamic",
			$type: "boolean",
			$description: "Automatic content update",
			$isDefined: function(_, instance) {
				return (instance.storageType(_) === "file");
			}
		}
	},
	$functions: {
		resolvePath: function(_, fileName) {
			return (_pathSolverMap[this.storageType(_)] && _pathSolverMap[this.storageType(_)](_, this, (fileName || ""))) || fileName;
		},
		mustStoreMeta: function(_) {
			return (this.storageType(_) === "db_file");
		},
		storeContentMeta: function(_, store) {
			// create a document
			var document = this._db.model.getEntity("document").factory.createInstance(_, null, this._db);
			document.volume(_, this);
			document.description(_, store.getProperties(_).fileName);
			document.content(_).attach(_, store);
			document.save(_);
		}
	},
	$links: {
		$browse: function(_, instance) {
			return _browseLinkMap[instance.storageType(_)] || {};
		}
	}
}