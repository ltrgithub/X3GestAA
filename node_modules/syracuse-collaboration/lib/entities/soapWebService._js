"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var util = require("util");
var wsdlGenerator = require('syracuse-soap/lib/server/wsdlGenerator');

exports.entity = {
	$titleTemplate: "SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Web Service",
	$listTitle: "List of SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$constraints: {
				$isUnique: true
			}
		},
		description: {
			$title: "Description",
			$isMandatory: true
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			}
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			}
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			}
		},
		wsdl: {
			$title: "WSDL",
		},
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "soapWebServices",
			$isDefined: true,
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				var inst = instance.entities(_);
				for (var rel in inst._data){
					inst.deleteInstance(_,rel);
				}

			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isDefined: true,
			$propagate: function(_, instance, val) {
				var inst = instance.entities(_);
				for (var rel in inst._data){
					inst.deleteInstance(_,rel);
				}
				instance.wsdl(_, instance.endpoint(_).getBaseUrl(_).replace("/sdata/", "/soap/") + "/" + instance.name(_) + ".wsdl");

			}
		},
		entities: {
			$title: "Entities",
			$type: "soapEntities",
			$isChild: true,
			$select: {
				$title: "Entities",
				$type: "lookupEntity",
				$fieldMap: { name: "name", title: "title"},
				$parameters: "application={applicationName}&contract={contractName}&dataset={endpointName}"
			}
		},
		


	},
	
	$functions: {

		TEST: function(_, instance) {
			var wsdl = wsdlGenerator.generate(_, instance.name(_), instance._context, instance.entities(_).toArray(_));
			
			var buf = new Buffer(wsdl, 'utf8').toString('binary');

			if (buf != null && buf.length !== 0){

				var props = {
						length: buf.length,
						contentType: "text/xml;charset=UTF-8",
						fileName: instance.name(_) + ".wsdl"
				}
			
				var store = instance.wsdl(_);

				var stream = store.createWritableStream(_, props);
				stream.write(_, buf, "binary");
				stream.write(_, null);
				
			}
		}
	},

	
	$uniqueConstraints: [["name"]]
}