"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var t9n = require("syracuse-translation/lib/translation");
var TranslationProcess = t9n.TranslationProcess;
var jsurl = require("jsurl");
var helpers = require("syracuse-core/lib/helpers");

var fs = require('streamline-fs');
var fsp = require("path");
var flows = require('streamline/lib/util/flows');

var locked = false;

exports.entity = {
	$isPersistent: false,
	$canSave: false,

	$titleTemplate: "Translation",
	$descriptionTemplate: "Translation of syracuse messages and administration data",
	$valueTemplate: "{description}",
	$properties: {
		// conflictPolicy: {
		// 	$title: "Conflict policy",
		// 	$enum: [{
		// 		$value: "none",
		// 		$title: "None"
		// 	}, {
		// 		$value: "source",
		// 		$title: "Resolve using source"
		// 	}, {
		// 		$value: "target",
		// 		$title: "Resolve using target"
		// 	}, {
		// 		$value: "index",
		// 		$title: "Resolve using index"
		// 	}],
		// 	$default: "none"
		// },
		syracuse: {
			$title: "Syracuse resources",
			$type: "boolean",
			$default: true
		},
		dotnet: {
			$title: "DotNet resources",
			$type: "boolean",
			$default: true
		},
		admin: {
			$title: "Admin resources",
			$type: "boolean",
			$default: true
		},
		filterAdmin: {
			$title: "Filter admin resources",
			$type: "boolean",
			$default: true
		},
		resetIndex: {
			$title: "Reset index",
			$type: "boolean",
			$default: false
		},
		ignoreIndexEndpoint: {
			$title: "Ignore index endpoint",
			$type: "boolean",
			$default: true
			// $isHidden:false
		},
		ignoreChecksum: {
			$title: "Ignore checksum",
			$type: "boolean",
			$default: true
			// $isHidden:false
		},
		loadFromIndex: {
			$title: "Load from index (reinject only)",
			$type: "boolean",
			$isHidden: false
		},
		noDBStore: {
			$title: "No DB Store",
			$type: "boolean",
			$default: false
			// $isHidden:false
		},
		verify: {
			$title: "Verify (extract only)",
			$type: "boolean",
			$isHidden: true
		},
		// filename: {
		// 	$title: "File name",
		// 	$type: "string"
		// },
		// log: {
		// 	$title: "Log",
		// 	// $type: "binary",
		// 	// $storage: "file",
		// 	// $isReadOnly: true,
		// 	$default: "...",
		// 	$compute: function(_, instance) {
		// 		console.log("$compute: " + instance.__data);
		// 		return instance.__data || "...";
		// 	}
		// }
	},
	$relations: {
		endpoint: {
			$title: "Production environnement endpoint",
			$description: "Select the endpoint used as source of texts translation",
			$type: "endPoint",
			// $isMandatory: true,
			$isDefined: true,
			$lookupFilter: {
				// for testing purposes, comment filter
				//protocol: "x3"
			}
		}
	},
	$services: {
		downloadLog: {
			$method: "GET",
			$isMethod: true,
			$title: "Download log",
			$type: "application/x-file",
			$execute: function(_, context, instance) {
				return {
					headers: {
						"content-type": "text/plain"
					},
					body: fs.readFile(t9n.getLogFile(), "utf8", _)
				};
			}
		},

		toSyracuse: {
			$method: "POST",
			$isMethod: true,
			$title: "1: Update Syracuse Resources",
			$invocationMode: "async",
			$isDisabled: function(_, instance) {
				return (!instance.noDBStore(_) && !instance.endpoint(_)) || locked;
			},
			$execute: function(_, context, instance, parameters) {
				try {
					instance.$diagnoses = instance.$diagnoses || [];
					if (locked) {
						throw new Error("Translation process is in progress on another session");
					}
					locked = true;
					var translation = new TranslationProcess(_, context, makeOptions(_, context, instance, parameters));
					translation.updateAll(_);
				} catch (e) {
					console.log("exception: " + (e.message || e) + "\n" + e.stack);
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message || e,
						$stackTrace: e.stack
					});
				}
				locked = false;
			}
		},

		fromSyracuse: {
			$method: "POST",
			$isMethod: true,
			$title: "2: Update Translation Messages",
			$invocationMode: "async",
			$isDisabled: function(_, instance) {
				return (!instance.noDBStore(_) && !instance.endpoint(_)) || locked;
			},
			$execute: function(_, context, instance, parameters) {
				try {
					instance.$diagnoses = instance.$diagnoses || [];
					if (locked) {
						throw new Error("Translation process is in progress on another session");
					}
					locked = true;
					var translation = new TranslationProcess(_, context, makeOptions(_, context, instance, parameters));
					translation.extractAll(_);
					// p.init(_, fsp.join(__dirname, "../../../translation-indexes", "translation.log"));
				} catch (e) {
					console.log("exception: " + (e.message || e) + "\n" + e.stack);
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message || e
					});
				}
				locked = false;
			}
		},

		updateIndexfromCsv: {
			$method: "POST",
			$isMethod: true,
			$title: "Update index from csv",
			$invocationMode: "async",
			$isDisabled: function(_, instance) {
				return (!instance.noDBStore(_) && !instance.endpoint(_)) || locked;
			},
			$execute: function(_, context, instance, parameters) {
				try {
					instance.$diagnoses = instance.$diagnoses || [];
					if (locked) {
						throw new Error("Translation process is in progress on another session");
					}
					locked = true;
					var translation = new TranslationProcess(_, context, makeOptions(_, context, instance, parameters));
					translation.updateIndexfromCsv(_);
					// p.init(_, fsp.join(__dirname, "../../../translation-indexes", "translation.log"));
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message || e
					});
				}
				locked = false;
			}
		},

		deleteAll: {
			$method: "POST",
			$isMethod: true,
			$confirm: "You are about to delete all messages of the selected resource types from the translation storage.\n\nDo you confirm the deletion?",
			$title: "Delete all messages",
			$invocationMode: "async",
			$isDisabled: function(_, instance) {
				return (!instance.noDBStore(_) && !instance.endpoint(_)) || locked;
			},
			$execute: function(_, context, instance, parameters) {
				try {
					instance.$diagnoses = instance.$diagnoses || [];
					if (locked) {
						throw new Error("Translation process is in progress on another session");
					}
					locked = true;
					var translation = new TranslationProcess(_, context, makeOptions(_, context, instance, parameters));
					translation.deleteAll(_);
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message || e
					});
				}
				locked = false;
			}
		},

		transformResourceFile: {
			$method: "POST",
			$isMethod: true,
			$title: "Transform mobile resources",
			$isDisabled: function(_, instance) {
				return false;
			},
			$execute: function(_) {
				var fpath = fsp.join(__dirname, "../../../syracuse-mobile/html/mobile/js/resources", "mobile-en.json");
				var newfpath = fsp.join(__dirname, "../../../syracuse-mobile/html/mobile/js/resources", "mobile1-en.json");

				function addEl(_, key, content) {
					console.log("addEl key: " + key + " content: " + content);
					keys.push(key);
					console.log("keys*********: " + JSON.stringify(keys, null, 2));

					if (typeof content === "string") {
						var newkey = keys.join('.');
						result[newkey] = content;
					} else if (typeof content === "object" && !content.length) {
						flows.eachKey(_, content, addEl);
					} else if (typeof content === "object" && content.length) {
						content.forEach_(_, function(_, el, idx) {
							addEl(_, el, el);
						});
					}
					keys.pop();
				}

				var result = {},
					keys = [],
					input, parsed;
				try {
					input = fs.readFile(fpath, "utf8", _);
				} catch (ex) {
					console.log("can not read file:  " + fpath);
				}

				try {
					parsed = JSON.parse(input);
				} catch (e) {
					console.log("incorrectJsonFormat ");
					return;
				}
				flows.eachKey(_, parsed, addEl);

				fs.writeFile(newfpath, JSON.stringify(result, null, 2), "utf8", _);
			}
		}
	}
};

function makeOptions(_, context, instance, parameters) {
	var t = context && context.tracker,
		options = parameters || {};
	options.$tracking = t ? (t.$diagnoses = t.$diagnoses || []) : null;
	options.$addDiagnosis = instance.$addDiagnose;
	options.resources = {
		syracuse: instance.syracuse(_),
		dotnet: instance.dotnet(_),
		admin: instance.admin(_)
	};
	["noDBStore", "resetIndex", "loadFromIndex", "ignoreIndexEndpoint", "verify", "ignoreChecksum", "filterAdmin"].forEach_(_, function(_, opt) {
		options[opt] = instance[opt](_);
	});

	options.endpoint = (options.noDBStore && adminHelper.getCollaborationEndpoint(_)) || instance.endpoint(_);
	return options;
}