"use strict";

var _mgr = require('syracuse-x3/lib/convergence/records/recordMgr').recordMgr;

// This entity is not persistent 
// Data are provided on demand by recordMgr.cvgRecordsGet
exports.entity = {
	$lockType: "noLock",
	$canDelete: true,
	$canCreate: false,
	$canEdit: false,
	$capabilities: "",
	$isPersistent: false,
	$titleTemplate: "Convergence records entities",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties:{ 
		fileName: {
			$title: "fileName"
		},
		creationDate: {
			$title: "creationdate",
			$type: "datetime"
		},
		lastModifDate: {
			$title: "lastModification",
			$type: "datetime"
		}
	},
	$functions: {	
		// Its works by overriding parent method
		deleteSelf: function(_) {
			try{
				_mgr.cvgRecordDelete(_, this.fileName(_));	
				return true;
			}catch(e){
				this.deleteError = e.message;
				this.$addError(e.message);
				console.log("cvgRecord.deleteSelf error - $key:"+this.$key+"; message: "+e.message+"\n"+e.stack);
				return false;
			}
		},
		$setId: function(_, context, id) {
			var record=_mgr.cvgRecordGet(_, id);
			if (record==null) throw new Error ("Record file [" + id +"] not found");
			// fulfill instance
			for (var p in record){
				this[p](_, record[p]);
			}
		}
	},
	$services: {
	    play: {
			$method : "GET",
			$confirm: "You are going to launch record's player.\n\nDo you confirm this operation ?",
			$isMethod : true,
			$title : "Play record",
			$execute : function(_, context) {
				try{
					var inst=context.instance;
					if (inst){
						var fileName=inst.fileName(_);
						_mgr.cvgRecordPlay(_, fileName, context);
					}else throw new Error ("Instance not found in context");
					return {$diagnoses: [{severity: "info", message: "Record '" + fileName + "' has been played successfully"}]};
				}catch(e){
					if (typeof e != "object") e = new Error(e);
					return {$diagnoses: [{severity: "error", message: e.message, detail:e.stack}]};
				}
			}
		}
	},
	$fetchInstances: function(_, context, parameters) {
		var result = [], self = this;
		try{
			var entity = context.db.model.getEntity("cvgRecord");
			var records = _mgr.cvgRecordsGet(_);
			records.forEach_(_, function(_, record) {
				var inst = entity.factory.createInstance(_, null, context.db);
				for (var p in record){
					if (inst[p]) inst[p](_, record[p]);
				}
				inst.$uuid=record.fileName;
				inst.$key=record.fileName;
				result.push(inst);
			});	
		}catch(e){
			console.log("$fetchInstances - ERROR - " + e.stack)
			throw e;
		}
		return result;
	},
	$defaultOrder: [["fileName", true]]
}