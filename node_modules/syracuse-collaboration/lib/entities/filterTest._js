"use strict"

var helpers = require("syracuse-core/lib/helpers");
var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");

exports.entity = {
	$titleTemplate: "Filter test",
	$isPersistent: true,
	$canEdit: true,
	$properties: {
		application: {
			$isHidden: true
		},
		contract: {
			$isHidden: true
		},
		dataset: {
			$isHidden: true
		},
		entity: {
			$title: "Entity",
			$isMandatory: true,
			$linksToDetails: true,
			$lookup: {
				entity: "lookupEntity",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}"
			},
			$propagate: function(_, instance, val) {
				var ep = instance.endpoint(_);
				if(!ep) return;
				var contract = sdataRegistry.getContract(ep.applicationRef(_).application(_), ep.applicationRef(_).contract(_));
				if(!contract) return;
				var model = dataModel.make(contract, ep.dataset(_));
				if(!model) return;
				instance.representation(_, model.singularize(instance.entity(_)));
				instance.computePrototype(_);
				
			}
		},
		representation: {
			$title: "Representation",
			$isMandatory: true,
			$lookup: {
				entity: "lookupRepresentation",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}&entity={entity}"
			}
		},
		filter: {
			$title: "Filter",
			$type: "string"
//			$type: "filter"
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if(val) {
					instance.application(_, val.applicationRef(_).application(_));
					instance.contract(_, val.applicationRef(_).contract(_));
					instance.dataset(_, val.dataset(_));
				} else {
					instance.application(_, "");
					instance.contract(_, "");
					instance.dataset(_, "");
				}
			}
		},
	},
	$functions: {
		$serialize: function(_) {
			var self = this;
			self.computePrototype(_);
			var res = self._internalSerialize(_);
			return res;
		},
		computePrototype: function(_) {
			var self = this;
			var ep = self.endpoint(_);
			if(ep) {
				var contract = sdataRegistry.getContract(ep.applicationRef(_).application(_), ep.applicationRef(_).contract(_));
				if (contract) {
					var model = dataModel.make(contract, ep.dataset(_));
					if (model) {
						self.representation(_, model.singularize(self.entity(_)));
						var entity = contract.entities[model.singularize(self.entity(_))];
						if (entity) {
							self.$properties = self.$properties || {};
							self.$properties.filter = self.$properties.filter || {
								$filter: { }
							}
							// TODO: Localize
							self.$properties.filter.$title = "Filter: " + (entity.$titleTemplate && entity.$titleTemplate.expression);

							var $fprops = self.$properties.filter.$filter.$properties = { };
							Object.keys(entity.$properties).map(function($property) {
								$fprops[$property] = entity.$properties[$property];
							});
						}
					}
				}
			}
		}
	}
}