"use strict";

var date = require("syracuse-core/lib/types/date");
var globals = require('streamline/lib/globals');

var templatePresetValues = {
	"msoReportTemplate.$edit": {
		"templateType":  "report",
		"templateClass":  "{templateClass}",
		"localeCode":  "{templateLocale}"
	},
	"msoMailMergeTemplate.$edit": {
		"templateType":  "mailmerge",
		"templateClass":  "{templateClass}",
		"localeCode":  "{templateLocale}"
	}
};

function _getProperties(_, instance) {
	var prop = instance.content(_);
	return (prop && prop.fileExists(_) && prop.getProperties(_)) || {};
}

exports.entity = {
	$titleTemplate: "Document template",
	$valueTemplate: "{description}",
	$descriptionTemplate: "Word template management",
	$listTitle: "List of templates",

	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true,
			$linksToDetails: true
		},
		documentType: {
			$title: "Document type",
			$compute: function(_, instance, propName) {
				return _getProperties(_, instance).contentType;
			}
		},
		documentDate: {
			$title: "Upload date",
			$type: "date",
			$compute: function(_, instance, propName) {
				var upDate = _getProperties(_, instance).uploadDate;
				return upDate && date.fromJsDate(upDate);
			}
		},
		fileName: {
			$title: "Filename",
			$compute: function(_, instance, propName) {
				return _getProperties(_, instance).fileName;
			}
		},
		templateType: {
			$title: "Template type",
			$type: "string",
			$isDisabled: true,
			$enum: [{
				$title: "Report",
				$value: "report"
			}, {
				$title: "Mail merge",
				$value: "mailmerge"
			}],
			$default: "report"
		},
		templateClass: {
			$type: "string",
			$title: "Template class",
			$isDisabled: true
		},
		uri: {
			$title: "Uri",
			$isDisabled: function(_, instance) {
				return (instance.content(_) && instance.content(_).fileExists(_));
			},
			$isDefined: function(_, instance) {
				return false;
			}		
		},
		isReadOnly: {
			$title: "Read only",
			$type: "boolean",
			$default: false
		},
		content: {
			$title: "Content",
			$type: "binary",
			$storage: function(_, instance) { 
				return "db_file"; 
			},
			$propagate: function(_, instance, val) {
				if(!instance.description(_) && val && val.fileName)
					instance.description(_, val.fileName);
			}
		},
		localeCode: {
			$title: "Locale code",
			$isMandatory: false,
			$isDisabled: true,
			$lookup: {
				entity: "lookupLocale",
				field: "name"
			}
		}
	},
	$relations: {
		teams: {
			$title: "Teams",
			$type: "teams",
			$inv: "msoWordTemplateDocument"
		},
		owner: {
			$title: "Owner",
			$type: "user",
			$isMandatory: true
		},
		tags: {
			$title: "Tags",
			$type: "documentTags",
			$inv: "msoWordTemplateDocument"
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: false,
			$propagate: function(_, instance, val) {
				if(val) {
				} else {
				}
			}
		}
	},
	$init: function(_, instance) {
		var self = this;
		var up = globals.context && globals.context.session && globals.context.session.getUserProfile(_);
		up && instance.owner(_, up.user(_));

		var params = (((globals.context && globals.context.request && globals.context.request.context) || {}).parameters || {});
		if (params.representation) {
			var values = templatePresetValues[params.representation];
			if (values) {
				Object.keys(values).forEach_(_, function(_, key) {
					var value = values[key];
					var setter = instance[key];
					var val = value && value.replace(/\{(.*?)\}/g, function(match, p1) {
						return params[p1] || "";
					});
					if (val)
						instance[key](_, val);
				});
			}
		}
	}
}
