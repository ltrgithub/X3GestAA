"use strict";

var helpers = require("syracuse-core/lib/helpers");
var msoffice = require("msoffice/lib/helpers");
var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");

exports.entity = {
	$entityName: "msoMailMergeDS",

	$titleTemplate: "Mail merge datasource",
	$descriptionTemplate: "Mail merge datasource",
	$valueTemplate: "{title}",

	$isPersistent: false,
	$canEdit: false,
	$createActionTitle: "New datasource",
	$listTitle: "List of datasources",

	$properties: {
		application: {
			$isHidden: true
		},
		contract: {
			$isHidden: true
		},
		dataset: {
			$isHidden: true
		},
		title: {
			$title: "Title"
		},
		representation: {
			$title: "Representation",
		},
		entity: {
			$title: "Entity",
			$isMandatory: true,
			$lookup: {
				entity: "lookupEntity",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}"
			},
			$propagate: function(_, instance, val) {
				var ep = instance.endpoint(_);
				if (!ep) return;
				var contract = sdataRegistry.getContract(ep.applicationRef(_).application(_), ep.applicationRef(_).contract(_));
				if (!contract) return;
				var model = dataModel.make(contract, ep.dataset(_));
				if (!model) return;
				instance.representation(_, model.singularize(instance.entity(_)));
				var entity = contract.entities[model.singularize(instance.entity(_))];
				if (entity && !instance.title(_)) instance.title(_, entity.$listTitle || val);
			}
		},
		menuItem: {
			$title: "Menu item",
			$type: "menuItem",
			$propagate: function(_, instance, val) {
				if (val) {
					instance.entity(_, val.entity(_));
					instance.representation(_, val.representation(_));
					instance.title(_, val.title(_));
				} else {
					instance.entity(_, "");
					instance.representation(_, "");
					instance.title(_, "");
				}
			},
			$lookupFilter: {
				application: "{endpoint}.{applicationRef}",
				linkType: "$representation",
				facet: "$query"
			}
		},
		fetchCount: {
			$title: "Count",
		},
		serviceUrl: {
			$title: "Service url",

			$isDisabled: true,
			$compute: function(_, instance) {
				return instance.computeServiceUrl(_);
			}
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if (val) {
					instance.application(_, val.applicationRef(_).application(_));
					instance.contract(_, val.applicationRef(_).contract(_));
					instance.dataset(_, val.dataset(_));
				} else {
					instance.application(_, "");
					instance.contract(_, "");
					instance.dataset(_, "");
				}
			}
		},
	},
	$functions: {
		computeServiceUrl: function(_) {
			if (this.endpoint(_) && this.entity(_) && this.representation(_)) {
				var params = ["representation=" + this.representation(_) + ".$query",
					"count=" + this.fetchCount(_)
				];

				return (
					["",
						"sdata",
						this.endpoint(_).applicationRef(_).application(_),
						this.endpoint(_).applicationRef(_).contract(_),
						this.endpoint(_).dataset(_),
						this.entity(_)
					].join("/") + "?" + params.join("&"));
			} else return "";
		}
	},
};