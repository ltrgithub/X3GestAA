"use strict"

var helpers = require("syracuse-core/lib/helpers");
var excelHelpers = require("msoffice/lib/helpers");
var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var streams = require("streamline/lib/streams/streams");

exports.entity = {
	$titleTemplate: "Select datasource",
	$isPersistent: false,
	$canEdit: false,
	$createActionTitle: "New datasource",
	$listTitle: "List of datasources",
	$properties: {
		title: {
			$title: "Title"
		},
		application: {
			$isHidden: true
		},
		contract: {
			$isHidden: true
		},
		dataset: {
			$isHidden: true
		},
		forceQueryMode: {
			$title: "Query mode read (temp)",
			$type: "boolean",
			$default: false,
			$isHidden: true,
			$isDeveloppementFeature: true
		},
		entity: {
			$title: "Entity",
			$isMandatory: true,
			$lookup: {
				entity: "lookupEntity",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}"
			},
			$propagate: function(_, instance, val) {
				var ep = instance.endpoint(_);
				if(!ep) return;
				var contract = sdataRegistry.getContract(ep.applicationRef(_).application(_), ep.applicationRef(_).contract(_));
				if(!contract) return;
				var model = dataModel.make(contract, ep.dataset(_));
				if(!model) return;
				instance.representation(_, model.singularize(instance.entity(_)));
				//
				//instance.computeServiceUrl(_);
				//
				var entity = contract.entities[model.singularize(instance.entity(_))];
				if(entity && !instance.title(_))
					instance.title(_, entity.$listTitle || val);
			}
		},
		representation: {
			$title: "Representation",
			$isMandatory: true,
			$lookup: {
				entity: "lookupRepresentation",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}&entity={entity}"
			}
		},
		serviceUrl: {
			$title: "Service url",
			
				$isDisabled: true
			,
			$compute: function(_, instance) {
				return instance.computeServiceUrl(_);
			}
		},
		fetchAll: {
			$title: "Fetch all",
			$type: "boolean",
			$default: false
		},
		fetchLimit: {
			$title: "Fetch limit",
			$type: "integer",
			$default: 1000,
			$isDefined: function(_, instance) {
				return !instance.fetchAll(_);
			}
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if(val) {
					instance.application(_, val.applicationRef(_).application(_));
					instance.contract(_, val.applicationRef(_).contract(_));
					instance.dataset(_, val.dataset(_));
				} else {
					instance.application(_, "");
					instance.contract(_, "");
					instance.dataset(_, "");
				}
				//
				//instance.computeServiceUrl(_);
			}
		},
		menuItem: {
			$title: "Menu item",
			$type: "menuItem",
			$propagate: function(_, instance, val) {
				if(val) {
					instance.entity(_, val.entity(_));
					instance.representation(_, val.representation(_));
					instance.title(_, val.title(_));
				} else {
					instance.entity(_, "");
					instance.representation(_, "");
					instance.title(_, "");
				}
				//
				//instance.computeServiceUrl(_);
			},
			$lookupFilter: {
				application: "{endpoint}.{applicationRef}",
				linkType: "$representation",
				facet: "$query"
			}
		},
		orderBys: {
			$title: "Order by",
			$type: "excelOrderAttrs",
			$isChild: true,
			$select: {
				$title: "Attributes",
				$type: "lookupEntityAttr",
				$fieldMap: { name: "name", title: "title" },
				$parameters: "application={application}&contract={contract}&dataset={dataset}&entity={entity}"
			}
		}
	},
	$functions: {
		$save: function(_, saveRes) {
			saveRes.$clientAgent = saveRes.$clientAgent || {};
			saveRes.$clientAgent.$id = "excelDatasources";
			saveRes.$clientAgent.$action = "saveDatasource";
			//
			saveRes.$links.$home = {
				$title: "Ok",
				$url: "?representation=excelconfig.$dashboard",
				$type: "application/json; vnd-sage=syracuse"
			};
			if(saveRes.$links.$create) saveRes.$links.$create.$isHidden = false;
		},
		getMaxFetchCount: function(_) {
			return (this.fetchAll(_) ? 0 : this.fetchLimit(_));
		},
		computeServiceUrl: function(_) {
			if(this.endpoint(_) && this.entity(_) && this.representation(_)) {
				var facetName = "$bulk";
				var limit = this.fetchLimit(_);
				if(this.forceQueryMode(_)) {
					var facet = "$query";
					var limit = excelHelpers.defines.defaultFetchCount;
				}
				var params = ["representation=" + this.representation(_) + "." + facetName]
				if(!this.fetchAll(_))
					params.push("count=" + limit);
				return (["", "sdata", this.endpoint(_).applicationRef(_).application(_), 
					this.endpoint(_).applicationRef(_).contract(_), 
					this.endpoint(_).dataset(_), 
					this.entity(_)].join("/") + "?" + 
					params.join("&"));
				// TODO: compute data count

			} else
				return "";
		}
	}
}