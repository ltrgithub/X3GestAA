"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var util = require("util");
var stubHelper = require('syracuse-soap/lib/client/stubHelper');

exports.entity = {
	$titleTemplate: "Remote SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Remote Web Service",
	$listTitle: "List of remote SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			//$isMandatory: true,
			$linksToDetails: true,
			$default: "Foot",
			$constraints: {
				$isUnique: true
			}
		},
		url: {
			$title: "Url",
			$default: "http://footballpool.dataaccess.eu/data/info.wso?wsdl",
			$isMandatory: true
		},
		description: {
			$title: "Description"
		},
		wsdl: {
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
		prototype: {
			$title: "Prototype",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
	},
	$relations: {},
	$events: {
		$beforeSave: [function(_, instance) {
			try{
				instance.$diagnoses = instance.$diagnoses || {};

				if (instance.$diagnoses.length === 0){
					//console.log("Generate Stub for web service: "+instance.name(_));
					
					var stub = stubHelper.create(_, instance.name(_), instance.url(_));

					// Set description
					instance.description(_, stub.description || "");
					
					// Store WSDL
					var buf1 = new Buffer(stub.wsdl, 'utf8').toString('binary');
					if (buf1 != null && buf1.length !== 0){
						var props1 = {
								length: buf1.length,
								contentType: "application/xml",
								fileName: instance.name(_) + ".wsdl"
						}
						var store1 = instance.wsdl(_);
						var stream = store1.createWritableStream(_, props1);
						stream.write(_, buf1, "binary");
						stream.write(_, null);
					}
					
					// Store prototype
					var buf2 = new Buffer(JSON.stringify(stub.prototype,null,2), 'utf8').toString('binary');
					if (buf2 != null && buf2.length !== 0){
						var props2 = {
								length: buf2.length,
								contentType: "application/json",
								fileName: instance.name(_) + ".json"
						}
						var store2 = instance.prototype(_);
						var stream = store2.createWritableStream(_, props2);
						stream.write(_, buf2, "binary");
						stream.write(_, null);
					}
				}

			}catch(e){
				instance.$diagnoses.push({severity: "error", message: e.message});
			}
		}]

	},
	$uniqueConstraints: [["name"]]
}