"use strict";
var CacheClass = require('syracuse-collaboration/lib/cacheHelper').CacheClass;

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Cache Statistics",
	$descriptionTemplate: "Calculate statistics on cache actions",
	$properties: {
		representation: {
			$title: "Representation"
			//	$type: "cacheRepresentationStatistic"
		},
		miss : {
			$title: "Cache misses",
			$type: "integer",
			$default: 0
		},
		missResponse : {
			$title: "Cache miss response (ms)",
			$type: "integer",
			$default: 0
		},
		hits : {
			$title: "Cache hits",
			$type: "integer",
			$default: 0
		},
		hitResponse : {
			$title: "Cache hit Response (ms)",
			$type: "integer",
			$default: 0
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				isCacheable: true
			},
			$serializeAll: true
		},
	},
	$init: function(_, instance) {},
	$functions: {
		calculate: function(_, db, endpoint, representation) {
			console.log("Into calculate function");
			//var cacheActions = new CacheClass(_, db, "cacheAction").getInstances(_, {
			//		"jsonWhere": {
			//			"endpoint": endpoint,
			//			"representation": representation
			//		}
			//	});
			var cacheActions = db.fetchInstances(_, db.getEntity(_, "cacheAction"), {
				jsonWhere: {
					"endpoint": endpoint.$uuid,
					"entityName": representation
				}
			});

			var result = {
				hit: 0,
				miss: 0
			};
			cacheActions.map_(_, function(_, e) {
				if (e.cacheHit(_)) {
					result.hit++;
				} else {
					result.miss++;
				}

			});

			return result;
		},
		average: function(_, db, endpoint, representation) {
			console.log("Into calculate function");
			//var cacheActions = new CacheClass(_, db, "cacheAction").getInstances(_, {
			//		"jsonWhere": {
			//			"endpoint": endpoint,
			//			"representation": representation
			//		}
			//	});
			var cacheActions = db.fetchInstances(_, db.getEntity(_, "cacheAction"), {
				jsonWhere: {
					"endpoint": endpoint.$uuid,
					"entityName": representation
				}
			});

			var result = {
				hit: {
					nb: 0,
					sum: 0
				},
				miss: {
					nb: 0,
					sum: 0
				}
			};
			cacheActions.map_(_, function(_, e) {
				if (e.cacheHit(_)) {
					result.hit.nb++;
					result.hit.sum += e.responseTime(_);
				} else {
					result.miss.nb++;
					result.miss.sum += e.responseTime(_);
				}

			});
			result.miss.average = result.miss.sum / result.miss.nb;
			result.hit.average = result.hit.sum / result.hit.nb;

			return result;
		}
	},
	$services: {

		calculateStatistics: {
			$method: "PUT",
			$title: "Calculate Statistics",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.endpoint(_);
			},
			$execute: function(_, context, instance) {
				var endPoint = instance.endpoint(_);
				var repr = instance.representation(_);
				var res = instance.calculate(_, instance._db, endPoint, repr);
				console.log("Results nb hit and miss: " + JSON.stringify(res));
				var res = instance.average(_, instance._db, endPoint, repr);
				console.log("Result average " + JSON.stringify(res));

				instance.hits(_, res.hit.nb);
				instance.hitResponse(_, res.hit.average | 0);
				instance.miss(_, res.miss.nb);
				instance.missResponse(_, res.miss.average | 0);
			}
		},


		deleteStatistics: {
			$method: "DELETE",
			$title: "Delete statistics",
			$confirm: "this operation will delete cache statistics for selected endpoint/representation, are you sure ?",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.endpoint(_) || !instance.representation(_);
			},
			$execute: function(_, context, instance) {

				// TODO
			}
		},
		deleteAllStatistics: {
			$method: "DELETE",
			$title: "Delete all statistics",
			$confirm: "this operation will delete all cache statistics for the selected endpoint, are you sure ?",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.endpoint(_);
			},
			$execute: function(_, context, instance) {

				// TODO

			}
		}
	}
};