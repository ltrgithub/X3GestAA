"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var util = require("util");
var stubHelper = require('syracuse-soap/lib/client/stubHelper');

exports.entity = {
	$titleTemplate: "Remote SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Remote Web Service",
	$listTitle: "List of remote SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			//$isMandatory: true,
			$linksToDetails: true,
			$default: "Foot",
			$constraints: {
				$isUnique: true
			}
		},
		url: {
			$title: "Url",
			$default: "http://footballpool.dataaccess.eu/data/info.wso?wsdl"
		},
		authentication: {
            $title: "Authentication",
            $enum: ["none", "basic"],
            $enumCaptions: ["None", "Basic"],
            $default: "none"
		},
		authUser: {
			$title: "User",
			$isHidden: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth !== "none";
            }    
		},
		authPassword: {
			$title: "Password",
			$type: "password",
			$isHidden: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth !== "none";
            }  
		},
		description: {
			$title: "Description"
		},
		wsdl: {
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
	},
	$relations: {
		ports: {
			$title: "Ports",
			$type: "soapStubPorts",
			$isChild: true,
		},
	},
	$events: {
		$beforeSave: [function(_, instance) {
			try{
				instance.$diagnoses = instance.$diagnoses || {};

				if (instance.$diagnoses.length === 0){
					//console.log("Generate Stub for web service: "+instance.name(_));
					
					
					
					var wsdl;
					if (instance.wsdl(_).fileExists(_) && !instance.url(_))
						wsdl = instance.wsdl(_).createReadableStream(_).readAll(_).toString('utf8');
					
					var options = {};
					if (instance.authentication(_) !== "none"){
						options.auth = {
							type: instance.authentication(_),
							user: instance.authUser(_),
							password: instance.authPassword(_)
						};
						
					}
					
					
					
					var stub = stubHelper.create(_, instance.name(_), wsdl, instance.url(_), options);
						

					// Set description
					instance.description(_, stub.description || "");
					
					
					
					// RESET DOESN'T WORK !!!
					//instance.ports(_).reset(_);
					var ports = instance.ports(_);
					for (var rel in ports._data){
						ports.deleteInstance(_,rel);
					}
					// Set ports
					stub.ports.forEach_(_,function(_,element, index){
						instance.ports(_).set(_, element);
					});
					
					// Store WSDL
					if (!instance.wsdl(_).fileExists(_)){
						
						var buf1 = new Buffer(stub.wsdl, 'utf8').toString('binary');
						if (buf1 != null && buf1.length !== 0){
							var props1 = {
									length: buf1.length,
									contentType: "application/xml",
									fileName: instance.name(_) + ".wsdl"
							}
							var store1 = instance.wsdl(_);
							var stream = store1.createWritableStream(_, props1);
							stream.write(_, buf1, "binary");
							stream.write(_, null);
						}
					}

				}
			}catch(e){
				instance.$diagnoses.push({severity: "error", message: e.message});
			}
		}]

	},
	$uniqueConstraints: [["name"]]
}