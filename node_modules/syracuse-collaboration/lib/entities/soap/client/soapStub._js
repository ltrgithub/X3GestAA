"use strict";

var stubHelper = require('syracuse-soap/lib/client/stubHelper');

exports.entity = {
	$titleTemplate: "Remote SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Remote Web Service",
	$listTitle: "List of remote SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true,
			$pattern: "^[A-Za-z_\\-][A-Za-z_\\-0-9]*$"
		},
		url: {
			$title: "Url",
			$format: "$url",
			$isNullable: true
		},
		isChild: {
			$isExcluded: true,
			$tiltle: "Child",
			$type: "boolean",
			$default: false
		},
		authentication: {
			$title: "Authentication",
			$enum: [{
				$value: "none",
				$title: "None"
			}, {
				$value: "basic",
				$title: "Basic"
			}],
			$default: "none"
		},
		authUser: {
			$title: "User",
			$isHidden: function(_, instance) {
				var auth = instance.authentication(_) || "";
				return auth === "none";
			},
			$isMandatory: function(_, instance) {
				var auth = instance.authentication(_) || "";
				return auth !== "none";
			}
		},
		authPassword: {
			$title: "Password",
			$type: "password",
			$capabilities: "confirm",
			$encrypt: true,
			$isHidden: function(_, instance) {
				var auth = instance.authentication(_) || "";
				return auth === "none";
			},
			$isMandatory: function(_, instance) {
				var auth = instance.authentication(_) || "";
				return auth !== "none";
			}
		},
		description: {
			$isExcluded: true,
			$title: "Description"
		},
		wsdl: {
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		}
	},
	$relations: {
		ports: {
			//$isExcluded: true,
			$title: "Ports",
			$type: "soapStubPorts",
			$isChild: true,
		},
	},
	$functions: {
		$serialize: function(_) {
			var self = this;

			var res = self._internalSerialize(_);
			if (res && res.ports) {

				res.ports.forEach(function(port) {
					if (port.operations) {
						port.operations.forEach(function(operation) {
							operation.$properties.name = {
								$links: {
									$details: {
										$type: "application/json;vnd.sage=syracuse",
										$url: "{tester}"
									}
								}
							};
						});
					}
				});
			}

			//
			return res;

		},
		$generate: function(_, instance) {
			instance.$diagnoses = instance.$diagnoses || [];
			if (instance.$diagnoses.length === 0) {
				//console.log("Generate Stub for web service: "+instance.name(_));

				var wsdl;
				if (instance.wsdl(_).fileExists(_) && !instance.url(_)) wsdl = instance.wsdl(_).createReadableStream(_).readAll(_).toString('utf8');
				stubHelper.create(_, instance, wsdl);
			}
		}
	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				try {

					instance.$generate(_, instance);
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message
					});
				}
			}
		]
	},
	$uniqueConstraints: [
		["name"]
	]
};