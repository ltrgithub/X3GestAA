"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var util = require("util");
var stubHelper = require('syracuse-soap/lib/client/stubHelper');

exports.entity = {
	$titleTemplate: "Remote SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Remote Web Service",
	$listTitle: "List of remote SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$default: "Foot",
			$isUnique: true
			
		},
		url: {
			$title: "Url",
			$default: "http://footballpool.dataaccess.eu/data/info.wso?wsdl",
			$format: "$url"
		},
		authentication: {
            $title: "Authentication",
            $enum: [{
            	$value: "none",
            	$title: "None"
            },{
            	$value: "basic",
            	$title: "Basic"
            }],
            $default: "none"
		},
		authUser: {
			$title: "User",
			$isHidden: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth !== "none";
            }    
		},
		authPassword: {
			$title: "Password",
			$type: "password",
			$isHidden: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth === "none";
            },
			$isMandatory: function(_, instance) {
		      var auth = instance.authentication(_) || "";
                  return auth !== "none";
            }  
		},
		description: {
			$title: "Description"
		},
		wsdl: {
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		}
	},
	$relations: {
		ports: {
			$title: "Ports",
			$type: "soapStubPorts",
			$isChild: true,
		},
	},
	$functions: {
		$serialize: function(_) {
			var self = this;
			//console.log("SELF TEST="+util.inspect(self));
			//

			//console.log("PROTO="+JSON.stringify(_orgProto,null,2));
			var res = self._internalSerialize(_);
			if (res && res.ports){
				//console.log("SERIALIZE TEST="+JSON.stringify(res,null,2));
				
				res.ports.forEach(function(port){
					if (port.operations){
						port.operations.forEach(function(operation){
							operation.$properties.name = {
								$links: {
									$details: {
										$type: "application/json;vnd.sage=syracuse",
										$url: "{tester}"
									}
								}
							}
						});
					}
				});
			}
			
			
			//
			return res;
			
			
			
		},
		$generate: function(_, instance){
			instance.$diagnoses = instance.$diagnoses || [];
			
			
			if (instance.$diagnoses.length === 0){
				console.log("Generate Stub for web service: "+instance.name(_));
				
				
				
				var wsdl;
				if (instance.wsdl(_).fileExists(_) && !instance.url(_))
					wsdl = instance.wsdl(_).createReadableStream(_).readAll(_).toString('utf8');
				
				var options = {};
				if (instance.authentication(_) !== "none"){
					options.auth = {
						type: instance.authentication(_),
						user: instance.authUser(_),
						password: instance.authPassword(_)
					};
					
				}
				
				
				
				var stub = stubHelper.create(_, instance.name(_), wsdl, instance.url(_), options);


				// Set description
				instance.description(_, stub.description || "");
				
				
				
				// RESET DOESN'T WORK !!!
				//instance.ports(_).reset(_);
				var ports = instance.ports(_);
				for (var rel in ports._data){
					ports.deleteInstance(_,rel);
				}
				// Set ports
				stub.ports.forEach_(_,function(_,element, index){
					instance.ports(_).set(_, element);
				});
				
				// Set warnings
				stub.warnings.forEach_(_,function(_,element, index){
					instance.$diagnoses.push({severity: "warning", message: element});
				});
				
				// Store WSDL
				if (!instance.wsdl(_).fileExists(_)){
					
					var buf1 = new Buffer(stub.wsdl, 'utf8').toString('binary');
					if (buf1 != null && buf1.length !== 0){
						var props1 = {
								length: buf1.length,
								contentType: "application/xml",
								fileName: instance.name(_) + ".wsdl"
						}
						var store1 = instance.wsdl(_);
						var stream = store1.createWritableStream(_, props1);
						stream.write(_, buf1, "binary");
						stream.write(_, null);
					}
				}

			}

		}
	},
	$events: {
		$beforeSave: [function(_, instance) {
			try{
				
				instance.$generate(_, instance);
			}catch(e){
				instance.$diagnoses.push({severity: "error", message: e.message});
			}
		}]

	},
	$uniqueConstraints: [["name"]]
}
