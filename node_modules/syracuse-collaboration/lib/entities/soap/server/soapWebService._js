"use strict";

var util = require("util");
var globals = require('streamline/lib/globals');
var wsdlGenerator = require('syracuse-soap/lib/server/wsdlGenerator');

exports.entity = {
	$titleTemplate: "SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Web Service",
	$listTitle: "List of SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			
				$isUnique: true
			},
		description: {
			$title: "Description",
			$isMandatory: true
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			}
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			}
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			}
		},
		wsdl: {
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
		url: {
			$title: "Url",
			$format: "$url",
			$compute: function(_, instance) {
				if (instance.name(_) && instance.application(_) && instance.application(_).application(_) && instance.application(_).contract(_) && instance.endpoint(_) && instance.endpoint(_).dataset(_)){
					return globals.context.session.host + "/soap/" + instance.application(_).application(_) + "/" + instance.application(_).contract(_) + "/" + instance.endpoint(_).dataset(_) + "/" + instance.name(_) + "?wsdl";
				}else{
					return "";
				}
				
			}
		},
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "soapWebServices",
			$isDefined: true,
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				var inst = instance.entities(_);
				for (var rel in inst._data){
					inst.deleteInstance(_,rel);
				}

			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$isDefined: true,
			$propagate: function(_, instance, val) {
				var inst = instance.entities(_);
				for (var rel in inst._data){
					inst.deleteInstance(_,rel);
				}
				

			}
		},
		entities: {
			$title: "Entities",
			$type: "soapEntities",
			$isChild: true,
			$select: {
				$title: "Entities",
				$type: "lookupEntity",
				$fieldMap: { name: "name", title: "title"},
				$parameters: "application={applicationName}&contract={contractName}&dataset={endpointName}"
			},

		},
		


	},
	$events: {
		$beforeSave: [function(_, instance) {
			try{
				if (!instance.application(_))
					instance.$diagnoses.push({severity: "error", message: "Application is required"});

				var entities = instance.entities(_).toArray(_);
				if (entities.length === 0)
					instance.$diagnoses.push({severity: "error", message: "At least one entity is required"});

				for (var i in entities){
					if (entities[i].representations(_).toArray(_).length === 0)
						instance.$diagnoses.push({severity: "error", message: "At least one representation is required for the entity '"+entities[i].name(_)+"'"});
				}

				if (instance.$diagnoses.length === 0){
					//console.log("Generate WSDL file for web service: "+instance.name(_));
					var wsdl = wsdlGenerator.generate(_, instance);
					var buf = new Buffer(wsdl, 'utf8').toString('binary');

					if (buf != null && buf.length !== 0){

						var props = {
								length: buf.length,
								contentType: "application/xml",
								fileName: instance.name(_) + ".wsdl"
						}

						var store = instance.wsdl(_);

						var stream = store.createWritableStream(_, props);
						stream.write(_, buf, "binary");
						stream.write(_, null);
						
					}
					
				}
			}catch(e){
				instance.$diagnoses.push({severity: "error", message: e.message});
			}
		}]

	},
	$uniqueConstraints: [["name"]]
}