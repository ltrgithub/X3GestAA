"use strict";
var config = require('syracuse-main/lib/nodeconfig').config;
var mock = require('syracuse-load/lib/mock');
var util = require('util');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
			
exports.entity = {
	$properties: {
		hostname: {
			$title: "Host name",
			$isMandatory: true,
			$isUnique: true
		},
		nannyPort: {
			$title: "Port of nanny process",
			$type: "integer",
			$isMandatory: true,
			$default: 8123
		},
		children: {
			$title: "Number of child processes",
			$isMandatory: true,
			$type: "integer" 			
		},
		active: {
			$title: "active",
			$type: "boolean",
			$default: true
		},		
		started: {
			$title: "started",
			$type: "boolean",
			$default: false,
			$isReadOnly: true,
			$compute: function(_, instance) {
				return false;
			}
		},
		status: {
			$title: "Status",
			$isReadOnly: true,
			$default: 1,
			$type: "integer",
			$enum: [{
				$value: 3,
				$title: "OK"
			}, {
				$value: 2,
				$title: "starting"
			}, {
				$value: 1,
				$title: "init"
			}, {
				$value: 0,
				$title: "inactive"
			}, {
				$value: -1,
				$title: "wrong version"
			}, {
				$value: -2,
				$title: "time difference"
			}, {
				$value: -3,
				$title: "respawn limit"
			}, {
				$value: -4,
				$title: "foreign"
			}, {
				$value: -5,
				$title: "unreachable"
			}, {
				$value: -6,
				$title: "not started"
			}],
			$compute: function(_, instance) {
				return 0;
			}

		},
		local: {
			$title: "local",
			$isReadOnly: true,
			$default: false,
			$type: "boolean"
		},
		version: {
			$title: "code version",
			$isReadOnly: true,
			$default: "-"
		},
		pid: {
			$title: "PID",
			$type: "integer",
			$default: 0,
			$isReadOnly: true
		},
		respawnCount: {
			$title: "Respawn limit",
			$type: "integer",
			$default: 10,			
		},
		respawnTime: {
			$title: "Respawn time",
			$type: "integer",
			$default: 120
		},
		returnRequestTimeout: {
			$title: "Return request timeout",
			$type: "integer",
			$default: 20
		},
		childInformation: {
			$title: "Child process information",
			$isReadOnly: true
		}
	},
	$titleTemplate: "Syracuse Hosts",
    $valueTemplate: "Syracuse Hosts",
    $descriptionTemplate: "Syracuse Hosts",
    $relations: {
    },
	$fetchInstances: function(_, context, parameters) {
		var self = this;
		console.log("PARAMS"+util.format(parameters))
		var db = adminHelper.getCollaborationOrm(_);
		var hosts = db.fetchInstances(_, db.model.getEntity("host"), {});
		if (config.mockServer) {
			var options = { path: "/nannyCommand/infojson", method: "GET", hostname: "", port: 0};
			try {
				console.log("MOCK")
				var text = mock.simpleRequest(config.mockServer.mockClient, options, null, _)
				console.log("TEXT "+text)
				var currentHosts = JSON.parse(text);
				console.log("RES "+util.format(currentHosts))
				hosts.forEach(function(host) { host.mockDataChange = currentHosts})
			} catch (e) {				
				console.error("Error "+e);
			}
		}
		return hosts;
	},
    $functions: {
    	$serialize: function(_) {
			// dynamicaly define the $select link
			var self = this;
			var res = self._internalSerialize(_);
			if (self.mockDataChange) {
				var currentHosts = self.mockDataChange;
				var j = currentHosts.length;
				while (--j >= 0) {
					if (currentHosts[j].hostname === res.hostname) {
						console.log("SET")
						var current = currentHosts[j]; 
						res.version = current.version;
						res.status = current.status;
						res.local = current.local;
						if (current.childInformation) res.childInformation = childInformation;
						break;
					}
				}
			} else {
				res.status = 0;
				res.local = false;
			}
			console.log("SER "+util.format(res))
			return res;
    	}
    },
	$services: {
		current: {
			$method: "post",
			$title: "Runtime information",
			$isMethod: true,
			$execute: function(_, context, instance) {
				instance.version(_, instance.version(_)+"Z");
				context.reply(_, 200, instance.serializeInstance(_))
			}
		}
	},
	$events: {
		$afterSave: [function(_, instance) { // update nanny processes
			if (config.mockServer) {
				var options = { path: "/nannyCommand/notifyNannies/update", method: "PUT", hostname: "", port: 0};
				try {
					console.log(mock.simpleRequest(config.mockServer.mockClient, options, null, _));			
				} catch (e) {
					console.log("Error "+e);
				}

			}
		}]
	},
	$searchIndex: {
		$fields: ["hostname"]
	},
	$defaultOrder: [["hostname", true]],
};
