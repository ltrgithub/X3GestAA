"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var translate = { "authenticationName": "sAMAccountName", "firstName": "givenName", "lastName": "sn", email: "mail" };

var USED = "##########";
 
/// get all users from LDAP
function getAllUsers(instance, _) {
	var ldapjs = require("ldapjs");
	var clientOpts = {url: instance.url(_)}; 
	console.log("URL"+instance.url(_));
	var ldapClient = ldapjs.createClient(clientOpts);
	console.log("Client created");
	ldapClient.bind(instance.adminDn(_), instance.adminPassword(_), _);
	// console.log("bound");
	try {
	    // !!! _data is not OK
		var res = _ldapSearch(ldapClient, instance._data, _);
		return res;
	} finally {
		ldapClient.unbind(_);
	}
}
 
/// function with necessary callbacks to collect the search data
function _ldapSearch(ldapClient, config,  cb) {
		// search result: 
		var userEntries = {};
		var loginKey = translate.authenticationName; 
		var opts = {filter: config.syncSearchFilter, scope: 'sub'};
		// console.log("OPTIONS"+sys.format(opts));
		ldapClient.search(config.searchBase, opts, function(error, res) {
			if (error) return cb(error);
			res.on('searchEntry', function(entry) {
				var key = entry.object[loginKey];
				userEntries[key] = entry.object; 
			});
			res.on('error', function(err1) {
				return cb(err1); 
			});
			res.on('end', function(result) {
				if (result.status !== 0) {
					return cb("non-zero status from LDAP search: " + result.status);
				}
				return cb(null, userEntries); 
			});
		});
	}


// update user table from LDAP (in 'users' which must be an object with authentication names as keys and LDAP user entries as values)
function updateUsers(_, instance, users, diagnoses, del) {
	var l = instance.users(_).toArray(_);
	var cloned = {};
	for (var key in users) 
		cloned[key] = users[key];
	var i;
	for (i=0; i < l.length; i++) {
		var user = l[i];
		var name = user.authenticationName(_) || user.login(_);
		var newValues = cloned[name];
		if (!newValues) { // LDAP entry does not exist any more
			if (del) {
				// console.log("Delete "+name);
				user.deleteSelf(_);
			} else { // just mark the user as inactive
				// console.log("Inactive "+name);
				user.inactive(_, true);
				user.save(_);
				user.getAllDiagnoses(_, diagnoses);
			}
		} else { // update from LDAP entry
			// console.log("Update "+name);
			for (var key in translate) {
				var newValue = newValues[translate[key]];
				if (user[key](_) !== newValue) {
					// console.log(key+"="+newValue);
					user[key](_, newValue);
				}
				user.inactive(_, false);
				user.save(_);
				user.getAllDiagnoses(_, diagnoses);
			}
			cloned[name][USED] = 1;
		}
	}	
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity("user");
	// add users which are in LDAP but not yet in user table
	for (var authenticationName in cloned) {
	    if (cloned[authenticationName][USED]) {
			continue;
		}
		var inst = entity.createInstance(_, db, null);
		// console.log("---New instance "+login);
		for (var key in translate) {
			var newValue = cloned[authenticationName][translate[key]];
			// console.log(key+"/"+translate[key] + "="+newValue);
			inst[key](_, newValue);			
		}
		inst.ldap(_, instance);		
		inst.authentication(_, "ldap");
		inst.inactive(_, false);
		// are there users with the same name as the new user?
		var disturbingUsers = entity.fetchInstances(_, db, { jsonWhere: { login: { $regex: "^"+authenticationName } }});
		// console.log("ANZAHL"+disturbingUsers.length);
		var disturbingNames = {};
		// put the names as keys in object
		for (var i = 0; i < disturbingUsers.length; i++) {
			// console.log("DistUser"+disturbingUsers[i].login(_));
			disturbingNames[disturbingUsers[i].login(_)] = 1;
		}		
		if (authenticationName in disturbingNames) {
			// generate new user name
			// this loop is large enough because there can be at most disturbingUsers.length entries
			for (var i = 1; i <= disturbingUsers.length+1; i++) {
				if ((authenticationName+i) in disturbingNames)
					continue;
				inst.login(_, authenticationName+i);
				diagnoses.push({severity: "warning", message: "User name changed from "+authenticationName+" to "+(authenticationName+i)});
				// console.log(sys.format(diagnoses));
				break;
			}
		} else {
			// console.log("Normal User"+authenticationName);
			inst.login(_, authenticationName);
		}
		inst.save(_);
		inst.getAllDiagnoses(_, diagnoses);
	}

};
			
	
	
	
exports.updateUsers = updateUsers;


exports.entity = {
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
            $default: "LDAP",
			$constraints: {
				$isUnique: true,
				$pattern: /^[a-zA-Z]\w*$/
			},
		},
		displayName: {
			$title: "Display Name",
		},
        inactive: {
           $type: "boolean",
           $title: "Inactive",
           $default: false,
        },
        url: {
           $title: "URL",
           $isMandatory: true
        },
        adminDn: {
           $title: "DN for searching"
        },
        adminPassword: {
           $title: "Password for search DN"
        },
        searchBase: {
           $title: "Search base"
        },
        searchFilter: {
           $title: "Search filter"
        },
        syncSearchFilter: {
           $title: "Sync search filter"
        },
		image: {
			$title: "Image",
			$type: "image",
			$storage: "db_file",
			$capabilities: ""
		}
	},
	$titleTemplate: "LDAP",
    $valueTemplate: "{name} {url}",
    $descriptionTemplate: "LDAP {name}",
    $relations: {
        users: {
           $title: "Users",
           $type: "users",
           $inv: "ldap",
           $isComputed: true
        }
    },
	$services: {
		    usersFromLdap : {
			$method : "POST",
			$isMethod : true,
			$title : "Update users from LDAP",
			$execute : function(_, context, instance) {
			var allUsers = getAllUsers(instance, _);
			var diagnoses = [];
			updateUsers(_, instance, allUsers, diagnoses, false);
			if (diagnoses.length == 0)
			   diagnoses.push({severity: "info", message: "OK"});
			// !!! location should not be necessary, remove it when issue #48 will be resolved
			context.reply(_, 200, {"$diagnoses": diagnoses}, {location: context.baseUrl + "/ldaps?representation=ldap.$query"});
			}
		}
	}
    
};