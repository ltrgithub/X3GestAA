"use strict";

var flows = require("streamline/lib/util/flows");
var tracer = require("syracuse-trace/lib/helper").getTracer("x3Comm.loadBalancer");

function hasErrors(body, k) {
	var msg;
	var hasErr = body && body.$diagnoses && body.$diagnoses.some(function(diag) {
		if (diag.$severity === "error") {
			msg = "Error related to field " + k + " : " + diag.$message;
			return msg;
		} else return false;
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") {
				hasErr = hasErr || hasErrors(body[key], key);
				if (hasErr) return hasErr;
			}
		}
	}
	return msg || hasErr;
}

exports.entity = {
	$titleTemplate: "X3 server",
	$descriptionTemplate: "X3 server settings",
	$valueTemplate: "{description} {serverHost}",
	$helpPage: "Administration-reference_Sage-ERP-X3-Servers",
	$isPersistent: false,
	$properties: {
		description: {
			$title: "Description",
			$description: "Friendly name",
			$isMandatory: true,
			$isLocalized: true,
			$isUnique: true,
			$compute: function(_, instance) {
				return instance.serverHost(_) + ":" + instance.serverPort(_);
			},
			$isHidden: true
		},
		serverHost: {
			$title: "Server host",
			$description: "Physical server name or IP address",
			$isMandatory: true
		},
		serverPort: {
			$title: "Server port",
			$type: "integer",
			$isMandatory: true
		},
		tag: {
			$title: "Server TAG",
			//			$pattern: function(_, instance) {
			//				if (instance._parent) return instance.serverHost(_) === instance._parent.serverHost(_) && instance.serverPort(_) === instance._parent.serverPort(_) ? ".*" : "^(?!MAIN$).*$";
			//				return true;
			//			},
			//			$patternMessage: "'MAIN' tag is reserved for main server",
		},
		banTimeout: {
			$title: "Banishment timeout",
			$type: "integer",
			$default: 60 // minutes
		},
		banned: {
			$title: "Banned",
			$description: "Banned because unavailable (Duration: 1 hour)",
			$type: "boolean",
			$default: false,
			$propagate: function(_, instance, val) {
				if (val) {
					flows.setTimeout(function(_) {
						instance.banned(_, false);
						var s = instance._parent.save(_);
						var err = hasErrors(s);
						if (err) {
							throw new Error(err);
						}

						tracer.info && tracer.info("X3 Server '" + instance.description(_) + "' is not banned anymore");
					}, instance.banTimeout(_) * 60000 || 3600000);
				}
			}
		},
		autoConfig: {
			$title: "Auto config",
			$type: "boolean",
			$default: false
		},
		disabled: {
			$title: "Disabled",
			$type: "boolean",
			$default: false
		},
	},
	$functions: {
		useProxy: function(_) {
			return this._parent.proxy(_);
		},
		bannish: function(_) {
			this.banned(_, true);
			var s = this._parent.save(_, null, {
				clearDiagnoses: true
			});
			var err = hasErrors(s);
			if (err) {
				throw new Error(err);
			}
			tracer.info && tracer.info("X3 Server '" + this.description(_) + "' banned for " + this.banTimeout(_) + " minute(s)");
			// return true, x3solution have other x3server not banned
			return this._parent.runtimes(_).toArray(_).some_(_, function(_, r) {
				return !r.banned(_);
			});
		},
		checkServer: function(_, folderName, ignoreBan) {
			this.$diagnoses = require("syracuse-x3/lib/pool").checkServerSettings(_, {
				x3solution: this._parent,
				x3server: this,
				applicationServer: this._parent.serverHost(_),
				folder: folderName
			});
			if (!ignoreBan && this.$diagnoses.some(function(d) {
				return d.$severity === "error";
			})) {
				this.bannish(_);
				return false;
			}

			return true;
		}
	},
	$services: {
		checkServer: {
			$title: "Check server settings",
			$description: "Attempts to connect to the server",
			$method: "GET",
			$isMethod: true,
			$parameters: {
				folderName: "X3",
				$properties: {
					folderName: {
						$title: "Folder to test",
						$description: "Indicate a X3 folder that can be used to test the connection",
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance) {
				try {
					instance.checkServer(_, context && context.parameters && context.parameters.folderName, true);
				} catch (e) {
					(instance.$diagnoses = instance.$diagnoses || []).push({
						severity: "error",
						message: e.message
					});
				}
			}
		}
	}
};