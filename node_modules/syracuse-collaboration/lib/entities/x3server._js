"use strict";

var locale = require("syracuse-core/lib/locale");
exports.entity = {
	$titleTemplate: "X3 server",
	$descriptionTemplate: "X3 server settings",
	$valueTemplate: "{description} {serverHost}",
	$properties: {
		description: {
			$title: "Description",
			$description: "Friendly name",
			$isMandatory: true,
			$isLocalized: true,
			$linksToDetails: true,
			$isUnique: true
		},
		serverHost: {
			$title: "Server host",
			$description: "Physical server name or IP address",
			$isMandatory: true
		},
		serverPort: {
			$title: "Server port",
			$type: "integer",
			$isMandatory: true
		},
		serverName: {
			$title: "Application server",
			$description: "If different from \"Server host\"",
			$isMandatory: false
		},
		serverTimeout: {
			$title: "Server timeout (ms)",
			$type: "integer",
			$isMandatory: true,
			$default: 60000
		},
		webServer: {
			$title: "Web server host",
			$description: "If different from \"Server host\""
		},
		webServerPort: {
			$title: "Web server port",
			$type: "integer",
			$default: 80
		},
		boServer: {
			$title: "Bo server host",
			$description: "If different from \"Server host\""
		},
		boServerPort: {
			$title: "Bo server port",
			$type: "integer",
			$default: 8080
		},
		boServerRestPort: {
			$title: "Bo rest web-service port",
			$type: "integer",
			$default: 6405
		},


	},
	$relations: {
		endpoints: {
			$title: "Endpoints",
			$description: "Associated endpoints",
			$type: "endPoints",
			$inv: "x3server",
			$isComputed: true,
			$capabilities: "sort,filter",
			$isReadOnly: true
		},
		certificate: {
			$title: "Certificate",
			$description: "Certificate used for authentication at this server",
			$type: "certificate",
			$inv: "x3servers"
		}
	},
	$services: {
		checkServer: {
			$title: "Check server settings",
			$description: "Attempts to connect to the server",
			$method: "GET",
			$isMethod: true,
			$execute: function(_, context, instance) {
				try {
					instance.$diagnoses = require("syracuse-x3/lib/pool").checkServerSettings(_, {
						address: instance.serverHost(_),
						port: instance.serverPort(_),
						applicationServer: instance.serverName(_)
					});
				} catch (e) {
					(instance.$diagnoses = instance.$diagnoses || []).push({
						severity: "error",
						message: e.message
					});
				}
			}
		}
	},
	$searchIndex: {
		$fields: ["description", "serverName", "serverHost", "serverPort", "webServer", "endpoints"]
	},
	$events: {
		$canSave: [function(_, instance) {
			// there must be at least one active connection
			var certificate = instance.certificate(_);
			if (certificate && certificate.server(_)) {
				instance.$addError(locale.format(module, "clientNotServer"));
			}
			if (certificate && certificate.internal(_)) {
				instance.$addError(locale.format(module, "noInternal"));
			}
			return;
		}]
	}
};