"use strict";

var jsonExport = require("syracuse-import/lib/jsonExport");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpers = require("syracuse-core/lib/helpers");
var jsurl = require("jsurl");

exports.entity = {
	$titleTemplate: "Personnalizations management",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$linksToDetails: true
		},
		description: {
			$title: "Description",
			$isMandatory: true
		},
		dashboardsExport: {
			$title: "Export dashboards",
			$description: "Dashboards, associated vignettes and menus will be exported",
			$type: "boolean"
		},
		dashboardFilter: {
			$title: "Dashboard filter",
			$description: "An empty filter means all elements will be selected",
			$type: "filter",
			$filterRepresentation: "dashboardDef",
			$isDefined: function(_, instance) {
				return instance.dashboardsExport(_);
			}
		},
		dashboardVignetteFilter: {
			$title: "Dashboard vignettes filter",
			$type: "filter",
			$filterRepresentation: "dashboardVariant",
			$isDefined: function(_, instance) {
				return instance.dashboardsExport(_);
			}
		},
		pagesExport: {
			$title: "Export pages",
			$type: "boolean"
		},
		pageFilter: {
			$title: "Page filter",
			$description: "An empty filter means all elements will be selected",
			$type: "filter",
			$filterRepresentation: "pageDef",
			$isDefined: function(_, instance) {
				return instance.pagesExport(_);
			}
		},
		pageVignetteFilter: {
			$title: "Page vignettes filter",
			$type: "filter",
			$filterRepresentation: "pageVariant",
			$isDefined: function(_, instance) {
				return instance.pagesExport(_);
			}
		},
	},
	$relations: {
		
	},
	$services: {
		exportPerso: {
			$title: "Export personalizations",
			$method: "GET",
			$isMethod: true,
			$type: "application/x-export",
			$parameters: {
				$url: "{$baseUrl}/selectExportTargets/$template/$workingCopies?representation=selectExportTarget.$edit&role={$role}",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance) {
				var opt = context.parameters.parameters && jsurl.parse(context.parameters.parameters);
				instance.$diagnoses = instance.$diagnoses || [];
				opt.$diagnoses = instance.$diagnoses;
				// make an temp export profile
				var ep = adminHelper.getCollaborationEndpoint(_);
				var db = ep.getOrm(_);
				var profEntity = db.getEntity(_, "exportProfile");
				var profile = profEntity.createInstance(_, db);
				profile.endpoint(_, ep);
				if(instance.dashboardsExport(_)) {
					var ent = db.getEntity(_, "dashboardDef");
					var stdProfileItem = helpers.object.clone(ent.$exportProfile, true);
					if(instance.dashboardVignetteFilter(_))
						stdProfileItem.$relations.variants.$filter = instance.dashboardVignetteFilter(_);
					//
					var dItem = profile.exportProfileItem(_).add(_);
					dItem.className(_, "dashboardDef");
					dItem.standardProfile(_, true);
					if(instance.dashboardFilter(_))
						dItem.filter(_, instance.dashboardFilter(_));
					else
						dItem.exportAll(_, true);
					dItem._stdExportProfile = stdProfileItem;
				}
				if(instance.pagesExport(_)) {
					var ent = db.getEntity(_, "pageDef");
					var stdProfileItem = helpers.object.clone(ent.$exportProfile, true);
					if(instance.pageVignetteFilter(_))
						stdProfileItem.$relations.variants.$filter = instance.pageVignetteFilter(_);
					//
					var dItem = profile.exportProfileItem(_).add(_);
					dItem.className(_, "pageDef");
					dItem.standardProfile(_, true);
					if(instance.pageFilter(_))
						dItem.filter(_, instance.pageFilter(_));
					else
						dItem.exportAll(_, true);
					dItem._stdExportProfile = stdProfileItem;
				}
				//
				jsonExport.jsonExport(_, profile, opt);
			}
		}
	}
}