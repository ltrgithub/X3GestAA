"use strict";

var zip = require("streamline-zip");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var sys = require("util");

exports.entity = {
	$titleTemplate: "Resources pack",
	$valueTemplate: "{code}",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$isUnique: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		}
	},
	$relations: {
		items: {
			$title: "Items",
			$type: "resourcePackItems",
			$isChild: true
		}
	},
	$functions: {
		generatePack: function(_, context, options) {
			var self = this;
			//
			var headers = {};
			headers["content-type"] = httpHelper.mediaTypes.zip;
			headers["cache-control"] = "no-cache,must-revalidate";
			context.response.writeHead(200, headers);
			//
			var zp = new zip.Zip(context.response);
			self.items(_).toArray(_).forEach_(_, function(_, it) {
				if (!it.fileName(_)) return;
				var tg = it.target(_).toArray(_)[0];
				if (!tg || !tg.generateContent) return;
				var dd = tg.generateContent(_, options);
				dd = dd && dd.body;
				zp.add(_, {
					name: it.fileName(_),
					data: dd
				});
			});
			zp.finish(_);
			context.response.end();
		}
	},
	$services: {
		downloadContent: {
			$title: "Download content",
			$method: "GET",
			$isMethod: true,
			$overridesReply: true,
			$type: "application/x-export",
			$execute: function(_, context, instance) {
				var opt = {
					targetType: "download",
					beautify: true
				};
				try {
					instance.generatePack(_, context, opt);
				} catch(e) {
					context.reply(_, 500, e.message);
				}
			}
		}
	}
}