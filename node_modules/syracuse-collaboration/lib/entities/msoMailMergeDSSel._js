"use strict"

var helpers = require("syracuse-core/lib/helpers");
var msoffice = require("msoffice/lib/helpers");
var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var streams = require("streamline/lib/streams/streams");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
	$titleTemplate: "Select merge datasource",
	$descriptionTemplate: "Select merge datasource",
	$valueTemplate: "{datasource}",
	
	$isPersistent: false,
	$canEdit: true,
	$createActionTitle: "Select datasource",
	
	$properties: {
		application: {
			$isHidden: true
		},
		contract: {
			$isHidden: true
		},
		dataset: {
			$isHidden: true
		},
		title: {
			$title: "Title"
		},
		representation: {
			$title: "Representation",
		},
		entity: {
			$title: "Entity",
			$isMandatory: true,
			$lookup: {
				entity: "lookupEntity",
				field: "name",
				parameters: "application={application}&contract={contract}&dataset={dataset}"
			},
			$propagate: function(_, instance, val) {
				var ep = instance.endpoint(_);
				if(!ep) return;
				var contract = sdataRegistry.getContract(ep.applicationRef(_).application(_), ep.applicationRef(_).contract(_));
				if(!contract) return;
				var model = dataModel.make(contract, ep.dataset(_));
				if(!model) return;
				instance.representation(_, model.singularize(instance.entity(_)));
				var entity = contract.entities[model.singularize(instance.entity(_))];
				if(entity && !instance.title(_))
					instance.title(_, entity.$listTitle || val);
			}
		},
		menuItem: {
			$title: "Menu item",
			$type: "menuItem",
			$lookupFilter: {
				application: "{endpoint}.{applicationRef}",
				linkType: "$representation",
				facet: "$query"
			},
			$propagate: function(_, instance, val) {
				if(val) {
					instance.entity(_, val.entity(_));
					instance.representation(_, val.representation(_));
					instance.title(_, val.title(_));
				} else {
					instance.entity(_, "");
					instance.representation(_, "");
					instance.title(_, "");
				}
			}
		},
		fetchCount: {
			$title: "Count",
		},
		serviceUrl: {
			$title: "Service url",
			$constraints: {
				$isDisabled: true
			},
			$compute: function(_, instance) {
				return instance.computeServiceUrl(_);
			}
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if(val) {
					instance.application(_, val.applicationRef(_).application(_));
					instance.contract(_, val.applicationRef(_).contract(_));
					instance.dataset(_, val.dataset(_));
				} else {
					instance.application(_, "");
					instance.contract(_, "");
					instance.dataset(_, "");
				}
			}
		},
		datasource: {
			$title: "Datasource",
			$type: "msoMailMergeDS",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				var db = adminHelper.getCollaborationOrm(_);
			    var model = db.model;
			    var entity = db.model.getEntity("msoMailMergeDS");
			    var ds = db.fetchInstance(_, entity, val.$uuid);

			    instance.title(_, ds.title(_));
			    instance.endpoint(_, ds.endpoint(_));
				instance.entity(_, ds.entity(_));
				instance.representation(_, ds.representation(_));
				instance.fetchCount(_, ds.fetchCount(_));
			}
		},
	},
	$functions: {
		computeServiceUrl: function(_) {
			if(this.endpoint(_) && this.entity(_) && this.representation(_)) {
				var params = ["representation=" + this.representation(_) + ".$query", 
					"count=" + this.fetchCount(_)];

				return (
						["", 
						 "sdata", 
						 this.endpoint(_).applicationRef(_).application(_), 
						 this.endpoint(_).applicationRef(_).contract(_), 
						 this.endpoint(_).dataset(_), 
						 this.entity(_)].join("/") + "?" + 
						 params.join("&"));
			} else
				return "";
		},
		$save: function(_, saveRes) {
			saveRes.$clientAgent = saveRes.$clientAgent || {};
			saveRes.$clientAgent.$id = "createMailMergeDS";
			saveRes.$clientAgent.$action = "saveDSWord";
			//
			saveRes.$links.$home = {
				$title: "Ok",
				$url: "?representation=mailmergeds.$dashboard",
				$type: "application/json; vnd-sage=syracuse"
			};
			if(saveRes.$links.$create) {
				saveRes.$links.$create.$isHidden = false;
			}
		}
	}
}
