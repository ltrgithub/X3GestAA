"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var patchcreate = require("syracuse-patch/lib/patchcreate");
var integrate = require("syracuse-patch/lib/patch");
var fs = require('fs');
var os = require('os');
// semaphore file
var sem = os.tmpDir()+"/semaphore.txt"


			
exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$properties: {
		newPatch: {
			$type: "boolean",
			$title: "Make new patch",
			$default: true
		},
		newRelease: {
			$type: "boolean",
			$title: "Create new release",
			$default: true // false
		},
		startFromRelease: {
			$type: "boolean",
			$title: "Start from release",
			$default: false			
		},
		newReleaseNumber: {
			$title: "Number of new release",
            $default: "1" // ""
		},
		comment: {
			$title: "Description",
			$default: "Desc" // ""
		},
		baseRelease: {
			$title: "Number of base release"
		},
		patchFile: {
			$title: "Patch file name",
			$default: os.tmpDir()+"/patch.dat"
		}		
	},
	$titleTemplate: "Patch",
    $valueTemplate: "Patch",
    $descriptionTemplate: "Patch",
    $functions: {
    },
	$services: {
		$deleteSemaphore: {
			$method : "PUT",
			$isMethod : true,
			$title : "Delete Semaphore",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				try {
					fs.unlink(sem, _);
					instance.$diagnoses.push({severity: "info", message: "OK"});					
				} catch (e) {
					instance.$diagnoses.push({severity: "error", message: e})
					console.log("Error when deleting semaphore "+e)
				}
				console.log("Deleted");
			}
		},
	    $createPatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Create patch",
			$execute : function(_, cotext, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!fs.existsSync(sem)) {
					fs.appendFile(sem, "A", _);
					try {
						console.log("Before");
						patchcreate.patch(instance.newPatch(_), instance.startFromRelease(_), instance.newRelease(_), instance.newReleaseNumber(_), instance.comment(_), instance.baseRelease(_), instance.patchFile(_), _);
						console.log("After");
						instance.$diagnoses.push({severity: "info", message: "OK"});
						} catch (e) {
							console.log("Error "+e);
						instance.$diagnoses.push({severity: "error", message: e})
					} finally {
						fs.unlink(sem, _);
					}
					console.log("End");
				} else {
					instance.$diagnoses.push({severity: "error", message: "Semaphore exists - parallel invocation"});
					console.log("Parallel");
				}
			}
		},
	    $integratePatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Integrate patch",
			$execute : function(_, cotext, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!fs.existsSync(sem)) {
					fs.appendFile(sem, "A", _);
					try {
						console.log("Before");
						integrate.patch(".", instance.patchFile(_), _);
						console.log("After");
						instance.$diagnoses.push({severity: "info", message: "OK"});
						} catch (e) {
							console.log("Error "+e);
						instance.$diagnoses.push({severity: "error", message: e})
					} finally {
						fs.unlink(sem, _);
					}
					console.log("End");
				} else {
					instance.$diagnoses.push({severity: "error", message: "Semaphore exists - parallel invocation"});
					console.log("Parallel");
				}
			}
		}
	},
};