"use strict";

var util = require("util");
var integrate = require("syracuse-patch/lib/integrate");
var fs = require('fs');
var os = require('os');
var locale = require("syracuse-core/lib/locale");
var defaultPatchFile = os.tmpDir()+"/patch.dat"
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var patchtools = require('syracuse-patch/lib/patchtools');
var localhostname = os.hostname();

//sets the lock attribute in the settings singleton. 
function setLock(_, lock, setting) {
	if (!setting) {
		var db = adminHelper.getCollaborationOrm(_);
		var setting = db.fetchInstance(_, db.model.getEntity("setting"), {
			sdataWhere: "" });		
	}
	if (!setting) {
		throw "noSetting$#$No global settings available";
	} else {
		if (lock && setting.patchLock(_)) {
			console.log("Parallel");						
			throw locale.format(module, "locked");
		} else {
			var result = null;
			setting.patchLock(_, lock); // set or release semaphore lock
			setting.save(_);
		}
	}
	return setting;
}
exports.setLock = setLock;

function output(instance, future, directory, _) {
	if (future) {
		var errors = future(_);
		if (errors.length > 0) {
			instance.$diagnoses.push({severity: "error", message: locale.format(module, "dirInc"+directory)});
			for (var i = 0; i < errors.length; i++) {
				instance.$diagnoses.push({severity: "error", message: errors[i]});
			}
		} else
			instance.$diagnoses.push({severity: "info", message: locale.format(module, "dirOK"+directory)});
	} else    
		instance.$diagnoses.push({severity: "info", message: locale.format(module, "dirNo"+directory)});														
}

exports.entity = {
		$isPersistent: false,
		$canSave: false,
		$autoRecreateWorkingCopy: true,
		$properties: {
			localhost: {
				$title: "Local host name",
				$default: localhostname,
				$isReadOnly: true
			}
			patchFile: {
				$title: "Patch file name",
				$default: defaultPatchFile
			}		
		},
		$titleTemplate: "Patch integration",
		$valueTemplate: "Patch integration",
		$descriptionTemplate: "Patch integration",
		$functions: {
		},
		$services: {
			$integratePatch: {
				$method : "PUT",
				$isMethod : true,
				$title : "Integrate patch",
				$execute : function(_, context, instance) {
					instance.$diagnoses = instance.$diagnoses || {};
					try {
						var result = null;
						setLock(_, true);
						result = integrate.clusterPatch(instance.patchFile(_), null, {tryagain:true}, _);
						if (result)
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "OK")});
						else {
							if (result === "") {
								instance.$diagnoses.push({severity: "info", message: locale.format(module, "patchApplied")});								
							}
						}
					} catch (e) {
						console.log("Error "+e);
						if (result)
							delete result.kill;
						instance.$diagnoses.push({severity: "error", message: ""+e})
					}
					/*					if (result && result.kill) {
						// kill node process
						instance.$diagnoses.push({severity: "warning", message: locale.format(module, "finished")});
						context.kill = result.kill;
					}
					console.log("End");
				} else {
				}
					 */
				}
			},
			$integrityCheck: {
				$method : "PUT",
				$isMethod : true,
				$title : "Check integrity",
				$execute : function(_, context, instance) {
					instance.$diagnoses = instance.$diagnoses || {};
					var setting;
					try {
						setting = setLock(_, true);
						var future = [];
						future[0] = patchtools.checkChecksumsV(patchtools.BASE_DIRECTORY, null);                        
						if (patchtools.exists(patchtools.BASE_DIRECTORY+"/"+patchtools.RELEASE_DIRECTORY, _))
							future[1] = patchtools.checkChecksumsV(patchtools.BASE_DIRECTORY+"/"+patchtools.RELEASE_DIRECTORY, null);
						if (patchtools.exists(patchtools.BASE_DIRECTORY+"/"+patchtools.TEMP_DIRECTORY, _))
							future[2] = patchtools.checkChecksumsV(patchtools.BASE_DIRECTORY+"/"+patchtools.TEMP_DIRECTORY, null);
						output(instance, future[0], 'Work', _);
						output(instance, future[1], 'Release', _);
						output(instance, future[2], 'Temp', _);
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: e});
					} finally {
						if (setting) setLock(_, false, setting);
					}
				}
			},
			$metaData: {
				$method : "PUT",
				$isMethod : true,
				$title : "Get version metadata",
				$execute : function(_, context, instance) {
					instance.$diagnoses = instance.$diagnoses || {};
					var setting;
					try {
						setting = setLock(_, true);
						try {
							var version = patchtools.readVersionFile(patchtools.BASE_DIRECTORY, _);						
						} catch (e) {
							throw locale.format(module, "noVersion", ""+e);												
						}
						for (var key in version)
							instance.$diagnoses.push({severity: "info", message: key+": "+version[key]});
						if (patchtools.exists(patchtools.RELEASE_DIRECTORY, _)) {
							var relVersion = patchtools.readVersionFile(patchtools.BASE_DIRECTORY+"/"+patchtools.RELEASE_DIRECTORY, _);
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "relVersion", relVersion["relNumber"])});
						} else {
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "dirNoRelease")});														
						}							
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: e});																	
					} finally {
						if (setting) setLock(_, false, setting);
					}
				}
			},
			$deleteSemaphore: {
				$method : "PUT",
				$isMethod : true,
				$title : "Unlock system",
				$execute : function(_, context, instance) {
					instance.$diagnoses = instance.$diagnoses || {};
					try {
						setLock(_, false);
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: locale.format(module, "errorUnlock", ""+e)})					
					}
					console.log("Deleted2");
					instance.$diagnoses.push({severity: "info", message: "OK"});				}
			}
		},
};