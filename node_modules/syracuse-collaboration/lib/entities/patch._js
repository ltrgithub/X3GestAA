"use strict";

var sys = require("util");
var integrate = require("syracuse-patch/lib/integrate");
var write = require("syracuse-patch/lib/write");
var fs = require('fs');
var os = require('os');
var locale = require("syracuse-core/lib/locale");


function output(instance, future, directory, _) {
    if (future) {
        var errors = future(_);
		if (errors.length > 0) {
			instance.$diagnoses.push({severity: "error", message: locale.format(module, "dirInc"+directory)});
			for (var i = 0; i < errors.length; i++) {
				instance.$diagnoses.push({severity: "error", message: errors[i]});
			}
		} else
			instance.$diagnoses.push({severity: "info", message: locale.format(module, "dirOK"+directory)});
    } else    
		instance.$diagnoses.push({severity: "info", message: locale.format(module, "noDir"+directory)});														
}
			
exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$properties: {
		patchFile: {
			$title: "Patch file name",
			$default: os.tmpDir()+"/patch.dat"
		},		
		restart: {
			$title: "Automatically restart",
			$type: "boolean",
			$default: true
		}		
	},
	$titleTemplate: "Patch integration",
    $valueTemplate: "Patch integration",
    $descriptionTemplate: "Patch integration",
    $functions: {
    },
	$services: {
	    $integratePatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Integrate patch",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!write.exists(write.SEMAPHORE, _)) {
					var result = null;
					fs.appendFile(write.SEMAPHORE, "A", _);
					try {
						result = integrate.patch(write.BASE_DIRECTORY, instance.patchFile(_), {restart: instance.restart(_), tryagain:true}, _);
						if ("versionerror" in result) {
							if (result.versionerror === null)
								instance.$diagnoses.push({severity: "info", message: locale.format(module, "patchApplied")});
							else
								instance.$diagnoses.push({severity: "error", message: ""+result.versionerror});
						} else
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "OK")});
					} catch (e) {
						console.log("Error "+e);
						if (result)
							delete result.kill;
						instance.$diagnoses.push({severity: "error", message: ""+e})
					} finally {
						fs.unlink(write.SEMAPHORE, _);
					}
					if (result && result.kill) {
						// kill node process
						instance.$diagnoses.push({severity: "warning", message: locale.format(module, "finished")});
						context.kill = result.kill;
					}
					console.log("End");
				} else {
					instance.$diagnoses.push({severity: "error", message: locale.format(module, "locked")});
					console.log("Parallel");
				}
			}
		},
	    $integrityCheck: {
			$method : "PUT",
			$isMethod : true,
			$title : "Check integrity",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!write.exists(write.SEMAPHORE, _)) {
					fs.appendFile(write.SEMAPHORE, "A", _);
					try {
                        var future = [];
                        future[0] = write.checkChecksumsV(write.BASE_DIRECTORY, null);                        
						if (write.exists(write.BASE_DIRECTORY+"/"+write.RELEASE_DIRECTORY, _))
                            future[1] = write.checkChecksumsV(write.BASE_DIRECTORY+"/"+write.RELEASE_DIRECTORY, null);
						if (write.exists(write.BASE_DIRECTORY+"/"+write.TEMP_DIRECTORY, _))
                            future[2] = write.checkChecksumsV(write.BASE_DIRECTORY+"/"+write.TEMP_DIRECTORY, null);
                        output(instance, future[0], 'Work', _);
                        output(instance, future[1], 'Release', _);
                        output(instance, future[2], 'Temp', _);
					} finally {
						fs.unlink(write.SEMAPHORE, _);
					}
				} else {
					instance.$diagnoses.push({severity: "error", message: locale.format(module, "locked")});
					console.log("Parallel");
				}
			}
		},
	    $metaData: {
			$method : "PUT",
			$isMethod : true,
			$title : "Get version metadata",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!fs.existsSync(write.SEMAPHORE)) {
					fs.appendFile(write.SEMAPHORE, "A", _);
					try {
						var version = write.readVersionFile(write.BASE_DIRECTORY, _);
						for (var key in version)
							instance.$diagnoses.push({severity: "info", message: key+": "+version[key]});
						if (write.exists(write.RELEASE_DIRECTORY, _)) {
							var relVersion = write.readVersionFile(write.BASE_DIRECTORY+"/"+write.RELEASE_DIRECTORY, _);
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "relVersion", relVersion["relNumber"])});
						} else {
							instance.$diagnoses.push({severity: "info", message: locale.format(module, "dirNoRelease")});														
						}							
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: locale.format(module, "noVersion", ""+e)});						
					} finally {
						fs.unlink(write.SEMAPHORE, _);
					}
				} else {
					instance.$diagnoses.push({severity: "error", message: locale.format(module, "locked")});
					console.log("Parallel");
				}
			}
		},
		$deleteSemaphore: {
			$method : "PUT",
			$isMethod : true,
			$title : "Unlock system",
			$execute : function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				if (!write.exists(write.SEMAPHORE, _))
					instance.$diagnoses.push({severity: "warning", message: locale.format(module, "unlocked")});
				else {
					try {
						fs.unlink(write.SEMAPHORE, _);
						instance.$diagnoses.push({severity: "info", message: locale.format(module, "OK")});					
					} catch (e) {
						instance.$diagnoses.push({severity: "error", message: locale.format(module, "errorUnlock", ""+e)})
						console.log("Error when deleting semaphore file "+e)
					}					
				}
				console.log("Deleted2");
			}
		}
	},
};