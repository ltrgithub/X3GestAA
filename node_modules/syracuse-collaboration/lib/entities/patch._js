"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
// var patch = require("syracuse-patch/lib/patchcreate").patch;
var fs = require('fs');



			
exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$properties: {
		newPatch: {
			$type: "boolean",
			$title: "Make new patch",
			$default: true
		},
		newRelease: {
			$type: "boolean",
			$title: "Create new release",
			$default: false
		},
		startFromRelease: {
			$type: "boolean",
			$title: "Start from release",
			$default: false			
		},
		newReleaseNumber: {
			$title: "Number of new release",
            $default: ""
		},
		comment: {
			$title: "Description",
			$default: ""
		},
		baseRelease: {
			$title: "Number of base release"
		}
		
	},
	$titleTemplate: "Patch",
    $valueTemplate: "Patch",
    $descriptionTemplate: "Patch",
    $functions: {
    },
	$services: {
		$integratePatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Integrate patch",
			$execute : function(_, context, instance) {
				console.log("Integrate Patch");
				var diagnoses = [];
				diagnoses.push({severity: "info", message: "OK1"});
			context.reply(_, 200, {$diagnoses: diagnoses});
			}
			
		},
		$createPatch: {
			$method : "PUT",
			$isMethod : true,
			$title : "Create patch",
			$execute : function(_, context, instance) {
				console.log("Create Patch");
				if (instance.newRelease(_))
					throw new Error("Error");
				var diagnoses = [];
				diagnoses.push({severity: "info", message: "OK2"});
			context.reply(_, 200, {$diagnoses: diagnoses});
			}
			
		}
	},
};