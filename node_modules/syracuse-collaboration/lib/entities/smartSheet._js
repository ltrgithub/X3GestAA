"use strict";

var util = require("util");
var decimal = require('syracuse-core/lib/types/decimal');
var datetime = require('syracuse-core/lib/types/datetime');
var ez = require("ez-streams");

function obtainData(_, instance) {
	instance.$diagnoses = instance.$diagnoses || [];
	var orm = instance.endpoint(_).getOrm(_);
	var ent = orm.getEntity(_, instance.representationName(_));
	return {
		diags: instance.$diagnoses,
		authorization: "Bearer " + instance.authorization(_),
		representationKey: instance.representationKey(_),
		ent: ent,
		orm: orm,
		representationColumn: instance.representationColumn(_),
		row: instance.row(_),
		column: instance.column(_)

	};
}

var https = require("https");
//var mock = require ("syracuse-load/lib/mock");

exports.entity = {
	$properties: {
		name: {
			$title: "Name",
			$linksToDetails: true,
			$isMandatory: true,
			$isUnique: true,
		},
		authorization: {
			$title: "Authorization",
			$isMandatory: true,
			$type: "password"
		},
		representationName: {
			$title: "X3 Representation",
			$isMandatory: true,
		},
		representationKey: {
			$isMandatory: true,
			$title: "X3 instance key field name"
		},
		representationColumn: {
			$isMandatory: true,
			$title: "X3 instance data field name"
		},
		row: {
			$isMandatory: true,
			$title: "Smartsheet Row",
		},
		column: {
			$isMandatory: true,
			$title: "Smartsheet Column"
		},

	},
	$relations: {
		sheets: {
			$title: "Sheets",
			$type: "smartSheetTabs",
			$isChild: true,
			$isMandatory: true,
		},
		endpoint: {
			$title: "Endpoint",
			$isMandatory: true,
			$type: "endPoint",
			$inv: "smartSheets"
		}
	},
	$titleTemplate: "SmartSheet",
	$valueTemplate: "{name} {sheetName}",
	$descriptionTemplate: "SmartSheet",
	$functions: {
		getData: function(_, sheet) {
			// console.error("getdata"+sheet);
			var data = obtainData(_, this);
			if (sheet) {
				getDataInt(_, data, sheet);
				if (!data.diags.length) data.diags.push({
					$severity: "success",
					$message: "Updated from sheet " + sheet.title(_)
				});
			} else {
				// console.error("arr")
				this.sheets(_).toArray(_).forEach_(_, function(_, sheet) {
					// console.error("AAAAAAAAAA "+util.format(sheet._data))
					getDataInt(_, data, sheet);
				});
				if (!data.diags.length) data.diags.push({
					$severity: "success",
					$message: "Updated from all sheets"
				});
			};
			this.save(_);
			// console.error("ZZZ "+util.format(data.diags))
		}
	},
	$services: {
		syncOneSheet: {
			$method: "POST",
			$isMethod: true,
			$title: "Fetch all sheets",
			$execute: function(_, context, instance) {
				// console.error("Vorher");
				try {
					instance.getData(_);
				} catch (e) {
					console.error("xxx " + e.stack);
					instance.$addError(e.message);
				}
				// console.log("Called Fetch data function222.");
			}
		},
	},
};


function getContent(_, authorization, sheetParameter, column, row) {
	try {

		var sheetId = undefined;
		var columnId = undefined;
		var sheet = undefined;
		var titi, toto;

		// retreive sheet id
		var client = ez.devices.http.client({
			url: "https://api.smartsheet.com/1.1/sheets",
			headers: {
				authorization: authorization,
				"content-type": "application/json"
			}
		});

		var result = client.end().response(_).readAll(_);

		toto = JSON.parse(result);

		for (var i = 0; i < toto.length; i++) {
			if (toto[i].name == sheetParameter) {
				sheetId = toto[i].id;
				break;
			}
		}

		// retrieve the complete sheet
		// not good pratice for performance !	
		client = ez.devices.http.client({
			url: "https://api.smartsheet.com/1.1/sheet/" + sheetId,
			headers: {
				authorization: authorization,
				"content-type": "application/json"
			}
		});

		result = client.end().response(_).readAll(_);
		sheet = JSON.parse(result);

		for (var i = 0; i < sheet.columns.length; i++) {
			if (sheet.columns[i].title == column) {
				columnId = sheet.columns[i].id;
			}
		}

		console.log("ColumnId " + columnId);

		// retreive the row value

		for (var i = 0; i < sheet.rows.length; i++) {
			if (sheet.rows[i].rowNumber == row) {
				for (var o = 0; o < sheet.rows[i].cells.length; o++) {
					if (sheet.rows[i].cells[o].columnId == columnId) {
						return sheet.rows[i].cells[o].value;
					}
				}
			}
		}

		return "";

	} catch (e) {
		console.log("error" + e.stack);
	}
}

function getDataInt(_, data, sheet) {
	 // console.log("Data "+util.format(data))
	try {
		var sheetTitle = sheet.title(_);
		var key = sheet.key(_);
		var content = getContent(_, data.authorization, sheetTitle, data.column, data.row);
		var orm = data.orm;
		var ent = data.ent;
		var where = {};
		where[data.representationKey] = key;
		var inst = orm.fetchInstance(_, ent, {
			jsonWhere: where
		});
		// console.error("WHERE "+util.format(where));
		if (!inst) {
			console.error("neu");
			inst = ent.createInstance(_, orm, null);
			inst[data.representationKey](_, key);
		}
		console.log("Content  aaaaa "+util.format(content))
		inst[data.representationColumn](_, decimal.parse (content));
		
		
		
		inst.save(_);
		inst.getAllDiagnoses(_, data.diags);
		sheet.date(_, datetime.now());
		// sheet.save(_);

	} catch (e) {
		console.error("ERROR " + e.stack);
		data.diags.push({
			$severity: "error",
			$message: "" + e
		});
	}

}