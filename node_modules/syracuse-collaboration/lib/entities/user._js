"use strict";

var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
	$properties: {
		login: {
			$title: "Default Account",
			$isMandatory: true,
			$constraints: {
				$isUnique: true
			}
		},
		title: {
			$title: "Title",
			$enum: ["Monsieur", "Mademoiselle", "Madame"],
			$enumCaptions: ["Monsieur", "Mademoiselle", "Madame"],
			$default: "Monsieur"
		},
		firstName: {
			$title: "First Name"
		},
		lastName: {
			$title: "Last Name",
			$linksToDetails: true,
			$isMandatory: true
		},
		fullName: {
			$title: "Full Name",
			$compute: function(_, instance) {
				return (instance.firstName(_) || "") + " " + (instance.lastName(_) || "");
			}
		},
		active: {
			$title: "Active",
			$type: "boolean",
			$default: true
		},
        authentication: {
            $title: "Authentication",
            $enum: ["", "db", "ldap", "oauth2"],
            $enumCaptions: ["Standard", "DB", "LDAP", "OAuth2"],
            $default: ""
        },
        authenticationName: { // name different from user name, used for authentication in LDAP or OAuth2
			$title: "Authentication name",
			$isHidden: function(_, instance) {
				var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
				return (auth !== "ldap");
			}
		},
		password: {
			$title: "Password",
			$type: "password",
			$isMandatory: function(_, instance) {
		      var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
                  return auth === "db";
            },      
			$isHidden: function(_, instance) {
		      var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
                  return auth !== "db";
            }      
		},
		email: {
			$title: "Email",
			$format: "$email"
		},
		photo: {
			$title: "Photo",
			$type: "image",
			$storage: "db_file",
			$capabilities: ""
		},
		explorer: {
			$title: "Explorer",
			$type: "graph",
			$format: "d3.nodeChart",
			$relations: {
				groups: {
					endPoints: {
						applicationRef: { $selected: false }
					},
					role: {}
				},
				adminTeams: {},
				authorTeams: {},
				memberTeams: {},
//				pages: { $selected: false }
			}
		}
	},
	$titleTemplate: "User",
	$valueTemplate: "{firstName} {lastName}",
	$descriptionTemplate: "{firstName} {lastName} user profile",
	$iconTemplate: "{$baseUrl}/users('{$key}')/photo",
	$relations: {
		groups: {
			$title: "Groups",
			$type: "groups",
			$inv: "users"
		},
		endpoints: {
			$title: "Endpoints login",
			$type: "userEndpoints",
			$inv: "user",
			isChild: true
		},
/*		pages: {
			$type: "pageDatas",
			$title: "Pages",
			$inv: "users",
			isComputed: true
		},*/
/*		defaultRole: {
			$type: "role",
			$title: "Default role"
		},
		defaultLocale: {
			$type: "localePreference",
			$title: "Default locale"
		},*/
		locales: {
			$type: "localePreferences",
			$title: "Locales",
			isChild: true
		},
		preferences: {
			$type: "userPreference",
			$isHidden: true,
			$title: "User preferences"
		},
        ldap: {
            $type: "ldap",
            $title: "LDAP instance",
            $isMandatory: function(_, instance) {
                return instance.authentication(_) === "ldap";
            },
            $isHidden: function(_, instance) {
                 return instance.authentication(_) !== "ldap";
            },
            $inv: "users"
            
        },     
        oauth2: {
            $type: "oauth2",
            $title: "OAuth2 instance",
            $isHidden: function(_, instance) {
                 return instance.authentication(_) !== "oauth2";
            },
            $isMandatory: function(_, instance) {
                return instance.authentication(_) === "oauth2";
            },
            $inv: "users"
            
        },     
		adminTeams: {
			$type: "teams",
			$title: "Teams administrator",
			$inv: "administrator",
			$isComputed: true
		},
		authorTeams: {
			$type: "teams",
			$title: "Teams author",
			$inv: "authors",
			$isComputed: true
		},
		memberTeams: {
			$type: "teams",
			$title: "Teams member",
			$inv: "members",
			$isComputed: true
		}
	},
	$functions: {
		getUserEndpointsList: function(_, roleUuid) {
			var eps = [];
			var grps = this.groups(_).toArray(_);
			grps.forEach_(_, function(_, grp) {
				if(roleUuid && grp.role(_) && (grp.role(_).$uuid !== roleUuid)) return;
				//
				grp.endPoints(_).toUuidArray(_).forEach(function(ep) {
					eps.push(ep);
				});
			});
			// filter duplicates
			var f = [];
			if (eps.length) {
				eps.sort();
				f.push(eps[0]);
				eps.forEach(function(ep) {
					if (f[f.length - 1] !== ep) f.push(ep);
				});
			}
			//
			return this._db.fetchInstances(_, this._db.model.getEntity("endPoint"), {
				jsonWhere: {
					"_id": {
						$in: f
					}
				}
			});
		},
		getUserRolesList: function(_) {
			var roles = [];
			var grps = this.groups(_).toArray(_);
			grps.forEach_(_, function(_, grp) {
				if (grp.role(_)) roles.push(grp.role(_));
			});
			// filter duplicates
			var f = [];
			if (roles.length) {
				roles.sort(function(a, b) {
					return ((a.$uuid > b.$uuid) ? -1 : 1);
				});
				f.push(roles[0]);
				roles.forEach(function(role) {
					if (f[f.length - 1].$uuid !== role.$uuid) f.push(role);
				});
			}
			//
			return roles;
		},
		getEndpointLogin: function(_, endpointUuid) {
			var eps = this.endpoints(_).toArray(_).filter_(_, function(_, ep) {
				return (ep.endpoint(_).$uuid === endpointUuid);
			});
			//
			return (eps[0] && eps[0].login(_)) || this.login(_);
		},
		getPersLocaleByCode: function(_, localeCode) {
			return this.locales(_).toArray(_).filter_(_, function(_, loc) {
				return (loc.code(_) === localeCode);
			})[0];
		},
		getUserLocaleByCode: function(_, localeCode) {
			var pers = this.getPersLocaleByCode(_, localeCode);
			return (pers ? pers : this._db.fetchInstance(_, this._db.model.getEntity("localePreference"), {jsonWhere:{code:localeCode}}));
		}
	},
	$services: {
	},
	$searchIndex: {
		$fields: ["login", "firstName", "lastName", "email", "groups", "endpoints", "pages", "adminTeams", "authorTeams", "memberTeams"]
	},
	$defaultOrder: [["login", true]]
};