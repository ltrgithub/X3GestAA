"use strict";

var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");
var config = require('config'); // must be first syracuse require


exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Hrm User Deactivation",
	$descriptionTemplate: "Administration task to deactivate Hrm user",
	$properties: {

	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				"$uuid": {
					"$in": "{endpoints}"
				}
			},
		},
		endpoints: {
			$title: "Endpoints",
			$type: "endPoints",
			$isHidden: true
		},
	},
	$init: function(_, instance) {

		var userProf = globals.context.session.data.userProfile;

		// Populate the list of available endpoints according to teh currently selected role
		instance.endpoints(_).reset(_);
		userProf.user(_).getUserEndpointsList(_, userProf.selectedRole(_) && userProf.selectedRole(_).$uuid).forEach_(_, function(_, ep) {
			if (ep.contract(_) === "hrm") {
				instance.endpoints(_).set(_, ep);
			}
		});
	},
	$functions: {
		execTask: function(_, diags, tracker) {
			// call the X3 function link ot a endpoint

		},
		scheduledExecute: function(_, diags) {
			this.execTask(_, diags);
		}
	},
	$services: {
		run: {
			$method: "POST",
			$title: "execute now",
			$isMethod: true,
			$parameters: {},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				var diags = {};
				instance.execTask(_, diags);
			}
		},
		schedule: {
			$method: "POST",
			$title: "Schedule HRM task update",
			$isMethod: true,
			$parameters: {
				$actions: {
					$select: {
						$url: "{$baseUrl}/automates?representation=automate.$select"
					}
				}
			},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				if (!parameters || !parameters.$select) {
					return;
				}
				parameters.$select.forEach_(_, function(_, s) {
					var a = instance._db.fetchInstance(_, instance._db.getEntity(_, "automate"), s.$uuid);
					if (!a) {
						return;
					}
					var t = a.automateTasks(_).add(_);
					//t.description(_, locale.format(module, "indexUpdateTaskLabel"));
					t.logLevel(_, "error");
					t.process(_, instance);
					a.save(_);
					var diag = [];
					a.getAllDiagnoses(_, diag, {
						addPropName: true,
						addEntityName: true
					});
					if (diag.some(function(d) {
						d = _normalizeDiag(d);
						return d.$severity === "error";
					})) {
						diag.forEach(function(d) {
							d = _normalizeDiag(d);
							instance.$addDiagnose(d.$severity, d.$message);
						});
					} else {
						//instance.$addDiagnose("success", locale.format(module, "taskCreated", a.description(_)));
					}
				});
			}
		}
	}
};