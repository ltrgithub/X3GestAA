"use strict";
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var flows = require('streamline/lib/util/flows');
var helpers = require("syracuse-core/lib/helpers");
var pluralize = helpers.string.pluralize;
var locale = require("syracuse-core/lib/locale");
var filters = require("syracuse-orm/lib/filters");
var Parser = require("syracuse-sdata/lib/parser/parser").Parser;
var sys = require("util");

var _listSolverMap = {
	syracuse: function(_, ep, ent, context, parameters) {
		var db = context.db;
		var params = context.parameters;
		var self = ent;
		var contract = sdataRegistry.getContract(ep.application(_), ep.contract(_));
		//
		var expr = parameters && filters.jsonToSdata(parameters);
		if (expr) expr = Parser.parse(expr);
		//
		var preliminary = [];
		contract && flows.eachKey(_, contract.entities, function(_, key, entity) {
			var instance = self.factory.createInstance(_, null, db);
			instance.entity(_, entity.name);
			instance.title(_, entity.$title || entity.name);
			instance.application(_, ep.applicationRef(_));
			instance.endpointRef(_, ep);
			instance.canSearch(_, (entity.$searchIndex != null));
			if (expr && !instance.match(_, expr)) return;
			preliminary.push(instance);
		});
		if (params.key) {
			var prop = (params.orderBy && params.orderBy.length && params.orderBy[0].binding) || "entity";
			var k = params.key.split(".");
			preliminary = preliminary.filter_(_, function(_, p) {
				return k[0] === "gt" ? p[prop](_) > k[1] : p[prop](_) < k[1];
			});
		}
		return preliminary;
	},
	x3: function(_, ep, ent, context, parameters) {
		var db = context.db;
		//
		var flgSearch = false;

		if (parameters && parameters.jsonWhere && parameters.jsonWhere.canSearch) {
			flgSearch = true;
			delete parameters.jsonWhere.canSearch;
		}
		var expr = parameters && filters.jsonToSdata(parameters);
		if (expr) context.parameters.where = Parser.parse(expr);
		//
		var params = _fixParameters(context.parameters);
		var ep_db = ep.getOrm(_);
		//
		var repr = ep_db.fetchInstances(_, ep_db.getEntity(_, "ATABLE", "$query"), params);

		return Array.isArray(repr) ? repr.map_(_, function(_, r) {
			var instance = ent.factory.createInstance(_, null, db);
			instance.entity(_, r.NAME(_));
			instance.title(_, r.TITLE(_));
			instance.application(_, ep.applicationRef(_));
			instance.endpointRef(_, ep);
			return instance;
		}) : repr;
	}
};

var _itemSolverMap = {
	syracuse: function(_, ep, inst, key) {
		var contract = sdataRegistry.getContract(ep.application(_), ep.contract(_));
		if (!contract) return;
		var ent = contract.entities[key];
		if (!ent) return;
		inst.title(_, ent && ent.$title);
		inst.entity(_, ent.name);
		inst.application(_, ep.applicationRef(_));
		inst.endpointRef(_, ep);
	},
	x3: function(_, ep, inst, key) {
		var db = ep.getOrm(_);
		//
		var r = db.fetchInstance(_, db.getEntity(_, "ATABLE", "$query"), {
			sdataWhere: "NAME eq \"" + key + "\""
		});
		if (r) {
			inst.title(_, r.TITLE(_));
			inst.entity(_, r.NAME(_));
			inst.application(_, ep.applicationRef(_));
			inst.endpointRef(_, ep);
		}
	}
};

exports.entity = {
	$classTitle: "Class Cache Proxy",
	$titleTemplate: "ClassCacheProxy",
	$valueTemplate: "{entity}",
	$valueTitleTemplate: "{title}",
	$listTitle: "Classes",
	$key: "{application.$uuid}~{endpointRef.$uuid}~{entity}",
	$isPersistent: false,
	$canEdit: false,
	$canDelete: false,
	$keyPager: true,
	$isProxyClass: true,
	$properties: {
		title: {
			$title: "Title",
			$isHidden: true
		},
		entity: {
			$title: "Entity",
			$propagate: function(_, instance, val) {
				if (instance._parent && instance._relation) {
					// force propagate
					if (instance._relation.$propagate) instance._relation.$propagate(_, instance._parent, instance);
				}
			}
		}

	},
	$relations: {
		application: {
			$type: "application",
			$isHidden: true
		},
		endpointRef: {
			$type: "endPoint",
			$isHidden: true
		}
	},
	$fetchInstances: function(_, context, parameters) {
		var self = this;
		//
		if (!context.parameters.dataset) return [];
		//
		var ep = adminHelper.getEndpoint(_, {
			dataset: context.parameters.dataset
		});
		return ep && _listSolverMap[ep.protocol(_)] && _listSolverMap[ep.protocol(_)](_, ep, self, context, parameters) || [];
	},
	$functions: {
		$setId: function(_, context, id) {
			var ids = id.split("~");
			if (!ids[0]) return;
			var db = adminHelper.getCollaborationOrm(_);
			var app = db.fetchInstance(_, db.getEntity(_, "application"), ids[0]);
			if (!app) return;
			var ep = (ids[1] && db.fetchInstance(_, db.getEntity(_, "endPoint"), ids[1])) || app.defaultEndpoint(_);
			if (!ep) return;
			ep && _itemSolverMap[ep.protocol(_)] && _itemSolverMap[ep.protocol(_)](_, ep, this, ids[2]);
		}
	},
	$defaultOrder: [
		["entity", true]
	],
	$searchIndex: {
		$fields: ["entity"]
	}
};