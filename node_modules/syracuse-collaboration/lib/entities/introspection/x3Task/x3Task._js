"use strict";

var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;




exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "X3 Schedule action",
	$descriptionTemplate: "Administration task to schedule X3 action",
	$properties: {


		className: {
			$title: "Entity",
			$description: "name of x3 class",
			$type: "string",
			$isDisabled: function(_, instance) {
				return instance.endpoint(_) === null;
			}
		},
		representation: {
			$title: "Representation",
			$description: "name of x3 representation",
			$type: "string",
			$isDisabled: function(_, instance) {
				return instance.className(_) === null;
			}
		},
		facet: {
			$title: "facet",
			$description: "facet of the entity",
			$enum: [{
				$value: "$edit",
				$title: "edit"
			}, {
				$value: "$detail",
				$title: "detail"
			}, {
				$value: "$query",
				$title: "query"
			}],
			$default: "$edit",
			$isHidden: true, //TODO check if we can call method to non edit facet
			$isDisabled: function(_, instance) {
				return instance.className(_) == null;
			}

		},
		device: {
			$title: "device",
			$description: "device of the representation",
			$enum: [{
				$value: "desktop",
				$title: "desktop"
			}, {
				$value: "mobile",
				$title: "mobile"
			}],
			$isDisabled: function(_, instance) {
				return instance.className(_) == null;
			}
		},
		dataset: {
			$isHidden: true
		}
	},
	$relations: {


		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				"$uuid": {
					"$in": "{endpoints}"
				}
			},
			$propagate: function(_, instance, val) {
				instance.dataset(_, val.dataset(_));
			}
		},

		actionName: {
			$title: "X3 Action Name",
			$type: "x3ClassAction",
			$isChild: true,
			$lookup: {
				entity: "x3ClassAction",
				field: "action",
				parameters: "class={className}&rep={representation}&facet={facet}&device={device}&ep={dataset}"
			}
		},

		endpoints: {
			$title: "Endpoints",
			$type: "endPoints",
			$isHidden: true
		},

	},
	$init: function(_, instance) {

		var userProf = globals.context.session.data.userProfile;
		var endpointSelected = userProf.selectedEndpoint(_);
		instance.endpoint(_, endpointSelected);

		// Populate the list of available endpoints according to teh currently selected role
		instance.endpoints(_).reset(_);
		userProf.user(_).getUserEndpointsList(_, userProf.selectedRole(_) && userProf.selectedRole(_).$uuid).forEach_(_, function(_, ep) {
			instance.endpoints(_).set(_, ep);
		});
	},
	$functions: {
		execTask: function(_, diags, tracker) {
			// call the X3 function link ot a endpoint
			//TODO call x3 entity operation
			console.log("test");
			if (this.endpoint(_)) {
				var db = this.endpoint(_).getOrm(_);
				var r = db.postAction(_, this.actionName(_), db.getEntity(_, this.className(_), "$edit"), "$edit", "", this.representation(_));
				return r;
			}

		},
		scheduledExecute: function(_, diags) {
			this.execTask(_, diags);
		}
	},
	$services: {
		run: {
			$method: "POST",
			$title: "execute now",
			$isMethod: true,
			$parameters: {},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				var diags = {};
				instance.execTask(_, diags);
			}
		},
		schedule: {
			$method: "POST",
			$title: "Schedule HRM task update",
			$isMethod: true,
			$parameters: {
				$actions: {
					$select: {
						$url: "{$baseUrl}/automates?representation=automate.$select"
					}
				}
			},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				if (!parameters || !parameters.$select) {
					return;
				}
				parameters.$select.forEach_(_, function(_, s) {
					var a = instance._db.fetchInstance(_, instance._db.getEntity(_, "automate"), s.$uuid);
					if (!a) {
						return;
					}
					var t = a.automateTasks(_).add(_);
					t.description(_, locale.format(module, "taskLabel"));
					t.logLevel(_, "error");
					t.process(_, instance);
					a.save(_);
					var diag = [];
					a.getAllDiagnoses(_, diag, {
						addPropName: true,
						addEntityName: true
					});
					if (diag.some(function(d) {
						d = _normalizeDiag(d);
						return d.$severity === "error";
					})) {
						diag.forEach(function(d) {
							d = _normalizeDiag(d);
							instance.$addDiagnose(d.$severity, d.$message);
						});
					} else {
						instance.$addDiagnose("success", locale.format(module, "taskCreated", a.description(_)));
					}
				});
			}
		}
	}
};