"use strict";

var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;




exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "X3 Schedule action",
	$descriptionTemplate: "Administration task to schedule X3 action",
	$properties: {
		className: {
			$title: "Entity",
			$description: "name of X3 class",
			$type: "string",
			$isMandatory: true,
			$isDisabled: function(_, instance) {
				return instance.endpoint(_) === null;
			}
		},
		representation: {
			$title: "Representation",
			$description: "name of x3 representation (if different from X3 class)",
			$type: "string",
		},
		facet: {
			$title: "facet",
			$description: "facet of the entity",
			$enum: [{
				$value: "$edit",
				$title: "edit"
			}, {
				$value: "$detail",
				$title: "detail"
			}, {
				$value: "$query",
				$title: "query"
			}],
			$default: "$edit",
			$isHidden: true, //TODO check if we can call method to non edit facet
			$isDisabled: function(_, instance) {
				return instance.className(_) == null;
			}
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$lookupFilter: function(_, instance) {
				var userProf = globals.context.session.data.userProfile;
				var items = [];
				userProf.user(_).getUserEndpointsList(_, userProf.selectedRole(_) && userProf.selectedRole(_).$uuid).forEach_(_, function(_, ep) {
					if (ep.protocol(_) === "x3")
						items.push({
							$uuid: ep.$uuid
						});
				});
				if (items.length) return {
					$or: items
				};
				else return {
					$uuid: {
						$in: []
					}
				};
			},
		},
		actionName: {
			$title: "X3 Action Name",
			$type: "x3ClassAction",
			$isChild: true,
			$lookup: {
				entity: "x3ClassAction",
				field: "action",
				parameters: "class={className}&rep={representation}&facet={facet}&ep={endpoint}"
			},
			$propagate: function(_, instance) {
				console.log("POPPPPPP");
				var params = instance.parameters(_);
				params.reset(_);
				var template = instance.actionName(_).parameters(_);
				if (template) {
					template = JSON.parse(template);
					for (var k in template) {
						var par = params.set(_);
						par.name(_, k);
						par.type(_, template[k]);
					}
				}
			}
		},
		parameters: {
			$title: "Parameters",
			$type: "x3ClassActionParams",
			$isChild: true
		}

	},
	$init: function(_, instance) {

		var userProf = globals.context.session.data.userProfile;
		var endpointSelected = userProf.selectedEndpoint(_);
		instance.endpoint(_, endpointSelected);

		// Populate the list of available endpoints according to teh currently selected role
		//		instance.endpoints(_).reset(_);
		//		userProf.user(_).getUserEndpointsList(_, userProf.selectedRole(_) && userProf.selectedRole(_).$uuid).forEach_(_, function(_, ep) {
		//			instance.endpoints(_).set(_, ep);
		//		});
	},
	$functions: {
		execTask: function(_, diags) {
			// call the X3 function link ot a endpoint
			if (this.endpoint(_)) {
				var db = this.endpoint(_).getOrm(_);
				// grab parameters
				var params = this.parameters(_).toArray(_);
				var paramObject = undefined;
				if (params.length) {
					paramObject = {};
					params.forEach_(_, function(_, param) {
						console.log("P " + param.name(_) + " " + param.value(_) + " " + param.type(_));
						paramObject[param.name(_)] = param.value(_);
					});
				}

				console.log("EXEC" + require('util').format(paramObject));
				try {
					var entity = db.getEntity(_, this.className(_), this.facet(_));

					var r = db.postAction(_, this.actionName(_), entity, this.facet(_), paramObject, this.representation(_));
					if (r && r.body && r.body.$diagnoses) {
						r.body.$diagnoses.forEach(function(diag) {
							diags.push(diag);
						});
					};
				} catch (e) {
					console.error("Error " + e);
					diags.push({
						$severity: "error",
						$message: "" + e,
						$stack: e.stack
					});
				}
			}

		},
		scheduledExecute: function(_, diags) {
			this.execTask(_, diags);
		}
	},
	$services: {
		run: {
			$method: "POST",
			$title: "execute now",
			$isMethod: true,
			$parameters: {},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				instance.$diagnoses = instance.$diagnoses || [];
				instance.execTask(_, instance.$diagnoses);
			}
		},
		schedule: {
			$method: "POST",
			$title: "Schedule HRM task update",
			$isMethod: true,
			$parameters: {
				$actions: {
					$select: {
						$url: "{$baseUrl}/automates?representation=automate.$select"
					}
				}
			},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {
				if (!parameters || !parameters.$select) {
					return;
				}
				parameters.$select.forEach_(_, function(_, s) {
					var a = instance._db.fetchInstance(_, instance._db.getEntity(_, "automate"), s.$uuid);
					if (!a) {
						return;
					}

					var diag = a.defineNewTask(_, locale.format(module, "taskLabel"), instance);
					if (diag.some(function(d) {
						return d.$severity === "error";
					})) {
						diag.forEach(function(d) {
							instance.$addDiagnose(d.$severity, d.$message);
						});
					} else {
						instance.$addDiagnose("success", locale.format(module, "taskCreated", a.description(_)));
					}
				});
			}
		}
	}
};