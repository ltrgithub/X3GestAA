"use strict";

var traceHelper = require('syracuse-trace/lib/helper');

exports.entity = {
	$titleTemplate: "Traces configuration for '{description}'",
	$descriptionTemplate: "Configure {name} traces",
	$valueTemplate: "{name}",
	$canDelete: false,
	$canCreate: false,
	$properties: {
		name: {
			$isUnique: true,
			$linksToDetails: true,
			$title: "Name",
			$isReadOnly: true,
			$type: "string"
		},
		description: {
			$linksToDetails: false,
			$displayLength: 30,
			$title: "Description",
			$isReadOnly: true,
			$type: "string",
			$isLocalized: true
		},
		enabled: {
			$title: "Enabled",
			$type: "boolean",
			$default: false
		},
		level: {
			$title: "Tracing level",
			$isDefined: function(_, instance) {
				return instance.enabled(_);
			},
			$enum: [{
				$value: "error",
				$title: "Error"
			}, {
				$value: "warning",
				$title: "Warning"
			}, {
				$value: "info",
				$title: "Info"
			}, {
				$value: "debug",
				$title: "Debug"
			}],
			$default: "info"
		},
		transport: {
			$title: "Log type",
			$displayLength: 15,
			$isDefined: function(_, instance) {
				return instance.enabled(_);
			},
			$enum: [{
				$value: "console",
				$title: "Console"
			}, {
				$value: "storagearea",
				$title: "Storage Area"
			}, {
				$value: "mongo",
				$title: "MongoDB"
			}],
			$default: "storagearea"
		},
		expiry: {
			$title: "Expiration (minutes)",
			$type: "integer",
			$default: 120,
			$isDefined: function(_, instance) {
				return instance.enabled(_) && instance.transport(_) === "storagearea";
			},
			$isReadOnly: function(_, instance) {
				return instance.enabled(_) && instance.transport(_) !== "storagearea";
			},
			$isDisable: function(_, instance) {
				return instance.enabled(_) && instance.transport(_) !== "storagearea";
			},
			$isMandatory: function(_, instance) {
				return instance.enabled(_) && instance.transport(_) === "storagearea";
			}
		},
	},
	$functions: {},
	$events: {
		$afterSave: [

			function(_, instance) {
				var tracer = traceHelper.getTracer(instance.name(_));
				if (tracer && tracer.trace) {
					tracer._loadConfig(instance.serializeInstance(_));
				}
			}
		]
	}
};