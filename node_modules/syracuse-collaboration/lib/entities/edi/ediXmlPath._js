"use strict";

var config = require('config');
var sa = require("syracuse-orm/lib/storageArea");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var globals = require('streamline/lib/globals');


exports.entity = {
	$isPersistent: false,
	$isProxyClass: true,
	$capabilities: "",
	$titleTemplate: "EDI Cache Entity",
	$descriptionTemplate: " ",
	$properties: {
		id: {
			$title: "id", // id of the edi process context , must be unique (ex X3 name + type )
			$type: "integer"
		},
		path: {
			$title: "xml path", // class json/ representation etc...
		},
		type: {
			$title: "type",
		}

	},
	$fetchInstances: function(_, context, parameters) {
		var self = this;
		var db = db || adminHelper.getCollaborationOrm(_);
		// the metamodel is associated to the orm
		var model = db.model;
		var entityName = "ediXmlPath";
		var entity = model.getEntity(_, entityName);
		var factory = entity.factory;
		//// read the file and return the
		var docuuid = globals.context.request.session.xmlPathId;
		var content = docuuid && sa.readAll(_, {
			jsonWhere: {
				$uuid: docuuid
			}
		}).toString('utf8') || null;
		var instances = [];
		var line = content && content.split("\n");
		var startIndex = parameters.startIndex ||  0;
		var count = parameters.count ||  20;
		for (var i = startIndex; line && i < line.length && i < count + startIndex; i++) {
			if (line[i] && line[i].indexOf('{') !== -1) {
				var json = JSON.parse(line[i]);
				var inst = factory.createInstance(_, null, db);
				inst.id(_, i);
				inst.path(_, json.path);
				inst.type(_, json.type);
				instances.push(inst);
			}
		}
		return instances;
	},
	$relations: {},

	$functions: {},
	$services: {},

	$uniqueConstraints: []

};