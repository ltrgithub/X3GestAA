"use strict";

var config = require("syracuse-main/lib/nodeconfig").config;
var EdiEntity = require("syracuse-edi/lib/ediEntity");
require("syracuse-edi/lib/ediProcess"); // TOOD rqeuire to load traces

var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var EdiTypeToClass = require("syracuse-edi/lib/enumType").EdiTypeToClass;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpersEdi = require("syracuse-edi/lib/helpers");
var datetime = require("syracuse-core/lib/types/datetime");

exports.entity = {
	$capabilities: "",
	$titleTemplate: "EDI list process running",
	$descriptionTemplate: " ",
	$properties: {

		idProcess: {
			$title: "id Processus" // id of the edi process
		},
		expiration: {
			$title: "Expiration time (in millisecond)",
			$type: "datetime",
			$default: datetime.fromJsDate(new Date(0))
		},
		x3RepName: {
			$title: "name of x3 representation"
		},
		folder: {
			$title: "dataset of the endpoint to use",
			$propagate: function(_, instance, val) {
				instance.endPoint(_, adminHelper.getEndpoint(_, {
					dataset: val
				}));
			}
		},
		states: {
			$title: "states of the process (generation or decode)",
			$type: "json"
		},
		idMessageMapping: {
			$title: "Id of Message Mapping",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								$uuid: val,
							}
						},
						db: instance._db
					});
					cacheEdi && instance.messageMapping(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}
			}
		},
		idSequentialFile: {
			$title: "id of Sequential File",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								$uuid: val,
							}
						},
						db: instance._db
					});
					cacheEdi && instance.sequentialFile(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}

			}
		},
		idProtocol: {
			$title: "id of protocol",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								$uuid: val,
							}
						},
						db: instance._db
					});
					cacheEdi && instance.protocol(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}

			}
		},
		idFlow: {
			$title: "id of protocol",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								$uuid: val,
							}
						},
						db: instance._db
					});
					cacheEdi && instance.protocol(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}

			}
		},
		flow: {
			$title: "json content of the messageMapping",
			$type: "json"
		},
		messageMapping: {
			$title: "json content of the messageMapping",
			$type: "json"
		},
		sequentialFile: {
			$title: "json content of the sequentialFile",
			$type: "json"
		},
		protocol: {
			$title: "json content of the protocol",
			$type: "json"
		}
	},
	$relations: {
		endPoint: {
			$title: "endpoint",
			$type: "endPoint"
		}
	},
	$functions: {

		schedule: function(_) {
			if (new Date(this.expiration(_)._value).getTime() > 0) //
				return scheduler.schedule(_, this, this.$uuid, new Date(this.expiration(_)._value).getTime(), {}, "db");
		},
		fire: function(_, key, parameters) { // call by scheduler when a print document must be purge automatically
			try {
				// delete all file store in storage relative to that process
				sa.listDocument(_, {
					sdataWhere: "description eq '" + this.idProcess(_) + "'"
				}).forEach_(_, function(_, doc) {
					doc.deleteSelf(_);
				});
				EdiEntity.removeEdiCacheEntity(_, {
					sdataWhere: "id eq '" + this.idProcess(_) + "' and type eq 'sas'"
				});
				this.deleteSelf(_);

			} catch (e) {
				console.log(e.stack);
			}
		}
	},
	$services: {}
};