"use strict";

var config = require('config');
var EdiEntity = require("syracuse-edi/lib/EdiEntity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var EdiTypeToClass = require("syracuse-edi/lib/enumType").EdiTypeToClass;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpersEdi = require("syracuse-edi/lib/helpers");

exports.entity = {
	$capabilities: "",
	$titleTemplate: "EDI list process running",
	$descriptionTemplate: " ",
	$properties: {
		idProcess: {
			$title: "id Processus" // id of the edi process
		},
		x3RepName: {
			$title: "name of x3 representation"
		},
		folder: {
			$title: "dataset of the endpoint to use",
			$propagate: function(_, instance, val) {
				instance.endPoint(_, adminHelper.getEndpoint(_, {
					dataset: val
				}));
			}
		},
		idMessageMapping: {
			$title: "Id of Message Mapping",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								id: val,
								type: EdiType.MESSAGEMAPPING
							}
						},
						db: instance._db
					});
					cacheEdi && instance.messageMapping(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}
			}
		},
		idSequentialFile: {
			$title: "id of Sequential File",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								id: val,
								type: EdiType.SEQFILE
							}
						},
						db: instance._db
					});
					cacheEdi && instance.sequentialFile(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}

			}
		},
		idProtocol: {
			$title: "id of protocol",
			$propagate: function(_, instance, val) {
				try {
					var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
						filter: {
							jsonWhere: {
								id: val,
								type: EdiType.PROTOCOL
							}
						},
						db: instance._db
					});
					cacheEdi && instance.protocol(_, cacheEdi.json(_));
				} catch (e) {
					console.log(e.stack);
				}

			}
		},

		messageMapping: {
			$title: "json content of the messageMapping",
			$type: "json"
		},
		sequentialFile: {
			$title: "json content of the sequentialFile",
			$type: "json"
		},
		protocol: {
			$title: "json content of the protocol",
			$type: "json"
		}
	},
	$relations: {
		endPoint: {
			$title: "endpoint",
			$type: "endPoint"
		}
	},
	$functions: {

	},
	$services: {}
};