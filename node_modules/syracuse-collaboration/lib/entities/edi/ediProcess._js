"use strict";

var config = require("syracuse-main/lib/nodeconfig").config;
var EdiEntity = require("syracuse-edi/lib/EdiEntity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;

exports.entity = {
	$capabilities: "",
	$titleTemplate: "EDI list process running",
	$descriptionTemplate: " ",
	$properties: {
		idProcess: {
			$title: "id Processus" // id of the edi process
		},
		idMessageMapping: {
			$title: "Id of Message Mapping",
			$propagate: function(_, instance, val) {

				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataFilter: "id eq '" + val + "' and type eq '" + EdiType.MESSAGEMAPPING + "'"
					}
				});
				cacheEdi && instance.messageMapping(_, cacheEdi.json(_));
			}
		},
		idSequentialFile: {
			$title: "id of Sequential File",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.SEQFILE + "'"
					}
				});
				cacheEdi && instance.sequentialFile(_, cacheEdi.json(_));
			}
		},
		idEdiFlow: {
			$title: "id of Edi Flow",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.EDIFLOW + "'"
					}
				});
				cacheEdi && instance.ediFlow(_, cacheEdi.json(_));
			}

		},
		idProtocol: {
			$title: "id of protocol",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.PROTOCOL + "'"
					}
				});
				cacheEdi && instance.protocol(_, cacheEdi.json(_));
			}
		},
		messageMapping: {
			$title: "json content of the messageMapping",
			$type: "json"
		},
		sequentialFile: {
			$title: "json content of the sequentialFile",
			$type: "json"
		},
		ediFlow: {
			$title: "json content of the ediFlow",
			$type: "json"
		},
		protocol: {
			$title: "json content of the protocol",
			$type: "json"
		}
	},
	$relations: {

	},
	$functions: {
		/*getMessageMapping: function(_) {
         var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
         filter: {
         sdataFilter: "id eq '" + this.idMessageMapping(_) + "' and type eq '"+EdiType.MESSAGEMAPPING+"'"
         }
         });
         return cacheEdi && cacheEdi.json(_);

         },
         getSequentialFile: function(_) {

         var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
         filter: {
         sdataWhere: "id eq '" + this.idSequentialFile(_)+ "' and type eq '"+EdiType.SEQFILE+"'"
         }
         });
         return cacheEdi && cacheEdi.json(_);
         },
         getEdiFlow: function(_) {
         var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
         filter: {
         sdataWhere: "id eq '" + this.idEdiFlow(_) + "' and type eq '"+EdiType.EDIFLOW+"'"
         }
         });
         return cacheEdi && cacheEdi.json(_);
         },
         getProtocol: function(_) {
         var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
         filter: {
         sdataWhere: "id eq '" + this.idProtocol(_) + "' and type eq '"+EdiType.PROTOCOL+"'"
         }
         });
         return cacheEdi && cacheEdi.json(_);
         }*/
	},
	$services: {},
	$expire: function(_, instance) {
		/*/ set in hard the value, it will be configured after
         if (config.edi.cache.timeout) { // timeout + 1
         return (config.edi.cache.timeout + 1) * 60000;
         }*/
	}

};