"use strict";

var config = require("syracuse-main/lib/nodeconfig").config;
var EdiEntity = require("syracuse-edi/lib/EdiEntity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var EdiTypeToClass = require("syracuse-edi/lib/enumType").EdiTypeToClass;

exports.entity = {
	$capabilities: "",
	$titleTemplate: "EDI list process running",
	$descriptionTemplate: " ",
	$properties: {
		idProcess: {
			$title: "id Processus" // id of the edi process
		},
		x3ClassName: {
			$title: "name of x3 class"
		},
		folder: {
			$title: "dataset of the endpoint to use"

		},
		idMessageMapping: {
			$title: "Id of Message Mapping",
			$propagate: function(_, instance, val) {

				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataFilter: "id eq '" + val + "' and type eq '" + EdiType.MESSAGEMAPPING + "'"
					},
					db: instance._db
				});
				if (cacheEdi) {
					instance.messageMapping(_, cacheEdi.json(_));
				} else {
					/*
                    var js = instance.getEntity(_,EdiType.MESSAGEMAPPING,val);
                    js && instance.messageMapping(_,js);*/
				}
			}
		},
		idSequentialFile: {
			$title: "id of Sequential File",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.SEQFILE + "'"
					},
					db: instance._db
				});
				if (cacheEdi) {
					instance.sequentialFile(_, cacheEdi.json(_));
				} else {
					/* var js = instance.getEntity(_,EdiType.SEQFILE,val);
                    js && instance.sequentialFile(_,js);
                    */
				}
			}
		},
		idEdiFlow: {
			$title: "id of Edi Flow",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.EDIFLOW + "'"
					},
					db: instance._db
				});
				if (cacheEdi) {
					instance.ediFlow(_, cacheEdi.json(_));
				} else {
					/*var js = instance.getEntity(_,EdiType.EDIFLOW,val);
                    js && instance.ediFlow(_,js);*/
				}
			}

		},
		idProtocol: {
			$title: "id of protocol",
			$propagate: function(_, instance, val) {
				var cacheEdi = EdiEntity.getEdiCacheEntity(_, {
					filter: {
						sdataWhere: "id eq '" + val + "' and type eq '" + EdiType.PROTOCOL + "'"
					},
					db: instance._db
				});
				if (cacheEdi) {
					instance.protocol(_, cacheEdi.json(_));
				} else {
					/*var js = instance.getEntity(_,EdiType.PROTOCOL,val);
                    js && instance.protocol(_,js);*/
				}
			}
		},

		messageMapping: {
			$title: "json content of the messageMapping",
			$type: "json"
		},
		sequentialFile: {
			$title: "json content of the sequentialFile",
			$type: "json"
		},
		ediFlow: {
			$title: "json content of the ediFlow",
			$type: "json"
		},
		protocol: {
			$title: "json content of the protocol",
			$type: "json"
		}
	},
	$relations: {
		endPoint: {
			$title: "endpoint",
			$type: "endPoint"
		}
	},
	$functions: {
		getEntity: function(_, type, id) {
			console.log("tes");
			var model = this.endPoint(_).getModel(_);
			console.log("tes");

			var db = this.endPoint(_).getOrm(_);
			console.log("tes");

			var entity = this.model.getEntity(_, EdiTypeToClass[type]);
			console.log("tes");

			return db.fetchInstance(_, entity, id);

		}
	},
	$services: {},
	$expire: function(_, instance) {
		/*/ set in hard the value, it will be configured after
         if (config.edi.cache.timeout) { // timeout + 1
         return (config.edi.cache.timeout + 1) * 60000;
         }*/
	}

};