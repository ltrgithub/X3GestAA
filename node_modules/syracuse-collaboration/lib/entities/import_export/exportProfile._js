"use strict";

var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsurl = require("jsurl");

exports.entity = {
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$isUnique: true
		},
		description: {
			$title: "Description",
			$linksToDetails: true,
			$isMandatory: true,
			$isUnique: true
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "syracuse";
			}
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "collaboration";
			}
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "syracuse";
			}
		},

	},
	$titleTemplate: "Export",
	$descriptionTemplate: "Administration data export",
	$valueTemplate: "{description}",
	$helpPage: "Administration-reference-Export-profiles",
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$isDefined: true,
			$isMandatory: true,
			defaultValue: function(_) {
				return adminHelper.getCollaborationApplication(_);
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$isDefined: true,
			defaultValue: function(_) {
				return adminHelper.getCollaborationEndpoint(_);
			}
		},
		exportProfileItem: {
			$title: "Profile Item",
			$type: "exportProfileItems",
			$capabilities: "sort,reorder,delete",
			//			$isMandatory: true,
			$isChild: true,
			$select: {
				$title: "Entities",
				$type: "lookupEntity", // "lookupRepresentation",
				$fieldMap: {
					className: "name",
					/* representation: "name",*/
					title: "title"
				},
				$parameters: "application={applicationName}&contract={contractName}&dataset={endpointName}"
			},
		},
	},
	$functions: {
		generateContent: function(_, options) {
			return jsonExport.jsonExport(_, this, options);
		}
	},
	$services: {
		exportProfile: {
			$method: "GET",
			$isMethod: true,
			$title: "Export",
			$type: "application/json",
			$parameters: {
				$url: "{$baseUrl}/selectExportTargets/$template/$workingCopies?representation=selectExportTarget.$edit&targetTypes=file,db_file,server&role={$role}",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance) {
				var opt = context.parameters.parameters && jsurl.parse(context.parameters.parameters);

				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];
				opt.$diagnoses = t.$diagnoses;
				opt.tracker = t;
				if (!opt.path) opt.path = instance.code(_);
				if (opt && opt.targetType === "download") {
					t.replyLink = "$download";
				}

				var exp = jsonExport.jsonExport(_, instance, opt);

				if (opt && opt.targetType === "download") {
					t.$links = t.$links || {};
					t.$links.$download = {
						$title: "Download",
						$url: t.location + "?reply=true",
						$method: "GET",
						$type: "application/json",
						$filename: opt.path + ".json"
					};
				}
				return JSON.stringify(exp, null, opt.beautify ? "\t" : null);
			}
		}
	},
	$searchIndex: {
		$fields: ["description"]
	}
};