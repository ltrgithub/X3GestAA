"use strict";

var Template = require("syracuse-core/lib/resource/resourceProxy").Template;
var util = require('util');
var patchcreate = require("syracuse-patch/lib/patchcreate");


exports.entity = {
	$titleTemplate: "Patch levels",
	$valueTemplate: "{relNumber}-{patchNumber}",
	$descriptionTemplate: "Version {relNumber}-{patchNumber}",
	$isPersistent: false,
	$canEdit: false,
	$canDelete: false,
	$canCreate: false,
	$listTitle: "List of patch levels on roll-out repository",
	$key: "{rollout}",
	$properties: {
		type: {
			$title: "Type",
			$compute: function(_, instance) {
				return instance.patchNumber(_) > 0 ? "Patch" : "Release";
			}
		},
		relNumber: {
			$title: "Release number",
			$computeSortValue: patchcreate.relNumberCmp
		},
		patchNumber: {
			$title: "Patch number",
			$type: "integer"
		},
		comment: {
			$title: "Comment"
		},
		date: {
			$title: "Date"
		},
		rollout: {
			$title: "Roll-out Checksum",
		},
		source: {
			$title: "Source checksum"
		},
		branchings: {
			$title: "Branchings"
		}
	},
	$relations: {
	},
	$fetchInstances: function(_, context, parameters) {
		var self = this;
		//
		var config = require('syracuse-main/lib/nodeconfig').config;
		var patches = patchcreate.allPatches(config.patch, _);
		var result = [];
		var entity = context.db.model.getEntity("patchLevel");
		var i = patches.length;
		while (--i >= 0) {
			var patch = patches[i];
			var inst = entity.factory.createInstance(_, null, context.db);
			inst.relNumber(_, patch.relNumber);
			inst.patchNumber(_, patch.patchNumber);
			inst.comment(_, patch.comment);
			inst.rollout(_, patch.rollout);
			inst.source(_, patch.source);
			inst.date(_, patch.date);
			inst.branchings(_, patch.branchings || "");
			result.push(inst);
		}
		return result;
	},
	$functions: {
		$setId: function(_, context, id) {
			var config = require('syracuse-main/lib/nodeconfig').config;
			var patch = patchcreate.commitDataFromHash(id || "HEAD", config.patch, _);
			this.rollout(_, patch.rollout);
			this.relNumber(_, patch.relNumber);
			this.patchNumber(_, patch.patchNumber);
			//
		}	
	},
	$links: {
	}
	// ,
	// $defaultOrder: [["relNumber", true], ["patchNumber", true]]
}