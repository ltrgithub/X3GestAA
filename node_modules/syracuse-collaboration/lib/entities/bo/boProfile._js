"use strict";

var boRestClient = require("syracuse-x3/lib/boRestClient").boRestClient;

exports.entity = {
	$titleTemplate: "Business Objects profiles",
	$descriptionTemplate: "Configure Business Objects profile",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true
		},
		security: {
			$title: "Security",
			$enum: [{
				$value: "secEnterprise",
				$title: "secEnterprise"
			}],
			$default: "secEnterprise"
		},
		user: {
			$title: "User",
			$isMandatory: true
		},
		password: {
			$title: "Password",
			$type: "password",
			$salt: "",
			$capabilities: "confirm",
			$isMandatory: true
		}
	},
	$relations: {
		boServer: {
			$title: "BO Server",
			$type: "boServer",
			$isMandatory: true
		}
	},
	$functions: {},
	$services: {
		test: {
			$method: "GET",
			$isMethod: true,
			$title: "Test connection",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {


					var boClient = new boRestClient(_, instance, context);

					if (boClient.logon(_) != null) {
						instance.$diagnoses.push({
							severity: "info",
							message: "Logon OK"
						});
					} else {
						instance.$diagnoses.push({
							severity: "error",
							message: "Logon failed ; Get token failed"
						});
					}

					if (boClient.logoff(_) != null) {
						instance.$diagnoses.push({
							severity: "info",
							message: "Logoff OK"
						});
					} else {
						instance.$diagnoses.push({
							severity: "error",
							message: "Logoff failed."
						});
					}

				} catch (e) {
					console.error(e.stack);
					instance.$diagnoses.push({
						severity: "error",
						message: "" + e
					});
				}
			}
		},
	}
};