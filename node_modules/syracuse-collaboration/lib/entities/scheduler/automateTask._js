"use strict"

var IndexHelper = require("syracuse-search/lib/elasticIndex").IndexHelper;
var AdminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var _taskFactory = {
	searchIndex: function(_, task, endpoint, params) {
		var diags = [];
		var h = new IndexHelper(endpoint);
		h.updateIndex(_, {
			diagnoses: diags
		});
		// logs
		AdminHelper.logServerMessage(_, task.description(_), (task.logLevel(_) === "all") ? diags : diags.filter_(_, function(_, d) {
			if(d.severity === "error") return true;
			if((task.logLevel(_) === "warning") && (d.severity === "warning")) return true;
			return false;
		}));
	}
}

exports.entity = {
	$titleTemplate: "Task",
	$valueTemplate: "{description}",
	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true
		},
		suspended: {
			$title: "Suspended",
			$type: "boolean",
			$default: false
		},
		taskClassName: {
			$title: "Task",
			// TODO: define more taks and hook a lookup
			$default: "searchIndex"
		},
		taskTitle: {
			$title: "Task title",
			// TODO: same as taskClassName
			$default: "Search Index update"
		},
		logLevel: {
			$title: "Log level",
			$enum: ["error", "warning", "all"],
			$enumCaptions: ["Errors only", "Errors and Warnings", "All"],
			$default: "error"
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		}
	},
	$functions: {
		run: function(_) {
			_taskFactory[this.taskClassName(_)] && _taskFactory[this.taskClassName(_)](_, this, this.endpoint(_));
		}
	}
}