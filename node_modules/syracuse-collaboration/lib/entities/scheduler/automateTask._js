"use strict";

var locale = require("syracuse-core/lib/locale");
var IndexHelper = require("syracuse-search/lib/elasticIndex").IndexHelper;
var AdminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var globals = require('streamline/lib/globals');

exports.entity = {
	$titleTemplate: "Task",
	$valueTemplate: "{description}",
	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true
		},
		suspended: {
			$title: "Suspended",
			$type: "boolean",
			$default: false
		},
		logLevel: {
			$title: "Log level",
			$enum: [{
				$value: "error",
				$title: "Errors only"
			}, {
				$value: "warning",
				$title: "Errors and Warnings"
			}, {
				$value: "all",
				$title: "All"
			}],
			$default: "error"
		},
		processSummary: {
			$title: "Task",
			$compute: function(_, instance) {
				var proc = instance.process(_);
				if (!proc) return;
				return proc.$getSummary(_);
			}
		}
	},
	$init: function(_, instance) {
		//instance.process(_, instance._db.getEntity(_, "searchAdmin").createInstance(_, instance._db));
	},
	$relations: {
		process: {
			$title: "Settings",
			$variants: {
				searchAdmin: {
					$type: "searchAdmin"
				},
				exportPersonalization: {
					$type: "exportPersonalization"
				},
				profileMenuImport: {
					$type: "profileMenuImport"
				}
			},
			$isDynamicType: true, // TODO: remove, should be replaced by $variants
			$isChild: true,
			$isHidden: true
		},
		user: {
			$title: "User",
			$type: "user",
			$isMandatory: true
		},
		role: {
			$title: "Role",
			$type: "role",
			$isMandatory: true
		},
		locale: {
			$title: "Locale",
			$type: "localePreference",
		}
	},
	$functions: {
		run: function(_, diagnoses, newSession) {
			console.error("RUN BEGINNING");
			var p = this.process(_);
			if (!p) throw new Error(locale.format(module, "taskProcessUndefined", this.description(_)));
			if (!p.scheduledExecute) throw new Error(locale.format(module, "taskProcessExecuteUndefined", this.description(_)));
			console.error("RUN BEGINNING2");
			var diags = diagnoses || [];
			// create a new session for this task
			var session = globals.context.session;
			var sessionOld = session;
			var reqOld = globals.context.request;
			var respOld = globals.context.response;
			console.error("RUN START");
			if (newSession) {
				globals.context.request = undefined;
				globals.context.response = undefined;
				session = sessionManager.createBatchSession(_, this.user(_), this.role(_), this.locale(_), diags);
				newSession = true;
			}
			var oldInstance = globals.context.automateInstance;
			globals.context.automateInstance = this._parent;
			try {
				if (session) {
					console.error("IN SESSION");
					try {
						var task = this;
						p.scheduledExecute(_, diags);
						// logs
						console.error("AFTER EXECUTE" + require('util').format(diags));
						AdminHelper.logServerMessage(_, task.description(_), (task.logLevel(_) === "all") ? diags : diags.filter_(_, function(_, d) {
							if (d.severity === "error") return true;
							if ((task.logLevel(_) === "warning") && (d.severity === "warning")) return true;
							return false;
						}));
						console.error("AFTER MESSAGE");
					} catch (e) {
						diags.push({
							$severity: "error",
							$message: "Execution error " + e,
						});
						AdminHelper.logServerMessage(_, task.description(_), (task.logLevel(_) === "all") ? diags : diags.filter_(_, function(_, d) {
							if (d.severity === "error") return true;
							if ((task.logLevel(_) === "warning") && (d.severity === "warning")) return true;
							return false;
						}));
						throw e;
					} finally {
						console.error("BEFORE DELETE");
						if (newSession) sessionManager.deleteSession(_, session.id) // do not delete existing session;
						globals.context.session = sessionOld; // restore old session in context
						globals.context.request = reqOld;
						globals.context.response = respOld;
						console.error("AFTER DELETE");
					}
				} else {
					diags.push({
						$severity: "error",
						$message: locale.format(module, "noSession", this.description(_))
					});
					console.error("Could not create session " + require('util').format(diags));
				}
			} finally {
				globals.context.automateInstance = oldInstance;
			}
		}
	}
};