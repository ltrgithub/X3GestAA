"use strict";

var locale = require("syracuse-core/lib/locale");
var IndexHelper = require("syracuse-search/lib/elasticIndex").IndexHelper;
var AdminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var _taskFactory = {
	searchIndex: function(_, task, endpoint, params) {
		var diags = [];
		var h = new IndexHelper(endpoint);
		h.updateIndex(_, true, {
			diagnoses: diags
		});
		// logs
		AdminHelper.logServerMessage(_, task.description(_), (task.logLevel(_) === "all") ? diags : diags.filter_(_, function(_, d) {
			if(d.severity === "error") return true;
			if((task.logLevel(_) === "warning") && (d.severity === "warning")) return true;
			return false;
		}));
	}
}

exports.entity = {
	$titleTemplate: "Task",
	$valueTemplate: "{description}",
	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true
		},
		suspended: {
			$title: "Suspended",
			$type: "boolean",
			$default: false
		},
		logLevel: {
			$title: "Log level",
			$enum: [{
				$value: "error",
				$title: "Errors only"
			},{
				$value: "warning",
				$title: "Errors and Warnings"
			},{
				$value: "all",
				$title: "All"
			}],
			$default: "error"
		}
	},
	$init: function(_, instance) {
		//instance.process(_, instance._db.getEntity(_, "searchAdmin").createInstance(_, instance._db));
	},
	$relations: {
		process: {
			$title: "Settings",
			$type: "searchAdmin", // TODO: for dynamic types, should support $type: null
			$isDynamicType: true,
			$isChild: true
		}
	},
	$functions: {
		run: function(_) {
			//_taskFactory[this.taskClassName(_)] && _taskFactory[this.taskClassName(_)](_, this, this.endpoint(_));
			var p = this.process(_);
			if(!p) throw new Error(locale.format(module, "taskProcessUndefined", this.description(_)));
			if(!p.scheduledExecute) throw new Error(locale.format(module, "taskProcessExecuteUndefined", this.description(_)));
			var diags = [];
			p.scheduledExecute(_, diags);
			// logs
			AdminHelper.logServerMessage(_, task.description(_), (task.logLevel(_) === "all") ? diags : diags.filter_(_, function(_, d) {
				if(d.severity === "error") return true;
				if((task.logLevel(_) === "warning") && (d.severity === "warning")) return true;
				return false;
			}));
		}
	}
}