"use strict";

var fs = require('fs');
var fsp = require('path');
var sys = require("util");

function _buildAuthByClass(_, profile) {
	var authByClass = {};
	var settings = JSON.parse(fs.readFile(fsp.join(__dirname, "../security/profile.json"), _));
	profile.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		var p = settings[it.code(_)];
		if(!p || !p.entities) return;
		//
		Object.keys(p.entities).forEach(function(pcName) {
			var a = authByClass[pcName] = authByClass[pcName] || {};
			// conditions
			var c = a.createConditions = a.createConditions || [];
			c.push({
				profileItem: it,
				condition: p.entities[pcName].createCondition || p.entities[pcName].condition || {},
				properties: p.entities[pcName].properties
			});
			var r = a.readConditions = a.readConditions || [];
			r.push({
				profileItem: it,
				condition: p.entities[pcName].readCondition || p.entities[pcName].condition || {},
				properties: p.entities[pcName].properties
			});
			var u = a.updateConditions = a.updateConditions || [];
			u.push({
				profileItem: it,
				condition: p.entities[pcName].updateCondition || p.entities[pcName].condition || {},
				properties: p.entities[pcName].properties
			});
			var d = a.deleteConditions = a.deleteConditions || [];
			d.push({
				profileItem: it,
				condition: p.entities[pcName].deleteCondition || p.entities[pcName].condition || {},
				properties: p.entities[pcName].properties
			});
			var e = a.execConditions = a.execConditions || [];
			e.push({
				profileItem: it,
				condition: p.entities[pcName].executeCondition || p.entities[pcName].condition || {},
				properties: p.entities[pcName].properties
			});
		});
		//
		if(p.entityServices) {
			Object.keys(p.entityServices).forEach(function(entName) {
				var a = authByClass[entName] = authByClass[entName] || {};
				var es = p.entityServices[entName];
				var esk = Object.keys(es);
				if(esk.length) 
					esk.forEach(function(opName) {
						var o = a[opName] = a[opName] || {};
						var e = o.execConditions = o.execConditions || [];
						e.push({
							profileItem: it,
							condition: es[opName].executeCondition || es[opName].condition || {}
						});
					});
				else {
					var opName = "$all";
					var o = a[opName] = a[opName] || {};
					var e = o.execConditions = o.execConditions || [];
					e.push({
						profileItem: it,
						condition: {}
					});
				}
			});
		}
		//
		if(p.endpointServices) {
			// use a generic "$endpoint" entry for those "endpoint global" operations
			var a = authByClass.$endpoint = authByClass.$endpoint || {};
			Object.keys(p.endpointServices).forEach(function(opName) {
				var o = a[opName] = a[opName] || {};
				var e = o.execConditions = o.execConditions || [];
				e.push({
					profileItem: it,
					condition: p.endpointServices[opName].executeCondition || p.endpointServices[opName].condition || {}
				});
			});
		}
	});
	return authByClass;
}

function _reduceConditions(_, conditions, allowHandler) {
	if(!conditions || !conditions.length)
		return true;
	//
	return conditions.reduce_(_, function(_, prev, cond) {
		if(prev === true)
			return true;
		if(allowHandler(_, cond)) {
			if(cond.condition.deny)
				return false;
			if(cond.condition.filter) {
				if(typeof prev === "boolean")
					return "(" + cond.condition.filter + ")";
				else
					return prev + " OR " + "(" + cond.condition.filter + ")";
			} else
				return true;
		} else 
			return prev;
	}, false);
}

exports.entity = {
	$titleTemplate: "Security profile",
	$valueTemplate: "{description}",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$isUnique: true
		},
		description: {
			$title: "Description",
			$isMandatory: true,
			$isLocalized: true,
			$linksToDetails: true
		}
	},
	$relations: {
		profileItems: {
			$capabilities: "",
			$title: "Authorizations",
			$type: "securityProfileItems",
			$isChild: true
		},
		roles: {
			$title: "Associated roles",
			$type: "roles",
			$inv: "securityProfile",
			$isComputed: true,
			$lookupFilter: {
				securityProfile: null
			}
		}
	},
	$init: function(_, instance) {
		// create the list of profiles from profile.json
		var profile = JSON.parse(fs.readFile(fsp.join(__dirname, "../security/profile.json"), _));
		Object.keys(profile).forEach_(_, function(_, pName) {
			var item = instance.profileItems(_).add(_);
			var p = profile[pName];
			item.code(_, pName);
			item.description(_, p.title);
			item.canRead(_, false);
		});
	},
	$functions: {
		// canCreateClass returns:
		//   true if the user can create an instance in the class
		//   false if the user cannot create an instance in the class
		canCreateClass: function(_, entityName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			// can create is allowed to create in EVERY profile item
			return !entAuth.createConditions || (entAuth.createConditions.length === 0) || entAuth.createConditions.every_(_, function(_, c) {
				return c.profileItem.canCreate(_);
			});
		},
		// canReadClass returns:
		//   true if the user can read any record in the class
		//   false if the user cannot read any record in the class
		//   an string with a sdata filter to apply to the records
		canReadClass: function(_, entityName, representationName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			//
			return _reduceConditions(_, entAuth.readConditions, function(_, cond) {
				return cond.profileItem.canRead(_) && !cond.condition.deny;
			});
		},
		canReadProperty: function(_, entityName, propName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			var conditions = entAuth.readConditions;
			if(!conditions || !conditions.length)
				return true;
			//
			return conditions.reduce_(_, function(_, prev, cond) {
				if(prev === true)
					return true;
				if(cond.profileItem.canRead(_)) {
					if(cond.condition.deny)
						return false;
					if(cond.properties) {
						return cond.properties.indexOf(propName) >= 0;
					} else
						return true;
				} else 
					return prev || cond.profileItem.canRead(_);
			}, false);
		},
		// canUpdateClass returns:
		//   true if the user can update any record in the class
		//   false if the user cannot update any record in the class
		//   an string with a sdata filter the instance MUST verify to update
		canUpdateClass: function(_, entityName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			//
			return _reduceConditions(_, entAuth.updateConditions, function(_, cond) {
				return cond.profileItem.canWrite(_) && !cond.condition.deny;
			});
		},
		canUpdateProperty: function(_, entityName, propName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			var conditions = entAuth.updateConditions;
			if(!conditions || !conditions.length)
				return true;
			//
			return conditions.reduce_(_, function(_, prev, cond) {
				if(prev === true)
					return true;
				if(cond.profileItem.canWrite(_)) {
					if(cond.condition.deny)
						return false;
					if(cond.properties) {
						return cond.properties.indexOf(propName) >= 0;
					} else
						return true;
				} else 
					return prev || cond.profileItem.canWrite(_);
			}, false);
		},
		// canDeleteClass returns:
		//   true if the user can delete any record in the class
		//   false if the user cannot delete any record in the class
		//   an string with a sdata filter the instance MUST verify to delete
		canDeleteClass: function(_, entityName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			//
			return _reduceConditions(_, entAuth.deleteConditions, function(_, cond) {
				return (cond.condition.allow || cond.profileItem.canDelete(_)) && !cond.condition.deny;
			});
		},
		// canExecuteService returns:
		//   true if the user can execute the service
		//   false if the user cannot execute the service
		//   pass null or empty to entityName to check for an endpoint service
		canExecuteService: function(_, entityName, operationName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			entityName = entityName || "$endpoint"; 
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			var opEntAuth = entAuth[operationName] || entAuth.$all;
//			console.log("(284) :"+sys.inspect(opEntAuth, null, 4)+"; opName: "+operationName);
			if(!opEntAuth)
				return true;
			//
			return _reduceConditions(_, opEntAuth.execConditions, function(_, cond) {
				return (cond.condition.allow || cond.profileItem.canExecute(_)) && !cond.condition.deny;
			});
		}
	}
};