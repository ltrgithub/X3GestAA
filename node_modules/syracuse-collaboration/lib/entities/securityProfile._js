"use strict";

var fs = require('fs');
var fsp = require('path');
var sys = require("util");

function _buildAuthByClass(_, profile) {
	var authByClass = {};
	var settings = JSON.parse(fs.readFile(fsp.join(__dirname, "../security/profile.json"), _));
	profile.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		var p = settings[it.code(_)];
		if(!p || !p.entities) return;
		//
		Object.keys(p.entities).forEach(function(pcName) {
			// for now, a class can be in one setting only
			var a = authByClass[pcName] = authByClass[pcName] || {};
			var c = a.conditions = a.conditions || [];
			c.push({
				profileItem: it,
				filter: p.entities[pcName].condition && p.entities[pcName].condition.filter
			});
		})
	});
	return authByClass;
}

exports.entity = {
	$titleTemplate: "Security profile",
	$valueTemplate: "{description}",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$isUnique: true
		},
		description: {
			$title: "Description",
			$isMandatory: true,
			$isLocalized: true,
			$linksToDetails: true
		}
	},
	$relations: {
		profileItems: {
			$capabilities: "",
			$title: "Authorizations",
			$type: "securityProfileItems",
			$isChild: true
		},
		roles: {
			$title: "Associated roles",
			$type: "roles",
			$inv: "securityProfile",
			$isComputed: true,
			$lookupFilter: {
				securityProfile: null
			}
		}
	},
	$init: function(_, instance) {
		// create the list of profiles from profile.json
		var profile = JSON.parse(fs.readFile(fsp.join(__dirname, "../security/profile.json"), _));
		Object.keys(profile).forEach_(_, function(_, pName) {
			var item = instance.profileItems(_).add(_);
			var p = profile[pName];
			item.code(_, pName)
			item.description(_, p.title);
			item.canRead(_, false);
		});
	},
	$functions: {
		// canReadClass returns:
		//   true if the user can read any record in the class
		//   false if the user cannot read any record in the class
		//   an string with a sdata filter to apply to the records
		canReadClass: function(_, entityName, representationName) {
			var self = this;
			if(!self._authByClass)
				self._authByClass = _buildAuthByClass(_, self);
			if(!self._authByClass[entityName])
				return true;
			var entAuth = self._authByClass[entityName];
			if(!entAuth.conditions || !entAuth.conditions.length)
				return true;
			//
			return entAuth.conditions.reduce_(_, function(_, prev, cond) {
				if(prev === true)
					return true;
				if(cond.profileItem.canRead(_)) {
					if(cond.filter) {
						if(typeof prev === "boolean")
							return "(" + cond.filter + ")";
						else
							return prev + " OR " + "(" + cond.filter + ")";
					} else
						return true;
				} else 
					return prev || cond.profileItem.canRead(_);
			}, false);
		}
	}
}