"use strict";

var httpClient = require('syracuse-httpclient/lib/httpClient');
var flows = require("streamline/lib/util/flows");
var hrmHelper = require('syracuse-hrm/lib/hrmHelper');
var config = require('config');
var locale = require("syracuse-core/lib/locale");

var trace = config && config.hrm && config.hrm.proxy && config.hrm.proxy.trace;

exports.entity = {
	$valueTemplate: "{host}:{http}",
	$helpPage: "Administration-reference-HRM-Web-Servers",
	$properties: {
		host: {
			$title: "HRM server host",
			$description: "Physical server name or IP address",
			$isMandatory: true,
			$linksToDetails: true
		},
		http: {
			$title: "HRM server HTTP port",
			$description: "Tomcat server port",
			$isMandatory: true
		},
		sslEnabled: {
			$title: "SSL enabled",
			$description: "SSL is enabled on the Web server",
			$type: "boolean",
			$default: false
		},
		https: {
			$title: "HRM server HTTPS port",
			$description: "Tomcat server port https",
			$isDisabled: function(_, instance) {
				return !instance.sslEnabled(_);
			}
		},
		banTimeout: {
			$title: "Banishment timeout",
			$isMandatory: true,
			$type: "integer",
			$default: 60
		},
		banned: {
			$title: "Banned",
			$description: "Banned because unavailable (Duration: 1 hour)",
			$type: "boolean",
			$default: false,
			$propagate: function(_, instance, val) {
				if (val) {
					flows.setTimeout(function(_) {
						instance.banned(_, false);
						var s = instance.save(_);
						var err = hrmHelper.hasErrors(s);
						if (err) {
							throw new Error(err);
						}
						//console.log("Server is not banned anymore");
					}, instance.banTimeout(_) * 60000 || 3600000);
				}
			}
		}
	},
	$relations: {},
	$functions: {
		toString: function(_) {
			return this.host(_) + ":" + this.http(_) + (this.sslEnabled(_) ? (" (SSL: " + this.https(_) + ")") : "");
		},
		isServerRunning: function(_, secure) {
			try {
				var options = {
					method: "GET",
					url: (secure ? "https" : "http") + "://" + this.host(_) + ":" + (secure ? this.https(_) : this.http(_)) + "/xtend/sitedispmenu.jsp",
					headers: {}
				};
				if (secure) {
					options.rejectUnauthorized = false;
					options.strictSSL = false;
				}

				trace && trace('Check if running : ' + JSON.stringify(options, null, 2));
				var request = httpClient.httpRequest(_, options);
				request.setTimeout(500, _);
				var resp = request.end().response(_);

				trace && trace("isServerRunning:" + JSON.stringify({
					status: resp.statusCode,
					headers: resp.headers
				}, null, 2));

				if (resp.statusCode === 200) return true;
				// if !== 200 --> the server will be banned (by default for 1 hour)
				this.bannish(_);
				return false;
			} catch (e) {
				this.bannish(_);
				return false;
			}
		},
		bannish: function(_) {
			var self = this;
			self.banned(_, true);
			var s = self.save(_);
			var err = hrmHelper.hasErrors(s);
			if (err) {
				throw new Error(err);
			}
			//console.log("Server is banned");
		},
		ping: function(_) {
			var _diagnoses = [];
			if (!this.banned(_)) {
				if (this.isServerRunning(_)) {
					_diagnoses.push(hrmHelper.formatDiagnosis("info", locale.format(module, "pingOk", this.toString(_))));
				} else {
					_diagnoses.push(hrmHelper.formatDiagnosis("error", locale.format(module, "pingFailed", this.toString(_))));
				}
			} else {
				_diagnoses.push(hrmHelper.formatDiagnosis("error", locale.format(module, "serverBanned", this.toString(_))));
			}
			return _diagnoses;
		},
	},

	$services: {
		ping: {
			$method: "GET",
			$isMethod: true,
			$title: "Ping",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					instance.$diagnoses = instance.$diagnoses.concat(instance.ping(_));
				} catch (e) {
					instance.$diagnoses.push(hrmHelper.formatDiagnosis("error", e.message, e.safeStack));
				}
			}
		}
	},
	$uniqueConstraints: [
		["host", "http"]
	]
};