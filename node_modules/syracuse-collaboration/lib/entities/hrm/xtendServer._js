"use strict";

var httpClient = require('syracuse-httpclient/lib/httpClient');
var flows = require("streamline/lib/util/flows");
var wizardHelper = require('syracuse-xtend/lib/wizardHelper');
var nodeconfig = require('syracuse-main/lib/nodeconfig');

var trace = nodeconfig.config && nodeconfig.config.xtend && nodeconfig.config.xtend.proxy && nodeconfig.config.xtend.proxy.trace;
var bannedTimeout = nodeconfig.config && nodeconfig.config.xtend && nodeconfig.config.xtend.banned && nodeconfig.config.xtend.banned.timeout;

exports.entity = {
	$properties: {
		host: {
			$title: "XTend server host",
			$description: "Physical server name or IP address",
			$isMandatory: true
		},
		port: {
			$title: "XTend server port",
			$description: "Tomcat server port",
			$isMandatory: true
		},
		banned: {
			$title: "Banned",
			$description: "Banned because unavailable (Duration: 1 hour)",
			$type: "boolean",
			$default: false,
			$propagate: function(_, instance, val) {
				if (val) {
					flows.setTimeout(function(_) {
						instance.banned(_, false);
						var s = instance._parent.save(_);
						var err = wizardHelper.hasErrors(s);
						if (err) {
							throw new Error(err);
						}
						//console.log("Server is not banned anymore");
					}, bannedTimeout || 3600000);
				}
			}
		}
	},
	$relations: {},
	$functions: {
		isServerRunning: function(_) {
			try {
				var options = {
					method: "GET",
					url: "http://" + this.host(_) + ":" + this.port(_) + "/xtend/page",
					headers: {}
				};


				trace && trace('Check if running : ' + JSON.stringify(options, null, 2));
				var request = httpClient.httpRequest(_, options);
				var resp = request.end().response(_);

				trace && trace("isServerRunning:" + JSON.stringify({
					status: resp.statusCode,
					headers: resp.headers
				}, null, 2));

				if (resp.statusCode === 200) return true;
				// if !== 200 --> the server will be banned for 1 hour
				this.bannish(_);
				return false;
			} catch (e) {
				this.bannish(_);
				return false;
			}
		},
		bannish: function(_) {
			var self = this;
			self.banned(_, true);
			var s = self._parent.save(_);
			var err = wizardHelper.hasErrors(s);
			if (err) {
				throw new Error(err);
			}
			//console.log("Server is banned");
		}
	}
};