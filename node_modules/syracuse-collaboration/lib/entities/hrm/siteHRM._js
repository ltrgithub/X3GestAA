"use strict";

var http = require('http');
var httpClient = require('syracuse-httpclient/lib/httpClient');
var locale = require("syracuse-core/lib/locale");
var config = require('syracuse-main/lib/nodeconfig').config;
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var globals = require('streamline/lib/globals');
var wizardHelper = require('syracuse-xtend/lib/wizardHelper');
var flows = require("streamline/lib/util/flows");

var GLOBAL_PREFIX = "STD_X3_HRM";
var PREFIX_MENU_ITM = GLOBAL_PREFIX + "_SITE_";
var MENU_BLOCK_NAME = GLOBAL_PREFIX + "_SITE";
var MODULE_NAME = GLOBAL_PREFIX + "_SITES";


function isItemInProp(_, inst, item, prop) {
	var items = inst[prop](_);
	if (items.getLength() > 0) {
		items = items.toArray(_);

		for (var i in items) {
			if (items[i].$uuid === item.$uuid)
				return true;
		}
		return false;
	}
	return false;
}

function saveAndCheckErrors(_, inst) {
	var sav = inst.save(_);
	//console.log("SAV: "+JSON.stringify(sav,null,2));
	var err = wizardHelper.hasErrors(sav);
	if (err) {
		throw new Error(err);
	}
}

function getMenuItems(_, db, entity, name) {
	var filter = {
		sdataWhere: "code like '^" + name + "*" + "'"
	};
	return db.fetchInstances(_, entity, filter);
}

function getMenuItem(_, db, entity, name) {
	var filter = {
		sdataWhere: "code eq '" + name + "'"
	};
	return db.fetchInstance(_, entity, filter);
}

function getMenuBlock(_, db, entity, name) {
	var filter = {
		sdataWhere: "code eq '" + name + "'"
	};
	return db.fetchInstance(_, entity, filter);
}

function getMenuModule(_, db, entity, name) {
	var filter = {
		sdataWhere: "code eq '" + name + "'"
	};
	return db.fetchInstance(_, entity, filter);
}



exports.entity = {
	$titleTemplate: "HRM Site",
	$descriptionTemplate: "Configure HRM site",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true,
			$pattern: /^[A-Za-z_\-][A-Za-z_\-0-9]*$/
		},
		devmode: {
			$title: "Development mode",
			$type: "boolean",
			$default: false
		},
		banTimeout: {
			$title: "Banishment timeout",
			$isMandatory: true,
			$type: "integer",
			$default: 60
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$isExcluded: true,
			$isDefined: true,
			$compute: function(_, instance) {
				return adminHelper.getApplication(_, "x3", "hrm");
			},
			$isMandatory: true
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$isDefined: true,
			$lookupFilter: {
				applicationRef: "{application}"
			}
		},
		servers: {
			$title: "XTend Web Servers",
			$type: "xtendServers",
			isChild: true
		}
	},
	$functions: {
		install: function(_) {
			function getHomeNavigationPage(_) {
				var filter = {
					sdataWhere: "pageName eq 'home'"
				};
				var entity = db.getEntity(_, "navigationPage");
				return db.fetchInstance(_, entity, filter);
			}

			function setMenuItem(_) {

				function createMenuItemParameter(_, name, title, value) {
					var inst = pentity.createInstance(_, db, null);
					inst.name(_, name);
					inst.title(_, title);
					inst.value(_, value);
					return inst;
				}



				function createMenuItem(_, code, name, params) {
					var inst = entity.createInstance(_, db, null);
					updateMenuItem(_, inst, code, name, params);
					return inst;
				}

				function updateMenuItem(_, inst, code, name, params) {
					inst.code(_, code);
					inst.title(_, name);
					inst.linkType(_, "$hrm");
					inst.application(_, app);
					inst.endpoint(_, ep);
					inst.hrmSite(_, self);
					// Add menuItem parameters to be able to force web server usage (devmode)
					if (params) {
						inst.description(_, site + " (" + solution + "/" + folder + ") - Devmode (" + params.host + ":" + params.port + ")");
						inst.parameters(_).set(_, createMenuItemParameter(_, "SRVHOST", locale.format(module, "miParamHost"), params.host));
						inst.parameters(_).set(_, createMenuItemParameter(_, "SRVPORT", locale.format(module, "miParamPort"), params.port));
					} else {
						inst.description(_, site + " (" + solution + "/" + folder + ")");
					}
					saveAndCheckErrors(_, inst);
				}

				function removeDevMenuItems(_, name) {
					var items = getMenuItems(_, db, entity, name + "_DEV");
					for (var i in items) {
						items[i].deleteSelf(_);
					}
				}
				//
				var entity = db.getEntity(_, "menuItem");
				var pentity = db.getEntity(_, "menuItemParameter");
				var menuItemCode = PREFIX_MENU_ITM + solution + "_" + folder + "_" + site;

				var menuItems = [];

				var menuItem = getMenuItem(_, db, entity, menuItemCode);
				if (!menuItem) {
					menuItem = createMenuItem(_, menuItemCode, site);
				} else {
					updateMenuItem(_, menuItem, menuItemCode, site);
				}
				menuItems.push(menuItem);

				removeDevMenuItems(_, menuItemCode);
				if (self.devmode(_)) {
					var arr = self.servers(_).toArray(_);
					for (var i in arr) {
						var mName = menuItemCode + "_DEV" + i;
						var sName = site + " (" + arr[i].host(_) + ":" + arr[i].port(_) + ")";
						menuItem = createMenuItem(_, mName, sName, {
							host: arr[i].host(_),
							port: arr[i].port(_)
						});
						menuItems.push(menuItem);
					}
				}
				return menuItems;
			}

			function setMenuBlock(_, itemsToAdd) {
				function createMenuBlock(_) {
					var inst = entity.createInstance(_, db, null);
					updateMenuBlock(_, inst);
					return inst;
				}

				function updateMenuBlock(_, inst) {
					inst.code(_, MENU_BLOCK_NAME);
					inst.title(_, "Sites");
					inst.description(_, "HRM Sites");
					inst.application(_, app);

					// Add menu item in Menu block if it's not already setted
					for (var i in itemsToAdd) {
						if (!isItemInProp(_, inst, itemsToAdd[i], "items"))
							inst.items(_).set(_, itemsToAdd[i]);
					}
					if (!isItemInProp(_, inst, ep, "endpoints"))
						inst.endpoints(_).set(_, ep);

					saveAndCheckErrors(_, inst);
				}
				//
				var entity = db.getEntity(_, "menuBlock");
				var menuBlock = getMenuBlock(_, db, entity, MENU_BLOCK_NAME);
				if (!menuBlock) {
					menuBlock = createMenuBlock(_);
				} else {
					updateMenuBlock(_, menuBlock);
				}
				return menuBlock;
			}

			function setMenuModule(_, submoduleToAdd) {
				function createMenuModule(_) {
					var inst = entity.createInstance(_, db, null);
					updateMenuModule(_, inst);
					return inst;
				}

				function updateMenuModule(_, inst) {
					inst.code(_, MODULE_NAME);
					inst.title(_, "HRM Sites");
					inst.description(_, "HRM Sites");
					inst.application(_, app);

					// Add menu item in Menu block if it's not already setted
					for (var i in submoduleToAdd) {
						if (!isItemInProp(_, inst, submoduleToAdd[i], "submodules"))
							inst.submodules(_).set(_, submoduleToAdd[i]);
					}
					if (!isItemInProp(_, inst, ep, "endpoints"))
						inst.endpoints(_).set(_, ep);

					var homePage = getHomeNavigationPage(_);
					if (!isItemInProp(_, inst, homePage, "navigationPages"))
						inst.navigationPages(_).set(_, homePage);

					saveAndCheckErrors(_, inst);
				}
				//
				var entity = db.getEntity(_, "menuModule");
				var menuModule = getMenuModule(_, db, entity, MODULE_NAME);
				if (!menuModule) {
					menuModule = createMenuModule(_);
				} else {
					updateMenuModule(_, menuModule);
				}
				return menuModule;
			}

			var self = this;
			var solution = self.endpoint(_).x3SolutionName(_);
			var folder = self.endpoint(_).x3ServerFolder(_);
			var site = self.name(_);

			var xtendInfos = self.servers(_).toArray(_).map_(_, function(_, item) {
				return {
					host: item.host(_),
					port: item.port(_)
				};
			});

			var db = adminHelper.getCollaborationOrm(_);
			var app = adminHelper.getApplication(_, "x3", "hrm");
			var ep = self.endpoint(_);

			var _diagnoses = [],
				_menuItems, _menuBlock, _menuModule;
			//
			_menuItems = setMenuItem(_);
			var ids = _menuItems.map_(_, function(_, it) {
				return it.code(_);
			}).join(',');
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuItemsAdded", _menuItems.length, ids)
			});
			//
			_menuBlock = setMenuBlock(_, _menuItems);
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuBlockAdded", _menuBlock.code(_))
			});
			//
			_menuModule = setMenuModule(_, [_menuBlock]);
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuModuleAdded", _menuModule.code(_))
			}, {
				$severity: "info",
				$message: locale.format(module, "installOk")
			});
			return _diagnoses;
		},
		uninstall: function(_) {
			function removeAllMenuItems(_, name) {
				var entity = db.getEntity(_, "menuItem");
				var items = getMenuItems(_, db, entity, name);
				var ids = items.map_(_, function(_, it) {
					return it.code(_);
				});
				for (var i in items) {
					// deleteSelf is sufficient to remove relations in menuBlock
					var test = items[i].deleteSelf(_);
				}
				return ids;
			}

			function mustRemoveEpFromBlock(_, menuBlock) {
				var items = menuBlock.items(_);
				if (items.getLength() > 0) {
					var arr = items.toArray(_);
					for (var i in arr) {
						if (arr[i].endpoint(_).$uuid === ep.$uuid) {
							return false;
						}
					}
					// If no items are linked to the same endpint, the ep is removed from the instance
					return true;
				} else if (!menuBlock.endpoints(_).isEmpty()) {
					return false;
				}
				return false;
			}

			function mustRemoveEpFromModule(_, menuModule) {
				var submodules = menuModule.submodules(_);
				if (submodules.getLength() > 0) {
					var arr = submodules.toArray(_);
					for (var i in arr) {
						if (arr[i].endpoints(_).toUuidArray(_).indexOf(ep.$uuid) !== -1) {
							return false;
						}
					}
					// If no submodule (block) are linked to the same endpint, the ep is removed from the instance
					return true;
				} else if (!menuModule.endpoints(_).isEmpty()) {
					return false;
				}
				return false;
			}
			// BEGIN UNPUBLISH CLOSURE
			var self = this;
			var db = adminHelper.getCollaborationOrm(_);
			var ep = self.endpoint(_);
			var solution = ep.x3SolutionName(_);
			var folder = ep.x3ServerFolder(_);
			var site = self.name(_);
			var menuItemCode = PREFIX_MENU_ITM + solution + "_" + folder + "_" + site;

			var _diagnoses = [];
			var itemsRemoved = removeAllMenuItems(_, menuItemCode);
			if (itemsRemoved.length > 0)
				_diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "menuItemsRemoved", itemsRemoved.length, itemsRemoved.join(','))
				});

			var entity = db.getEntity(_, "menuBlock");
			var b = getMenuBlock(_, db, entity, MENU_BLOCK_NAME);
			if (mustRemoveEpFromBlock(_, b)) {
				b.endpoints(_).deleteInstance(_, ep.$uuid);
				saveAndCheckErrors(_, b);
				_diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "epRemovedFromBlock", ep.description(_), MENU_BLOCK_NAME)
				});
			}

			entity = db.getEntity(_, "menuModule");
			var m = getMenuModule(_, db, entity, MODULE_NAME);
			if (mustRemoveEpFromModule(_, m)) {
				m.endpoints(_).deleteInstance(_, ep.$uuid);
				saveAndCheckErrors(_, m);
				_diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "epRemovedFromModule", ep.description(_), MODULE_NAME)
				});
			}
			return _diagnoses;
		},
		ping: function(_, context) {
			var _diagnoses = [];

			var db = adminHelper.getCollaborationOrm(_);
			var entity = db.getEntity(_, "menuItem");

			var ep = this.endpoint(_);
			var solution = ep.x3SolutionName(_);
			var folder = ep.x3ServerFolder(_);
			var site = this.name(_);

			var menuItemCode = PREFIX_MENU_ITM + solution + "_" + folder + "_" + site;
			var menuItem = getMenuItem(_, db, entity, menuItemCode);
			if (!menuItem) {
				_diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "notPublished")
				});
				return _diagnoses;
			}
			var host = context.httpSession && context.httpSession.host;
			var url = menuItem.getLink(_).$url.replace("{$hostUrl}", host);

			var up = context.getUserProfile(_);
			var x3login = up.user(_).getEndpointLogin(_, up.selectedEndpoint(_).$uuid);

			if (this.servers(_).getLength() > 0) {
				this.servers(_).toArray(_).forEach_(_, function(_, item) {

					var host = item.host(_);
					var port = item.port(_);
					var banned = item.banned(_);

					var opt = {
						method: "GET",
						url: url + "&SRVHOST=" + host + "&SRVPORT=" + port,
						headers: {
							cookie: context.httpSession.cookie
						}
					};
					var request = httpClient.httpRequest(_, opt);
					var response = request.end().response(_);
					var statusCode = response.statusCode;

					var data = response.readAll(_);

					if (statusCode === 200) {

						if (response.headers['x-challenge-auth']) {
							_diagnoses.push({
								$severity: "info",
								$message: locale.format(module, "pingOkAuthOk", host + ":" + port, x3login)
							});
						} else {
							_diagnoses.push({
								$severity: "warning",
								$message: locale.format(module, "pingOkAuthFailed", host + ":" + port, x3login)
							});
						}
					} else {
						var mess;
						try {
							var d = JSON.parse(data);
							if (d.$diagnoses) {
								_diagnoses = _diagnoses.concat(d.$diagnoses);
							} else {
								mess = statusCode + ": " + http.STATUS_CODES[statusCode] + "\n " + JSON.stringify(d, null, 2);
							}
						} catch (e) {
							_diagnoses.push({
								$severity: "error",
								$message: locale.format(module, "pingFailed", host, port, x3login) + "\n" + statusCode + ": " + http.STATUS_CODES[statusCode] + "\n " + data
							});
						}
						if (mess) {
							_diagnoses.push({
								$severity: "error",
								$message: mess
							});
						}
					}
				});
			} else {
				_diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "noServers")
				});
			}
			return _diagnoses;
		},
	},
	$services: {
		install: {
			$method: "GET",
			$isMethod: true,
			$title: "Install site",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					instance.$diagnoses = instance.$diagnoses.concat(instance.install(_));
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message,
						$stackTrace: e.stack
					});
				}
			}
		},
		uninstall: {
			$method: "GET",
			$isMethod: true,
			$title: "Uninstall site",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					instance.$diagnoses = instance.$diagnoses.concat(instance.uninstall(_));
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message,
						$stackTrace: e.stack
					});
				}
			}
		},
		ping: {
			$method: "GET",
			$isMethod: true,
			$title: "Ping",
			$execute: function(_, context, instance) {

				instance.$diagnoses = instance.$diagnoses || [];
				try {
					instance.$diagnoses = instance.$diagnoses.concat(instance.ping(_, context));
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message,
						$stackTrace: e.stack
					});
				}
			}
		},
	},

	$uniqueConstraints: [
		["name", "endpoint"]
	]
};