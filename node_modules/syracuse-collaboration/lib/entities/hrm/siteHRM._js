"use strict";

var http = require('http');
var httpClient = require('syracuse-httpclient/lib/httpClient');
var locale = require("syracuse-core/lib/locale");
var config = require('syracuse-main/lib/nodeconfig').config;
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var globals = require('streamline/lib/globals');
var wizardHelper = require('syracuse-xtend/lib/wizardHelper');

var GLOBAL_PREFIX = "STD_X3_HRM";
var PREFIX_MENU_ITM = GLOBAL_PREFIX + "_SITE_";
var MENU_BLOCK_NAME = GLOBAL_PREFIX + "_SITE";
var MODULE_NAME = GLOBAL_PREFIX + "_SITES";


function isItemInProp(_, inst, item, prop) {
	var items = inst[prop](_).toArray(_);
	for (var i in items) {
		if (items[i].$uuid === item.$uuid)
			return true;
	}
	return false;
}

exports.entity = {
	$titleTemplate: "HRM Site",
	$descriptionTemplate: "Configure HRM site",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true,
			$pattern: /^[A-Za-z_\-][A-Za-z_\-0-9]*$/
		},
		devmode: {
			$title: "Development mode",
			$type: "boolean",
			$default: false
		},
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$isExcluded: true,
			$isDefined: true,
			$compute: function(_, instance) {
				return adminHelper.getApplication(_, "x3", "hrm");
			},
			$isMandatory: true
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$isDefined: true,
			$lookupFilter: {
				applicationRef: "{application}"
			}
		},
		servers: {
			$title: "XTend Servers",
			$type: "xtendServers",
			isChild: true
		}
	},
	$functions: {
		publish: function(_, solution, folder, site, xtendInfos) {
			function getHomeNavigationPage(_) {
				var filter = {
					sdataWhere: "pageName eq 'home'"
				};
				var entity = db.getEntity(_, "navigationPage");
				return db.fetchInstance(_, entity, filter);
			}

			function setMenuItem(_) {
				function getMenuItems(_, name) {
					var filter = {
						sdataWhere: "code like '^" + name + "*" + "'"
					};
					return db.fetchInstances(_, entity, filter);
				}

				function getMenuItem(_, name) {
					var filter = {
						sdataWhere: "code eq '" + name + "'"
					};
					return db.fetchInstance(_, entity, filter);
				}

				function createMenuItem(_, name, solution, folder, site) {
					var inst = entity.createInstance(_, db, null);
					updateMenuItem(_, inst, name, solution, folder, site);
					return inst;
				}

				function updateMenuItem(_, inst, name, solution, folder, site) {
					inst.code(_, name);
					inst.title(_, site);
					inst.description(_, site + " (" + solution + "/" + folder + ")");
					inst.linkType(_, "$hrm");
					inst.application(_, app);
					inst.endpoint(_, ep);
					inst.hrmSite(_, self);

					// TODO: Add query parameters to force server and port

					var sav = inst.save(_);
					var err = wizardHelper.hasErrors(sav);
					if (err) {
						throw new Error(err);
					}
				}

				function removeDevMenuItems(_, name) {
					var items = getMenuItems(_, name + "_DEV");
					for (var i in items) {
						var test = items[i].deleteSelf(_);
					}
				}
				//
				var entity = db.getEntity(_, "menuItem");
				var menuItemName = PREFIX_MENU_ITM + solution + "_" + folder + "_" + site;

				var menuItems = [];

				var menuItem = getMenuItem(_, menuItemName);
				if (!menuItem) {
					menuItem = createMenuItem(_, menuItemName, solution, folder, site);
				} else {
					updateMenuItem(_, menuItem, menuItemName, solution, folder, site);
				}
				menuItems.push(menuItem);

				removeDevMenuItems(_, menuItemName);
				if (self.devmode(_)) {
					var arr = self.servers(_).toArray(_);
					for (var i in arr) {
						var mName = menuItemName + "_DEV" + i;
						var sName = site + " (" + arr[i].host(_) + ":" + arr[i].port(_) + ")";
						menuItem = getMenuItem(_, mName);
						if (!menuItem) {
							menuItem = createMenuItem(_, mName, solution, folder, sName);
						} else {
							updateMenuItem(_, menuItem, mName, solution, folder, sName);
						}
						menuItems.push(menuItem);
					}
				}
				return menuItems;
			}

			function setMenuBlock(_, itemsToAdd) {
				function getMenuBlock(_) {
					var filter = {
						sdataWhere: "code eq '" + MENU_BLOCK_NAME + "'"
					};
					return db.fetchInstance(_, entity, filter);
				}

				function createMenuBlock(_) {
					var inst = entity.createInstance(_, db, null);
					updateMenuBlock(_, inst);
					return inst;
				}

				function updateMenuBlock(_, inst) {


					inst.code(_, MENU_BLOCK_NAME);
					inst.title(_, "Sites");
					inst.description(_, "HRM Sites");
					inst.application(_, app);

					// Add menu item in Menu block if it's not already setted
					for (var i in itemsToAdd) {
						if (!isItemInProp(_, inst, itemsToAdd[i], "items"))
							inst.items(_).set(_, itemsToAdd[i]);
					}
					if (!isItemInProp(_, inst, ep, "endpoints"))
						inst.endpoints(_).set(_, ep);

					var sav = inst.save(_);
					var err = wizardHelper.hasErrors(sav);
					if (err) {
						throw new Error(err);
					}
				}
				//
				var entity = db.getEntity(_, "menuBlock");
				var menuBlock = getMenuBlock(_);
				if (!menuBlock) {
					menuBlock = createMenuBlock(_);
				} else {
					updateMenuBlock(_, menuBlock);
				}
				return menuBlock;
			}

			function setMenuModule(_, submoduleToAdd) {
				function getMenuModule(_) {
					var filter = {
						sdataWhere: "code eq '" + MODULE_NAME + "'"
					};
					return db.fetchInstance(_, entity, filter);
				}

				function createMenuModule(_) {
					var inst = entity.createInstance(_, db, null);
					updateMenuModule(_, inst);
					return inst;
				}

				function updateMenuModule(_, inst) {
					inst.code(_, MODULE_NAME);
					inst.title(_, "HRM Sites");
					inst.description(_, "HRM Sites");
					inst.application(_, app);

					// Add menu item in Menu block if it's not already setted
					for (var i in submoduleToAdd) {
						if (!isItemInProp(_, inst, submoduleToAdd[i], "submodules"))
							inst.submodules(_).set(_, submoduleToAdd[i]);
					}
					if (!isItemInProp(_, inst, ep, "endpoints"))
						inst.endpoints(_).set(_, ep);

					var homePage = getHomeNavigationPage(_);
					if (!isItemInProp(_, inst, homePage, "navigationPages"))
						inst.navigationPages(_).set(_, homePage);

					var sav = inst.save(_);
					var err = wizardHelper.hasErrors(sav);
					if (err) {
						throw new Error(err);
					}
				}
				//
				var entity = db.getEntity(_, "menuModule");
				var menuModule = getMenuModule(_);
				if (!menuModule) {
					menuModule = createMenuModule(_);
				} else {
					updateMenuModule(_, menuModule);
				}
				return menuModule;
			}

			var self = this;
			var db = adminHelper.getCollaborationOrm(_);

			var app = adminHelper.getApplication(_, "x3", "hrm");
			var ep = self.endpoint(_);

			var _diagnoses = [],
				_menuItems, _menuBlock, _menuModule;
			//
			_menuItems = setMenuItem(_);
			var ids = _menuItems.map_(_, function(_, it) {
				return it.code(_);
			}).join(',');
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuItemsAdded", _menuItems.length, ids)
			});
			//
			_menuBlock = setMenuBlock(_, _menuItems);
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuBlockAdded", _menuBlock.code(_))
			});
			//
			_menuModule = setMenuModule(_, [_menuBlock]);
			_diagnoses.push({
				$severity: "info",
				$message: locale.format(module, "menuModuleAdded", _menuModule.code(_))
			}, {
				$severity: "info",
				$message: locale.format(module, "installOk")
			});

			return _diagnoses; //
		}

	},
	$services: {
		publish: {
			$method: "GET",
			$isMethod: true,
			$title: "Publish",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					var xtendInfos = instance.servers(_).toArray(_).map_(_, function(_, item) {
						return {
							host: item.host(_),
							port: item.port(_)
						};
					});
					instance.$diagnoses = instance.$diagnoses.concat(instance.publish(_, instance.endpoint(_).x3SolutionName(_), instance.endpoint(_).x3ServerFolder(_), instance.name(_), xtendInfos, instance.devmode(_)));

				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message,
						$stack: e.stack
					});
				}
			}
		}
	},
	$uniqueConstraints: [
		["name", "endpoint"]
	]
};