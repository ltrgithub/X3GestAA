"use strict";

var locale = require("syracuse-core/lib/locale");
var sys = require("util");

exports.entity = {
	//	$signed: ["login", "endpoint"],
	$properties: {
		login: {
			$title: "User Login",
			// $isMandatory: true,
			$displayLength: 10
		}
	},
	$titleTemplate: "{user.login}",
	$relations: {
		user: {
			$type: "user",
			$inv: "endpoints"
		},
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isMandatory: true,
			$displayLength: 15
		}
	},
	/*
	$links: function(_, instance) {
		var url = instance.endpoint(_).getBaseUrl(_).replace("/sdata/", "/trans/")+"/$sessions?f=GESAUS/2//M/"+instance.login(_);
		var result = {
				"x3user": {
					"$url": url,
					"$method": "GET",
					"$target": "blank",
					"$title": locale.format(module, "createUser")
				}
		};
		return result;
	}, */
	$services: {
		createUser: {
			/* $isDisabled: function(_, instance) {
				return true;
				console.log("CHECK1")
				if (instance.login(_)) return true;
				console.log("CHECK12")
				var endp = instance.endpoint(_);
				if (!endp) return true;
				console.log("CHECK13")
				var appl = endp.applicationRef(_);
				if (!appl) return true;
				console.log("CHECK14")
				if (appl.protocol(_) === "x3") return false;
				console.log("CHECK15")
				return true;
			}, */
			$method: "POST",
			$isMethod: true,
			$title: "Create X3 user",
			$execute: function(_, context, instance) {
				var endpoint = instance.endpoint(_);
				console.log("DESC1 " + endpoint.description(_));
				var mappings = endpoint.menuProfileToRoles(_);
				if (!mappings) {
					instance.$addError(locale.format(module, "noRoles"));
					return;
				}
				console.log("DESC2 " + endpoint.description(_));
				var mappings = mappings.toArray(_, true);
				if (!mappings.length) {
					instance.$addError(locale.format(module, "noRoles"));
					return;
				}
				var translation = []; // corresponding $uuid of role
				translation.length = mappings.length;
				var j = mappings.length;
				while (--j >= 0) {
					translation[j] = mappings[j].role(_).$uuid;
				}
				console.log("TRANS " + sys.format(translation));
				var results = [];
				var user = instance._parent;
				// loop over the groups of the user

				var groups = user.groups(_).toArray(_, true); // do not consider instances which have been marked for deletion				
				var j = groups.length;
				while (--j >= 0) {
					var group = groups[j];
					console.log("group " + group.description(_));
					var roleId = group.role(_).$uuid;
					var k = translation.length;
					while (--k >= 0) {
						console.log("TRANS1 " + k + " " + roleId + " " + translation[k]);
						if (translation[k] === roleId) {
							results.push(mappings[k]);
						}
					}
				};
				if (results.length === 0) {
					instance.$addError(locale.format(module, "noFitRoles"));
					return;
				} else if (results.length === 1) {
					console.log("Anlegen");

					// Benutzer anlegen
				} else {
					// Abfrage der Moeglichkeiten: noch nicht bekannt
					// Benutzer anlegen
					console.log("Anlegen 2");
				}
				var orm = endpoint.getOrm(_);
				console.error("T1");
				var ent = orm.getEntity(_, "ASYRMET");
				// console.error("T2 "+sys.format(ent))
				var insts = orm.fetchInstances(_, ent, {

				});
				console.error("ANZAHL " + insts.length);
				for (var i = 0; i < insts.length; i++) {
					console.error("TEST " + i + " " + sys.format(insts[i]._data));
				}
				var inst = insts[0];
				// console.error("INST0 "+sys.format(inst));
				console.error("WERT " + inst.CODMET(_));
				var ent = orm.getEntity(_, "ASYRAUS");
				// console.error("T2 "+sys.format(ent))
				var insts = orm.fetchInstances(_, ent, {

				});
				console.error("ANZAHL2 " + insts.length);
				for (var i = 0; i < insts.length; i++) {
					console.error("TEST " + i + " " + sys.format(insts[i]._data));
				}


			}
		}
	}
};