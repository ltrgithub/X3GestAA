"use strict";

var locale = require("syracuse-core/lib/locale");
var sys = require("util");



function _disabled(_, instance) {
	var endp = instance.endpoint(_);
	if (!endp) return true;
	return (endp.protocol(_) !== "x3");
}

exports.entity = {
	//	$signed: ["login", "endpoint"],
	$properties: {
		login: {
			$title: "User Login",
			$pattern: "^[A-Z0-9]*$",
			$patternMessage: "X3 login name can only contain A to Z and 0 to 9",
			$isMandatory: true,
			$displayLength: 10
		}
	},
	$titleTemplate: "{user.login}",
	$relations: {
		user: {
			$type: "user",
			$inv: "endpoints"
		},
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isMandatory: true,
			$displayLength: 15
		}
	},
	$links: function(_, instance) {
		var endpoint = instance.endpoint(_);
		if (_disabled(_, instance)) {
			return {};
		}
		var url = endpoint.getBaseUrl(_).replace("/sdata/", "/trans/") + "/$sessions?f=GESAUS/2//M/" + instance.login(_);
		var result = {
			"x3user": {
				"$url": url,
				"$method": "GET",
				"$target": "blank",
				"$title": locale.format(module, "x3user")
			}
		};
		return result;
	},
	$services: {
		createUser: {
			// $isDisabled: _disabled(_, instance),
			$method: "POST",
			$isMethod: true,
			"$parameters": {
				"$actions": {
					"$lookup": {
						"$url": "{$baseUrl}/professionCodes?representation=professionCode.$lookup&data={endpoint}~{$parent_uuid}~{$trackingId}"
					}
				}
			},
			$title: "Create X3 user",
			$execute: function(_, context, instance, parameters) {
				// selection of the profession code is done in $fetchInstances of professionCode entity
				if (!parameters || !parameters.$select) {
					instance.$addError(locale.format(module, "noFitRoles"));
					return;
				}
				var endpoint = instance.endpoint(_);
				if (_disabled(_, instance)) {
					instance.$addError(locale.format(module, "noX3Endpoint"));
					return;
				}
				var professionCode = parameters.$select;
				var login = instance.login(_);
				var orm = endpoint.getOrm(_);
				var ent = orm.getEntity(_, "ASYRAUS");
				// not necessary
				//var inst = orm.fetchInstance(_, ent, {
				//	jsonWhere: { "USR": login}

				// });
				// if (inst){
				//		instance.$addError(locale.format(module, "userExists", login));
				//		return;											
				//}
				var newUser = ent.createInstance(_, orm, null);
				console.error("YYY " + require('util').format(ent));
				newUser.USR(_, login);
				newUser.ENAFLG(_, instance._parent.active(_));
				newUser.ADDEML(_, instance._parent.email(_));
				var firstName = instance._parent.firstName(_);
				newUser.FIRSTNAME(_, firstName);
				var lastName = instance._parent.lastName(_);
				newUser.LASTNAME(_, lastName);
				newUser.CODMET(_, professionCode);
				newUser.save(_);
				newUser.getAllDiagnoses(_, instance.$diagnoses);
			}
		}
	}
};