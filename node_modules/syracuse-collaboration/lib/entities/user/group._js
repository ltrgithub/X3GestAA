"use strict";

var sys = require("util");
var check = require("syracuse-license/lib/check");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
	$properties: {
		description: {
			$title: "Description",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true,

			$isUnique: true
		},
		explorer: {
			$title: "Explorer",
			$type: "graph",
			$format: "force-layout",
			$relations: {
				endPoints: {
					$selected: false,
					applicationRef: {
						$selected: false
					}
				},
				role: {},
				users: {}
			}
		},
		x3serverTags: {
			$title: "X3 server TAGS",
			$description: "Tags can be used to prefer some X3 process server defined in X3 solution"
		}
	},
	$titleTemplate: "Group",
	$descriptionTemplate: "Access administration, groups associates users with roles and endpoints",
	$helpPage: "Administration-reference_Groups",
	$valueTemplate: "{description}",
	$allowFactory: true,
	$factoryIncludes: ["description", "role"],
	$relations: {
		endPoints: {
			$title: "Endpoints",
			$type: "endPoints",
			$inv: "groups",
			$nullOnDelete: true
		},
		/*		parent: {
			$title: "Parent",
			$type: "group",
			$inv: "children"
		},
		children: {
			$title: "Children",
			$type: "groups",
			$inv: "parent",
			isComputed: true
		},*/
		users: {
			$title: "Users",
			$type: "users",
			$inv: "groups",
			isComputed: true
		},
		role: {
			$title: "Role",
			$type: "role",
			$inv: "groups"
		},
		defaultX3Endpoint: {
			$title: "Default X3 endpoint",
			$description: "Reference endpoint for model browse",
			$type: "endPoint",
			$nullOnDelete: true,
			$lookup: function(_, instance) {
				var eps = [];
				instance.endPoints(_).toArray(_).forEach_(_, function(_, ep) {
					eps.push("'" + ep.$uuid + "'");
				});
				var adminEp = adminHelper.getCollaborationEndpoint(_);
				return (adminEp && {
					$type: "application/json",
					$url: adminEp.getBaseUrl(_) + "/endPoints?representation=endPoint.$lookup&binding=selectedEndpoint&count=50&where=(protocol eq 'x3' and $uuid in (" + eps.join(',') + "))"
				}) || {};
			}
		}
	},
	$events: {
		$canSave: [

			function(_, instance) {
				// verify security level for group against current user level security level
				var curr = instance.role(_) && instance.role(_).securityProfile(_) ? instance.role(_).securityProfile(_).canSaveSecLevel(_, instance) : true;
				// snapshot may not exist yet, then it means that snapshot is identical to instance
				var prev = !instance.$snapshot || (instance.$snapshot.role(_) && instance.$snapshot.role(_).securityProfile(_) ? instance.$snapshot.role(_).securityProfile(_).canSaveSecLevel(_, instance) : true);
				return curr && prev;
			}
		],
		$beforeSave: [

			function(_, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				// named user check
				if (check.checkNamed(_, instance, instance.$diagnoses)) {
					// tell other servers about this change after saving
					instance.tmpLicenseChangeMarker = true;
				} else {
					if (instance.tmpLicenseChangeMarker) instance.tmpLicenseChangeMarker = null;
				}

				// default endpoint check
				var def = instance.defaultX3Endpoint(_);
				if (def) {
					if (instance.endPoints(_).toArray(_).some_(_, function(_, ep) {
						return ep.$uuid === def.$uuid && ep.$isDeleted;
					})) {
						instance.defaultX3Endpoint(_, null);
					}
				}
			}
		],

		$afterSave: [

			function(_, instance) {
				instance.$diagnoses = instance.$diagnoses || [];

				// named user check
				if (instance.tmpLicenseChangeMarker) {
					check.propagateChange(_);
					instance.tmpLicenseChangeMarker = null;
				}
			}
		]
	},
	$searchIndex: {
		$fields: ["description", "endPoints", "users", "role"]
	}
};