"use strict"

var sys = require("util");
var locale = require("syracuse-core/lib/locale");

var _x3UserRepr = "AUTILISINI";
var _x3UserClass = "AUTILIS";
var _facet = "$query";

var _keyPropsMap = {
	USR: "login",
	LOGIN: "login",
	ADDEML: "email"
}

function _addDiagnose(diagnoses, severity, message) {
	diagnoses && diagnoses.push({
		severity: severity,
		message: message
	});
}

exports.entity = {
	$descriptionTemplate: "X3 users import profile",
	$valueTemplate: "",
	$properties: {
		description: {
			$title: "Description",
			$isLocalized: true,
			$linksToDetails: true
		},
		x3NameFormat: {
			$title: "X3 user name format",
			$enum: [{
				$title: "{First Name} {Last Name}",
				$value: "firstLast"
			}, {
				$title: "{Last Name} {First Name}",
				$value: "lastFirst"
			}],
			$default: "firstLast"
		},
		keyProperty: {
			$title: "Key property",
			$description: "Property used to match X3 to Collaboration users",
			$enum: [{
				$title: "Code",
				$value: "USR"
			}, {
				$title: "Login",
				$value: "LOGIN"
			}, {
				$title: "Email",
				$value: "ADDEML"
			}],
			$default: "LOGIN"
		},
		groupPolicy: {
			$title: "Groups assignement policy",
			$description: "Select how groups are assigned to imported users",
			$enum: [{
				$title: "Use menu profile",
				$value: "menuProfile"
			}, {
				$title: "Use existing group",
				$value: "existingGroup"
			}],
			$default: "menuProfile"
		},
		createGroupPolicy: {
			$title: "Group create policy",
			$description: "Select how roles are assigned to created groups",
			$enum: [{
				$title: "Use function profile",
				$value: "functionProfile"
			}, {
				$title: "Use existing role",
				$value: "existingRole"
			}],
			$default: "functionProfile"
		},
		filter: {
			$title: "Filter",
			$type: "filter",
			$filterRepresentation: function(_, instance) {
				var ep = instance.endpoint(_);
				if(!ep) return null;
				return {
					$url: ep.getBaseUrl(_) + "/$prototypes('"+_x3UserRepr+"."+_facet+"')"
				}
			}
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$description: "Select the X3 endpoint to import from",
			$type: "endPoint",
			$lookupFilter: {
				protocol: "x3"
			}
		},
		group: {
			$title: "Assign this group to all users",
			$type: "group"
		},
		role: {
			$title: "Assign this role to new groups",
			$type: "role"
		}
	},
	$functions: {
		_extractNames: function(_, value) {
			var format = this.x3NameFormat(_);
			value = value || "";
			// is comma separated ?
			var parts;
			var pos = value.indexOf(",");
			if(pos >= 0) 
				parts = value.split(",");
			else
				parts = value.split(" ");
			var res = [];
			res.push(parts.shift());
			res.push(parts.join(" "));
			res[0] = (res[0] && res[0].trim()) || "";
			res[1] = (res[1] && res[1].trim()) || "";
			//
			var result;
			if(format === "firstLast")
				result = {
					firstName: res[0],
					lastName: res[1]
				}
			else
				result = {
					firstName: res[1],
					lastName: res[0]
				}
			// last name is mandatory
			if(!result.lastName) {
				result.lastName = result.firstName;
				result.firstName = "";
			}
			return result;
		},
		_getGroup: function(_, menuProfile, functionProfile, options) {
			var self = this;
			if(self.groupPolicy(_) === "existingGroup")
				return self.group(_);
			//
			
		},
		getUsersCursor: function(_) {
			//
			var db = this.endpoint(_).getOrm(_);
//			db.resetCache();
			var entity = db.getEntity(_, _x3UserRepr, _facet);
			var where = {
				sdataWhere: this.filter(_)
			}
			//
			var cursor = db.createCursor(_, entity, where, _facet);
			return cursor;
		},
		importUser: function(_, user, options) {
			var self = this;
			// match user
			var keyVal = user[self.keyProperty(_)](_);
			if(!keyVal)
				return _addDiagnose(options && options.$diagnoses, "error", locale.format(module, "missingKey", self.keyProperty(_), user.USR(_), user.INTUSR(_)));
			// get correponding user
			var adminDb = self._db;
			var syraUserEnt = adminDb.getEntity(_, "user");
			var syraKey = _keyPropsMap[self.keyProperty(_)];
			var filter = { jsonWhere: {}};
			filter.jsonWhere[syraKey] = {$regex: "^"+keyVal+"$", $options: "i"}
			var syraUser = adminDb.fetchInstance(_, syraUserEnt, filter);
			//
			if(!syraUser) {
				// check for duplicate login
				var filter = {
					jsonWhere: {
						login: { $regex: "^"+user.LOGIN(_)+"$", $options: "i" }
					}
				}
				var dupUser = adminDb.fetchInstance(_, syraUserEnt, filter);
				if(dupUser)
					return _addDiagnose(options && options.$diagnoses, "error", locale.format(module, "duplicateLogin", user.LOGIN(_), self.keyProperty(_), keyVal))
				//
				syraUser = syraUserEnt.createInstance(_, adminDb);
				syraUser[syraKey](_, keyVal);
				syraUser.login(_, user.LOGIN(_));
				syraUser.setPassword(_, syraUser.login(_));
			}
			//
			var name = self._extractNames(_, user.INTUSR(_));
			syraUser.firstName(_, name.firstName);
			syraUser.lastName(_, name.lastName || user.LOGIN(_));
			syraUser.email(_, user.ADDEML(_));
			syraUser.active(_, user.ENAFLG(_));
			// associate group from menu profile
			var grp = self._getGroup(_, user.PRFMEN(_), user.PRFFCT(_), options);
			grp && syraUser.groups(_).set(_, grp);
			// setup endpoint login
			var userEPs = syraUser.endpoints(_).filter(_, {
				jsonWhere: {
					"endpoint.$uuid": self.endpoint(_).$uuid
				}
			});
			var userEP = userEPs && userEPs[0];
			if(!userEP) {
				userEP = syraUser.endpoints(_).add(_);
				userEP.endpoint(_, self.endpoint(_));
			}
			userEP.login(_, user.LOGIN(_));
			//
			var res = syraUser.save(_);
			// copy diags
			var hasError = false;
			if(options && options.$diagnoses) {
				var diags = syraUser.getAllDiagnoses(_, null, {
					addEntityName: true,
					addPropName: true
				});
				(diags || []).forEach(function(diag) {
					if((diag.severity === "error") || (diag.severity === "warning")) {
						_addDiagnose(options.$diagnoses, diag.severity, locale.format(module, 
								(diag.severity === "error" ? "importError" : "importWarn"), keyVal, diag.message));
						hasError = true;
					}
				});
				res && res.$actions.$save.$diagnoses && res.$actions.$save.$diagnoses.forEach(function(diag) {
					if((diag.severity === "error") || (diag.severity === "warning")) {
						_addDiagnose(options.$diagnoses, diag.severity, locale.format(module, 
								(diag.severity === "error" ? "importError" : "importWarn"), keyVal, diag.message));
						hasError = true;
					}
				});
			}
			if(!hasError)
				_addDiagnose(options.$diagnoses, "success", locale.format(module, syraUser.$created ? "importUserCreated" : "importUserModified", keyVal));
			//
		}
	},
	$services: {
		execute: {
			$title: "Execute",
			$method: "POST",
			$isMethod: true,
			execute: function(_, context, instance) {
				if(!instance.endpoint(_)) return;
				var user;
				instance.$diagnoses = instance.$diagnoses || [];
				var cursor = instance.getUsersCursor(_);
				while(user = cursor.next(_)) {
					instance.importUser(_, user, {
						$diagnoses: instance.$diagnoses
					});
				}
			}
		}
	}
}