"use strict";

var helpers = require("syracuse-core/lib/helpers");
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var locale = require("syracuse-core/lib/locale");
var check = require('syracuse-license/lib/check');
var globals = require('streamline/lib/globals');
var depend = require("streamline-require/lib/server/depend");
var jsurl = require("jsurl");
var syracuse;

function _fromCookie() {
	try {
		if (globals.context && globals.context.request) {
			var cookie = globals.context.request.headers.cookie;
			var port = globals.context.request.connection.localPort;
			if (cookie) cookie = helpers.http.parseCookie(cookie)["user.profile." + port];
			return (cookie && jsurl.parse(cookie)) || {};
		} else return {};
	} catch (e) {
		return {};
	}
}

function _pickFirst(_, candidates, validateList, force) {
	var res = null;
	candidates.some_(_, function(_, cId) {
		return cId && (res = validateList.get(_, cId));
	});
	if (!res && force) res = validateList && validateList.toArray(_)[0];
	return res;
}

function _setEndpoints(_, userProfile, role, cookieEpId) {
	var user = userProfile.user(_);
	if (!user) return;
	var userPrefs = user.preferences(_);
	//
	userProfile.endpoints(_).reset(_);
	user.getUserEndpointsList(_, role && role.$uuid).forEach_(_, function(_, ep) {
		userProfile.endpoints(_).set(_, ep);
	});
	// set selected ep
	var endpoints = userProfile.endpoints(_);
	var selEp = userProfile.selectedEndpoint(_);
	var resetEp = false;
	if (cookieEpId && selEp && (cookieEpId !== selEp.$uuid)) {
		selEp = endpoints.get(_, cookieEpId);
		resetEp = true;
	}

	if (selEp && endpoints.get(_, selEp.$uuid)) {
		// force selected endpoint if cookie is different
		if (resetEp) userProfile.selectedEndpoint(_, selEp);
		// else if selected endpoint is valid, leave it there
	} else {
		// set default endpoint if current is not in the list
		var defEp = userProfile.getDefaultX3Endpoints(_)[0];
		if (defEp && endpoints.get(_, defEp.$uuid)) {
			userProfile.selectedEndpoint(_, defEp || _pickFirst(_, [cookieEpId, userPrefs && userPrefs.lastEndpoint(_) && userPrefs.lastEndpoint(_).$uuid], endpoints));
		}
	}
	// Take first endpoint available if no endpoint selected
	if ((!userProfile.selectedEndpoint(_) || !endpoints.get(_, userProfile.selectedEndpoint(_).$uuid)) && (endpoints.getLength() >= 1)) {
		userProfile.selectedEndpoint(_, endpoints.toArray(_)[0]);
	} else if (!endpoints.getLength()) {
		userProfile.selectedEndpoint(_, undefined);
	}
}

exports.entity = {
	$isPersistent: false,
	$properties: {
		developpementMode: {
			$title: "Developpement mode active",
			$type: "boolean",
			$isDeveloppementFeature: true,
			$compute: function(_, instance) {
				return ((globals.context.config || {}).system || {}).enableDevelopmentFeatures;
			}
		},
		enableTestRobot: {
			$title: "Test robot is enabled",
			$type: "boolean",
			$compute: function(_, instance) {
				return ((globals.context.config || {}).system || {}).enableTestRobot;
			}
		},
		sessionTimeout: {
			$title: "Session timeout (minutes)",
			$type: "integer",
			$isHidden: true
		},
		serverETag: {
			$title: "Server's current ETag",
			$isHidden: true,
			$compute: function(_, instance) {
				return depend.etag();
			}
		},
		authoringLevel: {
			$title: "Authoring level",
			$isHidden: true,
			$compute: function(_, instance) {
				var sp = (globals.context && globals.context.session && globals.context.session.getSecurityProfile && globals.context.session.getSecurityProfile(_));
				var rightsItem = sp && sp.profileItems(_).toArray(_).filter_(_, function(_, item) {
					return item.code(_) === "authoring";
				});
				var hasRight = rightsItem && rightsItem[0] && rightsItem[0].canCreate(_) && rightsItem[0].canWrite(_);
				return sp && sp.authoringLevel(_) && sp.authoringLevel(_) !== "none" && hasRight ? "sage" : "none";
			}
		},
		sitePreferences: {
			$title: "Site preferences",
			$type: "json",
			$isHidden: true
		},
		versionInfo: {
			$title: "Mobile Client Version",
			$type: "json",
			$isDeveloppementFeature: false,
			$compute: function(_, instance) {
				var versionMobile = {
					buildDateString: "2014-01-01T00:00:00.000Z"
				};
				try {
					versionMobile = require("syracuse-mobile/lib/mobileVersionInfo").versionInfo;
				} catch (e) {}
				return {
					versionMobile: versionMobile
				};
			}
		}
		/*		photo: {
			$title: "Photo",
			$type: "image",
			$capabilities: ""
		}*/
	},
	$relations: {
		selectedRole: {
			$title: "Role",
			$type: "role",
			$lookupFilter: {
				"$uuid": {
					"$in": "{roles}"
				}
			},
			$propagate: function(_, instance, val) {
				// refresh endpoint list / selected endpoint
				//				console.log("user profile propagate role: "+sys.inspect(val));
				_setEndpoints(_, instance, val);
				if (val && globals.context.session) globals.context.session.setSecurityProfile(val.securityProfile(_));
			},
			$serializeAll: true
		},
		roles: {
			$title: "Roles",
			$type: "roles"
		},
		selectedEndpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				"$uuid": {
					"$in": "{endpoints}"
				}
			},
			$serializeAll: true,
			$propagate: function(_, instance, val) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("dashboardPrototype");
			}
		},
		endpoints: {
			$title: "Endpoints",
			$type: "endPoints"
		},
		selectedLocale: {
			$title: "Locale",
			$type: "localePreference",
			$serializeAll: true,
			$lookupFilter: {
				"enabled": true
			}
		},
		user: {
			$title: "User",
			$type: "user",
			$serializeAll: true
		},
	},
	$functions: {
		toCookie: function(_) {
			var self = this;

			var ck = {};
			if (self.user(_)) ck.user = self.user(_).$uuid;
			if (self.selectedRole(_)) ck.role = self.selectedRole(_).$uuid;
			if (self.selectedEndpoint(_)) ck.ep = self.selectedEndpoint(_).$uuid;
			if (self.selectedLocale(_)) ck.loc = self.selectedLocale(_).code(_);
			return jsurl.stringify(ck);
		},
		loadUserProfile: function(_, user, defaultLocale, paramUserProfile) {
			var self = this;
			var userPrefs = user.getPreferences(_);
			this.user(_, user);
			// load struct from cookie
			var cookieParams = _fromCookie();
			if (cookieParams && cookieParams.user !== user.$uuid) cookieParams = {};
			var extUp = paramUserProfile || {};
			// set roles
			user.getUserRolesList(_).forEach_(_, function(_, role) {
				self.roles(_).set(_, role);
			});
			// set selected role
			self.selectedRole(_, _pickFirst(_, [extUp.role, cookieParams.role, userPrefs && userPrefs.lastRole(_) && userPrefs.lastRole(_).$uuid], self.roles(_), true));
			// set endpoints
			_setEndpoints(_, this, this.selectedRole(_), extUp.ep || cookieParams.ep);
			// locales
			var localeCode = cookieParams.loc || (userPrefs && userPrefs.lastLocaleCode(_)) || defaultLocale;
			if (localeCode) this.selectedLocale(_, user.getUserLocaleByCode(_, localeCode) || user.getUserLocaleByCode(_, "en-US"));
			// Issue #2379
			if (this.selectedLocale(_) == null) {
				var locals = this._db.fetchInstances(_, this._db.model.getEntity(_, "localePreference"));
				if (locals && locals.length > 0) {
					this.selectedLocale(_, locals[0]);
				} else {
					throw new Error("No local found - localePreference entity list is empty.");
				}
			}
			this.sessionTimeout(_, sessionManager.sessionTimeout);
			this.sitePreferences(_, userPrefs && userPrefs.sitePreferences(_));
		},
		getDefaultX3Endpoints: function(_) {
			var self = this;
			if (!self.user(_) || !self.selectedRole(_)) return [];
			return self.user(_) && self.user(_).groups(_).toArray(_).filter_(_, function(_, g) {
				return (g.defaultX3Endpoint(_) && (g.role(_).$uuid === self.selectedRole(_).$uuid));
			}).map_(_, function(_, g) {
				return g.defaultX3Endpoint(_);
			});
		},
		getRepresentationPrefs: function(_, reprName, facetName) {
			var db = this._db;
			return db.fetchInstance(_, db.getEntity(_, "userRepresentationPref"), {
				jsonWhere: {
					representation: reprName,
					facet: facetName,
					user: this.user(_).$uuid
				}
			});
		},
		createRepresentationPrefs: function(_, reprName, facetName) {
			var db = this._db;
			var pref = db.getEntity(_, "userRepresentationPref").createInstance(_, db);
			pref.user(_, this.user(_));
			pref.representation(_, reprName);
			pref.facet(_, facetName);
			return pref;
		},
		$setParameters: function(_, context) {
			var self = this;
			// loads the current user profile
			this._initialize(_, context);
			// affect current user
			var user = context.getUser(_);
			if (!user) return;
			//
			var extUserProfile = context.parameters && context.parameters.profile && jsurl.parse(context.parameters.profile);
			if (extUserProfile && extUserProfile.user && extUserProfile.user !== user.$uuid) extUserProfile = null;
			//console.log("user profile: " + context.parameters && context.parameters.profile);
			this.loadUserProfile(_, user, (context.request.headers["accept-language"] || "").split(",")[0], extUserProfile);
			// session management
			context.setUserProfile(_, this);
			//
			if (globals.context.session) globals.context.session.userProfileCookie = self.toCookie(_);
		},
		$save: function(_, saveRes) {
			var self = this;
			var user = this.user(_);
			if (!user) return;
			// license considerations
			this.$diagnoses = this.$diagnoses || [];
			var userPrefs = user.getPreferences(_, true); //withCreate
			// role change?
			var oldRole = userPrefs.lastRole(_);
			var newRole = this.selectedRole(_);
			var lastEndpoint = userPrefs.lastEndpoint(_);
			var selEndpoint = this.selectedEndpoint(_);
			// some checks only when endpoint or role changes
			// consider cases where there are no endpoints
			if (!oldRole || !newRole || (oldRole.$uuid !== newRole.$uuid && _badgeSet(_, oldRole) !== _badgeSet(_, newRole)) || (lastEndpoint && (!selEndpoint || lastEndpoint.dataset(_) !== selEndpoint.dataset(_)))) {
				syracuse = syracuse || require("syracuse-main/lib/syracuse");
				if (selEndpoint && selEndpoint.protocol(_) !== "syracuse") {
					var liz = check.checkConcurrent(_, globals.context.session, newRole, null, globals.context.session.device, this.$diagnoses);
					if (!liz) {
						if (userPrefs) this.selectedRole(_, oldRole) // restore old role;
						this.$addError(locale.format(module, "noLicensesLeft"));
						return;
					}
				}
				//SAM 100217 need to disconnect existing syracuse session
				//SAM 98078 need to disconnect existing syracuse session
				globals.context.request.session && globals.context.request.session.disconnectX3Sessions(_);
			}
			userPrefs.lastRole(_, newRole);
			userPrefs.lastEndpoint(_, this.selectedEndpoint(_));
			userPrefs.sitePreferences(_, this.sitePreferences(_));
			var selLocale = this.selectedLocale(_);
			selLocale && userPrefs.lastLocaleCode(_, selLocale.code(_));
			// change locale
			locale.setCurrent(_, selLocale.code(_));
			userPrefs.save(_);
			// location
			saveRes.$links.$location = saveRes.$links.$location || {
				$title: "Menu",
				$method: "GET",
				$isHidden: true
			};
			//			var epParam = (this.selectedEndpoint(_) ? "endpoint=" + this.selectedEndpoint(_).application(_) + "." + this.selectedEndpoint(_).contract(_) + "." + this.selectedEndpoint(_).dataset(_) + "&" : "");
			//			saveRes.$links.$location.$url = "?" + epParam + "representation=home.$dashboard&role={$role}";
			saveRes.$links.$location.$url = "?representation=home.$navigation&role={$role}";
			//
			if (globals.context.session) globals.context.session.userProfileCookie = self.toCookie(_);
			// diags
			user.getAllDiagnoses(_, saveRes.$diagnoses, {
				addEntityName: true,
				addPropName: true,
				filter: ["error", "warning"]
			});
			userPrefs.getAllDiagnoses(_, saveRes.$diagnoses, {
				addEntityName: true,
				addPropName: true,
				filter: ["error", "warning"]
			});
		},
		getAccessRightAuthorizations: function(_, endpoint) {
			var up = this;
			var selEp = endpoint || up.selectedEndpoint(_);
			if (!selEp) return null;
			up._fctRights = up._fctRights || {};
			return up._fctRights[selEp.dataset(_)] = selEp.getAuthorizedAccessRight(_, up.user(_), up.selectedRole(_));
		}


	},
	$links: function(_, instance) {
		return {
			$bookmarks: {
				$url: "{$baseUrl}/userBookmarkProxies('" + instance.user(_).$uuid + "')?representation=userBookmarkProxy.$details",
				$method: "GET"
			}
		};
	},
	$services: {
		current: {
			$isHidden: true,
			$method: "GET",
			$isMethod: false,
			$title: "Current User Profile",
			$overridesReply: true,
			$execute: function(_, context, instance) {
				var res = {};
				var up = globals.context.session.getUserProfile(_);
				//console.log(context.session);
				if (!up) return context.reply(_, 200, res);
				res = up.serializeInstance(_);
				context.reply(_, 200, res);
			}
		},
		$logout: {
			$method: "PUT",
			$isMethod: true,
			$title: "Logout",
			$overridesReply: true,
			$execute: function(_, context, instance) {
				sessionManager.logout(_, context.request, context.response);
				var res = instance.serializeInstance(_);
				res.$actions = res.$actions || {};
				res.$actions.$logout = {
					$isRequested: false,
					$isDisabled: true,
					$links: {
						$location: {
							// retourner a la page par d�faut du serveur
							$url: "/"
						}
					}
				};
				context.reply(_, 200, res);
			}
		}
	}
};

// returns the set of badges for a role in alphabetical order so that sets of badges can be compared
function _badgeSet(_, role) {
	var badges = role.badges(_).toArray(_);
	var res = badges.map_(_, function(_, badge) {
		return badge.code(_);
	}).sort().join(",");
	return res;
}