"use strict";

var helpers = require("syracuse-core/lib/helpers");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var locale = require("syracuse-core/lib/locale");
var check = require('syracuse-license/lib/check')
var globals = require('streamline/lib/globals');
var depend = require("streamline-require/lib/server/depend");

function _setEndpoints(_, userProfile, role) {
	var user = userProfile.user(_);
	if(!user) return;
	var userPrefs = user.preferences(_);
	//
	userProfile.endpoints(_).reset(_);
	user.getUserEndpointsList(_, role && role.$uuid).forEach_(_, function(_, ep) {
		userProfile.endpoints(_).set(_, ep);
	});
	// set selected ep
	if(userProfile.selectedEndpoint(_) && userProfile.endpoints(_).get(_, userProfile.selectedEndpoint(_).$uuid)) {
		// selected endpoint is valid, leave it there
	} else {
		userProfile.selectedEndpoint(_, null);
		if (userPrefs && userPrefs.lastEndpoint(_) && userProfile.endpoints(_).get(_, userPrefs.lastEndpoint(_).$uuid)) 
			userProfile.selectedEndpoint(_, userPrefs.lastEndpoint(_));
		else 
			if (userProfile.endpoints(_).getLength() == 1) 
				userProfile.selectedEndpoint(_, userProfile.endpoints(_).toArray(_)[0]);
	}
}

exports.entity = {
	$isPersistent: false,
	$properties: {
		developpementMode: {
			$title: "Developpement mode active",
			$type: "boolean",
			$default: true,
			$isDeveloppementFeature: true
		},
		sessionTimeout: {
			$title: "Session timeout (minutes)",
			$type: "integer",
			$isHidden: true
		},
		serverETag: {
			$title: "Server's current ETag",
			$isHidden: true,
			$compute: function(_, instance) {
				return depend.etag();
			}
		}
/*		photo: {
			$title: "Photo",
			$type: "image",
			$capabilities: ""
		}*/
	},
	$relations: {
		selectedRole: {
			$title: "Role",
			$type: "role",
			$lookupFilter: {
				"$uuid": {
					"$in": "{roles}"
				}
			},
			$propagate: function(_, instance, val) {
				// refresh endpoint list / selected endpoint
//				console.log("user profile propagate role: "+sys.inspect(val));
				_setEndpoints(_, instance, val);
				if(val && globals.context.session)
					globals.context.session.setSecurityProfile(val.securityProfile(_));
			},
			$serializeAll: true
		},
		roles: {
			$title: "Roles",
			$type: "roles"
		},
		selectedEndpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				"$uuid": {
					"$in": "{endpoints}"
				}
			},
			$serializeAll: true,
			$propagate: function(_, instance, val) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("dashboardPrototype");
			}
		},
		endpoints: {
			$title: "Endpoints",
			$type: "endPoints"
		},
		selectedLocale: {
			$title: "Locale",
			$type: "localePreference",
			$serializeAll: true,
			$lookupFilter: {
				"enabled": true
			}
		},
		user: {
			$title: "User",
			$type: "user",
			$serializeAll: true
		}
	},
	$functions: {
		loadUserProfile: function(_, user, defaultLocale) {
			var self = this;
			var userPrefs = user.preferences(_);
			this.user(_, user);
			// set roles
			user.getUserRolesList(_).forEach_(_, function(_, role) {
				self.roles(_).set(_, role);
			});
			// set selected role
			if (userPrefs && userPrefs.lastRole(_)) this.selectedRole(_, userPrefs.lastRole(_));
			else if (this.roles(_).getLength() > 0) this.selectedRole(_, this.roles(_).toArray(_)[0]);
			// set endpoints
			_setEndpoints(_, this, this.selectedRole(_));
			// locales
			var localeCode = (userPrefs && userPrefs.lastLocaleCode(_)) || defaultLocale || "en-US";
			if(localeCode) this.selectedLocale(_, user.getUserLocaleByCode(_, localeCode));
			//
			this.sessionTimeout(_, sessionManager.sessionTimeout);
		},
		getDefaultX3Endpoints: function(_) {
			var self = this;
			if(!self.user(_) || !self.selectedRole(_)) return [];
			return self.user(_) && self.user(_).groups(_).toArray(_).filter_(_, function(_, g) {
				return (g.defaultX3Endpoint(_) && (g.role(_).$uuid === self.selectedRole(_).$uuid));
			}).map_(_, function(_, g) {
				return g.defaultX3Endpoint(_);
			});
		},
		getRepresentationPrefs: function(_, reprName, facetName) {
			var db = this._db;
			return db.fetchInstance(_, db.getEntity(_, "userRepresentationPref"), {
				jsonWhere: {
					representation: reprName,
					facet: facetName,
					user: this.user(_).$uuid
				}
			})
		},
		createRepresentationPrefs: function(_, reprName, facetName) {
			var db = this._db;
			var pref = db.getEntity(_, "userRepresentationPref").createInstance(_, db);
			pref.user(_, this.user(_));
			pref.representation(_, reprName);
			pref.facet(_, facetName);
			return pref;
		},
		$setParameters: function(_, context) {
			// loads the current user profile
			this._initialize(_, context);
			// affect current user
			var user = context.getUser(_);
			if (!user) return;
			//
			this.loadUserProfile(_, user, (context.request.headers["accept-language"] || "").split(",")[0]);
			// session management
			context.setUserProfile(_, this);
		},
		$save: function(_, saveRes) {
			var user = this.user(_);
			if (!user) return;
			// license considerations
			var userPrefs = user.preferences(_);
			if (!check.checkConcurrent(globals.context.session, this.selectedRole(_), null, _)) {
				if (userPrefs) this.selectedRole(_, userPrefs.lastRole(_)) // restore old role
				this.$addError("No concurrent licenses left for this role")
				return;
			} 
			if(!userPrefs) {
				// create prefs
				user.$sysSnapshot = null;
				user._snapshotEnabled = true;
				user._sysSnapshotEnabled = true;
				userPrefs = user.createChild(_, "preferences");
				user.preferences(_, userPrefs);
				// save user
				user.save(_);
			}
			userPrefs.lastRole(_, this.selectedRole(_));
			userPrefs.lastEndpoint(_, this.selectedEndpoint(_));
			var selLocale = this.selectedLocale(_);
			selLocale && userPrefs.lastLocaleCode(_, selLocale.code(_));
			// change locale
			locale.setCurrent(_, selLocale.code(_));
			// TODO : user save errors ?
			userPrefs.save(_);
			// location
			saveRes.$links.$location = saveRes.$links.$location || {
				$title: "Menu",
				$method: "GET",
				$isHidden: true
			};
//			var epParam = (this.selectedEndpoint(_) ? "endpoint=" + this.selectedEndpoint(_).application(_) + "." + this.selectedEndpoint(_).contract(_) + "." + this.selectedEndpoint(_).dataset(_) + "&" : "");
//			saveRes.$links.$location.$url = "?" + epParam + "representation=home.$dashboard&role={$role}";
			saveRes.$links.$location.$url = "?representation=home.$dashboard&role={$role}";
		}
	},
	$services: {
	    current : {
			$isHidden : true,
			$method: "GET",
			$isMethod : false,
			$title : "Current User Profile",
			$execute : function(_, context, instance) {
				var res = {};
				var up = globals.context.session.getUserProfile(_);
				//console.log(context.session);
				if (!up) return context.reply(_, 200, res);
				res = up.serializeInstance(_);
				context.reply(_, 200, res);
			}
		},
	    $logout : {
			$method : "PUT",
			$isMethod : true,
			$title : "Logout",
			$execute : function(_, context, instance) {
				sessionManager.logout(_, context.request, context.response);
				var res = instance.serializeInstance(_);
				res.$actions = res.$actions || {};
				res.$actions.$logout = {
					$isRequested: false,
					$isDisabled: true,
					$links: {
						$location: {
							// retourner a la page par dï¿½faut du serveur
							$url: "/"
						}
					}
				};
				context.reply(_, 200, res);
			}
		}
	}
}