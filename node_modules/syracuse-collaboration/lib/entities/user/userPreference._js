"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpers = require('syracuse-core').helpers;
var globals = require('streamline-runtime').globals;
var forEachKey = helpers.object.forEachKey;

var trace = console.log;

exports.entity = {
	$properties: {
		lastLocaleCode: {
			$title: "Last locale code"
		},
		sitePreferences: {
			$title: "Site preferences",
			$type: "json"
		},
		lastLandingPageName: {
			$title: "Last landing page name"
		}
	},
	$relations: {
		lastRole: {
			$type: "role",
			$title: "Last selected role",
			$nullOnDelete: true
		},
		lastEndpoint: {
			$type: "endPoint",
			$title: "Last selected endpoint",
			$nullOnDelete: true
		},
		lastTheme: {
			$type: "theme",
			$title: "Last selected theme",
			$nullOnDelete: true
		},
		applicationConnections: {
			$type: "applicationConnectionItems",
			$title: "Application connections",
			$isChild: true
		}
	},
	$functions: {
		getAppConnection: function(_, ep) {
			if (!ep) return null;
			var dataset = ep.dataset(_);
			var storedItems = this.applicationConnections(_).toArray(_).filter_(_, function(_, ac) {
				var acEp = ac.endpoint(_);
				return acEp && acEp.$uuid && acEp.$uuid === ep.$uuid;
			});
			if (storedItems && storedItems.length) {
				return storedItems[0];
			}
			return null;
		},
		setAppConnection: function(_, selEp, inst) {

			function cleanData(_, _data) {
				var dataset = selEp.dataset(_);
				globals.context.session.appConnection = globals.context.session.appConnection || {};
				globals.context.session.appConnection[dataset] = globals.context.session.appConnection[dataset] || {};
				// manage metadata to handle session persistence
				if (_data && _data.$properties) {

					forEachKey(_data.$properties, function(k, val) {
						if (_data[k] != null && val.$isPersistent === false) {
							globals.context.session.appConnection[dataset][k] = _data[k];
							delete _data[k];
						}
					});

					delete _data.$properties;
				}
				return JSON.stringify(_data);
			}

			var stored = this.getAppConnection(_, selEp);
			// compare stored and current instances
			if (stored) {
				var oldData = inst && inst.$snapshot && inst.$snapshot.data(_);
				if (oldData) oldData = JSON.parse(oldData);
				var newData = stored.data(_);
				if (newData) newData = JSON.parse(newData);
				if (oldData && newData) {
					Object.keys(newData).forEach(function(key) {
						oldData[key] = newData[key];
					});
				} else if (newData) {
					oldData = newData;
				}

				trace && trace("merged app connection:", oldData);
				var data = cleanData(_, oldData);
				stored.$snapshot && stored.$snapshot.data(_, data);
				stored.data(_, data);
				return stored;
			} else if (inst && selEp) {
				trace && trace("Inst: ", inst.serializeInstance(_));
				if (!inst.endpoint(_)) {
					inst.endpoint(_, selEp);
				}
				if (inst.endpoint(_) && inst.endpoint(_).$uuid === selEp.$uuid) {
					trace && trace("new app connection");
					this.applicationConnections(_).set(_, inst);
					return inst;
				}
				return null;
			} else {
				trace && trace("No data");
				return null;
			}
		}
	}
};