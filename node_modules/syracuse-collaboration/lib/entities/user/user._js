"use strict";

var locale = require("syracuse-core/lib/locale");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var check = require("syracuse-license/lib/check");
var globals = require('streamline/lib/globals');

// finds out whether current user has the ability to change user data
function _noAdmin(_) {
	var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
	if (!sp) return false;
	var items = sp.profileItems(_).toArray(_);
	for (var i=items.length-1; i>= 0; i--) {
		var item = items[i];
		if (item.code(_) === "users") {
			return !item.canWrite(_);
		}
	}
	return true; 
}

exports.entity = {
		$signed: ["login", "active", "authentication", "authenticationName", "password", "email", "groups", "endpoints", "ldap", "oauth2"],
		$classTitle: "User",
		$titleTemplate: "{firstName} {lastName}",
		$valueTemplate: "{login}",
		$valueTitleTemplate: "{firstName} {lastName}",
		$summaryTemplate: "{title} {firstName} {lastName}",
		$descriptionTemplate: "{firstName} {lastName} user profile",
		$iconTemplate: "{$baseUrl}/users('{$key}')/photo",
		$capabilities: "wordReport,mailMerge,pdfReport,excelReport",
		$properties: {
			login: {
				$title: "Default Account",
				$isMandatory: true,
				$isUnique: true,
				$linksToDetails: true,
				$displayLength: 8,
			},
			title: {
				$title: "Title",
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$default: "mr",
				$displayLength: 4,
			},
			firstName: {
				$title: "First Name",
				$displayLength: 12,
			},
			lastName: {
				$title: "Last Name",
				$linksToDetails: true,
				$isMandatory: true,
				$displayLength: 12,
			},
			fullName: {
				$title: "Full Name",
				$compute: function(_, instance) {
					return (instance.firstName(_) || "") + " " + (instance.lastName(_) || "");
				}
			},
			active: {
				$title: "Active",
				$type: "boolean",
				$default: true,
				$isDisabled: function(_, instance) {
					if (globals && globals.context && globals.context.session) {
						return instance.login(_) === globals.context.session.getData('userLogin');
					} else {
						return false;
					}
				}
			},
			authentication: {
				$title: "Authentication",
				$enum: [{
					$value: "",
					$title: "Standard"
				},{
					$value: "db",
					$title: "DB"
				},{
					$value: "ldap",
					$title: "LDAP"
				},{
					$value: "oauth2",
					$title: "OAuth2"
				}],
				$default: ""
			},
			authenticationName: { // name different from user name, used for authentication in LDAP or OAuth2
				$title: "Authentication name",
				$isHidden: function(_, instance) {
					var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
					return (auth !== "ldap");
				}
			},
			oldPassword: {
				$title: "Old password",
				$type: "password",
				$isConfirmDisabled: true,
				$salt: "{login}:{$realm}",
				$isHidden: function(_, instance) {
					var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
					if (auth === "db") {
						// get security profile
						return !_noAdmin(_);
					}
					return true;
				}
			},
			password: {
				$title: "New password",
				$type: "password",
				$salt: "{login}:{$realm}",
				$isMandatory: function(_, instance) {
					var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
					return auth === "db";
				},      
				$isHidden: function(_, instance) {
					var auth = instance.authentication(_) || adminHelper.getStandardSetting(_).source || "";
					return auth !== "db";
				}      
			},
			email: {
				$title: "Email",
				$format: "$email",
				$displayLength: 30
			},
			photo: {
				$title: "Photo",
				$type: "image",
				$storage: "db_file",
				$capabilities: ""
			},
			// changePassword: {
			//	$title: "Change password",
			// 	$type: "boolean",
			//  $isReadOnly: 
			// },
			explorer: {
				$title: "Explorer",
				$type: "graph",
				$format: "d3.nodeChart",
				$relations: {
					groups: {
						endPoints: {
							$selected: false,
							//applicationRef: { $selected: false }
						},
						role: { $selected: false }
					},
					adminTeams: {},
					authorTeams: {},
					memberTeams: {},
//					pages: { $selected: false }
				}
			}
		},
		$relations: {
			groups: {
				$title: "Groups",
				$type: "groups",
				$inv: "users"
			},
			endpoints: {
				$title: "Endpoints login",
				$type: "userEndpoints",
				$inv: "user",
				isChild: true
			},
			locales: {
				$type: "localePreferences",
				$title: "Locales",
				isChild: true
			},
			preferences: {
				$type: "userPreference",
				$isHidden: true,
				$title: "User preferences"
			},
			ldap: {
				$type: "ldap",
				$title: "LDAP instance",
				$isMandatory: function(_, instance) {
					return instance.authentication(_) === "ldap";
				},
				$isHidden: function(_, instance) {
					return instance.authentication(_) !== "ldap";
				},
				$inv: "users"

			},     
			oauth2: {
				$type: "oauth2",
				$title: "OAuth2 instance",
				$isHidden: function(_, instance) {
					return instance.authentication(_) !== "oauth2";
				},
				$isMandatory: function(_, instance) {
					return instance.authentication(_) === "oauth2";
				},
				$inv: "users"

			},     
			adminTeams: {
				$type: "teams",
				$title: "Teams administrator",
				$inv: "administrator",
				$isComputed: true
			},
			authorTeams: {
				$type: "teams",
				$title: "Teams author",
				$inv: "authors",
				$isComputed: true
			},
			memberTeams: {
				$type: "teams",
				$title: "Teams member",
				$inv: "members",
				$isComputed: true
			}
		},
		$functions: {
			getUserEndpointsList: function(_, roleUuid) {
				var eps = [];
				var grps = this.groups(_).toArray(_);
				grps.forEach_(_, function(_, grp) {
					if(roleUuid && grp.role(_) && (grp.role(_).$uuid !== roleUuid)) return;
					//
					grp.endPoints(_).toUuidArray(_).forEach(function(ep) {
						eps.push(ep);
					});
				});
				// filter duplicates
				var f = [];
				if (eps.length) {
					eps.sort();
					f.push(eps[0]);
					eps.forEach(function(ep) {
						if (f[f.length - 1] !== ep) f.push(ep);
					});
				}
				//
				return this._db.fetchInstances(_, this._db.model.getEntity("endPoint"), {
					jsonWhere: {
						"_id": {
							$in: f
						}
					}
				});
			},
			getUserRolesList: function(_) {
				var roles = [];
				var grps = this.groups(_).toArray(_);
				grps.forEach_(_, function(_, grp) {
					if (grp.role(_)) roles.push(grp.role(_));
				});
				// filter duplicates
				var f = [];
				if (roles.length) {
					roles.sort(function(a, b) {
						return ((a.$uuid > b.$uuid) ? -1 : 1);
					});
					f.push(roles[0]);
					roles.forEach(function(role) {
						if (f[f.length - 1].$uuid !== role.$uuid) f.push(role);
					});
				}
				//
				return roles;
			},
			getEndpointLogin: function(_, endpointUuid) {
				var eps = this.endpoints(_).toArray(_).filter_(_, function(_, ep) {
					return (ep.endpoint(_).$uuid === endpointUuid);
				});
				//
				return (eps[0] && eps[0].login(_)) || this.login(_);
			},
			getPersLocaleByCode: function(_, localeCode) {
				var r = new RegExp("^" + localeCode, "i");
				return this.locales(_).toArray(_).filter_(_, function(_, loc) {
//					console.log("get user pers locale (239): localeCode: "+localeCode+"; testing: "+loc.code(_)+"; result: "+r.test(loc.code(_)));
					return r.test(loc.code(_));
				})[0];
			},
			getUserLocaleByCode: function(_, localeCode) {
//				console.log("get user locale by code (244): localeCode: "+localeCode);
				var pers = this.getPersLocaleByCode(_, localeCode);
				return (pers ? pers : this._db.fetchInstance(_, this._db.model.getEntity("localePreference"), {jsonWhere:{code:{$regex: "^" + localeCode, $options: "i" }}}));
			},
			setPassword: function(_, pass) {
				var realm = 'Syracuse';
				var crypto = require('crypto');
				// hash function from RFC2617
				function h(value) {
					var hash = crypto.createHash('MD5');
					hash.update(value, "utf8");
					return hash.digest("hex");
				}
				var newPassword = h(this.login(_)+":"+realm+":"+pass);
				this.password(_, newPassword);
			}
		},
		$events: {
			$canSave: [function(_, instance) {
				if (instance.$snapshot) {
					var oldPassword = instance.$snapshot.password(_);
					if (oldPassword !== instance.password(_)) {
						if (oldPassword !== instance.oldPassword(_)) { // old password not (correctly) entered
							if (_noAdmin(_)) { // administrators do not have to give old password
								instance.$addError("oldPassword$#$Please give correct old password");
								return;
							}
						} else {
							// instance.changePassword(_, false); // password has been changed by user 							
						}
					}
				}}],
				$beforeSave: [function(_, instance) { 
					// named user check
					instance.$diagnoses = instance.$diagnoses || [];			
					if (check.checkNamed(_, instance, instance.$diagnoses)) {
						// tell other servers about this change after saving
						instance.tmpLicenseChangeMarker = true;
					} else {
						if (instance.tmpLicenseChangeMarker) instance.tmpLicenseChangeMarker = null;
					}
					// check whether current user is set to inactive
					if (!instance.active(_) && globals && globals.context && globals.context.session && instance.login(_) === globals.context.session.getData('userLogin'))
						instance.$addError(locale.format(module, "inactiveSelf"));

				}],

				$afterSave: [function(_, instance) { // named user check
					if (instance.tmpLicenseChangeMarker) {
						check.propagateChange(_);
						instance.tmpLicenseChangeMarker = null;
					}
				}]
		},
		$searchIndex: {
			$fields: ["login", "firstName", "lastName", "email", "groups", "adminTeams", "authorTeams", "memberTeams"]
		},
		$defaultOrder: [["login", true]]
};


