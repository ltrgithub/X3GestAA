"use strict";

var os = require("os");
var globals = require('streamline/lib/globals');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var util = require('util')
var config = require("syracuse-main/lib/nodeconfig").config;

exports.entity = {
	$lockType: "noLock",
	$canDelete: false,
	$canCreate: false,
	$canEdit: false,
	$sequentialStorage: true, // uses a funnel to storage
	$titleTemplate: "Session status",
	$descriptionTemplate: "Provides http sessions status",
	$valueTemplate: "{userName}/{ssid}",
	$properties: {
		sid: {
			$title: "Session id",
			$linksToDetails: true,
		},
		userName: {
			$title: "User name"
		},
		lastAccess: {
			$title: "Last user access",
			$type: "datetime"
		},
		serverName: {
			$title: "Server name",
			$default: function(_) {
				return config.servername;
			}
		},
		badge: {
			$title: "Badge"
		},
		clientId: {
			$title: "Client ID"
		}
	},
	$relations: {},
	$functions: {
		$canDelete: function(_) {
			var self = this;
			if (globals.context.session && globals.context.session.sid && (globals.context.sid == this.sid)) {
				self.deleteError = "Cannot delete current session";
				return false;
			} else return true;
		}
	},
	$services: {
		disconnect: {
			$method: "POST",
			$isMethod: true,
			$title: "Disconnect",
			$execute: function(_, context, instance) {
				instance && sessionManager.deleteSession(_, instance.sid(_));
				context.reply(_, 200, "Disconnected", {
					location: context.baseUrl + "/sessionInfos?representation=sessionInfo.$query"
				});
			}
		}
	},
	$defaultOrder: [
		["sid", true]
	]
}