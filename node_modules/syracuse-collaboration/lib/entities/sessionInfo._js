"use strict";

var os = require("os");
var globals = require('streamline/lib/globals');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var util = require('util');
var config = require('config');
var locale = require("syracuse-core/lib/locale");

var x3Logs = require("../x3Logs");
var pool = require("syracuse-x3/lib/pool");
var sadFsq = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient');
var SadFsqClient = sadFsq.SadFsqClient;


exports.entity = {
	$lockType: "noLock",
	$canDelete: false,
	$canCreate: false,
	$canEdit: false,
	$sequentialStorage: true, // uses a funnel to storage
	$titleTemplate: "Session status",
	$descriptionTemplate: "Provides http sessions status",
	$valueTemplate: "{userName}/{ssid}",
	$helpPage: "Administration-reference_Session-Infos",
	$properties: {
		sid: {
			$title: "Session id",
			$serialize: false
		},
		userName: {
			$title: "User name"
		},
		lastAccess: {
			$title: "Last user access",
			$type: "datetime"
		},
		serverName: {
			$title: "Server name",
			$default: function(_) {
				return config.servername;
			}
		},
		badge: {
			$title: "Badge"
		},
		clientId: {
			$title: "Client ID"
		},
		lastUrl: {
			$title: "last URL"
		},
		x3Sessions: {
			$title: "X3 sessions"
		},
		peerAddress: {
			$title: "Peer address"
		},
		pid: {
			$title: "Process Id"
		},
		cpuGraph: {
			$title: "CPU Graph",
			$type: "image",
			$storage: "db_file",
			$isReadOnly: true
		},
		log: {
			$title: "Log",
			$type: "binary",
			$storage: "db_file",
			$isReadOnly: true
		},
		memoryDump: {
			$title: "Memory Dump",
			$type: "binary",
			$storage: "db_file",
			$isReadOnly: true
		},
	},
	$relations: {},
	$init: function(_, instance) {},
	$functions: {
		$canDelete: function(_) {
			var self = this;
			if (globals.context.session && globals.context.session.sid && (globals.context.sid == this.sid(_))) {
				self.deleteError = "Cannot delete current session";
				return false;
			} else return true;
		},
		writeStream: function(_, property, contents, contentType, fileName) {
			if (contents && contents.length) {
				this[property](_).deleteFile(_);
				var writer = this[property](_).createWritableStream(_, {
					contentType: contentType,
					fileName: fileName,
				});
				writer.write(_, contents, "binary");
				writer.write(_, null);
			}
		}
	},
	$services: {
		disconnect: {
			$method: "POST",
			$isMethod: true,
			$title: "Disconnect",
			$execute: function(_, context, instance) {
				if (globals.context.session && globals.context.session.id && (globals.context.session.id == instance.sid(_))) {
					instance.$addError(locale.format(module, "disconnectCurrent"));
					return;
				}
				// The session to disconnect might be on another server / process, so we do a request to logout using the session cookie
				var logoutURL = context.url.split("/").splice(0, 3).join("/") + "/logout?force=true";
				var resp;
				try {
					resp = ez.devices.http.client({
						url: logoutURL,
						method: "POST",
						headers: {
							cookie: sessionManager.formatSessionCookie(instance.sid(_), globals.context.request.connection.localPort)
						}
					}).end().response(_).readAll(_);
				} catch (e) {
					// when server cannot be reached, it will be assumed that session does not exist any more
					instance.$addDiagnose("warning", locale.format(module, "errorConnect"), null, null, e.safeStack);
				}
				//
				if (resp) {
					console.log("RESP: " + resp);
					resp = JSON.parse(resp);
					if (resp.$diagnoses) resp.$diagnoses.forEach(function(d) {
						if (d.$severity === "success") instance.$addDiagnose("success", locale.format(module, "disconnected"));
						else instance.$addDiagnose(d.$severity, d.$message);
					});
				}
				instance.deleteSelf(_);
				return;
			}
		},
		activateLog: {
			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: false,
			$title: "Activate X3 log",
			$isDefined: function(_, instance) {
				return instance === undefined;
			},
			$execute: function(_, context, instance) {
				x3Logs.activate(_, context);
			}
		},
		deactivateLog: {
			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: false,
			$title: "Deactivate X3 log",
			$isDefined: function(_, instance) {
				return instance === undefined;
			},
			$execute: function(_, context, instance) {
				x3Logs.deactivate(_, context);
			}
		},

		/*		testRestrict: {
			$method: "POST",
			$isMethod: true,
			$title: "Test restrict",
			$execute: function(_, context, instance) {
				require("syracuse-session/lib/sessionManager").gentlyTerminate(_, "sessionInfo", true);
			}
		}*/
		logs: {

			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: true,
			$title: "Logs",
			// $isDefined: function(_, instance) {
			// 	return /^(running|paused)$/.test(instance.status(_));
			// },
			$execute: function(_, context, instance) {
				try {
					if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
						var up = globals.context.session && globals.context.session.getUserProfile(_);
						var endpoint = up.selectedEndpoint(_);

						var client = pool.getClient(_, globals.context.session, endpoint);
						var processId = client.getProcessId();

						var epLogin = up.user(_).getEndpointLogin(_, endpoint.$uuid).toLowerCase();
						var login = ("" + instance.userName(_)).toLowerCase();
						var isMe = (login === epLogin);

						var log = x3Logs.readLog(_, instance.userName(_), processId, isMe);
						if (log) {
							instance.writeStream(_, "log", log, "x-trace", "x3" + processId + ".tra");
							var svg = x3Logs.generateSvg(_, log);
							if (svg) {
								instance.writeStream(_, "cpuGraph", svg, "image/svg+xml", "x3" + processId + ".svg");
							}
						}

						if (isMe) {
							var path = endpoint.getService(_, "memoryDump").file;
							var x3server = endpoint.x3server(_);
							var sadfs = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);
							var dump = sadfs.readFile(_, {
								path: path
							}, {
								flag: "r",
								encoding: "utf-8"
							});

							if (dump) {
								instance.writeStream(_, "memoryDump", dump, "x-trace", "memory.dmp");
							}
						}
						instance.save(_);
					}
				} catch (e) {
					context.httpSession.x3SessionConfig = {};
					console.error(e.stack);
					return {
						$diagnoses: [{
							severity: "error",
							message: e.message
						}]
					};
				}
			}

		}
	},
	$fetchInstances: function(_, context, parameters) {
		// fetchInstances filters do not allow regex ???
		var insts = context.db.fetchInstances(_, context.db.model.getEntity(_, "sessionInfo"));
		var result = [];
		insts.forEach_(_, function(_, inst) {
			if (inst.userName(_).indexOf("!none!") === -1) result.push(inst);
		});
		return result;
	},
	$defaultOrder: [
		["lastAccess", true]
	],
	$expire: function(_, instance) {
		// set in hard the value, it will be configured after
		if (config.session.timeout) { // timeout + 1 
			return (config.session.timeout + 1) * 60000;
		}
	}
};