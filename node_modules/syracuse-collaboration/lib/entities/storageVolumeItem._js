"use strict"

var Template = require("syracuse-core/lib/resource/resourceProxy").Template;
var fsp = require("path");
var fs = require("fs");

function _resolvePath(_, context, volume) {
	var path = volume.path(_).replace(/\\/g, "/");
	path = (new Template(path)).resolve({
		syracuse: "../../../..",
		user: (context.getUser(_) && context.getUser(_).login(_))
	});
	//
	return fsp.join(__dirname, path);
}

var _listSolverMap = {
	syracuse_file: function(_, context, entity, volume) {
		//
		var res = [];
		var path = _resolvePath(_, context, volume);
		var fileList = fs.readdir(path, _);
		fileList.forEach_(_, function(_, file) {
			var inst = entity.factory.createInstance(_, null, volume._db);
			inst.fileName(_, file);
			inst.volume(_, volume);
			inst.content(_)._store.fileName = fsp.join(path, file);
			res.push(inst);
		});
		return res;
	}
}

exports.entity = {
	$titleTemplate: "Storage volume details",
	$isPersistent: false,
	$canEdit: false,
	$listTitle: "List of volume items",
	$key: "{volume.$uuid}~{fileName}",
	$properties: {
		fileName: {
			$title: "File name",
			$linksToDetails: true
		},
		content: {
			$title: "Content",
			$type: "binary",
			$storage: function(_, instance) { return ((instance.volume(_) && instance.volume(_).storageType(_)) || "db_file"); }
		}
	},
	$relations: {
		volume: {
			$title: "Volume",
			$type: "storageVolume"
		}
	},
	$fetchInstances: function(_, context, parameters) {
		var self = this;
		//
		if(!context.parameters.volume) return [];
		//
		var volume = context.db.fetchInstance(_, context.db.model.getEntity("storageVolume"), context.parameters.volume);
		if(!volume) return [];
		//
		var solver = _listSolverMap["syracuse_" + volume.storageType(_)];
		return (solver && solver(_, context, self, volume)) || [];
	},
	$functions: {
		$setId: function(_, context, id) {
			var ids = id.split("~");
			var volumeId = ids.shift();
			var fileName = ids.join("~");
			//
			this.volume(_, this.createChild(_, "volume", volumeId));
			this.fileName(_, fileName);
			//
			this.content(_)._store.fileName = fsp.join(_resolvePath(_, context, this.volume(_)), fileName);
		}
	},
	$defaultOrder: [["fileName", true]]
}