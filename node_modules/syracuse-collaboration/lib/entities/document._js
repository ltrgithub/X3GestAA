"use strict";

var locale = require("syracuse-core/lib/locale");
var date = require("syracuse-core/lib/types/date");
var globals = require('streamline/lib/globals');

function _getProperties(_, instance) {
	var prop = instance.content(_);
	return (prop && prop.fileExists(_) && prop.getProperties(_)) || {};
}

exports.entity = {
	$titleTemplate: "Document",
	$valueTemplate: "{description}",
	$descriptionTemplate: "Storage area management",
	$properties: {
		description: {
			$title: "Description",
			$isMandatory: true,
			$linksToDetails: true
		},
		documentType: {
			$title: "Document type",
			$compute: function(_, instance, propName) {
				return _getProperties(_, instance).contentType;
			}
		},
		documentDate: {
			$title: "Upload date",
			$type: "date",
			$compute: function(_, instance, propName) {
				var upDate = _getProperties(_, instance).uploadDate;
				return upDate && date.fromJsDate(upDate);
			}
		},
		fileName: {
			$title: "Filename",
			$compute: function(_, instance, propName) {
				return _getProperties(_, instance).fileName;
			}
		},
		storageType: {
			$title: "Storage",
			$enum: ["db_file", "rest", "file"],
			$enumCaptions: ["Syracuse Standard", "Web Server", "File"],
			$default: "db_file",
			$control: function(_, instance, val) {
				// check if there is a document
				if(instance.content(_) && instance.content(_).fileExists(_))
					throw new Error(locale.format(module, "storageTypeChange"));
			},
			$propagate: function(_, instance, val) {
				// reset property store to allow creating the appropriate type
				instance._propertyStores["content"] = null;
			},
			$isDisabled: function(_, instance) {
				return (instance.content(_) && instance.content(_).fileExists(_));
			}
		},
		uri: {
			$title: "Uri",
			$isDisabled: function(_, instance) {
				return (instance.content(_) && instance.content(_).fileExists(_));
			},
			$isDefined: function(_, instance) {
				return instance.storageType(_) !== "db_file";
			}		
		},
		isReadOnly: {
			$title: "Read only",
			$type: "boolean",
			$default: false
		},
		content: {
			$title: "Content",
			$type: "binary",
			$storage: function(instance) { return (instance._data.storageType || "db_file"); }
		}
	},
	$relations: {
		teams: {
			$title: "Teams",
			$type: "teams",
			$inv: "documents"/*,
			$isComputed: true*/
		},
		owner: {
			$title: "Owner",
			$type: "user",
			$isMandatory: true
		},
		tags: {
			$title: "Tags",
			$type: "documentTags",
			$inv: "documents"
		}
	},
	$init: function(_, instance) {
		var up = globals.context.session && globals.context.session.getUserProfile(_);
		up && instance.owner(_, up.user(_));
	}
}