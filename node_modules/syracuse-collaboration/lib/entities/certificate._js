"use strict";
var util = require('util');
var Certificate = require("jsx509").Certificate;

/// fillInstance: reads PEM certificate information and fills in the distinguished name of issuer and subject to the instance
function fillInstance(instance, pemInput, _) {
	if (pemInput.indexOf('CERTIFICATE---') > 0) {
		var b64 = pemInput.substring(pemInput.indexOf('ATE-----') + 8, pemInput.indexOf('-----END'));
		var certificate = new Buffer(b64, "base64");
		var cert = new Certificate(certificate);
		console.log("CCC "+cert.toString())
		instance.dn(_, getDn(cert.subject));
		console.log("ISS "+util.format(cert.issuer))
		instance.issuerDn(_, getDn(cert.issuer));
	} else {
		throw new Error("noCert$#$No certificate");
	}
}
exports.fillInstance = fillInstance;

function getDn(info) {
	var result = "C="+info.countryName+", ST="+info.stateOrProvinceName+", L="+info.localityName+", O="+info.organizationName+", ";
	info.organizationalUnitNames.forEach(function(ou) {
		result += "OU="+ou+", ";
	})
	return result +"CN="+info.commonName;		
}

exports.entity = {
		$properties: {
			name: {
				$title: "Name",
				$isMandatory: true,
				$isUnique: true
			},
			certificate: {
				$title: "Certificate",
				$type: "binary",
				$storage: "db_file",
				$isMandatory: true
			},
			key: {
				$title: "Private key",
				$type: "binary",
				$storage: "db_file" 
			},
			pass: {
				$title: "Passphrase"
			},
			dn: {
				$title: "Distinguished name",
				$isReadOnly: true
			},
			issuerDn: {
				$title: "Issuer distinguished name",
				$isReadOnly: true
			}
		},
		$titleTemplate: "Certificates",
		$valueTemplate: "{name}",
		$events: {
			$beforeSave: [function(_, instance) {
				var cl = instance.certificate(_);
				if (cl.fileExists(_)) {
					var pemInput = cl.createReadableStream(_).read(_, -1).toString();
					fillInstance(instance, pemInput, _);
/*					
					if (pemInput.indexOf('CERTIFICATE---') > 0) {
						var b64 = pemInput.substring(pemInput.indexOf('ATE-----') + 8, pemInput.indexOf('-----END'));
						var certificate = new Buffer(b64, "base64");
						var cert = new Certificate(certificate);
						console.log("CCC "+cert.toString())
						instance.dn(_, getDn(cert.subject));
						console.log("ISS "+util.format(cert.issuer))
						instance.issuerDn(_, getDn(cert.issuer));
					}
					*/
				}
			}],
			$afterSave: []
		},
		$searchIndex: {
			$fields: ["name"]
		},
		$functions: {
		},
		$defaultOrder: [["name", true]],
		$services: {
		},
		$relations: {
			caCertificates: {
				$title: "CA Certificates",
				$type: "caCertificates",
				$inv: "certificates"
			},

		}
}