"use strict";
var locale = require("syracuse-core/lib/locale");
var config = require('syracuse-main/lib/nodeconfig').config;
var mock = require('syracuse-load/lib/mock');
var util = require('util');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var clusterData;

exports.entity = {
	$canDelete: false,
	$canCreate: false,
	$properties: {
		port: {
			$title: "Port",
			$type: "integer",
			$isMandatory: true,
			$default: 8124
		},
		active: {
			$title: "active",
			$type: "boolean",
			$default: true
		},
		ssl: {
			$title: "SSL",
			$type: "boolean",
			$default: false
		},
		clientAuth: {
			$title: "Client authentication",
			$type: "boolean",
			$default: false,
			$isDisabled: function(_, instance) {
				return !instance.ssl(_);
			}
		}
	},
	$titleTemplate: "Connection information",
	$valueTemplate: "{port}",
	$relations: {
		serverCert: {
			$title: "Server certificate",
			$type: "certificate",
			$isMandatory: function(_, instance) {
				return instance.ssl(_);
			},
			$isDisabled: function(_, instance) {
				return !instance.ssl(_);
			}
		},
		clientCert: {
			$title: "Client certificate",
			$type: "certificate",
			$isMandatory: function(_, instance) {
				return instance.clientAuth(_) && instance.ssl(_);
			},
			$isDisabled: function(_, instance) {
				return !instance.clientAuth(_) || !instance.ssl(_);
			}
		}
	},
	$events: {
		$canSave: [function(_, instance) {
			// check whether client certificate and server certificate have identical Certification Authorities
			var serverCert = instance.serverCert(_);
			var clientCert = instance.clientCert(_);
			if (serverCert && !serverCert.keyExists(_)) {
				instance.$addError(locale.format(module, "noKeyServer"));
			}
			if (clientCert && !clientCert.keyExists(_)) {
				instance.$addError(locale.format(module, "noKeyClient"));
			}
			if (serverCert && clientCert) {
				var serverCas2 = serverCert.caCertificates(_);
				var clientCas2 = clientCert.caCertificates(_);
				if (!serverCas2 && !clientCas2) {
					return; // no CA certificates
				}
				var serverCas = serverCas2 ? serverCas2.toArray(_) : [];
				var clientCas = clientCas2 ? clientCas2.toArray(_) : [];
				if (serverCas.length === clientCas.length) {
					// get list of CA names of server certificate
					var names = serverCas.map_(_, function(_, serverCa) {
						return serverCa.name(_);
					});
					// do the names all occur in client certificate CA names?
					if (clientCas.every_(_, function(_, clientCa) {
						return (names.indexOf(clientCa.name(_)) >= 0);
					})) {
						return;
					}
				}
				instance.$addError(locale.format(module, "differentCA"));
			}
		}]
	}
};