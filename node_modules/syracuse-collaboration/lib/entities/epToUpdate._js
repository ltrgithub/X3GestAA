"use strict";

var locale = require("syracuse-core/lib/locale");

var ez = require("ez-streams");
var httpClient = require('syracuse-httpclient/lib/httpClient');

var locale = require("syracuse-core/lib/locale");
var config = require('config'); // must be first syracuse require

function listFolders(_, instance, folders, parent, history) {
	if (!folders) return;

	var list = instance.folders(_);
	folders.forEach_(_, function(_, folder) {
		var item = list.add(_);
		item.parent(_, parent || "");
		item.name(_, folder.name);
		item.release(_, folder.release);
		item.history(_, history || false);
		item.updated(_, folder.dat);
		item.patch(_, folder.patch);

		listFolders(_, instance, folder.folders, folder.name);
		if (folder.history) listFolders(_, instance, [folder.history], folder.name, true);
	});
}

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Patches",
	$descriptionTemplate: "Patches",
	$helpPage: "Patches",
	$properties: {},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isMandatory: true,
			$displayLength: 15,
			$propagate: function(_, instance, ep) {
				console.log("epToUpdate endpoint:   " + ep.description(_));
				var foldersTree = ep.getService(_, "foldersTree");
				if (foldersTree) {
					listFolders(_, instance, [foldersTree]);
				}
			},
		},
		folders: {
			$type: "folderToUpdates",
			$title: "Folders to update",
			$isMandatory: false,
			$inv: "epToUpdate",
			$isChild: true,
			$treeview: {
				$mode: "parentKey",
				$bindings: {
					$clientId: "name",
					$parent: "parent"
				}
			}
		}
	},
	$init: function(_, instance) {},
	$functions: {
		apply: function(_, diags, tracker) {},

	},
	$services: {}
};