"use strict";

var util = require("util");
var check = require('syracuse-license/lib/check');
var fs = require('streamline-fs');
var locale = require("syracuse-core/lib/locale");
var helpers = require("syracuse-core/lib/helpers");
var globals = require('streamline/lib/globals');
var syracuseDate = require("syracuse-core/lib/types/date");
var htmlEscape = helpers.string.htmlEscape;

// var tracer = console.log
var tracer = null;

exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$canDelete: false,
	$canSave: false,
	$properties: {
		path: {
			$title: "Path",
			$default: "license.json"
		},
		content: {
			$title: "Content"
		},
		licenseData: {
			$title: "License data",
			$type: "text/html",
			$isReadOnly: true
		}
	},
	$titleTemplate: "License",
	$valueTemplate: "License",
	$descriptionTemplate: "License",
	$functions: {},
	$services: {
		testFunction: {
			$method: "PUT",
			$isMethod: true,
			$title: "Test function",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || {};
				// var attr = getLdapAttributes(instance, _);
				// console.log(util.format(attr));
				console.log("Test1");
				check.pS(_, "hugo", "get", "/licensetest", null);
				console.log("Nach test");
				/*
				var lic = require('syracuse-license').load('license')
				if (lic) {
					lic.register();
					instance.$diagnoses.push({severity: "info", message: locale.format(module, "OK")});
				}
				else instance.$diagnoses.push({severity: "error", message: "No license module found"}); 
				*/
				instance.$diagnoses.push({
					severity: "info",
					message: locale.format(module, "OK")
				});
			}
		},
		$showLicense: {
			$method: "POST",
			$isMethod: true,
			$title: "Show license contents",
			$execute: function(_, context, instance) {

				var ldateformat = null;

				function title(item) {
					var currentLocale = locale.current;
					if (!(currentLocale in item.title)) {
						currentLocale = currentLocale.replace("-", "_");
					} else if (!(currentLocale in item.title)) {
						currentLocale = "en-US";
					} else if (!(currentLocale in item.title)) {
						currentLocale = currentLocale.replace("-", "_");
					} else if (!(currentLocale in item.title)) {
						throw new Error("No locale en_US available");
					}
					return item.title[currentLocale];
				}

				function dateformat(item) {
					item = syracuseDate.parse(item).toString(ldateformat);
					return item;
				}

				var raw = check.getRawLicense(_);
				if (!raw) return;

				var up = globals.context.session && globals.context.session.getUserProfile(_);
				if (up) {
					var lp = up.selectedLocale(_);
					if (lp) {
						tracer && tracer("Date format " + lp.shortDate(_));
						ldateformat = lp.shortDate(_);
					}
				}

				var contents = {};
				raw.forEach(function(lic) {
					try {
						var item = JSON.parse(lic);
					} catch (e) {
						instance.$addError("License parse error: " + e);
						return;
					}
					var index;
					switch (item.fileType) {
						case "Policy":
							index = 0;
							break;
						case "License":
							index = 1;
							break;
						case "Partner":
							return;
						default:
							instance.$addError(locale.format(module, "wrongType", item.fileType));
							return;
					}
					if (!item.product || !item.policy) {
						instance.$addError(locale.format(module, "noProdPolicy", lic));
						return;
					}
					var key = item.partnerId + "\t" + item.product.code + "\t" + item.product.version + "\t" + item.policy.code + "\t" + item.policy.version;
					if (!(key in contents)) contents[key] = [];
					contents[key][index] = item;
				});
				var result = "<html><body>";
				for (var key in contents) {
					var pair = contents[key];
					if (!pair[1] || !pair[0]) continue; // no license or policy file
					var license = pair[1];
					if (!license.licensedTo) {
						instance.$addError(locale.format(module, "noLicensee", key));
						continue;
					}
					if (!license.validity || !license.validity[0] || !license.validity[1]) {
						instance.$addError(locale.format(module, "noValidity", key));
						continue;
					}
					var policy = pair[0];
					result += "<h1>" + htmlEscape(license.partnerId || "SAGE") + "</h1><br><b>" + htmlEscape(locale.format(module, "granted", title(policy.product), policy.product.version));
					result += "</b><br>" + htmlEscape(license.licensedTo.name) + "<br>";
					if (license.licensedTo.address) {
						["address1", "city", "zip", "state", "country"].forEach(function(item) {
							result += htmlEscape(license.licensedTo.address[item]) + "<br>";
						});
					}
					result += "<b>" + htmlEscape(locale.format(module, "policy", title(policy.policy), policy.policy.version)) + "</b><br>";
					result += "<b>" + htmlEscape(locale.format(module, "globalValidity", dateformat(license.validity[0]), dateformat(license.validity[1]))) + "</b><br>";
					result += "<b>" + htmlEscape(license.sessionControl === "concurrent" ? locale.format(module, "concurrent", license.maxSessions) : locale.format(module, "named", license.maxSessions)) + "</b><br>";
					["modules", "activityCodes", "languages", "legislations", "parameterKits", "badges"].forEach(function(item) {
						var policyParts = policy[item];
						var licenseParts = license[item];
						var allowed = ""; // allowed parts
						policyParts.forEach(function(part) {
							var from = "";
							var to = "";
							var max = "0";
							switch (part.condition) {
								case "never":
									return;
								case "license":
								case undefined:
									from = to = locale.format(module, "notLicensed");
									if (!licenseParts) break;
									licenseParts.forEach(function(lpart) {
										// console.error("XXXXXXXXX "+util.format(lpart)+" "+util.format(part))
										if (lpart.code === part.code) {
											if (item === "badges") max = "" + lpart.max;
											else {
												// console.error("VVVVVV "+util.format(lpart.validity)+" "+util.format(license.validity))
												if (lpart.validity && lpart.validity[0] > license.validity[0]) from = lpart.validity[0];
												else from = license.validity[0];
												if (lpart.validity && lpart.validity[1] && lpart.validity[1] < license.validity[1]) to = lpart.validity[1];
												else to = license.validity[1];
												from = dateformat(from);
												to = dateformat(to);
											}
										}
									});
									break;
								case "always":
									break;
								default:
									throw new Error("Wrong condition " + part.condition);
							}
							allowed += "<tr><td>" + htmlEscape(title(part)) + "</td>";
							if (item === "badges") allowed += "<td>" + htmlEscape(max) + "</td><td>" + part.functions.join(" ") + "</td>";
							else {
								allowed += "<td>" + htmlEscape(from) + "</td><td>" + htmlEscape(to) + "</td>";
								if (item === "modules") allowed += "<td>" + part.keyFunctions.join(" ") + "</td>";
							}
							allowed += "</tr>\n";
						});
						if (allowed) {
							result += "<table border='1'><caption><h3>" + htmlEscape(locale.format(module, item)) + "</h3></caption><tr><th>" + htmlEscape(locale.format(module, "name")) + "</th>";
							if (item === "badges") result += "<th>" + htmlEscape(locale.format(module, "maxNumber")) + "</th><th>" + htmlEscape(locale.format(module, "functions")) + "</th>";
							else {
								result += "<th>" + htmlEscape(locale.format(module, "licensedFrom")) + "</th><th>" + htmlEscape(locale.format(module, "licensedTo")) + "</th>";
								if (item === "modules") result += "<th>" + htmlEscape(locale.format(module, "functions")) + "</th>";
							}
							result += "</tr>\n" + allowed + "</table>";
						}
					});
				}

				instance.licenseData(_, result + "</body></html>");
			}
		},
		$loadLicense: {
			$method: "PUT",
			$isMethod: true,
			$title: "Load license",
			$execute: function(_, context, instance) {
				console.log("LOAD LICENSE");
				instance.$diagnoses = instance.$diagnoses || {};
				var content = instance.content(_);
				if (!content) {
					if (!fs.existsSync(instance.path(_))) {
						instance.$diagnoses.push({
							severity: "error",
							message: locale.format(module, "noLicense")
						});
						return;
					}
					content = fs.readFile(instance.path(_), _).toString("utf8");
				} else {
					content = content.trim();
				}
				try {
					check.licenseChange(content, context.request.session, instance.$diagnoses, _);
					if (instance.$diagnoses.length === 0) instance.$diagnoses.push({
						severity: "info",
						message: locale.format(module, "OK")
					});
				} catch (e) {
					console.log(e.stack);
					instance.$diagnoses.push({
						severity: "error",
						message: "" + e
					});
				}
			}
		}
	}
};