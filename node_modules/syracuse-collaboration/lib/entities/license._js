"use strict";

var util = require("util");
var check = require('syracuse-license/lib/check');
var fs = require('streamline-fs');
var locale = require("syracuse-core/lib/locale");
var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var globals = require('streamline/lib/globals');
var syracuseDate = require("syracuse-core/lib/types/date");
var htmlEscape = helpers.string.htmlEscape;

var tracer; // = console.log

exports.entity = {
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$canDelete: false,
	$canSave: false,
	$properties: {
		path: {
			$title: "Path",
			$default: "license.json",
			$isDeveloppementFeature: true
		},
		content: {
			$title: "Content"
		}
	},
	$titleTemplate: "License",
	$valueTemplate: "License",
	$descriptionTemplate: "License",
	$helpPage: "Administration-reference-License-data",
	$functions: {},
	$services: {
		/*
		$test: {
			$method: "POST",
			$isMethod: true,
			$title: "Test mail",
			$execute: function(_, context, instance) {
				var db = adminHelper.getCollaborationOrm(_);
				var events = db.fetchInstances(_, db.model.getEntity(_, "notificationEvent"), {
				});
				if (events.length > 0) {
					console.log("Testmail "+events[0].code(_))
					var executionTime = Date.now();
					var parameters =  { expiryDate:
						'2013-10-25',
						  partnerId: '',
						  productCode: 'ERP',
						  productTitle: { 'en-us': 'Sage ERP X3', 'fr-fr': 'Sage ERP X3' },
						  productVersion: '7.0',
						  policyCode: 'ERPSTD',
						  policyTitle: { 'en-us': 'Standard edition', 'fr-fr': 'Edition standard' },
						  daysBefore: 11,
						  policyVersion: '1.0' };
					events[0].schedule(_, executionTime, executionTime+15000, parameters, 2);					
				}
			}
		},
		*/
		/* test function which changes the `check` module and therefore will cause the license system to stop working
		$test: {
			$method: "POST",
			$isMethod: true,
			$title: "Destroy",
			$execute: function(_, context, instance) {
			
				var t = check.checkConcurrent;
				// checkConcurrent(session, role, userName, _, device, diagnoses)
				require('syracuse-license').load('license').unsinn = 1;
				check.checkConcurrent = function(session, role, userName, _, device, diagnoses) {
					return t(session, role, userName, _, device, diagnoses);
				};
			}
		},
		*/
		$loadLicense: {
			$method: "PUT",
			$isMethod: true,
			$title: "Load license",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				var content = instance.content(_);
				if (!content) {
					if (!fs.existsSync(instance.path(_))) {
						instance.$diagnoses.push({
							severity: "error",
							message: locale.format(module, "noLicense")
						});
						return;
					}
					content = fs.readFile(instance.path(_), _).toString("utf8");
				} else {
					content = content.trim();
				}
				try {
					check.licenseChange(content, context.request.session, instance.$diagnoses, _);
					if (instance.$diagnoses.length === 0) instance.$diagnoses.push({
						severity: "info",
						message: locale.format(module, "OK")
					});
				} catch (e) {
					console.log(e.stack);
					instance.$diagnoses.push({
						severity: "error",
						message: "" + e
					});
				}
			}
		}
	}
};