"use strict";

var globals = require('streamline/lib/globals');
var sys = require("util");

exports.entity = {
	$titleTemplate: "Menu module",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code",
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true
		},
		title: {
			$title: "Title",
			$isMandatory: true,
			$isLocalized: true,
			$linksToDetails: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		}
	},
	$relations: {
		submodules: {
			$title: "Submodules",
			$type: "menuBlocks",
			$capabilities: "sort,reorder,delete",
			$lookupFilter: {
				application: "{application}"
			}
		},
		application: {
			$title: "Application",
			$type: "application",
			$isMandatory: true
		},
		endpoints: {
			$title: "Endpoints",
			$type: "endPoints"
		},
		navigationPages: {
			$title: "Navigation pages",
			$type: "navigationPages",
			$inv: "modules",
			$isComputed: true,
			$nullOnDelete: true
		}
	},
	$functions: {
		getNavigationPageResource: function(_, endpoint) {
			// TODO: not finished, to validate !!!
			function _keep(_, app, eps) {
				var _appId = app && app.$uuid;
				var keep = (_appId === appId || _appId === adminApp.$uuid);
				if (eps && eps.length) keep = keep && ((eps.indexOf(selectedEpId) >= 0) || (eps.indexOf(adminEp.$uuid) >= 0));
				return keep;
			}
			if (!endpoint) return {};
			var mm = this;
			return {
				$uuid: mm.$uuid,
				$menuBaseUrl: endpoint && endpoint.getBaseUrl(_),
				title: mm.title(_),
				description: mm.description(_),
				submodules: mm.submodules(_).toArray(_).filter_(_, function(_, sm) {
					return _keep(_, sm.application(_), sm.endpoints(_).toArray(_));
				}).map_(_, function(_, sm) {
					return sm.getNavigationPageResource(_, "{$menuBaseUrl}");
				})
			};
		}
	},
	$events: {
		$afterSave: [
			function(_, instance, params) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("navigationPage");
				// add module to origin page
				if (params && params.originPage) {
					var page = instance._db.fetchInstance(_, instance._db.getEntity(_, "navigationPage"), params.originPage);
					if (page) {
						page.modules(_).set(_, instance);
						page.save(_, null, {
							shallowSerialize: true
						});
					}
				}
			}
		]
	}
};