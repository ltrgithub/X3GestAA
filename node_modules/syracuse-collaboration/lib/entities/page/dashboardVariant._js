"use strict"

exports.entity = {
	$properties: {
		code: {
			$title: "Code"
		},
		title: {
			$title: "Title",
			$isLocalized: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		allApplications: {
			$title: "Applies to all applications",
			$type: "boolean",
			
				$isNullable: true
			,
			$propagate: function(_, instance, val) {
				if(val) instance.application(_, null);
			}
		}
	},
	$relations: {
		roles: {
			$title: "Applies to roles",
			$type: "roles",
		},
		users: {
			$title: "Applies to users",
			$type: "users",
		},
		vignettes: {
			$title: "Vignettes",
			$type: "dashboardVignettes",
			isChild: true,
			$select: {
				$title: "Vignettes",
				$type: "portlet",
				$fieldMap: { portlet: "$uuid" }
			}
		},
		application: {
			$title: "Application",
			$type: "application",
			$isMandatory: function(_, instance) {
				return !instance.allApplications(_);
			},
			$isDefined: function(_, instance) {
				return !instance.allApplications(_);
			},
			$propagate: function(_, instance, val) {
				val && instance.vignettes(_).toArray(_).forEach_(_, function(_, pagePortlet) {
					if(pagePortlet.endpoint(_) && (pagePortlet.endpoint(_).applicationRef(_).$uuid !== val.$uuid))
						instance.vignettes(_).deleteInstance(_, pagePortlet.$uuid);
				});
			}
		},
		endpoints: {
			$title: "Applies to endpoints",
			$type: "endPoints"
		},
		pageData: {
			$title: "Content",
			$type: "pageData",
			$cascadeDelete: true
		}
	},
	$functions: {
		getPrototype: function(_, profile) {
			function addPortletEndpoint(_, portlet, endpoint, isMultiEP, pagePortlet) {
				var p = portlet.getContent(_, endpoint);
				if(p) {
					if(!pagePortlet.allEndpoints(_) && !(profile && profile.selectedEndpoint(_))) {
						p.$title = p.$title + " - " + endpoint.description(_);
						p.$description = p.$description + " - " + endpoint.description(_);
					}
				}
				var portletId = portlet.code(_) || portlet.$uuid;
				$[pagePortlet.allEndpoints(_) ? portletId : portletId + "-" + endpoint.dataset(_)] = p;
			}
			//
			var pageData = this;
			var endpoint = profile && profile.selectedEndpoint(_);
			var portlets = pageData.vignettes(_).toArray(_);
			var proto = {
				$title: pageData.title(_) || pageData._parent.title(_),
				$description: pageData.description(_) || pageData._parent.description(_),
				$properties:{}
			};
			var $ = proto.$properties;
			portlets.filter_(_, function(_, pagePortlet) {
				var portlet = pagePortlet.portlet(_);
				if(!portlet) return false;
				var crtEndpoint = (pagePortlet.allEndpoints(_) ? null : pagePortlet.endpoint(_));
				//
				if(endpoint) {
					if(pagePortlet.allEndpoints(_) && portlet.application(_) && (endpoint.applicationRef(_).$uuid !== portlet.application(_).$uuid)) 
						return false;
					if(crtEndpoint && (endpoint.$uuid !== crtEndpoint.$uuid)) 
						return false;
				} else {
					// all endpoints portlet is displayed only if selected endpoint
					if(pagePortlet.allEndpoints(_)) return false;
					//
					if(crtEndpoint && profile && !profile.endpoints(_).get(_, crtEndpoint.$uuid))
						return;
				}
				return true;
			}).forEach_(_, function(_, pagePortlet) {
				var portlet = pagePortlet.portlet(_);
				var crtEndpoint = (pagePortlet.allEndpoints(_) ? null : pagePortlet.endpoint(_));
				//
				if(pagePortlet.allEndpoints(_)) {
					endpoint && addPortletEndpoint(_, portlet, endpoint, false, pagePortlet);
				} else
					crtEndpoint && addPortletEndpoint(_, portlet, crtEndpoint, true, pagePortlet);
			});
			//
			return proto;
		}
	}
}