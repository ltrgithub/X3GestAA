"use strict";

var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var tracer = console.log;

function _getMenuItem(_, vg, admDb, menuItemEnt, application, filter, options) {
	var ft = filter || {};
	ft.jsonWhere = ft.jsonWhere || {};
	if (application) ft.jsonWhere.application = application.$uuid;
	//
	var men = admDb.fetchInstance(_, menuItemEnt, ft);
	if (!men && options.canCreate.menu) {
		men = menuItemEnt.createInstance(_, admDb);
		men.application(_, application);
		men._isCreated = true;
	}
	if (men && (options.canUpdate.menu || men._isCreated)) {
		men.code(_, options.prefix + vg.CODVI(_));
		men.title(_, vg.LABEL(_) || men.code(_));
		men._isModified = true;
	}
	return men;
}

function _getParameter(_, menu, paramName, noCreate) {
	var par = menu.parameters(_).toArray(_).filter_(_, function(_, it) {
		return it.name(_) === paramName;
	})[0];
	if (!par && !noCreate) {
		par = menu.parameters(_).add(_);
		par.name(_, paramName);
		par.title(_, par.name(_));
	}
	return par;
}

var _menuTypesMap = {
	"PROCESS": function(_, vg, admDb, menuItemEnt, application, filter, options) {
		var ft = filter || {};
		ft.jsonWhere = ft.jsonWhere || {};
		ft.jsonWhere.processName = vg.SOURCE(_);
		ft.jsonWhere.processMenu = vg.MENUPROC(_);
		ft.jsonWhere.linkType = "$process";
		//
		var men = _getMenuItem(_, vg, admDb, menuItemEnt, application, ft, options);
		if (men && men._isCreated) {
			men.linkType(_, "$process");
			men.processName(_, vg.SOURCE(_));
			men.processMenu(_, vg.MENUPROC(_));
		}
		return men;
	},
	"REQUEST": function(_, vg, admDb, menuItemEnt, application, filter, options) {
		//
		var compl = JSON.parse(vg.COMPLEMENT(_) || "{}");
		//
		var ft = filter || {};
		ft.jsonWhere = ft.jsonWhere || {};
		ft.jsonWhere.requestName = vg.SOURCE(_);
		if (compl.level) ft.jsonWhere.requestLevel = "" + compl.level;
		ft.jsonWhere.linkType = "$request";
		//
		var men = _getMenuItem(_, vg, admDb, menuItemEnt, application, ft, options);
		if (men && men._isCreated) {
			men.linkType(_, "$request");
			men.requestName(_, vg.SOURCE(_));
			if (compl.level) men.requestLevel(_, "" + compl.level);
		}
		if (men && (options.canUpdate.menu || men._isCreated)) {
			// forced execution must be deleted
			//if (compl.hasOwnProperty("forcedExecution")) {
			var pp = _getParameter(_, men, "forcedExecution", true);
			if (pp) men.parameters(_).deleteInstance(_, pp.$uuid);
			//pp.value(_, compl.forcedExecution ? "true" : "false");
			men._isModified = true;
			//}
			var pp = _getParameter(_, men, "portview");
			if (pp.value(_) !== vg.PORTVIEW(_)) {
				pp.value(_, vg.PORTVIEW(_));
				men._isModified = true;
			}
			var pp = _getParameter(_, men, "cube");
			if (pp.value(_) !== "false") {
				pp.value(_, "false");
				men._isModified = true;
			}
		}
		return men;
	},
	"WEBPAGE": function(_, vg, admDb, menuItemEnt, application, filter, options) {
		//
		var compl = JSON.parse(vg.COMPLEMENT(_) || "{}");
		//
		var ft = filter || {};
		ft.jsonWhere = ft.jsonWhere || {};
		ft.jsonWhere.externalUrl = vg.SOURCE(_);
		ft.jsonWhere.linkType = "$external";
		//
		var men = _getMenuItem(_, vg, admDb, menuItemEnt, null, ft, options);
		if (men && men._isCreated) {
			men.linkType(_, "$external");
			men.externalUrl(_, vg.SOURCE(_));
		}
		return men;
	},
	"STAT": function(_, vg, admDb, menuItemEnt, application, filter, options) {
		var ft = filter || {};
		ft.jsonWhere = ft.jsonWhere || {};
		ft.jsonWhere.statName = vg.SOURCE(_);
		ft.jsonWhere.linkType = "$stats";
		//
		var men = _getMenuItem(_, vg, admDb, menuItemEnt, application, ft, options);
		if (men && men._isCreated) {
			men.linkType(_, "$stats");
			men.statName(_, vg.SOURCE(_));
		}
		if (men && (options.canUpdate.menu || men._isCreated)) {
			var pp = _getParameter(_, men, "portview");
			if (pp.value(_) !== vg.PORTVIEW(_)) {
				pp.value(_, vg.PORTVIEW(_));
				men._isModified = true;
			}
		}
		return men;
	}
};

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Import of menu profile",
	$valueTemplate: "",
	$helpPage: "Administration-reference-Menu-profile-import",
	$properties: {
		profileCode: {
			$title: "Profile code",
			$isMandatory: function(_, instance) {
				return instance.importMenu(_);
			},
			$isHidden: function(_, instance) {
				return !instance.importMenu(_);
			}
		},
		importMode: {
			$title: "Import mode",
			$enum: [{
				$title: "Insert only",
				$value: "insert",
				$description: "Create new elements and associate them. Doesn't modify existing elements"
			}, {
				$title: "Insert and update menus only",
				$value: "insertUpdateMenu",
				$description: "Create new menus only. Will associate them if a block can de identified"
			}, {
				$title: "Insert and update",
				$value: "insertUpdate",
				$description: "Create new elements and associate them. Can modify existing elements"
			}, {
				$title: "Update only",
				$value: "update",
				$description: "Modify existing elements. Doesn't create new elements"
			}],
			$default: "insertUpdate"
		},
		baseMenuName: {
			$title: "Base menu name",
			$isMandatory: true,
			$default: "GENE",
			$isHidden: true
		},
		pageName: {
			$title: "Navigation page name",
			$isHidden: function(_, instance) {
				return !instance.importMenu(_);
			}
		},
		allLocales: {
			$title: "Import all actives locales",
			$type: "boolean"
		},
		setAsFactory: {
			$title: "Set imported elements as Factory",
			$type: "boolean",
			$isHidden: function(_, instance) {
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return !sp.hasFactoryRights(_);
			}
		},
		importMenu: {
			$title: "Import menu profile",
			$type: "boolean"
		},
		importVignettes: {
			$title: "Import vignettes",
			$type: "boolean"
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		},
		locales: {
			$title: "Locales",
			$type: "localePreferences",
			$isDefined: function(_, instance) {
				return !instance.allLocales(_);
			},
			defaultValue: function(_, instance) {
				return instance._db.fetchInstance(_, instance._db.getEntity(_, "localePreference"), {
					jsonWhere: {
						code: {
							$regex: locale.current,
							$options: "i"
						}
					}
				});
			}
		}
	},
	$functions: {
		importMenuProfile: function(_, tracker) {
			function _updateProp(_, inst, authProp, propName, value) {
				if (inst && (canUpdate[authProp] || (inst._isCreated && canCreate[authProp])) && (inst[propName](_) !== value)) {
					inst[propName](_, value);
					inst._isModified = true;
				}
			}

			function _updateFactory(_, inst, authProp) {
				if (inst && (canUpdate[authProp] || (inst._isCreated && canCreate[authProp])) && (inst.$factory !== true)) {
					inst.$factory = true;
					inst.$factoryOwner = adminHelper.sageFactoryName;
					inst._isModified = true;
				}
			}

			function _processDiagsOk(allDiags) {
				var isOk = true;
				(allDiags || []).forEach(function(dd) {
					if (dd.$severity !== "success" && dd.$severity !== "ok") diags.push(dd);
					if (dd.$severity === "error") isOk = false;
				});
				return isOk;
			}

			function _track(phase, detail, progress) {
				if (!tracker) return;
				tracker.phase = phase;
				tracker.phaseDetail = detail;
				tracker.progress = progress;
			}

			function _addDiag(severity, message) {
				diags.push({
					$severity: severity,
					$message: message
				});
				return false;
			}

			function _fillAllBlocks(_, block, blockMap) {
				if (!block) return;
				block.items(_).toArray(_).forEach_(_, function(_, it) {
					// it is subblock if supports items property
					if (it.items) {
						blockMap[it.code(_)] = it;
						_fillAllBlocks(_, it, blockMap);
					}
				});
			}
			//
			function _makeModule(_, pp, menu) {
				var mCode = codePrefix + menu.CODMEN(_);
				var mod = admDb.fetchInstance(_, modEnt, {
					jsonWhere: {
						code: mCode
					}
				});
				var isCreated = false;
				if (!mod && canCreate.module) {
					mod = modEnt.createInstance(_, admDb);
					mod.code(_, mCode);
					mod.application(_, self.endpoint(_).applicationRef(_));
					mod._isCreated = true;
					isCreated = true;
				}
				if (mod && (canUpdate.module || (isCreated && canCreate.module)) && (mod.title(_) !== menu.LIBMENU(_))) {
					mod.title(_, menu.LIBMENU(_));
					mod._isModified = true;
				}
				if (self.setAsFactory(_)) _updateFactory(_, mod, "module");
				_track(locale.format(module, "importPhase"), menu.CODMEN(_), 0);
				var miscBlock = null;
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeSubmodule(_, mod, submen);
					else {
						var miscCode = mCode + "_MISC";
						if (!miscBlock) miscBlock = admDb.fetchInstance(_, blockEnt, {
							jsonWhere: {
								code: miscCode
							}
						});
						if (!miscBlock && canCreate.submodule) {
							miscBlock = blockEnt.createInstance(_, admDb);
							miscBlock.code(_, miscCode);
							miscBlock.application(_, self.endpoint(_).applicationRef(_));
							miscBlock._isCreated = true;
						}
						if (miscBlock && mod && (canUpdate.submodule || (miscBlock._isCreated && canCreate.submodule)) && (miscBlock.title(_) !== mod.title(_))) {
							miscBlock.title(_, mod.title(_));
							miscBlock._isModified = true;
						}
						if (self.setAsFactory(_)) _updateFactory(_, miscBlock, "submodule");
						miscBlock && _makeMenuEntry(_, miscBlock, submen, mod);
					}
					return tracker && tracker.abortRequested;
				});
				if (miscBlock && (miscBlock._isModified || miscBlock._isCreated)) {
					var res = miscBlock.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					miscBlock.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: locale.format(module, "submoduleModified", miscBlock.title(_))
						});
					} else {
						dd.forEach(function(diag) {
							diags.push(diag);
						});
						miscBlock = null;
					}
				}
				if (mod) {
					if (miscBlock && mod && canUpdate.module) {
						mod.submodules(_).set(_, miscBlock);
						mod._isModified = true;
					}
					// save AFTER children creation
					if (mod._isModified || isCreated) {
						var res = mod.save(_, null, {
							shallowSerialize: true
						});
						var dd = [];
						mod.getAllDiagnoses(_, dd, {
							addPropName: true,
							addEntityName: true
						});
						if (_processDiagsOk(dd)) {
							diags.push({
								$severity: "success",
								$message: isCreated ? locale.format(module, "moduleCreated", mod.title(_)) : locale.format(module, "moduleModified", mod.title(_))
							});
						} else {
							dd.forEach(function(diag) {
								diags.push(diag);
							});
							mod = null;
						}
					}
					//
					if (mod && pp && !pp.modules(_).get(_, mod.$uuid)) {
						pp.modules(_).set(_, mod);
						pp._isModified = true;
					}
				}
			}

			function _makeSubmodule(_, mod, menu) {
				var sCode = codePrefix + menu.CODMEN(_);
				var block = admDb.fetchInstance(_, blockEnt, {
					jsonWhere: {
						code: sCode
					}
				});
				var isCreated = false;
				var _allBlocks = {};
				if (!block) {
					if (canCreate.submodule) {
						block = blockEnt.createInstance(_, admDb);
						block.code(_, sCode);
						block.application(_, self.endpoint(_).applicationRef(_));
						block._isCreated = true;
						var isCreated = true;
					}
				} else _fillAllBlocks(_, block, _allBlocks);
				if (block) {
					if ((canUpdate.submodule || (isCreated && canCreate.submodule)) && (block.title(_) !== menu.LIBMENU(_))) {
						block.title(_, menu.LIBMENU(_));
						block._isModified = true;
					}
					if (self.setAsFactory(_)) _updateFactory(_, block, "submodule");
				}
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, _allBlocks, submen, mod);
					else _makeMenuEntry(_, block, submen, mod);
					return tracker && tracker.abortRequested;
				});
				//
				if (block && (block._isModified || isCreated)) {
					var res = block.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					block.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: isCreated ? locale.format(module, "submoduleCreated", block.title(_)) : locale.format(module, "submoduleModified", block.title(_))
						});
					} else {
						dd.forEach(function(diag) {
							diags.push(diag);
						});
						block = null;
					}
				}
				if (block && mod && canUpdate.module && !mod.submodules(_).get(_, block.$uuid)) {
					mod.submodules(_).set(_, block);
					mod._isModified = true;
				}
			}

			function _makeBlock(_, parentBlock, _submoduleBlocks, menu, mod) {
				var bCode = codePrefix + menu.CODMEN(_);
				var block = _submoduleBlocks && _submoduleBlocks[bCode];
				var isCreated = false;
				if (!block && canCreate.block) {
					block = subBlockEnt.createInstance(_, admDb);
					block.code(_, bCode);
					block.application(_, self.endpoint(_).applicationRef(_));
					block._isCreated = true;
					//
					if (_submoduleBlocks) _submoduleBlocks[bCode] = block;
					//
					isCreated = true;
				}
				if (block) {
					if ((canUpdate.block || (isCreated && canCreate.block)) && (block.title(_) !== menu.LIBMENU(_))) {
						block.title(_, menu.LIBMENU(_));
						block._isModified = true;
					}
					if (self.setAsFactory(_)) _updateFactory(_, block, "block");
					if (parentBlock && canUpdate.block && !parentBlock.items(_).get(_, block.$uuid)) {
						parentBlock.items(_).set(_, block);
						parentBlock._isModified = true;
					}
				}
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, _submoduleBlocks, submen, mod);
					else _makeMenuEntry(_, block, submen, mod);
					return tracker && tracker.abortRequested;
				});
				if (block) {
					if (block._isModified || isCreated) parentBlock._isModified = true;
					//
					var dd = [];
					block.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					_processDiagsOk(dd);
				}
			}

			function _makeMenuEntry(_, parentBlock, menu, mod) {
				// TODO: should change this code also but we need an update script first !!!
				var mCode = menu.CODMEN(_) || menu.FONCTION(_);
				var mi = admDb.fetchInstance(_, menuItemEnt, {
					jsonWhere: {
						linkType: "$function",
						fusionFunction: menu.FONCTION(_),
						application: self.endpoint(_).applicationRef(_).$uuid
					}
				});
				var isCreated = false;
				if (!mi && canCreate.menu) {
					if (self.importMode(_) === "update") return;
					mi = menuItemEnt.createInstance(_, admDb);
					mi.code(_, mCode);
					mi.application(_, self.endpoint(_).applicationRef(_));
					mi.linkType(_, "$function");
					mi.fusionFunction(_, menu.FONCTION(_));
					mi._isCreated = true;
					isCreated = true;
				}
				if (mi) {
					if (canUpdate.menu || (isCreated && canCreate.menu)) {
						if (mi.title(_) !== menu.LIBMENU(_)) {
							mi.title(_, menu.LIBMENU(_));
							mi._isModified = true;
						}
						if (mod && (!mi.module(_) || (mi.module(_).$uuid !== mod.$uuid))) {
							mi.module(_, mod);
							mi._isModified = true;
						}
						if (self.setAsFactory(_)) _updateFactory(_, mi, "menu");
					}
					//
					if (mi._isModified || isCreated) {
						var res = mi.save(_, null, {
							shallowSerialize: true
						});
						var dd = [];
						mi.getAllDiagnoses(_, dd, {
							addPropName: true,
							addEntityName: true
						});
						if (_processDiagsOk(dd)) {
							diags.push({
								$severity: "success",
								$message: isCreated ? locale.format(module, "menuCreated", mi.title(_)) : locale.format(module, "menuModified", mi.title(_))
							});
						} else {
							dd.forEach(function(diag) {
								diags.push(diag);
							});
							mi = null;
						}
					}
					if (mi && parentBlock && canUpdate.block && !parentBlock.items(_).get(_, mi.$uuid)) {
						parentBlock.items(_).set(_, mi);
						parentBlock._isModified = true;
					}
				}
			}
			// initialize
			var self = this;
			var admDb = self._db;
			var modEnt = admDb.getEntity(_, "menuModule");
			var blockEnt = admDb.getEntity(_, "menuBlock");
			var subBlockEnt = admDb.getEntity(_, "menuSubblock");
			var menuItemEnt = admDb.getEntity(_, "menuItem");
			var navPageEnt = admDb.getEntity(_, "navigationPage");
			var diags = tracker ? (tracker.$diagnoses = tracker.$diagnoses || []) : [];
			var locales = self.allLocales(_) ? admDb.fetchInstances(_, admDb.getEntity(_, "localePreference"), {
				jsonWhere: {
					enabled: true
				}
			}) : self.locales(_).toArray(_);
			var canCreate = {};
			var canUpdate = {};
			switch (self.importMode(_)) {
				case "insert":
				case "insertUpdate":
					canCreate.module = true;
					canCreate.submodule = true;
					canCreate.block = true;
					canCreate.menu = true;
					break;
				case "insertUpdateMenu":
					canCreate.menu = true;
					break;
			}
			switch (self.importMode(_)) {
				case "update":
				case "insertUpdate":
					canUpdate.module = true;
					canUpdate.submodule = true;
					canUpdate.block = true;
					canUpdate.menu = true;
					break;
				case "insertUpdateMenu":
					canUpdate.menu = true;
					break;
			}
			var app = self.endpoint(_).applicationRef(_);
			var codePrefix = (self.setAsFactory(_) ? "STD_" : "USER_") + app.application(_).toUpperCase() + "_" + app.contract(_).toUpperCase() + "_";
			// start
			var db = self.endpoint(_).getOrm(_);
			//			var profileEnt = db.getEntity(_, "ALISTMENUS", "$details");
			var profileEnt = db.getEntity(_, "ALISTMENUSL", "$bulk");
			var vignEnt = db.getEntity(_, "AVIGLIST", "$query");
			//
			var page = null;
			if (self.pageName(_)) {
				page = admDb.fetchInstance(_, navPageEnt, {
					jsonWhere: {
						pageName: self.pageName(_)
					}
				});
				if (!page) {
					page = navPageEnt.createInstance(_, admDb);
					page.pageName(_, self.pageName(_));
					page.title(_, self.pageName(_));
					if (self.setAsFactory(_)) {
						page.$factory = true;
						page.$factoryOwner = adminHelper.sageFactoryName;
					}
				}
			}
			//
			locales.some_(_, function(_, loc) {
				//
				var menus = {};
				var functions = {};
				//
				locale.setCurrent(_, loc.code(_));
				tracer && tracer("ImportMenuProfile: Importing locale: " + loc.code(_));
				_track(locale.format(module, "extractLocale", loc.code(_)), "", 0);
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocale", loc.code(_))
				});
				//
				// extract menus ====================
				if (self.importMenu(_)) {
					//
					/*				var profile = db.fetchInstance(_, profileEnt, "0~" + self.profileCode(_));
					// make tree first pass: menus map
					var allMenus = profile.APFMENUS(_).toArray(_);*/
					var allMenus = [];
					var men;
					var crs = db.createCursor(_, profileEnt, {
						sdataWhere: "(CODPRF eq '" + self.profileCode(_) + "')"
					});
					while (men = crs.next(_)) allMenus.push(men);
					//
					allMenus.some_(_, function(_, men) {
						var fct = men.FONCTION(_);
						var menuCode = men.CODMEN(_);
						if (!fct) return _addDiag("warning", locale.format(module, "noFunction", men.LIBMENU(_)));
						if (fct === "MENU") {
							if (!menuCode) return _addDiag("warning", locale.format(module, "noMenuCode", men.LIBMENU(_)));
							menus[menuCode] = men;
						}
						//else entries[fct] = men;
						//
						return tracker && tracker.abortRequested;
					});
					// generate tree structure
					allMenus.some_(_, function(_, men) {
						var parent = men.MENU(_);
						if (parent && menus[parent])(menus[parent]._children = menus[parent]._children || []).push(men);
						return tracker && tracker.abortRequested;
					});
					// import
					Object.keys(menus).some_(_, function(_, menKey) {
						var men = menus[menKey];
						// if no parent - module
						if (men.MENU(_) !== self.baseMenuName(_)) return;
						_makeModule(_, page, men);
						//
						return tracker && tracker.abortRequested;
					});
					if (page && page._isModified) {
						page.save(_, null, {
							shallowSerialize: true
						});
						var dd = [];
						page.getAllDiagnoses(_, dd, {
							addPropName: true,
							addEntityName: true
						});
						if (_processDiagsOk(dd)) {
							diags.push({
								$severity: "success",
								$message: locale.format(module, "pageModified", page.title(_))
							});
						}
					}
				}
				//
				// extract vignettes =======================
				if (self.importVignettes(_)) {
					//
					var vg;
					var crs = db.createCursor(_, vignEnt, {});
					while (vg = crs.next(_)) {
						if (vg.TYP(_) && _menuTypesMap[vg.TYP(_)]) {
							var filter = {};
							var mi = _menuTypesMap[vg.TYP(_)](_, vg, admDb, menuItemEnt, self.endpoint(_).applicationRef(_), filter, {
								diags: diags,
								prefix: codePrefix,
								canCreate: canCreate,
								canUpdate: canUpdate
							});
							if (self.setAsFactory(_)) _updateFactory(_, mi, "menu");
							//
							if (mi && (mi._isModified || mi._isCreated)) {
								var res = mi.save(_, null, {
									shallowSerialize: true
								});
								var dd = [];
								mi.getAllDiagnoses(_, dd, {
									addPropName: true,
									addEntityName: true
								});
								if (_processDiagsOk(dd)) {
									diags.push({
										$severity: "success",
										$message: mi._isCreated ? locale.format(module, "menuCreated", mi.title(_)) : locale.format(module, "menuModified", mi.title(_))
									});
								}
							}
						}
					}
				}
				//
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocaleFinished", loc.code(_))
				});
				//
				return tracker && tracker.abortRequested;
			});
		}
	},
	$services: {
		import: {
			$title: "Import",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context, instance, params) {
				var tt = context && context.tracker;
				instance.importMenuProfile(_, tt);
			}
		}
	}
};