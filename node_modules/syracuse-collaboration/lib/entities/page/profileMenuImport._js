"use strict";

var locale = require("syracuse-core/lib/locale");

var tracer = console.log;

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Import of menu profile",
	$valueTemplate: "",
	$properties: {
		profileCode: {
			$title: "Profile code",
			$isMandatory: true
		},
		baseMenuName: {
			$title: "Base menu name",
			$isMandatory: true
		},
		pageName: {
			$title: "Navigation page name"
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		}
	},
	$functions: {
		importMenuProfile: function(_, tracker) {
			function _processDiagsOk(allDiags) {
				var isOk = true;
				(allDiags || []).forEach(function(dd) {
					if (dd.$severity !== "success" && dd.$severity !== "ok") diags.push(dd);
					if (dd.$severity === "error") isOk = false;
				});
				return isOk;
			} 
			function _track(phase, detail, progress) {
				if (!tracker) return;
				tracker.phase = phase;
				tracker.phaseDetail = detail;
				tracker.progress = progress;
			}
			function _addDiag(severity, message) {
				diags.push({
					$severity: severity,
					$message: message
				});
				return false;
			}
			function _makeModule(_, pp, menu) {
				var mod = admDb.fetchInstance(_, modEnt, {
					jsonWhere: {
						code: menu.CODMEN(_)
					}
				});
				var isCreated = false;
				if (!mod) {
					mod = modEnt.createInstance(_, admDb);
					mod.code(_, menu.CODMEN(_));
					mod.application(_, self.endpoint(_).applicationRef(_));
					isCreated = true;
				}
				mod.title(_, menu.LIBMENU(_));
				_track(locale.format(module, "importPhase"), menu.CODMEN(_), 0);
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeSubmodule(_, mod, submen);
					return tracker && tracker.abortRequested;
				});
				// save AFTER children creation
				var res = mod.save(_, null, {
					shallowSerialize: true
				});
				var dd = [];
				mod.getAllDiagnoses(_, dd, {
					addPropName: true,
					addEntityName: true
				});
				if (_processDiagsOk(dd)) {
					diags.push({
						$severity: "success",
						$message: isCreated ? locale.format(module, "moduleCreated", mod.title(_)) : locale.format(module, "moduleModified", mod.title(_))
					});
				}
				//
				if (pp) pp.modules(_).set(_, mod);
			}
			function _makeSubmodule(_, mod, menu) {
				var block = admDb.fetchInstance(_, blockEnt, {
					jsonWhere: {
						code: menu.CODMEN(_)
					}
				});
				var isCreated = false;
				if (!block) {
					block = blockEnt.createInstance(_, admDb);
					block.code(_, menu.CODMEN(_));
					block.application(_, self.endpoint(_).applicationRef(_));
					var isCreated = true;
				}
				block.title(_, menu.LIBMENU(_));
				mod.submodules(_).set(_, block);
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, submen);
					else _makeMenuEntry(_, block, submen);
					return tracker && tracker.abortRequested;
				});
				//
				var res = block.save(_, null, {
					shallowSerialize: true
				});
				var dd = [];
				block.getAllDiagnoses(_, dd, {
					addPropName: true,
					addEntityName: true
				});
				if (_processDiagsOk(dd)) {
					diags.push({
						$severity: "success",
						$message: isCreated ? locale.format(module, "submoduleCreated", block.title(_)) : locale.format(module, "submoduleModified", block.title(_))
					});
				}
			}
			function _makeBlock(_, parentBlock, menu) {
				var block = admDb.fetchInstance(_, subBlockEnt, {
					jsonWhere: {
						code: menu.CODMEN(_)
					}
				});
				if (!block) {
					block = subBlockEnt.createInstance(_, admDb);
					block.code(_, menu.CODMEN(_));
					block.application(_, self.endpoint(_).applicationRef(_));
				}
				block.title(_, menu.LIBMENU(_));
				parentBlock.items(_).set(_, block);
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, submen);
					else _makeMenuEntry(_, block, submen);
					return tracker && tracker.abortRequested;
				});
				//
				var res = block.save(_, null, {
					shallowSerialize: true
				});
				var dd = [];
				block.getAllDiagnoses(_, dd, {
					addPropName: true,
					addEntityName: true
				});
				_processDiagsOk(dd);
			}
			function _makeMenuEntry(_, parentBlock, menu) {
				var mi = admDb.fetchInstance(_, menuItemEnt, {
					jsonWhere: {
						linkType: "$function",
						fusionFunction: menu.FONCTION(_)
					}
				});
				var isCreated = false;
				if (!mi) {
					mi = menuItemEnt.createInstance(_, admDb);
					mi.code(_, menu.CODMEN(_) || menu.FONCTION(_));
					mi.application(_, self.endpoint(_).applicationRef(_));
					mi.linkType(_, "$function");
					mi.fusionFunction(_, menu.FONCTION(_));
					var isCreated = true;
				}
				mi.title(_, menu.LIBMENU(_));
				parentBlock.items(_).set(_, mi);
				//
				var res = mi.save(_, null, {
					shallowSerialize: true
				});
				var dd = [];
				mi.getAllDiagnoses(_, dd, {
					addPropName: true,
					addEntityName: true
				});
				if (_processDiagsOk(dd)) {
					diags.push({
						$severity: "success",
						$message: isCreated ? locale.format(module, "menuCreated", mi.title(_)) : locale.format(module, "menuModified", mi.title(_))
					});
				}
			}
			var self = this;
			var admDb = self._db;
			var modEnt = admDb.getEntity(_, "menuModule");
			var blockEnt = admDb.getEntity(_, "menuBlock");
			var subBlockEnt = admDb.getEntity(_, "menuSubblock");
			var menuItemEnt = admDb.getEntity(_, "menuItem");
			var navPageEnt = admDb.getEntity(_, "navigationPage");
			var diags = tracker ? (tracker.$diagnoses = tracker.$diagnoses || []) : null;
			var locales = admDb.fetchInstances(_, admDb.getEntity(_, "localePreference"), {
				jsonWhere: {
					enabled: true
				}
			});
			//
			var db = self.endpoint(_).getOrm(_);
			var profileEnt = db.getEntity(_, "ALISTMENUS", "$details");
			//
			var page = null;
			if (self.pageName(_)) {
				page = admDb.fetchInstance(_, navPageEnt, {
					jsonWhere: {
						pageName: self.pageName(_)
					}
				});
			}
			//
			locales.some_(_, function(_, loc) {
				//
				var menus = {};
				var functions = {};
				//
				locale.setCurrent(_, loc.code(_));
				tracer && tracer("ImportMenuProfile: Importing locale: " + loc.code(_));
				_track(locale.format(module, "extractLocale", loc.code(_)), "", 0);
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocale", loc.code(_))
				});
				//
				var profile = db.fetchInstance(_, profileEnt, "0~" + self.profileCode(_));
				// make tree first pass: menus map
				var allMenus = profile.APFMENUS(_).toArray(_);
				allMenus.some_(_, function(_, men) {
					var fct = men.FONCTION(_);
					var menuCode = men.CODMEN(_);
					if (!fct) return _addDiag("warning", locale.format(module, "noFunction", men.LIBMENU(_)));
					if (fct === "MENU") {
						if (!menuCode) return _addDiag("warning", locale.format(module, "noMenuCode", men.LIBMENU(_)));
						menus[menuCode] = men;
					}
					//else entries[fct] = men;
					//
					return tracker && tracker.abortRequested;
				});
				// generate tree structure
				allMenus.some_(_, function(_, men) {
					var parent = men.MENU(_);
					if (parent && menus[parent]) (menus[parent]._children = menus[parent]._children || []).push(men);
					return tracker && tracker.abortRequested;
				});
				// import
				Object.keys(menus).some_(_, function(_, menKey) {
					var men = menus[menKey];
					// if no parent - module
					if (men.MENU(_) !== self.baseMenuName(_)) return;
					//_makeModule(_, page, men);
					//
					return tracker && tracker.abortRequested;
				});
				if (page) {
					page.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					page.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: locale.format(module, "pageModified", page.title(_))
						});
					}
				}
				//
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocaleFinished", loc.code(_))
				});
				//
				return tracker && tracker.abortRequested;
			});
		}
	},
	$services: {
		import: {
			$title: "Import",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context, instance, params) {
				var tt = context && context.tracker;
				instance.importMenuProfile(_, tt);
			}
		}
	}
}