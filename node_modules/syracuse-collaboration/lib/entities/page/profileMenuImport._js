"use strict";

var locale = require("syracuse-core/lib/locale");

var tracer = console.log;

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Import of menu profile",
	$valueTemplate: "",
	$properties: {
		profileCode: {
			$title: "Profile code",
			$isMandatory: true
		},
		importMode: {
			$title: "Import mode",
			$enum: [{
				$title: "Insert only",
				$value: "insert",
				$description: "Create new elements and associate them. Doesn't modify existing elements"
			}, {
				$title: "Insert and update menus only",
				$value: "insertUpdateMenu",
				$description: "Create new menus only. Will associate them if a block can de identified"
			}, {
				$title: "Insert and update",
				$value: "insertUpdate",
				$description: "Create new elements and associate them. Can modify existing elements"
			}, {
				$title: "Update only",
				$value: "update",
				$description: "Modify existing elements. Doesn't create new elements"
			}],
			$default: "insertUpdate"
		},
		baseMenuName: {
			$title: "Base menu name",
			$isMandatory: true,
			$default: "GENE",
			$isHidden: true
		},
		pageName: {
			$title: "Navigation page name"
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		}
	},
	$functions: {
		importMenuProfile: function(_, tracker) {
			function _processDiagsOk(allDiags) {
				var isOk = true;
				(allDiags || []).forEach(function(dd) {
					if (dd.$severity !== "success" && dd.$severity !== "ok") diags.push(dd);
					if (dd.$severity === "error") isOk = false;
				});
				return isOk;
			}

			function _track(phase, detail, progress) {
				if (!tracker) return;
				tracker.phase = phase;
				tracker.phaseDetail = detail;
				tracker.progress = progress;
			}

			function _addDiag(severity, message) {
				diags.push({
					$severity: severity,
					$message: message
				});
				return false;
			}

			function _fillAllBlocks(_, block, blockMap) {
				if (!block) return;
				block.items(_).toArray(_).forEach_(_, function(_, it) {
					// it is subblock if supports items property
					if (it.items) {
						blockMap[it.code(_)] = it;
						_fillAllBlocks(_, it, blockMap);
					}
				});
			}
			//
			function _makeModule(_, pp, menu) {
				var mCode = codePrefix + menu.CODMEN(_);
				var mod = admDb.fetchInstance(_, modEnt, {
					jsonWhere: {
						code: mCode
					}
				});
				var isCreated = false;
				if (!mod && canCreate.module) {
					mod = modEnt.createInstance(_, admDb);
					mod.code(_, mCode);
					mod.application(_, self.endpoint(_).applicationRef(_));
					isCreated = true;
				}
				if (mod && canUpdate.module && (mod.title(_) !== menu.LIBMENU(_))) {
					mod.title(_, menu.LIBMENU(_));
					mod._isModified = true;
				}
				_track(locale.format(module, "importPhase"), menu.CODMEN(_), 0);
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeSubmodule(_, mod, submen);
					return tracker && tracker.abortRequested;
				});
				// save AFTER children creation
				if (mod && (mod._isModified || isCreated)) {
					var res = mod.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					mod.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: isCreated ? locale.format(module, "moduleCreated", mod.title(_)) : locale.format(module, "moduleModified", mod.title(_))
						});
					}
				}
				//
				if (pp && mod && !pp.modules(_).get(_, mod.$uuid)) {
					pp.modules(_).set(_, mod);
					pp._isModified = true;
				}
			}

			function _makeSubmodule(_, mod, menu) {
				var sCode = codePrefix + menu.CODMEN(_);
				var block = admDb.fetchInstance(_, blockEnt, {
					jsonWhere: {
						code: sCode
					}
				});
				var isCreated = false;
				var _allBlocks = {};
				if (!block) {
					if (canCreate.submodule) {
						block = blockEnt.createInstance(_, admDb);
						block.code(_, sCode);
						block.application(_, self.endpoint(_).applicationRef(_));
						var isCreated = true;
					}
				} else _fillAllBlocks(_, block, _allBlocks);
				if (block && canUpdate.submodule && (block.title(_) !== menu.LIBMENU(_))) {
					block.title(_, menu.LIBMENU(_));
					block._isModified = true;
				}
				if (mod && block && canUpdate.module && !mod.submodules(_).get(_, block.$uuid)) {
					mod.submodules(_).set(_, block);
					mod._isModified = true;
				}
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, _allBlocks, submen);
					else _makeMenuEntry(_, block, submen);
					return tracker && tracker.abortRequested;
				});
				//
				if (block && (block._isModified || isCreated)) {
					var res = block.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					block.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: isCreated ? locale.format(module, "submoduleCreated", block.title(_)) : locale.format(module, "submoduleModified", block.title(_))
						});
					}
				}
			}

			function _makeBlock(_, parentBlock, _submoduleBlocks, menu) {
				var bCode = codePrefix + menu.CODMEN(_);
				var block = _submoduleBlocks && _submoduleBlocks[bCode];
				var isCreated = false;
				if (!block && canCreate.block) {
					block = subBlockEnt.createInstance(_, admDb);
					block.code(_, bCode);
					block.application(_, self.endpoint(_).applicationRef(_));
					//
					if (_submoduleBlocks) _submoduleBlocks[bCode] = block;
					//
					isCreated = true;
				}
				if (block && canUpdate.block && (block.title(_) !== menu.LIBMENU(_))) {
					block.title(_, menu.LIBMENU(_));
					block._isModified = true;
				}
				if (parentBlock && block && canUpdate.block && !parentBlock.items(_).get(_, block.$uuid)) {
					parentBlock.items(_).set(_, block);
					parentBlock._isModified = true;
				}
				//
				(menu._children || []).some_(_, function(_, submen) {
					if (submen.FONCTION(_) === "MENU") _makeBlock(_, block, _submoduleBlocks, submen);
					else _makeMenuEntry(_, block, submen);
					return tracker && tracker.abortRequested;
				});
				if (block._isModified || isCreated) parentBlock._isModified = true;
				//
				var dd = [];
				block.getAllDiagnoses(_, dd, {
					addPropName: true,
					addEntityName: true
				});
				_processDiagsOk(dd);
			}

			function _makeMenuEntry(_, parentBlock, menu) {
				// TODO: should change this code also but we need an update script first !!!
				var mCode = menu.CODMEN(_) || menu.FONCTION(_);
				var mi = admDb.fetchInstance(_, menuItemEnt, {
					jsonWhere: {
						linkType: "$function",
						fusionFunction: menu.FONCTION(_),
						application: self.endpoint(_).applicationRef(_).$uuid
					}
				});
				var isCreated = false;
				if (!mi && canCreate.menu) {
					if (self.importMode(_) === "update") return;
					mi = menuItemEnt.createInstance(_, admDb);
					mi.code(_, mCode);
					mi.application(_, self.endpoint(_).applicationRef(_));
					mi.linkType(_, "$function");
					mi.fusionFunction(_, menu.FONCTION(_));
					isCreated = true;
				}
				if (mi && canUpdate.menu && (mi.title(_) !== menu.LIBMENU(_))) {
					mi.title(_, menu.LIBMENU(_));
					mi._isModififed = true;
				}
				if (parentBlock && canUpdate.block && mi && !parentBlock.items(_).get(_, mi.$uuid)) {
					parentBlock.items(_).set(_, mi);
					parentBlock._isModified = true;
				}
				//
				if (mi && (mi._isModified || isCreated)) {
					var res = mi.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					mi.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: isCreated ? locale.format(module, "menuCreated", mi.title(_)) : locale.format(module, "menuModified", mi.title(_))
						});
					}
				}
			}
			// initialize
			var self = this;
			var admDb = self._db;
			var modEnt = admDb.getEntity(_, "menuModule");
			var blockEnt = admDb.getEntity(_, "menuBlock");
			var subBlockEnt = admDb.getEntity(_, "menuSubblock");
			var menuItemEnt = admDb.getEntity(_, "menuItem");
			var navPageEnt = admDb.getEntity(_, "navigationPage");
			var diags = tracker ? (tracker.$diagnoses = tracker.$diagnoses || []) : [];
			var locales = admDb.fetchInstances(_, admDb.getEntity(_, "localePreference"), {
				jsonWhere: {
					enabled: true
				}
			});
			var canCreate = {};
			var canUpdate = {};
			switch (self.importMode(_)) {
				case "insert":
				case "insertUpdate":
					canCreate.module = true;
					canCreate.submodule = true;
					canCreate.block = true;
					canCreate.menu = true;
					break;
				case "insertUpdateMenu":
					canCreate.menu = true;
					break;
			}
			switch (self.importMode(_)) {
				case "update":
				case "insertUpdate":
					canUpdate.module = true;
					canUpdate.submodule = true;
					canUpdate.block = true;
					canUpdate.menu = true;
					break;
				case "insertUpdateMenu":
					canUpdate.menu = true;
					break;
			}
			var app = self.endpoint(_).applicationRef(_);
			var codePrefix = app.application(_).toUpperCase() + "_" + app.contract(_).toUpperCase() + "_";
			// start
			var db = self.endpoint(_).getOrm(_);
			var profileEnt = db.getEntity(_, "ALISTMENUS", "$details");
			//
			var page = null;
			if (self.pageName(_)) {
				page = admDb.fetchInstance(_, navPageEnt, {
					jsonWhere: {
						pageName: self.pageName(_)
					}
				});
				if (!page) {
					page = navPageEnt.createInstance(_, admDb);
					page.pageName(_, self.pageName(_));
					page.title(_, self.pageName(_));
				}
			}
			//
			locales.some_(_, function(_, loc) {
				//
				var menus = {};
				var functions = {};
				//
				locale.setCurrent(_, loc.code(_));
				tracer && tracer("ImportMenuProfile: Importing locale: " + loc.code(_));
				_track(locale.format(module, "extractLocale", loc.code(_)), "", 0);
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocale", loc.code(_))
				});
				//
				var profile = db.fetchInstance(_, profileEnt, "0~" + self.profileCode(_));
				// make tree first pass: menus map
				var allMenus = profile.APFMENUS(_).toArray(_);
				allMenus.some_(_, function(_, men) {
					var fct = men.FONCTION(_);
					var menuCode = men.CODMEN(_);
					if (!fct) return _addDiag("warning", locale.format(module, "noFunction", men.LIBMENU(_)));
					if (fct === "MENU") {
						if (!menuCode) return _addDiag("warning", locale.format(module, "noMenuCode", men.LIBMENU(_)));
						menus[menuCode] = men;
					}
					//else entries[fct] = men;
					//
					return tracker && tracker.abortRequested;
				});
				// generate tree structure
				allMenus.some_(_, function(_, men) {
					var parent = men.MENU(_);
					if (parent && menus[parent])(menus[parent]._children = menus[parent]._children || []).push(men);
					return tracker && tracker.abortRequested;
				});
				// import
				Object.keys(menus).some_(_, function(_, menKey) {
					var men = menus[menKey];
					// if no parent - module
					if (men.MENU(_) !== self.baseMenuName(_)) return;
					_makeModule(_, page, men);
					//
					return tracker && tracker.abortRequested;
				});
				if (page && page._isModified) {
					page.save(_, null, {
						shallowSerialize: true
					});
					var dd = [];
					page.getAllDiagnoses(_, dd, {
						addPropName: true,
						addEntityName: true
					});
					if (_processDiagsOk(dd)) {
						diags.push({
							$severity: "success",
							$message: locale.format(module, "pageModified", page.title(_))
						});
					}
				}
				//
				diags.push({
					$severity: "info",
					$message: locale.format(module, "extractLocaleFinished", loc.code(_))
				});
				//
				return tracker && tracker.abortRequested;
			});
		}
	},
	$services: {
		import: {
			$title: "Import",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context, instance, params) {
				var tt = context && context.tracker;
				instance.importMenuProfile(_, tt);
			}
		}
	}
};