"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var AuthoringHelper = require("./pageHelpers").AuthoringHelper;
var locale = require("syracuse-core/lib/locale");

var tracer = console.log;
var tracer = null;

exports.entity = {
	$isPersistent: false,
	$properties: {
		content: {
			$title: "Content",
			$type: "json"
		},
		$authorUrl: {
			$title: "Authoring url",
			$isHidden: true
		},
		variantId: {
			$isHidden: true
		}
	},
	$functions: {
		$setId: function(_, context, id) {
			
		},
		$setParameters: function(_, context) {
			AuthoringHelper.prototype.$setParameters.call(this, _, context);
		},
		$save: function(_, saveRes, parameters) {
			AuthoringHelper.prototype.$save.call(this, _, saveRes, parameters);
		},
		getVariant: function(_, saveAsOption) {
			return AuthoringHelper.prototype.getVariant.call(this, _, saveAsOption);
		},
		createPageDef: function(_, pageContext) {
			// dahsboard must exist to author
			return null;
		},
		getPageEntity: function() {
			return this._db.model.getEntity("dashboardDef");
		},
		makeAuthorUrl: function(_, variant) {
			return [this._baseUrl, "dashboardAuths('" + variant.$uuid + "')/$workingCopies?representation=dashboardAuth.$edit"].join("/");
		},
		addVariant: function(_, pageDef, orgId) {
			var v = pageDef.variants(_).add(_);
			var org = pageDef.variants(_).get(_, orgId);
			// copy
			v.allApplications(_, org.allApplications(_));
			v.application(_, org.application(_));
			org.vignettes(_).toArray(_).forEach_(_, function(_, it) {
				var dv = v.vignettes(_).add(_);
				dv.allEndpoints(_, it.allEndpoints(_));
				dv.portlet(_, it.portlet(_));
				dv.endpoint(_, it.endpoint(_));
			});
			//
			return v;
		}
	},
	$actions: {
		$save: function(_, instance) {
			var r = {};
			var v = instance.getVariant(_);
			if(v && v.isFactory(_))
				r.$confirm = locale.format(module, "modifyFactory");
			if(!v)
				r.$parameters = {
					$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=dashboard&variantId={variantId}",
					$method: "POST",
					$properties: {
						parameters: {
							$type: "application/x-string"
						}
					}
				}
			return r;
		}
	},
	$services: {
		saveAs: {
			$title: "Save as",
			$method: "POST",
			$isMethod: true,
			$facets: ["$edit"],
			$parameters: {
				$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=dashboard&variantId={variantId}",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance, params) {
				instance.save(_, params);
			}/*,
			$isDefined: function(_, instance) {
				var v = instance.getVariant(_);
				return v != null;
			}*/
		}
	}
}