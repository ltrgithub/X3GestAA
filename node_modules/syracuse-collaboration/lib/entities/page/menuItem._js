"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");

// TODO: function lookup
// TODO: X3 representation lookup
// TODO: create button for references
// TODO: $edit, $details parameters
// TODO: ordering ?
// TODO: vignette option "one for all endpoints" en mode page : permettre une sÃ©lection de l'endpoint

var _computeLinkMap = {
	$representation_$query: function(_, item, baseUrl) {
		return baseUrl + "/" + item.entity(_) + "?representation=" + item.representation(_) + "." + item.facet(_);
	},
	$representation_$create: function(_, item, baseUrl) {
		return baseUrl + "/" + item.entity(_) + "/$template/$workingCopies?representation=" + item.representation(_) + "." + item.facet(_);
	},
	$representation_$details: function(_, item, baseUrl) {
		// TODO: parameter
		return baseUrl + "/" + item.entity(_) + "('" + item.keyParameter(_) + "')?representation=" + item.representation(_) + "." + item.facet(_);
	},
	$representation_$edit: function(_, item, baseUrl) {
		// TODO: parameter and test
		return baseUrl + "/" + item.entity(_) + "('" + item.keyParameter(_) + "')/$workingCopies?representation=" + item.representation(_) + "." + item.facet(_);
	},
	$representation_$cube: function(_, item, baseUrl) {
		return baseUrl + "/" + item.entity(_) + "('" + item.keyParameter(_) + "')?representation=" + item.representation(_) + "." + item.facet(_);
	},
	$function: function(_, item, baseUrl) {
		return baseUrl.replace("sdata", "trans") + "/$sessions?f=" + encodeURIComponent(item.fusionFunction(_)+"/2//M/"+(item.fusionKey(_) || ""));
	},
	$dashboard: function(_, item, baseUrl) {
		return "?representation=" + item.dashboard(_) + ".$dashboard";
	},
	$external: function(_, item, baseUrl) {
		var url = item.externalUrl(_);
		return (url.indexOf("http") == 0) ? url : "http://" + url;
	}
}

exports.entity = {
	$titleTemplate: "Menu item",
	$descriptionTemplate: "Menu item",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code"
		},
		title: {
			$title: "Title",
			$isMandatory: true,
			$linksToDetails: true,
			$isLocalized: true/*,
			
				$isUnique: true
			*/
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		linkType: {
			$title: "Link type",
			$enum: [{
				$value: "$representation",
				$title: "Representation"
			}, {
				$value: "$function",
				$title: "Function (transition)"
			}, {
				$value: "$dashboard",
				$title: "Dashboard page"
			}, {
				$value: "$external",
				$title: "External link"
			}],
			$default: "$representation",
			$isMandatory: true
		},
		icon: {
			$title: "Icon",
			$isNullable: true
		},
		applicationMenu: {
			$title: "Application Menu",
			$type: "boolean",
			$default: false,
			$isNullable: true			
		},
		entity: {
			$title: "Entity",
			//$isDisabled: true,
//			$lookup: {
//				entity: "lookupEntity",
//				field: "name",
//				parameters: "application={applicationName}&contract={contractName}&dataset={endpointName}"
//			},
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
//			$propagate: function(_, instance, val) {
//				if(val && instance.application(_)) {
//					var contract = sdataRegistry.getContract(instance.application(_).application(_), instance.application(_).contract(_));
//					if(!contract) return;
//					var model = dataModel.make(contract);
//					instance.representation(_, model.singularize(val));
//				} else
//					instance.representation(_, "");
//			}
		},
		representation: {
			$title: "Representation",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$lookup: function(_, instance) {
					
				if (instance.application(_)){
					var baseUrl, lookup = {};
					if (!instance.endpoint(_)){
						lookup.$parameters = {
							$url: "{$baseUrl}/selectEndpoints/$template/$workingCopies?representation=selectEndpoint.$edit",
							$method: "POST",
							$properties: {}	
						};
						baseUrl = "/sdata/{application}/{contract}/{dataset}";
					}else{
						baseUrl = instance.endpoint(_).getBaseUrl(_);
					}

					
					if (instance.application(_).protocol(_) === "x3"){
						lookup.$type = "application/json;vnd.sage=syracuse";
						lookup.$url = baseUrl+"/AREPIDX?representation=AREPIDX.$lookup";
						lookup.$fieldMap = { representation: "NAME", entity: "CLASSE" };
						
					}else if (instance.application(_).protocol(_) === "syracuse"){
						lookup.$type = "application/json;vnd.sage=syracuse";
						lookup.$url = baseUrl+"/lookupRepresentations?application={applicationName}&contract={contractName}&dataset={endpointName}&representation=lookupRepresentation.$lookup";
						lookup.$fieldMap = { representation: "name", entity: "entityName" };
						}
					
					return lookup;
				}else{
					return;
				}
			}
		},
		facet: {
			$title: "Facet",
			$enum: [{
				$value: "$query",
				$title: "Query"
			},{
				$value: "$cube",
				$title: "Statistics"
			},{
				$value: "$details",
				$title: "Details"
			},{
				$value: "$edit",
				$title: "Edit"
			},{
				$value: "$create",
				$title: "Create"
			}],
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$default: "$query"
		},
		fusionFunction: {
			$title: "Function",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$function");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$function");
			}
		},
		fusionKey: {
			$title: "Key",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$function");
			}
		},
		keyParameter: {
			$title: "Key",
			$isDefined: function(_, instance) {
				return ((instance.linkType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.facet(_)) >= 0));
			},
			$isMandatory: function(_, instance) {
				return ((instance.linkType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.facet(_)) >= 0));
			}
		},
		externalUrl: {
			$title: "Url",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$external");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$external");
			}
		},
		dashboard: {
			$title: "Dashboard",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$dashboard");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$dashboard");
			},
			$lookup: {
				entity: "pageData",
				field: "dashboardName"
			},
			$lookupfilter: {
				facet: "$dashboard"
			}
		},
		target: {
			$title: "Open in",
			$enum: [{
				$value: "self",
				$title: "Same window"
			},{
				$value: "blank",
				$title: "New window"
			}],
			$default: "self"
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			}
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			}
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			}
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "menuItems",
			$isDefined: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			},
			$isMandatory: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			},
			$propagate: function(_, instance, val) {
				instance.entity(_, null);
				instance.representation(_, null);
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isDefined: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			}
		},
		menus: {
			$title: "Display in vignettes",
			$type: "portlets",
			$inv: "items",
			isComputed: true,
			$lookupFilter: {
				$or: [{
				      application: "{application}"
				}, {
				      application: null
				}]
			}
		},
		categories: {
			$title: "Categories",
			$type: "menuCategories"
		},
		parameters: {
			$title: "Parameters",
			$type: "menuItemParameters",
			$isChild: true
		}
	},
	$functions: {
		getLink: function(_, endpoint) {
			var link = {
				$type: (this.linkType(_) === "$external" ? "html" : "application/json;vnd.sage=syracuse"),
				$title: this.title(_),
				$description: this.description(_),
				$url: this.getItemUrl(_, endpoint),
				$method: this.getMethod(_),
				$target: (this.target(_) || "self")
			}
			this.parameters(_).toArray(_).forEach_(_, function(_, param) {
				link.$parameters = link.$parameters || {};
				link.$parameters.$properties = link.$parameters.$properties || {};
				link.$parameters.$properties[param.name(_)] = {
					$title: param.title(_),
					$type: "application/x-string", // for now, just strings
					$value: param.value(_)
				}
			});
			return link;
		},
		getItemUrl: function(_, endpoint) {
			var mapLinkEntry = this.linkType(_)+((this.linkType(_) === "$representation")?"_"+this.facet(_):"");
			var params = this.parameters(_).toArray(_).reduce_(_, function(_, previous, param) {
				previous += "&" + encodeURIComponent(param.name(_) + "={" + param.name(_) + "}");
			}, "") || "";
			return (_computeLinkMap[mapLinkEntry] && _computeLinkMap[mapLinkEntry](_, this, (endpoint && endpoint.getBaseUrl(_)) || "{$baseUrl}")) + params;
		},
		getMethod: function(_) {
			return ((this.linkType(_) === "$representation") && (["$create", "$edit"].indexOf(this.facet(_)) >= 0)) ? "POST" : "GET";
		}
	},
	$indexes: {
		application: {
			application: "asc"
		}
	},
	$searchIndex: {
		$fields: ["code", "title", "description", "linkType", "entity", "application", "representation", "facet", "fusionFunction", "fusionKey", "dashboard", "menus", "categories"]
	}
}
