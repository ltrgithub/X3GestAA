"use strict";

var dataModel = require("syracuse-orm/lib/dataModel");
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var globals = require('streamline/lib/globals');

// TODO: ordering ?

var _targetNameMap = {
	$representation : function(_, instance) {
		//return instance.representation(_) + "." + instance.facet(_);
		return instance.representationRef(_) && (instance.representationRef(_).representation(_) + "." + instance.facet(_)) || "";
	},
	$function : function(_, instance) {
		return instance.fusionFunction(_);
	},
	$dashboard : function(_, instance) {
		return instance.dashboard(_);
	},
	$external : function(_, instance) {
		return instance.externalUrl(_);
	}
}

var _computeLinkMap = {
	$representation_$query: function(_, item, baseUrl) {
		return item.representationRef(_) && (baseUrl + "/" + item.representationRef(_).entity(_) + "?representation=" + item.representationRef(_).representation(_) + "." + item.facet(_));
	},
	$representation_$create: function(_, item, baseUrl) {
		return baseUrl + "/" + item.representationRef(_).entity(_) + "/$template/$workingCopies?representation=" + item.representationRef(_).representation(_) + ".$edit";
	},
	$representation_$details: function(_, item, baseUrl) {
		// TODO: parameter
		return baseUrl + "/" + item.representationRef(_).entity(_) + "('" + item.keyParameter(_) + "')?representation=" + item.representationRef(_).representation(_) + "." + item.facet(_);
	},
	$representation_$edit: function(_, item, baseUrl) {
		// TODO: parameter and test
		return baseUrl + "/" + item.representationRef(_).entity(_) + "('" + item.keyParameter(_) + "')/$workingCopies?representation=" + item.representationRef(_).representation(_) + "." + item.facet(_);
	},
	$representation_$cube: function(_, item, baseUrl) {
		return baseUrl + "/" + item.representationRef(_).entity(_) + "('" + item.keyParameter(_) + "')?representation=" + item.representationRef(_).representation(_) + "." + item.facet(_);
	},
	$function: function(_, item, baseUrl) {
		return baseUrl.replace("/sdata/", "/trans/") + "/$sessions?f=" + encodeURIComponent(item.fusionFunction(_)+"/2//M/"+(item.fusionKey(_) || ""));
	},
	$dashboard: function(_, item, baseUrl) {
		return "?representation=" + item.dashboard(_) + ".$dashboard";
	},
	$external: function(_, item, baseUrl) {
		var url = item.externalUrl(_);
		return (url.indexOf("http") == 0) ? url : "http://" + url;
	}
}

exports.entity = {
	$titleTemplate: "Menu item",
	$descriptionTemplate: "Menu item",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code"
		},
		title: {
			$title: "Title",
			$isMandatory: true,
			$linksToDetails: true,
			$isLocalized: true,
			$propagate: function(_, instance, val) {
				if(!instance.code(_) && val)
					instance.code(_, val);
			}
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		linkType: {
			$title: "Link type",
			$enum: [{
				$value: "$representation",
				$title: "Representation"
			}, {
				$value: "$function",
				$title: "Function (convergence)"
			}, {
				$value: "$dashboard",
				$title: "Dashboard page"
			}, {
				$value: "$external",
				$title: "External link"
			}],
			$default: "$representation",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if(val === "$function") {
					if(instance.application(_) && (instance.application(_).protocol(_) !== "x3"))
						instance.application(_, null);
				}
			}
		},
		icon: {
			$title: "Icon",
			$isNullable: true
		},
		applicationMenu: {
			$title: "Application Menu",
			$type: "boolean",
			$default: false,
			$isNullable: true			
		},
		entity: {
			$title: "Entity",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			}
		},
		representation: {
			$title: "Representation",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			}
		},
		facet: {
			$title: "Facet",
			$enum: [{
				$value: "$query",
				$title: "Query"
			},{
				$value: "$cube",
				$title: "Statistics"
			},{
				$value: "$details",
				$title: "Details"
			},{
				$value: "$edit",
				$title: "Edit"
			},{
				$value: "$create",
				$title: "Create"
			}],
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$default: "$query"
		},
		fusionFunction: {
			$title: "Function",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$function");
			},
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$function");
			},
			$lookup: function(_, instance) {
				if(!instance.application(_))
					return;
				var ep = instance.endpoint(_) || instance.application(_).defaultEndpoint(_);
				if(!ep)
					return;
				return {
					$type: "application/json",
					$url: ep.getBaseUrl(_) + "/AFCTIDX?representation=AFCTIDX.$lookup",
					$result: "NAME"
				}
			}
		},
		fusionKey: {
			$title: "Key",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$function");
			}
		},
		keyParameter: {
			$title: "Key",
			$isDefined: function(_, instance) {
				return ((instance.linkType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.facet(_)) >= 0));
			},
			$isMandatory: function(_, instance) {
				return ((instance.linkType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.facet(_)) >= 0));
			}
		},
		externalUrl: {
			$title: "Url",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$external");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$external");
			}
		},
		dashboard: {
			$title: "Dashboard",
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$dashboard");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$dashboard");
			},
			$lookup: {
				entity: "dashboardDef",
				field: "dashboardName"
			},
			$lookupfilter: {
				facet: "$dashboard"
			}
		},
		target: {
			$title: "Open in",
			$enum: [{
				$value: "self",
				$title: "Same window"
			},{
				$value: "blank",
				$title: "New window"
			}],
			$default: "self"
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			}
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			}
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			}
		},
		pageTargetName: {
			$title: "Target name",
			$compute: function(_, instance) {
				return _targetNameMap[instance.linkType(_)] && _targetNameMap[instance.linkType(_)](_, instance);
			}
		},
		referenceDataset: {
			$title: "Reference dataset",
			$isHidden: true,
			$compute: function(_, instance) {
				var ep = instance.endpoint(_);
				// get default endpoint from groups (take the first one)
				if(!ep) {
					var up = globals && globals.context && globals.context.session && globals.context.session.getUserProfile(_);
					if(up) {
						var eps = up.getDefaultX3Endpoints(_);
						ep = eps && eps[0];
					}
				}
				// get the application's default endpoint
				if(!ep)
					ep = (instance.application(_) && instance.application(_).defaultEndpoint(_));
				//
				return ep && ep.dataset(_);
			}
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "menuItems",
			$isDefined: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			},
			$isMandatory: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			},
			$propagate: function(_, instance, val) {
				var r = instance.representationRef(_);
				if(val && r && (r.application(_) && (r.application(_).$uuid !== val.$uuid)))
					instance.representationRef(_, null);
			},
			$lookup: function(_, instance) {
				var ep = adminHelper.getCollaborationEndpoint(_);
				return (ep && {
					$type: "application/json",
					$url: ep.getBaseUrl(_) + "/applications?representation=application.$lookup" + (instance.linkType(_) === "$function" ? "&where=(protocol eq \"x3\")" : "")
				}) || {};
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isDisabled: function(_, instance) {
				return !instance.application(_);
			},
			$isDefined: function(_, instance) {
				return (["$representation", "$function"].indexOf(instance.linkType(_)) >= 0);
			},
			$description: "Choose an endpoint for an endpoint specific function or representation",
			$lookupFilter: {
				applicationRef: "{application}"
			}
		},
		representationRef: {
			$title: "Representation",
			$type: "representationProxy",
			$inlineStore: true,
			isChild: true,
			$lookup: {
				parameters: "dataset={referenceDataset}"
			},
			$propagate: function(_, instance, val) {
				if(val) {
					instance.representation(_, val.representation(_));
					instance.entity(_, val.entity(_));
				} else {
					instance.representation(_, "");
					instance.entity(_, "");
				}
			},
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.linkType(_) === "$representation");
			},
		},
		menus: {
			$title: "Display in vignettes",
			$type: "portlets",
			$inv: "items",
			isComputed: true,
			$nullOnDelete: true,
			$lookupFilter: {
				$or: [{
				      application: "{application}"
				}, {
				      application: null
				}]
			}
		},
		categories: {
			$title: "Categories",
			$type: "menuCategories"
		},
		parameters: {
			$title: "Parameters",
			$type: "menuItemParameters",
			$isChild: true
		}
	},
	$functions: {
		getLink: function(_, endpoint) {
			var link = {
				$type: (this.linkType(_) === "$external" ? "html" : "application/json;vnd.sage=syracuse"),
				$title: this.title(_),
				$description: this.description(_),
				$url: this.getItemUrl(_, endpoint),
				$method: this.getMethod(_),
				$target: (this.target(_) || "self")
			}
			var parts = [];
			this.parameters(_).toArray(_).forEach_(_, function(_, param) {
				if(param.prompt(_)) {
					parts.push(param.name(_) + "={" + param.name(_) + "}");
					link.$parameters = link.$parameters || {};
					link.$parameters.$properties = link.$parameters.$properties || {};
					link.$parameters.$properties[param.name(_)] = {
						$title: param.title(_),
						$type: "application/x-string", // for now, just strings
						$value: param.value(_)
					}
					if(param.value(_))
						link.$parameters[param.name(_)] = param.value(_);
				} else
					parts.push(param.name(_) + "=" + encodeURIComponent(param.value(_)));
			});
			if(parts.length)
				link.$url += ((link.$url.indexOf("?") >= 0) ? "&" : "?") + parts.join("&");
			return link;
		},
		getItemParams: function(_) {
			var parts = [];
			this.parameters(_).toArray(_).forEach_(_, function(_, param) {
				if(!param.prompt(_)) parts.push(param.name(_) + "=" + encodeURIComponent(param.value(_)));
			});
			return parts.join("&");
		},
		getItemUrl: function(_, endpoint) {
			var mapLinkEntry = this.linkType(_)+((this.linkType(_) === "$representation")?"_"+this.facet(_):"");
			var params = this.parameters(_).toArray(_).reduce_(_, function(_, previous, param) {
				previous += "&" + encodeURIComponent(param.name(_) + "={" + param.name(_) + "}");
			}, "") || "";
			return (_computeLinkMap[mapLinkEntry] && _computeLinkMap[mapLinkEntry](_, this, (endpoint && endpoint.getBaseUrl(_)) || "{$baseUrl}")) + params;
		},
		getMethod: function(_) {
			return ((this.linkType(_) === "$representation") && (["$create", "$edit"].indexOf(this.facet(_)) >= 0)) ? "POST" : "GET";
		}
	},
	$indexes: {
		application: {
			application: "asc"
		}
	},
	$searchIndex: {
		$fields: ["code", "title", "description", "linkType", "application", "representationRef", "facet", "fusionFunction", "fusionKey", "dashboard", "menus", "categories"]
	}
}
