"use strict";

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");

function AuthoringHelper() {
	
}

exports.AuthoringHelper = helpers.defineClass(AuthoringHelper, null, {
	$setId: function(_, context, id) {
		
	},
	$setParameters: function(_, context) {
		this._initialize(_, context);
		//
		this._pageId = context.instanceId;
		this._pageContext = context.parameters && context.parameters.pageContext;
		this._baseUrl = context.baseUrl;
		this.variantId(_, this._pageId);
	},
	$save: function(_, saveRes, parameters) {
		function _setRel(_, variant, relName) {
			var r = variant[relName](_);
			r.reset(_);
			(parameters[relName] || []).forEach_(_, function(_, item) {
				r.setUuid(_, item.$uuid);
			});
		}
		var pageData;
		var pageDef;
		var variant;
		//
		if(this._pageId) {
			variant = this.getVariant(_, parameters && parameters.saveAsOption);
			pageDef = variant && variant._parent;
		} else {
			if(this._pageContext) {
				pageDef = this.createPageDef(_, this._pageContext);
				if(!pageDef) return;
				// create a variant
				variant = pageDef.variants(_).add(_);
			} else
				return;
		}
		// apply params
		if(parameters) {
			variant.code(_, parameters.variantCode);
			variant.title(_, parameters.variantTitle);
			variant.description(_, parameters.variantDescription);
			variant.isFactory(_, parameters.isFactory);
			//
			if(!variant.isFactory(_)) {
				_setRel(_, variant, "roles");
				_setRel(_, variant, "users");
				_setRel(_, variant, "endpoints");
			} else {
				variant.roles(_).reset(_);
				variant.users(_).reset(_);
				variant.endpoints(_).reset(_);
			}
		}
		//
		pageData = variant.pageData(_);
		if(!pageData) {
			// create
			pageData = variant.createChild(_, "pageData");
			variant.pageData(_, pageData);
		}
		pageData.content(_, JSON.stringify(this.content(_)));
		pageDef.addRelatedInstance(pageData);
		//
		pageDef.save(_);
		this.$diagnoses = this.$diagnoses || [];
		pageDef.getAllDiagnoses(_, this.$diagnoses, {
			addEntityName: true,
			addPropName: true
		});
		//
		this.$authorUrl(_, this.makeAuthorUrl(_, variant));
		this._pageId = variant.$uuid;
		//
		this.variantId(_, this._pageId);
		// no need of save parameters any more
		saveRes.$parameters = null;
		if(variant && variant.isFactory(_))
			saveRes.$confirm = locale.format(module, "modifyFactory");
		else
			saveRes.$confirm = null;
	},
	getVariant: function(_, saveAsOption) {
		var pageDef;
		var variant;
		var pageEntity;
		//
		if(this._pageId) {
			pageEntity = this.getPageEntity();
			var where = {};
			where["variants"] = this._pageId;
			pageDef = this._db.fetchInstance(_, pageEntity, {
				jsonWhere: where
			});
			if(!pageDef) return null;
			//
			switch(saveAsOption) {
			case "personal_copy":
			case "shared_copy":
				return this.addVariant(_, pageDef, this._pageId);
			default:
				//
				return pageDef.variants(_).get(_, this._pageId);
			}
		}
		return null;
	}
});

function PageHelper() {
	
}

exports.PageHelper = helpers.defineClass(PageHelper, null, {
	hasFactoryVariant: function(_) {
		return this.variants(_).toArray(_).some_(_, function(_, v) {
			return v.isFactory(_);
		});
	},
	selectVariant: function(_, userProfile, application) {
		var variants = this.selectAllVariants(_, userProfile, application);
		return variants && variants[0];
	}
});
