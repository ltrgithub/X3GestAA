"use strict";

var fs = require('fs');
var fsp = require('path');
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel")
var flows = require("streamline/lib/util/flows");
var helpers = require("syracuse-core/lib/helpers");
var collabUtil = require("syracuse-collaboration/lib/util");
var sys = require("util");

function _getPath(presentation) {
	var path = presentation.split(",");
	path = path[0].split(".");
	if (path[0] === "syracuse" && path[1] === "content") {
		var type = path.pop();
		path = path.slice(2);
		path = "syracuse-main/html/" + path.join("/") + "-" + type + ".json";
	} else {
		path[2] = "uiviews"; //replace dataset.
		path.splice(1, 0, "lib"); // insert lib
		//		path = path.join("/") + "-" + type + ".json";
		path = path.slice(0, 4).join("/") + "/" + path.slice(4).join("-") + ".json";
	}
	return fsp.join(__dirname, "../../..") + "/" + path;
}

function _getUrlPrototype(baseUrl, mediaType) {
	//Il faudra trouver un moyen d'associer un media type avec une url de serveur.
	//Pour l'instant, pointe sur le serveur syracuse
	var url = baseUrl.split("/");
	url = url[0] + "//" + url[2] + "/" + url[3] + "/";
	mediaType = mediaType.split(".");
	url += mediaType.slice(0, 3).join("/");
	url += "/$prototypes('";
	url += mediaType.slice(3, 5).join(".");
	url += "')";

	return url;
}

function _getCurrentConfig(_) {
	var config = require("syracuse-main/lib/nodeconfig").config;
	var model = collabUtil.getCollaborationModel();
	var db = collabUtil.getCollaborationOrm(_);
	var currentConfig;
	if (config && config.currentConfigVersion) {
		var configs = db.fetchInstances(_, model.getEntity("configuration"), {
			jsonWhere: {
				version: config.currentConfigVersion
			}
		});
		if (configs && configs.length) currentConfig = configs[0];
	}
	if (!currentConfig) {
		// get the biggest config enabled
		var configs = db.fetchInstances(_, model.getEntity("configuration"), {
			jsonWhere: {
				enable: true
			},
			orderBy: [{
				binding: "version",
				descending: true
			}],
			count: 1
		});
		if (configs && configs.length) currentConfig = configs[0];
	}
	//
	return currentConfig;
}

function _getAllConfigFilter(_, context) {
	var crtConfig = _getCurrentConfig(_);
	//
	var parents = crtConfig && crtConfig.allParents(_).toUuidArray(_);
	// add crtConfig
	parents && parents.push(crtConfig.$uuid);
	//
	return (parents && {
		$in: parents
	}) || null;
}

function _scanDir(_, path, result) {
	try {
		var files = fs.readdir(path, _);
		files.forEach_(_, function(_, file) {
			if (file.indexOf(".json") < 0) return;
			var fullPath = fsp.join(path, file);
			var stat = fs.stat(fullPath, _);
			if (stat.isFile()) result.push({
				file: file,
				path: path
			});
			else if (stat.isDirectory()) _scanDir(_, fullPath, result);
		});
	} catch (ex) {
		console.log("file read error: " + path);
		throw (ex);
	}
}

function _getPageData(_, configuration, item) {
	var params = {
		jsonWhere: {}
	};
//	console.log("item: " + sys.inspect(item));
	params.jsonWhere["application"] = item.application(_);
	params.jsonWhere["contract"] = item.contract(_);
	params.jsonWhere["representation"] = item.representation(_);
	params.jsonWhere["facet"] = (item.facet(_) ? item.facet(_) : null);
	params.jsonWhere["variant"] = item.variant(_);
	params.jsonWhere["configuration"] = configuration.$uuid;
	params.jsonWhere["roles"] = item.roles(_).toUuidArray(_);
	//	console.log("params: "+sys.inspect(params));
	//
	return item._db.fetchInstance(_, item._db.model.getEntity("pageData"), params);
}

exports.entity = {
	$isPersistent: false,
	$properties: {
		rootPath: {
			$title: "Server file path"
		}
	},
	$relations: {
		configuration: {
			$title: "Configuration",
			$type: "configuration"
		},
		pageLoaderItems: {
			$type: "pageFileLoaderItems",
			$title: "Items",
			$inv: "pageLoader",
			isChild: true
		}
	},
	$init: function(_, instance) {
		var config = require("syracuse-main/lib/nodeconfig").config; // do not put this require in header as would be circular reference
		instance.rootPath(_, helpers.serverUIPath);
		//
		instance.configuration(_, _getCurrentConfig(_));
	},
	$functions: {
		$setId: function(_, context, id) {
//			this.$uuid = this.$key = helpers.uuid.generate();
//			this.$created = true;
			//			this.$diagnoses = [];
			// id : ('contract.application.representation.facet.variant,configVersion')
			var path = id.split(",");
			var configVer = path[1];
			path = path[0].split(".");
			//
			//			this.contract(_, path[0]);
			//			this.application(_, path[1]);
			//			console.log("context: "+require("util").inspect(context.parameters,null,4));
			this.contract(_, context.parameters.contract);
			this.application(_, context.parameters.application);
			var representation = path[3];
			var facet = path[4];
			var variant = path[5];
			// initialize at the end only as it will need contract and application
			this._initialize(_, context);
			// configurations
			var config;
			if (configVer) config = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
				jsonWhere: {
					version: configVer
				}
			});
			//
			config && this.configuration(_, config);
		},
		$setParameters: function(_, context) {
			if (!this.$uuid) {
				this.$uuid = this.$key = helpers.uuid.generate();
				this.$created = true;
			}
			// load items
			this.loadItems(_);
		},
		$save: function(_) {
			var self = this;
			var loaderItemsColl = self.pageLoaderItems(_).toArray(_);
			loaderItemsColl.forEach_(_, function(_, item) {
				if (item.selected(_)) {
					// check
					if (!item.contract(_) || !item.application(_)) {
						self.$addError("Required properties for item");
						return;
					}
					// save file to db: get the corresponding page
					// TODO : management of several roles
					//					var pageData = _getPageData(_, instance.configuration(_), item);
					var pageData = item.pageData(_);
					if (!pageData) {
						pageData = item._db.model.getEntity("pageData").factory.createInstance(_, null, item._db);
//						pageData.$uuid = helpers.uuid.generate();
//						pageData._initialize(_);
//						pageData._snapshotEnabled = true;
//						pageData._sysSnapshotEnabled = true;
						pageData.configuration(_, self.configuration(_));
						pageData.application(_, item.application(_));
						pageData.contract(_, item.contract(_));
						pageData.representation(_, item.representation(_));
						pageData.facet(_, item.facet(_));
						pageData.variant(_, item.variant(_));
					}
					item.roles(_).toArray(_).forEach_(_, function(_, role) {
						pageData.roles(_).set(_, role);
					});
					//
					pageData.content(_, item.content(_));
					//
					pageData.save(_);
				}
			});

		},
		loadItems: function(_) {
			var instance = this;
			var path = fsp.join(__dirname, "../../../../", instance.rootPath(_));
			//			console.log("path: "+path);
			// dir scan
			var result = [];
			_scanDir(_, path, result);
			//
			result.forEach_(_, function(_, file) {
				//
				var data = fs.readFile(fsp.join(file.path, file.file), "utf8", _);
				//				console.log("data: "+data);
				var pages = JSON.parse(data);
				pages.pages.forEach_(_, function(_, page) {
					var item = instance.createChild(_, "pageLoaderItems");
					flows.eachKey(_, page, function(_, key, value) {
						if (item._meta.$relations[key]) {
							if (item._meta.$relations[key].isPlural) {
								item[key](_).setArray(_, value);
							}
						} else if (item._meta.$properties[key]) {
							item[key](_, value);
						}
					});
					//
					// TODO : management of several roles
					item.pageData(_, _getPageData(_, instance.configuration(_), item));
					//
					instance.pageLoaderItems(_).set(_, item);
				});
			});
		}
	},
	$services: {
		refresh: {
			$method: "PUT",
			$isMethod: true,
			$title: "Load items",
			$execute: function(_, context, instance) {
				instance.loadItems(_);
			}
		}
	}
};