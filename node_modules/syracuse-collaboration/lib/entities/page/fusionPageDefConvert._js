"use strict";

var locale = require("syracuse-core/lib/locale");

exports.entity = {
	$isPersistent: false,
	$titleTemplate: "Convergence pages converter",
	$properties: {

	},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Reference endpoint",
			$description: "Reference endpoint for convergence prototypes",
			$isMandatory: true
		}
	},
	$services: {
		convert: {
			$title: "Convert to V1",
			$description: "Convert to generator version 1",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$execute: function(_, context, instance, params) {
				function _track(phase, detail, progress) {
					if (!context.tracker) return;
					context.tracker.phase = phase;
					context.tracker.phaseDetail = detail;
					context.tracker.progress = progress;
				}
				var db = instance._db;
				if (!instance.endpoint(_)) return instance.$addError(locale.format(module, "endpointRequired"));
				var c = db.createCursor(_, db.getEntity(_, "pageDef"), {
					jsonWhere: {
						facet: "$fusion"
					}
				});
				var p;
				var t = context && context.tracker;
				var diags = t ? (t.$diagnoses = t.$diagnoses || []) : (instance.$diagnoses = instance.$diagnoses || []);
				var aborted = false;
				while (!aborted && (p = c.next(_))) {
					_track(locale.format(module, "convertPhase"), p.description(_), 0);
					aborted = t && t.abortRequested;
					p.variants(_).toArray(_).forEach_(_, function(_, v) {
						if (v.pageData(_)) {
							var ds = [];
							v.pageData(_).convertFusionArticle(_, p, instance.endpoint(_), 1, {
								$diagnoses: ds,
								withSave: true
							});
							var r = p.representation(_);
							var vdesc = v.description(_);
							ds.forEach(function(d) {
								if (d.severity === "success") diags.push({
									$severity: "success",
									$message: locale.format(module, "pageSaved", r, vdesc)
								});
								else diags.push(d);
							});
						}
					});
				}
			}
		}
	}
}