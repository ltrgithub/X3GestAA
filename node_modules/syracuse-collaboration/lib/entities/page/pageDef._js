"use strict"

var userScore = 10000;
var roleScore = 1000;
var unaffUserScore = 100;
var unaffRoleScore = 100;
var endpointScore = 10;
var unaffEPScore = 1;

var tracer = console.log;
//var tracer = null;

exports.entity = {
	$titleTemplate: "Page",
	$descriptionTemplate: "Page content",
	$valueTemplate: "{title}",
	$properties: {
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		representation: {
			$title: "Representation",
			$isMandatory: true
		},
		facet: {
			$title: "Facet",
			$enum: ["$query", "$details", "$edit", "$lookup", "$select"],
			$enumCaptions: ["Query", "Details", "Edit", "Lookup", "Select"],
			$isMandatory: true
		},
		authorName: {
			$title: "Author",
			$isMandatory: true,
			$default: "Sage"
		},
		authorType: {
			$title: "Author Type",
			$type: "string",
			$enum: ["Product", "Vertical", "Specific"],
			$enumCaptions: ["Product", "Vertical", "Specific"],
			$isMandatory: true,
			$default: "Product"
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$isMandatory: true
		},
		variants: {
			$type: "pageVariants",
			$title: "Variants",
			$isChild: true
		}
	},
	$functions: {
		selectVariant: function(_, userProfile, roleId) {
			if(!userProfile) return null;
			//
			var self = this;
			//
			var userId = userProfile.user(_).$uuid;
//			var roleId = userProfile.selectedRole(_) && userProfile.selectedRole(_).$uuid;
			var epId = userProfile.selectedEndpoint(_) && userProfile.selectedEndpoint(_).$uuid;
			//
			var variants = self.variants(_).toArray(_);
			var scores = [];
			variants.forEach_(_, function(_, v) {
				var score = 0;
				//
				if(v.users(_).isEmpty())
					score += unaffUserScore;
				else
					if(v.users(_).get(_, userId))
						score += userScore;
				//
				if(v.roles(_).isEmpty())
					score += unaffRoleScore;
				else
					if(roleId && v.roles(_).get(_, roleId)) 
						score += roleScore;
				//
				if(v.endpoints(_).isEmpty())
					score += unaffEPScore;
				else
					if(epId && v.endpoints(_).get(_, epId)) 
						score += endpointScore;
				//
				scores.push({
					$uuid: v.$uuid,
					score: score
				});
			});
			//
			var best = scores.sort(function(a,b) {
				return b.score - a.score;
			})[0];
			tracer && tracer("scores: "+require("util").inspect(scores, null, 4));
			return best && self.variants(_).get(_, best.$uuid);
		}
	},
	$indexes: {
		params: {
			representation: "asc",
			facet: "asc"
		}
	},
	$defaultOrder: [["title", true]]
}