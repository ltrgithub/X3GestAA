"use strict";

var PageHelper = require("./pageHelpers").PageHelper;

var nativeVariantScore = 100000;
var userScore = 10000;
var roleScore = 1000;
var unaffUserScore = 100;
var unaffRoleScore = 100;
var endpointScore = 10;
var unaffEPScore = 1;

var tracer = null;
//var tracer = console.log;

exports.entity = {
	$titleTemplate: "Page",
	$descriptionTemplate: "Page content",
	$valueTemplate: "{title}",
	$helpPage: "Administration-reference-pages",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			$isUnique: true
		},
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		representation: {
			$title: "Representation",
			$isMandatory: true
		},
		facet: {
			$title: "Facet",
			$enum: [{
				$value: "$query",
				$title: "Query"
			}, {
				$value: "$details",
				$title: "Details"
			}, {
				$value: "$edit",
				$title: "Edit"
			}, {
				$value: "$lookup",
				$title: "Lookup"
			}, {
				$value: "$select",
				$title: "Select"
			}, {
				$value: "$fusion",
				$title: "Convergence"
			}],
			$isMandatory: true
		},
		device: {
			$title: "Device",
			$enum: [{
				$value: "desktop",
				$title: "Desktop"
			}, {
				$value: "phone",
				$title: "Phone"
			}],
			$default: "desktop",
			$isReadOnly: true
		},
		authorName: {
			$title: "Author",
			$isMandatory: true,
			$default: "Sage"
		},
		authorType: {
			$title: "Author Type",
			$type: "string",
			$enum: [{
				$value: "Product",
				$title: "Product"
			}, {
				$value: "Vertical",
				$title: "Vertical"
			}, {
				$value: "Specific",
				$title: "Specific"
			}, ],
			$isMandatory: true,
			$default: "Product"
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$isMandatory: true
		},
		variants: {
			$type: "pageVariants",
			$title: "Variants",
			$isChild: true
		}
	},
	$functions: {
		selectAllVariants: function(_, preferedVariantId, options) {
			if (!options) return null;
			//
			var self = this;
			//
			var userId = options.userId;
			var roleId = options.roleId;
			var epId = options.endpointId;
			//
			var variants = self.variants(_).toArray(_);
			// model representation's variants if not already model
			if (options.modelRepresentation && ((options.modelRepresentation + "$MODEL") !== self.representation(_))) {
				var modelPage = this._db.fetchInstance(_, this._db.getEntity(_, "pageDef"), {
					jsonWhere: {
						representation: options.modelRepresentation + "$MODEL",
						facet: self.facet(_),
						application: self.application(_).$uuid
					}
				});
				modelPage && modelPage.variants(_).toArray(_).forEach_(_, function(_, v) {
					v._isModel = true;
					variants.push(v);
				});
			}
			//
			var scores = [];
			variants.forEach_(_, function(_, v) {
				var score = 0;
				//
				if (v.users(_).isEmpty()) score += unaffUserScore;
				else {
					if (v.users(_).get(_, userId)) score += userScore;
					else return;
				}
				//
				if (v.roles(_).isEmpty()) score += unaffRoleScore;
				else {
					if (roleId && v.roles(_).get(_, roleId)) score += roleScore;
					else return;
				}
				//
				if (v.endpoints(_).isEmpty()) score += unaffEPScore;
				else {
					if (epId && v.endpoints(_).get(_, epId)) score += endpointScore;
					else return;
				}
				//
				if (!v._isModel) score += nativeVariantScore;
				//
				scores.push({
					$uuid: v.$uuid,
					score: score,
					variant: v
				});
			});
			//
			return scores.sort(function(a, b) {
				if (a.$uuid === preferedVariantId) return -1;
				if (b.$uuid === preferedVariantId) return 1;
				return b.score - a.score;
			}).map_(_, function(_, e) {
				return e.variant;
			});
		},
		selectVariant: function(_, userProfile, application) {
			return PageHelper.prototype.selectVariant.call(this, _, userProfile, application);
		},
		hasFactoryVariant: function(_) {
			return PageHelper.prototype.hasFactoryVariant.call(this, _);
		}
	},
	$indexes: {
		params: {
			representation: "asc",
			facet: "asc",
			device: "asc"
		}
	},
	$searchIndex: {
		$fields: ["title", "description", "representation", "facet", "application"]
	},
	$defaultOrder: [
		["title", true]
	],
	$exportProfile: {
		$key: ["code"],
		$properties: ["code", "title", "description", "representation", "facet", "device"],
		$relations: {
			application: {
				$key: ["application", "contract"]
			},
			variants: {
				$key: "code",
				$properties: ["code", "title", "description", "isFactory"],
				$relations: {
					roles: {
						$key: "code"
					},
					/*					users: {
						$key: "login"
					},
					endpoints: {
						$key: "dataset"
					},*/
					pageData: {
						$key: "code",
						$properties: ["content"]
					}
				}
			}
		}
	}
};