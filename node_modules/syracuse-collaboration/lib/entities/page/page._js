"use strict";

var fs = require('fs');
var fsp = require('path');
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel")
var helpers = require("syracuse-core/lib/helpers");
var pluralize = helpers.string.pluralize;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");

function _getPath(presentation) {
	var path = presentation.split(",");
	path = path[0].split(".");
	// temp page hack
	if (path[4] === "$dashboard") {
		path = "syracuse-main/html/default/" + path[3] + "-" + path.pop() + ".json";
	} else
		if (path[0] === "syracuse" && path[1] === "content") {
			var type = path.pop();
			path = path.slice(2);
			path = "syracuse-main/html/" + path.join("/") + "-" + type + ".json";
		} else {
			path[2] = "uiviews"; //replace dataset.
			path.splice(1, 0, "lib"); // insert lib
			//		path = path.join("/") + "-" + type + ".json";
			path = path.slice(0, 4).join("/") + "/" + path.slice(4).join("-") + ".json";
		}
		var x = fsp.join(__dirname, "../../../..") + "/" + path;
		//console.log(x);
	return x;
}

function _getUrlPrototype(baseUrl, mediaType, x3fusion) {
	//Il faudra trouver un moyen d'associer un media type avec une url de serveur.
	//Pour l'instant, pointe sur le serveur syracuse
	var url = baseUrl.split("/");
	url = url[0] + "//" + url[2] + "/" + (x3fusion?"trans":url[3]) + "/";
//	url = url[0] + "//" + url[2] + "/" + (x3fusion?"x3":url[3]) + "/";
	mediaType = mediaType.split(".");
	url += mediaType.slice(0, 3).join("/");
	url += "/$prototypes('";
	url += mediaType.slice(3, 5).join(".").split(',')[0];
	url += "')";

	return url;
}

function _getCurrentConfig(_, context) {
	// TODO : optimize - use a cache for currentConfig
	var config = require("syracuse-main/lib/nodeconfig").config; // do not put this require in header as would be circular reference
	var currentConfig;
	if (config && config.currentConfigVersion) var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			version: config.currentConfigVersion
		}
	});
	if (!currentConfig)
	// get the biggest config enabled
	var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			enable: true
		},
		orderBy: [{
			binding: "version",
			descending: true
		}],
		count: 1
	});
	//
	return currentConfig;
}

function _getAllConfigFilter(_, context) {
	var crtConfig = _getCurrentConfig(_, context);
	//
	var parents = crtConfig && crtConfig.allParents(_).toUuidArray(_);
	// add crtConfig
	parents && parents.push(crtConfig.$uuid);
	// add "none"
	parents && parents.push(null);
	//
	return (parents && {
		$in: parents
	}) || null;
}

function _getDashboardPrototype(_, pageData, profile) {
	function addPortletEndpoint(_, portlet, endpoint, isMultiEP, pagePortlet) {
		var p = portlet.getContent(_, endpoint);
		if(p) {
			if(!pagePortlet.allEndpoints(_) && !(profile && profile.selectedEndpoint(_))) {
				p.$title = p.$title + " - " + endpoint.description(_);
				p.$description = p.$description + " - " + endpoint.description(_);
			}
		}
		var portletId = portlet.code(_) || portlet.$uuid;
//		$[portlet.code(_) || portlet.$uuid] = portlet.getContent(_, endpoint);
		$[pagePortlet.allEndpoints(_) ? portletId : portletId + "-" + endpoint.dataset(_)] = p;
	}
	var endpoint = profile && profile.selectedEndpoint(_);
	var portlets = pageData.portlets(_).toArray(_);
	var proto = {
		$title: pageData.title(_),
		$description: pageData.description(_),
		$:{}
	};
	var $ = proto.$;
	portlets.filter_(_, function(_, pagePortlet) {
		var portlet = pagePortlet.portlet(_);
		if(!portlet) return false;
		var crtEndpoint = (pagePortlet.allEndpoints(_) ? null : pagePortlet.endpoint(_));
		//
		if(endpoint) {
			if(pagePortlet.allEndpoints(_) && portlet.application(_) && (endpoint.applicationRef(_).$uuid !== portlet.application(_).$uuid)) 
				return false;
			if(crtEndpoint && (endpoint.$uuid !== crtEndpoint.$uuid)) 
				return false;
		} else {
			// all endpoints portlet is displayed only if selected endpoint
			if(pagePortlet.allEndpoints(_)) return false;
			//
			if(crtEndpoint && profile && !profile.endpoints(_).get(_, crtEndpoint.$uuid))
				return;
		}
		return true;
	}).forEach_(_, function(_, pagePortlet) {
		var portlet = pagePortlet.portlet(_);
		var crtEndpoint = (pagePortlet.allEndpoints(_) ? null : pagePortlet.endpoint(_));
		//
		if(pagePortlet.allEndpoints(_)) {
/*			var allEndpoints = endpoint ? [endpoint] : ((profile && profile.endpoints(_).toArray(_).filter_(_, function(_, ep) {
				var appFilterOk = (portlet.application(_) && (portlet.application(_).$uuid === ep.applicationRef(_).$uuid)) || !portlet.application(_);
				var endpointFilterOk = (portlet.endpoint(_) && (portlet.endpoint(_).$uuid === ep.$uuid)) || !portlet.endpoint(_);
				return appFilterOk && endpointFilterOk;
			})) || []);
			if(pagePortlet.generateStyle(_) === "vignette")
				allEndpoints.forEach_(_, function(_, ep) {
					addPortletEndpoint(_, portlet, [ep], true);
				});
			else
				addPortletEndpoint(_, portlet, allEndpoints, false);*/
			endpoint && addPortletEndpoint(_, portlet, endpoint, false, pagePortlet);
		} else
			crtEndpoint && addPortletEndpoint(_, portlet, crtEndpoint, true, pagePortlet);
	});
	//
	return proto;
}

exports.entity = {
	$isPersistent: false,
	$events: {},
	$functions: {
		$setId: function(_, context, id) {
			function getPage(_, selectedApp) {
				var instArray = context.db.fetchInstances(_, entity, {
					jsonWhere: jsonFilter
				});
				// sort array with a value function to extract most fitted
				instArray.sort_(_, function(_, a, b) {
					function compute_score(_, inst) {
						var score = 0;
						score = score + (selectedApp && inst.application(_) && (inst.application.$uuid === selectedApp.$uuid)) ? 10000 : 0;
						score = score + (inst.facet(_) && (inst.facet(_) === path[4])) ? 1000 : 0;
						var intAuthorType = inst.authorType(_) ? entity.$properties.authorType["$enum"].indexOf(inst.authorType(_)) : 0;
						score = score + (intAuthorType * 100);
						//
						return score;
					}
					var s_a = compute_score(_, a);
					var s_b = compute_score(_, b);
					if (s_a == s_b) {
						var v_a = (a.configuration(_) && a.configuration(_).version(_)) || "";
						var v_b = (b.configuration(_) && b.configuration(_).version(_)) || "";
						(v_b > v_a) ? s_b++ : s_a++;
					}
					return (s_b - s_a);
				});
				if (instArray && instArray.length) pageData = instArray[0];
			}
			// find page; id respects variables defined in main.js
			var jsonFilter = {};
			var path = id.split(",");
			var x3fusion = (path[1] === "trans");
			var role = context.getSelectedRoleId(_);
			path = path[0].split(".");
			var facet = path[4];
			// find the application
			var page = null;
			var pageData = null;
			var app = adminHelper.getApplication(_, path[0], path[1]);
			if(app) {
				//
				jsonFilter["application"] = {
					$in: [app.$uuid, null]
				}
				if(facet === "$dashboard")
					jsonFilter["dashboardName"] = path[3];
				else
					jsonFilter["representation"] = path[3];
				// if no facet requested, use "$details"
				jsonFilter["facet"] = (path[4] || "$details");
				// if no variant requested, fetch pages for any variant
				// if there is a variant, strict search
				if(path[5]) jsonFilter["variant"] = path[5];
				// configurations
				jsonFilter["configuration"] = _getAllConfigFilter(_, context);
				// same model
				var entity = context.model.getEntity("pageData");
				if (!entity) throw context.notFound("pageData entity not found");
//				entity.getMeta({}, true);
				// load all pageData instances, then choose most appropriate
				// page search sequence :
				// 		- page affected to my user
				//		- page affected to my selected role
				//		- page unaffected to any role or user
				var user = context.request.session.getData("userID");
				if (!pageData && user) {
					jsonFilter.users = user;
					getPage(_);
				}
				//
				if (!pageData && role) {
					delete jsonFilter.users;
					jsonFilter.roles = role;
					getPage(_);
				}
				//
				if (!pageData) {
					jsonFilter.roles = null;
					jsonFilter.users = null;
					getPage(_);
				}
				if (pageData) page = pageData.content(_) || {};
			}
			//
			var fromFile = false;
			if (!pageData) 
				try {
					var data = fs.readFile(_getPath(id), "utf8", _);
					page = JSON.parse(data);
					fromFile = true;
				} catch (e) {
					page = {};
				}

			page.$url = page.$url || id;
			// pageContext is application.contract.representation.facet[.variant]
			var pageContext = path.slice(0);
			// remove dataset segment
			pageContext.splice(2, 1);
			page.$authorUrl = context.baseUrl + "/pageDatas" +
					((pageData && pageData.$uuid) ? "('" + (pageData && pageData.$uuid) + "')" : "/$template") + 
					"/$workingCopies?representation=pageData.$edit" +
					((pageData && pageData.$uuid) ? "" : "&pageContext="+pageContext.join("."));
			//
			if((facet === "$dashboard") && !fromFile) {
				if(pageData) {
					page.$prototype = _getDashboardPrototype(_, pageData, context.getUserProfile(_));
					if(Object.keys(page.$prototype.$).length === 0) {
						page.$prototype.$ = {
								thisPage: {
									$title: "Dashboards",
									$type: "application/x-portlet",
					                $format: "$menu",
									$links: {
										$create: {
											$title: locale.format(module, "editDashboardLabel", path[3]),
											$url: page.$authorUrl,
											$method: "POST"
										},
										legacy: {
											$title: "Samples/SOS dashboard",
											$url: "?representation=samples.$dashboard"
										}
									},
									$:{}
								}
							}
					}
				} else {
					// make a vignette allowing the creation of this dashboard
					page.$prototype = {
						$title: locale.format(module, "dashboardNotFoundTitle", path[3]), 
						$: {
							thisPage: {
								$title: "Dashboards",
								$type: "application/x-portlet",
				                $format: "$menu",
								$links: {
									$create: {
										$title: locale.format(module, "createDashboardLabel", path[3]),
										$url: page.$authorUrl,
										$method: "POST"
									},
									legacy: {
										$title: "Samples/SOS dashboard",
										$url: "?representation=samples.$dashboard"
									}
								},
								$:{}
							}
						}
					}
				}
				// TODO: for now we remove the article from the response as new vignettes do not apear. Remove next line after proper 
				// management of dashboards authoring client side.
				page.$article = null;
			}
			var protoIds = (id.split(",")[0] || "").split(".");
			page.$prototype = page.$prototype || (!x3fusion && context.getPrototypeResource(_, protoIds.slice(3,5).join("."), (pageData == null), protoIds[0], protoIds[1], protoIds[2])) || _getUrlPrototype(context.baseUrl, context.instanceId, x3fusion);
			//
			if (typeof page.$prototype === "object") {
				var ep = context.httpSession["userProfile"] && context.httpSession["userProfile"].selectedEndpoint(_);
				if (ep) page.$prototype.$baseUrl = "/sdata/" + ep.application(_) + "/" + ep.contract(_) + "/" + ep.dataset(_);
			}
			//
			this.$resource = page || {};
			this.$resource.$uuid = helpers.uuid.generate();
			this.$resource.$key = this.$resource.$uuid;
		},
		$serialize: function(_) {
			return this.$resource;
		},
		$save: function(_) {

		}
	}
};