"use strict";

var globals = require('streamline/lib/globals');
var fs = require('fs');
var fsp = require('path');
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel")
var helpers = require("syracuse-core/lib/helpers");
var pluralize = helpers.string.pluralize;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sys = require("util");
var locale = require("syracuse-core/lib/locale");
var perfmon = require("syracuse-perfmon");

//var _tracer = console.log;
var _tracer = null;

function _exists(callback, fname) {
	(fs.exists || fspath.exists)(fname, function(result) {
		callback(null, result);
	})
}

function _getPath(presentation) {
	var path = presentation.split(",");
	path = path[0].split(".");
	// temp page hack
	if (path[4] === "$dashboard") {
		path = "syracuse-main/html/default/" + path[3] + "-" + path.pop() + ".json";
	} else
		if (path[0] === "syracuse" && path[1] === "content") {
			var type = path.pop();
			path = path.slice(2);
			path = "syracuse-main/html/" + path.join("/") + "-" + type + ".json";
		} else {
			path[2] = "uiviews"; //replace dataset.
			path.splice(1, 0, "lib"); // insert lib
			//		path = path.join("/") + "-" + type + ".json";
			path = path.slice(0, 4).join("/") + "/" + path.slice(4).join("-") + ".json";
		}
	var x = fsp.join(__dirname, "../../../..") + "/" + path;
	return x;
}

function _getUrlPrototype(baseUrl, mediaType, x3fusion) {
	//Il faudra trouver un moyen d'associer un media type avec une url de serveur.
	//Pour l'instant, pointe sur le serveur syracuse
	var url = baseUrl.split("/");
	url = url[0] + "//" + url[2] + "/" + (x3fusion?"trans":url[3]) + "/";
//	url = url[0] + "//" + url[2] + "/" + (x3fusion?"x3":url[3]) + "/";
	mediaType = mediaType.split(".");
	url += mediaType.slice(0, 3).join("/");
	url += "/$prototypes('";
	url += mediaType.slice(3, 5).join(".").split(',')[0];
	url += "')";

	return url;
}

function _parsePageId(id) {
	// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant], [{device} || "desktop" || "phone"]
	var path = id.split(",");
	var options = {
		x3fusion: (path[1] === "trans"),
		variantId: ((path.length>2)?((path[2]=="{variant}")?null:path[2]):null),
		device: ((path.length>3)?((path[3]=="{device}")?"desktop":path[3]):"desktop")
	};
	path = path[0].split(".");
	options.application = path[0];
	options.contract = path[1];
	options.endpoint = path[2];
	options.representation = path[3];
	options.facet = path[4];
	// remove dataset segment
	path.splice(2, 1);
	options.pageContext = path.join(".");
	//save original id
	options.id = id; 
	return options;
}

function _checkId(options) {
	// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant]
	if (!options.variantId) options.variantId = null;
	if (!options.x3fusion) options.x3fusion = false;
	if (!options.id) {
		options.id = [[options.application,options.contract,options.endpoint,options.representation,options.facet].join("."), 	
			options.x3fusion?"trans":"$page", options.variantId?options.variantId:"{variant}"].join(",");
	}
	if (!options.pageContext) 
		options.pageContext = [options.application, options.contract, options.representation, options.facet].join(".");
	if (!options.device) options.device = "desktop";
}

function _fromPrototypeCache(_, dashVariant) {
	var p = (globals.context.session.fromCache && globals.context.session.fromCache("dashboardPrototype", dashVariant.$uuid));
	p && _tracer && _tracer("Prototype cache hit for: "+dashVariant.$uuid);
	return p;
}

function _toPrototypeCache(_, dashVariant, prototype) {
	return (globals.context.session.toCache && globals.context.session.toCache("dashboardPrototype", dashVariant.$uuid, prototype));
}

function _getCurrentConfig(_, context) {
	// TODO : optimize - use a cache for currentConfig
	var config = require("syracuse-main/lib/nodeconfig").config; // do not put this require in header as would be circular reference
	var currentConfig;
	if (config && config.currentConfigVersion) var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			version: config.currentConfigVersion
		}
	});
	if (!currentConfig)
	// get the biggest config enabled
	var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			enable: true
		},
		orderBy: [{
			binding: "version",
			descending: true
		}],
		count: 1
	});
	//
	return currentConfig;
}

function _getAllConfigFilter(_, context) {
	var crtConfig = _getCurrentConfig(_, context);
	//
	var parents = crtConfig && crtConfig.allParents(_).toUuidArray(_);
	// add crtConfig
	parents && parents.push(crtConfig.$uuid);
	// add "none"
	parents && parents.push(null);
	//
	return (parents && {
		$in: parents
	}) || null;
}

function _getAlternateFacets(facet) {
	switch(facet) {
//	case "$edit":
//		return ["$details"];
//	case "$details":
//		return ["$edit"];
	case "$query":
		return ["$lookup", "$select"];
	case "$lookup":
		return ["$query", "$select"];
	case "$select":
		return ["$query", "$lookup"];
	default:
		return null;
	}
}

function _getFusionPrototype(_, context, protoIds, ignoreStubs) {
	function _getFusionPrototypeStub(_, protoUrl, fallbackFct) {
		// url is like '/sdata/contract/application/dataset/$prototypes('name.type.variant')',
		var path = protoUrl.split("/").slice(1);
		path[0] = helpers.stubsPath;
		path = path.join("/");
		var proto = null;
		try {
			proto = JSON.parse(fs.readFile(fsp.join(__dirname, "../../..") + "/" + path, "utf8", _));
		} catch (err) {
			if (err.code !== "ENOENT") throw err;
			var resp = fallbackFct(_, context, protoIds, true);
			if(resp.statusCode === 200)
				proto = JSON.parse(res.readAll(_).toString("utf8"));
		}
		return proto;
	}

	var ep = adminHelper.getEndpoint(_, {
		dataset: protoIds[2]
	});
	//
	var _config = require('syracuse-main/lib/nodeconfig').config.x3fusion || {};
	var opt = {
			// required
			langCode: locale.extractLocaleCode(context.request.headers["accept-language"]),
			prototypeId: protoIds.slice(3,5).join("."),
			// optional
			prototypesLocalServerRoot: (ignoreStubs ? "" : _config.prototypesLocalServerRoot),
			prototypesFolder: (ignoreStubs ? "" : _config.prototypesFolder)
		}
	// stubs
	if (!ignoreStubs && helpers.stubsPath && _config.prototypesLocalServerRoot) {
		return _getFusionPrototypeStub(_, ep.getFusionPrototypeUrl(_, opt), _getFusionPrototype);
	}
	//
	return ep && ep.getFusionPrototype(_, opt);
}

function _getPage(_, context, params) {
	var timing = perfmon.start(module, "page._getPage", params.representation);
	_checkId(params);
	var id = params.id;
 	var role = params.role || context.getSelectedRoleId(_);
	var app = adminHelper.getApplication(_, params.application, params.contract);
	var page = null;
	var variant = null;
	var variants = null;
	var pageEntity = null;
	var pageWhere = null;
	var pageDef = null;
	var authEntity = null;
	var protoIds = (id.split(",")[0] || "").split(".");
	// fusion prototype
	var fusionProto = params.x3fusion ? _getFusionPrototype(_, context, protoIds) : null;
	// get variant and article
	if(params.facet === "$dashboard") {
		// look for dashboard by representation
		pageEntity = context.model.getEntity("dashboardDef");
		authEntity = context.model.getEntity("dashboardAuth");
		pageWhere = {
				jsonWhere: {
					dashboardName: params.representation
				}
			};
	} else {
		pageEntity = context.model.getEntity("pageDef");
		authEntity = context.model.getEntity("pageAuth");
		pageWhere = {
	 			jsonWhere: {
					representation: params.representation,
					facet: params.facet,
					application: app && app.$uuid,
					device: params.device
				}
			};
	}
	var varTiming = perfmon.start(module, "page.selectVariant", params.representation);
	pageDef = context.db.fetchInstance(_, pageEntity, pageWhere);
	if(!pageDef) {
		// try alternates
		var alt = _getAlternateFacets(params.facet);
		if(alt) {
			pageWhere.jsonWhere.facet = {
				$in: alt
			}
			pageDef = context.db.fetchInstance(_, pageEntity, pageWhere);
		}
	}
	//
	var up = context.getUserProfile(_);
	// last variant storage
	var variantId = params.variantId;
	var pref = up.getRepresentationPrefs(_, params.representation, params.facet);
	if(params.variantId) {
		if(!pref)
			pref = up.createRepresentationPrefs(_, params.representation, params.facet);
		pref.lastVariantId(_, params.variantId);
		pref.save(_);
	} else
		variantId = pref && pref.lastVariantId(_);
	//
	variants = pageDef && pageDef.selectAllVariants(_, up, app, variantId);
	variant = variants && variants[0];
	try {
		var pageData = variant && variant.pageData(_);
		page = (pageData && JSON.parse(pageData.content(_))) || {};
		// fusion prototype to convert ?
		if(fusionProto && pageData && pageData.content(_) && fusionProto.$generatorVersion && !page.$generatorVersion) {
			var converter = require("syracuse-x3/lib/cvgPageConverter");
			fusionProto.$article = page.$article;
			try {
				converter.makePersistent(fusionProto);
				page.$article = fusionProto.$article;
				page.$article.$generatorVersion = 1;
				delete fusionProto.$article;
				pageData.content(_, JSON.stringify({
					$article: page.$article
				}));
				// silent save ...
				pageData.save(_);
			} catch(e) {
				page.$diagnoses = [{
					$severity: "error",
					$message: locale.format(module, "convertError", id, 1, e.message)
				}];
				// ask fusionproto again
				fusionProto = _getFusionPrototype(_, context, protoIds);
			}
		}
	} catch(e) {
		page = {};
	}
	varTiming.end();
	page.$authorUrl = context.baseUrl + "/" + authEntity.plural +
			((variant && variant.$uuid) ? "('" + (variant && variant.$uuid) + "')" : "/$template") + 
			"/$workingCopies?representation=" + authEntity.name + ".$edit" +
			((variant && variant.$uuid) ? "" : "&pageContext="+params.pageContext+(params.device ? "&device="+params.device : ""));
	//
	var fromFile = false;
	if (!variant) {
		var p = _getPath(id);
		if(_exists(_, p))
			try {
				var data = fs.readFile(p, "utf8", _);
				var c = JSON.parse(data);
				page = c;
				page.$authorUrl = context.baseUrl + "/" + (params.facet === "$dashboard" ? "dashboardAuths" : "pageAuths") +
					"/$template/$workingCopies?representation=" + (params.facet === "$dashboard" ? "dashboardAuth" : "pageAuth") + 
					".$edit&pageContext="+params.pageContext+(params.device ? "&device="+params.device : "");
				fromFile = true;
			} catch (e) {
			}
	} 

	page.$url = page.$url || id;
	//
	if((params.facet === "$dashboard") && !fromFile) {
		var dt = perfmon.start(module, "page.dashboardPrototypes", params.representation);
		if(variant) {
			page.$diagnoses = page.$diagnoses || [];
			page.$prototype = _fromPrototypeCache(_, variant) || _toPrototypeCache(_, variant, variant.getPrototype(_, context.getUserProfile(_), {
				$diagnoses: page.$diagnoses
			}));
			var loc = variant && variant.pageData(_) && JSON.parse((variant.pageData(_).localization(_) || "{}"));
			if(loc) 
				page.$prototype.$localization = loc[locale.current.toLowerCase()] || loc["en-us"];
			if(!page.$prototype.$links || Object.keys(page.$prototype.$links).length === 0) {
				page.$prototype.$properties = page.$prototype.$properties || {};
				var lks = page.$prototype.$links || {};
				lks.$createDashboard = {
						$title: locale.format(module, "editDashboardLabel",params.representation),
						$url: context.baseUrl + "/dashboardDefs('" + variant._parent.$uuid + "')/$workingCopies?representation=dashboardDef.$edit",
						$method: "POST"
					};
				lks.legacy = {
						$title: "Samples/SOS dashboard",
						$url: "?representation=samples.$dashboard"
					};
			}
		} else {
			// make a vignette allowing the creation of this dashboard
			page.$prototype = {
				$title: locale.format(module, "dashboardNotFoundTitle",params.representation),
				$properties: {}, 
				$links: {
					$create: {
						$title: locale.format(module, "createDashboardLabel",params.representation),
						$url: context.baseUrl + "/dashboardDefs/$template/$workingCopies?representation=dashboardDef.$edit",
						$method: "POST"
					},
					legacy: {
						$title: "Samples/SOS dashboard",
						$url: "?representation=samples.$dashboard"
					}
				}
			}
		}
		dt.end();
	}
	if(context.parameters.fetchPrototype !== "false")
		//page.$prototype = page.$prototype || (!params.x3fusion && context.getPrototypeResource(_, protoIds.slice(3,5).join("."), (variant == null), protoIds[0], protoIds[1], protoIds[2])) || _getUrlPrototype(context.baseUrl, context.instanceId, params.x3fusion);
		page.$prototype = page.$prototype || (params.x3fusion ? fusionProto : context.getPrototypeResource(_, protoIds.slice(3,5).join("."), (variant == null), protoIds[0], protoIds[1], protoIds[2])) || _getUrlPrototype(context.baseUrl, context.instanceId, params.x3fusion);
	//
	// add alternate variants links
	if(variant && variants) {
		page.$views = variants.map_(_, function(_, v) {
			return {
				$title: v.title(_),
				$description: v.description(_),
				$url: context.baseUrl + "/pages('" + id.split(",").slice(0,2).join(",") + "," + v.$uuid + "')" + (params.facet !== "$dashboard" ? "?fetchPrototype=false" : ""),
				$selected: (v.$uuid === variant.$uuid)
			}
		});
	};
	//
	if (typeof page.$prototype === "object") {
		var ep = context.httpSession["userProfile"] && context.httpSession["userProfile"].selectedEndpoint(_);
		if (ep) page.$prototype.$baseUrl = "/sdata/" + ep.application(_) + "/" + ep.contract(_) + "/" + ep.dataset(_);
	} else {
		if ((typeof page.$prototype === "string") &&  params.protoInPage) {
			if (params.application === "x3") {
				//
				var ep = context.db.fetchInstance(_, context.db.model.getEntity("endPoint"), {jsonWhere: {dataset: params.endpoint}});
				if (ep) {
					var model = ep.getModel(_, false);
					if (model) {
						model.resetCache();
						var entity = model.getEntity(_, params.representation, params.facet);
						if (entity) {
							var proto = entity.getPrototype(_, params.representation, params.facet);
							if (proto) page.$prototype = proto;
						}
					}
				}
			}
			
		}
	}
	timing.end();
	return page;
};

exports.entity = {
	$isPersistent: false,
	$events: {},
	$staticFunctions: {
		// this function is used in portlet.js  service representation
		pageContent: function(_, context, params) {
			return _getPage(_, context, params);
		}
	},
	$functions: {
		$setId: function(_, context, id) {
			// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant]
			var params  = _parsePageId(id);
			var page = _getPage(_, context, params);
			this.$resource = page || {};
			this.$resource.$uuid = helpers.uuid.generate();
			this.$resource.$key = this.$resource.$uuid;
		},
		$serialize: function(_) {
			return this.$resource;
		},
		$save: function(_) {

		}
		
		
	}
};
