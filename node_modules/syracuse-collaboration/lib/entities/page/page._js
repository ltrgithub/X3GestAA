"use strict";

var fs = require('fs');
var fsp = require('path');
var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel")
var helpers = require("syracuse-core/lib/helpers");
var pluralize = helpers.string.pluralize;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");

function _exists(callback, fname) {
	(fs.exists || fspath.exists)(fname, function(result) {
		callback(null, result);
	})
}


function _getPath(presentation) {
	var path = presentation.split(",");
	path = path[0].split(".");
	// temp page hack
	if (path[4] === "$dashboard") {
		path = "syracuse-main/html/default/" + path[3] + "-" + path.pop() + ".json";
	} else
		if (path[0] === "syracuse" && path[1] === "content") {
			var type = path.pop();
			path = path.slice(2);
			path = "syracuse-main/html/" + path.join("/") + "-" + type + ".json";
		} else {
			path[2] = "uiviews"; //replace dataset.
			path.splice(1, 0, "lib"); // insert lib
			//		path = path.join("/") + "-" + type + ".json";
			path = path.slice(0, 4).join("/") + "/" + path.slice(4).join("-") + ".json";
		}
	var x = fsp.join(__dirname, "../../../..") + "/" + path;
	return x;
}

function _getUrlPrototype(baseUrl, mediaType, x3fusion) {
	//Il faudra trouver un moyen d'associer un media type avec une url de serveur.
	//Pour l'instant, pointe sur le serveur syracuse
	var url = baseUrl.split("/");
	url = url[0] + "//" + url[2] + "/" + (x3fusion?"trans":url[3]) + "/";
//	url = url[0] + "//" + url[2] + "/" + (x3fusion?"x3":url[3]) + "/";
	mediaType = mediaType.split(".");
	url += mediaType.slice(0, 3).join("/");
	url += "/$prototypes('";
	url += mediaType.slice(3, 5).join(".").split(',')[0];
	url += "')";

	return url;
}
function _parsePageId(id) {
	// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant]
	var path = id.split(",");
	var options = {
		x3fusion: (path[1] === "trans"),
		variantId: ((path.length>2)?((path[2]=="{variant}")?null:path[2]):null) 
	};
	path = path[0].split(".");
	options.application = path[0];
	options.contract = path[1];
	options.endpoint = path[2];
	options.representation = path[3];
	options.facet = path[4];
	// remove dataset segment
	path.splice(2, 1);
	options.pageContext = path.join(".");
	//save original id
	options.id = id; 
	return options;
}

function _checkId(options) {
	// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant]
	if (!options.variantId) options.variantId = null;
	if (!options.x3fusion) options.x3fusion = false;
	if (!options.id) {
		options.id = [[options.application,options.contract,options.endpoint,options.representation,options.facet].join("."), 	
			options.x3fusion?"trans":"$page", options.variantId?options.variantId:"{variant}"].join(",");
	}
	if (!options.pageContext) 
		options.pageContext = [options.application, options.contract, options.representation, options.facet].join(".");
}


function _getCurrentConfig(_, context) {
	// TODO : optimize - use a cache for currentConfig
	var config = require("syracuse-main/lib/nodeconfig").config; // do not put this require in header as would be circular reference
	var currentConfig;
	if (config && config.currentConfigVersion) var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			version: config.currentConfigVersion
		}
	});
	if (!currentConfig)
	// get the biggest config enabled
	var currentConfig = context.db.fetchInstance(_, context.model.getEntity("configuration"), {
		jsonWhere: {
			enable: true
		},
		orderBy: [{
			binding: "version",
			descending: true
		}],
		count: 1
	});
	//
	return currentConfig;
}

function _getAllConfigFilter(_, context) {
	var crtConfig = _getCurrentConfig(_, context);
	//
	var parents = crtConfig && crtConfig.allParents(_).toUuidArray(_);
	// add crtConfig
	parents && parents.push(crtConfig.$uuid);
	// add "none"
	parents && parents.push(null);
	//
	return (parents && {
		$in: parents
	}) || null;
}

function _getPage(_, context, params) {
	_checkId(params);
	var id = params.id;
 	var role = params.role || context.getSelectedRoleId(_);
	var app = adminHelper.getApplication(_, params.application, params.contract);
	var page = null;
	var pageData = null;
	var variants = null;
	// new algorithm !!!!!!!!!!
	if(params.facet === "$dashboard") {
		// look for dashboard by representation
		var dashEntity = context.model.getEntity("dashboardDef");
		var dashboard = context.db.fetchInstance(_, dashEntity, {
			jsonWhere: {
				dashboardName: params.representation
			}
		});
		variants = dashboard && dashboard.selectAllVariants(_, context.getUserProfile(_), app, params.variantId);
		pageData = variants && variants[0];
		try {
			page = (pageData && pageData.pageData(_) && JSON.parse(pageData.pageData(_).content(_))) || {};
		} catch(e) {
			page = {};
		}
		page.$authorUrl = context.baseUrl + "/dashboardAuths" +
				((pageData && pageData.$uuid) ? "('" + (pageData && pageData.$uuid) + "')" : "/$template") + 
				"/$workingCopies?representation=dashboardAuth.$edit" +
				((pageData && pageData.$uuid) ? "" : "&pageContext="+params.pageContext);
	} else {
		var pageEntity = context.model.getEntity("pageDef");
		var pageDef = context.db.fetchInstance(_, pageEntity, {
			jsonWhere: {
				representation: params.representation,
				facet: params.facet,
				application: app && app.$uuid
			}
		});
		var pageData = pageDef && pageDef.selectVariant(_, context.getUserProfile(_), context.getSelectedRoleId(_));
		try {
			page = (pageData && pageData.pageData(_) && JSON.parse(pageData.pageData(_).content(_))) || {};
		} catch(e) {
			page = {};
		}
		page.$authorUrl = context.baseUrl + "/pageAuths" +
			((pageData && pageData.$uuid) ? "('" + (pageData && pageData.$uuid) + "')" : "/$template") + 
			"/$workingCopies?representation=pageAuth.$edit" +
			((pageData && pageData.$uuid) ? "" : "&pageContext="+params.pageContext);
	}
	//
	var fromFile = false;
	if (!pageData) {
		var p = _getPath(id);
		if(_exists(_, p))
			try {
				var data = fs.readFile(p, "utf8", _);
				var c = JSON.parse(data);
				page = c;
				page.$authorUrl = context.baseUrl + "/" + (params.facet === "$dashboard" ? "dashboardAuths" : "pageAuths") +
					"/$template/$workingCopies?representation=" + (params.facet === "$dashboard" ? "dashboardAuth" : "pageAuth") + 
					".$edit&pageContext="+params.pageContext;
				fromFile = true;
			} catch (e) {
			}
	} 

	page.$url = page.$url || id;
	//
	if((params.facet === "$dashboard") && !fromFile) {
		if(pageData) {
			page.$prototype = pageData.getPrototype(_, context.getUserProfile(_));
			if(Object.keys(page.$prototype.$properties).length === 0) {
				page.$prototype.$properties = {
						thisPage: {
							$title: "Dashboards",
							$type: "application/x-portlet",
							$format: "$menu",
							$links: {
								$create: {
									$title: locale.format(module, "editDashboardLabel",params.representation),
									$url: context.baseUrl + "/dashboardDefs('" + pageData._parent.$uuid + "')/$workingCopies?representation=dashboardDef.$edit",
									$method: "POST"
								},
								legacy: {
									$title: "Samples/SOS dashboard",
									$url: "?representation=samples.$dashboard"
								}
							},
							$properties:{}
						}
					}
			}
			// add alternate variants links
			if(variants && (variants.length > 1)) {
				var l = page.$prototype.$links = (page.$prototype.$links || {});
				variants.forEach_(_, function(_, v) {
					// ignore selected variant
					if(v.$uuid === pageData.$uuid) return;
					//
					l[v.$uuid] = l[v.$uuid] || {
						$title: v.title(_) || v.$uuid,
						$url: "?representation=" + pageData._parent.dashboardName(_) + ".$dashboard&variant=" + v.$uuid
					}
				});						
			};
		} else {
			// make a vignette allowing the creation of this dashboard
			page.$prototype = {
				$title: locale.format(module, "dashboardNotFoundTitle",params.representation), 
				$properties: {
					thisPage: {
						$title: "Dashboards",
						$type: "application/x-portlet",
						$format: "$menu",
						$links: {
							$create: {
								$title: locale.format(module, "createDashboardLabel",params.representation),
								$url: context.baseUrl + "/dashboardDefs/$template/$workingCopies?representation=dashboardDef.$edit",
								$method: "POST"
							},
							legacy: {
								$title: "Samples/SOS dashboard",
								$url: "?representation=samples.$dashboard"
							}
						},
						$properties:{}
					}
				}
			}
		}
		// TODO: for now we remove the article from the response as new vignettes do not apear. Remove next line after proper 
		// management of dashboards authoring client side.
//				page.$article = null;
	}
	var protoIds = (id.split(",")[0] || "").split(".");
	page.$prototype = page.$prototype || (!params.x3fusion && context.getPrototypeResource(_, protoIds.slice(3,5).join("."), (pageData == null), protoIds[0], protoIds[1], protoIds[2])) || _getUrlPrototype(context.baseUrl, context.instanceId, params.x3fusion);
	//
	if (typeof page.$prototype === "object") {
		var ep = context.httpSession["userProfile"] && context.httpSession["userProfile"].selectedEndpoint(_);
		if (ep) page.$prototype.$baseUrl = "/sdata/" + ep.application(_) + "/" + ep.contract(_) + "/" + ep.dataset(_);
	} else {
		if ((typeof page.$prototype === "string") &&  params.protoInPage) {
			if (params.application === "x3") {
				//
				var ep = context.db.fetchInstance(_, context.db.model.getEntity("endPoint"), {jsonWhere: {dataset: params.endpoint}});
				if (ep) {
					var model = ep.getModel(_, false);
					if (model) {
						var entity = model.getEntity(_, params.representation, params.facet);
						if (entity) {
							var proto = entity.getPrototype(_, params.representation, params.facet);
							if (proto) page.$prototype = proto;
						}
					}
				}
			}
			
		}
	}
	return page;
};


exports.entity = {
	$isPersistent: false,
	$events: {},
	$staticFunctions: {
		// this function is used in portlet.js  service representation
		pageContent: function(_, context, params) {
			return _getPage(_, context, params);
		}
	},
	$functions: {
		$setId: function(_, context, id) {
			// id = application.contract.representation.facet, [$page || trans], [{variant} || uuid_of_variant]
			var params  = _parsePageId(id);
			var page = _getPage(_, context, params);
			this.$resource = page || {};
			this.$resource.$uuid = helpers.uuid.generate();
			this.$resource.$key = this.$resource.$uuid;
		},
		$serialize: function(_) {
			return this.$resource;
		},
		$save: function(_) {

		}
		
		
	}
};
