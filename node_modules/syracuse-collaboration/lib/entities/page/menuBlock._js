"use strict";

var globals = require('streamline/lib/globals');

exports.entity = {
	$titleTemplate: "Menu block",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code",
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true
		},
		title: {
			$title: "Title",
			$isLocalized: true,
			$linksToDetails: true
		},
		description: {
			$title: "Description",
			$isLocalized: true,
			$isHidden: true
		}
	},
	$relations: {
		items: {
			$isPlural: true,
			$title: "Items",
			$variants: {
				menuItem: {
					$capabilities: "sort,reorder,delete",
					$title: "Menu items",
					$type: "menuItem",
					$lookupFilter: {
						application: "{application}"
					}
				},
				menuBlock: {
					$capabilities: "append,sort,reorder,delete",
					$title: "Blocks",
					$type: "menuSubblock",
					$isChild: true
				}
			}
		},
		application: {
			$title: "Application",
			$type: "application",
			$isMandatory: true,
			defaultValue: function(_, instance) {
				var ctxt = globals.context.request && globals.context.request.context;
				var orgModule = ctxt && ctxt.parameters && ctxt.parameters.originModule;
				// add module to origin page
				if (orgModule) {
					var mod = instance._db.fetchInstance(_, instance._db.getEntity(_, "menuModule"), orgModule);
					if (mod) return mod.application(_);
				}
			}
		},
		endpoints: {
			$title: "Endpoints",
			$type: "endPoints"
		}
	},
	$functions: {
		getNavigationPageResource: function(_, baseUrlProp, auth, adminMode) {
			var sm = this;
			var res = {
				$uuid: sm.$uuid,
				$r_url: sm.computeUrlShort(),
				title: sm.title(_),
				description: sm.description(_),
				items: []
			};
			var items = sm.items(_).toArray(_);
			items.forEach_(_, function(_, it) {
				if (auth && it.authorized && !it.authorized(_, auth)) return;
				var res_it = it.getNavigationPageResource(_, baseUrlProp, auth);
				if (auth && res_it.menuBlock && res_it.menuBlock.items && !res_it.menuBlock.items.length) return;
				res.items.push(res_it);
			});
			return res;
		}
	},
	$events: {
		$afterSave: [
			function(_, instance, params) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("navigationPage");
				// add module to origin page
				if (params && params.originModule) {
					var mod = instance._db.fetchInstance(_, instance._db.getEntity(_, "menuModule"), params.originModule);
					if (mod) {
						mod.submodules(_).set(_, instance);
						mod.save(_, null, {
							shallowSerialize: true
						});
					}
				}
			}
		]
	},
	$searchIndex: {
		$fields: ["code", "title", "description", "application"]
	}
};