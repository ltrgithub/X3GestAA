"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var AuthoringHelper = require("./pageHelpers").AuthoringHelper;
var locale = require("syracuse-core/lib/locale");
var globals = require("streamline/lib/globals");

var tracer = console.log;
var tracer = null;

// TODO: inherit
exports.entity = {
	$isPersistent: false,
	$properties: {
		content: {
			$title: "Content",
			$type: "json"
		},
		$authorUrl: {
			$title: "Authoring url",
			$isHidden: true
		},
		variantId: {
			$isHidden: true
		},
		pageContext: {
			$isHidden: true
		},
		modelRepresentation: {
			$isHidden: true
		}
	},
	$functions: {
		$setId: function(_, context, id) {

		},
		$setParameters: function(_, context) {
			AuthoringHelper.prototype.$setParameters.call(this, _, context);
		},
		$save: function(_, saveRes, parameters) {
			AuthoringHelper.prototype.$save.call(this, _, saveRes, parameters);
		},
		getVariant: function(_) {
			return AuthoringHelper.prototype.getVariant.call(this, _);
		},
		getSaveVariant: function(_, saveAsOption, modelRepr) {
			return AuthoringHelper.prototype.getSaveVariant.call(this, _, saveAsOption, modelRepr);
		},
		createPageDef: function(_, pageContext, device, modelRepresentation) {
			var pageEntity = this.getPageEntity(_);
			//
			var pageDef = pageEntity.factory.createInstance(_, null, this._db);
			// pageContext is application.contract.representation.facet[.variant]
			var parts = pageContext.split(".");
			if (modelRepresentation) parts[2] = modelRepresentation + '$MODEL';
			parts.push(device || "desktop");
			var title = parts.join(".");
			pageDef.facet(_, parts[3]);
			pageDef.application(_, adminHelper.getApplication(_, parts[0], parts[1]));
			pageDef.representation(_, parts[2]);
			pageDef.title(_, title);
			pageDef.code(_, title);
			pageDef.device(_, device || "desktop");
			return pageDef;
		},
		getPageFromContext: function(_, pageContext, device) {
			if (!pageContext) return null;
			//
			var pageEntity = this.getPageEntity(_);
			var parts = pageContext.split(".");
			//
			var app = adminHelper.getApplication(_, parts[0], parts[1]);
			if (!app) return null;
			//
			return this._db.fetchInstance(_, pageEntity, {
				jsonWhere: {
					application: app.$uuid,
					representation: parts[2],
					facet: parts[3],
					device: device || "desktop"
				}
			});
		},
		getPageEntity: function(_) {
			return this._db.model.getEntity(_, "pageDef");
		},
		makeAuthorUrl: function(_, variant) {
			return [this._baseUrl, "pageAuths('" + variant.$uuid + "')/$workingCopies?representation=pageAuth.$edit"].join("/");
		},
		addVariant: function(_, pageDef, orgId) {
			return pageDef.variants(_).add(_);
		}
	},
	$actions: {
		$save: function(_, instance) {
			var r = {};
			var v = instance.getVariant(_);
			if (v && v.isFactory(_)) r.$confirm = locale.format(module, "modifyFactory");
			if (!v) {
				r.$parameters = {
					$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=page&pageContext={pageContext}",
					$method: "POST",
					$properties: {
						parameters: {
							$type: "application/x-string"
						}
					}
				};
				if (instance.modelRepresentation(_)) r.$parameters.$url += "&modelRepresentation=" + instance.modelRepresentation(_);
			} else {
				if (v.isFactory(_)) {
					var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
					r.$isDisabled = sp && sp.authoringLevel(_) && (["admin", "user"].indexOf(sp.authoringLevel(_)) >= 0);
				}
				if (v._isGlobal(_)) {
					var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
					r.$isDisabled = sp && sp.authoringLevel(_) && (sp.authoringLevel(_) === "user");
				}
			}

			return r;
		}
	},
	$services: {
		saveAs: {
			$title: "Save as",
			$method: "POST",
			$isMethod: true,
			$facets: ["$edit"],
			$parameters: {
				$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=page&pageContext={pageContext}&modelRepresentation={modelRepresentation}",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance, params) {
				var res = instance.save(_, params);
				var diag = ((res.$actions || {}).$save || {}).$diagnoses;
				return {
					$diagnoses: diag
				};
			}
		},
		$delete: {
			$title: "Delete",
			$method: "POST",
			$isMethod: true,
			$execute: function(_, context, instance, params) {
				var v = instance.getVariant(_);
				if (v) {
					var page = v._parent;
					page.variants(_).deleteInstance(_, v.$uuid);
					if (page.variants(_).toArray(_, true).length === 0) page.deleteSelf(_);
					else page.save(_);
					instance.$diagnoses = instance.$diagnoses || [];
					page.getAllDiagnoses(_, instance.$diagnoses, {
						addEntityName: true,
						addPropName: true
					});
				}
			}
		}
	}
};