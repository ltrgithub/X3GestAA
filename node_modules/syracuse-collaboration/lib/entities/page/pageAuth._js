"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var AuthoringHelper = require("./pageHelpers").AuthoringHelper;
var locale = require("syracuse-core/lib/locale");

var tracer = console.log;
var tracer = null;

// TODO: inherit
exports.entity = {
	$isPersistent: false,
	$properties: {
		content: {
			$title: "Content",
			$type: "json"
		},
		$authorUrl: {
			$title: "Authoring url",
			$isHidden: true
		},
		variantId: {
			$isHidden: true
		}
	},
	$functions: {
		$setId: function(_, context, id) {
			
		},
		$setParameters: function(_, context) {
			AuthoringHelper.prototype.$setParameters.call(this, _, context);
		},
		$save: function(_, saveRes, parameters) {
			AuthoringHelper.prototype.$save.call(this, _, saveRes, parameters);
		},
		getVariant: function(_, saveAsOption) {
			return AuthoringHelper.prototype.getVariant.call(this, _, saveAsOption);
		},
		createPageDef: function(_, pageContext) {
			var pageEntity = this.getPageEntity();
			//
			var pageDef = pageEntity.factory.createInstance(_, null, this._db);
			// pageContext is application.contract.representation.facet[.variant]
			var parts = pageContext.split(".");
			pageDef.facet(_, parts[3]);
			pageDef.application(_, adminHelper.getApplication(_, parts[0], parts[1]));
			pageDef.representation(_, parts[2]);
			pageDef.title(_, pageContext);
			pageDef.code(_, pageContext);
			return pageDef;
		},
		getPageEntity: function() {
			return this._db.model.getEntity("pageDef");
		},
		makeAuthorUrl: function(_, variant) {
			return [this._baseUrl, "pageAuths('" + variant.$uuid + "')/$workingCopies?representation=pageAuth.$edit"].join("/");
		},
		addVariant: function(_, pageDef, orgId) {
			return pageDef.variants(_).add(_);
		}
	},
	$actions: {
		$save: function(_, instance) {
			var r = {};
			var v = instance.getVariant(_);
			if(v && v.isFactory(_))
				r.$confirm = locale.format(module, "modifyFactory");
			if(!v)
				r.$parameters = {
					$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=page&variantId={variantId}",
					$method: "POST",
					$properties: {
						parameters: {
							$type: "application/x-string"
						}
					}
				}
			return r;
		}
	},
	$services: {
		saveAs: {
			$title: "Save as",
			$method: "POST",
			$isMethod: true,
			$facets: ["$edit"],
			$parameters: {
				$url: "{$baseUrl}/authoringSaveParams/$template/$workingCopies?representation=authoringSaveParam.$edit&role={$role}&pageType=page&variantId={variantId}",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$execute: function(_, context, instance, params) {
				instance.save(_, params);
			}
		}
	}
}