"use strict";

var globals = require('streamline/lib/globals');

function _getRootBlock(_, instance) {
	if (!instance) return null;
	if (!instance._parent || (instance.getEntity(_).name !== "menuSubblock")) return instance;
	return _getRootBlock(_, instance._parent);
}

exports.entity = {
	$titleTemplate: "Menu block",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			defaultValue: function(_, instance) {
				return instance.$uuid;
			},
			$isHidden: true
		},
		title: {
			$title: "Title",
			$isLocalized: true,
			$linksToDetails: true,
			$isDisabled: function(_, instance) {
				if (!instance.isFactory(_)) return false;
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return (sp && sp.authoringLevel(_) && (sp.authoringLevel(_) !== "sage"));
			}
		},
		isFactory: {
			$title: "Factory",
			$type: "boolean",
			$isNullable: true,
			$isDisabled: function(_, instance) {
				if (!instance.isFactory(_)) return false;
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return (sp && sp.authoringLevel(_) && (sp.authoringLevel(_) !== "sage"));
			},
			defaultValue: function(_, instance) {
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return (sp && sp.authoringLevel(_) && (sp.authoringLevel(_) === "sage")) || false;
			}
		}
	},
	$relations: {
		items: {
			$isPlural: true,
			$title: "Items",
			$variants: {
				menuItem: {
					$capabilities: "sort,reorder,delete",
					$title: "Menu items",
					$type: "menuItem",
					$lookupFilter: {
						$or: [{
							application: "{application}"
						}, {
							application: null
						}]
					}
				},
				menuBlock: {
					$capabilities: "append,sort,reorder,delete",
					$title: "Blocks",
					$type: "menuSubblock",
					$isChild: true
				}
			}
		},
		application: {
			$title: "Application",
			$type: "application",
			$isHidden: true,
			$compute: function(_, instance) {
				var root = _getRootBlock(_, instance);
				return root && (root.getEntity(_).name === "menuBlock") && root.application(_);
			}
		}
	},
	$functions: {
		$onSerializeReference: function(_, result) {
			result.$shortUrl = "{$r_url}";
			result.$r_url = "{$r_url}/items('" + this.$uuid + "')";
		},
		getNavigationPageResource: function(_, baseUrlProp, filters, adminMode) {
			function _keep(_, item) {
				if (ff.applicationId && item.application(_) && (item.application(_).$uuid !== ff.applicationId)) return false;
				if (ff.endpointId && item.endpoint && item.endpoint(_) && (item.endpoint(_).$uuid !== ff.endpointId)) return false;
				return true;
			}
			var ff = filters || {};
			var auth = ff.auth;
			var sm = this;
			var res = {
				$uuid: sm.$uuid,
				title: sm.title(_),
				$shortUrl: "{$r_url}",
				$r_url: "{$r_url}/items('" + sm.$uuid + "')",
				items: []
			};
			var items = sm.items(_).toArray(_);
			items.forEach_(_, function(_, it) {
				if (!adminMode && !_keep(_, it)) return;
				if (!adminMode && auth && it.authorized && !it.authorized(_, auth)) return;
				var res_it = it.getNavigationPageResource(_, baseUrlProp, filters, adminMode);
				if (!adminMode && res_it.menuBlock && res_it.menuBlock.items && !res_it.menuBlock.items.length) return;
                if (res_it.menuBlock) {
                    if (adminMode && it.isFactory(_) && ff.authLevel && (ff.authLevel !== "sage")) {
                        var sous_res = res_it.menuBlock;
                        sous_res.$links = sous_res.$links || {};
                        sous_res.$links.$edit = sous_res.$links.$edit || {};
                        sous_res.$links.$edit.$isHidden = true;
                        if (sm.isFactory(_)) {
                            sous_res.$capabilities = "";
                        }
                    }
                }
				res.items.push(res_it);
			});
			return {
				menuBlock: res
			};
		}
	},
	$events: {
		$afterSave: [

			function(_, instance, params) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("navigationPage");
			}
		]
	}
};