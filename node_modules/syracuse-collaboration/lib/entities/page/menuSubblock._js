"use strict";

var globals = require('streamline/lib/globals');

function _getRootBlock(_, instance) {
	if (!instance) return null;
	if (!instance._parent || (instance.getEntity(_).name !== "menuSubblock")) return instance;
	return _getRootBlock(_, instance._parent);
}

exports.entity = {
	$titleTemplate: "Menu block",
	$valueTemplate: "{title}",
	$properties: {
		code: {
			$title: "Code",
			$isMandatory: true,
			defaultValue: function(_, instance) {
				return instance.$uuid;
			},
			$isHidden: true
		},
		title: {
			$title: "Title",
			$isLocalized: true,
			$linksToDetails: true
		}
	},
	$relations: {
		items: {
			$isPlural: true,
			$title: "Items",
			$variants: {
				menuItem: {
					$capabilities: "sort,reorder,delete",
					$title: "Menu items",
					$type: "menuItem",
					$lookupFilter: {
						application: "{application}"
					}
				},
				menuBlock: {
					$capabilities: "append,sort,reorder,delete",
					$title: "Blocks",
					$type: "menuSubblock",
					$isChild: true
				}
			}
		},
		application: {
			$title: "Application",
			$type: "application",
			$isHidden: true,
			$compute: function(_, instance) {
				var root = _getRootBlock(_, instance);
				return root && (root.getEntity(_).name === "menuBlock") && root.application(_);
			}
		}
	},
	$functions: {
		getNavigationPageResource: function(_, baseUrlProp) {
			var sm = this;
			return {
				menuBlock: {
					$uuid: sm.$uuid,
					title: sm.title(_),
					items: sm.items(_).toArray(_).map_(_, function(_, it) {
						return it.getNavigationPageResource(_, baseUrlProp);
					})
				}
			};
		}
	},
	$events: {
		$afterSave: [
			function(_, instance, params) {
				globals.context.session && globals.context.session.resetCache && globals.context.session.resetCache("navigationPage");
			}
		]
	}
};