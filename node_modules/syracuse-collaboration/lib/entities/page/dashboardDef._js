"use strict"

var userScore = 100000;
var roleScore = 10000;
var unaffUserScore = 1000;
var unaffRoleScore = 1000;
var endpointScore = 100;
var unaffEPScore = 10;
var applicationScore = 1;

exports.entity = {
	$titleTemplate: "Dashboard",
	$descriptionTemplate: "Dashboard definition",
	$valueTemplate: "{title}",
	$properties: {
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		dashboardName: {
			$title: "Dashboard name",
			$isMandatory: true,
			$constraints: {
				$isUnique: true
			}
		}
	},
	$relations: {
		variants: {
			$type: "dashboardVariants",
			$title: "Variants",
			$isChild: true
		}
	},
	$functions: {
		selectVariant: function(_, userProfile, application) {
			if(!userProfile) return null;
			//
			var self = this;
			//
			var userId = userProfile.user(_).$uuid;
			var roleId = userProfile.selectedRole(_) && userProfile.selectedRole(_).$uuid;
			var epId = userProfile.selectedEndpoint(_) && userProfile.selectedEndpoint(_).$uuid;
			//
			var variants = self.variants(_).toArray(_);
			var scores = [];
			variants.forEach_(_, function(_, v) {
				var score = 0;
				// application: best score if fits, ignore if different
				if(application && v.application(_)) {
					if(v.application(_).$uuid === application.$uuid)
						score += applicationScore;
					else
						return;
				}
				//
				if(v.users(_).isEmpty())
					score += unaffUserScore;
				else
					if(v.users(_).get(_, userId))
						score += userScore;
				//
				if(v.roles(_).isEmpty())
					score += unaffRoleScore;
				else
					if(roleId && v.roles(_).get(_, roleId)) 
						score += roleScore;
				//
				if(v.endpoints(_).isEmpty())
					score += unaffEPScore;
				else
					if(epId && v.endpoints(_).get(_, epId)) 
						score += endpointScore;
				//
				scores.push({
					$uuid: v.$uuid,
					score: score
				});
			});
			//
			var best = scores.sort(function(a,b) {
				return b.score - a.score;
			})[0];
			return best && self.variants(_).get(_, best.$uuid);
		}
	}
}