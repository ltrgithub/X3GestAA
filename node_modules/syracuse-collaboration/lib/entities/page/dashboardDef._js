"use strict"

var userScore = 100000;
var roleScore = 10000;
var unaffUserScore = 1000;
var unaffRoleScore = 1000;
var endpointScore = 100;
var unaffEPScore = 10;
var applicationScore = 1;

exports.entity = {
	$titleTemplate: "Dashboard",
	$descriptionTemplate: "Dashboard definition",
	$valueTemplate: "{title}",
	$properties: {
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		dashboardName: {
			$title: "Dashboard name",
			$isMandatory: true,
			$isUnique: true,
			$propagate: function(_, instance, val) {
				// modify related menu items
				var items = instance._db.fetchInstances(_, instance._db.getEntity(_, "menuItem"), {
					dashboard: val
				});
				items.forEach_(_, function(_, i) {
					i.dashboard(_, val);
					instance.addRelatedInstance(i);
				});
			}
		},
		mobile: {
			$title: "Dashboard mobile",
			$type: "boolean",
			$default: false,
			$isNullable: true			
		}
	},
	$services: {
	    mobilePortlets : {
			$method : "get",
			$isHidden : true,
			$isMethod : false,
			$title : "Mobile Applications",
			$execute : function(_, context, instance) {
				var res = {$resources:[]};
				var dashboards = context.db.fetchInstances(_, context.model.getEntity("dashboardDef"), {
					jsonWhere: {
						mobile: true
					},
					orderBy: [{
						binding: "title",
						descending: false
					}]
					
				});	
				// a dashboard "mobile" has only one application
				dashboards.forEach_(_, function(_, dashboard) {
					var variants = dashboard.variants(_).toArray(_);
					var application = null;
					variants.forEach_(_, function(_, variant) {
						if (!variant.allApplications(_)) {
							
							var ca = variant.application(_);
							if (!application) application = ca;
							if (ca && application && (application.application == ca.application)) {
								var vignettes = variant.vignettes(_).toArray(_);
								vignettes.forEach_(_, function(_, vignette) {
									var portlet = vignette.portlet(_);
									if (portlet.type(_) === "$menu") {
										//var mobApp = portlet.serializeInstance(_);
										var mobApp = {};
										mobApp.icon = portlet.code(_);
										mobApp.title = portlet.title(_);
										mobApp.description = portlet.description(_);
										mobApp.applicationName = application.application;
										mobApp.applicationDescription = application.description;
										mobApp.$url = portlet.getUrl(_);
										res.$resources.push(mobApp);
									}
								});
							}
						}
					});
				});
				context.reply(_, 200, res);
			}
		}
	},
	$relations: {
		variants: {
			$type: "dashboardVariants",
			$title: "Variants",
			$isChild: true
		}
	},
	$functions: {
		selectVariant: function(_, userProfile, application) {
			if(!userProfile) return null;
			//
			var self = this;
			//
			var userId = userProfile.user(_).$uuid;
			var roleId = userProfile.selectedRole(_) && userProfile.selectedRole(_).$uuid;
			var epId = userProfile.selectedEndpoint(_) && userProfile.selectedEndpoint(_).$uuid;
			var appId = epId && userProfile.selectedEndpoint(_).applicationRef(_).$uuid;
			//
			var variants = self.variants(_).toArray(_);
			var scores = [];
			variants.forEach_(_, function(_, v) {
				var score = 0;
				// application: 
				//   if no endpoint selected, best score if "allApplications", no bonus otherwise
				//   if an endpoint is selected best score if application fits, second best if "allApplications", ignore if different
				if(appId) {
					if(v.application(_)) {
						if(v.application(_).$uuid === appId)
							score += 2*applicationScore;
						else
							return;
					} else
						score += applicationScore;
				} else
					if(v.allApplications(_))
						score += applicationScore;
				//
				if(v.users(_).isEmpty())
					score += unaffUserScore;
				else
					if(v.users(_).get(_, userId))
						score += userScore;
				//
				if(v.roles(_).isEmpty())
					score += unaffRoleScore;
				else
					if(roleId && v.roles(_).get(_, roleId)) 
						score += roleScore;
				//
				if(v.endpoints(_).isEmpty())
					score += unaffEPScore;
				else
					if(epId && v.endpoints(_).get(_, epId)) 
						score += endpointScore;
				//
				scores.push({
					$uuid: v.$uuid,
					score: score
				});
			});
			//
			var best = scores.sort(function(a,b) {
				return b.score - a.score;
			})[0];
			return best && self.variants(_).get(_, best.$uuid);
		}
	},
	$searchIndex: {
		$fields: ["title", "description", "dashboardName"]
	}
}