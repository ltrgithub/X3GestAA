"use strict";

var factory = require("syracuse-orm/lib/factory");
var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");

exports.entity = {
//	$lockType: "pessimist",
	$titleTemplate: "Page",
	$descriptionTemplate: "Page content",
	$valueTemplate: "{content}",
	$properties: {
		// code property used as identifier in export / import
		code: {
			$title: "Code",
			$isUnique: true,
			defaultValue: function(_, instance) {
				return instance.$uuid;
			}
		},
		content: {
			$title: "Content",
			$type: "string",
			$propagate: function(_, instance, value) {
				// create a historic version (use snapshot)
				var oldValue = instance.$snapshot && instance.$snapshot.content(_);
				if (oldValue) {
					var lastHist = instance.getLastVersionInstance(_);
					if (!lastHist) {
						// create the first history page
						lastHist = instance.createChild(_, "history");
						lastHist.content(_, oldValue);
						lastHist.version(_, 0);
						instance.history(_).set(_, lastHist);
					}
					// create the differential history
					lastHist.addVersion(_, oldValue, value);
					instance.addRelatedInstance(lastHist);
				}
			}
		},
		localization: {
			$title: "Localization",
			$type: "string"
		}
	},
	$relations: {
		history: {
			$title: "History",
			$type: "pageDataHistories",
			$inv: "pageData",
			$isComputed: true,
			$isLazy: true,
			$cascadeDelete: true
			//			isChild: true
		}
	},
	$functions: {
		getLastVersionInstance: function(_) {
			return this._db.fetchInstance(_, this._meta.$relations.history.targetEntity, {
				jsonWhere: {
					pageData: this.$uuid
				},
				orderBy: [{
					binding: "version",
					descending: true
				}],
				count: 1
			});
		},
		convertFusionArticle: function(_, pageDef, endpoint, version, opt) {
			var options = opt || {};
			var converter = require("syracuse-x3/lib/cvgPageConverter");
			//
			var c = this.content(_);
			if(!c) return;
			c = JSON.parse(c);
			c = c.$article;
			//
			if(c.$generatorVersion === version) return;
			// fetch prototype
			var par = {
				prototypeId: pageDef.representation(_) + "." + pageDef.facet(_)
			}
			var p = options.prototype || endpoint.getFusionPrototype(_, par);
			if(!p) return this.$addError(locale.format(module, "prototypeNotFound", par.prototypeId, endpoint.dataset(_)));
			if(!p.$generatorVersion) return;
			//
			p.$article = c;
			//
			try {
				converter.makePersistent(p);
				p.$article.$generatorVersion = version;
				this.content(_, JSON.stringify({
					$article: p.$article
				}));
				//
				var s = this.save(_);
				var ds = ((s.$actions || {}).$save || {}).$diagnoses || [];
				this.getAllDiagnoses(_, options.$diagnoses, {
					addEntityName: true,
					addPropName: true
				});
				if(options.$diagnoses) {
					ds.forEach(function(d) {
						options.$diagnoses.push(d);
					});
				} 
			} catch(e) {
				options.$diagnoses && options.$diagnoses.push({
					$severity: "error",
					$message: locale.format(module, "convertError", par.prototypeId, 1, e.message)
				});
			}
		}
	},
	$indexes: {
	},
	$defaultOrder: [["code", true]]
};