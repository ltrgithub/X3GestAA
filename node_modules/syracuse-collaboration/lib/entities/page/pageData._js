"use strict";

var factory = require("syracuse-orm/lib/factory");
var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
//	$lockType: "pessimist",
	$titleTemplate: "Page",
	$descriptionTemplate: "Page content",
	$valueTemplate: "{title}",
	$properties: {
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
//			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		representation: {
			$title: "Representation",
/*			$isMandatory: function(_, instance) {
				return instance.facet(_) !== "$dashboard";
			},
			$isDefined: function(_, instance) {
				return instance.facet(_) !== "$dashboard";
			}*/
		},
		dashboardName: {
			$title: "Dashboard name",
/*			$isMandatory: function(_, instance) {
				return instance.facet(_) === "$dashboard";
			},
			$isDefined: function(_, instance) {
				return instance.facet(_) === "$dashboard";
			}*/
		},
		facet: {
			$title: "Facet",
			$enum: ["$query", "$details", "$edit", "$thumb", "$lookup", "$select", "$dashboard"],
			$enumCaptions: ["Query", "Details", "Edit", "Thmbnails", "Lookup", "Select", "Dashboard"],
/*			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if(val !== "$dashboard") 
					instance.allApplications(_, false);
			}*/
		},
		allApplications: {
			$title: "Applies to all applications",
			$type: "boolean",
			
				$isNullable: true
			,
/*			$isDisabled: function(_, instance) {
				return (instance.facet(_) !== "$dashboard");
			},
			$propagate: function(_, instance, val) {
				if(val) instance.application(_, null);
			}*/
		},
		variant: {
			$title: "Variant"
		},
		authorName: {
			$title: "Author",
//			$isMandatory: true,
			$default: "Sage"
		},
		authorType: {
			$title: "Author Type",
			$type: "string",
			$enum: ["Product", "Vertical", "Specific"],
			$enumCaptions: ["Product", "Vertical", "Specific"],
//			$isMandatory: true,
			$default: "Product"
		},
		content: {
			$title: "Content",
			$type: "json",
			$propagate: function(_, instance, value) {
				// create a historic version (use snapshot)
				var oldValue = instance.$snapshot && instance.$snapshot.content(_);
				if (oldValue) {
					var lastHist = instance.getLastVersionInstance(_);
					if (!lastHist) {
						// create the first history page
						lastHist = instance.createChild(_, "history");
						lastHist.content(_, oldValue);
						lastHist.version(_, 0);
						instance.history(_).set(_, lastHist);
					}
					// create the differential history
					lastHist.addVersion(_, oldValue, value);
					instance.addRelatedInstance(lastHist);
				}
			}
		}
	},
	$relations: {
		roles: {
			$title: "Applies to roles",
			$type: "roles",
		},
		users: {
			$title: "Applies to users",
			$type: "users",
		},
		// configuration management parents : a page may have several parents in case of a merge
		parents: {
			$title: "Parent pages",
			$type: "pageDatas",
			$inv: "childrens"
		},
		// configuration management childrens : a page may have several childrens in case of several branches
		childrens: {
			$title: "Children pages",
			$type: "pageDatas",
			$inv: "parents",
			$isComputed: true
		},
		// configuration tag affected to this page
		configuration: {
			$title: "Configuration",
			$type: "configuration",
		},
		history: {
			$title: "History",
			$type: "pageDataHistories",
			$inv: "pageData",
			$isComputed: true,
			$isLazy: true,
			$cascadeDelete: true
			//			isChild: true
		},
/*		portlets: {
			$title: "Vignettes",
			$type: "pagePortlets",
			$inv: "pageData",
			isChild: true,
			$isDefined: function(_, instance) {
				return (instance.facet(_) === "$dashboard");
			},
			$select: {
				$title: "Vignettes",
				$type: "portlet",
				$fieldMap: { portlet: "$uuid" }
			}
		},*/
		application: {
			$title: "Application",
			$type: "application",
			$inv: "pages",
/*			$isMandatory: function(_, instance) {
				return !instance.allApplications(_);
			},
			$isDefined: function(_, instance) {
				return !instance.allApplications(_);
			}*/
		},
		endpoints: {
			$title: "Applies to endpoints",
			$type: "endPoints"
		}
	},
	$init: function(_, instance, context) {
		// initialize application
		instance.facet(_, "$dashboard");
		if(context && context.parameters) {
			if(context.parameters.pageContext) {
				// pageContext is application.contract.representation.facet[.variant]
				var parts = context.parameters.pageContext.split(".");
				instance.facet(_, parts[3]);
				instance.application(_, adminHelper.getApplication(_, parts[0], parts[1]));
				if(instance.facet(_) === "$dashboard")
					instance.dashboardName(_, parts[2]);
				else
					instance.representation(_, parts[2]);
				if(parts[4]) instance.variant(_, parts[4]);
				instance.title(_, context.parameters.pageContext);
			}
		}
		//
		var config = require("syracuse-main/lib/nodeconfig").config; // do not put this require in header as would be circular reference
		if (config && config.currentConfigVersion) instance.configuration(_, instance._db.fetchInstance(_, instance._meta.$relations.configuration.targetEntity, {
			jsonWhere: {
				version: config.currentConfigVersion
			}
		}));
	},
	$functions: {
		getLastVersionInstance: function(_) {
			return this._db.fetchInstance(_, this._meta.$relations.history.targetEntity, {
				jsonWhere: {
					pageData: this.$uuid
				},
				orderBy: [{
					binding: "version",
					descending: true
				}],
				count: 1
			});
		}
	},
	$services: {
	},
	$indexes: {
		params: {
			application: "asc",
			representation: "asc",
			facet: "asc",
			variant: "asc"
		},
		roles: {
			roles: "asc"
		},
		users: {
			users: "asc"
		}
	},
	$defaultOrder: [["title", true]]
};