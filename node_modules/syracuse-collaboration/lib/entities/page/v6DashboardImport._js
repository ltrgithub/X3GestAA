"use strict";


var helpers = require("syracuse-core/lib/helpers");
var http = require('http');
var httpClient = require('syracuse-httpclient/lib/httpClient');
var util = require('util');
var locale = require("syracuse-core/lib/locale");
var jsonImport = require('syracuse-import/lib/jsonImport');

var send = function(_, context, method, url, referer, data, diagnoses) {
	var options = {
		method: method,
		url: url,
		headers: {
			referer: referer || url,
			"accept": "application/json;vnd.sage=syracuse",
			"accept-language": locale.current || "en-US",
			"content-type": "application/json",
			cookie: context.httpSession.cookie
		}
	};
	//	console.log("method: "+method);
	//	console.log("Url: "+url);
	//	console.log("headers: "+JSON.stringify(options.headers,null,2));
	//	console.log("Data: "+JSON.stringify(data,null,2));
	var request = httpClient.httpRequest(_, options);
	var response = request.end(data ? JSON.stringify(data) : '').response(_);
	var statusCode = response.statusCode;

	var content = response.readAll(_);
	content = JSON.parse(content);

	//	console.log("Response: "+JSON.stringify(content));
	if (statusCode !== 200) {
		diagnoses.push({
			severity: "error",
			message: statusCode + ": " + http.STATUS_CODES[statusCode]
		});
		if (content && content.$diagnoses && content.$diagnoses.length !== 0) {
			for (var i in content.$diagnoses) {
				diagnoses.push(content.$diagnoses[i]);
			}
		}
		console.log("Diagnoses: " + JSON.stringify(diagnoses, null, 2));
	}
	return content;
};

var getJsonDescription = function(_, user, baseUrl, context, diagnoses) {

	// Generate trackingId
	var trackingId = helpers.uuid.generate();
	var url = baseUrl + "/AMIGDASH('Utilisateur~" + user.name + "')/$workingCopies?representation=AMIGDASH.$edit&trackingId=" + trackingId;
	// Create working copy
	var body = send(_, context, "POST", url, null, null, diagnoses);
	// Call AIMPORT method
	url = baseUrl + "/$workingCopies('" + trackingId + "')?representation=AMIGDASH.$edit";
	body = send(_, context, "PUT", url, null, {
		$trackingId: trackingId,
		$uuid: body.$uuid,
		$actions: {
			AIMPORT: {
				$isRequested: true,
				$parameters: {
					TYP: "Utilisateur",
					CLE: user
				}
			}
		},
		$etag: body.$etag
	}, diagnoses);
	// Retrieve prototype
	var urlProto = baseUrl + "/$prototypes('AMIGDASH.$edit')";
	var proto = send(_, context, "GET", urlProto, null, null, diagnoses);
	// Get Clob Url in prototype
	var clobUrl = proto && proto.$properties && proto.$properties.CLOB && proto.$properties.CLOB.$url;
	clobUrl = clobUrl.replace("{$baseUrl}", baseUrl);
	clobUrl = clobUrl.replace("{$trackingId}", trackingId);

	// Retrieve Clob content
	var clob = send(_, context, "GET", clobUrl, url, null, diagnoses);

	// Abort working copy creation
	body = send(_, context, "PUT", url, null, {
		$trackingId: trackingId,
		$uuid: body.$uuid,
		$actions: {
			$abort: {
				$isRequested: true
			}
		},
		$etag: body.$etag
	}, diagnoses);

	return clob;
};

exports.entity = {
	$descriptionTemplate: "X3 V6 Dashboard import profile",
	$valueTemplate: "",
	$properties: {
		description: {
			$title: "Description",
			$isLocalized: true,
			$linksToDetails: true,
			$isMandatory: true
		},
		dataset: {
			$title: "Dataset",
			//$isExcluded: true
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$description: "Select the X3 endpoint to import from",
			$type: "endPoint",
			$lookupFilter: {
				protocol: "x3"
			},
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				console.log("PROPAGATE...");
				if (val) {
					instance.dataset(_, val.dataset(_));
				} else {
					instance.dataset(_, "null");
				}
				//instance.users(_).reset(_);
				console.log("Dataset: " + instance.dataset(_));
			}
		},
		users: {
			$title: "Users",
			$description: "Users dashboard to be imported.",
			$type: "userProxies",
			$inlineStore: true,
			$select: {
				parameters: "dataset={dataset}"
			},
			$isDisabled: function(_, instance) {
				return instance.endpoint(_) == null;
			},

		},
	},
	$functions: {},
	$services: {
		import: {
			$title: "Import",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$capabilities: "abort",
			$execute: function(_, context, instance) {

				function importDashboard(_, user) {
					if (!instance.endpoint(_)) return;
					var t = context && context.tracker;
					//console.log("Tracker: "+util.inspect(t));
					var d = t ? (t.$diagnoses = t.$diagnoses || []) : null;
					//console.log("Diag: "+util.inspect(d));
					var options = {
						importMode: "update",
						$diagnoses: d,
						tracker: t,
						createSession: true
					};
					var baseUrl = context.baseUrl.split('/').slice(0, 3).join('/');
					baseUrl += instance.endpoint(_).getBaseUrl(_);
					var clob = getJsonDescription(_, user, baseUrl, context, d);
					jsonImport.jsonImportFromJson(_, user, clob, options);
				}
				try {
					var users = instance.users(_).toArray(_);
					for (var i in users) {
						console.log("Import dashboard for user: " + util.inspect(users[i].login(_)));
						importDashboard(_, users[i].login(_));
					}
				} catch (e) {
					console.error(e.stack);
				}

			}
		}
	}
};