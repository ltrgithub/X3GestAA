"use strict"

var jsurl = require("jsurl");
var globals = require('streamline/lib/globals');

exports.entity= {
	$titleTemplate: "Save as",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		saveAsOption: {
			$title: "Save as",
			$enum: [{
				$title: "Current variant",
				$value: "current_variant"
			}, {
				$title: "New personal copy",
				$value: "personal_copy"
			}, {
				$title: "New shared copy",
				$value: "shared_copy"
			}],
			$propagate: function(_, instance, val) {
				instance.variantCode(_, "");
				instance.variantTitle(_, "");
				instance.variantDescription(_, "");
				instance.roles(_).reset(_);
				instance.users(_).reset(_);
				instance.endpoints(_).reset(_);
				instance.isFactory(_, false);
				switch(val) {
				case "personal_copy":
					var up = globals.context.session.getUserProfile(_);
					up && instance.users(_).set(_, up.user(_));
					break;
				case "shared_copy":
					break;
				case "current_variant":
				case "factory_variant":
					instance._loadVariantData(_);
					break;
				}
			}
		},
		isFactory: {
			$title: "Factory variant",
			$type: "boolean",
			$isDisabled: function(_, instance) {
				return instance._variant && instance._variant._parent.hasFactoryVariant(_);
			}
		},
		variantCode: {
			$title: "Code",
			$isMandatory: true
		},
		variantTitle: {
			$title: "Title",
			$isMandatory: true
		},
		variantDescription: {
			$title: "Description"
		},
/*		parameters: {
			$title: "Parameters",
			$isHidden: true,
			$compute: function(_, instance) {
				return jsurl.stringify({
					saveAsOption: instance.saveAsOption(_),
					variantCode: instance.variantCode(_),
					variantTitle: instance.variantTitle(_),
					variantDescription: instance.variantDescription(_),
					roles: instance.roles(_).toUuidArray(_),
					users: instance.users(_).toUuidArray(_),
					endpoints: instance.endpoints(_).toUuidArray(_)
				});
			}
		}*/
	},
	$relations: {
		roles: {
			$title: "Applies to roles",
			$type: "roles",
			$isDefined: function(_, instance) {
				return (instance.saveAsOption(_) !== "personal_copy") && !instance.isFactory(_);
			}
		},
		users: {
			$title: "Applies to users",
			$type: "users",
			$isDefined: function(_, instance) {
				return !instance.isFactory(_);
			}
		},
		endpoints: {
			$title: "Applies to endpoints",
			$type: "endPoints",
			$isDefined: function(_, instance) {
				return (instance.saveAsOption(_) !== "personal_copy") && !instance.isFactory(_);
			}
		}		
	},
	$functions: {
		$setParameters: function(_, context) {
			this._initialize(_, context);
			//
			this._variantId = context.parameters && context.parameters.variantId;
			this._pageType = context.parameters && context.parameters.pageType;
			//
			var v = this._getVariant(_);
			if(v) {
				// set saveAsOption before load variant 
				this.saveAsOption(_, v.isFactory(_) ? "personal_copy" : "current_variant");
				this._loadVariantData(_, v);
				this._variant = v;
			} else
				this.saveAsOption(_, "personal_copy");
		},
		_getVariant: function(_) {
			var pageDef;
			var variant;
			var pageEntity;
			//
			pageEntity = this._db.model.getEntity(this._pageType === "page" ? "pageDef" : "dashboardDef");
			//
			if(this._variantId) {
				var where = {};
				where["variants"] = this._variantId;
				pageDef = this._db.fetchInstance(_, pageEntity, {
					jsonWhere: where
				});
				return pageDef && pageDef.variants(_).get(_, this._variantId);
			}
			return null;
		},
		_loadVariantData: function(_, paramV) {
			var v = paramV || this._getVariant(_);
			if(!v) return;
			if(this.saveAsOption(_) === "current_variant") {
				this.isFactory(_, v.isFactory(_));
				this.variantCode(_, v.code(_));
				this.variantTitle(_, v.title(_));
				this.variantDescription(_, v.description(_));
				var r = this.roles(_);
				v.roles(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
				var r = this.users(_);
				v.users(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
				var r = this.endpoints(_);
				v.endpoints(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
			}
		}
	}
}