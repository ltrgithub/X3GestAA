"use strict";

var jsurl = require("jsurl");
var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");

exports.entity= {
	$titleTemplate: "Save as",
	$valueTemplate: " ",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		saveAsOption: {
			$title: "Save as",
			$enum: function(_, instance) {
				var values = [];
				values.push({
					$title: locale.format(module, "personalVariantEnumTitle"),
					$value: "personal_copy"
				});
				values.push({
					$title: locale.format(module, "sharedVariantEnumTitle"),
					$value: "shared_copy"
				});
				if(instance._canCreateGlobal(_)) 
					values.push({
						$title: locale.format(module, "globalVariantEnumTitle"),
						$value: "global_variant"
					});
				if(instance._canCreateFactory(_)) 
					values.push({
						$title: locale.format(module, "factoryVariantEnumTitle"),
						$value: "factory_variant"
					});
				//
				return values;
			},
			$propagate: function(_, instance, val) {
/*				instance.variantCode(_, "");
				instance.variantTitle(_, "");
				instance.variantDescription(_, "");*/
				instance.roles(_).reset(_);
				instance.users(_).reset(_);
				instance.endpoints(_).reset(_);
				instance.personalCopy(_, false);
				instance.isFactory(_, false);
				switch(val) {
				case "personal_copy":
					instance.personalCopy(_, true);
					break;
				case "shared_copy":
					break;
				case "global_variant":
					break;
				case "factory_variant":
					instance.isFactory(_, true);
					//
//					if(!instance.variantCode(_))
						instance.variantCode(_, locale.format(module, "defaultCode"));
//					if(!instance.variantTitle(_))
						instance.variantTitle(_, locale.format(module, "defaultTitle"));
//					if(!instance.variantDescription(_))
						instance.variantDescription(_, locale.format(module, "defaultDescription"));
					break;
				}
			},
			$isDefined: function(_, instance) {
			//	return !instance._existsFactoryVariant;
				return true;
			}
		},
		factoryStatus: {
			$title: "Factory",
			$compute: function(_, instance) {
				if(instance._existsFactoryVariant) {
					return instance._currentIsFactory ? locale.format(module, "myselfFactory") : locale.format(module, "existsFactory");
				} else 
					return "";
			},
			$isHidden: function(_, instance) {
				return !instance._existsFactoryVariant;
			}
		},
		isFactory: {
			$title: "Factory variant",
			$type: "boolean",
			$isDisabled: function(_, instance) {
				return instance._variant && instance._variant._parent.hasFactoryVariant(_);
			},
			$isHidden: function(_, instance) {
				//return instance._existsFactoryVariant;
				return true;
			}
		},
		personalCopy: {
			$title: "Personal copy",
			$type: "boolean",
			$isDefined: function(_, instance) {
				return !instance.isFactory(_);
			},
			$propagate: function(_, instance, val) {
				var up = globals.context.session.getUserProfile(_);
				var user = up && up.user(_);
				if(!user) return;
				if(val) {
					instance.users(_).set(_, user);
				} else {
					instance.users(_).deleteInstance(_, user.$uuid);
				}
			}
		},
		variantCode: {
			$title: "Code",
			$isMandatory: true
		},
		variantTitle: {
			$title: "Title",
			$isMandatory: true
		},
		variantDescription: {
			$title: "Description"
		}
	},
	$relations: {
		roles: {
			$title: "Applies to roles",
			$type: "roles",
			$isDefined: function(_, instance) {
				//return !instance._isPersonal(_) && !instance.isFactory(_);
				return instance.saveAsOption(_) === "shared_copy";
			}
		},
		users: {
			$title: "Applies to users",
			$type: "users",
			$isDefined: function(_, instance) {
				//return !instance._isPersonal(_) && !instance.isFactory(_);
				return instance.saveAsOption(_) === "shared_copy";
			}
		},
		endpoints: {
			$title: "Applies to endpoints",
			$type: "endPoints",
			$isDefined: function(_, instance) {
				//return !instance._isPersonal(_) && !instance.isFactory(_);
				return instance.saveAsOption(_) === "shared_copy";
			}
		}		
	},
	$functions: {
		$setParameters: function(_, context) {
			this._initialize(_, context);
			//
			this._variantId = context.parameters && context.parameters.variantId;
			this._pageType = context.parameters && context.parameters.pageType;
			//
			var v = this._getVariant(_);
			if(v) {
				// set saveAsOption before load variant 
//				this.saveAsOption(_, v.isFactory(_) ? "personal_copy" : "current_variant");
				this._loadVariantData(_, v);
				this._variant = v;
			}/* else
				this.saveAsOption(_, "personal_copy");*/
			this.saveAsOption(_, "shared_copy");
//			this.personalCopy(_, true);
		},
		_getVariant: function(_) {
			var pageDef;
			var variant;
			var pageEntity;
			//
			pageEntity = this._db.model.getEntity(_, this._pageType === "page" ? "pageDef" : "dashboardDef");
			//
			if(this._variantId) {
				var where = {};
				where["variants"] = this._variantId;
				pageDef = this._db.fetchInstance(_, pageEntity, {
					jsonWhere: where
				});
				return pageDef && pageDef.variants(_).get(_, this._variantId);
			}
			return null;
		},
		_loadVariantData: function(_, paramV) {
			var v = paramV || this._getVariant(_);
			if(!v) return;
			this._existsFactoryVariant = v._parent.hasFactoryVariant(_);
			this._currentIsFactory = v.isFactory(_);
/*			if((this.saveAsOption(_) === "current_variant") || (this.saveAsOption(_) === "factory_variant")) {
				this.isFactory(_, v.isFactory(_) || false);
				this.variantCode(_, v.code(_));
				this.variantTitle(_, v.title(_));
				this.variantDescription(_, v.description(_));
				var r = this.roles(_);
				v.roles(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
				var r = this.users(_);
				v.users(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
				var r = this.endpoints(_);
				v.endpoints(_).toArray(_).forEach_(_, function(_, vItem) {
					r.set(_, vItem);
				});
			}*/
		},
		_canCreateFactory: function(_) {
			var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
			return !this._existsFactoryVariant && (!sp || !sp.authoringLevel(_) || (sp.authoringLevel(_) === "sage"));
		},
		_canCreateGlobal: function(_) {
			var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
			return !sp || !sp.authoringLevel(_) || (sp.authoringLevel(_) === "sage") || (sp.authoringLevel(_) === "admin");
		},
		_isPersonal: function(_) {
			return this.saveAsOption(_) === "personal_copy";
		}
	}
}