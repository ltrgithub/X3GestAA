"use strict";

var _contentSolverMap = {
	$menu: function(_, portlet, endpoint) {
		var links = {};
		var hasLinks = false;
		var items = portlet.items(_).toArray(_);
		items.forEach_(_, function(_, item) {
//			endpoints.forEach_(_, function(_, endpoint) {
				if(item.application(_) && (endpoint.applicationRef(_).$uuid !== item.application(_).$uuid))
					return;
				//
				var itemKey = item.code(_) || item.$uuid;
				if(!item.application(_)) {
					// add it just once
					if(!links[itemKey])
						links[itemKey] = item.getLink(_, endpoint);
				} else {
					var link = links[itemKey] = item.getLink(_, endpoint);
				}
				hasLinks = true;
//			});
		});
		//
		return hasLinks ? {
				$format: "$menu",
				$links: links,
				$article: portlet.article(_)
			} : null;
	},
	$page: function(_, portlet, endpoint) {
		if(endpoint && portlet.pageItem(_)) {
			return {
				$location: portlet.pageItem(_).getLink(_, endpoint)
			}
		}
		return null;
	}
}

exports.entity = {
	$titleTemplate: "Vignette",
	$descriptionTemplate: "Vignette",
	$valueTemplate: "{title}",
	$listTitle: "List of vignettes",
	$properties: {
		code: {
			$title: "Code"
		},
		title: {
			$title: "Title",
			$isMandatory: true,
			$linksToDetails: true,
			$isLocalized: true,
			
				$isUnique: true
			},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		type: {
			$title: "Type",
			$enum: [{
				$value: "$menu",
				$title: "Menu"
			},{
				$value: "$page",
				$title: "Page"
			},],
			$isMandatory: true,
			$default: "$menu"
		},
		article: {
			$title: "Article",
			$type: "json",
			$isHidden: true
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "portlets",
			$propagate: function(_, instance, val) {
				var appUuid = val && val.$uuid;
				if(instance.endpoint(_) && (instance.endpoint(_).applicationRef(_).$uuid !== appUuid))
					instance.endpoint(_, null);
				instance.items(_).toArray(_).forEach_(_, function(_, item) {
					if(item.application(_) && (item.application(_).$uuid !== appUuid))
						instance.items(_).deleteInstance(_, item.$uuid);
				});
				if(instance.pageItem(_) && instance.pageItem(_).application(_) && (instance.pageItem(_).application(_).$uuid !== appUuid))
					instance.pageItem(_, null);
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$lookupFilter: {
				applicationRef: "{application}"
			}
		},
		items: {
			$title: "Items",
			$type: "menuItems",
			$inv: "menus",
			$lookupFilter: {
				application: "{application}",
				endpoint: "{endpoint}"
			},
			$isDefined: function(_, instance) {
				return (instance.type(_) === "$menu");
			}
		},
		pageItem: {
			$title: "Page content",
			$type: "menuItem",
			$lookupFilter: {
				application: "{application}",
				endpoint: "{endpoint}"
			},
			$isDefined: function(_, instance) {
				return (instance.type(_) === "$page");
			}
		},
		categories: {
			$title: "Categories",
			$type: "menuCategories"
		}
	},
	$services: {
		representation : {
			// get mobile application structure (list of representations used by this portlet)
			$method : "POST",
			$isHidden : true,
			$isMethod : true,
			$title : "Mobile Application Structure",
			$execute : function(_, context, instance) {
				var params = JSON.parse(context.request.readAll(_));
				var key = instance.computeKey();
				var res = {
					home: instance.computeKey(), // home dashboard 
					entities: {},                // list of entities used by this application
					pages: {},     				 // pages used by this mobile application
					dashboards: {}, 			 // dashboards used by this mobile application
					footer: []					 // footer items
				};
				// add default page home 
				res.dashboards[key] = []; 
				instance.getMobileStruct(_, context, params, res);
				context.reply(_, 200, res);
			}
		}	
	},
	$functions: {
		getContent: function(_, endpoints) {
			var p = _contentSolverMap[this.type(_)] && _contentSolverMap[this.type(_)](_, this, endpoints);
			if(p) {
				p.$type = "application/x-portlet";
				p.$title = this.title(_);
				p.$description = this.description(_);
				p.$properties = {};	
			}
			//
			return p;
		},
		
		getMobileStruct: function(_, context, params, res) {
			var instance = this;
			if (instance.type(_) === "$menu") {
				var key = instance.computeKey();
				var items = instance.items(_).toArray(_);
				items.forEach_(_, function(_, item) {
					if (item.linkType(_) === "$representation") {
						var app = item.applicationName(_),
							contract = item.contractName(_),
							endpoint = item.endpointName(_);
						if ((!app || (app == params.applicationName)) && 
							(!contract || (contract == params.contractName)) && 
							(!endpoint || (endpoint == params.endpointName))) {
							var data = {};
							data.title = item.title(_); 
							data.description = item.description(_); 
							data.icon = item.icon(_); 
							data.entity = item.entity(_);
							data.representation = item.representation(_);
							data.facet  = item.facet(_);
							res.dashboards[key] = res.dashboards[key] || [];
							res.entities[data.entity] = res.entities[data.entity] || {};
							var ce = res.entities[data.entity];
							ce[data.representation] = res.entities[data.representation] || {};
							ce = ce[data.representation]; 
							ce[data.facet] = ce[data.facet] || {};
							if (item.applicationMenu(_)) 
								res.footer.push(data); 
							else
								res.dashboards[key].push(data);
						}		
					} else if (item.linkType(_) === "$dashboard") {
						// TODO add dashboard
					}
				});
			}
			return res;
		}
	},
	$searchIndex: {
		$fields: ["code", "title", "description", "application", "endpoint", "type", "items", "pageItem", "categories"]
	},
	$defaultOrder: [["title", true]]
}