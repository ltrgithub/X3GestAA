"use strict";

var ez = require("ez-streams");
var locale = require("syracuse-core/lib/locale");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
	$isPersistent: false,
	$titleTemplate: "Folder",
	$descriptionTemplate: "Folder",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name"
		},
		version: {
			$title: "Version"
		}
	},
	// standard functions
	$fetchInstances: function(_, context, parameters) {
		var self = this;

		var baseUrl, solutionName;
		if (parameters.x3solutionUuid) {
			var adminDb = adminHelper.getCollaborationOrm(_);
			var ent = adminDb.getEntity(_, "x3solution");


			var solution = adminDb.fetchInstance(_, ent, parameters.x3solutionUuid);
			if (solution) {
				baseUrl = solution.baseUrl(_);
				solutionName = solution.solutionName(_);
			} else {
				throw new Error(locale.format(module, "solutionMustBeSaved"));
			}


		} else {
			// get the endpoint (working copy)
			var ep = context.httpSession[context.parameters.trackingId];
			if (!ep) throw new Error(locale.format(module, "endpointNotFound", context.parameters.trackingId));
			// get folders.json from solution web public rep.
			var x3solution = ep.x3solution(_);
			baseUrl = "http://" + (x3solution.webServer(_) || x3solution.serverHost(_)) + ":" + x3solution.webServerPort(_);
			solutionName = ep.getSolutionName(_);
			if (!x3solution) return [];
		}

		var url = baseUrl + "/" + ["Adonix_" + solutionName, "FOLDERS.json"].join("/");
		console.error("URL: " + url);
		var options = {
			url: url,
			method: "GET"
		};
		var request = ez.devices.http.client(options);
		var resp = request.end().response(_);
		var items = [];
		if (resp.statusCode >= 400) {
			var error;
			if (resp.statusCode === 404) {
				error = new Error(locale.format(module, "foldersNotFound", url));
			} else {
				error = new Error(resp.readAll(_));
			}
			error.statusCode = resp.statusCode;
			throw error;
		} else {
			var folders = JSON.parse(resp.readAll(_));
			folders.folders.forEach_(_, function(_, folder) {
				var item = self.factory.createInstance(_, null, context.db, context);
				item.name(_, folder.name);
				item.version(_, folder.version);
				//
				items.push(item);
			});
			//
			//			context.totalCount = folders.folders.length;
		}
		//
		return items;
	},
	$defaultOrder: [
		["name", true]
	]
};