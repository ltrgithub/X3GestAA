"use strict";

var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var datetime = require("syracuse-core/lib/types/datetime");

// This entity is not persistent 
// Data are provided on demand by sessionManager
// Entity data are provided by convergenceSession.cvgAdmSessInfo
exports.entity = {
	$lockType: "noLock",
	$canDelete: false,
	$canCreate: false,
	$canEdit: false,
	$capabilities: "",
	$isPersistent: false,
	$titleTemplate: "Convergence session status",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties:{ 
		syralogin: {
			$title: "UserLogin",
			$displayLength:10
		},
		userhost: {
			$title: "User hostname",
			$displayLength:10
		},
		x3host: {
			$title: "x3Host",
			$displayLength:10
		},
		x3port: {
			$title: "x3Port",
			$displayLength:5
		},
		x3solution: {
			$title: "x3Solution",
			$displayLength:8
		},
		x3folder: {
			$title: "x3Folder",
			$displayLength:8
		},
		x3user: {
			$title: "x3User",
			$displayLength:10
		},
		x3lang: {
			$title: "x3Lang.",
			$displayLength:5
		},
		open: {
			$title: "open",
			$displayLength:4,
			$type: "boolean",
		},
		reused: {
			$title: "reused",
			$displayLength:5,
			$type: "boolean",
		},
		lastAccess: {
			$title: "Last access",
			$type: "datetime",
			$displayLength:9
		},
		sid: {
			$title: "Session id",
			$displayLength:20,
			$isHidden: true,
		},
		syraid: {
			$title: "Syracuse id",
			$displayLength:20,
			$isHidden: true,
		}
	},
	$relations: {
	},
	$functions: {	
		$setId: function(_, context, id) {
			// instance as the same id as convergenceSession
			var sessInfo=sessionManager.cvgAdmSessInfo(_, id);
			// error could occur if kill service is called on a session which has been closed by timeout (list must be refreshed before kill action)
			if (sessInfo==null) throw new Error ("Convergence session not found in list\nid=" + id);
			// fulfill instance
			for (var p in sessInfo){
				this[p](_, sessInfo[p]);
			}
		}
	},
	$services: {
	    kill: {
			$method : "GET",
			$confirm: "This operation will delete the session and close assciated X3 clients.\n\nDo you want to continue ?",
			$isMethod : true,
			$title : "Kill session",
			$execute : function(_, context) {
				try{
					var inst=context.instance;
					if (inst){
						var syraSess=sessionManager.sessionById(inst.syraid(_));
						if (syraSess) syraSess.closeFusionSession(inst.sid(_),false,_);
						else throw new Error ("Syracuse session not found\nid=" + inst.syraid(_));
					}else throw new Error ("Instance not found in context");
					return {$diagnoses: [{severity: "info", message: "Session has been deleted"}]};
				}catch(e){
					return {$diagnoses: [{severity: "error", message: e.message}]};
				}
			}
		}
	},
	$fetchInstances: function(_, context, parameters) {
		var result = [], self = this;
		var entity = context.db.model.getEntity("fusionSession");
		var sessInfos = sessionManager.cvgAdmSessInfos(_);
		sessInfos.forEach_(_, function(_, info) {
			var inst = entity.factory.createInstance(_, null, context.db);
			for (var p in info){
				if (inst[p]) inst[p](_, info[p]);
			}
			// same uid as convergence session in order to be able to retrieve the instance in context.instance - see kill service
			inst.$uuid=info.sid;
			result.push(inst);
		});
		return result;
	},
	$defaultOrder: [["syralogin", true],["userhost", true]]
}