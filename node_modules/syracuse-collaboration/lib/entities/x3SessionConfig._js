"use strict";
/// !doc
///
/// # Session configuration entity  
///
/// This entity is not persistent.  
/// Information managed by it are attached to the http session.  
/// 
var globals = require("streamline/lib/globals");
var ez = require('ez-streams');

var locale = require("syracuse-core/lib/locale");
var sadFsq = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient');
var SadFsqClient = sadFsq.SadFsqClient;

var flamegraph = require('streamline-flamegraph/lib/flamegraph.js');
var x3Transform = require('syracuse-flamegraph/lib/x3Transform._js');

var pool = require("syracuse-x3/lib/pool");

exports.entity = {
	$titleTemplate: "Session log activation",
	$isPersistent: false,
	$canDelete: false,
	$canCreate: false,
	$canSave: false,
	$autoRecreateWorkingCopy: true,
	$helpPage: "Administration-reference_X3-Session-configuration",
	/// ## Properties
	$properties: {
		cpuGraph: {
			$title: "CPU Graph",
			$type: "image",
			$storage: "db_file",
			$isReadOnly: true
		},
		dataset: {
			$title: "Dataset",
			$isExcluded: true
		}
	},
	/// ## Relations
	$relations: {
		/// * **endPoint** - Endpoint: Endpoint for which the log is activated (all endpoints if none is specified)
		///
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isHidden: function(_, instance) {
				return true;
			},
			$propagate: function(_, instance, val) {
				if (val) instance.dataset(_, val.dataset(_));
				else instance.dataset(_, "");
			}
		}
	},
	$init: function(_, instance, context) {
		context.httpSession.x3SessionConfig = context.httpSession.x3SessionConfig || {};
	},

	$functions: {},
	/// ## Services
	$services: {
		/// * **submit**: Apply changes
		start: {
			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: true,
			$title: "Start",
			$execute: function(_, context, instance) {
				try {
					if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
						var up = globals.context.session && globals.context.session.getUserProfile(_);
						var user = up.user(_);
						var endpoint = up.selectedEndpoint(_);
						endpoint.postService(_, "resetLog");
						context.httpSession.x3SessionConfig.runtime.logId++;
					} else {
						context.httpSession.x3SessionConfig = context.httpSession.x3SessionConfig || {};
						instance.$diagnoses = instance.$diagnoses || [];

						var runtimeCfg = context.httpSession.x3SessionConfig.runtime = (context.httpSession.x3SessionConfig.runtime || {});
						runtimeCfg.runtimeLog = true;
						runtimeCfg.logFlag = 1;
						runtimeCfg.dataset = instance.endpoint(_) ? instance.endpoint(_).dataset(_) : null;
						runtimeCfg.logDir = "TRA";
						runtimeCfg.logId = 0;

						instance.$diagnoses.push({
							$severity: "info",
							$message: locale.format(module, "runtimeLogEnabled")
						});

						var up = globals.context.session && globals.context.session.getUserProfile(_);
						var user = up.user(_);
						var endpoint = up.selectedEndpoint(_);
						var client = pool.getClient(_, globals.context.session, endpoint);

					}

				} catch (e) {
					context.httpSession.x3SessionConfig = {};
					console.error(e.stack);
					return {
						$diagnoses: [{
							severity: "error",
							message: e.message
						}]
					};
				}
			}
		},
		generate: {
			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: true,
			$title: "Generate Graph",
			$execute: function(_, context, instance) {
				try {
					if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
						var up = globals.context.session && globals.context.session.getUserProfile(_);

						var user = up.user(_);
						var endpoint = up.selectedEndpoint(_);
						var userName = user.getEndpointLogin(_, endpoint.$uuid).toLowerCase();

						var client = pool.getClient(_, globals.context.session, endpoint);

						var fileName = ["x3diary", userName, client.getProcessId(), context.httpSession.x3SessionConfig.runtime.logId].join('_');
						var x3server = endpoint.x3server(_);
						var sadfs = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);

						var fileOptions = {
							folder: endpoint.x3ServerFolder(_),
							path: "TRA",
							name: fileName,
							extension: "tra"
						};

						var tra = sadfs.readFile(_, fileOptions, {
							flag: "r",
							encoding: "utf-8"
						});

						if (tra && tra.length) {
							var src = ez.devices.buffer.reader(tra);
							var data = x3Transform.convert(_, src);

							var options = {
								href: "https://github.com/Sage-ERP-X3/Syracuse/tree/master/{0}#L{1}",
								target: "_blank",
								codes: data.codes,
								frames: data.frames,
								frameformat: "{2} ({0}:{1})",
								palette: {
									"io": "rgb(0,255,255)"
								},
								hash: 2
							};

							var svg = flamegraph.makesvg(data.res, options);
							instance.cpuGraph(_, svg);

							var writer = instance.cpuGraph(_).createWritableStream(_, {
								contentType: "image/svg+xml",
								fileName: "cpuGraph.svg",
							});
							writer.write(_, svg, "binary");
							writer.write(_, null);
						}
					}
				} catch (e) {
					context.httpSession.x3SessionConfig = {};
					console.error(e.stack);
					return {
						$diagnoses: [{
							severity: "error",
							message: e.message
						}]
					};
				}
			}
		},
		stop: {
			$method: "POST",
			// $confirm: "This operation will change the X3 runtime configuration of all subsequent sessions.\n\nDo you want to continue ?",
			$isMethod: true,
			$title: "Stop",
			$execute: function(_, context, instance) {
				try {
					if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
						delete context.httpSession.x3SessionConfig.runtime;
						instance.$diagnoses.push({
							$severity: "info",
							$message: locale.format(module, "runtimeLogDisabled")
						});

					}
				} catch (e) {
					context.httpSession.x3SessionConfig = {};
					console.error(e.stack);
					return {
						$diagnoses: [{
							severity: "error",
							message: e.message
						}]
					};
				}
			}
		}
	},
	$fetchInstances: function(_, context, parameters) {
		return [];
	}
};