"use strict";

var fs = require('fs');
var fsp = require('path');

exports.entity = {
	$properties: {
		code: {
			$title: "Locale code",
			$isMandatory: true,
			$linksToDetails: true,
			$constraints: {
				$isUnique: true
			},
			$propagate: function(_, instance, val) {
				// get default parameters from locale files
				try {
					// read params from "syracuse-core/lib/types/resources/val
					var localeParams = JSON.parse(fs.readFile(fsp.join(__dirname, "../../../syracuse-core/lib/types/resources", "date-"+val+".json"), "utf8", _));
					if(localeParams.name && (instance.code(_) !== localeParams.name))
						instance.code(_, localeParams.name);
					instance.description(_, localeParams.nativeName);
					instance.shortDate(_, localeParams.formatPatterns.shortDate);
					instance.longDate(_, localeParams.formatPatterns.longDate);
					instance.shortTime(_, localeParams.formatPatterns.shortTime);
					instance.longTime(_, localeParams.formatPatterns.longTime);
					instance.shortDatetime(_, localeParams.formatPatterns.shortDate + " " + localeParams.formatPatterns.shortTime);
					instance.longDatetime(_, localeParams.formatPatterns.fullDateTime);
					instance.firstDayOfWeek(_, localeParams.firstDayOfWeek);
					instance.twoDigitYearMax(_, localeParams.twoDigitYearMax);
				} catch(e) {
					// ignore error for this case. warning later ?
				}
			},
			$lookup: {
				entity: "lookupLocale",
				field: "name"
			}
		},
		description: {
			$title: "Description",
			$isMandatory: true
		},
		enabled: {
			$title: "Enabled",
			$type: "boolean",
			$default: false
		},
		shortDate: {
			$title: "Date format",
			$isMandatory: true
		},
		longDate: {
			$title: "Long date format",
			$isMandatory: true
		},
		shortTime: {
			$title: "Time format",
			$isMandatory: true
		},
		longTime: {
			$title: "Long time format",
			$isMandatory: true
		},
		shortDatetime: {
			$title: "Date/time format",
			$isMandatory: true
		},
		longDatetime: {
			$title: "Long date/time format",
			$isMandatory: true
		},
		firstDayOfWeek: {
			$title: "First day of week",
			$isMandatory: true,
			$type: "integer",
			$enum: [0, 1, 2, 3, 4, 5, 6],
			$enumCaptions: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
			$default: 1
		},
		twoDigitYearMax: {
			$title: "Two digit date's max year",
			$isMandatory: true,
			$type: "integer",
			$default: 2029	
		},
		numberDecimalSeparator: {
			$title: "Number decimal separator",
			$isMandatory: true,
			$format: "$combo",
			$enum: [".", ","],
			$enumCaptions: [". (dot)", ", (comma)"]
		},
		numberGroupSeparator: {
			$title: "Number group separator",
//			$isMandatory: true,
			$format: "$combo",
			$enum: [" ", ".", ",", "", "'"],
			$enumCaptions: ["Space", ". (dot)", ", (comma)", "None", "' (hyphen)"]
		},
		numberGroupSize:{
			$title: "Number group size",
			$type: "integer",
			$default: 3
		}
	},
	$functions: {
		toLocaleStructure: function(_) {
			return {
				code: this.code(_),
				shortDate: this.shortDate(_),
				longDate: this.longDate(_),
				shortTime: this.shortTime(_),
				longTime: this.longTime(_),
				shortDatetime: this.shortDatetime(_),
				longDatetime: this.longDatetime(_),
				firstDayOfWeek: this.firstDayOfWeek(_),
				twoDigitYearMax: this.twoDigitYearMax(_),
				numberDecimalSeparator: this.numberDecimalSeparator(_),
				numberGroupSeparator: this.numberGroupSeparator(_),
				numberGroupSize: this.numberGroupSize(_)
			}
		}
	},
	$titleTemplate: "Locales",
	$valueTemplate: "{description} {code}",
	$descriptionTemplate: "Localization preferences",
	$defaultOrder: [["code", true]]
}