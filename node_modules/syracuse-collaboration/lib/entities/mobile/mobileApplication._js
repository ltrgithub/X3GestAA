"use strict";

var globals = require('streamline/lib/globals');
var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;

exports.entity = {
	$titleTemplate: "Mobile application",
	$descriptionTemplate: "Mobile application definition",
	$valueTemplate: "{title}",
	$properties: {
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true,
			$isMandatory: true
		},
		applicationName: {
			$title: "Mobile application name",
			$isMandatory: true,
			$isUnique: true
		}
	},
	$relations: {
		roles: {
			$type: "roles",
			$title: "Roles",
			$inv: "mobileApplications",
			$isComputed: true
		},
		homeDashboard: {
			$title: "Home dashboard",
			$type: "mobileDashboard",
			$isMandatory: true
		}
	},
	$searchIndex: {
		$fields: ["title", "description", "applicationName"]
	},
	$services: {
		/*
		 * return all mobile applications assigned with the current role
		 */
		availableApplications: {
			$isHidden: false,
			$method: "GET",
			$isMethod: false,
			$title: "Get available applications",
			$overridesReply: true,
			$execute: function(_, context) {
				var $resources = [];
				if (globals.context && globals.context.session) {
					var up = globals.context.session.getUserProfile(_);
					var upRole = up.selectedRole(_);
					if (upRole) {
						upRole.mobileApplications(_).toArray(_).forEach_(_, function(_, mobileApplication) {
							$resources.push({
								$metaDataUrl: context.baseUrl + "/mobileApplications('" + mobileApplication.$uuid + "')/$service/applicationMetaData",
								$uuid: mobileApplication.$uuid,
								applicationName: mobileApplication.applicationName(_),
								title: mobileApplication.title(_),
								description: mobileApplication.description(_)
							});
						});
					}
				}
				context.reply(_, 200, {
					$resources: $resources
				});
			}
		},
		applicationMetaData: {
			$isHidden: true,
			$method: "GET",
			$isMethod: true,
			$title: "Get application meta data",
			$overridesReply: true,
			$execute: function(_, context, instance) {

				var applicationData = {
					$application: {
						$metaDataUrl: context.baseUrl + "/mobileApplications('" + instance.$uuid + "')/$service/applicationMetaData",
						$uuid: instance.$uuid,
						applicationName: instance.applicationName(_),
						title: instance.title(_),
						description: instance.description(_),
						$homeDashboard: {
							$uuid: instance.homeDashboard(_).$uuid,
							dashboardName: instance.homeDashboard(_).dashboardName(_)
						}
					},
					$dashboards: {},
					$gadgets: {},
					$pages: {},
					$entities: {}
				};

				if (globals.context && globals.context.session) {
					var up = globals.context.session.getUserProfile(_);
					var upEndpoint = up.selectedEndpoint(_);
					if (upEndpoint) {
						var helpers = {
							db: instance._db,
							endpoint: upEndpoint,
							context: context,
							applicationName: upEndpoint.application(_),
							endpointName: upEndpoint.dataset(_),
							contractName: upEndpoint.contract(_),
							pageEntity: context.model.getEntity(_, "page")
						};

						_processDashboard(_,
							helpers,
							applicationData,
							instance.homeDashboard(_)
						);

						_traversePages(_,
							helpers,
							applicationData);
					}
				}
				context.reply(_, 200, applicationData);
			}
		}
	}
};

function _processDashboard(_, helpers, applicationData, dashboard) {
	var dashboardName = dashboard.dashboardName(_);
	if (applicationData.$dashboards[dashboardName]) {
		return;
	}
	console.log("dashboard:" + dashboardName);

	var output = {
		$vignettes: []
	};
	dashboard.vignettes(_).toArray(_).forEach_(_, function(_, vignette) {
		var gadget = vignette.gadget(_);
		var data = {
			$uuid: gadget.$uuid,
			$displayStyle: vignette.displayStyle(_)
		};
		output.$vignettes.push(data);
		_processGadget(_, helpers, applicationData, gadget);
	});

	applicationData.$dashboards[dashboardName] = output;
}

function _processGadget(_, helpers, applicationData, gadget) {
	if (applicationData.$gadgets[gadget.$uuid]) {
		return;
	}

	var gt = gadget.gadgetType(_);
	var data = {
		$type: gt
	};

	switch (gt) {
		case "$dashboard":
			var dashboardName = gadget.mobileDashboard(_);
			var dashboard = _readDashboard(_, helpers, dashboardName);
			if (dashboard) {
				data["$dashboardName"] = dashboardName;
				_processDashboard(_, helpers, applicationData, dashboard);
			} else {
				data = null;
			}
			break;
		case "$representation":
			var action = gadget.action(_);
			var entity = gadget.entity(_);
			var representation = gadget.representation(_);
			var facet = _getFacetForAction(action);
			data["$entity"] = entity;
			data["$action"] = action;
			data["$representation"] = representation;
			data["$facet"] = facet;
			_processPage(_, helpers, applicationData, representation, facet);
			break;
		default:
			console.log("Unknown gadget type: " + gt);
			data = null;
			break;
	}
	if (data) {
		applicationData.$gadgets[gadget.$uuid] = data;
	}
}

function _readDashboard(_, helpers, dashboardName) {
	var dashboard = helpers.db.fetchInstance(_, helpers.db.getEntity(_, "mobileDashboard", "$details"), {
		jsonWhere: {
			dashboardName: dashboardName
		}
	});
	return dashboard;
}

function _getFacetForAction(action) {
	return (action === "$create" ? "$edit" : action);
}

function _processPage(_, helpers, applicationData, representation, facet) {
	var pageName = representation + "." + facet;
	if (applicationData.$pages[pageName]) {
		return;
	}

	console.log("page: " + pageName);
	var opts = {
		application: helpers.applicationName,
		contract: helpers.contractName,
		endpoint: helpers.endpointName,
		representation: representation,
		facet: facet,
		device: "desktop",
		protoInPage: true
	};

	var page = helpers.pageEntity.pageContent(_, helpers.context, opts);
	applicationData.$pages[pageName] = {
		"$notParsedYet": page
	};
}

function _traversePages(_, helpers, applicationData) {
	var $pages = applicationData.$pages;
	var done = false;
	while (!done) {
		done = true;
		Object.keys(applicationData.$pages).forEach_(_, function(_, pageName) {
			var page = $pages[pageName];
			if (page.$notParsedYet) { // only traverse each page once!
				page = page.$notParsedYet;
				applicationData.$pages[pageName] = page;

				var rep = pageName.split(".");
				_parseProto(_, helpers, applicationData, page.$prototype, rep[0], rep[1]);
				done = false;
			}
		});
	}
}

function _parseProto(_, helpers, applicationData, prototype, representation, facet, allowedLinks) {
	var $links = prototype.$links;
	if (!$links) {
		return;
	}
	// Handle top level links $create, $delete, ...
	_parseLinks(_, helpers, applicationData, $links, allowedLinks);

	_parseProperties(_, helpers, applicationData, prototype.$properties, representation, facet);
}

function _parseProperties(_, helpers, applicationData, properties, representation, facet) {
	Object.keys(properties).forEach_(_, function(_, propName) {
		var prop = properties[propName];
		switch (prop.$type) {
			case "application/x-array":
				if (prop.$item.$type === "application/x-reference") {
					// TODO:
				} else {
					_parseProto(_, helpers, applicationData, prop.$item, representation, facet,
						facet === "$details" ? ["$details", "$summary"] : ["$lookup"]);
				}
				break;
			case "application/x-reference":
				_parseProto(_, helpers, applicationData, prop.$item, representation, facet, ["$lookup"]);
				break;
		}
	});
}

function _parseLinks(_, helpers, applicationData, links, allowedLinks) {
	Object.keys(links).forEach_(_, function(_, linkName) {
		if (!allowedLinks || allowedLinks.indexOf(linkName) > -1) { // If a list of allowed links is given, ignore other ones!
			var link = links[linkName];
			var url = link.$url;
			if (link.$isHidden) {
				return;
			}

			var rep = "representation=";
			var ir = url.indexOf(rep);
			if (url.indexOf("{$baseUrl}") != 0 || ir < 0) {
				console.log("Bad url: " + url);
			} else {
				var representation = url.substring(ir + rep.length);
				ir = representation.indexOf("&");
				if (ir > 0) representation = representation.substring(0, ir);
				representation = representation && representation.replace(/\{(.*?)\}/g, function(match, prop) {
					var value = proto[prop];
					return value || "";
				});

				var rep = representation.split(".");
				_processPage(_, helpers, applicationData, rep[0], rep[1]);
			}
		}
	});
}