"use strict";

// Testcase: /syracuse-collaboration/test/server/mobileApplicationTest._js

var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.entity = {
	$titleTemplate: "Mobile gadget",
	$descriptionTemplate: "Mobile gadget definition",
	$valueTemplate: "{title}",
	$allowFactory: true,
	$factoryExcludes: ["title", "description", "endpoint"],
	$properties: {
		code: {
			$title: "Code",
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true,
			$isDisabled: function(_, instance) {
				if (!instance.isFactory(_)) return false;
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return (sp && sp.authoringLevel(_) && (sp.authoringLevel(_) !== "sage"));
			}
		},
		title: {
			$title: "Title",
			$isMandatory: true,
			$linksToDetails: true,
			$isLocalized: true,
			$propagate: function(_, instance, val) {
				if (!instance.code(_) && val) {
					instance.code(_, val);
				}
			}
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		gadgetType: {
			$title: "Gadget type",
			$enum: [{
				$value: "$representation",
				$title: "Representation"
				/* do not support processes from the very beginning			
			}, {
				$value: "$process",
				$title: "Process"
					 */
			}, {
				$value: "$request",
				$title: "Request"
			}, {
				$value: "$stats",
				$title: "Statistics"
			}, {
				$value: "$dashboard",
				$title: "Dashboard page"
			}, {
				$value: "$external",
				$title: "External link"
			}],
			$default: "$representation",
			$isMandatory: true,
			$isDisabled: function(_, instance) {
				return false;
				return !instance.$created;
			}
		},
		icon: {
			$title: "Icon",
			$isNullable: true
		},
		entity: {
			$title: "Entity",
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isExcluded: false
		},
		representation: {
			$title: "Representation",
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isExcluded: false
		},
		action: {
			$title: "Action",
			$enum: [{
				$value: "$query",
				$title: "Query"
			}, {
				$value: "$cube",
				$title: "Statistics"
			}, {
				$value: "$details",
				$title: "Details"
			}, {
				$value: "$edit",
				$title: "Edit"
			}, {
				$value: "$create",
				$title: "Create"
			}],
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$default: "$query"
		},
		keyParameter: {
			$title: "Key",
			$isDefined: function(_, instance) {
				return ((instance.gadgetType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.action(_)) >= 0));
			},
			$isMandatory: function(_, instance) {
				return ((instance.gadgetType(_) === "$representation") && (["$details", "$edit", "$cube"].indexOf(instance.action(_)) >= 0));
			}
		},
		externalUrl: {
			$title: "Url",
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$external");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$external");
			}
		},
		mobileDashboard: {
			$title: "Mobile Dashboard",
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$dashboard");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$dashboard");
			},
			$lookup: {
				entity: "mobileDashboard",
				field: "dashboardName"
			}
		},
		requestName: {
			$title: "Request name",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$request");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$request");
			}
		},
		requestLevel: {
			$title: "Request level",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$request");
			},
			$default: "99"
		},
		statName: {
			$title: "Stat name",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$stats");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$stats");
			}
		},
		processName: {
			$title: "Process name",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$process");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$process");
			}
		},
		processLeg: {
			$title: "Process legislation",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$process");
			}
		},
		processMenu: {
			$title: "Process menu",
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$process");
			}
		},
		applicationName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			},
			$isExcluded: true
		},
		contractName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			},
			$isExcluded: true
		},
		endpointName: {
			$isHidden: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			},
			$isExcluded: true
		},
		referenceDataset: {
			$title: "Reference dataset",
			$isHidden: true,
			$compute: function(_, instance) {
				var ep = instance.endpoint(_);
				if (!ep && instance.application(_)) {
					// get default endpoint from groups (take the first one)
					if (!ep && (instance.application(_).protocol(_) === "x3")) {
						var up = globals && globals.context && globals.context.session && globals.context.session.getUserProfile(_);
						if (up) {
							var eps = up.getDefaultX3Endpoints(_);
							ep = eps && eps[0];
						}
					}
					// get the application's default endpoint
					if (!ep) ep = instance.application(_).defaultEndpoint(_);
				}
				//
				return ep && ep.dataset(_);
			},
			$isExcluded: true
		},
		isFactory: {
			$title: "Factory",
			$type: "boolean",
			$isDisabled: function(_, instance) {
				if (!instance.isFactory(_)) return false;
				var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
				return (sp && sp.authoringLevel(_) && (sp.authoringLevel(_) !== "sage"));
			}
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "menuItems",
			$isDefined: function(_, instance) {
				return (["$representation", "$process", "$request", "$stats"].indexOf(instance.gadgetType(_)) >= 0);
			},
			$isMandatory: function(_, instance) {
				return (["$representation", "$process", "$request", "$stats"].indexOf(instance.gadgetType(_)) >= 0);
			},
			$propagate: function(_, instance, val) {
				var r = instance.representationRef(_);
				if (val && r && (r.application(_) && (r.application(_).$uuid !== val.$uuid))) instance.representationRef(_, null);
			},
			$lookup: function(_, instance) {
				var ep = adminHelper.getCollaborationEndpoint(_);
				return (ep && {
					$type: "application/json",
					$url: ep.getBaseUrl(_) + "/applications?representation=application.$lookup"
				}) || {};
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isDisabled: function(_, instance) {
				return !instance.application(_);
			},
			$isDefined: function(_, instance) {
				return (["$representation", "$process", "$request", "$stats"].indexOf(instance.gadgetType(_)) >= 0);
			},
			$description: "Choose an endpoint for an endpoint specific function or representation",
			$lookupFilter: {
				applicationRef: "{application}"
			}
		},
		representationRef: {
			$title: "Representation",
			$type: "representationProxy",
			$inlineStore: true,
			isChild: true,
			$lookup: {
				parameters: "dataset={referenceDataset}"
			},
			$propagate: function(_, instance, val) {
				if (val) {
					instance.representation(_, val.representation(_));
					instance.entity(_, val.entity(_));
				} else {
					instance.representation(_, "");
					instance.entity(_, "");
				}
			},
			$isDisabled: function(_, instance) {
				return !instance.referenceDataset(_);
			},
			$isDefined: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			},
			$isMandatory: function(_, instance) {
				return (instance.gadgetType(_) === "$representation");
			}
		},
		parameters: {
			$title: "Parameters",
			$type: "mobileGadgetParams",
			$isChild: true
		}
	},
	$searchIndex: {
		$fields: ["code", "title", "description", "gadgetType", "application", "representationRef", "action", "mobileDashboard", "requestName", "processName", "statName"]
	}

};