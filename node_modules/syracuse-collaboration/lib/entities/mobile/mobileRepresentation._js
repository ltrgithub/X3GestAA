"use strict";

// Testcase: /syracuse-collaboration/test/server/mobileApplicationTest._js

var locale = require("syracuse-core/lib/locale");
var parser = require('syracuse-sdata/lib/parser/parser').Parser;

exports.entity = {
	$titleTemplate: "Mobile dashboard",
	$descriptionTemplate: "Mobile dashboard definition",
	$valueTemplate: "{title}",
	$isPersistent: false,
	$canEdit: false,
	$canDelete: false,
	$canCreate: false,
	$properties: {
		name: {
			$title: "Name",
			$isLocalized: false,
			$isMandatory: true
		},
		facet: {
			$title: "Facet",
			$isLocalized: false,
			$isMandatory: true
		},
		cacheType: { // not used yet
			$title: "Cache type",
			$isHidden: true,
			$enum: [{
				$value: "$auto",
				$title: "Automatic"
			}, {
				$value: "$all",
				$title: "All"
			}, {
				$value: "$filtered",
				$title: "Filter expression"
			}, {
				$value: "$nocache",
				$title: "No caching"
			}],
			$default: "$auto",
			$isMandatory: true
		},
		filter: { // not used yet
			$title: "Filter",
			$isLocalized: false,
			$isHidden: true,
			$isDefined: function(_, instance) {
				return (instance.cacheType(_) === "$filtered");
			},
			$isDisabled: function(_, instance) {
				if (["$query", "$lookup"].indexOf(instance.facet(_)) >= 0) {
					return (instance.cacheType(_) !== "$filtered");
				}
				return true;
			},
			$isMandatory: function(_, instance) {
				if (["$query", "$lookup"].indexOf(instance.facet(_)) >= 0) {
					return (instance.cacheType(_) === "$filtered");
				}
				return false;
			}
		}
	},
	$events: {
		$canSave: [

			function(_, instance) {
				if (instance.cacheType(_) === "$filtered") {
					if (["$query", "$lookup"].indexOf(instance.facet(_)) < 0) {
						instance.$addError(locale.format(module, "filterNotAllowed"), "cacheType");
					} else {
						try {
							var exp = parser.parse(instance.filter(_));
						} catch (e) {
							instance.$addError(e.message, "filter");
						}
					}
				}
			}
		]
	}
};