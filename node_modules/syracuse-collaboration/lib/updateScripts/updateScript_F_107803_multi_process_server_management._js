"use strict";
var helpers = require("syracuse-core/lib/helpers");
exports.tracer; // = console.log;

var _scripts = [];

function createX3Solution(_, db, x3serverData, solutionName) {
	x3serverData._id = helpers.uuid.generate('-');
	x3serverData.code = solutionName + " - " + x3serverData.description["en-us"] || x3serverData.description["default"];
	x3serverData.solutionName = solutionName;

	x3serverData.proxy = false;

	exports.tracer && exports.tracer("Create X3 solution: " + x3serverData.solutionName + " - " + x3serverData.code);
	var coll = db.db.collection("X3solution", _);
	coll.insert(x3serverData, _);
	_solutions[x3serverData.solutionName] = x3serverData._id;
	return x3serverData._id;
}

var _servers = {};
var _solutions = {};

function getX3server(_, db, uuid) {
	if (!_servers[uuid]) {
		var coll = db.db.collection("X3server", _);
		var srvs = coll.find({
			_id: uuid
		}).toArray(_);
		if (srvs && srvs.length > 0) {
			var srv = srvs[0];
			_servers[uuid] = srv;
			return srv;
		}
	} else {
		return _servers[uuid];
	}
}

_scripts[1] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 1; replace x3servers by x3solutions");
	//
	var collEp = db.db.collection("EndPoint", _);

	var eps = collEp.find().toArray(_);

	eps && eps.filter_(_, function(_, ep) {
		return ep.protocol === "x3";
	}).forEach_(_, function(_, ep) {
		if (ep.x3server && ep.x3server._uuid) {
			var srv = getX3server(_, db, ep.x3server._uuid);

			if (srv && ep.x3SolutionName) {
				var solUuid;
				if (Object.keys(_solutions).indexOf(ep.x3SolutionName) === -1) {
					solUuid = createX3Solution(_, db, srv, ep.x3SolutionName);
				} else {
					solUuid = _solutions[ep.x3SolutionName];
				}
				collEp.update({
					_id: ep._id
				}, {
					$set: {
						x3solution: {
							_uuid: solUuid
						},
						x3server: null
					}
				}, {
					safe: true,
					multi: true
				}, _);
			}
		}
	});

	exports.tracer && exports.tracer("Update script to version: 1 executed");
};

_scripts[2] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 2; force x3solutions save action to set x3 runtimes");
	//
	var solutions = db.fetchInstances(_, db.model.getEntity(_, "x3solution"));
	solutions.forEach_(_, function(_, s) {
		s.save(_);
	});

	exports.tracer && exports.tracer("Update script to version: 2 executed");
};


exports.dataUpdate = function(_, db, actualVersion, targetVersion) {
	// force log: always
	exports.tracer = console.log;
	//
	_scripts.slice(actualVersion + 1, targetVersion + 1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
};

exports.metadata = {
	fileId: "a246fC7e891a", // this id MUST never change and MUST be unique over all update scripts
	description: "F_107803_multi_process_server_management" // !important, some description, optional and can change
};