"use strict";

var globals = require('streamline-runtime').globals;
var config = require("config");
var authMethods = (config.session && config.session.auth) || "basic";
if (!Array.isArray(authMethods)) authMethods = [authMethods];

exports.execute = function(_, db) {
	var settings = db.fetchInstances(_, db.model.getEntity(_, "setting"));
	var setting = settings.length > 0 ? settings[0] : null;
	var method = setting ? setting.authentication(_) : authMethods[0];
	if (authMethods.length === 0) throw new Error("configuration error: No authentication method in nodelocal.js");
	if (authMethods.indexOf(method === "ldap" ? "basic" : method) < 0) {
		console.log("Settings require update for authentication method");
		var tenant = globals.context.tenantId || "";
		if (tenant) tenant = " for tenant " + tenant;
		// set standard authentication method to first method in nodelocal.js
		method = authMethods[0];
		switch (method) {
			case "oauth2":
				if (!setting.oauth2(_)) {
					var inst = db.fetchInstances(_, db.model.getEntity(_, "oauth2"), {
						jsonWhere: {
							active: true
						}
					});
					if (inst.length === 1) setting.oauth2(_, inst[0]);
					else throw new Error("configuration error: configuration oauth2 requested but no unique active OAuth2 server available" + tenant);
				}
				break;
			case "saml2":
				if (!setting.saml2(_)) {
					var inst = db.fetchInstances(_, db.model.getEntity(_, "saml2"), {
						jsonWhere: {
							active: true
						}
					});
					if (inst.length === 1) setting.saml2(_, inst[0]);
					else throw new Error("configuration error: configuration saml2 requested but no unique active SAML2 identity provider available" + tenant);
				}
				break;
			case "ldap":
				if (!setting.ldap(_)) {
					var inst = db.fetchInstances(_, db.model.getEntity(_, "ldap"), {
						jsonWhere: {
							active: true
						}
					});
					if (inst.length === 1) setting.ldap(_, inst[0]);
					else throw new Error("configuration error: configuration ldap requested but no unique active LDAP server available" + tenant);
				}
				break;
		}
		setting.authentication(_, method);
		console.log("Set standard authentication to " + method + tenant);
		setting.save(_);
		var diags = [];
		setting.getAllDiagnoses(_, diags);
		if (diags.length) {
			console.log("Messages during changing standard authentication " + JSON.stringify(diags));
		}
	}
};