"use strict"

// !!!!! cannot use adminUtil in update scripts, it will try to get another connection wich will make another synchro and 
// this will go recursively !!!
//var adminUtil = require("syracuse-collaboration/lib/util");
var helpers = require("syracuse-core/lib/helpers");

exports.tracer = null;

var _scripts = [];
// script index MUST be target version number for this script
_scripts[2] = function(_, db) {
	// incompatible since model version 6
/*	exports.tracer && exports.tracer("Executing update script to version: 2; Endpoints update.");
	db.fetchInstances(_, db.model.getEntity('endPoint'), {}).forEach_(_, function(_, ep) {
		if(ep.enableSearch(_) == null)
			ep.enableSearch(_, false);
		if(!ep.protocol(_)) {
			if(ep.application(_).toLowerCase() === "x3") {
				ep.protocol(_, "x3");
				// might not be right but is required
				ep.serverHost(_, "172.28.16.106");
				ep.serverPort(_, 17000);
				ep.serverTimeout(_, 60000);
			} else {
				ep.protocol(_, "syracuse");
				ep.databaseDriver(_, "mongodb");
				ep.databaseHost(_, "localhost");
				ep.databasePort(_, 27017);
			}
		}
		//
		ep.save(_);
	});
*/
}
_scripts[4] = function(_, db) {
	// incompatible since model version 6
/*	exports.tracer && exports.tracer("Executing update script to version: 4; Superv endpoint create.");
	var ep = db.fetchInstance(_, db.model.getEntity('endPoint'), {
		jsonWhere: {
			application: {$regex: "^x3$", $options: "i"},
			contract: {$regex: "^erp$", $options: "i"},
			dataset: {$regex: "^superv$", $options: "i"}
		}
	});
	//
	if(!ep) {
		ep = db.model.getEntity('endPoint').factory.createInstance(_, null, db);
		ep._initialize(_);
		ep.description(_, "ERP X3");
		ep.application(_, "x3");
		ep.contract(_, "erp");
		ep.dataset(_, "superv");
		ep.enableSearch(_, false);
	}
	ep.protocol(_, "x3");
	ep.serverHost(_, "172.28.16.106");
	ep.serverPort(_, 17000);
	ep.serverTimeout(_, 60000);
	//
	ep.save(_);
	*/
}
_scripts[5] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 5; PageDatas content reset as format changed.");
	// update related data
	db.db.collection("PageData", _).update({},{
		$set: {
			content: null
		}
	},{
		safe: true,
		multi: true
	},_);
}
_scripts[6] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 6; Create standard applications. Migrate pages settings");
	// create applications
	[{
		"description": "Syracuse Collaboration",
		"application": "syracuse",
		"contract": "collaboration"
	},{
		"description": "X3 ERP",
		"application": "x3",
		"contract": "erp"
	},{
		"description": "Sprint1",
		"application": "sprint1",
		"contract": "settings"
	}].forEach_(_, function(_, appData) {
		var app = db.fetchInstance(_, db.model.getEntity("application"), {jsonWhere:{
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		}});
		if(!app) {
			app = db.model.getEntity("application").factory.createInstance(_, null, db);
			app._initialize(_);
			app.description(_, appData.description);
			app.application(_, appData.application);
			app.contract(_, appData.contract);
			app.save(_);
		}
		// update related data
		db.db.collection("PageData", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update menu item
		db.db.collection("MenuItem", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update portlets
		db.db.collection("Portlet", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update endpoints
		db.db.collection("EndPoint", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				applicationRef: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
	});
	//
}

_scripts[7] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 7; Create x3 servers");
	var eps = db.db.collection("EndPoint", _).find({protocol: "x3"}).toArray(_);
	eps.forEach_(_, function(_, ep) {
		// find a x3server
		var x3server = db.fetchInstance(_, db.model.getEntity("x3server"), {jsonWhere:{
			serverHost: ep.serverHost,
			serverPort: ep.serverPort
		}});
		if(!x3server) {
			x3server = db.model.getEntity("x3server").factory.createInstance(_, null, db);
			x3server.description(_, ep.serverHost);
			x3server.serverHost(_, ep.serverHost);
			x3server.serverPort(_, ep.serverPort);
			x3server.serverName(_, ep.serverName);
			x3server.serverTimeout(_, ep.serverTimeout);
			//x3server.serverFolder(_, ep.serverFolder);
			x3server.save(_);
		}
		//
		var epInst = db.fetchInstance(_, db.model.getEntity("endPoint"), {jsonWhere:{$uuid: ep._id}});
		if(epInst) {
			epInst.x3server(_, x3server);
			epInst.save(_);
		}
	});
}

_scripts[8] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 8; Update application protocol");
	// update applications for protocol
	// first make everything Syracuse
	db.db.collection("Application", _).update({},{
		$set: {
			protocol: "syracuse"
		}
	},{
		safe: true,
		multi: true
	},_);
	// make x3=x3
	db.db.collection("Application", _).update({
		application: {$regex: "^x3$", $options: "i"}
	},{
		$set: {
			protocol: "x3"
		}
	},{
		safe: true,
		multi: true
	},_);
	// change ep server list to ref
	var app = db.db.collection("Application", _).find({protocol: "x3"}).toArray(_);
	if(app && app.length) {
		exports.tracer && exports.tracer("Updating endpoints for application:" + app[0].description);
		var eps = db.db.collection("EndPoint", _).find({applicationRef: {_uuid:app[0]._id}}).toArray(_);
		eps.forEach_(_, function(_, ep) {
			exports.tracer && exports.tracer("Updating endpoint:" + ep.description);
			if(ep.x3servers && ep.x3servers._keys && ep.x3servers._keys.length) {
				exports.tracer && exports.tracer("Updating endpoint - server:" + ep.x3servers._keys[0]);
				db.db.collection("EndPoint", _).update({
					_id: ep._id
				},{
					$set: {
						x3server: {_uuid: ep.x3servers._keys[0]}
					}
				},{
					safe: true,
					multi: true
				},_);
			}
		});
	}
}

_scripts[9] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 9; Fix x3server webServerPort and endpoint.x3ServerFolder");
	//
	db.db.collection("X3server", _).update({
		webServerPort: null
	},{
		$set: {
			webServerPort: 80
		}
	},{
		safe: true,
		multi: true
	},_);
	//
	db.db.collection("EndPoint", _).update({
		x3ServerFolder: null,
		x3server: {$ne: null}
	},{
		$set: {
			x3ServerFolder: "SUPERV"
		}
	},{
		safe: true,
		multi: true
	},_);
}

_scripts[10] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 10; locales model modification");
	//
	db.db.collection("LocalePreference", _).update({
	},{
		$set: {
			enabled: true
		}
	},{
		safe: true,
		multi: true
	},_);
	db.db.collection("User", _).update({
	},{
		$set: {
			locales: {}
		}
	},{
		safe: true,
		multi: true
	},_);
}

_scripts[11] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 11 delete portlets");
	//
	db.db.collection("Portlet", _).remove({}, {safe: true}, _);
	db.db.collection("MenuItem", _).remove({}, {safe: true}, _);
	db.db.collection("PageData", _).remove({facet:"$dashboard"}, {safe: true}, _);
}

_scripts[12] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 12; menu items and vignettes changes");
	// get X3 applications
	var x3apps = (db.db.collection("Application", _).find({
		protocol: "x3"
	}).toArray(_).map(function(item) {
		return item._id;
	})) || [];
	// menu items
	db.db.collection("MenuItem", _).update({}, {
		$set: {
			target: "self"
		}
	}, {
		safe: true,
		multi: true
	}, _);
	//
	var menuItems = db.db.collection("MenuItem", _).find({}).toArray(_);
	menuItems.forEach_(_, function(_, menuItem) {
		if(!menuItem.representation) return;
		if(menuItem.menuFusion) {
			// fusion
			db.db.collection("MenuItem", _).update({
				_id: menuItem._id
			}, {
				$set: {
					linkType: "$function",
					fusionFunction: menuItem.representation
				}
			}, {
				safe: true,
				multi: true
			}, _);
		} else {
			if(menuItem.facet === "$dashboard") {
				db.db.collection("MenuItem", _).update({
					_id: menuItem._id
				}, {
					$set: {
						linkType: "$dashboard",
						dashboard: menuItem.representation
					}
				}, {
					safe: true,
					multi: true
				}, _);
			} else {
				// representation
				db.db.collection("MenuItem", _).update({
					_id: menuItem._id
				}, {
					$set: {
						linkType: "$representation",
						entity: ((x3apps.indexOf((menuItem.application && menuItem.application._uuid) || "") >= 0) ? menuItem.representation : helpers.string.pluralize(menuItem.representation)),
						facet: (menuItem.facet === "$edit") ? "$create" : menuItem.facet
					}
				}, {
					safe: true,
					multi: true
				}, _);
			}
		}
	});
	// pages
	var pages = db.db.collection("PageData", _).find({}).toArray(_);
	pages.forEach_(_, function(_, page) {
		var updData = {
			$set: {
				allApplications: (page.application && page.application._uuid) ? false : true,
				dashboardName: page.representation
			}
		}
		if(!page.title)
			updData.$set.title = page._id;
		//
		page.portlets && Object.keys(page.portlets).forEach(function(ppUuid) {
			updData.$set["portlets."+ppUuid+".generateStyle"] = "vignette";
		});
//		console.log("upddata: "+require("util").inspect(updData));
		//
		db.db.collection("PageData", _).update({
			_id: page._id
		}, updData, {
			safe: true,
			multi: true
		}, _);
	});
}
_scripts[13] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 13; admin menu import");
	require("syracuse-import/lib/jsonImport").jsonImport(_, db, "syracuse-admin-menu.json", {tracer:exports.tracer});
}

_scripts[14] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 14; make all users active");
	db.db.collection("User", _).update({}, {
			$set: {
				active: true
			}
		}, {
			safe: true,
			multi: true
		}, _);
}

_scripts[15] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 15; pageData to dashboards conversion");
	var pages = db.db.collection("PageData", _).find({
		facet: "$dashboard"
	}).toArray(_);
	pages.forEach_(_, function(_, page) {

	});
}

exports.dataUpdate = function(_, db, actualVersion, targetVersion) {
	_scripts.slice(actualVersion+1, targetVersion+1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
}