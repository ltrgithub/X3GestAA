"use strict"

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpers = require("syracuse-core/lib/helpers");
var sys = require("util");

exports.tracer = null;

var _scripts = [];
// script index MUST be target version number for this script
_scripts[2] = function(_, db) {
	// incompatible since model version 6
/*	exports.tracer && exports.tracer("Executing update script to version: 2; Endpoints update.");
	db.fetchInstances(_, db.model.getEntity('endPoint'), {}).forEach_(_, function(_, ep) {
		if(ep.enableSearch(_) == null)
			ep.enableSearch(_, false);
		if(!ep.protocol(_)) {
			if(ep.application(_).toLowerCase() === "x3") {
				ep.protocol(_, "x3");
				// might not be right but is required
				ep.serverHost(_, "172.28.16.106");
				ep.serverPort(_, 17000);
				ep.serverTimeout(_, 60000);
			} else {
				ep.protocol(_, "syracuse");
				ep.databaseDriver(_, "mongodb");
				ep.databaseHost(_, "localhost");
				ep.databasePort(_, 27017);
			}
		}
		//
		ep.save(_);
	});
*/
}
_scripts[4] = function(_, db) {
	// incompatible since model version 6
/*	exports.tracer && exports.tracer("Executing update script to version: 4; Superv endpoint create.");
	var ep = db.fetchInstance(_, db.model.getEntity('endPoint'), {
		jsonWhere: {
			application: {$regex: "^x3$", $options: "i"},
			contract: {$regex: "^erp$", $options: "i"},
			dataset: {$regex: "^superv$", $options: "i"}
		}
	});
	//
	if(!ep) {
		ep = db.model.getEntity('endPoint').factory.createInstance(_, null, db);
		ep._initialize(_);
		ep.description(_, "ERP X3");
		ep.application(_, "x3");
		ep.contract(_, "erp");
		ep.dataset(_, "superv");
		ep.enableSearch(_, false);
	}
	ep.protocol(_, "x3");
	ep.serverHost(_, "172.28.16.106");
	ep.serverPort(_, 17000);
	ep.serverTimeout(_, 60000);
	//
	ep.save(_);
	*/
}
_scripts[5] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 5; PageDatas content reset as format changed.");
	// update related data
	db.db.collection("PageData", _).update({},{
		$set: {
			content: null
		}
	},{
		safe: true,
		multi: true
	},_);
}
_scripts[6] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 6; Create standard applications. Migrate pages settings");
	// create applications
	[{
		"description": "Syracuse Collaboration",
		"application": "syracuse",
		"contract": "collaboration"
	},{
		"description": "X3 ERP",
		"application": "x3",
		"contract": "erp"
	},{
		"description": "Sprint1",
		"application": "sprint1",
		"contract": "settings"
	}].forEach_(_, function(_, appData) {
		var app = db.fetchInstance(_, db.model.getEntity("application"), {jsonWhere:{
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		}});
		if(!app) {
			app = db.model.getEntity("application").factory.createInstance(_, null, db);
			app._initialize(_);
			app.description(_, appData.description);
			app.application(_, appData.application);
			app.contract(_, appData.contract);
			app.save(_);
		}
		// update related data
		db.db.collection("PageData", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update menu item
		db.db.collection("MenuItem", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update portlets
		db.db.collection("Portlet", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				application: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
		// update endpoints
		db.db.collection("EndPoint", _).update({
			application: {$regex: "^"+appData.application+"$", $options: "i"},
			contract: {$regex: "^"+appData.contract+"$", $options: "i"},
		},{
			$set: {
				applicationRef: {
					_uuid: app.$uuid
				}
			}
		},{
			safe: true,
			multi: true
		},_);
	});
	//
}

_scripts[7] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 7; Create x3 servers");
	var eps = db.db.collection("EndPoint", _).find({protocol: "x3"}).toArray(_);
	eps.forEach_(_, function(_, ep) {
		// find a x3server
		var x3server = db.fetchInstance(_, db.model.getEntity("x3server"), {jsonWhere:{
			serverHost: ep.serverHost,
			serverPort: ep.serverPort
		}});
		if(!x3server) {
			x3server = db.model.getEntity("x3server").factory.createInstance(_, null, db);
			x3server.description(_, ep.serverHost);
			x3server.serverHost(_, ep.serverHost);
			x3server.serverPort(_, ep.serverPort);
			x3server.serverName(_, ep.serverName);
			x3server.serverTimeout(_, ep.serverTimeout);
			//x3server.serverFolder(_, ep.serverFolder);
			x3server.save(_);
		}
		//
		var epInst = db.fetchInstance(_, db.model.getEntity("endPoint"), {jsonWhere:{$uuid: ep._id}});
		if(epInst) {
			epInst.x3server(_, x3server);
			epInst.save(_);
		}
	});
}

_scripts[8] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 8; Update application protocol");
	// update applications for protocol
	// first make everything Syracuse
	db.db.collection("Application", _).update({},{
		$set: {
			protocol: "syracuse"
		}
	},{
		safe: true,
		multi: true
	},_);
	// make x3=x3
	db.db.collection("Application", _).update({
		application: {$regex: "^x3$", $options: "i"}
	},{
		$set: {
			protocol: "x3"
		}
	},{
		safe: true,
		multi: true
	},_);
	// change ep server list to ref
	var app = db.db.collection("Application", _).find({protocol: "x3"}).toArray(_);
	if(app && app.length) {
		exports.tracer && exports.tracer("Updating endpoints for application:" + app[0].description);
		var eps = db.db.collection("EndPoint", _).find({applicationRef: {_uuid:app[0]._id}}).toArray(_);
		eps.forEach_(_, function(_, ep) {
			exports.tracer && exports.tracer("Updating endpoint:" + ep.description);
			if(ep.x3servers && ep.x3servers._keys && ep.x3servers._keys.length) {
				exports.tracer && exports.tracer("Updating endpoint - server:" + ep.x3servers._keys[0]);
				db.db.collection("EndPoint", _).update({
					_id: ep._id
				},{
					$set: {
						x3server: {_uuid: ep.x3servers._keys[0]}
					}
				},{
					safe: true,
					multi: true
				},_);
			}
		});
	}
}

_scripts[9] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 9; Fix x3server webServerPort and endpoint.x3ServerFolder");
	//
	db.db.collection("X3server", _).update({
		webServerPort: null
	},{
		$set: {
			webServerPort: 80
		}
	},{
		safe: true,
		multi: true
	},_);
	//
	db.db.collection("EndPoint", _).update({
		x3ServerFolder: null,
		x3server: {$ne: null}
	},{
		$set: {
			x3ServerFolder: "SUPERV"
		}
	},{
		safe: true,
		multi: true
	},_);
}

_scripts[10] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 10; locales model modification");
	//
	db.db.collection("LocalePreference", _).update({
	},{
		$set: {
			enabled: true
		}
	},{
		safe: true,
		multi: true
	},_);
	db.db.collection("User", _).update({
	},{
		$set: {
			locales: {}
		}
	},{
		safe: true,
		multi: true
	},_);
}

_scripts[11] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 11 delete portlets");
	//
	db.db.collection("Portlet", _).remove({}, {safe: true}, _);
	db.db.collection("MenuItem", _).remove({}, {safe: true}, _);
	db.db.collection("PageData", _).remove({facet:"$dashboard"}, {safe: true}, _);
}

_scripts[12] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 12; menu items and vignettes changes");
	// get X3 applications
	var x3apps = (db.db.collection("Application", _).find({
		protocol: "x3"
	}).toArray(_).map(function(item) {
		return item._id;
	})) || [];
	// menu items
	db.db.collection("MenuItem", _).update({}, {
		$set: {
			target: "self"
		}
	}, {
		safe: true,
		multi: true
	}, _);
	//
	var menuItems = db.db.collection("MenuItem", _).find({}).toArray(_);
	menuItems.forEach_(_, function(_, menuItem) {
		if(!menuItem.representation) return;
		if(menuItem.menuFusion) {
			// fusion
			db.db.collection("MenuItem", _).update({
				_id: menuItem._id
			}, {
				$set: {
					linkType: "$function",
					fusionFunction: menuItem.representation
				}
			}, {
				safe: true,
				multi: true
			}, _);
		} else {
			if(menuItem.facet === "$dashboard") {
				db.db.collection("MenuItem", _).update({
					_id: menuItem._id
				}, {
					$set: {
						linkType: "$dashboard",
						dashboard: menuItem.representation
					}
				}, {
					safe: true,
					multi: true
				}, _);
			} else {
				// representation
				db.db.collection("MenuItem", _).update({
					_id: menuItem._id
				}, {
					$set: {
						linkType: "$representation",
						entity: ((x3apps.indexOf((menuItem.application && menuItem.application._uuid) || "") >= 0) ? menuItem.representation : helpers.string.pluralize(menuItem.representation)),
						facet: (menuItem.facet === "$edit") ? "$create" : menuItem.facet
					}
				}, {
					safe: true,
					multi: true
				}, _);
			}
		}
	});
	// pages
	var pages = db.db.collection("PageData", _).find({}).toArray(_);
	pages.forEach_(_, function(_, page) {
		var updData = {
			$set: {
				allApplications: (page.application && page.application._uuid) ? false : true,
				dashboardName: page.representation
			}
		}
		if(!page.title)
			updData.$set.title = page._id;
		//
		page.portlets && Object.keys(page.portlets).forEach(function(ppUuid) {
			updData.$set["portlets."+ppUuid+".generateStyle"] = "vignette";
		});
//		console.log("upddata: "+require("util").inspect(updData));
		//
		db.db.collection("PageData", _).update({
			_id: page._id
		}, updData, {
			safe: true,
			multi: true
		}, _);
	});
}
_scripts[13] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 13; admin menu import");
	require("syracuse-import/lib/jsonImport").jsonImport(_, db, "syracuse-admin-menu.json", {tracer:exports.tracer});
}
_scripts[14] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 14; make all users active");
	db.db.collection("User", _).update({}, {
			$set: {
				active: true
			}
		}, {
			safe: true,
			multi: true
		}, _);
}

_scripts[15] = function(_, db) {
	function getApp(_, appId) {
		return apps[appId] || (apps[appId] = db.fetchInstance(_, appEntity, appId));
	}
	exports.tracer && exports.tracer("Executing update script to version: 15; set title to mr");
	db.db.collection("User", _).update({}, {
			$set: {
				title: "mr"
			}
		}, {
			safe: true,
			multi: true
		}, _);
	exports.tracer && exports.tracer("Executing update script to version: 15; pageData to dashboards conversion");
	//
	var apps = {};
	var appEntity = db.model.getEntity("application");
	var dashEntity = db.model.getEntity("dashboardDef");
	var pages = db.db.collection("PageData", _).find({
		facet: "$dashboard"
	}).toArray(_);
	pages.forEach_(_, function(_, page) {
		try {
			// look for existing dashboard
			exports.tracer && exports.tracer("Migrating page: "+page.dashboardName+"."+page._id);
			var dash = db.fetchInstance(_, dashEntity, {
				jsonWhere: {
					dashboardName: page.dashboardName
				}
			});
			if(!dash) {
				exports.tracer && exports.tracer("Creating dashboard: "+page.dashboardName);
				dash = dashEntity.factory.createInstance(_, null, db);
				dash.dashboardName(_, page.dashboardName);
				page.title && dash.title(_, page.title);
				page.description && exports.tracer && exports.tracer("Migrating page setting description: "+sys.inspect(page.description));
				page.description && dash.description(_, page.description);
			}
			// create variant
			var variant = dash.variants(_).add(_);
			variant.allApplications(_, page.allApplications || false);
			// set variant title and desc
			page.title && variant.title(_, page.title);
			page.description && variant.description(_, page.description);
			//
			var appId = page.application && page.application._uuid;
			appId && variant.application(_, variant.createChild(_, "application", appId));
			page.roles && Object.keys(page.roles).forEach_(_, function(_, roleId) {
				if(roleId === "_keys") return;
				variant.roles(_).set(_, variant.createChild(_, "roles", roleId));
			});
			page.users && Object.keys(page.users).forEach_(_, function(_, userId) {
				if(userId === "_keys") return;
				variant.users(_).set(_, variant.createChild(_, "users", userId));
			});
			page.endpoints && Object.keys(page.endpoints).forEach_(_, function(_, epId) {
				if(epId === "_keys") return;
				variant.endpoints(_).set(_, variant.createChild(_, "endpoints", epId));
			});
			page.portlets && Object.keys(page.portlets).forEach_(_, function(_, pId) {
				if(pId === "_keys") return;
				var p = page.portlets[pId];
				var v = variant.vignettes(_).add(_);
				p.portlet && p.portlet._uuid && v.portlet(_, v.createChild(_, "portlet", p.portlet._uuid));
				v.allEndpoints(_, p.allEndpoints);
				p.endpoint && p.endpoint._uuid && v.endpoint(_, v.createChild(_, "endpoint", p.endpoint._uuid));
			});
			variant.pageData(_, variant.createChild(_, "pageData", page._id));
			//
			dash.save(_);
			var diag = [];
			dash.getAllDiagnoses(_, diag, {
				addPropName: true,
				addEntityName: true
			});
			if(diag.length)
				exports.tracer && exports.tracer("Save dashboard: "+page.dashboardName+" errors "+sys.inspect(diag, null, 4));
		} catch(e) {
			exports.tracer && exports.tracer("Dashboard migration exception: "+page.dashboardName+" errors "+e.message);
		}
	});
	// create a menu item for dashboards
	var items = db.db.collection("MenuItem", _).find({
		entity: "dashboardDefs"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.title(_, {
			"default": "Dashboards",
			"fr-FR": "Portails",
			"en-US": "Dashboards"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "dashboardDefs");
		menuItem.representation(_, "dashboardDef");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse authoring"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[16] = function(_, db) {
	function getApp(_, appId) {
		return apps[appId] || (apps[appId] = db.fetchInstance(_, appEntity, appId));
	}
	exports.tracer && exports.tracer("Executing update script to version: 16; pageData to pageDef conversion");
	//
	var apps = {};
	var appEntity = db.model.getEntity("application");
	var dashEntity = db.model.getEntity("pageDef");
	var pages = db.db.collection("PageData", _).find({
		facet: {
			$ne: "$dashboard"
		}
	}).toArray(_);
	pages.forEach_(_, function(_, page) {
		try {
			// look for existing dashboard
			exports.tracer && exports.tracer("Migrating page: "+page.representation+"."+page._id);
			var dash = db.fetchInstance(_, dashEntity, {
				jsonWhere: {
					representation: page.representation
				}
			});
			if(!dash) {
				exports.tracer && exports.tracer("Creating page: "+page.representation);
				dash = dashEntity.factory.createInstance(_, null, db);
				dash.representation(_, page.representation);
				page.title && dash.title(_, page.title);
				page.description && exports.tracer && exports.tracer("Migrating page setting description: "+sys.inspect(page.description));
				page.description && dash.description(_, page.description);
				dash.facet(_, page.facet);
			}
			// app
			var appId = page.application && page.application._uuid;
			appId && dash.application(_, dash.createChild(_, "application", appId));
			// create variant
			var variant = dash.variants(_).add(_);
			// set variant title and desc
			page.title && variant.title(_, page.title);
			page.description && variant.description(_, page.description);
			//
			page.roles && Object.keys(page.roles).forEach_(_, function(_, roleId) {
				if(roleId === "_keys") return;
				variant.roles(_).set(_, variant.createChild(_, "roles", roleId));
			});
			page.users && Object.keys(page.users).forEach_(_, function(_, userId) {
				if(userId === "_keys") return;
				variant.users(_).set(_, variant.createChild(_, "users", userId));
			});
			page.endpoints && Object.keys(page.endpoints).forEach_(_, function(_, epId) {
				if(epId === "_keys") return;
				variant.endpoints(_).set(_, variant.createChild(_, "endpoints", epId));
			});
			variant.pageData(_, variant.createChild(_, "pageData", page._id));
			//
			dash.save(_);
			var diag = [];
			dash.getAllDiagnoses(_, diag, {
				addPropName: true,
				addEntityName: true
			});
			if(diag.length)
				exports.tracer && exports.tracer("Save page: "+page.dashboardName+" errors "+sys.inspect(diag, null, 4));
		} catch(e) {
			exports.tracer && exports.tracer("Page migration exception: "+page.representation+" errors "+e.message);
		}
	});
	//
	exports.tracer && exports.tracer("Modifying page menu items");
	var menus = db.db.collection("MenuItem", _).update({
		entity: "pageDatas"
	}, {
		$set: {
			entity: "pageDefs",
			representation: "pageDef"
		}
	}, {
		safe: true,
		multi: true
	}, _);
}

_scripts[18] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 18; storage volumes");
	// find / create standard volume
	var stdVolUuid = "";
	var vols = db.db.collection("StorageVolume", _).find({
		code: "STD"
	}).toArray(_);
	if(vols && vols.length)
		stdVolUuid = vols[0]._id;
	else {
		// create std volume
		var vol = db.model.getEntity("storageVolume").factory.createInstance(_, null, db);
		vol.code(_, "STD");
		vol.description(_, {
			"default": "Standard storage volume",
			"en-US": "Standard storage volume",
			"fr-FR": "Volume standard"
		});
		vol.storageType(_, "db_file");
		vol.save(_);
		//
		stdVolUuid = vol.$uuid;
	}
	//
	var docs = db.db.collection("Document", _).find({
		volume: null
	}).toArray(_);
	//
	var docEntity = db.model.getEntity("document");
	docs.forEach_(_, function(_, doc) {
		exports.tracer && exports.tracer("Migrating document: "+doc._id);
		var d = db.fetchInstance(_, docEntity, doc._id);
		d._inUpdateScript = true;
		d.volume(_, d.createChild(_, "volume", stdVolUuid));
		d.save(_);
	});
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_VOL"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_VOL");
		menuItem.title(_, {
			"default": "Volumes",
			"fr-FR": "Volumes",
			"en-US": "Volumes"
		});
		menuItem.description(_, {
			"default": "Storage volumes",
			"en-US": "Storage volumes",
			"fr-FR": "Volumes de stockage"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "storageVolumes");
		menuItem.representation(_, "storageVolume");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse collaboration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[19] = function(_, db) {
	var vols = db.db.collection("StorageVolume", _).find({
		code: "WORD_TEMPLATE_MAILMERGE"
	}).toArray(_);
	if(!vols || !vols.length) {
		// create std volume
		var vol = db.model.getEntity("storageVolume").factory.createInstance(_, null, db);
		vol.code(_, "WORD_TEMPLATE_MAILMERGE");
		vol.description(_, {
			"default": "Word templates for mail merge",
			"fr-FR": "Modèles word pour publipostage",
			"en-US": "Word templates for mail merge"
		});
		vol.storageType(_, "db_file");
		vol.save(_);
	}
	var vols = db.db.collection("StorageVolume", _).find({
		code: "WORD_TEMPLATE_REPORT"
	}).toArray(_);
	if(!vols || !vols.length) {
		// create std volume
		var vol = db.model.getEntity("storageVolume").factory.createInstance(_, null, db);
		vol.code(_, "WORD_TEMPLATE_REPORT");
		vol.description(_, {
			"default": "Word templates for reporting",
			"fr-FR": "Modèles word pour publication",
			"en-US": "Word templates for reporting"
		});
		vol.storageType(_, "db_file");
		vol.save(_);
	}
}

_scripts[20] = function(_, db) {
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_AUTOMATES"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_AUTOMATES");
		menuItem.title(_, {
			"default": "Scheduler",
			"fr-FR": "Automates",
			"en-US": "Scheduler"
		});
		menuItem.description(_, {
			"default": "Scheduler",
			"fr-FR": "Automates",
			"en-US": "Scheduler"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "automates");
		menuItem.representation(_, "automate");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse administration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[21] = function(_, db) {
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_SERVERLOGS"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_SERVERLOGS");
		menuItem.title(_, {
			"default": "Server logs",
			"fr-FR": "Traces",
			"en-US": "Server logs"
		});
		menuItem.description(_, {
			"default": "Server logs",
			"fr-FR": "Traces",
			"en-US": "Server logs"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "serverLogs");
		menuItem.representation(_, "serverLog");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse administration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[22] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 22; Sage Intelligence storage volumes");
	var vols = db.db.collection("StorageVolume", _).find({
		code: "SI_REPORTS"
	}).toArray(_);
	if(!vols || !vols.length) {
		// create std volume
		var vol = db.model.getEntity("storageVolume").factory.createInstance(_, null, db);
		vol.code(_, "SI_REPORTS");
		vol.description(_, {
			"default": "Sage Intelligence reports",
			"fr-FR": "Etats Sage Intelligence",
			"en-US": "Sage Intelligence reports"
		});
		vol.storageType(_, "db_file");
		vol.save(_);
	}
	var vols = db.db.collection("StorageVolume", _).find({
		code: "SI_TEMPLATES"
	}).toArray(_);
	if(!vols || !vols.length) {
		// create std volume
		var vol = db.model.getEntity("storageVolume").factory.createInstance(_, null, db);
		vol.code(_, "SI_TEMPLATES");
		vol.description(_, {
			"default": "Sage Intelligence templates",
			"fr-FR": "Modèles Sage Intelligence",
			"en-US": "Sage Intelligence templates"
		});
		vol.storageType(_, "db_file");
		vol.save(_);
	}
	exports.tracer && exports.tracer("Executing update script to version: 22; set enpoints protocol property");
	var apps = db.db.collection("Application", _).find({}).toArray(_);
	apps && apps.forEach_(_, function(_, app) {
		db.db.collection("EndPoint", _).update({
			"applicationRef._uuid": app._id
		},{
			$set: {
				protocol: app.protocol
			}
		},{
			safe: true,
			multi: true
		},_);
	});
}

_scripts[23] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 23; remove endpoints NOT having applicationRef property");
	db.db.collection("EndPoint", _).remove({
		applicationRef: null
	}, {safe: true}, _);
}

_scripts[24] = function(_, db) {
	function _migrateCollection(_, entity, relations) {
		exports.tracer && exports.tracer("Migrating entity: "+entity.name);
		var instances = db.fetchInstances(_, entity, {});
		instances.forEach_(_, function(_, i) {
			try {
				i._dirtyList = relations;
				i.save(_);
			} catch(e) {
			}
		});
	}
	exports.tracer && exports.tracer("Executing update script to version: 24; convert mongodb maps to array");
	var entities = db.model.getEntities();
	Object.keys(entities).forEach_(_, function(_, eName) {
		var e = entities[eName];
		var pluralRels = (e.$relations && Object.keys(e.$relations).filter_(_, function(_, rName) {
			return e.$relations[rName].isPlural;
		})) || [];
		pluralRels.length && _migrateCollection(_, e, pluralRels);
	});
}

_scripts[25] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 25; initialize searchable for locales");
	db.db.collection("LocalePreference", _).update({},{
		$set: {
			searchable: true
		}
	},{
		safe: true,
		multi: true
	},_);
}

_scripts[26] = function(_, db) {
	// do nothing, is just index creation
}

_scripts[27] = function(_, db) {
	function _fixCollection(_, colName, fields) {
		exports.tracer && exports.tracer("Fixing collection: "+colName);
		db.db.collection(colName, _).find({}).toArray(_).forEach_(_, function(_, e) {
			fields.forEach_(_, function(_, f) {
//				exports.tracer && exports.tracer("Fixing field: "+f);
				if(!e[f]) return;
				if(typeof e[f] !== "object") return;
//				exports.tracer && exports.tracer("Field has keys: "+JSON.stringify(Object.keys(e[f])));
				var keys = Object.keys(e[f]);
				keys.forEach(function(k) {
					if(k !== k.toLowerCase()) {
//						exports.tracer && exports.tracer("Replacing: "+k+" by "+k.toLowerCase());
						e[f][k.toLowerCase()] = e[f][k];
						delete e[f][k];
					}
				});
			});
			//
			exports.tracer && exports.tracer("Updating: "+JSON.stringify(e));
			db.db.collection(colName, _).update({
				_id: e._id
			}, e, {
				safe: true
			}, _);
		});
	}
	exports.tracer && exports.tracer("Executing update script to version: 27; fix localized properties (codes to lowercase)");
	_fixCollection(_, "MenuItem", ["description", "title"]);
	_fixCollection(_, "DashboardDef", ["description", "title"]);
	_fixCollection(_, "PageDef", ["description", "title"]);
	_fixCollection(_, "Portlet", ["description", "title"]);
	_fixCollection(_, "StorageVolume", ["description"]);
}

_scripts[28] = function(_, db) {
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_IMPORTSESSIONS"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_IMPORTSESSIONS");
		menuItem.title(_, {
			"default": "Import sessions",
			"en-US": "Import sessions",
			"fr-FR": "Sessions d'import"
		});
		menuItem.description(_, {
			"default": "Import sessions",
			"en-US": "Import sessions",
			"fr-FR": "Sessions d'import"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "importSessions");
		menuItem.representation(_, "importSession");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse administration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[29] = function(_, db) {
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_FRIENDSERVERS"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_FRIENDSERVERS");
		menuItem.title(_, {
			"default": "Friend collaboration servers",
			"en-US": "Friend collaboration servers",
			"fr-FR": "Serveurs collaboration associés"
		});
		menuItem.description(_, {
			"default": "Friend collaboration servers",
			"en-US": "Friend collaboration servers",
			"fr-FR": "Serveurs collaboration associés"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "friendServers");
		menuItem.representation(_, "friendServer");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse administration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[30] = function(_, db) {
	// create a menu item for volumes
	var items = db.db.collection("MenuItem", _).find({
		code: "S_SECURITYPROFILES"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_SECURITYPROFILES");
		menuItem.title(_, {
			"default": "Security profiles",
			"en-US": "Security profiles",
			"fr-FR": "Profiles de sécurité"
		});
		menuItem.description(_, {
			"default": "Security profiles",
			"en-US": "Security profiles",
			"fr-FR": "Profiles de sécurité"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "securityProfiles");
		menuItem.representation(_, "securityProfile");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse administration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
	var items = db.db.collection("MenuItem", _).find({
		code: "S_WORDTEMPLATES"
	}).toArray(_);
	if(!items || !items.length) {
		var menuItem = db.model.getEntity("menuItem").factory.createInstance(_, null, db);
		menuItem.code(_, "S_WORDTEMPLATES");
		menuItem.title(_, {
			"default": "Word templates",
			"en-US": "Word templates",
			"fr-FR": "Modèles de document Word"
		});
		menuItem.description(_, {
			"default": "Word templates",
			"en-US": "Word templates",
			"fr-FR": "Modèles de document Word"
		});
		menuItem.application(_, adminHelper.getCollaborationApplication(_));
		menuItem.entity(_, "msoWordTemplateDocuments");
		menuItem.representation(_, "msoWordTemplateDocument");
		// find the personnalisation vignette
		var v = db.fetchInstance(_, db.model.getEntity("portlet"), {
			jsonWhere: {
				"title.en-US": "Syracuse collaboration"
			}
		});
		v && menuItem.menus(_).set(_, v);
		//
		menuItem.save(_);
	}
}

_scripts[31] = function(_, db) {
	var u = db.db.collection("User", _).find({
		login: "import"
	}).toArray(_);
	if(!u || !u.length) {
		var ue = db.getEntity(_, "user");
		var ge = db.getEntity(_, "group");
		var g = db.fetchInstance(_, ge, {
			jsonWhere: {
				description: "Endpoint administrators"
			}
		});
		var u = ue.createInstance(_, db);
		u.login(_, "import");
		u.firstName(_, "Import");
		u.lastName(_, "Special user");
		u.password(_, "import");
		g && u.groups(_).set(_, g);
		u.save(_);
	}
}

_scripts[32] = function(_, db) {
	function _makeAppEntry(_, appId) {
		var apps = db.db.collection("Application", _).find({
			_id: appId
		}).toArray(_);
		if(!apps || !apps.length) return;
		var a = apps[0];
		var eps = a.defaultEndpoint ? db.db.collection("EndPoint", _).find({
			_id: a.defaultEndpoint._uuid
		}).toArray(_) : db.db.collection("EndPoint", _).find({
			"applicationRef._uuid": appId
		}).toArray(_);
		if(!eps || !eps.length) return;
		return _apps[appId] = {
				dataset: eps[0].dataset
			}
	}
	exports.tracer && exports.tracer("Executing update script to version: 32; create representationRef for menuItems");
	var _apps = {};
	var mList = db.db.collection("MenuItem", _).find({
		linkType: "$representation"
	}).toArray(_);
	mList.forEach_(_, function(_, m) {
		if(m.representationRef) return;
		if(!m.application) return;
		var a = _apps[m.application._uuid] || _makeAppEntry(_, m.application._uuid);
		if(!a) return;
		db.db.collection("MenuItem", _).update({
			_id: m._id
		},{
			$set: {
				representationRef: {
					_uuid: helpers.uuid.generate(),
					representation: m.representation,
					entity: m.entity,
					dataset: a.dataset
				}
			}
		},{
			safe: true,
			multi: true
		},_);
	});
}

_scripts[33] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 33; update representationRef for menuItems");
	var _apps = {};
	var mList = db.db.collection("MenuItem", _).find({
		linkType: "$representation"
	}).toArray(_);
	mList.forEach_(_, function(_, m) {
		if(!m.application) return;
		db.db.collection("MenuItem", _).update({
			_id: m._id
		},{
			$set: {
				"representationRef.application._uuid": m.application._uuid
			}
		},{
			safe: true,
			multi: true
		},_);
	});
}

_scripts[34] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 34; fix update representationRef for menuItems");
	// fix the case of a wrong defaultEndpoint on an application
	var _apps = {};
	var mList = db.db.collection("MenuItem", _).find({
		linkType: "$representation"
	}).toArray(_);
	mList.forEach_(_, function(_, m) {
		if(!m.application) return;
		if(m.representationRef && m.representationRef._uuid && m.representationRef.representation && m.representationRef.entity) return;
		db.db.collection("MenuItem", _).update({
			_id: m._id
		},{
			$set: {
				"representationRef.application._uuid": m.application._uuid,
				"representationRef._uuid": helpers.uuid.generate(),
				"representationRef.representation": m.representation,
				"representationRef.entity": m.entity
			}
		},{
			safe: true,
			multi: true
		},_);
	});
}

_scripts[35] = function(_, db) {
	var config = require("syracuse-main/lib/nodeconfig").config
	// fix the case of a wrong defaultEndpoint on an application
	var realm = 'Syracuse';
	exports.tracer && exports.tracer("Executing update script to version: 35; replace clear text passwords with hashes. Realm: "+realm);
	var crypto = require('crypto');
	// hash function from RFC2617
	function h(value) {
	    var hash = crypto.createHash('MD5');
	    hash.update(value, "utf8");
	    return hash.digest("hex");
	}

	var mList = db.db.collection("User", _).find({}).toArray(_);
	mList.forEach_(_, function(_, m) {
		if (!m.password) return;
		var newPassword = h(m.login+":"+realm+":"+m.password) 
		db.db.collection("User", _).update({
			_id: m._id
		},{
			$set: {
				"password": newPassword
			}
		},{
			safe: true,
			multi: true
		},_);
	});
}


exports.dataUpdate = function(_, db, actualVersion, targetVersion) {
	_scripts.slice(actualVersion+1, targetVersion+1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
}
