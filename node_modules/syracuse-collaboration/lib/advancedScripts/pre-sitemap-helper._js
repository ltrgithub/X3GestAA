"use strict";

exports.tracer = null;
var _tracer; // = console.log;

function isFactory(_, db, collName, id) {
	var coll = db.db.collection(collName, _);
	var docs = coll.find({
		"_id": id
	}).toArray(_);
	if (docs.length > 0) {
		var doc = docs[0];
		return doc._factory || doc.isFactory;
	}
	throw new Error(collName + " [" + id + "] not found");
}

function checkItem(_, db, it) {
	if (it._type === "menuItem") {
		_tracer && _tracer("Check menuItem " + it._uuid);
		try {
			if (!isFactory(_, db, "MenuItem", it._uuid)) {
				return it;
			}
		} catch (e) {
			console.error(e.message);
		}
	} else if (it._type === "menuSubblock") {
		_tracer && _tracer("Check menuSubblock " + it.code + " (" + it.title.default + ")");
		if (it.items && it.items.length > 0) {
			var keepIt = [];
			it.items.forEach_(_, function(_, _it) {
				var _obj = checkItem(_, db, _it);
				if (_obj) keepIt.push(_obj);
			});
			if (keepIt.length > 0) {
				// reset indexes
				keepIt.forEach(function(_it, idx) {
					_it._index = idx;
				});
				it.items = keepIt;
				return it;
			}
		}
	}
}

exports.cleanNavPage = function(_, db, application, contract, options) {

	var tracer = options.tracer;
	var appUuid;
	var coll = db.db.collection("Application", _);
	var apps = coll.find({
		"$and": [{
			"application": application
		}, {
			"contract": contract
		}]
	}).toArray(_);
	if (!apps[0]) throw new Error("Syracuse collaboration application not found");
	appUuid = apps[0]._id;

	// Handle MenuBlock collection
	var collMb = db.db.collection("MenuBlock", _);
	var filter = {
		"$and": [{
			"$or": [{
				"_factory": true
			}, {
				"isFactory": true
			}]
		}, {
			"application._uuid": appUuid
		}]
	};

	var modsUuids = [],
		subModsUuids = [];

	var menuBlocks = collMb.find(filter).toArray(_);
	menuBlocks.forEach_(_, function(_, mb) {
		var keepItems = [];
		_tracer && _tracer("====\nCheck menu block: " + mb.code);
		if (mb.items) {
			var idx = 0;
			mb.items.forEach_(_, function(_, it) {
				var obj = checkItem(_, db, it);
				if (obj) {
					// reset indexes
					obj._index = idx;
					// keep item
					keepItems.push(obj);
					idx++;
				}
			});
			_tracer && _tracer("Keep items: " + JSON.stringify(keepItems, null, 2));
			collMb.update({
				_id: mb._id
			}, {
				$set: {
					items: keepItems
				}
			}, {
				safe: true,
				multi: true
			}, _);
		}
		subModsUuids.push(mb._id);
	});


	// Handle MenuModule collection
	var collMm = db.db.collection("MenuModule", _);
	filter = {
		"$and": [{
			"$or": [{
				"_factory": true
			}, {
				"isFactory": true
			}]
		}, {
			"application._uuid": appUuid
		}]
	};

	var mods = collMm.find(filter).toArray(_);
	mods.forEach_(_, function(_, mod) {
		var keep = [],
			nbUnlink = 0;
		mod.submodules && mod.submodules.forEach(function(sm) {
			if (subModsUuids.indexOf(sm._uuid) === -1) {
				// Keep non factory submodules
				keep.push(sm);
			} else {
				nbUnlink++;
			}
		});
		// Update each module keeping only non factory submodules
		collMm.update({
			_id: mod._id
		}, {
			$set: {
				submodules: keep
			}
		}, {
			safe: true,
			multi: true
		}, _);
		tracer && tracer("\t" + nbUnlink + " submodules unlinked from module '" + mod.code + "'");
		// Store factory modules uuid
		modsUuids.push(mod._id);
	});

	// remove modules references in navigation page
	var collNav = db.db.collection("NavigationPage", _);
	var home = collNav.find({
		"pageName": "home"
	}).toArray(_)[0];


	var keep = [],
		nbUnlink = 0;
	home && home.modules && home.modules.forEach(function(m) {
		if (modsUuids.indexOf(m._uuid) === -1) {
			keep.push(m);
		} else {
			nbUnlink++;
		}
	});
	// Update navigation page home keeping only non factory modules
	collNav.update({
		_id: home._id
	}, {
		$set: {
			modules: keep
		}
	}, {
		safe: true,
		multi: true
	}, _);
	tracer && tracer("\t" + nbUnlink + " modules unlinked from navigation page 'home'");

	// re import everything !!!
	var importHandler = require("syracuse-import/lib/jsonImport");
	var sName = application + "-" + contract + "-init.json";
	tracer && tracer(" <-- Beging import: " + sName);
	importHandler.jsonImport(_, db, sName, {
		importMode: "insert",
		$diagnoses: []
	});
	tracer && tracer(" --> End import: " + sName);
};