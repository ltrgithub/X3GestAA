"use strict";

var globals = require('streamline/lib/globals');

var sadFsq = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient');
var SadFsqClient = sadFsq.SadFsqClient;
var flamegraph = require('streamline-flamegraph/lib/flamegraph.js');
var x3Transform = require('syracuse-flamegraph/lib/x3Transform._js');
var ez = require("ez-streams");


exports.activate = function(_, context) {
	if (!context.httpSession.x3SessionConfig || !context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = context.httpSession.x3SessionConfig || {};
		var runtimeCfg = context.httpSession.x3SessionConfig.runtime = (context.httpSession.x3SessionConfig.runtime || {});
		runtimeCfg.runtimeLog = true;
		runtimeCfg.logFlag = 1;
		runtimeCfg.dataset = null;
		runtimeCfg.logDir = "TRA";
	}
};

exports.deactivate = function(_, context) {
	if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = {};
	}
};

exports.readLog = function(_, user, processId, reset) {
	var login = ("" + user).toLowerCase();

	var up = globals.context.session && globals.context.session.getUserProfile(_);
	var user = up.user(_);
	var endpoint = up.selectedEndpoint(_);
	// var login = user.getEndpointLogin(_, endpoint.$uuid).toLowerCase();

	var x3server = endpoint.x3server(_);
	var sadfs = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);

	var fileName;
	for (var i = 0; i < 1000; i++) {
		var options = {
			folder: endpoint.x3ServerFolder(_),
			path: "TRA",
			name: ["x3diary", login, processId, i].join('_'),
			extension: "tra"
		};
		if (sadfs.exists(_, options)) {
			fileName = options.name;
		} else {
			break;
		}
	}
	if (fileName) {
		var log = sadfs.readFile(_, {
			folder: endpoint.x3ServerFolder(_),
			path: "TRA",
			name: fileName,
			extension: "tra"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		if (reset) endpoint.postService(_, "resetLog");
		if (log && log.length) {
			return log;
		}
	}
};

exports.generateSvg = function(_, log) {
	var rlog = ez.devices.buffer.reader(log);
	var data = x3Transform.convert(_, rlog);

	var options = {
		href: "https://github.com/Sage-ERP-X3/Syracuse/tree/master/{0}#L{1}",
		target: "_blank",
		codes: data.codes,
		frames: data.frames,
		frameformat: "{2} ({0}:{1})",
		palette: {
			"io": "rgb(0,255,255)"
		},
		hash: 2
	};
	return flamegraph.makesvg(data.res, options);
};