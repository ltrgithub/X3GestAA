"use strict";

var globals = require('streamline/lib/globals');

var sadFsq = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient');
var SadFsqClient = sadFsq.SadFsqClient;
var flamegraph = require('streamline-flamegraph/lib/flamegraph.js');
var x3Transform = require('syracuse-flamegraph/lib/x3Transform._js');
var ez = require("ez-streams");
var uuid = require("syracuse-core/lib/helpers").uuid;
var pool = require("syracuse-x3/lib/pool");


exports.activate = function(_, context) {
	if (!context.httpSession.x3SessionConfig || !context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = context.httpSession.x3SessionConfig || {};
		var runtimeCfg = context.httpSession.x3SessionConfig.runtime = (context.httpSession.x3SessionConfig.runtime || {});
		runtimeCfg.runtimeLog = true;
		runtimeCfg.logFlag = 1;
		runtimeCfg.dataset = null;
		runtimeCfg.logDir = "TRA";
	}
};

exports.deactivate = function(_, context) {
	if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = {};
	}
};

exports.readLog = function(_, user, processId) {
	var login = ("" + user).toLowerCase();

	var up = globals.context.session && globals.context.session.getUserProfile(_);
	var user = up.user(_);
	var endpoint = up.selectedEndpoint(_);
	// var login = user.getEndpointLogin(_, endpoint.$uuid).toLowerCase();

	var x3server = endpoint.x3server(_);
	var sadfs = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);

	var fileName;
	for (var i = 0; i < 1000; i++) {
		var options = {
			folder: endpoint.x3ServerFolder(_),
			path: "TRA",
			name: ["x3diary", login, processId, i].join('_'),
			extension: "tra"
		};
		if (sadfs.exists(_, options)) {
			fileName = options.name;
		} else {
			break;
		}
	}
	if (fileName) {
		var log = sadfs.readFile(_, {
			folder: endpoint.x3ServerFolder(_),
			path: "TRA",
			name: fileName,
			extension: "tra"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		if (log && log.length) {
			return log;
		}
	}
};

exports.generateSvg = function(_, log) {
	var rlog = ez.devices.buffer.reader(log);
	var data = x3Transform.convert(_, rlog);

	var options = {
		href: "https://github.com/Sage-ERP-X3/Syracuse/tree/master/{0}#L{1}",
		target: "_blank",
		codes: data.codes,
		frames: data.frames,
		frameformat: "{2} ({0}:{1})",
		palette: {
			"io": "rgb(0,255,255)"
		},
		hash: 2
	};
	return flamegraph.makesvg(data.res, options);
};



exports.LogStore = function(contentType, userName, processId) {
	this.userName = userName;
	this.contentType = contentType;
	this.uuid = uuid.generate();
	this.buffer = undefined;
	this.contentLength = 0;
	if (processId) this.processId = processId;
};

var logStore = exports.LogStore.prototype;

logStore.fileExists = function(_) {
	return true;
};

logStore.getProperties = function(_) {
	var properties = {
		length: 0,
		contentType: this.contentType,
		fileName: "proxy"
	};

	if (this.buffer == undefined) {
		var up = globals.context.session && globals.context.session.getUserProfile(_);
		if (up) {
			var endpoint = up.selectedEndpoint(_);
			var client = pool.getClient(_, globals.context.session, endpoint);
			var processId = this.processId || client.getProcessId();

			var epLogin = up.user(_).getEndpointLogin(_, endpoint.$uuid).toLowerCase();
			var login = ("" + this.userName).toLowerCase();

			var log = exports.readLog(_, this.userName, processId);
			if (log) {
				this.buffer = log;
				properties.length = log.length;
				if (this.contentType === "image/svg+xml") {
					var svg = exports.generateSvg(_, log);
					if (svg) {
						this.buffer = svg;
						properties.length = svg.length;
					}
				}
			}
		}
	}
	return properties;
};

logStore.createReadableStream = function(_) {
	return ez.devices.buffer.reader(this.buffer || "");
};
logStore.setFile = function(_, fileName) {};
logStore.read = function(_, len) {};
logStore.write = function(_, buffer, options) {};
logStore.deleteFile = function(_) {};
logStore.close = function(_) {};
logStore.getUuid = function() {
	return this.uuid;
};