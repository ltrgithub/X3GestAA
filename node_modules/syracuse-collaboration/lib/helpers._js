"use strict";

var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var helpers = require("syracuse-core/lib/helpers");
var httpHelpers = require("syracuse-sdata/lib/httpHelper");
var datetime = require("syracuse-core/lib/types/datetime");
var locale = require("syracuse-core/lib/locale");

var _config = {};

function _hasLock(instance) { return (instance._lock && (instance._lock.status === "success")); }

exports.AdminHelper = {
	lockInstance: function(_, instance) {
		// allways try to lock as the lock might have been deleted by another user
		if((instance._meta.$lockType === "pessimist")/* && !_hasLock(instance)*/) {
			instance._lock = this.getCollaborationOrm(_).lockInstance(_, instance);
			if(!_hasLock(instance)) {
				var ex;
				if(instance._lock && instance._lock.status === "locked") {
					// TODO: provide a comprehensible label for the object
					ex = new Error(locale.format(module, "lockError", instance._meta.name, instance._lock.lock.lockUser, instance._lock.lock.lockDate));
					ex.httpStatus = httpHelpers.HttpStatus.Conflict;
					ex.lockStatus = instance._lock;
				} else {
					ex = new Error(locale.format(module, "lockErrorFatal", instance._meta.name));
					ex.httpStatus = 500;
				}
				throw ex;
			}
		}
	},
	unlockInstance: function(_, instance) {
		if((instance._meta.$lockType === "pessimist")/* && instance._lock*/) {
			this.getCollaborationOrm(_).unlockInstance(_, instance);
		}
	},
	releaseSessionLocks: function(_, ssid) {
//		console.log("release session: "+ssid);
		this.getCollaborationOrm(_).db.collection("dbLocks", _).remove({
			sessionId: ssid
		}, {
			safe: true
		}, _);
	},
	getCollaborationOrm: function(_) {
		var contract = sdataRegistry.getContract(_config.contract, _config.application, true);
		var dataset = _config.dataset;
		//
		return dataModel.getOrm(_, this.getCollaborationModel(), contract.datasets[dataset]);
	},
	getCollaborationModel: function() {
		var contract = sdataRegistry.getContract(_config.contract, _config.application, true);
		var dataset = _config.dataset;
		return dataModel.make(contract, dataset);
	},
	getCollaborationApplication: function(_) {
		return this.getApplication(_, _config.application, _config.contract);
	},
	getApplication: function(_, applicationName, contractName) {
		var opt = {};
		// case insensitive search
		opt.jsonWhere = {
			application: {$regex: "^"+applicationName+"$", $options: "i"},
			contract: {$regex: "^"+contractName+"$", $options: "i"}
		}
		var db = this.getCollaborationOrm(_);
		return db.fetchInstance(_, db.model.getEntity("application"), opt);
	},
	getEndpoints: function(_, options) {
		var opt = {jsonWhere:{}};
		if(options.jsonWhere) opt.jsonWhere = options.jsonWhere;
		else {
			var app = this.getApplication(_, options.application, options.contract);
			if(!app) return null;
			// case insensitive search
			opt.jsonWhere.applicationRef = app.$uuid;
			if(options.dataset) opt.jsonWhere.dataset = {$regex: "^"+options.dataset+"$", $options: "i"};
		}
		var db = this.getCollaborationOrm(_);
		return db.fetchInstances(_, db.model.getEntity("endPoint"), opt);
	},
	getEndpoint: function(_, options) {
		var eps = this.getEndpoints(_, options);
		return eps && eps[0];
	}
}

exports.setup = function(config) {
	var collConf = config || {};
	_config.application = collConf.application || "syracuse";
	_config.contract = collConf.contract || "collaboration";
	_config.dataset = collConf.dataset || "syracuse";
}
