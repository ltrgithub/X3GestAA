"use strict";

var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");
var locale = require("syracuse-core/lib/locale");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
// no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var tracer; // = console.log;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");
//
var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var streams = require('streamline/lib/streams/streams');
var flows = require('streamline/lib/util/flows');

var cookie = "";
var x3sId;
var applicationId;
var adminEp;

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

function get(_, cookie, url, statusCode, fullResponse) {
	return adminTestFixtures.get(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url, statusCode, fullResponse);
}

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 0);
		}
	}
});

asyncTest("init database", 1, function(_) {
	locale.setCurrent(_, "en-us");
	//
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

var db;
var ep;

asyncTest("data setup", 1, function(_) {
	tracer && tracer("inside data setup");
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var opt = {
		$diagnoses: [],
		tracer: tracer,
	};
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", opt);
	//	tracer && tracer("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(opt.$diagnoses), "Demo database import ok");
	// change the collaboration ep
	ep = adminHelper.getEndpoint(_, {
		dataset: "syracuse"
	});
	if (ep) {
		tracer && tracer("(98) - Found endpoint, modify dataset");
		ep.dataset(_, "mongodb_demo");
		var res = ep.save(_);
		tracer && tracer("(101) - endpoint modified: " + sys.inspect(res, null, 4));
	}
	// create some page data
	var pdEnt = db.getEntity(_, "pageData");
	var pageData1 = pdEnt.createInstance(_, db);
	pageData1.content(_, "{ $title: \"PageData1\" }");
	pageData1.save(_);
	var pageData2 = pdEnt.createInstance(_, db);
	pageData2.content(_, "{ $title: \"PageData2\" }");
	pageData2.save(_);
	var pageData3 = pdEnt.createInstance(_, db);
	pageData3.content(_, "{ $title: \"PageData3\" }");
	pageData3.save(_);
	// create a page
	var pdefEnt = db.getEntity(_, "pageDef");
	var pageDef1 = pdefEnt.createInstance(_, db);
	pageDef1.code(_, "syracuse.collaboration.user.$query");
	pageDef1.title(_, "PageDef1 title");
	pageDef1.description(_, "PageDef1 description");
	pageDef1.facet(_, "$query");
	pageDef1.representation(_, "user");
	pageDef1.application(_, db.fetchInstance(_, db.getEntity(_, "application"), {
		jsonWhere: {
			application: "syracuse",
			contract: "collaboration"
		}
	}));
	var v = pageDef1.variants(_).add(_);
	v.code(_, "PDef1V1");
	v.title(_, "PageDef1 Var1");
	v.description(_, "PageDef1 Var1 desc");
	v.pageData(_, pageData1);
	var v = pageDef1.variants(_).add(_);
	v.code(_, "PDef1V2");
	v.title(_, "PageDef1 Var2");
	v.description(_, "PageDef1 Var2 desc");
	v.pageData(_, pageData2);
	pageDef1.save(_);

	var pageDef2 = pdefEnt.createInstance(_, db);
	pageDef2.title(_, "PageDef2 title");
	pageDef2.description(_, "PageDef2 description");
	pageDef2.facet(_, "$query");
	pageDef2.representation(_, "group");
	pageDef2.application(_, db.fetchInstance(_, db.getEntity(_, "application"), {
		jsonWhere: {
			application: "syracuse",
			contract: "collaboration"
		}
	}));
	var v = pageDef2.variants(_).add(_);
	v.code(_, "PDef2V1");
	v.title(_, "PageDef2 Var1");
	v.description(_, "PageDef2 Var1 desc");
	v.pageData(_, pageData3);
	pageDef2.save(_);

	start();
});

asyncTest("standard profile export test", 6, function(_) {
	var profileEnt = db.getEntity(_, "exportProfile");
	var profile = profileEnt.createInstance(_, db);
	profile.code(_, "P1");
	profile.description(_, "P1");
	profile.endpoint(_, ep);
	var it = profile.exportProfileItem(_).add(_);
	it.className(_, "pageDef");
	it.title(_, "PageDefs");
	it.standardProfile(_, true);
	it.filter(_, "(representation eq \"user\")");
	profile.save(_);
	// export
	var res = jsonExport.profileToJsonContent(_, profile, {
		tracer: tracer
	});
	tracer && tracer("(187) Exported object is: " + sys.inspect(res, null, 6));
	// prototypes check
	deepEqual(res.$prototypes.pageDef.$key, ["code"], "pageDef prototype key ok");
	strictEqual(res.$prototypes.pageData.$key, "code", "Page data prototype ok");
	// data check
	strictEqual(res.$items.length, 3, "One item + 2 page datas exported ok");
	strictEqual(res.$localization["en-us"][res.$items[2].title], "PageDef1 title", "Title exported ok");
	strictEqual(res.$localization["en-us"][res.$items[2].description], "PageDef1 description", "Description exported ok");
	strictEqual(res.$items[2].variants.length, 2, "Variants length ok");

	start();
});

asyncTest("children filters options", 7, function(_) {
	var profileEnt = db.getEntity(_, "personalizationManagement");
	var profile = profileEnt.createInstance(_, db);
	profile.code(_, "P2");
	profile.description(_, "P2");
	profile.pagesExport(_, true);
	profile.pageFilter(_, "(representation eq \"user\")");
	profile.pageVignetteFilter(_, "(code eq \"PDef1V1\")");
	profile.save(_);
	// export
	tracer && tracer("(209) before export");
	var diag = [];
	var res = profile.exportPersonalizations(_, {
		targetType: "download",
		$diagnoses: diag
	});
	res = JSON.parse(res.body);
	tracer && tracer("(214) Exported object is: " + sys.inspect(res, null, 6));
	tracer && tracer("(215) diags: " + sys.inspect(diag, null, 6));
	// data check
	strictEqual(res.$items.length, 2, "One item + 1 page datas exported ok");
	strictEqual(res.$items[1].variants.length, 1, "Variants length ok");
	var variantTitle = res.$items[1].variants[0].title;
	strictEqual(res.$localization["en-us"][variantTitle], "PageDef1 Var1", "Localized variant title ok");
	//
	profile.pageVignetteFilter(_, "(code eq \"NOT_EXISTS\")");
	profile.save(_);
	// export
	var diag = [];
	var res = profile.exportPersonalizations(_, {
		targetType: "download",
		$diagnoses: diag
	});
	res = JSON.parse(res.body);
	tracer && tracer("(227) Exported object is: " + sys.inspect(res, null, 6));
	tracer && tracer("(228) diags: " + sys.inspect(diag, null, 6));
	// data check
	strictEqual(res.$items.length, 1, "One item + 0 page datas exported ok");
	strictEqual(res.$items[0].variants.length, 0, "Variants length ok");
	// inner join option
	profile.pageInnerJoin(_, true);
	profile.save(_);
	// export
	var diag = [];
	var res = profile.exportPersonalizations(_, {
		targetType: "download",
		$diagnoses: diag
	});
	res = JSON.parse(res.body);
	tracer && tracer("(240) Exported object is: " + sys.inspect(res, null, 6));
	tracer && tracer("(241) diags: " + sys.inspect(diag, null, 6));
	// data check
	strictEqual(res.$items.length, 0, "Zero item + 0 page datas exported ok");
	ok(res.$localization["en-us"][variantTitle] == null, "Variant title not exported ok");

	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});