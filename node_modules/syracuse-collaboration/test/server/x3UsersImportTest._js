"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var testHelpers = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

var endPoint = testHelpers.modifyCollaborationEndpoint("mongodb_demo");

var testData = require('../fixtures/stubContract/contract');
var testEndPoint = testData.endpoint;

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: 27017
	}
};

config.sdata.endpoints.push(testEndPoint);

var tracer = console.log;
//var tracer = null;

var port = 3004;
var acceptLanguage = "fr,fr-fr";
//var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');

var cookie = "";
var x3sId ;
var applicationId ;
var adminEp ;


function _getAdminModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

function _getSamplesModel() {
	return dataModel.make(registry.applications.x3stub.contracts.erp, "test");
}

var doStop = false;
module("syracuseX3UsersImportTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

var adminDb;
var samplesDb;

asyncTest("init database", 2, function(_) {
	ok(testHelpers.makeSessionStub(_), "Session stub ok");
	//
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db(testEndPoint.datasets.test.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db("mongodb_demo", server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	
	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);

		start();
	});
});

asyncTest("get orms", 0, function(_) {
	//
	adminDb = dataModel.getOrm(_, _getAdminModel(), endPoint.datasets.mongodb_demo);
	samplesDb = dataModel.getOrm(_, _getSamplesModel(), testEndPoint.datasets.test);
	//
 	start();
});

function onlyInfo(diags) {
	return testHelpers.onlyInfo(diags);
}

asyncTest("import user with existing group", 0, function(_) {
	// create sample user
	var sUserEnt = samplesDb.getEntity(_, "AUTILISINI");
	var su = sUserEnt.createInstance(_, samplesDb);
	su.USR(_, "USR1");
	su.LOGIN(_, "USR_LOGIN1");
	var res = su.save(_);
	ok(onlyInfo(res.$actions.$save.$diagnoses), "USR1 saved ok");
	//
	su = samplesDb.fetchInstance(_, sUserEnt, {
		jsonWhere: {
			USR: "USR1"
		}
	});
	strictEqual(su.USR(_), "USR1", "USR1 fetched ok");
	
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
