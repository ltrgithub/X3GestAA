"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
//
var tracer = console.log;
var tracer = null;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_admin_test");
}

function _createDataContext() {
	return new DataContext(_getModel(), true);
}

var doStop = false;
module("syracuseAdministrationTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_admin_test"].hostname, endPoint.datasets["mongodb_admin_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

function hasErrors(body) {
	var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
		return diag.severity == "error";
	});
	if(!hasErr) {
		for(var key in body) {
			if(typeof body[key] === "object")
				hasErr = hasErr || hasErrors(body[key]);
		};
	}
	//
	return hasErr;
}

var _data = {};
var _session = {
	setData: function(name, value) {
		var old = _data[name];
		if (old == value) return;

		if (old && old.onDestroy) {
			old.onDestroy();
		}
		if (typeof value == "undefined") delete _data[name];
		else _data[name] = value;
	},
	getData: function(name) {
		return _data[name];
	},
	_reset: function() {
		_data = {};
	}
}

function _resetSession() {
	_data = {};
}

function _createRequest(method, url, data, set) {
	var baseUrl = "http://localhost/sdata/syracuse/collaboration/mongodb_admin_test"
	return {
		session: _session,
		method: method,
		url: (set ? url : (baseUrl + url)).replace(/'/g, "%27"),
		context: {
			parseBody: function(_) {
				return data;
			}
		},
		headers: {
			cookie: "fake cookie"
		}
	}
}

function _checkStatus(response, statusCode, message) {
	strictEqual(response.statusCode, statusCode, message);
	if (response.statusCode != statusCode) {
		console.log(response);
		doStop = true;
		throw new Error("aborting test");
	}
}

var users = [{
	login: "owken",
	firstName: "Obi Wan",
	lastName: "Kenobi",
	password: "owken"
}, {
	login: "lusky",
	firstName: "Luke",
	lastName: "Skywalker",
	password: "lusky"
}, {
	login: "yoda",
	lastName: "Yoda",
	password: "yoda"
}, {
	login: "rex",
	firstName: "Rex",
	lastName: "The Clone",
	password: "rex"
}];
var endPoints = [{
	description: "Coruscant",
	dataset: "Coruscant",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27000
}, {
	description: "Endor",
	dataset: "Endor",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27000
}, {
	description: "Dagobah",
	dataset: "Dagobah",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27000
}];
var roles = [{
	description: "Master Jedi"
}, {
	description: "Jedi"
}, {
	description: "Padawan"
}, {
	description: "Clone"
}];
var groups = [{
	description: "Universe"
}, {
	description: "Separatists"
}, {
	description: "Independent Market"
}, {
	description: "Trade Federation"
}];

var cookie = "";
var applicationId;

asyncTest("create objects", 63, function(_) {
	requestCount++;
	var body;
	console.log("get cookie; server started: "+syracuse.server.serverStarted);
	cookie = getCookie(_);
	// check init script
	var userNames = get(_, cookie, "users").$resources.map(function(item) {
		return item.login;
	});
	ok(userNames.indexOf("admin") >= 0, "Admin ok");
	ok(userNames.indexOf("guest") >= 0, "Guest ok");
	ok(userNames.length == 2, "Users count ok");
	// get main application
	var app = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(app != null, "Application fetch ok");
	applicationId = app.$uuid;
	
	// create users
	console.log("create users");
	users.forEach_(_, function(_, user) {
		var body = post(_, cookie, "users/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(user);
		user.$uuid = body.$uuid;
		data.$key = user.$uuid;
		data.$etag = body.$etag;
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		console.log("create user =======================")
		body = put(_, cookie, body.$url, data);
		console.log("create user body: " + sys.inspect(body, null, 4));
		ok(onlyInfo(body.$actions.$save.$diagnoses), "create user: " + user.login + " ok");
	});
	// create groups
	groups.forEach_(_, function(_, item) {
		var body = post(_, cookie, "groups/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		console.log("body after post: " + sys.inspect(body, null, 4));
		var data = helpers.object.clone(item);
		item.$uuid = body.$uuid;
		data.$key = item.$uuid;
		data.$etag = body.$etag;
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		body = put(_, cookie, body.$url, data);
		ok(onlyInfo(body.$actions.$save.$diagnoses), "create group " + item.description + " ok");
	});
	// create roles
	roles.forEach_(_, function(_, item) {
		var body = post(_, cookie, "roles/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(item);
		item.$uuid = body.$uuid;
		data.$key = item.$uuid;
		data.$etag = body.$etag;
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		body = put(_, cookie, body.$url, data);
		console.log("body: " + sys.inspect(body, null, 4));
		ok(onlyInfo(body.$actions.$save.$diagnoses), "create role " + item.description + " ok");
	});
	// create endpoints
	endPoints.forEach_(_, function(_, item) {
		var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(item);
		item.$uuid = body.$uuid;
		data.$key = item.$uuid;
		data.$etag = body.$etag;
		data.applicationRef = {$uuid: applicationId};
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		body = put(_, cookie, body.$url, data);
		console.log("create endpoint " + item.description + " body: " + sys.inspect(body));
		ok(onlyInfo(body.$actions.$save.$diagnoses), "create endPoint " + item.description + " ok");
	});
	// create an x3 endpoint, by step like in edit form
	// get x3/erp application
	var app = adminHelper.getApplication(_, "x3", "erp");
	ok(app != null, "X3 Application fetch ok");
	// x3server
	body = post(_, cookie, "x3servers", {
		"description": "X3 Developpement Server",
		"serverHost": "172.28.16.106",
		"serverPort": 17000,
		"serverTimeout": 60000,
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var srvrId = body.$uuid;
	body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	body = put(_, cookie, body.$url, {
		$etag: body.$etag,
		description: "X3 ERP endpoint"
	}, 200);
	body = put(_, cookie, body.$url, {
		$etag: body.$etag,
		applicationRef: {$uuid: app.$uuid}
	}, 200);
	body = put(_, cookie, body.$url, {
		$etag: body.$etag,
		dataset: "superv"
	}, 200);
	body = put(_, cookie, body.$url, {
		$etag: body.$etag,
		x3server: {$uuid: srvrId},
		x3ServerFolder: "superv"
	}, 200);
	ok(!hasErrors(body), "No errors ok");
	// should be able to save now
	body = put(_, cookie, body.$url, {
		$etag: body.$etag,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200);
	console.log("create x3 endpoint body"+sys.inspect(body, null, 4));
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save X3 endPoint ok");
	var epId = body.$uuid;
	// try to get it
	body = get(_, cookie, "endPoints('"+body.$uuid+"')",200);
	strictEqual(body.$uuid, epId, "Saved endPoint get ok");
	
	start();
});

function _findUuid(coll, searchProp, searchVal) {
	var uuid = null;
	coll.forEach(function(item) {
		if (item[searchProp] == searchVal) {
			console.log("found: " + sys.inspect(item));
			uuid = item.$uuid;
		}
	});
	return uuid;
}

asyncTest("group hierarchie test", 13, function(_) {
	requestCount++;
	// var cookie = getCookie(_);
	var body = null;
	// add groups to separatists
	body = put(_, cookie, "groups('" + _findUuid(groups, "description", "Separatists") + "')", {
		children: [{
			$uuid: _findUuid(groups, "description", "Trade Federation")
		}]
	});
	console.log("group hierarchie test body(1): "+sys.inspect(body,null,4));
	ok(onlyInfo(body.$actions.$save.$diagnoses), "group Trade Federation added to Separatists");
	strictEqual(body.children.length, 1, "Groups count test");
	strictEqual(body.children[0].description, "Trade Federation", "Groups desc test");
	//
	body = put(_, cookie, "groups('" + _findUuid(groups, "description", "Universe") + "')", {
		children: [{
			$uuid: _findUuid(groups, "description", "Independent Market")
		}]
	}, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "group Independent Market added to Universe");
	strictEqual(body.children.length, 1, "Groups count test");
	strictEqual(body.children[0].description, "Independent Market", "Groups desc test");
	// Trade Federation changes group
	console.log("grp: ================");
	body = put(_, cookie, "groups('" + _findUuid(groups, "description", "Universe") + "')", {
		children: [{
			$uuid: _findUuid(groups, "description", "Trade Federation")
		}]
	}, 200);
	console.log("body grp: " + sys.inspect(body));
	console.log("grp: ================");
	ok(onlyInfo(body.$actions.$save.$diagnoses), "group Trade Federation added to Universe");
	strictEqual(body.children.length, 2, "Groups count test");
	body = get(_, cookie, "groups('" + _findUuid(groups, "description", "Separatists") + "')", 200, "group.$details");
	ok(!body.children || body.children.length == 0, "Groups count test");
	//
	console.log("body grp: " + sys.inspect(body));
	//	
	start();
});

asyncTest("link user and groups", 31, function(_) {
	requestCount++;
	// var cookie = getCookie(_);
	var body = null;
	//


	function _addGroupToUser(_, user, group) {
		var userUuid = _findUuid(users, "login", user);
		// Fetch user WC
		body = post(_, cookie, "users('" + userUuid + "')/$workingCopies?trackingId=" + uuid.generate(), {});
		// add the group to the group list
		console.log("add group to user start");
		body = put(_, cookie, body.$url, {
			$key: userUuid,
			$etag: body.$etag,
			groups: [{
				$uuid: _findUuid(groups, "description", group)
			}]
		});
		console.log("link user group body(1): "+sys.inspect(body,null,4));
		strictEqual(body.groups[0].description, group, "Add group first return");
		body = put(_, cookie, body.$url, {
			$key: userUuid,
			$etag: body.$etag,
			$actions: {
				$save: {
					$isRequested: true
				}
			}
		});
		//		console.log("link user group body(2): "+sys.inspect(body,null,4));
		ok(onlyInfo(body.$actions.$save.$diagnoses), "group " + group + " added to " + user);
	}
	//
	_addGroupToUser(_, "owken", "Independent Market");
	_addGroupToUser(_, "owken", "Trade Federation");
	//
	body = get(_, cookie, "users('" + _findUuid(users, "login", "owken") + "')", 200, "user.$details");
	//	console.log("body(319): "+sys.inspect(body,null,4));
	strictEqual(body.groups.length, 2, "Groups count test");
	// get the group, check if user is in
	body = get(_, cookie, "groups('" + _findUuid(groups, "description", "Trade Federation") + "')", 200, "group.$details");
	console.log("body: " + sys.inspect(body));
	strictEqual(body.users.length, 1, "Users count test");
	strictEqual(body.users[0].login, "owken", "User login test");
	//
	_addGroupToUser(_, "yoda", "Universe");
	body = get(_, cookie, "users('" + _findUuid(users, "login", "yoda") + "')", 200, "user.$details");
	console.log("body: " + sys.inspect(body));
	strictEqual(body.groups.length, 1, "Groups count test");
	strictEqual(body.groups[0].description, "Universe", "Groups description test");
	//
	_addGroupToUser(_, "lusky", "Independent Market");
	body = get(_, cookie, "users('" + _findUuid(users, "login", "lusky") + "')", 200, "user.$details");
	strictEqual(body.groups.length, 1, "Groups count test");
	strictEqual(body.groups[0].description, "Independent Market", "Groups description test");

	start();
});

asyncTest("link groups and endpoints", 18, function(_) {
	requestCount++;
	// var cookie = getCookie(_);
	var body = null;
	//


	function _addEndPointToGroup(_, endpoint, group) {
		body = post(_, cookie, "groups('" + _findUuid(groups, "description", group) + "')/$workingCopies?trackingId=" + uuid.generate(), {});
		// add the group to the group list
		body = put(_, cookie, body.$url, {
			$key: _findUuid(groups, "description", group),
			$etag: body.$etag,
			endPoints: [{
				$uuid: _findUuid(endPoints, "description", endpoint)
			}],
			$actions: {
				$save: {
					$isRequested: true
				}
			}
		});
		ok(onlyInfo(body.$actions.$save.$diagnoses), "endpoint " + endpoint + " added to " + group);
	}
	//
	_addEndPointToGroup(_, "Coruscant", "Independent Market");
	_addEndPointToGroup(_, "Endor", "Independent Market");
	_addEndPointToGroup(_, "Endor", "Trade Federation");
	_addEndPointToGroup(_, "Dagobah", "Trade Federation");
	// check
	body = get(_, cookie, "groups('" + _findUuid(groups, "description", "Trade Federation") + "')", 200, "group.$details");
	strictEqual(body.endPoints.length, 2, "EndPoints count test");
	body = get(_, cookie, "groups('" + _findUuid(groups, "description", "Independent Market") + "')", 200, "group.$details");
	strictEqual(body.endPoints.length, 2, "EndPoints count test");
	body = get(_, cookie, "endPoints('" + _findUuid(endPoints, "description", "Coruscant") + "')", 200, "endPoint.$details");
	strictEqual(body.groups.length, 1, "Group count test");
	//
	start();
});

var nonAffectedPageUuid; // not affected to users or roles
var nonAffectedQueryPageUuid; // not affected to users or roles, facet is $query
var jediPadawanPageUuid; // affected to roles Jedi and Padawan
var yodaLuskyPageUuid; // affected to users Yoda and Lusky
asyncTest("create page datas", 20, function(_) {
	requestCount++;
	var body;
	// var cookie = getCookie(_);
	// create a page for /syracuse/collaboration//group, unaffected
	body = post(_, cookie, "pageDatas/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	var page1Uuid = body.$uuid;
	nonAffectedPageUuid = page1Uuid;
	var data = {
		$key: body.$uuid,
		$etag: body.$etag,
		//
		title: "page1",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$details",
		content: {
			"testName": "UnaffectedPage",
			"$category": "tabs",
			"$items": [{
				"$title": "Default vertical grid"
			}, "$testEscape", 5]
		},
		//
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	};
	//	console.log("create page datas.create page 1==============");
	body = put(_, cookie, body.$url, data);
	//	console.log("create page datas.create page 1:"+sys.inspect(body,null,4));
	ok(onlyInfo(body.$actions.$save.$diagnoses), "create page 1 ok");
	// check escaping
	body = get(_, cookie, "pageDatas('" + page1Uuid + "')", 200, "pageData.$details");
	ok(body.content.hasOwnProperty("$category"), "mongodb store and escape ok");
	console.log("create page datas.create page 1:" + sys.inspect(body, null, 4));
	// create page def
	var page1VarUuid = uuid.generate();
	body = post(_, cookie, "pageDefs", {
		$uuid: uuid.generate(),
		title: "page1",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$details",
		variants: [{
			$uuid: page1VarUuid,
			pageData: {
				$uuid: page1Uuid
			}
		}]
	}, 201);
	// get the page
	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$details,$page')", 200);
	console.log("create page datas.create page 1:" + sys.inspect(body, null, 4));
	strictEqual(body.$authorUrl, baseUrl+contractUrl+"pageAuths('" + page1VarUuid + "')/$workingCopies?representation=pageAuth.$edit", "Author url test");
	// create a page for /syracuse/collaboration//group.$query, unaffected
	var body = post(_, cookie, "pageDatas/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	var page1Uuid = body.$uuid;
	nonAffectedQueryPageUuid = page1Uuid;
	var data = {
		$key: body.$uuid,
		$etag: body.$etag,
		//
		title: "page2",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$query",
		content: {
			"testName": "UnaffectedQueryPage",
			"$category": "tabs",
			"$items": [{
				"$title": "Default vertical grid"
			}, "$testEscape", 5]
		},
		//
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	};
	body = put(_, cookie, body.$url, data, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "create page query ok");
	body = post(_, cookie, "pageDefs", {
		$uuid: uuid.generate(),
		title: "page2",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$query",
		variants: [{
			$uuid: uuid.generate(),
			pageData: {
				$uuid: nonAffectedQueryPageUuid
			}
		}]
	}, 201);
	var groupQueryPageUuid = body.$uuid;
	// create a page for /syracuse/collaboration//group.$query.compact (variant), unaffected
/*	var body = post(_, cookie, "pageDatas/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	var page1Uuid = body.$uuid;
	nonAffectedQueryPageUuid = page1Uuid;
	var data = {
		$key: body.$uuid,
		$etag: body.$etag,
		//
		title: "page3",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$query",
		variant: "compact",
		content: {
			"testName": "UnaffectedQueryCompactPage",
			"$category": "tabs",
			"$items": [{
				"$title": "Default vertical grid"
			}, "$testEscape", 5]
		},
		//
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	};
	body = put(_, cookie, body.$url, data, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "create page query compact ok");
	*/
	// create a page affected to the roles Jedi and Padawan
	var body = post(_, cookie, "pageDatas/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	var page2Uuid = body.$uuid;
	jediPadawanPageUuid = page2Uuid;
	var data = {
		$key: body.$uuid,
		$etag: body.$etag,
		//
		title: "page4",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$query",
		content: {
			"testName": "JediPadawanPage",
			"$category": "",
			"$items": [{
				"$title": "Jedi and Padawan Page"
			}, "$testEscape", 5]
		},
		roles: [{
			$uuid: _findUuid(roles, "description", "Jedi")
		}, {
			$uuid: _findUuid(roles, "description", "Padawan")
		}],
		//
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	};
	body = put(_, cookie, body.$url, data, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "create page 2 ok");
	body = put(_, cookie, "pageDefs('"+groupQueryPageUuid+"')", {
		variants: [{
			$uuid: uuid.generate(),
			roles: [{
				$uuid: _findUuid(roles, "description", "Jedi")
			}, {
				$uuid: _findUuid(roles, "description", "Padawan")
			}],
			pageData: {
				$uuid: jediPadawanPageUuid
			}
		}]
	}, 200);
	// create a page affected to Yoda and Luke
	var body = post(_, cookie, "pageDatas/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	var page2Uuid = body.$uuid;
	yodaLuskyPageUuid = page2Uuid;
	var data = {
		$key: body.$uuid,
		$etag: body.$etag,
		//
		title: "page5",
		application: {$uuid: applicationId},
		representation: "group",
		facet: "$query",
		content: {
			"testName": "YodaLuskyPage",
			"$category": "",
			"$items": [{
				"$title": "Yoda and Lusky Page"
			}, "$testEscape", 5]
		},
		users: [{
			$uuid: _findUuid(users, "login", "yoda")
		}, {
			$uuid: _findUuid(users, "login", "lusky")
		}],
		//
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	};
	body = put(_, cookie, body.$url, data, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "create page 3 ok");
	body = put(_, cookie, "pageDefs('"+groupQueryPageUuid+"')", {
		variants: [{
			$uuid: uuid.generate(),
			users: [{
				$uuid: _findUuid(users, "login", "yoda")
			}, {
				$uuid: _findUuid(users, "login", "lusky")
			}],
			pageData: {
				$uuid: yodaLuskyPageUuid
			}
		}]
	}, 200);
	//
	start();
});

asyncTest("test page fetch", 11, function(_) {
	requestCount++;
	var body;
	// page fetch for yoda : must get yodaLuskyPageUuid
	cookie = getCookie(_, "yoda", "yoda");
	console.log("page fetch test: 1");
	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$query,$page')?role=" + _findUuid(roles, "description", "Master Jedi"), 200);
	console.log("page fetch test: 2");
	strictEqual(body.testName, "YodaLuskyPage", "YodaLuskyPage fetch ok");
	// page fetch for owken : must get JediPadawanPage
	cookie = getCookie(_, "owken", "owken");
	console.log("page fetch(679)");
	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$query,$page')?role=" + _findUuid(roles, "description", "Jedi"), 200);
	strictEqual(body.testName, "JediPadawanPage", "JediPadawanPage fetch ok");
	console.log("page fetch(682) body: "+sys.inspect(body));
	// page fetch for owken : must get UnaffectedPage has no role
	cookie = getCookie(_, "rex", "rex");
	console.log("page fetch(826)");
	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$details,$page')", 200);
	strictEqual(body.testName, "UnaffectedPage", "UnaffectedPage fetch ok");
	console.log("page fetch(829) body: "+sys.inspect(body));
	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$query,$page')", 200);
	strictEqual(body.testName, "UnaffectedQueryPage", "UnaffectedQueryPage fetch ok");
//	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$query.compact,$page')", 200);
//	strictEqual(body.testName, "UnaffectedQueryCompactPage", "UnaffectedQueryPage compact fetch ok");
	// missing variant, must get an empty page
//	body = get(_, cookie, "pages('syracuse.collaboration.mongodb_admin_test.group.$query.extended,$page')", 200);
//	equal(body.testName, null, "UnaffectedQueryPage extended fetch ok");
//	console.log("body: " + sys.inspect(body, null, 4));
	//
	start();
});

asyncTest("user profile test", 16, function(_) {
	// language part========
	cookie = getCookie(_, "yoda", "yoda");
	// get userProfile WC
	var resp = post(_, cookie, "userProfiles/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201, true);
	console.log("userProfile.body: "+sys.inspect(resp,null,4));
	// should get http header locale (fr-FR)
	strictEqual(resp.body.selectedLocale.code, "fr-FR", "Default locale from header ok");
	strictEqual(resp.headers["content-language"], "fr-FR", "Content-Language ok");
	// check application prototype "title"
	var body = get(_, cookie, "$prototypes('application.$detail')", 200);
	console.log("userProfile.body (2): "+sys.inspect(body,null,4));
	strictEqual(body.$.contract.$title, "Contrat", "'Contrat' title ok");
	// get locale en-US
	body = get(_, cookie, "localePreferences?representation=localePreference.$query&where="+encodeURIComponent("(code eq \"en-US\")"), 200);
	console.log("userProfile.body (3): "+sys.inspect(body,null,4));
	// set lang en-US
	resp = put(_, cookie, resp.body.$url, {
		selectedLocale: {$uuid: body.$resources[0].$uuid},
		$etag: resp.body.$etag,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200, true); 
	strictEqual(resp.body.selectedLocale.code, "en-US", "Locale changed ok");
	// check application prototype "title"
	var body = get(_, cookie, "$prototypes('application.$detail')", 200);
	console.log("userProfile.body (4): "+sys.inspect(body,null,4));
	strictEqual(body.$.contract.$title, "Contract", "'Contract' title ok");
	// add personalized locales to rex
	body = put(_, cookie, "users('"+_findUuid(users, "login", "rex")+"')", {
		locales: [{
			code: "fr-FR",
			shortDate: "yyyy/MM/dd",
			numberDecimalSeparator: ",",
			numberGroupSeparator: " ",
			numberGroupSize: 3
		}]
	}, 200);
//	body = get(_, cookie, "users('"+_findUuid(users, "login", "rex")+"')?representation=user.$details", 200);
	tracer && tracer("userProfile.body (5): "+sys.inspect(body,null,6));
	cookie = getCookie(_, "rex", "rex");
	// get userProfile WC
	var resp = post(_, cookie, "userProfiles/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201, true);
	tracer && tracer("userProfile.body (6): "+sys.inspect(resp,null,4));
	// should get http header locale (fr-FR)
	strictEqual(resp.body.selectedLocale.code, "fr-FR", "Default locale from header ok");
	strictEqual(resp.body.selectedLocale.shortDate, "yyyy/MM/dd", "Locale short date ok");
	//
	start();
});

asyncTest("group add passing a code (error mngmt)", 2, function(_) {
	cookie = getCookie(_, "yoda", "yoda");
	var body = put(_, cookie, "users('"+_findUuid(users, "login", "rex")+"')", {
		groups: [{
			code: "notAllowed"
		}]
	}, 400);
	tracer && tracer("errors test (1): "+sys.inspect(body,null,6));

	start();
})

asyncTest("logout test", 1, function(_) {
	ok(true, "NYI");
	start();
});

asyncTest("stop server", 0, function(_) {
	syracuse.server.close();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
