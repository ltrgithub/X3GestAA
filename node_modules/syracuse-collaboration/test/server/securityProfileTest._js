"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var testHelpers = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var tracer = console.log;
//var tracer = null;

var endPoint = testHelpers.modifyCollaborationEndpoint("mongodb_demo");
//
var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//start syracuse server
//syracuse.server.listen(null, port);

var cookie = "";
var x3sId ;
var applicationId ;
var adminEp ;

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

function get(_, cookie, url, statusCode, fullResponse) {
	return testHelpers.get(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url, statusCode, fullResponse);
}

function post(_, cookie, url, data, statusCode, fullResponse) {
	return testHelpers.post(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url, data, statusCode, fullResponse);
}

function put(_, cookie, url, data, statusCode, fullResponse) {
	return testHelpers.put(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url, data, statusCode, fullResponse);
}

var doStop = false;
module("securityProfilesTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});


//start syracuse server
var syracuse;
//wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});

function onlyInfo(diags) {
	return testHelpers.onlyInfo(diags);
}

var limitedProfile = null;

asyncTest("data setup", 3, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {$diagnoses:diag, tracer:console.log});
	//console.log("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");
	// roles
	var guestRole = db.fetchInstance(_, db.getEntity(_, "role"), {
		jsonWhere: {
			description: "Guest"
		}
	});
	var superRole = db.fetchInstance(_, db.getEntity(_, "role"), {
		jsonWhere: {
			description: "Super administrator"
		}
	});
	ok(guestRole != null, "Guest role fetch ok");
	ok(superRole != null, "Super role fetch ok");
	// create some security profiles
	var p = db.getEntity(_, "securityProfile").createInstance(_, db);
	p.code(_, "full");
	p.description(_, "full");
	p.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		it.canCreate(_, true);
		it.canRead(_, true);
		it.canWrite(_, true);
		it.canDelete(_, true);
	});
	p.roles(_).set(_, superRole);
	p.save(_);
	var p = limitedProfile = db.getEntity(_, "securityProfile").createInstance(_, db);
	p.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		// can acces "myProfile"
		if(it.code(_) === "myProfile") {
			it.canCreate(_, true);
			it.canRead(_, true);
			it.canWrite(_, true);
			it.canDelete(_, true);
		}
	});
	p.code(_, "none");
	p.description(_, "none");
	p.roles(_).set(_, guestRole);
	p.save(_);
	
	start();
});

asyncTest("read restrictions tests", 12, function(_) {
	var cookie = testHelpers.getCookie(_, baseUrl, "admin", "admin");
	tracer && tracer("before get guest (142)");
	var body = get(_, cookie, "users(login eq \"guest\")?representation=user.$details", 200);
	tracer && tracer("after get guest (144)");
	strictEqual(body.login, "guest", "Guest user fetched for admin ok");
	ok(body.groups && body.groups.some(function(g) { return g.description === "Guests"; }), "Guest user fetched for admin ok (2)");
	
	var cookie = testHelpers.getCookie(_, baseUrl, "guest", "guest");
	tracer && tracer("before get guest (157)");
	var resp = get(_, cookie, "users(login eq \"admin\")?representation=user.$details", 404, true);
	tracer && tracer("before get guest (159)");
	strictEqual(resp.statusCode, 404, "Admin user not found for guest ok");
	var body = get(_, cookie, "users(login eq \"guest\")?representation=user.$details", 200);
	strictEqual(body.login, "guest", "Guest user found for guest ok");
	var body = get(_, cookie, "users('"+body.$uuid+"')?representation=user.$details", 200);
	strictEqual(body.login, "guest", "Guest user found by uuid for guest ok");
	ok(body.groups == null, "Guest cannot read groups ok");

	start();
});

asyncTest("create restrictions tests", 8, function(_) {
	// full rights user - should pass
	var cookie = testHelpers.getCookie(_, baseUrl, "admin", "admin");
	// try to create a group, should get 201
	var body = post(_, cookie, "groups", {
		$uuid: helpers.uuid.generate(),
		description: "Should pass"
	}, 201);
	// try to create a group wc, should get 201
	var body = post(_, cookie, "groups/$template/$workingCopies", {
		$uuid: helpers.uuid.generate(),
		description: "Should pass 1"
	}, 201);
	// DATA SETUP: allow limited profile to read users but not to create
	limitedProfile.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		// can acces "myProfile"
		if(it.code(_) === "users") {
			it.canCreate(_, false);
			it.canRead(_, true);
			it.canWrite(_, false);
			it.canDelete(_, false);
		}
	});
	limitedProfile.save(_);
	// limited rights user - should fail
	var cookie = testHelpers.getCookie(_, baseUrl, "guest", "guest");
	// get a query, "create" links should be masked
	var body = get(_, cookie, "groups?representation=group.$query", 200);
	strictEqual(body.$links && body.$links.$create && body.$links.$create.$isHidden, true, "$create link hidden ok");
	// try to create a group, should return 403
	var body = post(_, cookie, "groups", {
		$uuid: helpers.uuid.generate(),
		description: "Should fail"
	}, 403);
	// try to create a group wc, should return 403
	var body = post(_, cookie, "groups/$template/$workingCopies", {
		$uuid: helpers.uuid.generate(),
		description: "Should fail"
	}, 403);
	
	start();
});

asyncTest("update restrictions tests", 27, function(_) {
	// full rights user - should pass
	var cookie = testHelpers.getCookie(_, baseUrl, "admin", "admin");
	// add a group to user import, should pass
	var body = put(_, cookie, "users(login eq 'import')?representation=user.$edit", {
		groups: [{
			description: "Overseas CFO",
			$index: 0
		}]
	}, 200);
	// check group added
	var body = get(_, cookie, "users(login eq 'import')?representation=user.$details", 200);
	tracer && tracer("body (232): "+sys.inspect(body, null, 4));
	ok(body.groups.some(function(g) { return g.description === "Overseas CFO"; }), "Group added ok");
	// add a group using working copy, should pass
//	tracer && tracer("(237)");
	var body = post(_, cookie, "users(login eq 'import')/$workingCopies?representation=user.$edit", {
		groups: [{
			description: "Overseas auditors",
			$index: 1
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 201);
	// check group added
	var body = get(_, cookie, "users(login eq 'import')?representation=user.$edit", 200);
	ok(body.groups.some(function(g) { return g.description === "Overseas auditors"; }), "Group added ok (wc)");
	//
	// limited rights user - should fail
	var cookie = testHelpers.getCookie(_, baseUrl, "guest", "guest");
	// cannot modify class group at all
//	tracer && tracer("before modify group (256)");
	var body = put(_, cookie, "groups(description eq 'Overseas CFO')?representation=group.$edit", {
		description: "My CFO"
	}, 403);
//	tracer && tracer("body (259): "+sys.inspect(body, null, 4));
	//
	var body = put(_, cookie, "users(login eq 'import')?representation=user.$edit", {
		groups: [{
			description: "Overseas accountants",
			$index: 2
		}]
	}, 403);
	// check group NOT added
	var body = get(_, cookie, "users(login eq 'import')?representation=user.$details", 200);
//	tracer && tracer("body (264): "+sys.inspect(body, null, 4));
	ok(body.groups.every(function(g) { return g.description !== "Overseas accountants"; }), "Group NOT added ok");
	// add a group using working copy, should fail
	tracer && tracer("(267)");
	var body = post(_, cookie, "users(login eq 'import')/$workingCopies?representation=user.$edit", {
		groups: [{
			description: "French CFO",
			$index: 1
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 403);
//	tracer && tracer("body (285): "+sys.inspect(body, null, 4));
	// check group added
	var body = get(_, cookie, "users(login eq 'import')?representation=user.$edit", 200);
	ok(body.groups.every(function(g) { return g.description !== "French CFO"; }), "Group NOT added ok (2)");
	// I can modify my own firstName
	var body = put(_, cookie, "users(login eq 'guest')?representation=user.$edit", {
		firstName: "New Guest Name"
	}, 200);
	var body = get(_, cookie, "users(login eq 'guest')?representation=user.$edit", 200);
	strictEqual(body.firstName, "New Guest Name", "Changed own firstName Ok");
	// Add a group to guest by guest must fail
	var body = post(_, cookie, "users(login eq 'guest')/$workingCopies?representation=user.$edit", {
		groups: [{
			description: "French CFO",
			$index: 1
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 201);
	// check group added
	var body = get(_, cookie, "users(login eq 'guest')?representation=user.$edit", 200);
	ok(body.groups.every(function(g) { return g.description !== "French CFO"; }), "Group NOT added ok (3)");
	// get a query, "edit" and "save" links should be masked in $resources
	var body = get(_, cookie, "groups?representation=group.$query", 200);
	tracer && tracer("body (312): "+sys.inspect(body, null, 4));
	var links = body.$resources && body.$resources[0] && body.$resources[0].$links;
	strictEqual(links && links.$edit && links.$edit.$isHidden, true, "$edit link hidden in $query ok");
	var actions = body.$resources && body.$resources[0] && body.$resources[0].$actions;
	strictEqual(actions && actions.$save && actions.$save.$isHidden, true, "$save link hidden in $query ok");
	// get a group, "edit" and "save" links should be masked in $resources
	var body = get(_, cookie, "groups(description eq 'French CFO')?representation=group.$details", 200);
	var links = body.$links;
	strictEqual(links && links.$edit && links.$edit.$isHidden, true, "$edit link hidden in $details ok");
	var actions = body.$actions;
	strictEqual(actions && actions.$save && actions.$save.$isHidden, true, "$save link hidden in $details ok");
	
	start();
});

asyncTest("stop server", 0, function(_) {
	syracuse.server.close();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
