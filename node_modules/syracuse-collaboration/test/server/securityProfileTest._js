"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var testHelpers = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var tracer = console.log;
//var tracer = null;

var endPoint = testHelpers.modifyCollaborationEndpoint("mongodb_demo");
//
var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//start syracuse server
//syracuse.server.listen(null, port);

var cookie = "";
var x3sId ;
var applicationId ;
var adminEp ;

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

function get(_, cookie, url, statusCode, fullResponse) {
	return testHelpers.get(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url, statusCode, fullResponse);
}

var doStop = false;
module("securityProfilesTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});


//start syracuse server
var syracuse;
//wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});

function onlyInfo(diags) {
	return testHelpers.onlyInfo(diags);
}

asyncTest("data setup", 3, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {$diagnoses:diag, tracer:console.log});
	//console.log("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");
	// roles
	var guestRole = db.fetchInstance(_, db.getEntity(_, "role"), {
		jsonWhere: {
			description: "Guest"
		}
	});
	var superRole = db.fetchInstance(_, db.getEntity(_, "role"), {
		jsonWhere: {
			description: "Super administrator"
		}
	});
	ok(guestRole != null, "Guest role fetch ok");
	ok(superRole != null, "Super role fetch ok");
	// create some security profiles
	var p = db.getEntity(_, "securityProfile").createInstance(_, db);
	p.code(_, "full");
	p.description(_, "full");
	p.profileItems(_).toArray(_).forEach_(_, function(_, it) {
		if(it.itemType(_) === "entity") {
			it.canCreate(_, true);
			it.canRead(_, true);
			it.canWrite(_, true);
			it.canDelete(_, true);
		}
	});
	p.roles(_).set(_, superRole);
	p.save(_);
	var p = db.getEntity(_, "securityProfile").createInstance(_, db);
	p.code(_, "none");
	p.description(_, "none");
	p.roles(_).set(_, guestRole);
	p.save(_);
	
	start();
});

asyncTest("read restrictions tests", 8, function(_) {
	var cookie = testHelpers.getCookie(_, baseUrl, "admin", "admin");
	tracer && tracer("before get guest (142)");
	var body = get(_, cookie, "users(login eq \"guest\")?representation=user.$details", 200);
	tracer && tracer("after get guest (144)");
	strictEqual(body.login, "guest", "Guest user fetched for admin ok");
	
	var cookie = testHelpers.getCookie(_, baseUrl, "guest", "guest");
	var resp = get(_, cookie, "users(login eq \"admin\")?representation=user.$details", 404, true);
	strictEqual(resp.statusCode, 404, "Admin user not found for guest ok");
	var body = get(_, cookie, "users(login eq \"guest\")?representation=user.$details", 200);
	strictEqual(body.login, "guest", "Guest user found for guest ok");

	start();
});

asyncTest("stop server", 0, function(_) {
	syracuse.server.close();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
