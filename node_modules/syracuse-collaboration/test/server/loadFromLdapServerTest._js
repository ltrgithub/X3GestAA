"use strict";

var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var config = require('config'); // must be first syracuse require
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var sys = require('util');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var ldap = require("syracuse-collaboration/lib/entities/user/ldap");
var ldapjs = require("syracuse-ldap").ldapjs;
var ldapPort = 1390;
var db;
var ldapInstance;


QUnit.module(module.id, {
    setup: function () { },
    teardown: function () { }
});

//------------------------
// Init environnement test
//------------------------
asyncTest("Init environnement", 1, function (_) {
    require('syracuse-license').register(~_);
    db = adminTestFixtures.initializeTestEnvironnement(_);
    ok(db != null, "Environnement initialized");
    start();
});

//--------------------------
// Create LDAP instance test
//--------------------------
asyncTest("Create LDAP instance", 3, function (_) {
    
    var entity = db.model.getEntity(_, "ldap");
    var ldapInstances;

    ldapInstances = db.fetchInstances(_, entity, {jsonWhere: { name: "LDAPTEST" }});

    strictEqual(ldapInstances.length, 0, "No LDAP instance LDAPTEST");

    ldapInstance = entity.factory.createInstance(_, null, db);

    ldapInstance.name(_, "LDAPTEST");
    ldapInstance.url(_, "ldap://127.0.0.1:" + ldapPort);
    ldapInstance.adminDn(_, "cn=root");
    ldapInstance.adminPassword(_, "secret");
    ldapInstance.searchBase(_, "o=example");
    ldapInstance.searchFilter(_, "(cn=*)");
    ldapInstance.authenticationNameMapping(_, "uid");
    ldapInstance.firstNameMapping(_, "gn");
    ldapInstance.lastNameMapping(_, "sn");
    ldapInstance.emailMapping(_, "mail");
    ldapInstance.save(_);


    var diags = [];
    ldapInstance.getAllDiagnoses(_, diags, {
        addEntityName: true,
        addPropName: true
    });
    strictEqual(JSON.stringify(diags), "[]", "Save LDAPTEST instance");


    ldapInstances = db.fetchInstances(_, entity, {
        jsonWhere: { name: "LDAPTEST" }
    });
    strictEqual(ldapInstances.length, 1, "Instance LDAP-TEST saved");

    start();
});

//-------------------------------------
// Create minimal LDAP in-memory server
//-------------------------------------
var server = ldapjs.createServer();
var suffix = 'o=example';
var dbLdapServer = {};
dbLdapServer["o=example"] = {
    topLevel: ["top"]
};
dbLdapServer["cn=user-a, o=example"] = {
    uid: ['001'],
    cn: ['user-a'],
    gn: ['Sage'],
    sn: ['User A'],
    email: ['user-a@sage.com'],
    objectclass: ['fooPerson']
};
dbLdapServer["cn=user-b, o=example"] = {
    uid: ['002'],
    cn: ['user-b'],
    gn: ['Sage'],
    sn: ['User B'],
    email: ['user-b@sage.com'],
    objectclass: ['fooPerson']
};
asyncTest("Create LDAP in-memory server", 1, function (_) {

    server.bind('cn=root', function (req, res, next) {
        if (req.dn.toString() !== 'cn=root' || req.credentials !== 'secret')
            return next(new ldapjs.InvalidCredentialsError());
        res.end();
        return next();
    });

    function authorize(req, res, next) {
        /* Any user may search after bind, only cn=root has full power */
        var isSearch = (req instanceof ldapjs.SearchRequest);
        if (!req.connection.ldap.bindDN.equals('cn=root') && !isSearch)
            return next(new ldapjs.InsufficientAccessRightsError());
        return next();
    }

    server.bind(suffix, function (req, res, next) {
        var dn = req.dn.toString();
        if (!dbLdapServer[dn])
            return next(new ldapjs.NoSuchObjectError(dn));
        if (!dbLdapServer[dn].userpassword)
            return next(new ldapjs.NoSuchAttributeError('userPassword'));
        if (dbLdapServer[dn].userpassword.indexOf(req.credentials) === -1)
            return next(new ldapjs.InvalidCredentialsError());
        res.end();
        return next();
    });


    server.search(suffix, authorize, function (req, res, next) {
        var dn = req.dn.toString();
        if (!dbLdapServer[dn])
            return next(new ldapjs.NoSuchObjectError(dn));

        var scopeCheck;
        switch (req.scope) {
            case 'sub':
                scopeCheck = function (k) {
                    return (req.dn.equals(k) || req.dn.parentOf(k));
                };
                break;
        }

        Object.keys(dbLdapServer).forEach(function (key) {
            if (!scopeCheck(key))
                return;
            if (req.filter.matches(dbLdapServer[key])) {
                res.send({
                    dn: key,
                    attributes: dbLdapServer[key]
                });
            }
        });

        res.end();
        return next();
    });

    try {
        server.listen(ldapPort, ~_);
        ok(server.url, "LDAP server runing at " + server.url);
    } catch (error) {
        ok(false, error.message);
    }
    start();
});

//----------------
// Connection test
//----------------
asyncTest("Connection test", 1, function (_) {
    try {
        ldapInstance.connectionTest(_);
        ok(true, "Connected ");
    } catch (error) {
        ok(false, error.message);
    }

    start();
});



//----------------------------
// LDAP get all attributes test
//-----------------------------
asyncTest("LDAP get all attributes test", 2, function (_) {
    var attr = ldap.getLdapAttributes(ldapInstance, _);
    ok(attr.length != 0, "Get LDAP attributes ");
    ok(attr.indexOf("email") != -1, "Email attribute exist")
    start();
});


//----------------------------
// LDAP import users test
//-----------------------------
asyncTest("LDAP import users test", 3, function (_) {
    var diags = ldapInstance.importUsers(_);
    
    //Reload instance for populaiting users list
    ldapInstance = db.fetchInstance(_, db.model.getEntity(_, "ldap"), {
        jsonWhere: { name: "LDAPTEST" }
    });

    var users = ldapInstance.users(_).toArray(_);

    strictEqual(users.length, 2, "Import 2 users");
    strictEqual(users[0].lastName(_), "User A", "User A imported");
    strictEqual(users[1].lastName(_), "User B", "User B imported");


    start();
});