"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var endPoint = null;
config.sdata.endpoints.forEach(function(endp) {
	if ((endp.contract.application == "syracuse") && (endp.contract.contract == "collaboration")) {
		endPoint = endp;
	}
});
if (!endPoint) {
	//add model
	endPoint = {
		contract: require("syracuse-collaboration/lib/contract").contract,
	};
	config.sdata.endpoints.push(endPoint);
}
endPoint.datasets.mongodb_demo = {
	driver: "mongodb",
	port: 27017
}
//
var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//start syracuse server
//syracuse.server.listen(null, port);

var cookie = "";
var x3sId ;
var applicationId ;
var adminEp ;

//var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
//var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");


function getCookie(_) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: "guest",
		password: "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}



function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

var doStop = false;
module("syracuseDemoImportTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}


asyncTest("import demo database", 12, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {$diagnoses:diag, tracer:console.log});
	console.log("import demo db diags: "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");
	// check roles
	var role = db.fetchInstance(_, db.model.getEntity("role"), {jsonWhere:{description:"Sales manager"}});
	strictEqual(role.description(_), "Sales manager", "role fetch ok");
	var count = db.count(_, db.model.getEntity("role"), {});
	strictEqual(count, 8, "roles count ok");
	// check endpoints
	var ep = db.fetchInstance(_, db.model.getEntity("endPoint"), {jsonWhere:{description:"Global CRM"}});
	strictEqual(ep.description(_), "Global CRM", "endpoint fetch ok");
	var count = db.count(_, db.model.getEntity("endPoint"), {});
	strictEqual(count, 5, "endpoint count ok");
	// check groups
	var gp = db.fetchInstance(_, db.model.getEntity("group"), {jsonWhere:{description:"Sales managers"}});
	strictEqual(gp.description(_), "Sales managers", "group fetch ok");
	strictEqual(gp.endPoints(_).getLength(), 3, "Sales managers enpoint count ok");
	var count = db.count(_, db.model.getEntity("group"), {});
	strictEqual(count, 11, "group count ok");
	// check users
	var user = db.fetchInstance(_, db.model.getEntity("user"), {jsonWhere:{login:"hedum"}});
	strictEqual(user.login(_), "hedum", "user fetch ok");
	strictEqual(user.groups(_).getLength(), 2, "hedum group count ok");
	var count = db.count(_, db.model.getEntity("user"), {});
	strictEqual(count, 9, "user count ok");
	// check pages
	var count = db.count(_, db.model.getEntity("dashboardDef"), {});
	strictEqual(count, 1, "pages count ok");
	//

	start();
});





function post(_, cookie, url, data, statusCode, adminUrl) {
	//console.log( "begin post url "+ url);
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	//console.log("Response post: "+sys.inspect(response));
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}



function get(_, cookie, url, statusCode, facet) {
	
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_demo/" + url,
		//url: url.indexOf("http") == 0 ? url : baseUrl + "sdata/syracuse/collaboration/syracuse/" + url,
		//url: "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);

		//console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
	return JSON.parse(resp);
};







asyncTest("create administration endpoint:", 6, function(_){
	var cookie = getCookie(_) ;
	//var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	//var model= db.model ;
	//var entityApp=model.getEntity("applications") ;
	//var entityEp=model.getEntity("endPoints") ;

	var apps =get(_,cookie,"applications?where=(application like 'syracuse' and contract like 'collaboration')") ;
	var app=apps.$resources[0] ;
	console.log("ADMIN APPLICATION: "+JSON.stringify(app,null,2) );
	
	console.log("create administration endpoint") ;
	//var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
	//ok(appli != null, "Application fetch ok");
	
	var body = post(_, cookie, "x3servers", {
		description: "X3 S1",
		serverHost: "localhost",
		serverPort: 1,
		serverTimeout: 1
	});

	
	// create endpoints
	x3sId = body.$uuid;

	console.log("applicationId: " + app.$uuid) ;
	console.log("create administration endpoint before post") ;
	body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	console.log("create administration endpoint after post") ;
	var data =  {
	description: "Administration",
	dataset: "mongodb_demo",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27017
	} ;
	
	data.$key = body.$uuid;
	data.$etag = body.$etag;
	data.applicationRef = {$uuid: app.$uuid  };
	
	data.$actions = {
		$save: {
			$isRequested: true
		}
	};
	body = put(_, cookie, body.$url, data);
	
	adminEp=get(_,cookie,"endPoints('"+body.$uuid+"')") ;
	console.log("ADMIN ENDPOINT : "+ JSON.stringify(adminEp,null,2)) ;
	start() ;
} );

asyncTest("create export profile", 12, function (_) {
	cookie = getCookie(_);
    var exportItems = [{
        className: "applications",
        title: "Applications",
        entityKeyAttribute: [{
            name: "application"
        }, {
            name: "contract"
        }

        ],
        entityAttribute: [{
            name: "description"
        }, {
            name: "application"
        }, {
            name: "contract"
        }, {
            name: "protocol"
        }

        ]
    }, {
        className: "endPoints",
        title: "Endpoints",
        entityKeyAttribute: [{
            name: "description"
        }],
        entityAttribute: [{
            name: "description"
        }, {
            name: "dataset"
        }, {
            name: "databaseDriver"
        }, {
            name: "databaseHost"
        }, {
            name: "databasePort"
        }, {
            name: "applicationRef"
        }, {
            name: "x3servers"
        }, {
            name: "enableSearch"
        }

        ]
    }, {
        className: "x3servers",
        title: "x3servers",
        entityKeyAttribute: [{
            name: "description"
        }],
        entityAttribute: [{
            name: "description"
        }

        ]
    }, {
        className: "groups",
        title: "Groups",
        entityKeyAttribute: [{
            name: "description"
        }],
        entityAttribute: [{
            name: "endPoints"
        }, {
            name: "role"
        }]
    }, {
        className: "users",
        title: "Users",
        entityKeyAttribute: [{
            name: "lastName"
        }],
        entityAttribute: [{
            name: "groups"
        }, {
            name: "role"
        }]
    }];


    exportItems.forEach_(_, function (_, item) {
        console.log("ITEM CLASS NAME: " + item.className);
        var coll = get(_, cookie, item.className, 200);
        //console.log( "GET EXPORTED OBJECTS: "+ JSON.stringify(coll,null,2)) ;
        if (coll.$resources.length) item.exportedObjects = [];
        coll.$resources.forEach_(_, function (_, el) {
            console.log("EL : " + el.$uuid);
            item.exportedObjects.push({
                $uuid: el.$uuid
            });
        });
        var body = post(_, cookie, "exportProfileItems", item);
            //console.log("exportProfileItem: "+ JSON.stringify(body,null,2))  ;
         console.log("exportProfileItem: "+item.className+' JSON: ' + JSON.stringify(item, null, 2));
        }); 



        var expProfile = {
            description: "Demo Export Profile  ",
            code: "DEMO",
            applicationName: "syracuse",
            endpoint: adminEp,
            application: {
                description: "First Application",
                application: "syracuse"
            },
            exportProfileItem: exportItems,
        };
        //console.log("Export profile"+ JSON.stringify(expProfile,null,2)  ) ;

        var profile = post(_, cookie, "exportProfiles", expProfile);

        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
		var model= db.model ;

        var entity = model.getEntity("exportProfile");
        var profileInst = db.fetchInstance(_, entity, {
            jsonWhere: {
                code: "DEMO"
            }
        });

        
    strictEqual(1, 1, "exporting");
    jsonExport.jsonExport(_, profileInst, "syracuse-admin-demo-export");
     start();
});





asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});


asyncTest("import demo database", 12, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo-export.json", {$diagnoses:diag, tracer:console.log});
	strictEqual(1, 1, "check it again");

	console.log("import demo db diags: "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");
	// check roles
	var role = db.fetchInstance(_, db.model.getEntity("role"), {jsonWhere:{description:"Sales manager"}});
	strictEqual(role.description(_), "Sales manager", "role fetch ok");
	var count = db.count(_, db.model.getEntity("role"), {});
	strictEqual(count, 8, "roles count ok");
	// check endpoints
	var ep = db.fetchInstance(_, db.model.getEntity("endPoint"), {jsonWhere:{description:"Global CRM"}});
	strictEqual(ep.description(_), "Global CRM", "endpoint fetch ok");
	var count = db.count(_, db.model.getEntity("endPoint"), {});
	strictEqual(count, 5, "endpoint count ok");
	// check groups
	var gp = db.fetchInstance(_, db.model.getEntity("group"), {jsonWhere:{description:"Sales managers"}});
	strictEqual(gp.description(_), "Sales managers", "group fetch ok");
	strictEqual(gp.endPoints(_).getLength(), 3, "Sales managers enpoint count ok");
	var count = db.count(_, db.model.getEntity("group"), {});
	strictEqual(count, 11, "group count ok");
	// check users
	var user = db.fetchInstance(_, db.model.getEntity("user"), {jsonWhere:{login:"hedum"}});
	strictEqual(user.login(_), "hedum", "user fetch ok");
	strictEqual(user.groups(_).getLength(), 2, "hedum group count ok");
	var count = db.count(_, db.model.getEntity("user"), {});
	strictEqual(count, 9, "user count ok");
	// check pages
	var count = db.count(_, db.model.getEntity("dashboardDef"), {});
	strictEqual(count, 1, "pages count ok");

start();
});



asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});