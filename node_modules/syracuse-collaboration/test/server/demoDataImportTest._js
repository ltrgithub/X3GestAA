"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var testHelpers = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var tracer = console.log;
//var tracer = null;

var endPoint = testHelpers.modifyCollaborationEndpoint("mongodb_demo");
//
var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//start syracuse server
//syracuse.server.listen(null, port);

var cookie = "";
var x3sId ;
var applicationId ;
var adminEp ;

//var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
//var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");


function getCookie(_) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: "guest",
		password: "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}



function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

var doStop = false;
module("syracuseDemoImportTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_demo"].hostname, endPoint.datasets["mongodb_demo"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_demo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function onlyInfo(diags) {
	return testHelpers.onlyInfo(diags);
}


asyncTest("import demo database", 15, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {$diagnoses:diag, tracer:console.log});
	console.log("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");
	// check roles
	var role = db.fetchInstance(_, db.model.getEntity("role"), {jsonWhere:{description:"Sales manager"}});
	strictEqual(role.description(_), "Sales manager", "role fetch ok");
	var count = db.count(_, db.model.getEntity("role"), {});
	strictEqual(count, 8, "roles count ok");
	// check endpoints
	var ep = db.fetchInstance(_, db.model.getEntity("endPoint"), {jsonWhere:{description:"Global CRM"}});
	strictEqual(ep.description(_), "Global CRM", "endpoint fetch ok");
	var count = db.count(_, db.model.getEntity("endPoint"), {});
	strictEqual(count, 5, "endpoint count ok");
	// check groups
	var gp = db.fetchInstance(_, db.model.getEntity("group"), {jsonWhere:{description:"Sales managers"}});
	strictEqual(gp.description(_), "Sales managers", "group fetch ok");
	strictEqual(gp.endPoints(_).getLength(), 3, "Sales managers enpoint count ok");
	var count = db.count(_, db.model.getEntity("group"), {});
	strictEqual(count, 11, "group count ok");
	// check users
	var user = db.fetchInstance(_, db.model.getEntity("user"), {jsonWhere:{login:"hedum"}});
	strictEqual(user.login(_), "hedum", "user fetch ok");
	strictEqual(user.groups(_).getLength(), 2, "hedum group count ok");
	var count = db.count(_, db.model.getEntity("user"), {});
	strictEqual(count, 10, "user count ok");
	// check pages
	var count = db.count(_, db.model.getEntity("dashboardDef"), {});
	strictEqual(count, 1, "pages count ok");
	// fetch home dashboard
	var home = db.fetchInstance(_, db.model.getEntity("dashboardDef"), {
		jsonWhere: {
			dashboardName: "home"
		}
	});
	ok(home != null, "Found home dashboard");
	// check variants count
	strictEqual(home.variants(_).getLength(), 1, "Home has one variant ok");
	// check vignettes count
	strictEqual(home.variants(_).toArray(_)[0].vignettes(_).getLength(), 4, "Variants vignettes count ok");

	start();
});

var menuProto = {
	"menuItem": {
		"$key": "code",
		"application":{
			"$key": ["application", "contract"]
		},
		"representationRef": {
			"application":{
				"$key": ["application", "contract"]
			}
		}
	}
}

asyncTest("menu items import test", 5, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	var diag = jsonImport.jsonImportFromJson(_, null, {
		$prototypes: menuProto,
		$items: [{
			$type: "menuItem",
			code: "DEMO_UNIT_TEST_1",
			"representationRef": {
				"application": {
					"application": "syracuse",
					"contract": "collaboration"
				},
				"entity": "applications",
				"representation": "application"
			},
			"application": {
				"application": "syracuse",
				"contract": "collaboration"
			},
			"title": {
				"en-US": "Applications",
				"fr-FR": "Applications"
			},
			"description": {
				"en-US": "Applications management interface",
				"fr-FR": "Gestion des applications"
			},
			"linkType": "$representation",
			"facet": "$query"
		}]
	}, {
		tracer: tracer
	});
	tracer && tracer("import diags: (200) "+sys.inspect(diag));
	ok((diag.length == 1) && (diag[0].severity === "info"), "Menu imported ok");
	// check if saved ok
	var m = db.fetchInstance(_, db.getEntity(_, "menuItem"), {
		jsonWhere: {
			code: "DEMO_UNIT_TEST_1"
		}
	});
	strictEqual(m.code(_), "DEMO_UNIT_TEST_1", "Fetched and code ok");
	strictEqual(m.representationRef(_).representation(_), "application", "Fetched representation ok");
	strictEqual(m.representationRef(_).entity(_), "applications", "Fetched entity ok");
	strictEqual(m.representationRef(_).application(_).application(_), "syracuse", "Fetched application ok");
	
	start();
});


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});