"use strict";
var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first

var flows = require('streamline/lib/util/flows');																// syracuse
																// require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");

var fs = require('fs');
var fsp = require("path");

var forEachKey = helpers.object.forEachKey;
//
var tracer = console.log;
// var tracer = null;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

function _getModel() {
	return dataModel.make(
			registry.applications.syracuse.contracts.collaboration,
			"mongodb_admin_test");
}

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url : baseUrl + "/syracuse-main/html/main.html",
		user : login || "guest",
		password : pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}


function post(_, cookie, url, data, statusCode, adminUrl) {
	// console.log( "begin post url "+ url);
	
	var response = streams.httpRequest(
			{
				method : "post",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					"content-type" : "application/json",
					cookie : cookie
				}
			}).end(JSON.stringify(data)).response(_);
	var responsetext=response.readAll(_) ;
	strictEqual(response.statusCode, statusCode || 201, "status verified: ");
	
	return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest(
			{
				method : "put",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					"content-type" : "application/json",
					cookie : cookie
				}
			}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {

	var type = facet || "generic.$details";
	var response = streams.httpRequest(
			{
				method : "get",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				// url: url.indexOf("http") == 0 ? url : baseUrl +
				// "sdata/syracuse/collaboration/syracuse/" + url,
				// url:
				// "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
				headers : {
					cookie : cookie,
					"Accept-Language" : acceptLanguage,
					accept : "application/json;vnd.sage=syracuse"
				}
			}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified ");
	var resp = response.readAll(_);

	// console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
	return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest(
			{
				method : "delete",
				url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					cookie : cookie
				}
			}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

var doStop = false;
module("exportProfileTest", {
	setup : function() {
	},
	teardown : function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

function _findUuid(coll, searchProp, searchVal) {
	var uuid = null;
	coll.forEach(function(item) {
		if (item[searchProp] == searchVal) {
			console.log("found: " + sys.inspect(item));
			uuid = item.$uuid;
		}
	});
	return uuid;
}

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(
			endPoint.datasets["mongodb_admin_test"].hostname,
			endPoint.datasets["mongodb_admin_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

// start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 7, function(_) {

	cookie = getCookie(_);
	console.log("create administration endpoint");
	var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(appli != null, "Application fetch ok");
	applicationId = appli.$uuid;
	console.log("applicationId "+appli.$uuid) ;
	var body = post(_, cookie, "x3servers/$template/$workingCopies?trackingId="+ uuid.generate(), {});
	var data = {
		description : "X3 S1",
		serverHost : "localhost",
		serverPort : 1,
		serverTimeout : 1
	};
	//console.log("create x3server  after post "+JSON.stringify(body,null,2) );
	

	data.$key = body.$uuid;
	data.$etag = body.$etag;

	data.$actions = {
		$save : {
			$isRequested : true
		}
	};
	body = put(_, cookie, body.$url, data);
	//console.log("create x3server  after put "+JSON.stringify(body,null,2) );
	/*post(_, cookie, "x3servers", {
		description : "X3 S1",
		serverHost : "localhost",
		serverPort : 1,
		serverTimeout : 1
	});*/

	// create endpoints
	x3sId = body.$uuid;

	//console.log("create administration endpoint before post");
	var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId="
			+ uuid.generate(), {});
	//console.log("create administration endpoint after post");
	var data = {
		description : "Administration",
		dataset : "mongodb_admin_test",
		enableSearch : false,
		protocol : "syracuse",
		databaseDriver : "mongodb",
		databaseHost : "localhost",
		databasePort : 27017
	};

	data.$key = body.$uuid;
	data.$etag = body.$etag;
	data.applicationRef = {
		$uuid : applicationId
	};

	data.$actions = {
		$save : {
			$isRequested : true
		}
	};
	body = put(_, cookie, body.$url, data);


	adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
	// console.log("ADMIN ENDPOINT: "+ JSON.stringify(adminEp,null,2)) ;
	start();
});

asyncTest("very simple entity: entityAttribute", 16,	function(_) {
	try {
		cookie = getCookie(_);

		

			var data = {"description" : {"default": "toto","fr-fr":"fr toto","en-us" : "en toto"}} ;
			var body = post(_, cookie, "groups/$template/$workingCopies?trackingId="	+ uuid.generate(), {});
			
			data.$uuid = body.$uuid;
			data.$key = body.$uuid;
			data.$etag = body.$etag;
			data.$actions = {
				$save : {
					$isRequested : true
				}
			};
			body = put(_, cookie, body.$url, data);
	

		
		

		
		var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
		var model = db.model;
		var entity = model.getEntity("group");
		
		
		

		

			/*var instances = db.fetchInstances(_, entity, {
				jsonWhere : {
					"description.fr-fr" : "fr toto "
				}
			});*/

		var instances = db.fetchInstances(_, entity, {
				jsonWhere : {
					//"description" : {"fr-fr" : "fr toto "}
					"description.fr-fr" : "fr toto"
				}
			});


			console.log("****INSTances: "+sys.inspect(instances)) ;
			instances.forEach_(_,function(_,inst){
			console.log("****INST: "+sys.inspect(inst)) ;
			});
	

		
	} catch (ex) {
		console.error(ex);
	}
	start();
});





	





	

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
