"use strict";

var helpers = require('syracuse-core').helpers;
var globals = require('streamline-runtime').globals;
var config = require('config'); // must be first syracuse require
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var sys = require('util');
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var db;


QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {}
});

//------------------------
// Init environnement test
//------------------------
asyncTest("Init environnement", 1, function(_) {
	require('syracuse-license').register(_);
	db = adminTestFixtures.initializeTestEnvironnement(_);
	ok(db != null, "Environnement initialized");
	start();
});

//------------------------
// Propagate security level
//------------------------
asyncTest("Propagate security level", 15, function(_) {

	//Create user
	var user = db.model.getEntity(_, "user").factory.createInstance(_, null, db);
	user.login(_, "test-security-level");
	user.password(_, "security");
	user.firstName(_, "Security");
	user.lastName(_, "Level");
	user.save(_);
	ok(!user.hasErrors(_), "User SecurityLevel created");
	strictEqual(user.securityLevel(_), 99, "User without group - security level 99");

	//Create security profile
	var userSecProf = db.model.getEntity(_, "securityProfile").factory.createInstance(_, null, db);
	userSecProf.code(_, "SecurityLevelProfile");
	userSecProf.description(_, "SecurityLevel User Profile");
	userSecProf.save(_);
	ok(!userSecProf.hasErrors(_), "SecurityLevel User Profile created");

	//Search admin security profile
	var adminSecProf = db.fetchInstance(_, db.model.getEntity(_, "securityProfile"), {
		jsonWhere: {
			code: "ADMIN"
		}
	});
	ok(adminSecProf, "Admin security profile found");

	//Create admin role
	var roleAdmin = db.model.getEntity(_, "role").factory.createInstance(_, null, db);
	roleAdmin.code(_, "SecurityLevelAdmin");
	roleAdmin.description(_, "SecurityLevel Role Admin");
	roleAdmin.securityProfile(_, adminSecProf);
	roleAdmin.save(_);
	ok(!roleAdmin.hasErrors(_), "Role Admin SecurityLevel created");

	//Create user role
	var role = db.model.getEntity(_, "role").factory.createInstance(_, null, db);
	role.code(_, "SecurityLevel");
	role.description(_, "SecurityLevel Role");
	role.securityProfile(_, userSecProf);
	role.save(_);
	ok(!role.hasErrors(_), "Role SecurityLevel created");

	//Create group
	var group = db.model.getEntity(_, "group").factory.createInstance(_, null, db);
	group.description(_, "SecurityLevel Group");
	group.role(_, role);
	group.save(_);
	ok(!group.hasErrors(_), "User SecurityLevel created");

	// Add user to group
	user.groups(_).set(_, group);
	user.save(_);
	strictEqual(user.securityLevel(_), 1, "User set group - security level 1");

	// Change security level on profile
	userSecProf = db.fetchInstance(_, db.model.getEntity(_, "securityProfile"), {
		jsonWhere: {
			code: "SecurityLevelProfile"
		}
	});
	userSecProf.securityLevel(_, 50);
	userSecProf.save(_);
	ok(!userSecProf.hasErrors(_), "Security level set to 50");
	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: "test-security-level"
		}
	});
	strictEqual(user.securityLevel(_), 50, "Change security level on profile  - security level 50");

	//Change role on group
	var roleAdmin = db.fetchInstance(_, db.model.getEntity(_, "role"), {
		jsonWhere: {
			code: "SecurityLevelAdmin"
		}
	});
	var group = db.fetchInstance(_, db.model.getEntity(_, "group"), {
		jsonWhere: {
			description: "SecurityLevel Group"
		}
	});
	group.role(_, roleAdmin);
	ok(group.isDirty("role"), "Role is dirty");
	group.save(_);
	ok(!group.hasErrors(_), "Change role on group");
	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: "test-security-level"
		}
	});
	strictEqual(user.securityLevel(_), 0, "Change role on group  - security level 0");

	//Delete user from group
	user.groups(_).deleteInstance(_, group.$uuid);
	user.save(_);
	ok(!user.hasErrors(_), "Delete user from group");
	user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: "test-security-level"
		}
	});
	strictEqual(user.securityLevel(_), 99, "Delete user from group  - security level 99");

	start();
});