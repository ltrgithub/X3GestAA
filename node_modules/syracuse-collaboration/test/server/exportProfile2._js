var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
																// syracuse
																// require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");

var fs = require('fs');
var fsp = require("path");

var forEachKey = helpers.object.forEachKey;
//
var tracer = console.log;
// var tracer = null;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures
		.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

function _getModel() {
	return dataModel.make(
			registry.applications.syracuse.contracts.collaboration,
			"mongodb_admin_test");
}

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url : baseUrl + "/syracuse-main/html/main.html",
		user : login || "guest",
		password : pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, adminUrl) {
	// console.log( "begin post url "+ url);
	var response = streams.httpRequest(
			{
				method : "post",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					"content-type" : "application/json",
					cookie : cookie
				}
			}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified: ");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest(
			{
				method : "put",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					"content-type" : "application/json",
					cookie : cookie
				}
			}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {

	var type = facet || "generic.$details";
	var response = streams.httpRequest(
			{
				method : "get",
				url : url.indexOf("http") == 0 ? url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				// url: url.indexOf("http") == 0 ? url : baseUrl +
				// "sdata/syracuse/collaboration/syracuse/" + url,
				// url:
				// "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
				headers : {
					cookie : cookie,
					"Accept-Language" : acceptLanguage,
					accept : "application/json;vnd.sage=syracuse"
				}
			}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);

	// console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
	return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest(
			{
				method : "delete",
				url : baseUrl
						+ "/sdata/syracuse/collaboration/mongodb_admin_test/"
						+ url,
				headers : {
					cookie : cookie
				}
			}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

var doStop = false;
module("syracuseAdministrationTest", {
	setup : function() {
	},
	teardown : function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

function _findUuid(coll, searchProp, searchVal) {
	var uuid = null;
	coll.forEach(function(item) {
		if (item[searchProp] == searchVal) {
			console.log("found: " + sys.inspect(item));
			uuid = item.$uuid;
		}
	});
	return uuid;
}

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(
			endPoint.datasets["mongodb_admin_test"].hostname,
			endPoint.datasets["mongodb_admin_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

// start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 6, function(_) {

	cookie = getCookie(_);
	console.log("create administration endpoint");
	var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(appli != null, "Application fetch ok");
	applicationId = appli.$uuid;
	var body = post(_, cookie, "x3servers", {
		description : "X3 S1",
		serverHost : "localhost",
		serverPort : 1,
		serverTimeout : 1
	});

	// create endpoints
	x3sId = body.$uuid;

	console.log("create administration endpoint before post");
	var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId="
			+ uuid.generate(), {});
	console.log("create administration endpoint after post");
	var data = {
		description : "Administration",
		dataset : "mongodb_admin_test",
		enableSearch : false,
		protocol : "syracuse",
		databaseDriver : "mongodb",
		databaseHost : "localhost",
		databasePort : 27017
	};

	data.$key = body.$uuid;
	data.$etag = body.$etag;
	data.applicationRef = {
		$uuid : applicationId
	};

	data.$actions = {
		$save : {
			$isRequested : true
		}
	};
	body = put(_, cookie, body.$url, data);


	adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
	// console.log("ADMIN ENDPOINT: "+ JSON.stringify(adminEp,null,2)) ;
	start();
});

asyncTest("very simple entity: entityAttribute", 16,	function(_) {
	try {
		cookie = getCookie(_);

		var testAttributes = [ {
			name : "test1"
		}, {
			name : "test2"
		}, {
			name : "test3"
		} ];

		var exportItems = [ {
			className : "entityAttributes",
			title : "entityAttributes",
			entityKeyAttribute : [ {
				name : "name"
			} ],
			entityAttribute : [ {
				name : "name"
			}

			]
		} ];

		testAttributes.forEach_(_, function(_, prop) {
			var body = post(_, cookie, "entityAttributes/$template/$workingCopies?trackingId="	+ uuid.generate(), {});
			var data = helpers.object.clone(prop);
			prop.$uuid = body.$uuid;
			data.$key = prop.$uuid;
			data.$etag = body.$etag;
			data.$actions = {
				$save : {
					$isRequested : true
				}
			};
			body = put(_, cookie, body.$url, data);
		});

		var item = exportItems[0];
		console.log("ITEM CLASS NAME: " + item.className);
		var coll = get(_, cookie, item.className, 200);
		// console.log( "GET EXPORTED OBJECTS: "+
		// JSON.stringify(coll,null,2)) ;
		if (coll.$resources.length)
			item.exportedObjects = [];
		coll.$resources.forEach_(_, function(_, el) {
			console.log("EL : " + el.$uuid);
			item.exportedObjects.push({
				$uuid : el.$uuid
			});
		});

		var body = post(_, cookie, "exportProfileItems", item);
		// console.log("exportProfileItem: "+
		// JSON.stringify(item,null,2)) ;

		var expProfile = {
			description : "Very Simple Export Profile",
			code : "VSEP",
			applicationName : "syracuse",
			endpoint : adminEp,
			application : {
				description : "Syracuse Application",
				application : "syracuse"
			},
			exportProfileItem : exportItems,
		};

		var profile = post(_, cookie, "exportProfiles", expProfile);
		// console.log("EXPORT PROFILE : "+
		// JSON.stringify(expProfile,null,2)) ;
		profileId = profile.$uuid;

		var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
		var model = db.model;
		var entity = model.getEntity("exportProfile");
		var profileInst = db.fetchInstance(_, entity, {
			jsonWhere : {
				code : "VSEP"
			}
		});
		var entityAttr = model.getEntity("entityAttribute");
		jsonExport.jsonExport(_, profileInst, {
				targetType : file,
				path : "../node_modules/syracuse-collaboration/test/fixtures/very-simple-export-profile.json"
			});

		testAttributes.forEach_(_, function(_, prop) {
			// console.log("deleting " + prop.name + prop.$uuid) ;
			var body = del(_, cookie, "entityAttributes('" + prop.$uuid	+ "')", 200);
			// console.log("entity attribute: "+
			// JSON.stringify(body,null,2)) ;
			// var body = get(_, cookie, "entityAttributes('"+prop.$uuid
			// +"')", 200);

			var obj = db.fetchInstance(_, entityAttr, {
				jsonWhere : {
					name : prop.name
				}
			});
			strictEqual(obj, null, "record destroyed");

		});

		var diag = [];
		jsonImport.jsonImport(_, db, "../node_modules/syracuse-collaboration/test/fixtures/very-simple-export-profile.json", {});

		testAttributes.forEach_(_, function(_, prop) {
			console.log("prop:" + prop.name);
			var obj = db.fetchInstance(_, entityAttr, {
				jsonWhere : {
					name : prop.name
				}
			});
			// notEqual(null, obj);
			// console.log("after fetch:" +obj.$uuid) ;
			// var body = get(_, cookie, "entityAttributes('"+prop.$uuid
			// +"')", 200);
			// console.log("After import: get entity attribute: "+
			// sys.inspect(obj)) ;
		});

	} catch (ex) {
		console.error(ex);
	}
	start();
});

<<<<<<< HEAD


/*
=======
>>>>>>> 6a121551c3c359149da38c4fc8d5f2661336abec
asyncTest("combined key export profile, key properties not included in property selection ", 16, function(_) {
	cookie = getCookie(_);
	var diag = [];
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var model = db.model;
	var importFile = "../node_modules/syracuse-collaboration/test/fixtures/combined-key-import.json";
	var exportFile = "../node_modules/syracuse-collaboration/test/fixtures/combined-key-export.json";
	jsonImport.jsonImport(_, db, importFile, {});// {$diagnoses:diag,
													// tracer:console.log}

	var exportItems = [ {
		className : "applications",
		title : "Applications",
		entityKeyAttribute : [ {
			name : "application"
		}, {
			name : "contract"
		}

		],
		entityAttribute : [ {
			name : "protocol"
		}, {
			name : "description"
		} ]
	} ];
	var originals = [];
	var item = exportItems[0];
	// console.log("ITEM CLASS NAME: "+item.className) ;
	var coll = get(_, cookie, item.className, 200);
	if (coll.$resources.length)
		item.exportedObjects = [];
	coll.$resources.forEach_(_, function(_, el) {
		// console.log("EL : "+ el.$uuid ) ;
		item.exportedObjects.push({
			$uuid : el.$uuid
		});
		originals.push({
			$uuid : el.$uuid,
			application : el.application,
			contract : el.contract,
			protocol : el.protocol
		});
	});

	var body = post(_, cookie, "exportProfileItems", item);

	// console.log("exportProfileItem: "+ JSON.stringify(item,null,2)) ;

	var expProfile = {
		description : "Combined Key Export Profile  ",
		code : "CKEP",
		applicationName : "syracuse",
		endpoint : adminEp,
		application : {
			description : "First Application",
			application : "syracuse"
		},
		exportProfileItem : exportItems,
	};
	// console.log("Export profile"+ JSON.stringify(expProfile,null,2) )
	// ;

	var profile = post(_, cookie, "exportProfiles", expProfile);

	var entity = model.getEntity("exportProfile");
	var profileInst = db.fetchInstance(_, entity, {
		jsonWhere : {
			code : "CKEP"
		}
	});
	var entityApp = model.getEntity("application");
	jsonExport.jsonExport(_, profileInst, {
		targetType : file,
		path : "combined-key-export-profile"
	});

	originals.forEach_(_, function(_, app) {
		if (app.application == "syracuse"
				&& app.contract == "collaboration")
			return;
		// console.log("deleting " + prop.name + prop.$uuid) ;
		var body = del(_, cookie, "applications('" + app.$uuid + "')",
				200);

		var obj = db.fetchInstance(_, entityApp, {
			jsonWhere : {
				application : app.application,
				contract : app.contract
			}
		});

		strictEqual(obj, null, "record destroyed " + app.application + ', ' + app.contract);
	});

	var diag = [];
	jsonImport.jsonImport(_, db, exportFile, {});

	originals.forEach_(_, function(_, app) {

		if (app.application == "syracuse"
				&& app.contract == "collaboration")
			return;
		console.log("app:" + app.application + ' , ' + app.contract);
		var obj = db.fetchInstance(_, entityApp, {
			jsonWhere : {
				application : app.application,
				contract : app.contract
			}
		});
		// console.log("obj->application"+obj.application(_) + "
		// protocol: "+obj.protocol(_)) ;

<<<<<<< HEAD
	});
*/
=======
		// var apps =get(_,cookie,"applications?where=(application like
		// '"+app.application+ "' and contract like
		// '"+app.contract+"')") ;
		// var appli=apps.$resources[0] ;
		// console.log("APPLICATION: "+JSON.stringify(appli,null,2) );

		// notEqual(null, obj);
		if (obj);
		strictEqual(obj.protocol(_), app.protocol, "record restaured: " + app.application + ' , ' + app.contract);
>>>>>>> 6a121551c3c359149da38c4fc8d5f2661336abec

	});

	start();

});

var testSettings = [ {
	nbr : 8,
	profileDescr : "localized-property",
	profileCode : "LPEP",
	exportItems : [ {
		className : "portlets",
		title : "Portlets",
		entityKeyAttribute : [ {
			name : "title"
		} ],
		entityAttribute : [ {
			name : "type"
		} ]
	} ]
}, {
	nbr : 8,
	profileDescr : "single-ref-relation",
	profileCode : "SRREP",
	exportItems : [ {
		className : "roles",
		title : "Roles",
		entityKeyAttribute : [ {
			name : "description"
		} ]
	}, {
		className : "groups",
		title : "Groups",
		entityKeyAttribute : [ {
			name : "description"
		} ],
		entityAttribute : [ {
			name : "role"
		} ]
	} ]
}, {
	nbr : 6,
	profileDescr : "plural-ref-relation",
	profileCode : "PRREP",
	exportItems : [ {
		className : "groups",
		title : "Groups",
		entityKeyAttribute : [ {
			name : "description"
		} ],
		entityAttribute : [ {
			name : "description"
		} ]
	}, {
		className : "users",
		title : "Users",
		entityAttribute : [ {
			name : "login"
		}, {
			name : "password"
		}, {
			name : "title"
		}, {
			name : "firstName"
		}, {
			name : "lastName"
		}, {
			name : "groups"
		} ],
		entityKeyAttribute : [ {
			name : "lastName"
		} ]
	} ]
}, {
	nbr : 8,
	profileDescr : "single-child-relation",
	profileCode : "SCREP",
	exportItems : [ {
		className : "automateTasks",
		title : "automateTasks",
		entityKeyAttribute : [ {
			name : "description"
		} ],
		entityAttribute : [ {
			name : "logLevel"
		}, {
			name : "process"
		} ]
	}, {
		className : "searchAdmins",
		title : "searchAdmins",
		entityKeyAttribute : [ {
			name : "differentialUpdate"
		} ],
		entityAttribute : [ {
			name : "debugMode"
		} ]
	} ]
}, {
	nbr : 8,
	profileDescr : "plural-child-relation",
	profileCode : "PCREP",
	exportItems : [ {
		className : "users",
		title : "Users",
		entityAttribute : [ {
			name : "login"
		}, {
			name : "password"
		}, {
			name : "title"
		}, {
			name : "firstName"
		}, {
			name : "lastName"
		}, {
			name : "locales"
		} ],
		entityKeyAttribute : [ {
			name : "lastName"
		} ]
	}, {
		className : "localePreferences",
		title : "Locale Preferences",
		entityKeyAttribute : [ {
			name : "code"
		} ],
		entityAttribute : [ {
			name : "description"
		}, {
			name : "shortDate"
		}, {
			name : "shortTime"
		}, {
			name : "longTime"
		}, {
			name : "shortDatetime"
		}, {
			name : "longDatetime"
		}, {
			name : "longDate"
		}, {
			name : "firstDayOfWeek"
		}, {
			name : "numberDecimalSeparator"
		}, {
			name : "numberGroupSize"
		}, {
			name : "enabled"
		} ]
	} ]
}, {
	nbr : 8,
	profileDescr : "nested-child-relation",
	profileCode : "NCREP",
	exportItems : [ {
		className : "applications",
		title : "Applications",
		entityKeyAttribute : [ {
			name : "application"
		}, {
			name : "contract"
		} ]
	}, {
		className : "portlets",
		title : "Portlets",
		entityKeyAttribute : [ {
			name : "title"
		} ],
		entityAttribute : [ {
			name : "type"
		} ]
	}, {
		className : "dashboardVariants",
		title : "DashboardVariants",
		entityKeyAttribute : [ {
			name : "title"
		} ],
		entityAttribute : [ {
			name : "allApplications"
		}, {
			name : "vignettes"
		}, {
			name : "application"
		}

		]
	}, {
		className : "dashboardVignettes",
		title : "DashboardVignettes",
		entityKeyAttribute : [ {
			name : "portlet"
		} ],
		entityAttribute : [ {
			name : "portlet"
		}

		]
	}, {
		className : "dashboardDefs",
		title : "DashboardDefs",
		entityKeyAttribute : [ {
			name : "dashboardName"
		} ],
		entityAttribute : [ {
			name : "variants"
		}

		]
	}

	]
}

];

testSettings.forEach_(_, function(_, test) {
	console.log("TEST: " + JSON.stringify(test));
	var profileDescr = test.profileDescr;
	var importFile = "../node_modules/syracuse-collaboration/test/fixtures/" + test.profileDescr + "-import.json";
	var exportFile = "../node_modules/syracuse-collaboration/test/fixtures/" + test.profileDescr + "-export";
	var profileCode = test.profileCode;
	var exportItems = test.exportItems;
	function testFunc(_) {
		function sortfunction(a, b) {
			if (a.$type < b.$type)
				return -1;
			else if (a.$type > b.$type)
				return 1;
			else {// (a.$type==b.$type)

				var key = inproto[a.$type].$key;
				// console.log("****TYPE: "+a.$type+ "KEY:"+ key ) ;
				var keys = (typeof (key) === "object") ? key : [ key ];
				var i;
				for (i = 0; i < keys.length; i++)
					if (a[keys[i]] < b[keys[i]])
						return -1;
					else if (a[keys[i]] > b[keys[i]])
						return 1;
				// else continue ;
			}
			// return a.$type-b.$type ;
		}
		;
		console.log("test func");
		cookie = getCookie(_);
		var diag = [];
		var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
<<<<<<< HEAD
		var model=db.model ;
		console.log("importFile: "+importFile) ;
		
		jsonImport.jsonImport(_, db, importFile, {importMode : "modify"});//{$diagnoses:diag, tracer:console.log}
		

		var body = get(_, cookie, "users",200);
	            //console.log("exportProfileItem: "+ JSON.stringify(body,null,2))  ;
	         console.log("*********USERS: " + JSON.stringify(body, null, 2));
		

		exportItems.forEach_(_, function (_, item) {
	        console.log("ITEM CLASS NAME: " + item.className);
	        var coll = get(_, cookie, item.className, 200);
	        //console.log( "GET EXPORTED OBJECTS: "+ JSON.stringify(coll,null,2)) ;
	        tracer && tracer("JsonExport: nb. objects to export" +coll.$resources.length) ;
	        if (coll.$resources.length) item.exportedObjects = [];
	        coll.$resources.forEach_(_, function (_, el) {
	            console.log("EL : " + el.$uuid);
	            item.exportedObjects.push({
	                $uuid: el.$uuid
	            });
	        });

var body = post(_, cookie, "exportProfileItems/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	console.log("exportProfileItem: "+item.className);
	var data =  {
	} ;
	
	data.$key = body.$uuid;
	data.$etag = body.$etag;
	
	data.$actions = {
		$save: {
			$isRequested: true
		}
	};
	body = put(_, cookie, body.$url, data);




	       // var body = post(_, cookie, "exportProfileItems", item);
	            //console.log("exportProfileItem: "+ JSON.stringify(body,null,2))  ;
	         
	        }); 
		
		
			
		//console.log("exportProfileItem: "+ JSON.stringify(item,null,2))  ;
			
		var expProfile ={
			description: profileDescr,
=======
		var model = db.model;
		console.log("importFile: " + importFile);

		jsonImport.jsonImport(_, db, importFile, {
			importMode : "modify"
		});// {$diagnoses:diag, tracer:console.log}

		var body = get(_, cookie, "dashboardDefs", 200);
		// console.log("exportProfileItem: "+ JSON.stringify(body,null,2)) ;
		console.log("*********DASHBOARD DEFINITIONS: "	+ JSON.stringify(body, null, 2));

		exportItems.forEach_(_, function(_, item) {
			console.log("ITEM CLASS NAME: " + item.className);
			var coll = get(_, cookie, item.className, 200);
			// console.log( "GET EXPORTED OBJECTS: "+
			// JSON.stringify(coll,null,2)) ;
			tracer && tracer("JsonExport: nb. objects to export" + coll.$resources.length);
			if (coll.$resources.length)
				item.exportedObjects = [];
			coll.$resources.forEach_(_, function(_, el) {
				console.log("EL : " + el.$uuid);
				item.exportedObjects.push({
					$uuid : el.$uuid
				});
			});

			var body = post(_, cookie, "exportProfileItems/$template/$workingCopies?trackingId=" + uuid.generate(), {});
			console.log("exportProfileItem: " + item.className);
			var data = {};

			data.$key = body.$uuid;
			data.$etag = body.$etag;

			data.$actions = {
				$save : {
					$isRequested : true
				}
			};
			body = put(_, cookie, body.$url, data);

			// var body = post(_, cookie, "exportProfileItems", item);
			// console.log("exportProfileItem: "+ JSON.stringify(body,null,2)) ;

		});

		// console.log("exportProfileItem: "+ JSON.stringify(item,null,2)) ;

		var expProfile = {
			description : profileDescr,
>>>>>>> 6a121551c3c359149da38c4fc8d5f2661336abec
			code : profileCode,
			applicationName : "syracuse",
			endpoint : adminEp,
			application : {
				description : "First Application",
				application : "syracuse"
			},
			exportProfileItem : exportItems,
		};

		var profile = post(_, cookie, "exportProfiles", expProfile);
		// console.log("Export profile"+ JSON.stringify(profile,null,2) ) ;

		var entity = model.getEntity("exportProfile");
		var profileInst = db.fetchInstance(_, entity, {
			jsonWhere : {
				code : profileCode
			}
		});
		console.log("EXPORT NOW");
		jsonExport.jsonExport(_, profileInst, {
			targetType : "file",
			path : exportFile,
			$diagnoses : diag,
			tracer : console.log
		});

		var input = JSON.parse(fs.readFile(fsp.join(__dirname, //
		"../../../../import", importFile), //
		"utf8", _));
		var inproto = input.$prototypes || {};
		var indata = input.$items || [];

		var output = JSON.parse(fs.readFile(fsp.join(__dirname, //
		"../../../../import", exportFile + ".json"), //
		"utf8", _));
		var outproto = output.$prototypes || {};
		var outdata = output.$items || [];

		same(inproto, outproto, "proto");
		indata.sort(sortfunction);
		outdata.sort(sortfunction);
		console.log("SORTED INDATA: " + JSON.stringify(indata, null, 2));
		console.log("SORTED OUTDATA: " + JSON.stringify(outdata, null, 2));
		/*
		 * indata.forEach(function(it){ var type= it.$type ; }) ; forEachKey(,
		 * function(key, action) { });
		 */
		same(indata, outdata, "data");
		// console.log ("PROTO: "+ JSON.stringify(proto,null,2) ) ;
		// console.log ("DATA: "+ JSON.stringify(data,null,2) ) ;

		// fs.unlinkSync(exportFile+".json");
		// tracer && tracer('successfully deleted '+ exportFile+".json");
		start();
	}

	// console.log ("zzz") ;
	asyncTest("test " + profileDescr, test.nbr, testFunc);
	// start() ;
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
