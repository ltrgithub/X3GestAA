var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport") ;
var jsonImport = require("syracuse-import/lib/jsonImport") ;
//
var tracer = console.log;
//var tracer = null;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var testData = require('syracuse-sdata/test/fixtures/testDB');
var testEndPoint = testData.endpoint;


testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: 27017
	}
};

config.sdata.endpoints.push(testEndPoint);

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";



var profileId ;

var cookie = "";

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_admin_test");
}

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, adminUrl) {
	//console.log( "begin post url "+ url);
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	//console.log("Response post: "+sys.inspect(response));
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}



function get(_, cookie, url, statusCode, facet) {
	
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		//url: url.indexOf("http") == 0 ? url : baseUrl + "sdata/syracuse/collaboration/syracuse/" + url,
		//url: "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);

		//console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
	return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

var doStop = false;
module("syracuseAdministrationTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});


/*asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db(testEndPoint.datasets.test.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	console.log("dropping admin db");
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = new mongodb.Db("mongodb_admin_test", server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	
	start();
});*/
asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_admin_test"].hostname, endPoint.datasets["mongodb_admin_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
var syracuse;
//wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});



var props=[
		{
			name: "description"
		},
		{
			name: "application"
		},
		{
			name: "endpoints"
		},
		{
			name: "dataset"
		},
		{
			name: "databaseDriver"
		},
	 ] ;
	 
var endPoints = [{
	description: "Coruscant",
	/*dataset: "Coruscant",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27017*/
}, {
	description: "Endor",
	/*dataset: "Endor",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27017*/
},  {
	description: "Administration",
	/*dataset: "mongodb_admin_test",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27017*/
}];


var apps = [
	{
		description: "First Application",
		/*application: "syracuse",
		contract : "contract1"*/
		
	}, {
		description: "Second Application",
		/*application: "syracuse",
		contract : "contract2"*/
	}
] ;

//var groups=[] ;
//var roles=[] ;


/*var entities ={
	"applications" : apps,
	"endPoints": endPoints,
	"groups" : groups,
	"roles" : roles
} ;*/


var exportItems =[
{ 
	className: "applications",
	title: "Applications",
	entityKeyAttribute: [
	{
		name: "application"
	},
	{
		name: "contract"
	}

	] ,
	entityAttribute: [
	{
		name: "description"
	},
	{
		name: "application"
	},
	{
		name: "endPoints"
	},
	{
		name: "application"
	},
	{
		name: "contract"
	}

	]
},
{ 
	className: "endPoints",
	title: "Endpoints",
	entityKeyAttribute: [
	{
		name: "description"
	}
	] ,
	entityAttribute: [
	{
		name: "description"
	},
	{
		name: "dataset"
	},
	{
		name: "databaseDriver"
	},
	{
		name: "applicationRef"
	},
	{
		name: "x3servers"
	}
	
	]
},
{ 
	className: "roles",
	title: "Roles",
	
	entityKeyAttribute: [
	{
		name: "description"
	},
	] ,
	entityAttribute: [
	{
		name: "description"
	}
	]
},
{ 
	className: "groups",
	title: "Groups",
	
	entityKeyAttribute: [
	{
		name: "description"
	},
	] ,
	entityAttribute: [
	{
		name: "description"
	},
	{
		name: "endpoints"
	},
	{
		name: "role"
	}
	]
}

] ;



function _findUuid(coll, searchProp, searchVal) {
	var uuid = null;
	coll.forEach(function(item) {
		if (item[searchProp] == searchVal) {
			console.log("found: " + sys.inspect(item));
			uuid = item.$uuid;
		}
	});
	return uuid;
}

var x3sId ;
var applicationId ;
var adminEp ;

asyncTest("create administration endpoint: ", 27, function(_) {
	cookie = getCookie(_);
	console.log("create administration endpoint") ;
var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(appli != null, "Application fetch ok");
	applicationId = appli.$uuid;
	var body = post(_, cookie, "x3servers", {
		description: "X3 S1",
		serverHost: "localhost",
		serverPort: 1,
		serverTimeout: 1
	});

	
	// create endpoints
	x3sId = body.$uuid;

	console.log("create administration endpoint before post") ;
	var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	console.log("create administration endpoint after post") ;
	var data =  {
	description: "Administration",
	dataset: "mongodb_admin_test",
	enableSearch: false,
	protocol: "syracuse",
	databaseDriver: "mongodb",
	databaseHost: "localhost",
	databasePort: 27017
	} ;
	//var data = helpers.object.clone(admEp);
	//admEp.$uuid = body.$uuid;
	data.$key = body.$uuid;
	data.$etag = body.$etag;
	data.applicationRef = {$uuid: applicationId  };
	
	data.$actions = {
		$save: {
			$isRequested: true
		}
	};
	body = put(_, cookie, body.$url, data);
	
	adminEp=get(_,cookie,"endPoints('"+body.$uuid+"')") ;
	//console.log("ADMIN ENDPOINT: "+ JSON.stringify(adminEp,null,2)) ;
	start() ;
} );






asyncTest("create export profile: endpoints + applications", 27, function(_) {
	cookie = getCookie(_);
	var diag = [];
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var model=db.model ;
	jsonImport.jsonImport(_, db, "importProfileTC1.json", {$diagnoses:diag, tracer:console.log});


	console.log("syracuse-admin-demo Imported") ;
	props.forEach_(_,function(_,prop){
		var body = post(_, cookie, "entityAttributes", prop);
			//console.log("entity attribute: "+ JSON.stringify(body,null,2))  ;
	});
	

	/*endPoints.forEach_(_, function(_, item) {
		var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(item);
		item.$uuid = body.$uuid;
		data.$key = item.$uuid;
		data.$etag = body.$etag;
		data.applicationRef = {$uuid: applicationId  };
		if(item.protocol === "x3") {
			data.serverFolder = item.name,
			data.x3server = { $uuid: x3sId }
		}
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		body = put(_, cookie, body.$url, data);
	}); 



	apps.forEach_(_,function(_,app){
		app.endpoints=[] ;
		endPoints.forEach_(_, function(_, ep) {
			var epobj=get(_,cookie,"endPoints('"+_findUuid(endPoints, 'description', ep.description)+"')") ;
		app.endpoints.push(epobj) ;
		console.log("ENDPOINT PUSHED : "+ epobj.$uuid) ;
		}) ;
		console.log("APP.ENDPOINTS.LENGTH="+app.endpoints.length) ;

		var body = post(_, cookie, "applications/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(app);
		console.log("DATA.LENGTH="+data.endpoints.length) ;

		app.$uuid = body.$uuid;
		data.$key = app.$uuid;
		data.$etag = body.$etag;
		
		
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};

		var bodypost = post(_, cookie, "applications" , app);
		console.log( "APPLICATION POST: "+ JSON.stringify(bodypost,null,2) ) ;

		console.log("AVANT PUT DATA: "+ sys.inspect(data)) ;
		body = put(_, cookie, body.$url, data);
		console.log( "APPLICATION PUT: "+ JSON.stringify(body,null,2) ) ;
		var appbody=get(_, cookie, "applications('"+app.$uuid +"')",200);
		console.log( "APPLICATION GET: "+ JSON.stringify(appbody,null,2) ) ;
	});*/
	 

	//var adminEp=get(_,cookie,"endPoints('"+_findUuid(endPoints, 'description', 'Administration')+"')") ;
	
	//var admEp = db.fetchInstance(_,"endPoints" , {jsonWhere:{description: 'Administration'}});


	

	exportItems.forEach_(_,function(_,item){
		console.log("ITEM CLASS NAME: "+item.className) ;
		//var collection=entities[item.className] ;
		//if (collection.length){

		//var currentEntity=db.model.getEntity(item.className)
		
			var coll=get(_,cookie,item.className, 200) ;
			if (coll.$resources.length)
				item.exportedObjects=[] ;
			//console.log("COLLECTION "+ item.className + ": "+ JSON.stringify(coll,null,2) ) ;
			coll.$resources.forEach_(_,function(_,el){
				console.log("EL : "+ el.$uuid ) ;
			//var obj = db.fetchInstance(_,currentEntity , {jsonWhere:{description: el.description}});

				item.exportedObjects.push({$uuid : el.$uuid /*_findUuid(collection,"description",el.description)*/}) ;
			});
		
		
		var body = post(_, cookie, "exportProfileItems", item);
			//console.log("exportProfileItem: "+ JSON.stringify(body,null,2))  ;
			console.log("********exportProfileItem******: "+ JSON.stringify(item,null,2))  ;
			
	});
	
	
	

	
	var expProfile ={
	description: "Test Export Profile",
	code : "TEP",
	applicationName: "syracuse",
	endpoint: adminEp,
	application : {
		description: "First Application",
		application: "syracuse"
	},
	exportProfileItem: exportItems,
	/*$actions: {
		$save: {
			$isRequested: true
		}
	}*/
} ;
//console.log("Export profile"+ JSON.stringify(expProfile,null,2)  ) ;

	var profile = post(_, cookie, "exportProfiles", expProfile);
	console.log("EXPORT PROFILE : "+ JSON.stringify(expProfile,null,2)) ;
	profileId=profile.$uuid ;
	start();
});

asyncTest("export test 1 ", 12, function(_) {
	//var profile= get(_, cookie, "exportProfiles('"+profileId +"')",200);
	//console.log(" result exportProfile: "+ JSON.stringify(profile,null,2))  ;

	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var model=db.model ;
	var entity=model.getEntity("exportProfile") ;
	var profileInst = db.fetchInstance(_, entity, {jsonWhere:{code:"TEP"}});
	//console.log("profileInst: "+sys.inspect(profileInst));
	jsonExport.jsonExport(_,profileInst,"exportProfileTC1" );
	
	//ok(onlyInfo(diag), "Demo database import ok");

	
	
	

	start();
});

















	


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});


