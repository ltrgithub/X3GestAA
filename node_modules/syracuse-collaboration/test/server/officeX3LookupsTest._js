"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");

var lookupEnts = ["lookupX3Legislation", "lookupX3Company", "lookupX3ActivityCode"];
var templatePurposes = ["Quote", "Foreign Quote", "Draft", "Copy"];

var dataset = "SUPERV";
var user = "admin";
var tracer; // = console.log;

globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return user;
	},
	getUserProfile: function(_) {
		return {
			user: function(_) {
				var db = adminHelper.getCollaborationOrm(_);
				return db.fetchInstance(_, db.model.getEntity(_, "user"), {
					jsonWhere: {
						login: user
					}
				});
			},
			selectedLocale: function(_) {
				var db = adminHelper.getCollaborationOrm(_);
				var locale = db.fetchInstance(_, db.model.getEntity(_, "localePreference"), {});
				return locale;
			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	},
	getData: function(code) {
		return null;
	}
};

var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

function _findX3Enpoint(_) {
	var eps = adminHelper.getEndpoints(_, {});
	var epMatch;
	flows.each(_, eps, function(_, ep) {
		if ("x3" === ep.protocol(_) && dataset === ep.dataset(_)) {
			epMatch = ep;
		}
	});
	return epMatch;
}

asyncTest("Test lookups X3", 1 + lookupEnts.length * 2, function(_) {
	var epData = _findX3Enpoint(_);
	strictEqual(epData != null, true, "X3 endpoint w. dataset " + dataset + " defined");

	var db = adminHelper.getCollaborationOrm(_);
	flows.each(_, lookupEnts, function(_, entName) {
		var entity = db.model.getEntity(_, entName);
		strictEqual(true, entity != null, "Entity " + entName + " known");

		var instances = [];
		if (entity) {
			instances = entity.$fetchInstances(_, {}, {
				"application": epData.application(_),
				"contract": epData.contract(_),
				"dataset": epData.dataset(_)
			});
		}
		strictEqual(instances.length > 0, true, "Fetching data with " + entName + " worked, count: " + instances.length);
	});

	start();
});

asyncTest("Test lookup templatePurpose", 3 + templatePurposes.length * 4, function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "msoWordTemplateDocument");
	var instances = [];
	var purposeUuid = helpers.uuid.generate();
	var tplClass = "testcasetemplate.$query_" + purposeUuid;

	strictEqual(true, entity != null, "Entity msoWordTemplateDocument known");
	flows.each(_, templatePurposes, function(_, purpose) {
		// insert twice to test "distinct selection"
		flows.each(_, [0, 1], function(_, dummy) {
			var instance = entity.factory.createInstance(_, null, db);
			var descr = "TESTCASE: " + helpers.uuid.generate();
			instance.description(_, descr);
			instance.templateClass(_, tplClass);
			instance.templateType(_, "report");
			instance.templatePurpose(_, purpose + "_" + purposeUuid);
			instance.save(_);

			var diagnoses = [];
			instance.getAllDiagnoses(_, diagnoses);
			strictEqual(diagnoses.length, 0, "msoWordTemplateDocument instance correctly saved");
			if (diagnoses.length > 0) {
				tracer && tracer(util.format(diagnoses));
			} else {
				instances.push(instance);
			}
		});
	});

	entity = db.model.getEntity(_, "lookupTemplatePurposes");
	strictEqual(true, entity != null, "Entity lookupTemplatePurposes known");

	var purposes = [];
	if (entity) {
		purposes = entity.$fetchInstances(_, {}, {
			"templateClass": tplClass,
			"templateType": "report"
		});
	}

	strictEqual(templatePurposes.length, purposes.length, "Lookup returned expected amount of results: " + purposes.length);

	// Look over created instances
	flows.each(_, instances, function(_, purpSaved) {
		var match = false;
		flows.each(_, purposes, function(_, purpLookup) {
			if (purpLookup.name(_) === purpSaved.templatePurpose(_)) match = true;
		});

		strictEqual(true, match, "Lookup returned template purpose: " + purpSaved.templatePurpose(_));
	});

	flows.each(_, instances, function(_, purpSaved) {
		purpSaved.deleteSelf(_);
	});

	start();
});

asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});