"use strict";

var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var sys = require('util');

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

// put mock LDAP user data into target

function putUser(target, login, givenName, email) {
	target[login] = {
		"sAMAccountName": login,
		"givenName": givenName,
		"sn": login + "_name",
		"mail": email,
		"l2": "l_" + login
	};
}

// put sample user data into user instance

function fillUserData(_, instance, name, diagnoses) {
	instance.login(_, name);
	instance.lastName(_, "1");
	instance.authentication(_, "db");
	instance.password(_, name);
	instance.save(_);
	instance.getAllDiagnoses(_, diagnoses);
}

var ldapInstance = null;

var translationTable = null;

var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 0);
		}
	}
});

var port = 3004;

var db;
asyncTest("init environnement", 1, function(_) {
	//
	db = adminTestFixtures.initializeTestEnvironnement(_);
	ok(db != null, "Environnement initialized");
	//
	start();
});

var ldap = require("syracuse-collaboration/lib/entities/user/ldap");

asyncTest("create ldap instance", 1, function(_) {
	//		var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var l = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	strictEqual(l.length, 0, "no LDAP instance UNITUNIT");
	if (l.length === 0) {
		var instance = entity.factory.createInstance(_, null, db);
		instance.name(_, "UNITUNIT");
		instance.url(_, "ldap://ldap");
		instance.authenticationNameMapping(_, "sAMAccountName");
		firstName: instance.firstNameMapping(_, "givenName");
		lastName: instance.lastNameMapping(_, "sn");
		email: instance.emailMapping(_, "mail");
		instance.save(_);
		ldapInstance = instance;
	} else {
		ldapInstance = l[0];
	}
	start();
});

asyncTest("add new users", 7, function(_) {
	var users = {};
	var diagnoses = [];
	putUser(users, "UNITUNIT1", "1", "email1@test");
	putUser(users, "UNITUNIT2", "2", "email2@test");

	ldap.updateUsers(_, ldapInstance, users, diagnoses, false);
	strictEqual(diagnoses.length, 0, "No ORM messages");
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	strictEqual(ld.length, 1, "still 1 instance");
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 2, "2 users now");
	if (l.length >= 2) {
		strictEqual(l[0].authentication(_), "ldap", "correct authentication");
		strictEqual(l[1].authentication(_), "ldap", "correct authentication");
		strictEqual(l[0].ldap(_).$uuid, ldapInstance.$uuid, "correct ldap instance");
	}
	var userEntity = db.model.getEntity(_, "user");
	var ld = db.count(_, userEntity, {
		jsonWhere: {
			login: {
				$regex: "^UNITUNIT"
			}
		}
	});
	ok(ld >= 2, "number of users total" + ld);
	start();
});

asyncTest("change 1 user, remove one user", 4, function(_) {
	var users = {};
	var diagnoses = [];
	putUser(users, "UNITUNIT1", "1", "email3@test");
	ldap.updateUsers(_, ldapInstance, users, diagnoses, true);
	strictEqual(diagnoses.length, 0, "No ORM messages");
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 1, "1 user now");
	strictEqual(l[0].authentication(_), "ldap", "correct authentication");
	strictEqual(l[0].email(_), "email3@test", "email changed");
	start();
});

asyncTest("1 user inactive", 4, function(_) {
	var users = {};
	var diagnoses = [];
	ldap.updateUsers(_, ldapInstance, users, diagnoses, false);
	strictEqual(diagnoses.length, 0, "No ORM messages");
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 1, "1 user now");
	strictEqual(l[0].active(_), false, "user inactive");
	strictEqual(l[0].email(_), "email3@test", "email correct");
	start();
});

asyncTest("1 user active again, changed", 4, function(_) {
	var users = {};
	putUser(users, "UNITUNIT1", "1", "email4@test");
	var diagnoses = [];
	ldap.updateUsers(_, ldapInstance, users, diagnoses, false);
	strictEqual(diagnoses.length, 0, "No ORM messages");
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 1, "1 user now");
	strictEqual(l[0].active(_), true, "user active");
	strictEqual(l[0].email(_), "email4@test", "email correct");
	start();
});

asyncTest("no user", 1, function(_) {
	var users = {};
	var diagnoses = [];
	ldap.updateUsers(_, ldapInstance, users, diagnoses, true);
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 0, "no user now");
	start();
});

asyncTest("add user with different name", 8, function(_) {

	var users = {};
	var diagnoses = [];
	//	var db = adminHelper.getCollaborationOrm(_);
	strictEqual(diagnoses.length, 0, "No ORM messages");
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	var entity = db.model.getEntity(_, "user");
	var inst1 = entity.createInstance(_, db, null);
	fillUserData(_, inst1, "UNITUNIT_", diagnoses);
	var inst2 = entity.createInstance(_, db, null);
	fillUserData(_, inst2, "UNITUNIT_1", diagnoses);
	var inst3 = entity.createInstance(_, db, null);
	fillUserData(_, inst3, "UNITUNIT_3", diagnoses);
	if (diagnoses.length > 0) {
		console.error("Diagnoses: " + sys.format(diagnoses));
	}
	strictEqual(diagnoses.length, 0, "No ORM messages after adding users");

	putUser(users, "UNITUNIT_", "1", "email4@test");
	ldap.updateUsers(_, ldapInstance, users, diagnoses, true);
	strictEqual(diagnoses.length, 1, "one message");
	strictEqual(diagnoses[0].severity, "warning", "warning message");
	diagnoses.shift;
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 1, "1 user");
	strictEqual(l[0].login(_), "UNITUNIT_2", "correct name");
	strictEqual(l[0].authenticationName(_), "UNITUNIT_", "correct authentication name");
	strictEqual(l[0].title(_), "mr", "correct title");
	inst1.deleteSelf(_);
	inst2.deleteSelf(_);
	inst3.deleteSelf(_);
	start();
});

asyncTest("no user again", 1, function(_) {
	var users = {};
	var diagnoses = [];
	ldap.updateUsers(_, ldapInstance, users, diagnoses, true);
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var ld = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	ldapInstance = ld[0];
	var l = ldapInstance.users(_).toArray(_);
	strictEqual(l.length, 0, "no user now");
	start();
});

asyncTest("remove ldap", 2, function(_) {
	ldapInstance.deleteSelf(_);
	ok(!ldapInstance.deleteError, "LDAP Instance could be deleted");
	//	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "ldap");
	var l = db.fetchInstances(_, entity, {
		jsonWhere: {
			name: "UNITUNIT"
		}
	});
	strictEqual(l.length, 0, "no LDAP instance UNITUNIT");
	start();
});

asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});