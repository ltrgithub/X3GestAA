"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var globals = require('streamline/lib/globals');

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

var endPoint = null;
config.sdata.endpoints.forEach(function(endp) {
	if ((endp.contract.application == "syracuse") && (endp.contract.contract == "collaboration")) {
		endPoint = endp;
	}
});
if (!endPoint) {
	//add model
	endPoint = {
		contract: require("syracuse-collaboration/lib/contract").contract,
	};
	config.sdata.endpoints.push(endPoint);
}
endPoint.datasets.mongodb_bench = {
	driver: "mongodb",
	port: 27017
}
//
config.factory && (config.factory.tracer = null);
config.mongodb && (config.mongodb.tracer = null);

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_bench/";
var port = 3004;
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//start syracuse server
//syracuse.server.listen(null, port);

function getCookie(_) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: "guest",
		password: "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_bench/" + url,
		headers: {
			cookie: cookie,
			accept: "application/json;vnd.sage.syracuse.representation=example.admin.mongodb_bench." + type
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_bench/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_bench");
}

function _createDataContext() {
	return new DataContext(_getModel(), true);
}

var doStop = false;
module("syracuseAdminBenchTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//			syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_bench"].hostname, endPoint.datasets["mongodb_bench"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_bench"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

var _data = {};
var _session = {
	setData: function(name, value) {
		var old = _data[name];
		if (old == value) return;

		if (old && old.onDestroy) {
			old.onDestroy();
		}
		if (typeof value == "undefined") delete _data[name];
		else _data[name] = value;
	},
	getData: function(name) {
		return _data[name];
	},
	_reset: function() {
		_data = {};
	}
}

function _resetSession() {
	_data = {};
}

function _createRequest(method, url, data, set) {
	var baseUrl = "http://localhost/sdata/syracuse/collaboration/mongodb_bench"
	return {
		session: _session,
		method: method,
		url: (set ? url : (baseUrl + url)).replace(/'/g, "%27"),
		context: {
			parseBody: function(_) {
				return data;
			}
		},
		headers: {
			cookie: "fake cookie"
		}
	}
}

function _checkStatus(response, statusCode, message) {
	strictEqual(response.statusCode, statusCode, message);
	if (response.statusCode != statusCode) {
		console.log(response);
		doStop = true;
		throw new Error("aborting test");
	}
}

asyncTest("create users", 1, function(_) {
	globals.context = globals.context || {};
	globals.context.session = {
		id: helpers.uuid.generate(),
		getUserLogin: function(_) { return "test" },
		getUserProfile: function(_) { return null }
	}
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_bench);
	var eltFactory = new factory.Factory(_getModel().getEntity("user"));
	var users = [];
	for (var i = 0; i < 3000; i++) {
		var userStr = "user" + i;
		var elt = eltFactory.createInstance(_, {
			login: userStr,
			firstName: userStr,
			lastName: userStr,
			email: userStr
		}, db);
//		elt.$uuid = helpers.uuid.generate();
		users.push(elt);
	}
	var startTime = Date.now();
	users.forEach_(_, function(_, item) {
		item.save(_);
	});
	var diffTime = Date.now() - startTime;
	ok(diffTime < 10000, "create users ok");
	//		console.log("Import users OK: "+diffTime);
	//
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});