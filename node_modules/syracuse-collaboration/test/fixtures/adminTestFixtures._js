"use strict";

var streams = require('streamline/lib/streams/streams');
var nodeconfig = require('syracuse-main/lib/nodeconfig'); // must be first syracuse require
var config = nodeconfig.config; // must be first syracuse require
var crypto = require('crypto');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var helpers = require('syracuse-core/lib/helpers');
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');

exports.modifyCollaborationEndpoint = function(datasetName) {
	//	nodeconfig.initEndpointsConfiguration();
	var contract = require("syracuse-collaboration/lib/contract").contract;
	contract.dbMeta.initScript = "syracuse-admin-init.json";
	var endPoint = null;
	config.sdata.endpoints.forEach(function(endp) {
		if ((endp.contract.application == "syracuse") && (endp.contract.contract == "collaboration")) {
			endPoint = endp;
		}
	});
	if (!endPoint) {
		//add model
		endPoint = {
			contract: contract,
		};
		config.sdata.endpoints.push(endPoint);
	}
	endPoint.datasets[datasetName] = {
		driver: "mongodb",
		hostname: "localhost",
		database: datasetName,
		port: 27017
	};
	config.collaboration.dataset = datasetName;
	//
	return endPoint;
};

exports.onlyInfo = function(diags) {
	return (diags || []).every(function(diag) {
		var s = diag.$severity || diag.severity;
		return (s === "info" || s === "success");
	});
};

exports.getCookie = function(_, baseUrl, login, pass, fullResponseReturn) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "admin",
		password: pass || "admin",
		headers: {
			"accept-language": "fr,fr-fr",
		}
	}).end().response(_);
	var body = response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	if (fullResponseReturn) return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: body
	};
	else return response.headers["set-cookie"];
};

exports.get = function(_, cookie, url, statusCode, fullResponseReturn) {
	var response = streams.httpRequest({
		method: "get",
		url: url,
		headers: {
			cookie: cookie,
			"Accept-Language": "en-us",
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var body = JSON.parse(response.readAll(_));
	if (fullResponseReturn) return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: body
	};
	else return body;
};

exports.post = function(_, cookie, url, data, statusCode, fullResponseReturn) {
	var response = streams.httpRequest({
		method: "post",
		url: url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": "en-US",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if (fullResponseReturn) return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
};

exports.put = function(_, cookie, url, data, statusCode, fullResponseReturn) {
	var response = streams.httpRequest({
		method: "put",
		url: url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": "en-US",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if (fullResponseReturn) return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
};

exports.del = function(_, cookie, url, statusCode, fullResponseReturn) {
	var response = streams.httpRequest({
		method: "delete",
		url: url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": "en-US",
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if (fullResponseReturn) return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
};

exports.encodePassword = function(login, pass) {
	var realm = 'Syracuse';
	// hash function from RFC2617
	function h(value) {
		var hash = crypto.createHash('MD5');
		hash.update(value, "utf8");
		return hash.digest("hex");
	}
	return h(login + ":" + realm + ":" + pass);
};

exports.makeSessionStub = function(_) {
	globals.context = globals.context || {};
	globals.context.session = globals.context.session || {
		id: helpers.uuid.generate(),
		getUserLogin: function(_) {
			return "guest";
		},
		getUserProfile: function(_) {
			return {
				user: function(_) {
					// getting the administration ORM
					var db = adminHelper.getCollaborationOrm(_);
					return db.fetchInstance(_, db.model.getEntity(_, "user"), {
						jsonWhere: {
							login: "guest"
						}
					});
				},
				getDefaultX3Endpoints: function(_) {
					return [];
				}
			};
		},
		getSecurityProfile: function(_) {
			return null;
		},
		getData: function(code) {
			return null;
		}
	};
	return true;
};

exports.newMongoDb = function(database, server, options) {
	var dbname = globals.context.tenantId ? globals.context.tenantId + '-' + database : database;
	return new require('streamline-mongodb').Db(dbname, server, options);
};

exports.initializeTestEnvironnement = function(_, datasetName, port) {
	function _getModel() {
		return dataModel.make(registry.applications.syracuse.contracts.collaboration, dsName);
	}
	//force basic auth
	config.session = config.session || {};
	config.session.auth = "basic";
	//no integration server
	config.integrationServer = null;
	//
	var dsName = datasetName || "unit_test";
	//
	var endPoint = exports.modifyCollaborationEndpoint(dsName);
	//
	if (!exports.makeSessionStub(_)) return null;
	//
	var server = new mongodb.Server(endPoint.datasets[dsName].hostname, endPoint.datasets[dsName].port, {});
	var _db = exports.newMongoDb(endPoint.datasets[dsName].database, server, {});
	_db = _db.open(_);
	_db.dropDatabase(_);
	//
	require('syracuse-main/lib/syracuse').startServers(_, port || 3004);
	//
	return dataModel.getOrm(_, _getModel(), endPoint.datasets[dsName]);
}
