"use strict";

var helpers = require('syracuse-core').helpers;

exports.tracer = null;

var _scripts = [];
// script index MUST be target version number for this script

_scripts[1] = function(_, db) {
	// dummy
};


_scripts[2] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 2; add notification events for license expiry unless available");
	var items = db.db.collection("notificationEvent", _).find({
		code: "license"
	}).toArray(_);
	var keys = [];
	var keys = items.map_(_, function(_, item) {
		return item.code(_);
	});
	if (keys.indexOf("license_web_grace") < 0) {
		exports.tracer && exports.tracer("Add license_web_grace");
		var notificationEvent = db.model.getEntity(_, "notificationEvent").factory.createInstance(_, null, db);

		notificationEvent.code(_, "license_web_grace");
		notificationEvent.description(_, {
			"default": "Web service pool slow down warning",
			"en-US": "Web service pool slow down warning",
			"fr-FR": "Notification de ralentissement des services web"
		});
		notificationEvent.titleTemplate(_, {
			"default": "Slow down of web services for {productTitle}",
			"en-US": "Slow down of web services for {productTitle}",
			"fr-FR": "Ralentissement des service web pour {productTitle}",
		});
		notificationEvent.textTemplate(_, {
			"default": "Dear {user.firstName} {user.lastName},\nThe grace limit for web services for the product {productTitle} has been reached. Web service execution will be slowed down by {graceSlowdown} before the absolute limit is reached. Consider to get a license with higher limit.\nThank you in advance",
			"en-US": "Dear {user.firstName} {user.lastName},\nThe grace limit for web services for the product {productTitle} has been reached. Web service execution will be slowed down by {graceSlowdown} before the absolute limit is reached. Consider to get a license with higher limit.\nThank you in advance",
			"fr-FR": "Cher {user.firstName} {user.lastName},\nLa limite de consommation autorisée pour les services web du produit {productTitle} a été atteinte. L'exécution des services web est désormais ralentie par un facteur de {graceSlowdown} jusqu'à que la limite supplémentaire autorisée soit atteinte. Veuillez considérer d'obtenir une licence offrant une limite plus importante.\nMerci pour votre compréhension",
		});
		notificationEvent.save(_);
	}
	if (keys.indexOf("license_web_max") < 0) {
		exports.tracer && exports.tracer("Add license_web_max");
		var notificationEvent = db.model.getEntity(_, "notificationEvent").factory.createInstance(_, null, db);

		notificationEvent.code(_, "license_web_max");
		notificationEvent.description(_, {
			"default": "Web service pool limit warning",
			"en-US": "Web service pool limit warning",
			"fr-FR": "Notification de blocage des services web",
		});
		notificationEvent.titleTemplate(_, {
			"default": "Limit of web services for {productTitle}",
			"en-US": "Limit of web services for {productTitle}",
			"fr-FR": "Limite des services web pour {productTitle}",
		});
		notificationEvent.textTemplate(_, {
			"default": "Dear {user.firstName} {user.lastName},\nThe total limit for web services for the product {productTitle} has been reached. Web service execution will be stopped. Consider to get a license with higher limit.\nThank you in advance",
			"en-US": "Dear {user.firstName} {user.lastName},\nThe total limit for web services for the product {productTitle} has been reached. Web service execution will be stopped. Consider to get a license with higher limit.\nThank you in advance",
			"fr-FR": "Cher {user.firstName} {user.lastName},\nL'ultime limite pour les services web du produit {productTitle} a été atteinte. L'exécution des services web est désormais bloquée. Veuillez considérer d'obtenir une licence offrant une limite plus importante.\nMerci pour votre compréhension",
		});
		notificationEvent.save(_);
	}

};

_scripts[3] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 3; add notification event for license warning unless available");
	var items = db.db.collection("notificationEvent", _).find({
		code: "license"
	}).toArray(_);
	var keys = [];
	var keys = items.map_(_, function(_, item) {
		return item.code(_);
	});
	if (keys.indexOf("license_web_warn") < 0) {
		exports.tracer && exports.tracer("Add license_web_grace");
		var notificationEvent = db.model.getEntity(_, "notificationEvent").factory.createInstance(_, null, db);

		notificationEvent.code(_, "license_web_warn");
		notificationEvent.description(_, {
			"default": "Web service pool slow down announcement",
			"en-US": "Web service pool slow down announcement",
			"fr-FR": "Avertissement de consommation des service web"
		});
		notificationEvent.titleTemplate(_, {
			"default": "Announcement of reduction of web services for {productTitle}",
			"en-US": "Announcement of reduction of web services for {productTitle}",
			"fr-FR": "Avertissement avant ralentissement des services web pour {productTitle}",
		});
		notificationEvent.textTemplate(_, {
			"default": "Dear {user.firstName} {user.lastName},\nAlready {percentage}% of the limit for web services for the product {productTitle} have been reached. Web service execution will be slowed down by {graceSlowdown} when 100% is reached and will be stopped when {totalPercentage}% is reached. Consider to get a license with higher limit.\nThank you in advance",
			"en-US": "Dear {user.firstName} {user.lastName},\nAlready {percentage}% of the limit for web services for the product {productTitle} have been reached. Web service execution will be slowed down by {graceSlowdown} when 100% is reached and will be stopped when {totalPercentage}% is reached. Consider to get a license with higher limit.\nThank you in advance",
			"fr-FR": "Cher {user.firstName} {user.lastName},\nDéjà {percentage}% de la limite auorisée pour la consommation des web services du produit {productTitle} a été atteinte. L'exécution des services web sera ralentie par un facteur de {graceSlowdown} lorsque 100% de cette consommation sera atteinte puis ensuite bloquée à partir de {totalPercentage}%. Veuillez considérer d'obtenir une licence offrant une limite plus importante.\nMerci pour votre compréhension",
		});
		notificationEvent.save(_);
	}
	var settings = db.fetchInstance(_, db.model.getEntity(_, "setting"), {});
	var threshold = settings.webServiceWarnThreshold(_);
	if (threshold === null || threshold === undefined) {
		settings.webServiceWarnThreshold(_, 75);
		settings.save(_);
	}


};

function regenerateStub(_, db) {
	var wss = db.fetchInstances(_, db.model.getEntity(_, "soapGeneric"));
	wss.forEach_(_, function(_, ws) {
		ws.regenerate(_);
	});
}

_scripts[4] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 4; Regenerate CAdxWebServiceXmlCCService stub prototypes");
	regenerateStub(_, db);
};

_scripts[5] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 5; Regenerate CAdxWebServiceXmlCCService stub prototypes");
	regenerateStub(_, db);
};

_scripts[6] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 6; Regenerate CAdxWebServiceXmlCCService stub prototypes");
	regenerateStub(_, db);
};

_scripts[7] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 7; Regenerate CAdxWebServiceXmlCCService stub prototypes to include localizations");
	regenerateStub(_, db);
};

_scripts[8] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 8; Regenerate CAdxWebServiceXmlCCService stub prototypes to fix problem with localizations");
	regenerateStub(_, db);
};

_scripts[9] = function(_, db) {
	exports.tracer && exports.tracer("Executing update script to version: 9; Regenerate CAdxWebServiceXmlCCService stub prototypes to fix rpc/encoded missed typed");
	regenerateStub(_, db);
};

exports.initData = function(_, db) {
	exports.tracer && exports.tracer("Initializing database");
	// more if needed
};

exports.dataUpdate = function(_, db, actualVersion, targetVersion) {
	//console.log("actual=" + actualVersion + ", target=" + targetVersion);
	// force log: always
	exports.tracer = console.log;
	//
	_scripts.slice(actualVersion + 1, targetVersion + 1).forEach_(_, function(_, sequence) {
		sequence && sequence(_, db);
	});
};

exports.metadata = {
	fileId: "b12ec97c53dd",
	// this id MUST never change and MUST be unique over all update scripts
	description: "Soap initialization" // !important, some description, optional and can change
};