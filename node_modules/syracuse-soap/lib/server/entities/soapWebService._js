"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var globals = require('streamline-runtime').globals;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var wsdlGenerator = require('syracuse-soap/lib/server/wsdlGenerator');
var forEachKey = helpers.object.forEachKey;

exports.entity = {
	$titleTemplate: "SOAP Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Web Service",
	$listTitle: "List of SOAP Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true,
			$pattern: "^[A-Za-z_\\-][A-Za-z_\\-0-9]*$"
		},
		description: {
			$title: "Description",
			$isMandatory: true,
			$isLocalized: true
		},
		applicationName: {
			$isExcluded: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).application(_)) || "";
			}
		},
		contractName: {
			$isExcluded: true,
			$compute: function(_, instance) {
				return (instance.application(_) && instance.application(_).contract(_)) || "";
			}
		},
		endpointName: {
			$isExcluded: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			}
		},
		wsdl: {
			$isExcluded: true,
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
		url: {
			$title: "Url",
			$format: "$url",
			$compute: function(_, instance) {
				if (instance.name(_) && instance.application(_) && instance.application(_).application(_) && instance.application(_).contract(_) && instance.endpoint(_) && instance.endpoint(_).dataset(_)) {
					return globals.context.session.host + "/soap-ws/" + instance.application(_).application(_) + "/" + instance.application(_).contract(_) + "/" + instance.endpoint(_).dataset(_) + "/" + instance.name(_) + "?wsdl";
				} else {
					return "";
				}

			}
		},
		referenceDataset: {
			$isExcluded: true,
			$title: "Reference dataset",
			$compute: function(_, instance) {
				var ep = instance.endpoint(_);
				// get default endpoint from groups (take the first one)
				if (!ep) {
					var up = globals && globals.context && globals.context.session && globals.context.session.getUserProfile(_);
					if (up) {
						var eps = up.getDefaultX3Endpoints(_);
						ep = eps && eps[0];
					}
				}
				// get the application's default endpoint
				if (!ep) ep = (instance.application(_) && instance.application(_).defaultEndpoint(_));
				//
				return ep && ep.dataset(_);
			}
		}
	},
	$relations: {
		application: {
			$title: "Application",
			$type: "application",
			$inv: "soapWebServices",
			$isDefined: true,
			$isMandatory: true,
			$propagate: function(_, instance) {
				var inst = instance.representations(_);
				for (var rel in inst._data) {
					inst.deleteInstance(_, rel);
				}
			}
		},
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$isDefined: true,
			$lookupFilter: {
				applicationRef: "{application}"
			},
			$propagate: function(_, instance) {
				var inst = instance.representations(_);
				for (var rel in inst._data) {
					inst.deleteInstance(_, rel);
				}
			}
		},
		representations: {
			$title: "Representations",
			$type: "soapRepresentations",
			$isChild: true,
			$select: {
				$title: "Representations",
				$type: "representationProxy",
				$fieldMap: {
					name: "representation",
					title: "title",
					entityName: "entity"
				},
				$parameters: "application={applicationName}&contract={contractName}&dataset={referenceDataset}"
			}
		},
		stub: {
			$title: "Stub",
			$type: "soapStub",
			$capabilities: "",
			$isChild: true
		}

	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				try {
					if (!instance.application(_)) instance.$diagnoses.push({
						$severity: "error",
						$message: "Application is required"
					});

					var representations = instance.representations(_).toArray(_);
					if (representations.length === 0) instance.$diagnoses.push({
						$severity: "error",
						$message: "At least one representation is required"
					});

					if (instance.$diagnoses.length === 0) {
						//console.log("Generate WSDL file for web service: "+instance.name(_));
						var wsdl = wsdlGenerator.generate(_, instance);

						var db = adminHelper.getCollaborationOrm(_);
						var entity = db.model.getEntity(_, "soapStub");
						var stub = entity.factory.createInstance(_, null, db);
						stub.name(_, instance.name(_));
						stub.url(_, null);
						stub.description(_, "Tester");
						stub.isChild(_, true);

						var buf = new Buffer(wsdl, 'utf8').toString('binary');

						if (buf != null && buf.length !== 0) {

							var props = {
								length: buf.length,
								contentType: "application/xml",
								fileName: instance.name(_) + ".wsdl"
							};

							var store = instance.wsdl(_);
							var store2 = stub.wsdl(_);

							var stream = store.createWritableStream(_, props);
							stream.write(_, buf, "binary");
							stream.write(_, null);

							var stream2 = store2.createWritableStream(_, props);
							stream2.write(_, buf, "binary");
							stream2.write(_, null);

						}

						stub.$generate(_, stub, true);

						forEachKey(stub.$diagnoses, function(key, diag) {
							instance.$diagnoses.push({
								$severity: diag.severity,
								$message: diag.message
							});
						});

						instance.stub(_, stub);

					}

				} catch (e) {
					console.error(e.stack);
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message
					});
				}
			}
		]

	},
	$uniqueConstraints: [
		["name"]
	]
};