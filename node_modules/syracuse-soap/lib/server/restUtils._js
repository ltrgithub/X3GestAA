"use strict";

var httpClient = require("@sage/syracuse-lib/src/http-client/httpClient");
var soapHelper = require('./soapHelper');
var locale = require('streamline-locale');
var Template = require('@sage/syracuse-core').resource.proxy.Template;
var soapTracer = require('../common/soapTracer');

var tracer = soapTracer.create("request");

exports.getPrototype = function(_, headers, baseUrl, representation, type) {
	var url = baseUrl.replace("/soap-ws/", "/sdata/") + "/$prototypes('" + representation + "." + type + "')";
	//console.log("GET PROTOTYPE: "+url);
	var httpResp = sendRequest(_, headers, "GET", url);

	if (httpResp.statusCode !== 200) throw new Error(httpResp.body.$diagnoses[0].$severity + ": " + httpResp.body.$diagnoses[0].$message);

	return httpResp.body;
};

exports.getRepresentation = function(_, headers, baseUrl, $url, $resource, params) {
	if (!$resource) $resource = {};
	$resource.$baseUrl = baseUrl.replace("/soap-ws/", "/sdata/");
	var url = (new Template($url)).resolve($resource);
	//console.log("GET REPRESENTATION: "+url);
	return sendRequest(_, headers, "GET", url, null, params);
};

exports.useWorkingCopy = function(_, headers, baseUrl, referer, entity, representation, data, key) {
	key = key ? "('" + key + "')" : "";
	var url = baseUrl + "/" + entity + key + "/$workingCopies?representation=" + representation + ".$edit";
	// Create working copy
	tracer.traceSection("Create working copy");
	headers.referer = referer;
	var res = sendRequest(_, headers, "POST", url);
	soapHelper.ckeckDiagnoses(res.body);
	tracer.trace("Create working copy result: " + JSON.stringify(res, null, 2));

	var trackingId = res.body.$trackingId;

	url = baseUrl + "/$workingCopies('" + trackingId + "')?representation=" + representation + ".$edit";

	// Put data
	tracer.traceSection("Put data");
	data.$trackingId = trackingId;
	data.$uuid = res.body.$uuid;
	data.$etag = res.body.$etag;
	res = sendRequest(_, headers, "PUT", url, data);
	soapHelper.ckeckDiagnoses(res.body);
	tracer.trace("Put data result: " + JSON.stringify(res, null, 2));

	// Save working copy
	tracer.traceSection("Save working copy");
	res = sendRequest(_, headers, "PUT", url, {
		$trackingId: trackingId,
		$uuid: res.body.$uuid,
		$actions: {
			$save: {
				$isRequested: true
			}
		},
		$etag: res.body.$etag
	});
	soapHelper.ckeckDiagnoses(res.body);
	tracer.trace("Save working copy result: " + JSON.stringify(res, null, 2));
	return res;
};


var sendRequest = exports.sendRequest = function(_, headers, method, url, data, params) {
	function genParams() {
		var x = '';
		if (params != null) {
			if (url.indexOf('?') !== -1) {
				x += '&';
			} else {
				x += '?';
			}
			x += Object.keys(params).map(function(val, id) {
				if (params[val].length !== 0) {
					var res = '';
					if (id !== 0) {
						res += '&';
					}
					res += val + '=' + params[val];
					return res;
				}
			}).join('');
		}
		return x;
	}


	tracer.traceSection("Send Http request");
	url = url.replace("/soap-ws/", "/sdata/");
	var header = {
		host: headers['x-forwarded-host'] || headers.host,
		accept: "application/json;vnd.sage=syracuse",
		"accept-language": locale.current || "en-US",
		"content-type": "application/json",
		cookie: headers.cookie,
		referer: headers.referer,
		//authorization: headers.authorization,
		connection: headers.connection
	};
	url = url + genParams();
	tracer.trace("method: " + method);
	tracer.trace("Url: " + url);
	tracer.trace("headers: " + JSON.stringify(header, null, 2));

	var request = httpClient.httpRequest(_, {
		method: method,
		url: url,
		headers: header
	});
	var response;

	if (data != null) {
		tracer.trace("Data: " + JSON.stringify(data, null, 2));
		header["Content-Length"] = JSON.stringify(data).length;
		response = request.end(JSON.stringify(data)).response(_);
	} else {
		response = request.end().response(_);
	}

	var body = response.readAll(_);

	return {
		statusCode: response.statusCode,
		header: response.headers,
		body: body != null ? JSON.parse(body) : null
	};
};