"use strict";

var httpClient = require("syracuse-httpclient/lib/httpClient");
var Template = require('syracuse-core/lib/resource/resourceProxy').Template;
var restUtils = require('./restUtils');

exports.getPrototype = function(_, headers, baseUrl, representation, type){
	var url = baseUrl.replace("/soap-ws/", "/sdata/") + "/$prototypes('" + representation + "." + type + "')";
	//console.log("GET PROTOTYPE: "+url);
	var httpResp = restUtils.sendRequest(_, headers, "GET", url);

	if (httpResp.statusCode !== 200)
		throw new Error(httpResp.body.$diagnoses[0].severity +": "+httpResp.body.$diagnoses[0].message);
	
	return httpResp.body;
};


exports.getRepresentation = function(_, headers, baseUrl, $url, $resource, params){
	if (!$resource)
		$resource = {};
	$resource.$baseUrl =  baseUrl.replace("/soap-ws/", "/sdata/");
	var url = (new Template($url)).resolve($resource);
	return restUtils.sendRequest(_, headers, "GET", url, null, params);
};

exports.sendRequest = function(_, headers, method, url, data, params){
	function genParams(){
		var x = '';
		if (params != null){
			if (url.indexOf('?') !== -1){
				x += '&';
			} else {
				x += '?';
			}
			x += Object.keys(params).map(function(val, id){
				if (params[val].length !== 0){
					var res = '';
					if (id !== 0){
						res += '&';
					}
					res += val + '=' + params[val];
					return res;
				}
			}).join('');
		}
		return x;
	}
	
	//console.log("HEADERS="+JSON.stringify(headers,null,2));
	
	
	var header = {
	  host: headers.host,
	  accept: "application/json",
	  cookie: headers.cookie,
	  authorization: headers.authorization,
	  connection: headers.connection
	};
	//console.log("URL="+url + genParams());
	var request = httpClient.httpRequest(_, {
		method: method,
		url: url + genParams(),
		headers: header
	});
	var response;
	if (data != null){
		response = request.end(JSON.stringify(data)).response(_);
	}else{
		response = request.end().response(_);
	}
	

	var body = response.readAll(_);

	return {
		statusCode: response.statusCode,
		header: response.headers,
		body: body != null ? JSON.parse(body) : null
	};
};