"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var x3pool = require("syracuse-x3/lib/pool");
var util = require("util");
var fs = require('fs');
var wsdlGenerator = require('./wsdlGenerator');
var soapInterceptor = require('./soapInterceptor');

function replyWsdl(_, context) {
	var content = wsdlGenerator.generate(_, context);
	var header = {
			"content-type" : "text/xml;charset=UTF-8",
			"content-length":  Buffer.byteLength(content, "utf8")
	}
	context.response.writeHead(200, header);
	context.response.end(content, "utf8");
}



var _soapMap = {
	walk: function(_, context, name, id) {
		context.applicationName = name;
		context.application = registry.applications[name];
//			if (!context.application && !helpers.stubsPath) throw context.notFound("application not found: " + name);
		return _dispatch(_, context, _applicationMap);
	},
	get: function(_, context) {
		return context.replyDictionaryPage(_, registry.applications, "application");
	}
}

//URL is http://host/soap/app
var _applicationMap = {
	walk: function(_, context, name, id) {
		context.contractName = name;
		if (context.application)
			context.contract = context.application.contracts[name];
		//
		var app = adminHelper.getApplication(_, context.applicationName, context.contractName);
		if(!app && !context.application && !helpers.stubsPath) throw context.notFound(locale.format(module, "applicationNotFound", context.applicationName, context.contractName));
		context.applicationRef = app;
		//
		return _dispatch(_, context, (app && (app.protocol(_) !== "syracuse"))? _x3ContractMap : _syracuseContractMap);
	}
	,
	get: function(_, context) {
		return context.replyDictionaryPage(_, context.application.contracts, "contract");
	}
}

// URL is http://host/soap/app/contract
var _syracuseContractMap = {
	walk: function(_, context, name, id) {
		// allow stubs
		
		if(context.contract) {
			var ds = registry.getDataset(_, context.contract, name);
			if (!ds) throw context.notFound("dataset not found: " + name);
			context.dataset = name;
			context.model = dataModel.make(context.contract, context.dataset);
			// crnit : database abstraction
			context.db = dataModel.getOrm(_, context.model, ds);
			//
			context.baseUrl = context.walked();
		}
		return _dispatch(_, context, _syracuseDatasetMap);
	}
	,
	get: function(_, context) {
		return context.replyDictionaryPage(_, context.contract.datasets, "dataset");
	}
}

var _x3ContractMap = {
	walk: function(_, context, name, id) {
		var protocol = "";
		if (context.applicationRef) { // TEST to allow stubs
			// find the endpoint
			var ep = adminHelper.getEndpoint(_, {
				application: context.applicationName,
				contract: context.contractName,
				dataset: name
			});
			// TEMP : no error if syracuse endpoint not found, for unit tests to pass. fix later.
			if(!ep) throw context.notFound(locale.format(module, "endpointNotFound", context.applicationName, context.contractName, name));
			context.endpoint = ep;
			//
			context.baseUrl = context.walked();
		}
		return _dispatch(_, context, _x3DatasetMap);
	}
}

// URL is http://host/soap/app/contract/dataset
// for syracuse endpoints
var _syracuseDatasetMap = {
	walk: function(_, context, name, id) {
		var model = context.model;
		if (model) { // TEST to allow stubs
			var singular = model.singularize(name);
			context.entity = model.getEntity(singular)
			if (!context.entity) throw context.notFound(locale.format(module, "entityNotFound", name));
		}
		if (id) {
			throw context.badRequest("unexpected URL ID: ('" + id + "')");
		} else {
			return _dispatch(_, context, _entityMap);
		}
	},
	get: function(_, context) {
		var baseUrl = context.walked();
		return context.replyDictionaryPage(_, context.model.getEntities(), "entity", function(name, entity) {
			return {
				$url: baseUrl + "/" + entity.plural,
				$key: entity.plural,
				$descriptor: "entity " + entity.name,
				name: entity.plural
			}
		});
	},

}


var _x3DatasetMap = {
		walk: function(_, context, name, id) {
			// delegate to x3pool
			x3pool.send(_, context);
			
		},
		prototypes: function(_, context, name, id) {
			// delegate to x3pool
			x3pool.send(_, context);
		},
		workingCopies: function(_, context, name, id) {
			// delegate to x3pool
			x3pool.send(_, context);
		}
	}

//URL is http://host/soap/app/contract/dataset/entity (or deeper)
var _entityMap = {
	get: function(_, context) {
		var param = context.request.url.split("?")[1];
		if (param && param.toUpperCase() === 'WSDL'){
			replyWsdl(_, context);
		}else{
			throw context.badRequest("GET NOT YET IMPLEMENTED");
		}
	},
	post: function(_, context) {
		try{
		var result = soapInterceptor.intercept(_, context);
		

		var header = {
				"content-type" : "application/soap+xml; charset=utf-8",
				"content-length":  Buffer.byteLength(result, "utf8")
		}
		context.response.writeHead(200, header);
		context.response.end(result, "utf8");
		}catch(e){
			console.error(e.stack);
		}
		
//		context.setMeta(true);
//		return factory.createInstance(_, context, context.entity.factory);
	},
	template: function(_, context) {
//		return _dispatch(_, context, _templateMap);
	},
	schema: function(_, context) {
//		return _dispatch(_, context, _schemaMap);
	},
	service: function(_, context) {
//		return _dispatch(_, context, _serviceMap);
	}
}

function _parseSegment(segment) {
	var match = /^([^\/(]*)\('([^']*)'\)$/.exec(segment);
	return match ? {
		name: match[1],
		id: match[2]
	} : {
		name: segment
	}
}


function _dispatch(_, context, map) {

	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) return map[method](_, context);
		else throw context.badMethod(method);
	} else {
		var pair = _parseSegment(seg);
		if (pair.name[0] == '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](_, context, pair.id);
			}
		} else if (map.walk) {
			return map.walk(_, context, pair.name, pair.id);
		}
		throw context.badRequest(locale.format(module, "unexpectedSegment", seg));
	}
}



function _logRequest(_, context) {
	if(!context.request.headers["x-history-title"]) return;
	//
	var db = adminHelper.getCollaborationOrm(_);
	var h = db.model.getEntity("navHistory").factory.createInstance(_, null, db);
	h.title(_, context.request.headers["x-history-title"]);
	h.agent(_, context.request.headers["x-history-agent"]);
	h.url(_, context.request.url);
	h.save(_);
}

function _doIt(_, context) {
	try {
		var protocol = context.walkUrl();
		if (protocol != "soap") throw new Error(locale.format(module, "badUrl"));
		
		// fire and forget log call
		_logRequest(null, context);
		
		_dispatch(_, context, _soapMap);
	} catch (ex) {
		if (ex.httpStatus) {
			return context.reply(_, ex.httpStatus, ex.message + "\n" + ex.stack);
		} else if (ex.stack) {
			console.error(ex.message + "\n" + ex.stack);
			return context.reply(_, 500, ex.message + "\n" + ex.stack);
		} else {
			console.error("CAUGHT NON ERROR: " + ex)
			return context.reply(_, 500, ex.toString());
		}
	}
}






exports.dispatcher = function(config) {
	// setup config here
//	_config = (config && config.x3fusion) || {};
//	tracer = config && config.x3fusion && config.x3fusion.tracer;
//	profiler = config && config.x3fusion && config.x3fusion.profiler;
	//
	return function(_, request, response) {
		var context = new Context(request, response);
		request.context = context;
		try {
			_doIt(_, context);
		} catch (err) {
			helpers.log.exception(module, err);
			context.reply(_, 500, err.message + "\n" + err.stack);
		}
	}
}