"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require('streamline-locale');

exports.getSoapWebServices = function(_, entityName) {
	var db = adminHelper.getCollaborationOrm(_);
	var soapWSEntity = db.getEntity(_, entityName || "soapWebService");
	var instances = db.fetchInstances(_, soapWSEntity);

	var insts = [];
	for (var i in instances) {
		var instance = instances[i];
		var serializedInstance = instance.serializeInstance(_);
		insts.push(serializedInstance);
	}
	//console.log("INSTANCES="+JSON.stringify(insts, null,2));
	return insts;
};

// request is a real soap call (not from SoapTester within non-SOAP session)
// calls on W0, W1, ... child processes are always real SOAP, even from Tester
exports.notTesterSoap = function(request) {
	var url = request.url;
	var res = (process.argv[2] && process.argv[2][0] === "W") || url.indexOf("/soap-generic/") === 0 && !/[\?\&]tester=syracuseWSTester/.test(url);
	return res;
};

// transform a URL so that it will contain the SOAP tester marker
exports.makeTesterSoap = function(url) {
	if (url.indexOf("tester=syracuseWSTester") < 0) {
		if (url.indexOf('?') < 0) url += "?tester=syracuseWSTester";
		else url += "&tester=syracuseWSTester";
	}
	return url;
};

// remove SOAP tester marker from string
exports.removeTesterSoap = function(url) {
	return url.replace(/[\?\&]tester=syracuseWSTester/, "");
};

exports.getSoapWebService = function(_, serviceName, context, entityName) {
	var db = adminHelper.getCollaborationOrm(_);
	var model = db.model;
	console.log("SVCSVCCCCCCCCCCCCCCCCCC", entityName, serviceName);
	var soapWSEntity = model.getEntity(_, entityName || "soapWebService");
	if (!soapWSEntity) throw context.notFound("Entity not found: soapWebService");
	var filter = {
		sdataWhere: "name eq '" + serviceName + "'"
	};
	var instances = db.fetchInstances(_, soapWSEntity, filter);

	// Must not append
	if (instances.length > 1) throw context.notFound(locale.format(module, "severalWS", serviceName));

	if (instances.length !== 1) throw context.notFound(locale.format(module, "wsNotFound", serviceName));

	return db.fetchInstance(_, soapWSEntity, instances[0].$key);
};