"use strict";

var globals = require('streamline/lib/globals');
var locale = require("syracuse-core/lib/locale");
var config = require('config');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var nannyHelper = require("syracuse-soap/lib/generic/nannyHelper");
var poolManager = require("syracuse-soap/lib/generic/poolManager");
var ClientPool = poolManager.ClientPool;

var tracer = console.error;

exports.entity = {
	$titleTemplate: "Pool configuration: {alias}",
	$properties: {
		alias: {
			$title: "Alias",
			$isMandatory: true,
			$isUnique: true,
			$pattern: "^[-\\w]+$",
			$linksToDetails: true,
		},
		maxSize: {
			$title: "Maximum size",
			$type: "integer",
			$isMandatory: true,
			$default: 0
		},
		autoStart: {
			$title: "Auto start",
			$type: "boolean",
			$default: false,
			$propagate: function(_, instance, value) {
				if (value == null)
					return;
				if (value === false) {
					instance.initSize(_, 0);
				}
			}
		},
		initSize: {
			$title: "Initialization size",
			$type: "integer",
			$isMandatory: true,
			$isDefined: function(_, instance) {
				return instance.autoStart(_);
			},
			$default: 0
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		},
		localePref: {
			$title: "Locale",
			$type: "localePreference",
			$isMandatory: true
		},
		user: {
			$title: "User",
			$type: "user",
			$isMandatory: true
		}
	},
	$functions: {
		getPool: function(_, start) {
			var pool = poolManager.getPool(this.alias(_));
			if (!pool) {
				if (start) {
					pool = new ClientPool();
				} else {
					throw new Error("Pool is not started");
				}
			}
			return pool;
		},
		update: function(_) {
			this.getPool(_, true).init(!_, globals.context, this);
		},
		stop: function(_) {
			// stop all clients
			this.getPool(_).stop(_, true);
		},
		getInfos: function(_) {
			return this.getPool(_).getInfo();
		}
	},
	$services: {
		update: {
			$title: "Update",
			$isMethod: true,
			$method: "POST",
			$execute: function(_, context, instance, parameters) {
				//instance.update(_);
				instance.$diagnoses = instance.$diagnoses || [];
				instance.$diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "poolUpdated", instance.initSize(_))
				});
				var result = nannyHelper._propagate(_, "POST", "update", {
					uuid: instance.$uuid
				});
				tracer && tracer("update pool: " + result);
			}
		},
		stop: {
			$title: "Stop",
			$isMethod: true,
			$method: "POST",
			$execute: function(_, context, instance, parameters) {
				instance.stop(_);
				instance.$diagnoses = instance.$diagnoses || [];
				instance.$diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "poolStopped")
				});
				var result = nannyHelper._propagate(_, "POST", "stop", {
					uuid: instance.$uuid
				});
				tracer && tracer("stop pool: " + result);
			},
		},
		getState: {
			$method: "GET",
			$isMethod: true,
			$title: "Status",
			$parameters: {
				$url: "{$baseUrl}/soapClassicPoolStatuses/$template/$workingCopies?representation=soapClassicPoolStatus.$edit&uuid={$uuid}&alias={alias}",
				$method: "POST",
				$properties: {
					uuid: {
						$type: "application/x-string"
					},
					alias: {
						$type: "application/x-string"
					},
				}
			},
			$execute: function(_, context, instance) {
				// Do nothing

			},
		},

	},
	$events: {
		$beforeSave: [

			function(_, instance) {

				instance.$diagnoses = instance.$diagnoses || [];
				if (instance.maxSize(_) < instance.initSize(_)) {
					instance.$diagnoses.push({
						$severity: "warning",
						$message: locale.format(module, "maxSizeLtInitSize")
					});
					instance.initSize(_, instance.maxSize(_));
				}
			}
		]
	},
};

//fetch soapClassicPool instance by $uuid
function _fetchPool(_, uuid) {
	if (!uuid) throw new Error("No uuid for fetching soapClassicPool " + uuid);

	var db = adminHelper.getCollaborationOrm(_);
	var instance = db.fetchInstance(_, db.model.getEntity(_, "soapClassicPool"), {
		jsonWhere: {
			$uuid: uuid
		}
	});
	// console.log("Fetch "+uuid+" "+instance);
	if (!instance) throw new Error("Wrong uuid " + uuid);
	return instance;
}

exports.updateExternal = function(_, uuid) {
	_fetchPool(_, uuid).update(_);
};

exports.stopExternal = function(_, uuid) {
	_fetchPool(_, uuid).stop(_);
};

exports.getInfosExternal = function(_, uuid) {
	return _fetchPool(_, uuid).getInfos(_);
};