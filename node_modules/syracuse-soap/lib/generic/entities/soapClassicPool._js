"use strict";

var globals = require('streamline/lib/globals');
var poolManager = require("syracuse-soap/lib/generic/poolManager");
var ClientPool = poolManager.ClientPool;

exports.entity = {
	$properties: {
		alias: {
			$title: "Alias",
			$isUnique: true,
			$isMandatory: true
		},
		maxSize: {
			$title: "Maximum size",
			$type: "integer",
			$isMandatory: true,
			$default: 0
		},
		initSize: {
			$title: "Initialization size",
			$type: "integer",
			$isMandatory: true,
			$default: 0
		},
		autoStart: {
			$title: "Auto start",
			$type: "boolean",
			$default: false
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true
		},
		localePref: {
			$title: "Locale",
			$type: "localePreference",
			$isMandatory: true
		},
		user: {
			$title: "User",
			$type: "user",
			$isMandatory: true
		}
	},
	$functions: {
		start: function(_) {
			try {
				var pool = poolManager.getPool(this.alias(_));
				if (!pool) pool = new ClientPool();
				pool.init(_, globals.context, this);
			} catch (e) {
				console.error(e.stack);
				throw e;
			}
		},
		getState: function(_) {
			var pool = poolManager.getPool(this.alias(_));
			if (!pool) throw new Error("Pool unavailable");

			var infos = pool.getInfo();
			var _diagnoses = [];
			if (infos) {
				Object.keys(infos).forEach(function(i) {
					_diagnoses.push({
						$severity: "info",
						$message: i + ": " + infos[i]
					});
				});
			} else {
				_diagnoses.push({
					$severity: "error",
					$message: "Can't get pool information"
				});
			}
			return _diagnoses;
		}
	},
	$services: {
		getState: {
			$method: "GET",
			$isMethod: true,
			$title: "Status",
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					instance.$diagnoses = instance.$diagnoses.concat(instance.getState(_));
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message,
						$stackTrace: e.safeStack
					});
				}
			}
		}
	},
	$events: {
		$afterSave: [

			function(_, instance, params) {
				instance.start(_);
			}
		]
	},
};