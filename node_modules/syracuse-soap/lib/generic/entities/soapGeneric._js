"use strict";

var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var forEachKey = helpers.object.forEachKey;
var fs = require('streamline-fs');
var fsp = require('path');

var getBaseUrl = function(_) {
	var ep = adminHelper.getCollaborationEndpoint(_);
	return globals.context.session.host + "/soap-generic/" + ep.application(_) + "/" + ep.contract(_) + "/" + ep.dataset(_);
};

var getWsdl = function(_, serviceName) {
	var wsdl = fs.readFile(fsp.join(__dirname, "../wsdl") + "/" + serviceName + ".wsdl", "utf8", _);
	return wsdl.replace("{baseUrl}", getBaseUrl(_));
};

exports.entity = {
	$titleTemplate: "SOAP Generic Web Services",
	$descriptionTemplate: "Name identifies a service",
	$valueTemplate: "{description}",
	$createActionTitle: "New Web Service",
	$listTitle: "List of SOAP Generic Web Services",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isUnique: true,
			$pattern: "^[A-Za-z_\\-][A-Za-z_\\-0-9]*$"
		},
		description: {
			$title: "Description",
			$isMandatory: true,
			$isLocalized: true
		},
		wsdl: {
			$isExcluded: true,
			$title: "WSDL",
			$isMandatory: true,
			$type: "binary",
			$storage: "db_file",
		},
		url: {
			$title: "Url",
			$format: "$url",
			$compute: function(_, instance) {
				return getBaseUrl(_) + "/" + instance.name(_) + "?wsdl";
			}
		}
	},
	$relations: {
		stub: {
			$title: "Stub",
			$type: "soapStub",
			$capabilities: "",
			$isChild: true
		}
	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					if (instance.$diagnoses.length === 0) {
						//console.log("Generate WSDL file for web service: "+instance.name(_));
						var wsdl = getWsdl(_, instance.name(_));

						var db = adminHelper.getCollaborationOrm(_);
						var entity = db.model.getEntity(_, "soapStub");
						var stub = entity.factory.createInstance(_, null, db);
						stub.name(_, instance.name(_));
						stub.url(_, null);
						stub.description(_, "Tester");
						stub.type(_, "generic-in");
						stub.isChild(_, true);

						var buf = new Buffer(wsdl, 'utf8').toString('binary');

						if (buf != null && buf.length !== 0) {

							var props = {
								length: buf.length,
								contentType: "application/xml",
								fileName: instance.name(_) + ".wsdl"
							};

							var store = instance.wsdl(_);
							var store2 = stub.wsdl(_);

							var stream = store.createWritableStream(_, props);
							stream.write(_, buf, "binary");
							stream.write(_, null);

							var stream2 = store2.createWritableStream(_, props);
							stream2.write(_, buf, "binary");
							stream2.write(_, null);

						}

						stub.$generate(_, stub, true);

						forEachKey(stub.$diagnoses, function(key, diag) {
							instance.$diagnoses.push({
								$severity: diag.severity,
								$message: diag.message
							});
						});
						instance.stub(_, stub);
					}

				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message
					});
				}
			}
		]

	},
	$uniqueConstraints: [
		["name"]
	]
};