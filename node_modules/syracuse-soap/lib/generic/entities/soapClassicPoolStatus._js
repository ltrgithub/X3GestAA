"use strict";

var os = require('os');
var globals = require('streamline/lib/globals');
var poolManager = require("syracuse-soap/lib/generic/poolManager");
var nannyHelper = require("syracuse-soap/lib/generic/nannyHelper");
var lbMode = (process.argv[2] && (process.argv[2].substr(0, 1) === "W" || process.argv[2].substr(0, 1) === "N"));

exports.statusEntity = {
	$titleTemplate: "Pool status: {alias}",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		alias: {
			$title: "Alias",
			$isReadOnly: true,
		},
	},
	$relations: {
		infos: {
			$title: "Information",
			$type: "soapClassicPoolInfos",
			$capabilities: "",
			$isReadOnly: true,
			$isChild: true
		}
	},
	$init: function(_, instance, context) {
		function addInfosLine(_, port, infos) {
			var infosLine = instance.infos(_).add(_);
			infosLine.port(_, port);
			infosLine.maxSize(_, infos.maxSize);
			infosLine.autoStart(_, infos.autoStart);
			infosLine.initSize(_, infos.initSize);
			infosLine.created(_, infos.created);
			infosLine.available(_, infos.available > 0 ? infos.available : 0);
		}
		var uuid = context && context.parameters && context.parameters.uuid;
		var alias = context && context.parameters && context.parameters.alias;
		var result;
		if (lbMode) {
			if (uuid) {
				result = nannyHelper._propagate(_, "POST", "getInfos", {
					uuid: uuid
				});
			} else {
				throw new Error("No pool uuid provided");
			}
		} else {
			var pool = poolManager.getPool(alias);
			if (!pool) throw new Error("Pool '" + alias + "' is not available");
			result = {};
			result[context.request.connection.localPort] = pool.getInfo();
		}

		instance.alias(_, alias);
		Object.keys(result).forEach_(_, function(_, key) {
			addInfosLine(_, key, result[key]);
		});
	}
};

exports.infoEntity = {
	$titleTemplate: "Pool infos: {alias}",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		host: {
			$title: "Host",
			$isReadOnly: true,
			$compute: function(_, instance) {
				return os.hostname();
			}
		},
		port: {
			$title: "Port",
			$isReadOnly: true
		},
		maxSize: {
			$title: "Maximum size",
			$isReadOnly: true,
			$type: "integer"
		},
		autoStart: {
			$title: "Auto start",
			$isReadOnly: true,
			$type: "boolean"
		},
		initSize: {
			$title: "Initialization size",
			$isReadOnly: true,
			$type: "integer"
		},
		created: {
			$title: "Nb clients created",
			$isReadOnly: true,
			$type: "integer"
		},
		available: {
			$title: "Nb clients available",
			$isReadOnly: true,
			$type: "integer"
		},
	}
};