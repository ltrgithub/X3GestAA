"use strict";

var os = require('os');
var globals = require('streamline-runtime').globals;
var CvgClientWS = require("syracuse-x3/lib/clients/soap/CvgClientWS").CvgClientWS;
var poolManager = require('../poolManager');
var nannyHelper = require('../nannyHelper');
var lbMode = (process.argv[2] && (process.argv[2].substr(0, 1) === "W" || process.argv[2].substr(0, 1) === "N"));
var multiTenant;

exports.statusEntity = {
	$titleTemplate: "Pool status: {alias}",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		alias: {
			$title: "Alias",
			$isReadOnly: true,
		},
		autoStartDisabled: {
			$title: "Auto start stopped manually",
			$description: "Must be start manually",
			$isReadOnly: true,
			$type: "boolean",
			// $isHidden: function(_, instance) {
			//     return !instance.autoStart(_);
			// },
		},
	},
	$relations: {
		infos: {
			$title: "Information",
			$type: "soapClassicPoolInfos",
			$capabilities: "",
			$isReadOnly: true,
			$isChild: true
		}
	},
	$init: function(_, instance, context) {
		function addInfosLine(_, port, infos) {
			var infosLine = instance.infos(_).add(_);
			var colon = port.lastIndexOf(":");
			if (colon >= 0) {
				var host = port.substr(0, colon);
				infosLine.host(_, host || os.hostname());
				infosLine.port(_, port.substr(colon + 1));
			} else {
				infosLine.port(_, os.hostname());
				infosLine.port(_, port);
			}
			infosLine.maxSize(_, infos.maxSize);
			infosLine.autoStart(_, infos.autoStart || false);
			infosLine.autoStartDisabled(_, infos.autoStartDisabled || false);
			infosLine.initSize(_, infos.initSize);
			infosLine.created(_, infos.created > 0 ? infos.created : 0);
			infosLine.available(_, infos.available > 0 ? infos.available : 0);



			if (infos.channels) infos.channels.forEach_(_, function(_, c) {
				var infoChannels = infosLine.channels(_).add(_);
				if (c instanceof CvgClientWS) c = c.toJSON();
				//console.error("C: "+JSON.stringify(c,null,2));
				infoChannels.x3pid(_, c.pid);
				infoChannels.x3host(_, c.host);
				infoChannels.x3port(_, c.port);
				infoChannels.x3user(_, c.user);
				infoChannels.x3lang(_, c.lang);
				infoChannels.lastAccess(_, c.lastAccess);
				infoChannels.creationDate(_, c.creationDate);
				infoChannels.protocolVersion(_, c.protocolVersion);

			});

		}
		var uuid = context && context.parameters && context.parameters.uuid;
		var alias = context && context.parameters && context.parameters.alias;
		if (multiTenant === undefined) {
			var config = require('config');
			multiTenant = !!(config.hosting && config.hosting.multiTenant);
		}
		var result;
		if (lbMode) {
			if (uuid) {
				result = nannyHelper._propagate(_, instance._parent, "POST", "getInfos", {
					uuid: uuid
				});
				nannyHelper._parseDiagnoses(instance, result);
				if (typeof result === "object" && result.$severity) return;
			} else {
				throw new Error("No pool uuid provided");
			}
		} else {
			var pool = poolManager.getPool(alias);
			if (!pool) {
				if (!multiTenant) throw new Error("Pool '" + alias + "' is not available");
			} else {
				result = {};
				result[context.request.connection.localPort] = pool.getInfo();
			}
		}

		instance.alias(_, alias);
		var content = false;
		if (result) Object.keys(result).forEach_(_, function(_, key) {
			content = true;
			addInfosLine(_, key, result[key]);
		});
		if (!content && multiTenant) {
			instance.$addDiagnose("info", "Pool " + alias + " not yet started anywhere");
		}
		// if (!instance.$diagnoses || instance.$diagnoses.length === 0)
		//	instance.$addDiagnose("info", "Test");
	}
};

exports.infoEntity = {
	$titleTemplate: "Pool infos: {alias}",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		host: {
			$title: "Host",
			$isReadOnly: true
		},
		port: {
			$title: "Port",
			$isReadOnly: true
		},
		maxSize: {
			$title: "Maximum size",
			$isReadOnly: true,
			$type: "integer"
		},
		autoStart: {
			$title: "Auto start",
			$isReadOnly: true,
			$type: "boolean"
		},
		autoStartDisabled: {
			$title: "Auto start autoStartDisabled",
			$isReadOnly: true,
			$type: "boolean"
		},
		initSize: {
			$title: "Initialization size",
			$isReadOnly: true,
			$type: "integer"
		},
		created: {
			$title: "Nb clients created",
			$isReadOnly: true,
			$type: "integer"
		},
		available: {
			$title: "Nb clients available",
			$isReadOnly: true,
			$type: "integer"
		},
	},
	$relations: {
		channels: {
			$title: "Channels",
			$type: "soapClassicPoolChannels",
			$isReadOnly: true,
			$isChild: true,
			$inv: "soapClassicPoolInfos",
			$capabilities: "sort"
		}
	},
};

exports.channelEntity = {
	$titleTemplate: "Channels",
	$valueTemplate: "",
	$isPersistent: false,
	$lockType: "noLock",
	$canDelete: false,
	$canCreate: false,
	$canEdit: false,
	$capabilities: "",
	$properties: {
		x3pid: {
			$title: "X3Pid",
			$displayLength: 5
		},
		x3host: {
			$title: "X3Host"
		},
		x3port: {
			$title: "X3Port",
			$type: "integer"
		},
		x3user: {
			$title: "x3User",
			$displayLength: 6
		},
		x3lang: {
			$title: "x3Lang",
			$displayLength: 5
		},
		lastAccess: {
			$title: "Last access",
		},
		creationDate: {
			$title: "Creation date",
		},
		protocolVersion: {
			$title: "Protocol Version"
		}
	},
};