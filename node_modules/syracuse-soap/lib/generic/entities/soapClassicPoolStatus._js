"use strict";

var poolManager = require("syracuse-soap/lib/generic/poolManager");

exports.entity = {
	$titleTemplate: "Pool status: {alias}",
	$valueTemplate: "",
	$isPersistent: false,
	$canSave: false,
	$capabilities: "",
	$properties: {
		alias: {
			$title: "Alias",
			$isReadOnly: true,
		},
		maxSize: {
			$title: "Maximum size",
			$isReadOnly: true,
			$type: "integer"
		},
		autoStart: {
			$title: "Auto start",
			$isReadOnly: true,
			$type: "boolean"
		},
		initSize: {
			$title: "Initialization size",
			$isReadOnly: true,
			$type: "integer"
		},
		created: {
			$title: "Nb clients created",
			$isReadOnly: true,
			$type: "integer"
		},
		available: {
			$title: "Nb clients available",
			$isReadOnly: true,
			$type: "integer"
		},
	},
	$relations: {

	},
	$init: function(_, instance, context) {
		var alias = context && context.parameters && context.parameters.poolAlias;
		if (alias) {
			var pool = poolManager.getPool(alias);
			if (!pool) throw new Error("Pool not initialized");

			var infos = pool.getInfo();
			instance.alias(_, infos.alias);
			instance.maxSize(_, infos.maxSize);
			instance.autoStart(_, infos.autoStart);
			instance.initSize(_, infos.initSize);
			instance.created(_, infos.created);
			// Do not show -1 when consumer is waiting for a client
			instance.available(_, infos.available > 0 ? infos.available : 0);
		} else {
			throw new Error("No alias provided");
		}
	}
};