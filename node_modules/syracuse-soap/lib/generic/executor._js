"use strict";

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var cliManager = require("syracuse-soap/lib/generic/clientManager");
var ClientManager = cliManager.ClientManager;
var tracer = require("syracuse-trace/lib/helper").getTracer("soap-generic.request");

var callMap = {
	CAdxWebServiceXmlCC: {
		"run": function(action, params) {
			return {
				name: params.publicName,
				flow: params.inputXml,
				action: action
			};
		},
		"save": function(action, params) {
			return {
				name: params.publicName,
				flow: params.objectXml,
				action: action
			};
		},
		"delete": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				action: action
			};
		},
		"read": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				action: action
			};
		},
		"query": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				nb: params.listSize,
				action: action
			};
		},
		"getDescription": function(action, params) {
			return {
				name: params.publicName,
				action: action,
			};
		},
		"modify": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				flow: params.objectXml,
				action: action
			};
		},
		"actionObject": function(action, params) {
			return {
				name: params.publicName,
				flow: params.objectXml,
				action: params.actionCode
			};
		},
		"actionObjectKeys": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				action: params.actionCode
			};
		},
		"insertLines": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				tab: params.blocKey,
				par: params.lineKey,
				flow: params.lineXml,
				action: action
			};
		},
		"deleteLines": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				tab: params.blocKey,
				par: params.lineKeys,
				action: action
			};
		}
	}
};

// Mapping between operations and actions
var actionMap = {
	run: "EXEC",
	save: "CREATE",
	delete: "DELETE",
	read: "READ",
	query: "LIST",
	getDescription: "GETDESCR",
	modify: "MODIFY",
	actionObject: null, // specific
	actionObjectKeys: null, // specific
	getDataXmlSchema: "GETSCHEMA",
	insertLines: "INSLIG",
	deleteLines: "SUPLIG"
};

var AckcallExecutor = helpers.defineClass(function(serviceName) {
	this.serviceName = serviceName;

}, null, {
	_setSessionContext: function(_, callContext, context) {
		var up = context.getUserProfile(_);
		if (callContext) {
			var sessionContext = {};
			// locale
			if (callContext.codeLang) {
				var x3lang = callContext.codeLang;
				var iso = locale.defaultIso(x3lang);
				if (!iso) throw new Error(locale.format(module, "langIncorrect", x3lang));
				if (iso.length === 2) iso = locale.longIso(iso);
				locale.setCurrent(_, iso);
				if (!sessionContext.localePref || sessionContext.localePref.code(_) !== iso) {
					var codeIso = iso.substring(0, 3) + iso.substring(3).toUpperCase();
					tracer.info && tracer.info("Use language: " + codeIso);
					var db = adminHelper.getCollaborationOrm(_);
					sessionContext.localePref = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
						jsonWhere: {
							code: codeIso
						}
					})[0];
				}
			} else {
				sessionContext.localePref = up.selectedLocale();
			}
			sessionContext.x3Lang = sessionContext.localePref.code(_);

			// endpoint
			if (!callContext.poolAlias) throw new Error(locale.format(module, "poolAliasMissing"));
			var epName = callContext.poolAlias;

			if (!sessionContext.endpoint || sessionContext.endpoint.dataset(_) !== epName) {
				sessionContext.endpoint = adminHelper.getEndpoint(_, {
					dataset: epName
				});
				if (!sessionContext.endpoint) throw new Error(locale.format(module, "noEndpointMatch", epName));
				sessionContext.dataset = sessionContext.endpoint.dataset(_);
			}

			// user
			if (!sessionContext.user || sessionContext.user.login(_) !== up.user(_).login(_)) {
				var user = up.user(_);
				sessionContext.user = user;
				sessionContext.x3User = user.getEndpointLogin(_, sessionContext.endpoint.$uuid);
			}
			return sessionContext;
		} else {
			throw new Error(locale.format(module, "noCallContext"));
		}
	},
	execute: function(_, context, method, params, wsCall) {
		// Check soap action
		var func = callMap[this.serviceName] && callMap[this.serviceName][method];
		if (!func) throw new Error(locale.format(module, "invalidSoapAction", method));

		// Set context (no more in session)
		wsCall.context = this._setSessionContext(_, params.callContext, context);

		// example of request config
		//adxwss.trace.on=on&adxwss.trace.size16384&adonix.trace.on=on&adonix.trace.level=3&adonix.trace.size=8&adxwss.optreturn=XML

		var options = {};
		if (params.callContext && params.callContext.requestConfig) {
			options.requestConfig = {};
			if (params.callContext.requestConfig.indexOf('&') !== -1) {
				var parts = params.callContext.requestConfig.split('&');
				parts.forEach(function(p) {
					if (p.indexOf('=')) {
						var splited = p.split('=');
						options.requestConfig[splited[0]] = splited[1];
					}
				});
			} else {
				if (params.callContext.requestConfig.indexOf('=')) {
					var splited = params.callContext.requestConfig.split('=');
					options.requestConfig[splited[0]] = splited[1];
				}
			}
			tracer.info && tracer.info("Request config parameters: " + JSON.stringify(options.requestConfig, null, 2));
		}



		// transform parameters
		var transformed = func(actionMap[method], params);

		tracer.debug && tracer.debug("\n");
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("#    Execute Ackcall for method : " + method);
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("# Parameters : " + JSON.stringify(transformed, null, 2));

		// Select a client
		wsCall.techInfo.poolDistribDuration.start();


		var clientManager = cliManager.getManager(wsCall.context.dataset);
		if (!clientManager) {
			clientManager = new ClientManager({
				dataset: wsCall.context.dataset,
				poolSize: 50
			});
		}

		var wsClient = clientManager.alloc(_, context, wsCall);
		wsCall.techInfo.poolDistribDuration.stop();

		wsCall.init(transformed, options.requestConfig);
		// Execute ackcall
		wsClient.execWs(_, context, wsCall);
	},
});

exports.create = function(serviceName) {
	console.error("Create executor for service: " + serviceName);
	return new AckcallExecutor(serviceName);
};