"use strict";

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var forEachKey = helpers.object.forEachKey;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var stubUtils = require("syracuse-soap/lib/client/stubUtils");
var ClientManager = require("syracuse-soap/lib/generic/clientManager").ClientManager;
var tracer = require("syracuse-trace/lib/helper").getTracer("soap-generic.request");

var cliManager = new ClientManager();

//			response.runReturn = {
//				messages: ["test1", "test2", "test3"],
//				resultXml: "",
//				status: 1,
//				technicalInfos: {
//					busy: false,
//					changeLanguage: false,
//					changeUserId: false,
//					flushAdx: false,
//					loadWebsDuration: 15,
//					nbDistributionCycle: 1,
//					poolDistribDuration: 4,
//					poolEntryIdx: 0,
//					poolExecDuration: 150,
//					poolRequestDuration: 158.26,
//					poolWaitDuration: 3,
//					processReport: null,
//					processReportSize: 0,
//					reloadWebs: false,
//					resumitAfterDBOpen: false,
//					rowInDistribStack: 1,
//					totalDuration: 355,
//					traceRequest: null,
//					traceRequestSize: 0
//				}
//			};




var callMap = {
	CAdxWebServiceXmlCC: {
		"run": function(action, params) {
			return {
				name: params.publicName,
				flow: params.inputXml,
				action: action
			};
		},
		"save": function(action, params) {
			return {
				name: params.publicName,
				flow: params.objectXml,
				action: action
			};
		},
		"delete": function(action, params) {

		},
		"read": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				action: action
			};
		},
		"query": function(action, params) {
			return {
				name: params.publicName,
				wkeys: params.objectKeys,
				action: action
			};
		},
		"getDescription": function(action, params) {

		},
		"modify": function(action, params) {

		},
		"actionObject": function(action, params) {

		},
		"actionObjectKeys": function(action, params) {

		},
		"insertLines": function(action, params) {

		},
		"deleteLines": function(action, params) {

		}
	}
};



var actionMap = {
	run: "EXEC",
	save: "CREATE",
	delete: "DELETE",
	read: "READ",
	query: "LIST",
	getDescription: "GETDESCR",
	modify: "MODIFY",
	actionObject: "",
	actionObjectKeys: "",
	getDataXmlSchema: "GETSCHEMA",
	insertLines: "INSLIG",
	deleteLines: "SUPLIG"
};


function validateProperties(properties, params) {
	function validateProperty(_property, _param) {
		if (_property.$isMandatory && _param === undefined) {
			throw new Error(locale.format(module, "mandatoryProperty", _property.$title));
		}
		if (["application/x-object", "application/x-array"].indexOf(_property.$type) !== -1) {
			//tracer.warn && tracer.warn(JSON.stringify(_property,null,2));
			validateProperties(_property.$item.$properties, _param);
		}
	}
	forEachKey(properties, function(key, value) {
		validateProperty(value, params[key]);
	});
}

var AckcallExecutor = helpers.defineClass(function(serviceName) {
	this.serviceName = serviceName;
	this.reqProto = {};
}, null, {
	_setSessionContext: function(_, callContext, context) {
		var sessionContext = context.httpSession.genericWsCtx = context.httpSession.genericWsCtx || {};
		var up = context.getUserProfile(_);

		if (callContext) {
			// locale
			if (callContext.codeLang) {
				var x3lang = callContext.codeLang;
				var iso = locale.defaultIso(x3lang);
				if (!iso) throw new Error(locale.format, "langIncorrect", x3lang);
				if (iso.length === 2) iso = locale.longIso(iso);
				locale.setCurrent(_, iso);
				if (!sessionContext.localePref || sessionContext.localePref.code(_) !== iso) {
					var codeIso = iso.substring(0, 3) + iso.substring(3).toUpperCase();
					tracer.info && tracer.info("Use language: " + codeIso);
					var db = adminHelper.getCollaborationOrm(_);
					sessionContext.localePref = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
						jsonWhere: {
							code: codeIso
						}
					})[0];
				}
			} else {
				sessionContext.localePref = up.selectedLocale();
			}
			sessionContext.x3Lang = sessionContext.localePref.code(_);

			// endpoint
			if (!callContext.poolAlias) throw new Error(locale.format(module, "poolAliasMissing"));
			var epName = callContext.poolAlias;

			if (!sessionContext.endpoint || sessionContext.endpoint.dataset(_) !== epName) {
				sessionContext.endpoint = adminHelper.getEndpoint(_, {
					dataset: epName
				});
				if (!sessionContext.endpoint) throw new Error(locale.format(module, "noEndpointMatch", epName));
				sessionContext.dataset = sessionContext.endpoint.dataset(_);
			}

			// user
			if (!sessionContext.user || sessionContext.user.login(_) !== up.user(_).login(_)) {
				var user = up.user(_);
				sessionContext.user = user;
				sessionContext.x3User = user.getEndpointLogin(_, sessionContext.endpoint.$uuid);
			}
		} else {
			throw new Error(locale.format(module, "noCallContext"));
		}
	},
	execute: function(_, context, method, params) {
		tracer.debug && tracer.debug("\n");
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("#    Execute Ackcall for method : " + method);
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("# Parameters : " + JSON.stringify(params, null, 2));


		// Check soap action
		var func = callMap[this.serviceName] && callMap[this.serviceName][method];
		if (!func) throw new Error(locale.format(module, "invalidSoapAction", method));

		// Set context (in session)
		this._setSessionContext(_, params.callContext, context);

		// Reuse or store request prototype in Executor instance
		this.reqProto[method] = this.reqProto[method] || stubUtils.getOperationPrototype(_, this.serviceName, this.serviceName, method, "$request", context, "generic-in");
		if (!this.reqProto[method]) throw new Error(locale.format(module, "errGetProto", method, "request"));

		// Validate received parameters with expected properties
		var requestProperties = this.reqProto[method].$properties.body.$item.$properties[method].$item.$properties;
		if (!requestProperties) throw new Error(locale.format(module, "reqPropsNotFound", this.reqProto[method].$descriptor));
		validateProperties(requestProperties, params);

		// Not necessary to send callContext to CvgClientWS
		delete params.callContext;

		var response = {
			$: {
				"xmlns": "TODO"
			}
		};

		var transformed = func(actionMap[method], params, response);

		var wsClient = cliManager.selectClient(context);
		if (!wsClient) wsClient = cliManager.createClient(_, context);

		wsClient.execWS(_, context, transformed);
		return response;
	},
});

exports.create = function(serviceName) {
	return new AckcallExecutor(serviceName);
};