"use strict";

var helpers = require("syracuse-core/lib/helpers");
var CvgCacheManager = require('syracuse-x3/lib/cvgCacheManager').CvgCacheManager;
var soapHelper = require('../server/soapHelper');
var soapTracer = require('../common/soapTracer');
var datetime = require('syracuse-core/lib/types/datetime');
var locale = require("syracuse-core/lib/locale");

var tracer = soapTracer.create("request");

var callMap = {
	CAdxWebServiceXmlCC: {
		"run": function(params, response) {
			response.runResponse = {
				runReturn: {
					messages: {},
					resultXml: "",
					status: 1,
					technicalInfos: {
						busy: false,
						changeLanguage: false,
						changeUserId: false,
						flushAdx: false,
						loadWebsDuration: 15,
						nbDistributionCycle: 1,
						poolDistribDuration: 4,
						poolEntryIdx: 0,
						poolExecDuration: 150,
						poolRequestDuration: 158,
						poolWaitDuration: 3,
						processReport: null,
						processReportSize: 0,
						reloadWebs: false,
						resumitAfterDBOpen: false,
						rowInDistribStack: 1,
						totalDuration: 355,
						traceRequest: null,
						traceRequestSize: 0
					}
				}
			};
		},
		"save": function(params, response) {

		},
		"delete": function(params, response) {

		},
		"read": function(params, response) {

		},
		"query": function(params, response) {

		},
		"getDescription": function(params, response) {

		},
		"modify": function(params, response) {

		},
		"actionObject": function(params, response) {

		},
		"actionObjectKeys": function(params, response) {

		},
		"insertLines": function(params, response) {

		},
		"deleteLines": function(params, response) {

		}
	}
};







var AckcallExecutor = helpers.defineClass(function(_, context, serviceName) {

	this.context = context;

	this.endpoint = context.endpoint;

	this.serviceName = serviceName;

}, null, {
	execute: function(_, method, params) {


		tracer.traceSection("Execute REST Request for method : " + method, "Parameters=\n" + JSON.stringify(params, null, 2));
		var self = this;
		var namespace = this.representation + "." + this.dataset + "." + this.contract + "." + this.application;
		var schema;

		var response = {
			$: {
				"xmlns": namespace
			}
		};

		var func = callMap[this.serviceName] && callMap[this.serviceName][method];
		if (!func) throw new Error(locale.format(module, "invalidSoapAction", method));




		func(params, response);
		return response;
	},
});

exports.create = function(_, context, serviceName) {
	return new AckcallExecutor(_, context, serviceName);
};