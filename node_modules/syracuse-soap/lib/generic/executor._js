"use strict";

var helpers = require("syracuse-core/lib/helpers");
var CvgCacheManager = require('syracuse-x3/lib/cvgCacheManager').CvgCacheManager;
var soapHelper = require('../server/soapHelper');
var soapTracer = require('../common/soapTracer');
var datetime = require('syracuse-core/lib/types/datetime');
var locale = require("syracuse-core/lib/locale");
var forEachKey = helpers.object.forEachKey;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var CvgClientWS = require('syracuse-x3/lib/clients/soap/CvgClientWS').CvgClientWS;

var tracer = require("syracuse-trace/lib/helper").getTracer("soap-generic.request");

// TODO : Handle pool of clients - funnel and implementation will be here
function getWsClient(_, endpoint, user, lang, localePref, context) {
	return new CvgClientWS(_, endpoint, user, lang, localePref, context);
}

var callMap = {
	CAdxWebServiceXmlCC: {
		"run": function(action, params, response) {

			//			response.runReturn = {
			//				messages: ["test1", "test2", "test3"],
			//				resultXml: "",
			//				status: 1,
			//				technicalInfos: {
			//					busy: false,
			//					changeLanguage: false,
			//					changeUserId: false,
			//					flushAdx: false,
			//					loadWebsDuration: 15,
			//					nbDistributionCycle: 1,
			//					poolDistribDuration: 4,
			//					poolEntryIdx: 0,
			//					poolExecDuration: 150,
			//					poolRequestDuration: 158.26,
			//					poolWaitDuration: 3,
			//					processReport: null,
			//					processReportSize: 0,
			//					reloadWebs: false,
			//					resumitAfterDBOpen: false,
			//					rowInDistribStack: 1,
			//					totalDuration: 355,
			//					traceRequest: null,
			//					traceRequestSize: 0
			//				}
			//			};

			return {
				name: params.publicName,
				flow: params.inputXml || params.inputXml.$cdata,
				action: action
			};
		},
		"save": function(action, params, response) {

		},
		"delete": function(action, params, response) {

		},
		"read": function(action, params, response) {

		},
		"query": function(action, params, response) {

		},
		"getDescription": function(action, params, response) {

		},
		"modify": function(action, params, response) {

		},
		"actionObject": function(action, params, response) {

		},
		"actionObjectKeys": function(action, params, response) {

		},
		"insertLines": function(action, params, response) {

		},
		"deleteLines": function(action, params, response) {

		}
	}
};



var actionMap = {
	run: "EXEC",
	save: "CREATE",
	delete: "DELETE",
	read: "READ",
	query: "LIST",
	getDescription: "GETDESCR",
	modify: "MODIFY",
	actionObject: "",
	actionObjectKeys: "",
	getDataXmlSchema: "GETSCHEMA",
	insertLines: "INSLIG",
	deleteLines: "SUPLIG"
};

var AckcallExecutor = helpers.defineClass(function(_, context, serviceName) {

	this.context = context;



	this.serviceName = serviceName;

}, null, {
	_setCallContext: function(_, callContext) {
		var up = this.context.getUserProfile(_);
		this.user = up.user(_);
		if (callContext) {
			if (!callContext.poolAlias) throw new Error("poolAliasMissing#Endpoint name (poolAlias) is missing in call context");
			var epName = callContext.poolAlias;
			this.endpoint = adminHelper.getEndpoint(_, {
				dataset: epName
			});
			if (!this.endpoint) throw new Error("noEndpointMatch#No endpoint match to '" + epName + "'");
			if (callContext.codeLang) {
				var x3lang = callContext.codeLang;
				var iso = locale.defaultIso(x3lang);
				if (!iso) throw new Error("langIncorrect#Language '" + x3lang + "' not supported");
				this.lang = x3lang;
				if (iso.length === 2) iso = locale.longIso(iso);
				var db = adminHelper.getCollaborationOrm(_);
				this.localPref = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
					jsonWhere: {
						code: iso
					}
				})[0];
			} else {
				this.localePref = up.selectedLocale(_);
				this.lang = locale.x3Language(this.localePref.code(_));
			}
		}
	},
	execute: function(_, method, params) {
		tracer.debug && tracer.debug("\n");
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("#    Execute Ackcall for method : " + method);
		tracer.debug && tracer.debug("##################################################");
		tracer.debug && tracer.debug("Parameters=\n" + JSON.stringify(params, null, 2));
		var response = {
			$: {
				"xmlns": "TODO"
			}
		};

		var func = callMap[this.serviceName] && callMap[this.serviceName][method];
		if (!func) throw new Error(locale.format(module, "invalidSoapAction", method));

		this._setCallContext(_, params.callContext);
		delete params.callContext;

		var transformed = func(actionMap[method], params, response);

		var wsClient = getWsClient(_, this.endpoint, this.user, this.lang, this.localePref, this.context);
		wsClient.execWS(_, {
			user: this.user,
			lang: this.lang
		}, transformed);
		return response;
	},
});

exports.create = function(_, context, serviceName) {
	return new AckcallExecutor(_, context, serviceName);
};