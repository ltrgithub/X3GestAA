"use strict";
var helpers = require("syracuse-core/lib/helpers");
var CvgClientWS = require('syracuse-x3/lib/clients/soap/CvgClientWS').CvgClientWS;
var tracer = require("syracuse-trace/lib/helper").getTracer("soap-generic.request");

// CLIENTS WEIGHTS :
var W_CONNECTED = 4;
var W_USER = 2;
var W_LANG = 1;
//CvgWSClient are kept in memory here !!!
var clients = [];
//temporary hard coded
var maxWsCount = 10;


exports.selectClient = function(context) {
	function sameEndpoint(cli) {
		return cli.cliCfg.dataset === context.httpSession.genericWsCtx.dataset;
	}

	function sameUser(cli) {
		return cli.cliCfg.login === context.httpSession.genericWsCtx.user.login;
	}

	function sameLang(cli) {
		return cli.cliCfg.x3Lang === context.httpSession.genericWsCtx.x3Lang;
	}

	function computeWeight(cli) {
		var weight = 0;
		weight += cli.isConnected ? W_CONNECTED : 0;
		weight += sameUser(cli) ? W_USER : 0;
		weight += sameLang(cli) ? W_LANG : 0;
	}

	// filter map with same endpoint and free
	var filtered = clients.filter(function(cli) {
		return cli.isFree && sameEndpoint(cli);
	});

	if (filtered.length > 0) {
		var sorted = filtered.sort(function(a, b) {
			return computeWeight(a) - computeWeight(b);
		});
		if (sorted.length > 0) {
			sorted[0].isFree = false;
			tracer.info && tracer.info("Client reused: " + sorted[0].uuid);
			return sorted[0];
		}
	}
};

exports.createClient = function(_, context) {
	if (clients.length === maxWsCount - 1) throw new Error("Max clients reached");
	var newCli = new CvgClientWS(_, context);
	tracer.info && tracer.info("New client created: " + newCli.uuid);
	clients.push(newCli);
	newCli.isFree = false;
	return newCli;
};

exports.disconnect = function(uuid) {
	var idx = clients.findIndex(function(cli) {
		return cli.uuid === uuid;
	});
	if (idx !== -1) {
		tracer.info && tracer.info("Client destroyed: " + clients[idx].uuid);
		clients.splice(idx, 1);
	}
};