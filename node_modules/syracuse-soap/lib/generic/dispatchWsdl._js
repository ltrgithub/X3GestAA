"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var Context = require("../../../../src/sdata/sdataContext").Context;
var registry = require("../../../../src/sdata/sdataRegistry");
var dataModel = require("../../../../src/orm/dataModel");
var adminHelper = require("../../../../src/collaboration/helpers").AdminHelper;
var locale = require('streamline-locale');
var soapUtils = require('../server/soapUtils');
var globals = require('streamline-runtime').globals;
var nannyHelper = require("syracuse-soap/lib/generic/nannyHelper");
var mock = require('syracuse-load/lib/mock');
var fs = require('streamline-fs');
var fsp = require('path');
var soapGeneric = require("syracuse-soap/lib/generic/entities/soapGeneric");

function _replyWsdl(_, serviceName, context) {
	var ws = soapUtils.getSoapWebService(_, serviceName, context, "soapGeneric");
	if (ws) {
		var host = (context.secure ? "https" : "http") + "://" + (context.request.headers['x-forwarded-host'] || context.request.headers.host);
		var baseUrl = host + soapGeneric.getBaseUrl(_, true);
		var wsdl = fs.readFile(fsp.join(__dirname, "wsdl") + "/" + serviceName + ".wsdl", "utf8", _);
		var content = wsdl.replace("{baseUrl}", baseUrl);

		var header = {
			"content-type": "text/xml;charset=UTF-8",
			"content-length": Buffer.byteLength(content, "utf8")
		};
		context.response.writeHead(200, header);
		context.response.end(content, "utf8");

	} else {
		throw context.notFound(locale.format(module, "wsNotFound", serviceName));
	}
}

var _soapMap = {
	walk: function(_, context, name) {
		context.applicationName = name;
		context.application = registry.applications[name];
		//			if (!context.application && !helpers.stubsPath) throw context.notFound("application not found: " + name);
		return _dispatch(_, context, _applicationMap);
	},
};

//URL is http://host/soap-wsdl/app
var _applicationMap = {
	walk: function(_, context, name) {
		context.contractName = name;
		if (context.application) context.contract = context.application.contracts[name];
		// helpers.stubsPath is to be deprecated
		var stubsPath = ((globals.context.config || {}).system || {}).stubsPath || helpers.stubsPath;
		//
		var app = adminHelper.getApplication(_, context.applicationName, context.contractName);
		if (!app && !context.application && !stubsPath) throw context.notFound(locale.format(module, "applicationNotFound", context.applicationName, context.contractName));
		context.applicationRef = app;
		return _dispatch(_, context, (app && (app.protocol(_) !== "syracuse")) ? _x3ContractMap : _syracuseContractMap);
	},
};

//URL is http://host/soap-wsdl/app/contract
var _syracuseContractMap = {
	walk: function(_, context, name) {
		// allow stubs
		if (context.contract) {
			var ds = registry.getDataset(_, context.contract, name);
			if (!ds) throw context.notFound(locale.format(module, "datasetNotFound", name));
			context.dataset = name;
			context.model = dataModel.make(context.contract, context.dataset);
			context.db = dataModel.getOrm(_, context.model, ds);
			context.baseUrl = context.walked();
		}
		return _dispatch(_, context, _syracuseDatasetMap);
	},
};

var _x3ContractMap = {
	walk: function(_, context, name) {
		if (context.applicationRef) { // TEST to allow stubs
			// find the endpoint
			var ep = adminHelper.getEndpoint(_, {
				application: context.applicationName,
				contract: context.contractName,
				dataset: name
			});

			if (!ep) throw context.notFound(locale.format(module, "endpointNotFound", context.applicationName, context.contractName, name));
			context.baseUrl = context.walked();
			context.endpoint = ep;
			context.db = ep.getOrm(_);
		}
		return _dispatch(_, context, _x3DatasetMap);
	}
};

// URL is http://host/soap-wsdl/app/contract/dataset
// for syracuse endpoints
var _syracuseDatasetMap = {
	walk: function(_, context, name, id) {

		if (id) {
			throw context.badRequest(locale.format(module, "unexpectedId", id));
		} else {
			return _dispatch(_, context, _entityMap);
		}
	},
};

var _x3DatasetMap = {
	walk: function(_, context, name, id) {

		if (id) {
			throw context.badRequest(locale.format(module, "unexpectedId", id));
		} else {
			return _dispatch(_, context, _entityMap);
		}
	}
};

//URL is http://host/soap-wsdl/app/contract/dataset/entity (or deeper)
var _entityMap = {
	get: function(_, context) {
		var parts = context.request.url.split("?");
		var serviceName = parts[0].split("/")[5];
		var param = parts[1];
		if (param && param.toUpperCase() === 'WSDL') {
			_replyWsdl(_, serviceName, context);
		} else {
			context.reply(_, 404, locale.format(module, "unexpectedSegment", param));
		}
	},
};

function _parseSegment(segment) {
	var match = /^([^\/(]*)\('([^']*)'\)$/.exec(segment);
	return match ? {
		name: match[1],
		id: match[2]
	} : {
		name: segment
	};
}

function _dispatch(_, context, map) {

	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) return map[method](_, context);
		else throw context.badMethod(method);
	} else {
		var pair = _parseSegment(seg);
		if (pair.name[0] === '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](_, context, pair.id);
			}
		} else if (map.walk) {
			return map.walk(_, context, pair.name, pair.id);
		}
		throw context.badRequest(locale.format(module, "unexpectedSegment", seg));
	}
}

function _logRequest(_, context) {
	if (!context.request.headers["x-history-title"]) return;
	//
	var db = adminHelper.getCollaborationOrm(_);
	var h = db.model.getEntity(_, "navHistory").factory.createInstance(_, null, db);
	h.title(_, context.request.headers["x-history-title"]);
	h.agent(_, context.request.headers["x-history-agent"]);
	h.url(_, context.request.url);
	h.save(_);
}

function _doIt(_, context) {
	try {
		//console.error("URL: " + context.request.url);
		var protocol = context.walkUrl();
		if (protocol !== "soap-wsdl") throw new Error(locale.format(module, "badUrl", protocol));

		// fire and forget log call
		_logRequest(!_, context);

		_dispatch(_, context, _soapMap);
	} catch (ex) {
		console.error(ex.stack);
		if (ex.$httpStatus) {
			return context.reply(_, ex.$httpStatus, ex.message);
		} else if (ex.stack) {
			return context.reply(_, 500, ex.message);
		} else {
			return context.reply(_, 500, ex.toString());
		}
	}
}

var syracuse;
exports.dispatcher = function(config) {
	return function(_, request, response) {
		syracuse = syracuse || require('syracuse-main/lib/syracuse');
		if (syracuse.server instanceof mock.MockStreamServer && (request.fromNanny || request._request.fromNanny)) {
			return nannyHelper._process(_, request, response);
		}
		var context = new Context(request, response, config);
		request.context = context;
		try {
			_doIt(_, context);
		} catch (err) {
			helpers.log.exception(module, err);
			context.reply(_, 500, err.safeStack);
		}
	};
};