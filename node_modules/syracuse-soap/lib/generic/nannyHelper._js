"use strict";

var syracuse;
var globals = require("streamline/lib/globals");
var mock = require('syracuse-load/lib/mock');
var url = require('url');
var config = require('config');
var querystring = require('querystring');
var multiTenant = config.hosting && config.hosting.multiTenant;
var soapClassicPool = require('syracuse-soap/lib/generic/entities/soapClassicPool');

exports._process = function(_, request, response) {
	syracuse = syracuse || require('syracuse-main/lib/syracuse');
	if (syracuse.server instanceof mock.MockStreamServer && !request.fromNanny && !request._request.fromNanny) {
		response.writeHead("404", {});
		return response.end("Resource not found.");
	}
	var parsed = url.parse(request.url, true);
	var parts = parsed.pathname.split('/');
	var tenant = parsed.query.tenantId;
	if (multiTenant && tenant && !syracuse.initializedTenant(tenant)) {
		response.writeHead("200", {});
		console.log("Ignored");
		return response.end("Ignored");
	} else {
		globals.context.tenantId = tenant;
	}
	//console.log("TENANT " + globals.context.tenantId);
	var cmdName = parsed.pathname.split('/')[2];
	switch (cmdName) {
		case "update":
			soapClassicPool.updateExternal(_, parsed.query.uuid);
			response.end("OK");
			return;
		case "stop":
			soapClassicPool.stopExternal(_, parsed.query.uuid);
			response.end("OK");
			return;
		case "getInfos":
			var res = soapClassicPool.getInfosExternal(_, parsed.query.uuid);
			response.end(JSON.stringify(res));
			return;
		default:
			response.writeHead("404", {});
			return response.end("Nanny command not found.");
	}
	return;
};


var parsers = {
	getInfos: function(_, res) {
		var infos = [];
		var lines = res.split(/[\r\n]+/);
		lines.forEach(function(line) {
			if (line.charAt(0) === '{') {
				line = JSON.parse(line);
				var port = line.port;
				var message = line.message;
				if (message) {
					var info = JSON.parse(message);
					info.port = port;
					infos.push(info);
				}
			}
		});
		return infos;
	}
};


//propagation only when load balancer is available!
exports._propagate = function(_, method, action, parameters) {

	if (multiTenant) {
		parameters.tenantId = globals.context.tenantId;
		path += ((path.indexOf('?') >= 0 ? '&' : '?') + 'tenantId=' + globals.context.tenantId);
		console.log("Set tenant " + path);
	}
	var path = action + "?" + querystring.stringify(parameters);
	if ("mockServer" in config) {
		var options = {
			path: "/nannyCommand/notifyW/soap-wsdl/" + path,
			method: method,
			headers: {
				hostname: (globals.context.tenantId || ""),
				nannyCommand: true // important for being understand by dispatcher
			},
		};
		options.headers[mock.BALANCER_HEADER] = config.port;
		// console.log("Propagate: "+util.format(options))
		try {
			var res = config.mockServer.mockClient.simpleRequest(options, "", _);
			return parsers[action] ? parsers[action](_, res) : res;
		} catch (e) {
			console.error("Error " + e.stack);
			return e.stack;
		}
	}
};