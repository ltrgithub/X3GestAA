"use strict";
var helpers = require("syracuse-core/lib/helpers");
var forEachKey = helpers.object.forEachKey;

exports.TechInfo = helpers.defineClass(function() {

	this.busy = false;
	this.changeLanguage = false;
	this.changeUserId = false;
	this.flushAdx = false;
	this.loadWebsDuration = new Timer();
	this.nbDistributionCycle = -1;
	this.poolDistribDuration = new Timer();
	this.poolEntryIdx = -1;
	this.poolExecDuration = new Timer();
	this.poolRequestDuration = new Timer();
	this.poolWaitDuration = new Timer();
	this.processReport = new Report();
	this.processReportSize = -1;
	this.reloadWebs = false;
	this.resumitAfterDBOpen = false;
	this.rowInDistribStack = null;
	this.totalDuration = new Timer();
	this.traceRequest = null;
	this.traceRequestSize = -1;

}, null, {
	stringify: function() {
		var res = {};
		forEachKey(this, function(key, value) {
			if (value instanceof Timer) {
				res[key] = value.value;
			} else if (value instanceof Report) {
				res[key] = value.errors.length > 0 ? value.stringify() : null;
			} else {
				res[key] = value;
			}
		});
		return res;
	}
});

var Timer = helpers.defineClass(function() {
	this.value = -1;
	this.started = false;
	this.ended = false;
}, null, {
	start: function() {
		this.started = true;
		this.startTime = new Date().getTime();
	},
	stop: function() {
		var endTime = new Date().getTime();
		this.value = endTime - this.startTime;
		this.ended = true;
	}
});

var Report = helpers.defineClass(function() {
	this.errors = [];
	this.warnings = [];
}, null, {
	addError: function(message) {
		this.errors.push(message);
	},
	addWarn: function(message) {
		this.warnings.push(message);
	},
	stringify: function() {
		var str = "NbErrors[" + this.errors.length + "] NbWarnings[" + this.warnings.length + "]";
		this.errors.forEach(function(e) {
			str += "\r\n[err] " + e;
		});
		this.warnings.forEach(function(w) {
			str += "\r\n[warn] " + w;
		});
		return str;
	}
});