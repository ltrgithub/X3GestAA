"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var forEachKey = helpers.object.forEachKey;

exports.TechInfo = helpers.defineClass(function() {

	this.busy = false;
	this.changeLanguage = false;
	this.changeUserId = false;
	this.flushAdx = false;
	this.loadWebsDuration = new Timer();
	this.nbDistributionCycle = -1;
	this.poolDistribDuration = new Timer();
	this.poolEntryIdx = -1;
	this.poolExecDuration = new Timer();
	this.poolRequestDuration = new Timer();
	this.poolWaitDuration = new Timer();
	this.processReport = new Report();
	this.processReportSize = -1;
	this.reloadWebs = false;
	this.resumitAfterDBOpen = false;
	this.rowInDistribStack = null;
	this.totalDuration = new Timer();
	this.traceRequest = new TraceRequest();
	this.traceRequestSize = 0;

}, null, {
	stringify: function() {
		var self = this;
		var res = {};
		forEachKey(this, function(key, value) {
			if (value instanceof Timer) {
				res[key] = value.value;
			} else if (value instanceof Report) {
				res[key] = value.errors.length > 0 || value.warnings.length > 0 ? value.stringify() : null;
			} else if (value instanceof TraceRequest) {
				res[key] = {
					$cdata: value.lines.length > 0 ? value.stringify() : null
				};
			} else if (key === "traceRequestSize" && self.traceRequest.str != null) {
				res[key] = self.traceRequest.str && self.traceRequest.str.length > 0 ? new Buffer(self.traceRequest.str, "utf8").length : 0;
			} else {
				res[key] = value;
			}
		});
		return res;
	}
});

var Timer = helpers.defineClass(function() {
	this.value = -1;
	this.started = false;
}, null, {
	start: function() {
		this.started = true;
		this.startTime = new Date().getTime();
	},
	stop: function() {
		if (!this.started) return;
		this.started = false;
		var endTime = new Date().getTime();
		this.value = endTime - this.startTime + (this.value === -1 ? 0 : this.value);
	}
});

var Report = helpers.defineClass(function() {
	this.errors = [];
	this.warnings = [];
}, null, {
	addError: function(message) {
		this.errors.push(message);
	},
	addWarn: function(message) {
		this.warnings.push(message);
	},
	stringify: function() {
		var str = "NbErrors[" + this.errors.length + "] NbWarnings[" + this.warnings.length + "]";
		this.errors.forEach(function(e) {
			str += "\r\n[err] " + e;
		});
		this.warnings.forEach(function(w) {
			str += "\r\n[warn] " + w;
		});
		return {
			$cdata: str
		};
	}
});

var TraceRequest = helpers.defineClass(function() {
	this.lines = [];

}, null, {
	init: function(startTime) {
		this.startTime = startTime;


	},
	getTime: function() {
		return ("000000" + (new Date().getTime() - this.startTime)).slice(-6);
	},
	addLine: function(txt) {
		this.lines.push({
			time: this.getTime(),
			txt: txt
		});
	},
	stringify: function() {
		var self = this;
		if (this.lines.length > 0) {
			this.str = this.getTime() + " OpenTrace ----------------------------------------------------------";
			this.str += this.getTime() + " DateTime : " + new Date();
		}
		this.lines.forEach(function(l) {
			self.str += "\r\n" + l.time + " " + l.txt;
		});
		if (this.str) this.str += this.getTime() + "\r\n CloseTrace ----------------------------------------------------------";
		return this.str;
	}
});