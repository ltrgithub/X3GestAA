"use strict";
var check = require("syracuse-license/lib/check");
var config = require('config');
var multiTenant = (config.hosting && config.hosting.multiTenant);
var globals = require('streamline/lib/globals');
var adminHelpers = require('syracuse-collaboration/lib/helpers');
var key = require('os').hostname() + ":" + config.port;

// in single tenant mode:
// - counter
// - object with all changes
// - parameters object
var data = {};

exports.step = function(_, length, poolMetadata) {
	return 0;
};

/*
// return values: 0 OK, >0: slow down factor, -1: prohibit use
exports.step = function(_, length, poolMetadata) {
	var d = data;
	if (multiTenant) {
		var tenantId = globals.context.tenantId;
		if (tenantId) d = d[tenantId];
		d = d || {};
	}
//	Metadata: {
//	  "x3ServerHost": "aws-x3-indv7",
//	  "x3ServerPort": 17100,
//	  "x3Solution": "X3V7",
//	  "x3Folder": "X3TESTV7",
//	  "locale": "en-US",
//	  "userName": "admin",
//	  "product": {
//	    "code": "1",
//	    "version": "7"
//	  }
//}
	var now = new Date();
	var timeString = now.toISOString()
	if (!d.parameters) {
		if (poolMetadata && poolMetadata.product) {
			d.parameters = check.getLicenseParameters(_, poolMetadata.product.code);
			d.code = poolMetadata.product.code;
			d.licenseStart = timeString;
			d.size = (parameters.WS_SIZE_LIMIT || 1) *= (1<<30);
			// WS_SIZE_LIMIT (in GB)
			// WS_PERIOD (a string: DAY, MONTH or YEAR).
			// WS_GRACE_SLOWDOWN (slowdown factor when limit is exceeded, 5 for 5 times slower)
			// WS_GRACE_LIMIT (as a percentage that we add to WS_SIZE_LIMIT)
		} else {
			throw new Error("No product code");
		}
		switch(d.parameters.WS_PERIOD)
		{
		case 'DAY':
			var timeString0 = timeString.substr(0, 10);
			break;
		case 'MONTH':
			var timeString0 = timeString.substr(0, 7);
			break;
		case 'YEAR':
			var timeString0 = timeString.substr(0, 4);
			break;
		default:
			throw new Error("Illegal period: "+d.parameters.WS_PERIOD);
		}
		d.counter = d.counter || 0;
		d.total = d.total || 0;
		d.timeString = d.timeString || timeString0;
		checkObject(_, d, timeString);
		
	}
	if (timeString.indexOf(d.timeString) !== 0) {
		// new period
		d.counter = length;
		d.timeString = timeString.substr(0, d.timeString.length);
	} else
		d.counter += length;
	if ((d.counter+d.total) > d.size) {
		if (d.counter+d.total > d.size*(1+d.parameters.WS_GRACE_LIMIT/100))
			return -1; // over grace limit: forbid use
		else
			// slow down
			return d.parameters.WS_GRACE_SLOWDOWN
	}
	return 0;
};


var check = require('syracuse-license/lib/check');

var countData = {};

// tries to 
function checkObject(_, data, timestamp) {
	var options = {};
	var hash = "---"; // TODO
	var obj = data.object;
	var key0 = key+data.code;
	if (obj) {
		options = {
			data: {
				key0: data.counter+";"+timestamp+";"+hash 
			}
		}		
	}
	var cnt = adminHelper.getCollaborationOrm(_).getCounterValue(_, "ws", "cnt", options);
	for (var k in cnt.data) {
		var value = cnt.data[k] || "";
		var parts = value.split(";");
		data.total = 0;
		// format for the parts: value;timestamp;hash, e. g. vil-004674-nb:W0;25;2015-04-22T12:36:17.926Z
		if (parts[1]) {
			if (timeString === parts[2].substr(0, timeString.length)) {
				if (k === key0) {
					data.counter = +parts[1];
				} else {
					// consistency check
					if (obj) {
						if (value_old = obj[k]) {
							var parts_old = value.split(";");
							var oldStamp = parts_old[1];
							if (oldStamp < parts[1]) throw new Error("older timestamp");
							// counter is decreased. This may only happen if 
							// - old timestamp is before start time of current license (because there may have been different WS_PERIOD in old license)
							// - old timestamp is before start time of current period
							if (+parts_old[0] < +parts[0] && oldStamp >= data.licenseStart && oldStamp.indexOf(data.timeString) === 0)
								throw new Error("lower counter");														
						}
					}
					data.total += +parts[1];
				}
			}
		}
	}
}
	
*/
