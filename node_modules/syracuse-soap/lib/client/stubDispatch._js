"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var stubUtils = require('./stubUtils');
var stubRuntime = require('./stubRuntime');


var _soapStubsMap = {
	walk: function(_, context, name) {
		context.applicationName = name;
		context.application = registry.applications[name];
//			if (!context.application && !helpers.stubsPath) throw context.notFound("application not found: " + name);
		return _dispatch(_, context, _applicationMap);
	},
	get: function(_, context) {
		return context.replyDictionaryPage(_, registry.applications, "application");
	}
};

//URL is http://host/soap-stubs/app
var _applicationMap = {
	walk: function(_, context, name) {
		context.contractName = name;
		if (context.application)
			context.contract = context.application.contracts[name];
		//
		var app = adminHelper.getApplication(_, context.applicationName, context.contractName);
		if(!app && !context.application && !helpers.stubsPath) throw context.notFound(locale.format(module, "applicationNotFound", context.applicationName, context.contractName));
		context.applicationRef = app;
		if (app && (app.protocol(_) !== "syracuse"))
			throw new Error(locale.format(module, "onlySyracuse"));
		return _dispatch(_, context, _syracuseContractMap);
	},
	get: function(_, context) {
		return context.replyDictionaryPage(_, context.application.contracts, "contract");
	}
};



//URL is http://host/soap-stubs/app/contract
var _syracuseContractMap = {
	walk: function(_, context, name) {
		// allow stubs
		
		if(context.contract) {
			var ds = registry.getDataset(_, context.contract, name);
			if (!ds) throw context.notFound(locale.format(module, "datasetNotFound", name));
			context.dataset = name;
			context.model = dataModel.make(context.contract, context.dataset);
			context.db = dataModel.getOrm(_, context.model, ds);
			context.baseUrl = context.walked();
		}
		return _dispatch(_, context, _syracuseDatasetMap);
	},
	get: function(_, context) {
		return context.replyDictionaryPage(_, context.contract.datasets, "dataset");
	}
};




// URL is http://host/soap-stubs/app/contract/dataset
// for syracuse endpoints
var _syracuseDatasetMap = {
	walk: function(_, context, name, id) {

		if (id) {
			throw context.badRequest(locale.format(module, "unexpectedId", id));
		} else {
			return _dispatch(_, context, _stubMap);
		}
	},
	get: function(_, context) {
		var baseUrl = context.walked();
		return context.replyDictionaryPage(_, stubUtils.getSoapStubs(_), "soapStub", function(name, stub) {
			return {
				$url: baseUrl + "/" + stub.name,
				$key: stub.name,
				$descriptor: "Description: " + stub.description,
				name: stub.name
			};
		});
	}
};

// http://host/soap-stubs/app/contract/dataset/stub
var _stubMap = {
	walk: function(_, context, name, id) {

		if (id) {
			throw context.badRequest(locale.format(module, "unexpectedId", id));
		} else {
			return _dispatch(_, context, _portMap);
		}
	},
	get: function(_, context) {
		var baseUrl = context.walked();
		var parts = context.request.url.split("/");
		var stubName = parts[5];
		return context.replyDictionaryPage(_, stubUtils.getSoapStubPorts(_, stubName, context, true), "soapStub", function(name, stub) {
			return {
				$url: baseUrl + "/" + stub.name,
				$key: stub.name,
				$descriptor: "Description: " + stub.description,
				name: stub.name
			};
		});
	}
};

// http://host/soap-stubs/app/contract/dataset/stub/port
var _portMap = {
	walk: function(_, context, name, id) {

		if (id) {
			throw context.badRequest(locale.format(module, "unexpectedId", id));
		} else {
			return _dispatch(_, context, _operationMap);
		}
	},
	prototypes: function(_, context, id) {
		if (id) {
			context.prototypeId = id;
			return _dispatch(_, context, _prototypeMap);
		} else {
			return _dispatch(_, context, _prototypesMap);
		}
	},
	get: function(_, context) {
		var baseUrl = context.walked();
		var parts = context.request.url.split("/");
		var stubName = parts[5];
		var portName = parts[6];

		return context.replyDictionaryPage(_, stubUtils.getSoapStubPortOperations(_, stubName, portName, context, true), "soapStubPortOperations", function(name, operation) {
			return {
				$url: baseUrl + "/"+operation.name,
				$key: operation.name + "operation",
				$descriptor: operation.description,
				name: operation.name + "Operation"
			};			
		});
	}
};

// http://host/soap-stubs/app/contract/dataset/stub/port/operation
var _operationMap = {
	invoke: function(_, context){
		return _dispatch(_, context, _invokeMap);
	},
	get: function(_, context) {
		var baseUrl = context.walked();
		var parts = context.request.url.split("/");
		var stubName = parts[5];
		var portName = parts[6];
		var operationName = parts[7];
		var match = /(.*)[?!\?](.*)[?!\=]([^.]*).([^']*)$/.exec(operationName);
		if (match){
			operationName = match[1];
			var paramName = match[2];
			//var representation = match[3];
			var facet = match[4];
			
			if (paramName === "representation"){
				var proto = stubUtils.getOperationPrototype(_, stubName, portName, operationName, facet, context);
				proto.$links = {
					$invoke: {
						$title: "Invoke",
						$url: "{$baseUrl}/{$representation}/$invoke",
						$method: "POST"
					}
				};
				if(proto)
					context.reply(_, 200, {$prototype: proto});
				else
					context.reply(_, 404, locale.format(module, "prototypeNotFound", context.prototypeId));
			}else{
				throw context.badRequest(locale.format(module, "unexpectedParam", paramName));
			}
		}else{
			baseUrl = baseUrl.substring(0, baseUrl.length - operationName.length - 1);
			var protos = [{
				name: operationName,
				facet: "$request"
			},{
				name: operationName,
				facet: "$response"
			}];
			
			return context.replyDictionaryPage(_, protos, "soapStubPortOperations", function(name, proto) {
				return {
					$url: baseUrl + "/$prototypes('"+proto.name+"."+proto.facet+"')",
					$key: proto.name + "."+proto.facet,
					$descriptor: proto.name + " prototype "+proto.facet,
					name: proto.name + "Prototype."+proto.facet
				};		
			});
		}
	}
};

//http://host/soap-stubs/app/contract/dataset/stub/port/operation/$invoke
var _invokeMap = {
	post: function(_, context) {
		var parts = context.request.url.split("/");
		var stubName = parts[5];
		var portName = parts[6];
		var operationName = parts[7];
		
		var data = JSON.parse(context.request.readAll(_));
		var response = stubRuntime.execute(_, stubName, portName, operationName, data, context);
		//console.log("Request: "+JSON.stringify(resp,null,2));
		

		context.reply(_, 200, response);
	}
};

//http://host/soap-stubs/app/contract/dataset/stub/port/$prototypes
var _prototypesMap = {
	get: function(_, context) {
		throw context.niy("prototypes list");
	}
};

//http://host/soap-stubs/app/contract/dataset/stub/port/$prototypes('id')
var _prototypeMap = {
	get: function(_, context) {
		var parts = context.request.url.split("/");
		var stubName = parts[5];
		var portName = parts[6];

		var keys = context.prototypeId.split(".");
		var operationName = keys[0];
		var facet = keys[1];

		var proto = stubUtils.getOperationPrototype(_, stubName, portName, operationName, facet, context);
		
		if(proto)
			context.reply(_, 200, proto);
		else
			context.reply(_, 404, locale.format(module, "prototypeNotFound", context.prototypeId));
		
	}
};

function _parseSegment(segment) {
	var match = /^([^\/(]*)\('([^']*)'\)$/.exec(segment);
	return match ? {
		name: match[1],
		id: match[2]
	} : {
		name: segment
	};
}

function _dispatch(_, context, map) {

	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) return map[method](_, context);
		else throw context.badMethod(method);
	} else {
		var pair = _parseSegment(seg);
		if (pair.name[0] === '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](_, context, pair.id);
			}
		} else if (map.walk) {
			return map.walk(_, context, pair.name, pair.id);
		}
		throw context.badRequest(locale.format(module, "unexpectedSegment", seg));
	}
}

function _logRequest(_, context) {
	if(!context.request.headers["x-history-title"]) return;
	//
	var db = adminHelper.getCollaborationOrm(_);
	var h = db.model.getEntity("navHistory").factory.createInstance(_, null, db);
	h.title(_, context.request.headers["x-history-title"]);
	h.agent(_, context.request.headers["x-history-agent"]);
	h.url(_, context.request.url);
	h.save(_);
}

function _doIt(_, context) {
	try {
		var protocol = context.walkUrl();
		if (protocol !== "soap-stubs") throw new Error(locale.format(module, "badUrl", protocol));
		// fire and forget log call
		_logRequest(null, context);
		
		_dispatch(_, context, _soapStubsMap);
	} catch (ex) {
		if (ex.httpStatus) {
			return context.reply(_, ex.httpStatus, ex.message + "\n" + ex.stack);
		} else if (ex.stack) {
			console.error(ex.message + "\n" + ex.stack);
			return context.reply(_, 500, ex.message + "\n" + ex.stack);
		} else {
			console.error("CAUGHT NON ERROR: " + ex);
			return context.reply(_, 500, ex.toString());
		}
	}
}


exports.dispatcher = function(config) {
	// setup config here
//	_config = (config && config.x3fusion) || {};
//	tracer = config && config.x3fusion && config.x3fusion.tracer;
//	profiler = config && config.x3fusion && config.x3fusion.profiler;
	//
	return function(_, request, response) {
		var context = new Context(request, response, config);
		request.context = context;
		try {
			_doIt(_, context);
		} catch (err) {
			helpers.log.exception(module, err);
			context.reply(_, 500, err.message + "\n" + err.stack);
		}
	};
};