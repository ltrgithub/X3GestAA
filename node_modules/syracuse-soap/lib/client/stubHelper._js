"use strict";

var helpers = require('syracuse-core/lib/helpers');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var util = require("util");
var fs = require('fs');
var jsxml = require('jsxml');
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config;
var soapTracer = require('../common/soapTracer');





var tracer = soapTracer.create("client");

var stubHelper = helpers.defineClass(function(_, name, url, options) {

	this.name = name;
	this.url = url;
	this.options = options;

	
}, null, {
	getWsdl: function(_){
		var header = {};
		console.log("URL="+this.url);
		
		
		var options = {
			method: "GET",
			url: this.url,
			headers: header
		};
		if (helpers.proxy){
			options.proxy = "http://"+helpers.proxy.server+":"+helpers.proxy.port;
		}
			
		var request = streams.httpRequest(options);
		var response = request.end().response(_);
		var body = response.readAll(_);

		if (response.statusCode === 200 && body){
			return body;
		}else{
			throw new Error("An error has occured while retrieving WSDL.");
		}
	},
	getPrototype: function(_){
		var self = this;
		var wsdl = jsxml.parse(self.wsdl);
		self.description = wsdl && wsdl.definitions && wsdl.definitions.service && wsdl.definitions.service.documentation;
		
		
		var proto = {
			$type: "application/json",
			$prototype: "{$baseUrl}/$prototypes('{$representation}.$edit')",
			$baseType: "application/json;vnd.sage=syracuse",
			$description: self.description
		};
		
		
		
		
		
		
		
		
		
		
		return proto;

	}

});



exports.create = function(_, name, url, options){
	try{

		var stub = new stubHelper(_, name, url, options);
		stub.wsdl = stub.getWsdl(_);
		stub.prototype = stub.getPrototype(_);

		return stub;
	}catch(e){
		console.log("STACK="+e.stack);
		throw new Error(e.message);
	}
}