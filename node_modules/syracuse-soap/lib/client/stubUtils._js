"use strict";

var util = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var stubUtils = require('./stubUtils');

exports.getSoapStubs = function(_, context){
	var db = adminHelper.getCollaborationOrm(_);
	var model = db.model;
	var stubsEntity = db.getEntity(_, "soapStub");
	var instances = db.fetchInstances(_, stubsEntity);
	
	var insts = [];
	for (var i in instances){
		var instance = instances[i];
		var serializedInstance = instance.serializeInstance(_);
		insts.push(serializedInstance);
	}
	//console.log("INSTANCES="+JSON.stringify(insts, null,2));
	return insts;
}

exports.getSoapStub = function(_, stubName, context){
	var db = adminHelper.getCollaborationOrm(_);
	var model = db.model;
	var stubsEntity = model.getEntity("soapStub");
	if (!stubsEntity)
		throw context.notFound("Entity not found: soapStub");
	var filter = {sdataWhere: "name eq '"+stubName + "'"};
	var instances = db.fetchInstances(_, stubsEntity, filter);
	
	// Must not append
	if (instances.length > 1)
		throw context.notFound("Severals stubs found for name: " + stubName);

	if (instances.length !== 1)
		throw context.notFound("Stub not found: " + stubName);

	
	return db.fetchInstance(_, stubsEntity, instances[0].$key);
}


exports.getSoapStubPorts = function(_, stubName, context, serialized){
	
	var stub = stubUtils.getSoapStub(_, stubName, context);

	
	if (serialized){
		var ports = stub.ports(_).toArray(_);
		var insts = [];
		for (var i in ports){
			var instance = ports[i];
			var serializedInstance = instance.serializeInstance(_);
			insts.push(serializedInstance);
		}
		//console.log("INSTANCES="+JSON.stringify(insts, null,2));
		return insts;
	}else{
		return stub.ports(_).toArray(_);
	}
}

exports.getSoapStubPort = function(_, stubName, portName, context){
	
	var ports = stubUtils.getSoapStubPorts(_, stubName, context);
	
	for (var i in ports){
		if (ports[i].name(_) === portName)
			return ports[i];
	}

	throw context.notFound("Stub port not found: " + portName);

}

exports.getSoapStubPortOperations = function(_, stubName, portName, context, serialized){
	
	var port = stubUtils.getSoapStubPort(_, stubName, portName, context);

	if (serialized){
		var operations = port.operations(_).toArray(_);
		var insts = [];
		for (var i in operations){
			var instance = operations[i];
			var serializedInstance = instance.serializeInstance(_);
			insts.push(serializedInstance);
		}
		//console.log("INSTANCES="+JSON.stringify(insts, null,2));
		return insts;
	}else{
		return port.operations(_).toArray(_);
	}
}

exports.getSoapStubPortOperation = function(_, stubName, portName, operationName, context){
	
	var operations = stubUtils.getSoapStubPortOperations(_, stubName, portName, context);
	
	for (var i in operations){
		if (operations[i].name(_) === operationName){
			return operations[i];
		}
	}

	throw context.notFound("Stub port operation not found: " + operationName);

}
