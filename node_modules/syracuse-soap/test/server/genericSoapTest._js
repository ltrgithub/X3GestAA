"use strict";

var util = require("util");
var baseUrl = "http://localhost:3004";
var port = 3004;
var helpers = require('syracuse-core/lib/helpers');
var config = require('config'); // must be first syracuse require
var mongodb = require('streamline-mongodb');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var ez = require('ez-streams');
var forEachKey = helpers.object.forEachKey;

var jsxml = require('jsxml');

var tracer = console.error;
var application, contract, dataset;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var cookie;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});


function getCookie(_, otherBaseUrl, login, pass) {
	var response = new ez.devices.http.client({
		url: otherBaseUrl != null ? otherBaseUrl + "/syracuse-main/html/main.html" : baseUrl + "/syracuse-main/html/main.html",
		user: login || "admin",
		password: pass || "admin"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function get(_, cookie, url, statusCode, headers) {
	var head = {
		cookie: cookie,
		accept: "application/json"
	};
	headers && forEachKey(headers, function(key, value) {
		head[key] = value;
	});
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "get",
		url: url,
		headers: head
	}).end().response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var resp = response.readAll(_);
	if (response.statusCode !== (statusCode || 200)) {
		tracer && tracer("GET Request URL: " + url);
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	try {
		return JSON.parse(resp);
	} catch (ex) {
		return resp;
	}
}

function post(_, cookie, url, data, statusCode, adminUrl) {
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "post",
		url: url,
		headers: {
			"content-type": "application/json",
			cookie: cookie,
			accept: "application/json"
		}
	}).end(JSON.stringify(data)).response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var content = response.readAll(_);
	var resp;
	try {
		resp = JSON.parse(content);
	} catch (e) {
		tracer && tracer("Error while parsing: " + content);
	}
	if (response.statusCode !== (statusCode || 201)) {
		tracer && tracer("POST Request URL: " + url + "\nData: " + JSON.stringify(data, null, 2));
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	return resp;
}

function put(_, cookie, url, data, statusCode) {
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "put",
		url: url,
		headers: {
			"content-type": "application/json",
			cookie: cookie,
			accept: "application/json"
		}
	}).end(JSON.stringify(data)).response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var resp = JSON.parse(response.readAll(_));
	if (response.statusCode !== (statusCode || 200)) {
		tracer && tracer("PUT Request URL: " + url + "\nData: " + JSON.stringify(data, null, 2));
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	return resp;
}

var appUuid = {}, endpointUuid = {}, x3serverUuid, x3UserEndpoint;

function addApplication(_, cookie, url, application, contract) {

	var appBody;

	if (!appUuid[application]) {

		appBody = get(_, cookie, url + "applications?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "')");
		if (appBody.$resources && appBody.$resources[0] && appBody.$resources[0].$uuid) {
			appUuid[application] = appBody.$resources[0].$uuid;
			ok(true, "Application already exists");
		} else {
			// Create Application
			appBody = post(_, cookie, url + "applications", {
				description: "SOAP Unit tests application for " + application.toUpperCase(),
				protocol: application !== "x3" ? "syracuse" : "x3",
				application: application,
				contract: contract
			});
			//tracer && tracer("appBody="+JSON.stringify(appBody,null,2));
			appUuid[application] = appBody.$uuid;
			ok(true, "Set Application");
		}
	} else {
		ok(true, "Application already set");

	}
}

function addEndpoint(_, cookie, url, application, contract, dataset) {

	var endpointBody;

	if (!endpointUuid[application]) {

		endpointBody = get(_, cookie, url + "endPoints?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "' and dataset eq '" + dataset + "')");
		if (endpointBody.$resources && endpointBody.$resources[0] && endpointBody.$resources[0].$uuid) {
			endpointUuid[application] = endpointBody.$resources[0].$uuid;
			ok(true, "Endpoint already exists");
		} else {
			var endPointData = {
				description: "SOAP Unit tests endpoint for " + application.toUpperCase(),
				application: application,
				contract: contract,
				dataset: dataset,
				enableSearch: false,
				databaseDriver: "mongodb",
				databaseHost: "localhost",
				databasePort: 27017,
				applicationRef: {
					$uuid: appUuid[application]
				}
			};

			if (application === "x3") {
				addX3Server(_, cookie, url);
				endPointData.x3server = {
					$uuid: x3serverUuid
				};
				endPointData.x3ServerFolder = "SUPERV";
				endPointData.x3SolutionName = "SUPDVLP";
			}

			// Create Endpoint
			endpointBody = post(_, cookie, url + "endPoints", endPointData);
			if (application === "x3") {
				addX3UserEndpoint(_, cookie, url, endpointBody.$uuid);
			}

			endpointUuid[application] = endpointBody.$uuid;
			ok(true, "Set Endpoint");
		}
	} else {
		ok(true, "Endpoint already set");
	}
}

function addX3Server(_, cookie, url) {

	if (!x3serverUuid) {

		var x3serverBody = post(_, cookie, url + "x3servers", {
			description: "aws-x3-devsup",
			serverName: null,
			serverHost: "aws-x3-devsup",
			serverPort: 17000,
			serverTimeout: 60000,
			webServerPort: 80
		});
		x3serverUuid = x3serverBody.$uuid;

	}

}

function addX3UserEndpoint(_, cookie, url, epUuid) {

	if (!x3UserEndpoint) {
		var guestUuid;
		var guestBody = get(_, cookie, url + "users?sdataWhere=(login eq 'admin')");
		if (guestBody.$resources && guestBody.$resources[0] && guestBody.$resources[0].$uuid) {
			guestUuid = guestBody.$resources[0].$uuid;
		} else {
			throw new Error("User 'guest' not found");
		}

		var epBody = put(_, cookie, url + "users('" + guestUuid + "')", {
			endpoints: [{
				login: "AP",
				endpoint: {
					$uuid: epUuid
				}
			}]
		});
		//tracer && tracer("BODY="+JSON.stringify(epBody,null,2));
		x3UserEndpoint = epBody.$uuid;

	}
}

function addWebService(_, application, contract, dataset, description) {

	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_, baseUrl);

	var trackingId = helpers.uuid.generate();
	// Create soapGeneric working copy
	var wcBody = post(_, cookie, url + "soapGenerics/$template/$workingCopies?representation=soapGeneric.$edit&trackingId=" + trackingId, {});

	var wsBody = put(_, cookie, url + "$workingCopies('" + trackingId + "')?representation=soapGeneric.$edit", {
		$uuid: wcBody.$uuid,
		name: description,
		description: description,
		$etag: wcBody.$etag
	});
	//tracer && tracer("wsBody="+JSON.stringify(wsBody,null,2));

	var savBody = put(_, cookie, url + "$workingCopies('" + trackingId + "')?representation=soapGeneric.$edit", {
		$uuid: wcBody.$uuid,
		$actions: {
			$save: {
				$isRequested: true
			}
		},
		$etag: wsBody.$etag
	});
	strictEqual(savBody.description, description, "web service description test roundtrip");
	//tracer && tracer("savBody="+JSON.stringify(savBody,null,2));
}

function postSoap(_, service, method, data, errorExpected) {
	var envelope = {
		"soap:Envelope": {
			$: {
				"xmlns:soap": 'http://schemas.xmlsoap.org/soap/envelope/'
			},
			"soap:Header": {},
			"soap:Body": {}
		}
	};

	//envelope["soap:Envelope"].$["xmlns:" + name] = name + "." + dataset + "." + contract + "." + application;
	envelope["soap:Envelope"]["soap:Body"][method] = data;
	//tracer && tracer("\nJSON DATA="+JSON.stringify(envelope, null,2));
	var xmlData = '<?xml version="1.0" encoding="utf-8"?>' + jsxml.stringify(envelope);

	cookie = getCookie(_, baseUrl);

	var response = ez.devices.http.client({
		method: "post",
		url: baseUrl + "/soap-generic/" + application + "/" + contract + "/" + dataset + "/" + service,
		headers: {
			"content-type": "text/xml",
			cookie: cookie,
			soapaction: "\"\"", // soap action is empty for generic web services because it was never defined in V6
		}
	}).end(xmlData).response(_);

	strictEqual(response.statusCode, 200, "status verified");

	var result = jsxml.parse(response.readAll(_));
	//tracer && tracer("RESULT="+JSON.stringify(result,null,2));
	if (errorExpected) {
		if (result["soap:Envelope"]["soap:Body"]["soap:Fault"]) {
			//tracer("Fault: "+result["soap:Envelope"]["soap:Body"]["soap:Fault"].faultstring.$value);
			return {
				fault: result["soap:Envelope"]["soap:Body"]["soap:Fault"].faultstring.$value.toString()
			};
		} else {
			return {
				fault: null
			};
		}
	} else {
		return result["soap:Envelope"]["soap:Body"];
	}
}

//
//
application = "syracuse";
contract = "collaboration";
dataset = "mongodb_admin_test";
//

asyncTest("init collaboration", 1, function(_) {
	adminTestFixtures.initializeTestEnvironnement(_, "mongodb_admin_test");
	ok(true, "collaboration initialized");
	start();
});

asyncTest("init x3 context", 4, function(_) {
	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_, baseUrl);
	addApplication(_, cookie, url, "x3", "erp");
	addEndpoint(_, cookie, url, "x3", "erp", "SUPERV");

	ok(true, "collaboration initialized");
	start();
});


asyncTest("Call generic web service 'QLFWSADD'", function(_) {
	addWebService(_, application, contract, dataset, "CAdxWebServiceXmlCC");
	var body = postSoap(_, "CAdxWebServiceXmlCC", "run", {
		callContext: {
			codeLang: "FRA",
			codeUser: "TCA",
			password: null,
			poolAlias: "SUPERV",
			poolId: null,
			requestConfig: null
		},
		publicName: "QLFWSADD",
		inputXml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><PARAM><GRP ID=\"G1\" ><FLD NAME=\"B\">0.33</FLD><FLD NAME=\"A\" >0.22</FLD><FLD NAME=\"R\" >0</FLD></GRP></PARAM>"
	});
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});