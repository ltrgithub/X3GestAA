"use strict";

var baseUrl = "http://localhost:3004";
var helpers = require('syracuse-core/lib/helpers');
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var globals = require("streamline/lib/globals");
var ez = require('ez-streams');
var forEachKey = helpers.object.forEachKey;
var revivers = require('jsxml/lib/revivers');

var jsxml = require('jsxml');

var recMode = config && config.qunit && config.qunit.soap && config.qunit.soap.generic && config.qunit.soap.generic.online ? "REC" : "PLAY";

var tracer = console.error;
var application, contract, dataset;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var cookie;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});


function getCookie(_, force, otherBaseUrl, login, pass) {
	if (!force && cookie) return cookie;
	var response = new ez.devices.http.client({
		url: otherBaseUrl != null ? otherBaseUrl + "/syracuse-main/html/main.html" : baseUrl + "/syracuse-main/html/main.html",
		user: login || "admin",
		password: pass || "admin"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function get(_, cookie, url, statusCode, headers) {
	var head = {
		cookie: cookie,
		accept: "application/json"
	};
	headers && forEachKey(headers, function(key, value) {
		head[key] = value;
	});
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "get",
		url: url,
		headers: head
	}).end().response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var resp = response.readAll(_);
	if (response.statusCode !== (statusCode || 200)) {
		tracer && tracer("GET Request URL: " + url);
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	try {
		return JSON.parse(resp);
	} catch (ex) {
		return resp;
	}
}

function post(_, cookie, url, data, statusCode, adminUrl) {
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "post",
		url: url,
		headers: {
			"content-type": "application/json",
			cookie: cookie,
			accept: "application/json"
		}
	}).end(JSON.stringify(data)).response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var content = response.readAll(_);
	var resp;
	try {
		resp = JSON.parse(content);
	} catch (e) {
		tracer && tracer("Error while parsing: " + content);
	}
	if (response.statusCode !== (statusCode || 201)) {
		tracer && tracer("POST Request URL: " + url + "\nData: " + JSON.stringify(data, null, 2));
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	return resp;
}

function put(_, cookie, url, data, statusCode) {
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var response = ez.devices.http.client({
		method: "put",
		url: url,
		headers: {
			"content-type": "application/json",
			cookie: cookie,
			accept: "application/json"
		}
	}).end(JSON.stringify(data)).response(_);

	if (statusCode) strictEqual(response.statusCode, statusCode, "status verified");

	var resp = JSON.parse(response.readAll(_));
	if (response.statusCode !== (statusCode || 200)) {
		tracer && tracer("PUT Request URL: " + url + "\nData: " + JSON.stringify(data, null, 2));
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	return resp;
}

var appUuid = {}, endpointUuid = {}, x3serverUuid, x3UserEndpoint;

function addApplication(_, cookie, url, application, contract) {

	var appBody;

	if (!appUuid[application]) {

		appBody = get(_, cookie, url + "applications?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "')");
		if (appBody.$resources && appBody.$resources[0] && appBody.$resources[0].$uuid) {
			appUuid[application] = appBody.$resources[0].$uuid;
			ok(true, "Application already exists");
		} else {
			// Create Application
			appBody = post(_, cookie, url + "applications", {
				description: "SOAP Unit tests application for " + application.toUpperCase(),
				protocol: application !== "x3" ? "syracuse" : "x3",
				application: application,
				contract: contract
			});
			//tracer && tracer("appBody="+JSON.stringify(appBody,null,2));
			appUuid[application] = appBody.$uuid;
			ok(true, "Set Application");
		}
	} else {
		ok(true, "Application already set");

	}
}

function addEndpoint(_, cookie, url, application, contract, dataset) {

	var endpointBody;

	if (!endpointUuid[application]) {

		endpointBody = get(_, cookie, url + "endPoints?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "' and dataset eq '" + dataset + "')");
		if (endpointBody.$resources && endpointBody.$resources[0] && endpointBody.$resources[0].$uuid) {
			endpointUuid[application] = endpointBody.$resources[0].$uuid;
			ok(true, "Endpoint already exists");
		} else {
			var endPointData = {
				description: "SOAP Unit tests endpoint for " + application.toUpperCase(),
				application: application,
				contract: contract,
				dataset: dataset,
				enableSearch: false,
				databaseDriver: "mongodb",
				databaseHost: "localhost",
				databasePort: 27017,
				applicationRef: {
					$uuid: appUuid[application]
				}
			};

			if (application === "x3") {
				addX3Server(_, cookie, url);
				endPointData.x3server = {
					$uuid: x3serverUuid
				};
				endPointData.x3ServerFolder = "SUPERV";
				endPointData.x3SolutionName = "SUPDVLP";
			}

			// Create Endpoint
			endpointBody = post(_, cookie, url + "endPoints", endPointData);
			if (application === "x3") {
				addX3UserEndpoint(_, cookie, url, endpointBody.$uuid);
			}

			endpointUuid[application] = endpointBody.$uuid;
			ok(true, "Set Endpoint");
		}
	} else {
		ok(true, "Endpoint already set");
	}
}

function addX3Server(_, cookie, url) {

	if (!x3serverUuid) {

		var x3serverBody = post(_, cookie, url + "x3servers", {
			description: "aws-x3-devsup",
			serverName: null,
			serverHost: "aws-x3-devsup",
			serverPort: 17000,
			serverTimeout: 60000,
			webServerPort: 80
		});
		x3serverUuid = x3serverBody.$uuid;

	}

}

function addX3UserEndpoint(_, cookie, url, epUuid) {

	if (!x3UserEndpoint) {
		var guestUuid;
		var guestBody = get(_, cookie, url + "users?sdataWhere=(login eq 'admin')");
		if (guestBody.$resources && guestBody.$resources[0] && guestBody.$resources[0].$uuid) {
			guestUuid = guestBody.$resources[0].$uuid;
		} else {
			throw new Error("User 'guest' not found");
		}

		var epBody = put(_, cookie, url + "users('" + guestUuid + "')", {
			endpoints: [{
				login: "AP",
				endpoint: {
					$uuid: epUuid
				}
			}]
		});
		//tracer && tracer("BODY="+JSON.stringify(epBody,null,2));
		x3UserEndpoint = epBody.$uuid;

	}
}

function addWebService(_, application, contract, dataset, description) {

	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_);

	var trackingId = helpers.uuid.generate();
	// Create soapGeneric working copy
	var wcBody = post(_, cookie, url + "soapGenerics/$template/$workingCopies?representation=soapGeneric.$edit&trackingId=" + trackingId, {});

	var wsBody = put(_, cookie, url + "$workingCopies('" + trackingId + "')?representation=soapGeneric.$edit", {
		$uuid: wcBody.$uuid,
		name: description,
		description: description,
		$etag: wcBody.$etag
	});
	//tracer && tracer("wsBody="+JSON.stringify(wsBody,null,2));

	var savBody = put(_, cookie, url + "$workingCopies('" + trackingId + "')?representation=soapGeneric.$edit", {
		$uuid: wcBody.$uuid,
		$actions: {
			$save: {
				$isRequested: true
			}
		},
		$etag: wsBody.$etag
	});
	strictEqual(savBody.description, description, "web service description test roundtrip");
	//tracer && tracer("savBody="+JSON.stringify(savBody,null,2));
}

function addPool(_, alias, size, endpoint, localePref, user) {

	var db = adminHelper.getCollaborationOrm(_);
	var poolEntity = db.model.getEntity(_, "soapClassicPool");
	var pool = poolEntity.factory.createInstance(_, null, db);
	pool.alias(_, alias);
	pool.maxSize(_, size);
	pool.initSize(_, size);
	pool.autoStart(_, true);
	pool.endpoint(_, endpoint);
	pool.localePref(_, localePref);
	pool.user(_, user);
	var res = pool.save(_);
	console.error("SAVE= " + JSON.stringify(res, null, 2));
	pool.start(_, true, globals.context);


}

function postSoap(_, service, method, data, recordFileName, errorExpected) {
	var envelope = {
		"soapenv:Envelope": {
			$: {
				"xmlns:soap": 'http://schemas.xmlsoap.org/soap/envelope/'
			},
			"soapenv:Header": {},
			"soapenv:Body": {}
		}
	};

	//envelope["soapenv:Envelope"].$["xmlns:" + name] = name + "." + dataset + "." + contract + "." + application;
	envelope["soapenv:Envelope"]["soapenv:Body"][method] = data;
	//tracer && tracer("\nJSON DATA="+JSON.stringify(envelope, null,2));
	var xmlData = '<?xml version="1.0" encoding="utf-8"?>' + jsxml.stringify(envelope);

	cookie = getCookie(_);

	var response = ez.devices.http.client({
		method: "post",
		url: baseUrl + "/soap-generic/" + application + "/" + contract + "/" + dataset + "/" + service,
		headers: {
			"unittest": recMode + "~" + recordFileName,
			"content-type": "text/xml",
			cookie: cookie,
			soapaction: "\"\"", // soap action is empty for generic web services because it was never defined in V6
		}
	}).end(xmlData).response(_);

	strictEqual(response.statusCode, 200, "status verified");

	var result = jsxml.parse(response.readAll(_));
	//tracer && tracer("RESULT="+JSON.stringify(result,null,2));
	if (errorExpected) {
		if (result["soapenv:Envelope"]["soapenv:Body"]["soapenv:Fault"]) {
			//tracer("Fault: "+result["soapenv:Envelope"]["soapenv:Body"]["soapenv:Fault"].faultstring.$value);
			return {
				fault: result["soapenv:Envelope"]["soapenv:Body"]["soapenv:Fault"].faultstring.$value.toString()
			};
		} else {
			return {
				fault: null
			};
		}
	} else {
		return result["soapenv:Envelope"]["soapenv:Body"];
	}
}

//
//
application = "syracuse";
contract = "collaboration";
dataset = "mongodb_admin_test";
//

asyncTest("init collaboration", 1, function(_) {
	adminTestFixtures.initializeTestEnvironnement(_, "mongodb_admin_test");
	ok(true, "collaboration initialized");
	start();
});

asyncTest("init x3 context", 5, function(_) {
	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_);
	addApplication(_, cookie, url, "x3", "erp");
	addEndpoint(_, cookie, url, "x3", "erp", "SUPERV");

	ok(true, "collaboration initialized");
	addWebService(_, application, contract, dataset, "CAdxWebServiceXmlCC");


	var db = adminHelper.getCollaborationOrm(_);
	var ep = db.fetchInstance(_, db.model.getEntity(_, "endPoint"), {
		sdataWhere: "dataset eq 'SUPERV'"
	});

	var lp = db.fetchInstance(_, db.model.getEntity(_, "localePreference"), {
		sdataWhere: "code eq 'en-US'"
	});

	var usr = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		sdataWhere: "login eq 'admin'"
	});

	addPool(_, "SUPERV", 1, ep, lp, usr);
	start();
});


function checkStatus(value, expected, operationName) {
	strictEqual(parseInt(value, 10), expected, operationName + " status [" + value + "] OK");
}

function checkMessage(typeValue, typeExpected, msgValue, msgExpected) {
	strictEqual(parseInt(typeValue, 10), typeExpected, "message type [" + typeValue + "] OK");
	strictEqual(msgValue, msgExpected, "message [" + msgValue + "] OK");
}

function checkProcessReport(techInfo, expectReport) {
	strictEqual(techInfo.processReport, expectReport, "process report [" + techInfo.processReport + "] OK");
}

var recFileName = "genericSoapTest_CvgClientWs_1";
var callContext = {
	codeLang: "ENG",
	codeUser: "",
	password: null,
	poolAlias: "SUPERV",
	poolId: null,
	requestConfig: "adxwss.beautify=true"
};

asyncTest("Call generic ws operation 'run' on 'QLFWSADD'", function(_) {

	// force new cookie
	cookie = getCookie(_, true);

	var body, resultXml, messages;

	var callParams = {
		callContext: callContext,
		publicName: "QLFWSADD",
		inputXml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<PARAM>\
<GRP ID=\"G1\" >\
<FLD NAME=\"B\">0.33</FLD>\
<FLD NAME=\"A\" >0.22</FLD>\
<FLD NAME=\"R\" >0</FLD>\
</GRP>\
</PARAM>"
	};
	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "run", callParams, recFileName);


	checkStatus(body.runResponse.runReturn.status, 1, "run");

	resultXml = jsxml.parse(body.runResponse.runReturn.resultXml.$cdata);

	//console.log("RESULTXML: "+JSON.stringify(resultXml,null,2));
	strictEqual(resultXml.RESULT.GRP.FLD[2].$value, "0.55", "Addition subprogram result OK");


	// exec run NOTOK (No GRP)
	callParams.inputXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<PARAM>\
<FLD NAME=\"B\">0.33</FLD>\
<FLD NAME=\"A\" >0.22</FLD>\
<FLD NAME=\"R\" >0</FLD>\
</PARAM>";

	body = postSoap(_, "CAdxWebServiceXmlCC", "run", callParams, recFileName);
	checkStatus(body.runResponse.runReturn.status, 0, "run");
	messages = body.runResponse.runReturn.messages;
	checkMessage(messages.type, 3, messages.message, "Bad input XML parameters.");
	checkProcessReport(body.runResponse.runReturn.technicalInfos, "NbErrors[1] NbWarnings[0]\r\n[err] Node FLD is not allowed under PARAM.");


	// exec run NOTOK (GRP but no ID)
	callParams.inputXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<PARAM>\
<GRP>\
<FLD NAME=\"B\">0.33</FLD>\
<FLD NAME=\"A\" >0.22</FLD>\
<FLD NAME=\"R\" >0</FLD>\
</GRP>\
</PARAM>";

	body = postSoap(_, "CAdxWebServiceXmlCC", "run", callParams, recFileName);
	checkStatus(body.runResponse.runReturn.status, 0, "run");
	messages = body.runResponse.runReturn.messages;
	checkMessage(messages.type, 3, messages.message, "Bad input XML parameters.");
	checkProcessReport(body.runResponse.runReturn.technicalInfos, "NbErrors[1] NbWarnings[0]\r\n[err] No attribute ID found into GRP tag.");

	start();
});


asyncTest("Call generic ws operation 'query' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);

	var body, resultXml;
	var callParams = {
		callContext: callContext,
		publicName: "OAUS",
		objectKeys: {
			item: [{
				key: "LOGIN",
				value: "ADMIN"
			}]
		},
		listSize: 10
	};
	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "query", callParams, recFileName);

	checkStatus(body.queryResponse.queryReturn.status, 1, "query");

	resultXml = jsxml.parse(body.queryResponse.queryReturn.resultXml.$cdata);
	strictEqual(resultXml.RESULT.$.DIM, "10000", "Query DIM OK");
	strictEqual(resultXml.RESULT.$.SIZE, "1", "Query SIZE OK");
	strictEqual(Array.isArray(resultXml.RESULT.LIN), false, "Lines count OK");
	strictEqual(resultXml.RESULT.LIN.FLD[0].$.NAME, "USR", "USR " + resultXml.RESULT.LIN.FLD[0].$value);
	strictEqual(resultXml.RESULT.LIN.FLD[1].$.NAME, "C2", "C2 " + resultXml.RESULT.LIN.FLD[1].$value);
	strictEqual(resultXml.RESULT.LIN.FLD[2].$.NAME, "LOGIN", "USR " + resultXml.RESULT.LIN.FLD[2].$value);


	callParams.objectKeys.item[0].value = "A*";
	body = postSoap(_, "CAdxWebServiceXmlCC", "query", callParams, recFileName);

	checkStatus(body.queryResponse.queryReturn.status, 1, "query");

	resultXml = jsxml.parse(body.queryResponse.queryReturn.resultXml.$cdata);
	strictEqual(resultXml.RESULT.$.DIM, "10000", "Query DIM OK");
	strictEqual(resultXml.RESULT.$.SIZE, "10", "Query SIZE OK");
	strictEqual(resultXml.RESULT.LIN.length, 10, "Lines count OK");
	resultXml.RESULT.LIN.forEach(function(l, idx) {
		strictEqual(l.FLD[0].$.NAME, "USR", "Line " + idx + " USR " + l.FLD[0].$value);
		strictEqual(l.FLD[1].$.NAME, "C2", "Line " + idx + " C2 " + l.FLD[1].$value);
		strictEqual(l.FLD[2].$.NAME, "LOGIN", "Line " + idx + " LOGIN " + l.FLD[2].$value);
	});

	start();
});

asyncTest("Call generic ws operation 'read' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);

	var body, resultXml, messages;
	// Tests read
	var callParams = {
		callContext: callContext,
		publicName: "OAUS",
		objectKeys: {
			item: [{
				key: "USR",
				value: "ADMIN"
			}]
		}
	};
	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "read", callParams, recFileName);
	checkStatus(body.readResponse.readReturn.status, 1, "read");
	resultXml = jsxml.parse(body.readResponse.readReturn.resultXml.$cdata);
	var grp1_0 = resultXml.RESULT.GRP[0];
	strictEqual(grp1_0.$.ID, "AUS1_0", "First GRP ID OK [" + resultXml.RESULT.GRP[0].$.ID + "]");
	strictEqual(grp1_0.FLD[0].$.NAME === "USR" && grp1_0.FLD[0].$value, "ADMIN", "USR OK [" + grp1_0.FLD[0].$value + "]");
	strictEqual(grp1_0.FLD[1].$.NAME === "INTUSR" && grp1_0.FLD[1].$value, "ADMINISTRATEUR SYSTEME", "INTUSR OK [" + grp1_0.FLD[1].$value + "]");
	strictEqual(grp1_0.FLD[2].$.NAME === "ENAFLG" && grp1_0.FLD[2].$value, "2", "ENAFLG OK [" + grp1_0.FLD[2].$value + "]");
	// We could do lot of more tests here
	var grp2_3 = resultXml.RESULT.GRP[6];
	strictEqual(grp2_3.$.ID, "AUS2_3", "Seventh GRP ID OK [" + resultXml.RESULT.GRP[6].$.ID + "]");
	strictEqual(grp2_3.LST.$.NAME, "ATYPTEL", "LST NAME OK [" + grp2_3.LST.$.NAME + "]");
	strictEqual(grp2_3.LST.$.SIZE, "5", "LST SIZE OK [" + grp2_3.LST.$.SIZE + "]");
	strictEqual(grp2_3.LST.ITM[0].$value, "1", "LST 0 value [" + grp2_3.LST.ITM[0].$value + "]");
	strictEqual(grp2_3.LST.ITM[1].$value, "2", "LST 1 value [" + grp2_3.LST.ITM[1].$value + "]");
	strictEqual(grp2_3.LST.ITM[2].$value, "3", "LST 2 value [" + grp2_3.LST.ITM[2].$value + "]");
	strictEqual(grp2_3.LST.ITM[3].$value, "4", "LST 3 value [" + grp2_3.LST.ITM[3].$value + "]");
	strictEqual(grp2_3.LST.ITM[4].$value, "5", "LST 4 value [" + grp2_3.LST.ITM[4].$value + "]");


	start();
});


asyncTest("Call generic ws operation 'save' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);

	var body, resultXml, messages;
	// Tests read
	var callParams = {
		callContext: callContext,
		publicName: "OAUS"
	};

	callParams.objectXml = "<PARAM>\
	<GRP ID=\"AUS1_0\" >\
		<FLD NAME=\"USR\" >00001</FLD>\
		<FLD NAME=\"INTUSR\" >user ZZWS</FLD>\
		<FLD NAME=\"ENAFLG\" >2</FLD>\
	</GRP>\
	<GRP ID=\"AUS1_1\" >\
		<FLD NAME=\"USRCONNECT\" >2</FLD>\
		<FLD NAME=\"LOGIN\" >00001</FLD>\
		<FLD NAME=\"PRFMEN\" >ADMIN</FLD>\
		<FLD NAME=\"PRFFCT\" >ADMIN</FLD>\
		<FLD NAME=\"ADDEML\" >zzws@sage.fr</FLD>\
		<FLD NAME=\"TELEP\" >123456789</FLD>\
		<FLD NAME=\"FAX1\" >987654321</FLD>\
	</GRP>\
	<TAB DIM=\"20\" ID=\"AUS5_2\" SIZE=\"2\">\
		<LIN NUM=\"1\">\
			<FLD NAME=\"ROL\" TYPE=\"Char\">AQC</FLD>\
			<FLD NAME=\"BPR\" TYPE=\"Char\">TEST1</FLD>\
		</LIN>\
		<LIN NUM=\"2\">\
			<FLD NAME=\"ROL\" TYPE=\"Char\">AQC</FLD>\
			<FLD NAME=\"BPR\" TYPE=\"Char\">TEST2</FLD>\
		</LIN>\
		<LIN NUM=\"3\">\
			<FLD NAME=\"ROL\" TYPE=\"Char\">AQC</FLD>\
			<FLD NAME=\"BPR\" TYPE=\"Char\">TEST3</FLD>\
		</LIN>\
	</TAB>\
</PARAM>";

	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "save", callParams, recFileName);
	checkStatus(body.saveResponse.saveReturn.status, 1, "read");
	resultXml = jsxml.parse(body.saveResponse.saveReturn.resultXml.$cdata);
	//console.error("RES: " + JSON.stringify(resultXml, null, 2));
	var tab5_2 = resultXml.RESULT.TAB[1];
	strictEqual(tab5_2.LIN.length, 3, "Tab 5_2 lines count OK [" + tab5_2.LIN.length + "]");
	strictEqual(tab5_2.LIN[0].FLD[0].$value, "AQC", "Line 0 ROL OK [" + tab5_2.LIN[0].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[1].$value, "Tests unitaires", "Line 0 ZROL OK [" + tab5_2.LIN[0].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[2].$value, "TEST1", "Line 0 BPR OK [" + tab5_2.LIN[0].FLD[2].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[0].$value, "AQC", "Line 1 ROL OK [" + tab5_2.LIN[1].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[1].$value, "Tests unitaires", "Line 1 ZROL OK [" + tab5_2.LIN[1].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[2].$value, "TEST2", "Line 1 BPR OK [" + tab5_2.LIN[1].FLD[2].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[0].$value, "AQC", "Line 2 ROL OK [" + tab5_2.LIN[2].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[1].$value, "Tests unitaires", "Line 2 ZROL OK [" + tab5_2.LIN[2].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[2].$value, "TEST3", "Line 2 BPR OK [" + tab5_2.LIN[2].FLD[2].$value + "]");

	start();
});


asyncTest("Call generic ws operation 'modify' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);
	var body, resultXml, messages;
	// Tests read
	var callParams = {
		callContext: callContext,
		publicName: "OAUS",
		objectKeys: {
			item: [{
				key: "USR",
				value: "00001"
			}]
		}
	};
	callParams.objectXml = "<PARAM>\
	<GRP ID=\"AUS1_0\" >\
<FLD NAME=\"USR\" >00001</FLD>\
</GRP>\
<TAB DIM=\"20\" ID=\"AUS5_2\" SIZE=\"2\">\
<LIN NUM=\"1\">\
	<FLD NAME=\"ROL\" TYPE=\"Char\">AQC</FLD>\
	<FLD NAME=\"BPR\" TYPE=\"Char\">TESTX1</FLD>\
</LIN>\
<LIN NUM=\"2\">\
	<FLD NAME=\"BPR\" TYPE=\"Char\">TESTX2</FLD>\
</LIN>\
<LIN NUM=\"3\">\
	<FLD NAME=\"ROL\" TYPE=\"Char\">AQC</FLD>\
	<FLD NAME=\"BPR\" TYPE=\"Char\">TESTX3</FLD>\
</LIN>\
</TAB>\
</PARAM>";

	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "modify", callParams, recFileName);
	checkStatus(body.modifyResponse.modifyReturn.status, 1, "delete");
	resultXml = jsxml.parse(body.modifyResponse.modifyReturn.resultXml.$cdata);
	var tab5_2 = resultXml.RESULT.TAB[1];
	strictEqual(tab5_2.LIN.length, 3, "Tab 5_2 lines count OK [" + tab5_2.LIN.length + "]");
	strictEqual(tab5_2.LIN[0].FLD[0].$value, "AQC", "Line 0 ROL OK [" + tab5_2.LIN[0].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[1].$value, "Tests unitaires", "Line 0 ZROL OK [" + tab5_2.LIN[0].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[2].$value, "TESTX1", "Line 0 BPR OK [" + tab5_2.LIN[0].FLD[2].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[0].$value, "AQC", "Line 1 ROL OK [" + tab5_2.LIN[1].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[1].$value, "Tests unitaires", "Line 1 ZROL OK [" + tab5_2.LIN[1].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[2].$value, "TESTX2", "Line 1 BPR OK [" + tab5_2.LIN[1].FLD[2].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[0].$value, "AQC", "Line 2 ROL OK [" + tab5_2.LIN[2].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[1].$value, "Tests unitaires", "Line 2 ZROL OK [" + tab5_2.LIN[2].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[2].FLD[2].$value, "TESTX3", "Line 2 BPR OK [" + tab5_2.LIN[2].FLD[2].$value + "]");
	start();
});


asyncTest("Call generic ws operation 'deleteLines' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);

	var body, resultXml, messages;
	// Tests read
	var callParams = {
		callContext: callContext,
		publicName: "OAUS",
		objectKeys: {
			item: [{
				key: "USR",
				value: "00001"
			}]
		},
		blocKey: "AUS5~NBBPR",
		lineKeys: {
			item: [2]
		},
	};

	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "deleteLines", callParams, recFileName);
	checkStatus(body.deleteLinesResponse.deleteLinesReturn.status, 1, "delete");
	resultXml = jsxml.parse(body.deleteLinesResponse.deleteLinesReturn.resultXml.$cdata);
	var tab5_2 = resultXml.RESULT.TAB[1];
	strictEqual(tab5_2.LIN.length, 2, "Tab 5_2 lines count OK [" + tab5_2.LIN.length + "]");
	strictEqual(tab5_2.LIN[0].FLD[0].$value, "AQC", "Line 0 ROL OK [" + tab5_2.LIN[0].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[1].$value, "Tests unitaires", "Line 0 ZROL OK [" + tab5_2.LIN[0].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[0].FLD[2].$value, "TESTX1", "Line 0 BPR OK [" + tab5_2.LIN[0].FLD[2].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[0].$value, "AQC", "Line 1 ROL OK [" + tab5_2.LIN[1].FLD[0].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[1].$value, "Tests unitaires", "Line 1 ZROL OK [" + tab5_2.LIN[1].FLD[1].$value + "]");
	strictEqual(tab5_2.LIN[1].FLD[2].$value, "TESTX3", "Line 1 BPR OK [" + tab5_2.LIN[1].FLD[2].$value + "]");

	start();
});


asyncTest("Call generic ws operation 'delete' on 'OAUS'", function(_) {
	// force new cookie
	cookie = getCookie(_, true);
	var body, resultXml, messages;
	// Tests read
	var callParams = {
		callContext: callContext,
		publicName: "OAUS",
		objectKeys: {
			item: [{
				key: "USR",
				value: "00001"
			}]
		}
	};
	// exec run OK
	body = postSoap(_, "CAdxWebServiceXmlCC", "delete", callParams, recFileName);
	checkStatus(body.deleteResponse.deleteReturn.status, 1, "delete");
	resultXml = jsxml.parse(body.deleteResponse.deleteReturn.resultXml.$cdata);
	start();
});


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});