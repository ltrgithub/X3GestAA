"use strict";
QUnit.module(module.id);

const helper = require("etna/test/engine/fixtures/helper");
const adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
const testAdmin = require('syracuse-core').apis.get('test-admin');

helper.x3jsTest(() => {
	const entityHelper = require('etna/lib/x3js/entity-helper');
	const classDescriptor = require('etna/lib/x3js/class-descriptor');
	const AAUTILIS = require('../fixtures/AAUTILIS');

	function sorter(p) {
		return function(o1, o2) {
			return o1[p] - o2[p];
		}
	}

	// fix AAUTILIS.PROPERTIES
	AAUTILIS.PROPERTIES = AAUTILIS.PROPERTIES.sort(sorter('NUMLIG'))
		.filter(elt => !/^(CREDATTIM|CREUSR|UPDDATTIM|UPDUSR|AUUID)$/.test(elt.FLDCLA))
		.map((elt, i) => (elt.NUMLIG = i + 1, elt));

	function ignore(path) {
		// AWMAJTYP:  strange flag: a boolean which is never true, and does not have any title - let's ignore it.
		return /[\.\]](_id|_proxyName|_etag|CREDATTIM|CREUSR|UPDDATTIM|UPDUSR|AWMAJTYP)$/.test(path);
	}

	function deepCheck(path, data, meta, i) {
		if (ignore(path)) return;
		if (Array.isArray(data)) {
			ok(Array.isArray(meta), `${path}: both arrays (${meta && typeof meta})`);
			// some properties are filtered => we may get less but not more
			ok(meta.length <= data.length, `${path}: array length ok`);
			data.forEach((elt, i) => deepCheck(`${path}[${i}]`, elt, meta[i], i));
		} else if (data && typeof data === 'object') {
			ok(meta && typeof meta === 'object', `${path}: both objects (${meta && typeof meta})`);
			const keys = Object.keys(data);
			keys.forEach(k => deepCheck(`${path}.${k}`, data[k], meta[k], i));
			Object.keys(meta).filter(k => keys.indexOf(k) < 0).forEach(k => ok(false, `${path}.${k}: unexpected key`));
		} else {
			// ignore system localized properties (ATEXTE)
			if (meta === -1 && data > 0) return;
			// only check type on generated properties like NUMFLD:
			if (path.endsWith('.NUMFLD')) return ok(meta % 10 === 0, `${path}: computed value ok ${meta}`);
			// else check equality
			strictEqual(data, meta, `${path}: same values ${meta}`);
		}
	}

	var superv;
	var adminDb;

	asyncTest("init", 2, function(_) {
		adminDb = testAdmin.initializeTestEnvironnement(_);
		ok(adminDb != null, "init admin db");
		superv = helper.getTestSupervisor(_);
		ok(superv != null, "init superv");
		start();
	});

	asyncTest("meta canonical roundtrip", 1414, function(_) {
		const helper = entityHelper.create(superv, classDescriptor);
		const data = helper.metaToCanonical(_, AAUTILIS);
		//console.error("DATA", data);
		const meta = helper.canonicalToMeta(_, data);
		//console.error("META", meta);
		deepCheck('root', AAUTILIS, meta);
		start();
	});

	asyncTest("meta instance roundtrip", 1203, function(_) {
		const helper = entityHelper.create(superv, classDescriptor);
		const data = helper.metaToCanonical(_, AAUTILIS);

		const dbAdmin = adminHelper.getCollaborationOrm(_);
		const entity = adminDb.getEntity(_, "x3jsClass");
		const instance = entity.factory.createInstance(_, null, adminDb);

		helper.fillInstance(_, instance, data);
		//console.error("DATA1", data);
		const data2 = helper.instanceToCanonical(_, instance);
		//console.error("DATA2", data2);
		deepCheck('root', data, data2);
		start();
	});

	asyncTest("end", 1, function(_) {
		setTimeout(_, 10);
		ok(true, "end");
		start();
	});

});