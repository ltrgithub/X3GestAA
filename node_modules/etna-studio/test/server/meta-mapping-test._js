"use strict";
QUnit.module(module.id);

const helper = require("etna/test/engine/fixtures/helper");

helper.x3jsTest(() => {
	const entityHelper = require('etna/lib/x3js/entity-helper');
	const classDescriptor = require('etna/lib/x3js/class-descriptor');
	const AAUTILIS = require('../fixtures/AAUTILIS');

	function sorter(p) {
		return function(o1, o2) {
			return o1[p] - o2[p];
		}
	}

	// fix AAUTILIS.PROPERTIES
	AAUTILIS.PROPERTIES = AAUTILIS.PROPERTIES.sort(sorter('NUMLIG'))
		.filter(elt => !/^(CREDATTIM|CREUSR|UPDDATTIM|UPDUSR|AUUID)$/.test(elt.FLDCLA))
		.map((elt, i) => (elt.NUMLIG = i + 1, elt));

	function ignore(path) {
		// re-enable LINKS and following later
		// NUMFLD should be set to NUMLIG * 10
		return /[\.\]](_id|_proxyName|_etag|CREDATTIM|CREUSR|UPDDATTIM|UPDUSR|LINKS|FLDGRP|STD_METHODS|NUMFLD|AWMAJTYP|TYPPAR)$/.test(path);
	}

	function deepCheck(path, data, meta, i) {
		if (ignore(path)) return;
		if (Array.isArray(data)) {
			ok(Array.isArray(meta), `${path}: both arrays (${meta && typeof meta})`);
			// some properties are filtered => we may get less but not more
			ok(meta.length <= data.length, `${path}: array length ok`);
			data.forEach((elt, i) => deepCheck(`${path}[${i}]`, elt, meta[i], i));
		} else if (data && typeof data === 'object') {
			ok(meta && typeof meta === 'object', `${path}: both objects (${meta && typeof meta})`);
			const keys = Object.keys(data);
			keys.forEach(k => deepCheck(`${path}.${k}`, data[k], meta[k], i));
			Object.keys(meta).filter(k => keys.indexOf(k) < 0).forEach(k => ok(false, `${path}.${k}: unexpected key`));
		} else {
			// ignore system localized properties (ATEXTE)
			if (meta === -1 && data > 0) return;
			strictEqual(data, meta, `${path}: same values ${meta}`);
		}
	}

	var superv;

	asyncTest("init", 1, function(_) {
		superv = helper.getTestSupervisor(_);
		ok(superv != null, "init");
		start();
	});

	asyncTest("meta canonical roundtrip", 1218, function(_) {
		const data = entityHelper.metaToCanonical(_, superv, classDescriptor, AAUTILIS);
		console.error("DATA", data);
		const meta = entityHelper.canonicalToMeta(_, superv, classDescriptor, data);
		console.error("META", meta);
		setTimeout(_, 10);
		deepCheck('root', AAUTILIS, meta);
		start();
	});

	asyncTest("end", 1, function(_) {
		ok(true, "end");
		start();
	});

});