'use strict';
const util = require('etna/lib/supervisor/util');
const classDescriptor = require('etna/lib/x3js/classDescriptor');

function block(list) {
	return {
		$items: list.map(name => ({
			$bind: name
		}))
	};
}

function flags(desc, name) {
	return Object.keys(desc.properties[name].dictCodes).map(k => name + util.pascalize(k));
}

function descNames(desc, name) {
	return Object.keys(desc.properties[name].properties).map(k => name + util.pascalize(k));
}

exports.representation = {
	$entityName: 'x3jsClass',
	$facets: {
		$details: {
			$layout: {
				$layoutType: 'tabs',
				$items: [{
					$category: 'section',
					$title: 'General',
					$layout: block(['module', 'name', 'title', 'dictCode', 'status', 'comment', 'endpoint',
						'activityCode', 'kind'
					]),
				}, {
					$category: 'section',
					$title: 'Behavior',
					$layout: {
						$layoutType: 'row',
						$items: [{
							$title: 'Capabilities',
							$layout: block(flags(classDescriptor, 'can')),
						}, {
							$title: 'Flags',
							$layout: block(flags(classDescriptor, 'is')),
						}, {
							$title: 'Table Mapping',
							$layout: block(descNames(classDescriptor, 'table')),
						}, {
							$title: 'Contextual Properties',
							$layout: block(descNames(classDescriptor, 'contextProperties')),
						}],
					},
				}, {
					$category: 'section',
					$title: 'Properties',
					$layout: block(['properties']),
				}, {
					$category: 'section',
					$title: 'Source',
					$layout: block(['source', 'scripts']),
				}]
			}
		},
		$edit: {
			$copy: '$details'
		},
		/*$query: {
			$layout: {
				$items: [{
					$category: "section",
					$layout: {
						$items: [{
							$category: "section",
							$layout: {
								$items: [{
									$bind: "$resources",
									$layout: block(['module', 'name', 'title', 'dictCode', 'status', 'comment', 'endpoint']),
								}]
							}
						}]
					}
				}]
			}
		}*/
	}
};
//console.error(JSON.stringify(exports.representation, null, 2));