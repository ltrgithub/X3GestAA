"use strict";
const globals = require('streamline-runtime').globals;
const fsp = require('path');
const fs = require('fs');
const util = require('etna/lib/supervisor/util');
const x3jsUtil = require('etna/lib/x3js/util');
const entityHelper = require('etna/lib/x3js/entity-helper');
const unitTestDescriptor = require('etna/lib/x3js/unit-test-descriptor').descriptor;
const datetime = require('syracuse-core').types.datetime;

function updateAll(_, instance, saving) {
	entityHelper.fromCurrentSession(_, unitTestDescriptor).updateAll(_, instance, saving);
}

function runUnitTest(_, context, instance) {
	const helper = entityHelper.fromCurrentSession(_, unitTestDescriptor);
	const tracker = context.tracker;
	tracker.$phase = `running unit test`;
	tracker.$details = instance.name(_);
	tracker.$diagnoses = tracker.$diagnoses || [];
	const stamp = datetime.now();
	const resultObj = instance._db.getEntity(_, 'x3jsUnitTestResult').createInstance(_, instance._db);
	let result;
	try {
		result = helper.supervisor.api.runUnitTest(_, helper.sourceFilename(instance.module(_), instance.name(_)));
		resultObj.fill(_, stamp, instance, result);
	} catch (ex) {
		resultObj.fill(_, stamp, instance);
		resultObj.globalError(_, ex.message);
	}
	context.tracker.$phase = `saving test result`;
	resultObj.save(_);
	if (resultObj.hasErrors(_)) {
		const errors = [];
		resultObj.getAllDiagnoses(_, errors, {
			addEntityName: true,
			addPropName: true,
		});
		throw new Error(`results save failed: ${JSON.stringify(errors)}`);
	}
	const links = {
		$result: {
			$title: "View test result",
			$url: `${context.baseUrl}/x3jsUnitTestResults('${resultObj.$uuid}')?representation=x3jsUnitTestResult.$details`,
			$method: "GET",
		},
	};
	if (resultObj.passed(_)) {
		tracker.$diagnoses.push({
			$severity: 'info',
			$message: `${resultObj.summary(_)}`,
			$links: links,
		});
	} else {
		tracker.$diagnoses.push({
			$severity: 'error',
			$message: `${resultObj.summary(_)}`,
			$links: links,
		});
	}
}

exports.entity = {
	$canDelete: true,
	$canCreate: true,
	$canEdit: true,
	$capabilities: "",
	$titleTemplate: "Unit test {name}",
	$listTitle: "List of Unit Tests",
	$descriptionTemplate: " ",
	$valueTemplate: "{name}",
	$properties: {
		module: {
			$title: "module",
		},
		name: {
			$title: "name",
			$linksToDetails: true,
			$control: x3jsUtil.controlKebabCase('name'),
			$propagate(_, instance, value) {
				updateAll(_, instance);
			},
		},
		title: {
			$title: "title",
		},
		active: {
			$title: "active",
			$type: "boolean",
		},
		comment: {
			$title: "comment",
		},
		source: {
			$title: "source",
			$type: "javascript",
		},
		sourceState: {
			$title: "source state",
			$type: "string",
			$isHidden: true,
		},
	},
	$relations: {
		cases: {
			$type: "x3jsUnitTestCases",
			$isChild: true,
			$title: "Test Cases",
		},
		class: {
			$type: "x3jsClass",
				$title: "Class",
				$inv: 'unitTests',
		},
		results: {
			$type: "x3jsUnitTestResults",
			$title: "Test Results",
			$inv: 'unitTest',
			isComputed: true,
		},
	},
	$events: {
		$afterActions(_, instance) {
			updateAll(_, instance);
		},
		$beforeSave(_, instance) {
			updateAll(_, instance, true);
		},
	},
	$links: {
		results: {
			$facets: ['$query', '$details'],
			$title: "All test results",
			$url: "{$baseUrl}/x3jsUnitTestResults?representation=x3jsUnitTestResult.$query",
		},
	},

	$functions: {
		$toString(_) {
			return `unit test ${this.name(_)})`;
		},
		conflictingMappings(_) {
			return [];
		},
		missingMappings(_) {
			return [];
		},
	},
	$services: {
		execute: {
			$method: "POST",
			$isMethod: true,
			$facets: ["$details"],
			$title: "Run unit test",
			$invocationMode: "async",
			$execute(_, context, instance) {
				runUnitTest(_, context, instance);
				context.tracker.progress = 100;
			}
		},
		executeAll: {
			$method: "POST",
			$facets: ["$query"],
			$title: "Run all unit tests",
			$invocationMode: "async",
			$execute(_, context) {
				const tracker = context.tracker;
				const entity = context.db.model.getEntity(_, 'x3jsUnitTest');
				const instances = entity.fetchInstances(_, context.db, {
					jsonWhere: {
						active: true,
					}
				});
				instances.forEach_(_, (_, instance, i) => {
					tracker.progress = Math.floor(100 * i / instances.length);
					runUnitTest(_, context, instance);
				})
				tracker.progress = 100;
			}
		},
	},
	$defaultOrder: [
		["name", true]
	]
};

entityHelper.fillEntity(exports.entity, unitTestDescriptor);
require('./helpers').addCommonServices(exports.entity);