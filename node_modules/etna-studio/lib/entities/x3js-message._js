"use strict";
const globals = require('streamline-runtime').globals;
const fsp = require('path');
const fs = require('fs');
const util = require('etna/lib/supervisor/util');
const x3jsUtil = require('etna/lib/x3js/util');
const entityHelper = require('etna/lib/x3js/entity-helper');
const entityParser = require('etna/lib/x3js/entity-parser');
const messageDescriptor = require('etna/lib/x3js/message-descriptor');
const codeGen = require('etna/lib/x3js/entity-codegen');
const ezm = require('ez-mongodb');

function updateAll(_, instance, saving) {
	entityHelper.fromInstance(_, instance, messageDescriptor).updateAll(_, instance, saving);
}

exports.entity = {
	$canDelete: true,
	$canCreate: true,
	$canEdit: true,
	$capabilities: "",
	$titleTemplate: "Localization list {name}",
	$listTitle: "Localization lists",
	$descriptionTemplate: " ",
	$valueTemplate: "{name}",
	$properties: {
		module: {
			$title: "module",
		},
		name: {
			$title: "X3JS name",
			$linksToDetails: true,
			$control: x3jsUtil.controlPascalCase('name'),
			$propagate(_, instance, value) {
				updateAll(_, instance);
			},
		},
		dictId: {
			$title: "chapter",
			$type: 'integer',
			$linksToDetails: true,
			$isReadOnly: messageDescriptor.rules.readOnlyProperty,
		},
		title: {
			$title: "title",
			$isReadOnly: messageDescriptor.rules.readOnlyProperty,
		},
		status: {
			$title: "dev status",
			$message: [{
				$value: "4gl",
				$title: "4GL",
			}, {
				$value: "incomplete",
				$title: "mapping in progress",
			}, {
				$value: "mapped",
				$title: "mapped",
			}, {
				$value: "x3js",
				$title: "X3JS",
			}, {
				$value: "error",
				$title: "error",
			}],
			$isReadOnly: true,
		},
		comment: {
			$title: "comment",
		},
		source: {
			$title: "source",
			$type: "javascript",
		},
		sourceState: {
			$title: "source state",
			$type: "string",
			$isHidden: true,
		},
	},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isReadOnly: true,
		},
		entries: {
			$type: "x3jsMessageEntries",
			$isChild: true,
			$title: "Entries",
		},
	},
	$events: {
		$afterActions(_, instance) {
			updateAll(_, instance);
		},
		$beforeSave(_, instance) {
			updateAll(_, instance, true);
		},
	},
	$functions: {
		$toString(_) {
			return `message ${this.name(_)} (${this.dictId(_)})`;
		},
		conflictingMappings(_) {
			return [];
		},
		missingMappings(_) {
			if (!this.module(_)) return [`${this.dictId(_)}: missing module name`];
			if (!this.name(_)) return [`${this.dictId(_)}: missing message name`];
			const missing = [];
			this.entries(_).toArray(_).forEach_(_, (_, entry) => {
				if (!entry.name(_)) {
					missing.push(`${this.dictId(_)}.${entry.dictId(_)}: missing value mapping`);
				}
			});
			return missing;
		},
	},
	$services: {},
	$defaultOrder: [
		["module", true],
		["name", true],
		["dictId", true]
	],
};

entityHelper.fillEntity(exports.entity, messageDescriptor);
require('./helpers').addCommonServices(exports.entity);