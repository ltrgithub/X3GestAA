"use strict";
const globals = require('streamline-runtime').globals;
const fsp = require('path');
const fs = require('fs');
const supervisor = require("etna/lib/supervisor/supervisor");
const ACTX = require("etna/lib/supervisor/builtins/ACTX");
const x3jsUtil = require('etna/lib/x3js/util');
const classParser = require('etna/lib/x3js/classParser');
const entityHelper = require('etna/lib/x3js/entity-helper');
const classDescriptor = require('etna/lib/x3js/classDescriptor');
const ezm = require('ez-mongodb');

function x3jsModule(clas) {
	return 'system'; // see later
}

function processSourceFiles(_, tracker, superv) {
	tracker.phase = 'reading source files';
	const root = superv.directories.jsLocal || superv.directories.jsShared;
	if (!root) throw new Error("cannot processs files: root directory missing");
	const classes = [];
	const byDictCode = {};
	fs.readdir(root, _).forEach_(_, (_, sub) => {
		const classesDir = fsp.join(root, sub, 'classes');
		if (!fs.exists(classesDir, _, _)) return;
		fs.readdir(classesDir, _).forEach_(_, (_, fname) => {
			if (!fname.endsWith('.x3js')) return;
			const filePath = fsp.join(classesDir, fname);
			tracker.phaseDetail = filePath;
			var parsed = classParser.parseFile(_, filePath);
			parsed.ast = null; // we don't need it here
			if (parsed.dictCode) {
				const old = byDictCode[parsed.dictCode];
				if (old) throw new Error(`${filePath}: duplicate dictCode, already found in ${old.file}`);
				byDictCode[parsed.dictCode] = parsed;
			}
			classes.push(parsed);
		});
	});
	return {
		classes: classes,
		byDictCode: byDictCode,
	};
}

function x3jsInfo(_, clas) {
	var script;
	var comment;
	var status;
	var mod = x3jsModule(clas);
	try {
		const classPath = mod + '.' + clas.jsName;
		script = clas.supervisor.loadJsScript(_, 'classes', classPath);
		if (!script) status = 'not started';
		else {
			const def = script.default;
			if (!def) throw new Error(`${classPath}: invalid script: no default`);
			if (!def.dictCode) status = 'upgraded';
			else if (def.mapped) status = 'mapped';
			else status = 'generated';

			comment = def.comment || '';
		}
	} catch (ex) {
		console.error(ex.stack);
		comment = ex.message;
	}
	return {
		module: mod,
		status: status,
		comment: comment,
		title: clas.title(_, 'ENG'),
	};
}

function getSupervisor(_, context, endpoint) {
	if (!endpoint.useEtna(_)) throw new Error("operation not available on current endpoint");
	const conf = endpoint.getEtnaConfig(_, context.request.session);
	const superv = supervisor.create(_, conf);
	ACTX.init(_, conf.session, superv);
	return superv;
}

function fillInstance(_, superv, inst, metaData, fileData) {
	if (fileData) {
		if (!fileData.module) throw new Error(`${fileData.file}: no module`);
		if (!fileData.properties) throw new Error(`${fileData.file}: no properties`);
		inst.module(_, fileData.module);
		inst.name(_, fileData.name);
		inst.dictCode(_, fileData.dictCode || '');
		inst.title(_, fileData.title || '');
		inst.status(_, fileData.status || '');
		inst.comment(_, fileData.comment || '');
		inst.source(_, fs.readFile(fileData.file, 'utf8', _));
		const properties = inst.properties(_);
		Object.keys(fileData.properties).forEach_(_, (_, k) => {
			const fileProp = fileData.properties[k];
			const prop = properties.add(_);
			prop.name(_, k);
			prop.title(_, fileProp.title || '');
			prop.dictCode(_, fileProp.dictCode || '');
			prop.comment(_, fileProp.comment || '');
		});
	} else {
		inst.name(_, '');
		inst.status(_, '4GL');
		inst.comment(_, '');
		inst.source(_, '');
		entityHelper.fillFromMeta(_, inst, classDescriptor, superv, metaData);
	}
}

function generateCode(_, instance) {
	console.error("GENERATING CODE");
	instance.status(_, 'incomplete'); // for now!!
}

// This entity is not persistent 
exports.entity = {
	$canDelete: true,
	$canCreate: true,
	$canEdit: true,
	$capabilities: "",
	$titleTemplate: "Class {name} {title}",
	$listTitle: "List of X3JS classes",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties: {
		module: {
			$title: "module",
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		name: {
			$title: "X3JS name",
			$linksToDetails: true,
			$control: x3jsUtil.controlPascalCase('name'),
		},
		title: {
			$title: "title",
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		dictCode: {
			$title: "dictionary code",
			$linksToDetails: true,
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		status: {
			$title: "dev status",
			$enum: [{
				$value: "4gl",
				$title: "4GL",
			}, {
				$value: "incomplete",
				$title: "mapping in progress",
			}, {
				$value: "mapped",
				$title: "mapped",
			}, {
				$value: "x3js",
				$title: "X3JS",
			}, {
				$value: "error",
				$title: "error",
			}],
			$isReadOnly: true,
		},
		comment: {
			$title: "comment",
		},
		source: {
			$title: "source",
			$type: "javascript",
		},
	},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isReadOnly: true,
		},
		properties: {
			$type: "x3jsProperties",
			$isChild: true,
			$title: "Properties",
		},
	},
	$events: {
		$beforeSave(_, instance) {
			if (/^(4gl|incomplete)$/.test(instance.status(_))) {
				var ready = !!instance.name(_);
				var some = ready;
				const names = {};
				const properties = instance.properties(_).toArray(_);
				properties
					.filter_(_, (_, prop) => !x3jsUtil.isSysProperty(prop.dictCode(_)))
					.forEach_(_, (_, prop) => {
						const name = prop.name(_);
						if (name) {
							some = true;
							if (names[name]) {
								instance.$addError(`duplicate property mapping: ${name} used by ${names[name].dictCode(_)} and ${prop.dictCode(_)}`);
							} else {
								names[name] = prop;
							}
						} else {
							ready = false;
						}
					});
				instance.status(_, ready ? 'mapped' : some ? 'incomplete' : '4gl');
				if (ready) generateCode(_, instance);
			}
		},
	},
	$functions: {
		$toString(_) {
			return `class ${this.name(_)} (${this.dictCode(_)})`;
		},
	},
	$services: {
		synchronize: {
			$method: "POST",
			$isMethod: false,
			$facets: ["$query"],
			$title: "Synchronize list",
			$invocationMode: "async",
			$execute(_, context) {
				const tracker = context.tracker;
				const userProfile = globals.context.session.getUserProfile(_);
				const endpoint = userProfile.selectedEndpoint(_);
				const superv = getSupervisor(_, context, endpoint);
				const {
					classes,
					byDictCode
				} = processSourceFiles(_, tracker, superv);
				const entity = context.db.model.getEntity(_, "x3jsClass");

				tracker.phase = 'processing metadata';
				const processed = {};
				ezm.reader(superv.mongoStore.collection('ACLASSE', _).find({})).forEach(_, (_, metaData) => {
					var oldData = context.db.db.collection('X3jsClass', _).find({
						'endpoint._uuid': endpoint.$uuid,
						dictCode: metaData.CODCLA,
					}).toArray(_)[0]

					var inst = entity.factory.createInstance(_, null, context.db, null, oldData && oldData._id);
					inst.endpoint(_, endpoint);
					fillInstance(_, superv, inst, metaData, byDictCode[metaData.CODCLA]);
					// preserve mapping data.
					if (oldData) {
						inst.status(_, oldData.status);
						inst.name(_, oldData.name);
						inst.comment(_, oldData.comment);
						inst.properties(_).toArray(_).forEach_(_, (_, prop) => {
							const dictCode = prop.dictCode(_);
							oldData.properties.forEach_(_, (_, oldProp) => {
								if (oldProp.dictCode === dictCode) {
									prop.name(_, oldProp.name);
									prop.comment(_, oldProp.comment);
									return;
								}
							});
						});
					} else {
						inst.status(_, '4gl');
					}
					inst.save(_);
					tracker.$diagnoses = tracker.$diagnoses || [];
					if (inst.hasErrors(_)) {
						const oldLen = tracker.$diagnoses.length;
						inst.getAllDiagnoses(_, tracker.$diagnoses, {
							addEntityName: true,
							addPropName: true,
						});
						console.error("SAVE FAILED", tracker.$diagnoses.slice(oldLen));
					}
					processed[metaData.CODCLA] = true;
				});

				tracker.phase = 'purging metadata';
				context.db.db.collection('X3jsClass', _).remove({
					'endpoint._uuid': endpoint.$uuid,
					dictCode: {
						$not: {
							$in: Object.keys(processed),
						},
					},

				}, _);

				tracker.phase = 'inserting pure x3js classes';
				classes.forEach_(_, (_, fileData) => {
					if (fileData.dictCode) {
						if (processed[fileData.dictCode]) return;
						else throw new Error(`${fileData.name}: invalid dictCode: ${fileData.dictCode}`);
					}
					const inst = entity.factory.createInstance(_, null, context.db);
					inst.endpoint(_, endpoint);
					fillInstance(_, superv, inst, null, fileData);
					inst.save(_);
				});
				tracker.progress = 100;
				//return context.reply(_, 200, {});
			},
		},
		generateCode: {
			$method: "POST",
			$isMethod: true,
			$facets: ["$details"],
			$title: "Generate code",
			$isHidden(_, instance) {
				return !instance.dictCode(_);
			},
			$execute(_, context, instance) {
				const superv = getSupervisor(_, context, instance.endpoint(_));
				const clas = superv.load(_, 'Class', instance.dictCode(_));
				// fix jsName
				clas.jsName = instance.name(_);
				const output = require('etna/lib/x3js/classCodeGen').generateSourceFile(_, clas);
				instance.$addDiagnose("success", `source generated: ${clas.x3jsSourceFile}`);
				instance.source(_, output.code);
			},
		},
	},
	$defaultOrder: [
		["name", true]
	]
};

entityHelper.addProperties(exports.entity, classDescriptor);