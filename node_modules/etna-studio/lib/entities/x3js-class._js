"use strict";
const globals = require('streamline-runtime').globals;
const fsp = require('path');
const fs = require('fs');
const supervisor = require("etna/lib/supervisor/supervisor");
const ACTX = require("etna/lib/supervisor/builtins/ACTX");
const x3jsUtil = require('etna/lib/x3js/util');
const classParser = require('etna/lib/x3js/classParser');
const ezm = require('ez-mongodb');

function x3jsModule(clas) {
	return 'system'; // see later
}

function processSourceFiles(_, tracker, superv) {
	tracker.phase = 'reading source files';
	const root = superv.directories.jsLocal || superv.directories.jsShared;
	if (!root) throw new Error("cannot processs files: root directory missing");
	const classes = [];
	const byDictCode = {};
	fs.readdir(root, _).forEach_(_, (_, sub) => {
		const classesDir = fsp.join(root, sub, 'classes');
		if (!fs.exists(classesDir, _, _)) return;
		fs.readdir(classesDir, _).forEach_(_, (_, fname) => {
			if (!fname.endsWith('.x3js')) return;
			const filePath = fsp.join(classesDir, fname);
			tracker.phaseDetail = filePath;
			var parsed = classParser.parseFile(_, filePath);
			parsed.ast = null; // we don't need it here
			if (parsed.dictCode) {
				const old = byDictCode[parsed.dictCode];
				if (old) throw new Error(`${filePath}: duplicate dictCode, already found in ${old.file}`);
				byDictCode[parsed.dictCode] = parsed;
			}
			classes.push(parsed);
		});
	});
	return {
		classes: classes,
		byDictCode: byDictCode,
	};
}

function x3jsInfo(_, clas) {
	var script;
	var comment;
	var status;
	var mod = x3jsModule(clas);
	try {
		const classPath = mod + '.' + clas.jsName;
		script = clas.supervisor.loadJsScript(_, 'classes', classPath);
		if (!script) status = 'not started';
		else {
			const def = script.default;
			if (!def) throw new Error(`${classPath}: invalid script: no default`);
			if (!def.dictCode) status = 'upgraded';
			else if (def.mapped) status = 'mapped';
			else status = 'generated';

			comment = def.comment || '';
		}
	} catch (ex) {
		console.error(ex.stack);
		comment = ex.message;
	}
	return {
		module: mod,
		status: status,
		comment: comment,
		title: clas.title(_, 'ENG'),
	};
}

function getSupervisor(_, context, endpoint) {
	if (!endpoint.useEtna(_)) throw new Error("operation not available on current endpoint");
	const conf = endpoint.getEtnaConfig(_, context.request.session);
	const superv = supervisor.create(_, conf);
	ACTX.init(_, conf.session, superv);
	return superv;
}

function fillInstance(_, superv, inst, metaData, fileData) {
	if (fileData) {
		if (!fileData.module) throw new Error(`${fileData.file}: no module`);
		if (!fileData.properties) throw new Error(`${fileData.file}: no properties`);
		inst.module(_, fileData.module);
		inst.name(_, fileData.name);
		inst.dictCode(_, fileData.dictCode || '');
		inst.title(_, fileData.title || '');
		inst.status(_, fileData.status || '');
		inst.comment(_, fileData.comment || '');
		inst.source(_, fs.readFile(fileData.file, 'utf8', _));
		const properties = inst.properties(_);
		Object.keys(fileData.properties).forEach_(_, (_, k) => {
			const fileProp = fileData.properties[k];
			const prop = properties.add(_);
			prop.name(_, fileProp.name);
			prop.title(_, fileProp.title || '');
			prop.dictCode(_, fileProp.dictCode || '');
			prop.comment(_, fileProp.comment || '');
		});
	} else {
		inst.module(_, superv.moduleName(metaData.MODULE));
		inst.name(_, '');
		inst.dictCode(_, metaData.CODCLA);
		inst.title(_, superv.loadText(_, metaData.INTCLA, 'ENG'));
		inst.status(_, '4GL');
		inst.comment(_, '');
		inst.source(_, '');
		const properties = inst.properties(_);
		(metaData.PROPERTIES || [])
		.filter(metaProp => x3jsUtil.isSysProperty(metaProp.FLDCLA))
			.forEach_(_, (_, metaProp) => {
				const prop = properties.add(_);
				prop.name(_, '');
				prop.title(_, metaProp.INTFLD ? superv.loadText(_, metaProp.INTFLD, 'ENG') : '');
				prop.dictCode(_, metaProp.FLDCLA);
				prop.comment(_, '');
			});
	}
}

// This entity is not persistent 
exports.entity = {
	$canDelete: true,
	$canCreate: true,
	$canEdit: true,
	$capabilities: "",
	$titleTemplate: "Class {name}",
	$listTitle: "List of X3JS classes",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties: {
		module: {
			$title: "module",
			$isReadOnly(_, instance) {
				return !!instance.dictCode(_);
			},
		},
		name: {
			$title: "X3JS name",
			$linksToDetails: true,
		},
		title: {
			$title: "title",
			$isReadOnly(_, instance) {
				return !!instance.dictCode(_);
			},
		},
		dictCode: {
			$title: "dictionary code",
			$linksToDetails: true,
			$isReadOnly(_, instance) {
				return !!instance.dictCode(_);
			},
		},
		status: {
			$title: "dev status",
			$enum: [{
				$value: "not started",
				$title: "not started",
			}, {
				$value: "generated",
				$title: "generated",
			}, {
				$value: "mapped",
				$title: "mapped",
			}, {
				$value: "upgraded",
				$title: "upgraded",
			}, {
				$value: "invalid",
				$title: "invalid",
			}],
			$isReadOnly(_, instance) {
				return !!instance.dictCode(_);
			},
		},
		comment: {
			$title: "comment",
		},
		source: {
			$title: "source",
			$type: "javascript",
		},
	},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isReadOnly: true,
		},
		properties: {
			$type: "x3jsProperties",
			$isChild: true,
			$title: "Properties",
		},
	},
	$functions: {},
	$services: {
		synchronize: {
			$method: "POST",
			$isMethod: false,
			$facets: ["$query"],
			$title: "Synchronize list",
			$invocationMode: "async",
			$execute(_, context) {
				const tracker = context.tracker;
				const userProfile = globals.context.session.getUserProfile(_);
				const endpoint = userProfile.selectedEndpoint(_);
				const superv = getSupervisor(_, context, endpoint);
				const {
					classes,
					byDictCode
				} = processSourceFiles(_, tracker, superv);
				const entity = context.db.model.getEntity(_, "x3jsClass");
				// clear old entries for this endpoin
				context.db.db.collection('X3jsClass', _).remove({
					'endpoint._uuid': endpoint.$uuid,
				}, _);

				tracker.phase = 'processing metadata';
				const processed = {};
				ezm.reader(superv.mongoStore.collection('ACLASSE', _).find({})).forEach(_, (_, metaData) => {
					const inst = entity.factory.createInstance(_, null, context.db);
					inst.endpoint(_, endpoint);
					fillInstance(_, superv, inst, metaData, byDictCode[metaData.CODCLA]);
					inst.save(_);
					processed[metaData.CODCLA] = true;
				});
				tracker.phase = 'inserting pure x3js classes';
				classes.forEach_(_, (_, fileData) => {
					if (fileData.dictCode) {
						if (processed[fileData.dictCode]) return;
						else throw new Error(`${fileData.name}: invalid dictCode: ${fileData.dictCode}`);
					}
					const inst = entity.factory.createInstance(_, null, context.db);
					inst.endpoint(_, endpoint);
					fillInstance(_, superv, inst, null, fileData);
					inst.save(_);
				});
				tracker.progress = 100;
				return context.reply(_, 200, {});
			},
		},
		generateCode: {
			$method: "POST",
			$isMethod: true,
			$facets: ["$details"],
			$title: "Generate code",
			$isHidden(_, instance) {
				return !instance.dictCode(_);
			},
			$execute(_, context, instance) {
				const superv = getSupervisor(_, context, instance.endpoint(_));
				const clas = superv.load(_, 'Class', instance.dictCode(_));
				// fix jsName
				clas.jsName = instance.name(_);
				const output = require('etna/lib/x3js/classCodeGen').generateSourceFile(_, clas);
				instance.$addDiagnose("success", `source generated: ${clas.x3jsSourceFile}`);
				instance.source(_, output.code);
			},
		},
	},
	$defaultOrder: [
		["name", true]
	]
};