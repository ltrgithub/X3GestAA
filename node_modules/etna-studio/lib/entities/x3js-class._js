"use strict";
const globals = require('streamline-runtime').globals;
const fsp = require('path');
const fs = require('fs');
const util = require('etna/lib/supervisor/util');
const x3jsUtil = require('etna/lib/x3js/util');
const entityParser = require('etna/lib/x3js/entity-parser');
const entityHelper = require('etna/lib/x3js/entity-helper');
const classDescriptor = require('etna/lib/x3js/class-descriptor');
const ezm = require('ez-mongodb');

function fillInstance(_, superv, instance, metaData, parsed) {
	if (parsed) {
		const fileData = parsed.data;
		if (!fileData.module) throw new Error(`${fileData.file}: no module`);
		if (!fileData.properties) throw new Error(`${fileData.file}: no properties`);
		entityHelper.fillFromFileData(_, instance, classDescriptor, superv, fileData);
	} else {
		instance.name(_, '');
		instance.status(_, '4gl');
		instance.comment(_, '');
		instance.source(_, '');
		entityHelper.fillFromMeta(_, instance, classDescriptor, superv, metaData);
	}
}

function updateAll(_, instance, saving) {
	entityHelper.updateAll(_, classDescriptor, instance, saving);
}

exports.entity = {
	$canDelete: true,
	$canCreate: true,
	$canEdit: true,
	$capabilities: "",
	$titleTemplate: "Class {name} {title}",
	$listTitle: "List of X3JS classes",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties: {
		module: {
			$title: "module",
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		name: {
			$title: "X3JS name",
			$linksToDetails: true,
			$control: x3jsUtil.controlPascalCase('name'),
			$propagate: function(_, instance, value) {
				updateAll(_, instance);
			},
		},
		dictCode: {
			$title: "dictionary code",
			$linksToDetails: true,
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		title: {
			$title: "title",
			$isReadOnly: classDescriptor.rules.readOnlyProperty,
		},
		status: {
			$title: "dev status",
			$enum: [{
				$value: "4gl",
				$title: "4GL",
			}, {
				$value: "incomplete",
				$title: "mapping in progress",
			}, {
				$value: "mapped",
				$title: "mapped",
			}, {
				$value: "x3js",
				$title: "X3JS",
			}, {
				$value: "error",
				$title: "error",
			}],
			$isReadOnly: true,
		},
		comment: {
			$title: "comment",
		},
		source: {
			$title: "source",
			$type: "javascript",
		},
	},
	$relations: {
		endpoint: {
			$type: "endPoint",
			$title: "Endpoint",
			$isReadOnly: true,
		},
		properties: {
			$type: "x3jsProperties",
			$isChild: true,
			$title: "Properties",
		},
		scripts: {
			$type: "x3jsClassScripts",
			$isChild: true,
			$title: "Scripts",
		},
	},
	$events: {
		$afterPropagate(_, instance) {
			updateAll(_, instance);
		},
		$beforeSave(_, instance) {
			updateAll(_, instance, true);
		},
	},
	$functions: {
		$toString(_) {
			return `class ${this.name(_)} (${this.dictCode(_)})`;
		},
		conflictingMappings(_) {
			const names = {};
			const properties = this.properties(_).toArray(_);
			const errors = [];
			properties.forEach_(_, (_, prop) => {
				const name = prop.name(_);
				if (name) {
					if (names[name]) {
						errors.push(`duplicate property mapping: ${name} used by ${names[name].dictCode(_)} and ${prop.dictCode(_)}`);
					} else {
						names[name] = prop;
					}
				}
			});
			return errors;
		},
		missingMappings(_) {
			if (!this.name(_)) return [`${this.dictCode(_)}: missing X3JS class name`];
			const missing = [];
			this.properties(_).toArray(_).forEach_(_, (_, prop) => {
				if (!prop.name(_)) {
					missing.push(`${prop.dictCode(_)}: missing X3JS property name`);
				}
				if (prop.type(_) === 'enum' && /^\d/.test(prop.enum(_))) {
					missing.push(`${prop.dictCode(_)}: missing enum name - numeric enum id ${prop.enum(_)} must be converted to an enum name`);
				}
			});
			return missing;
		},
	},
	$services: {
		synchronize: {
			$method: "POST",
			$isMethod: false,
			$facets: ["$query"],
			$title: "Synchronize list",
			$invocationMode: "async",
			$execute(_, context) {
				const tracker = context.tracker;
				const userProfile = globals.context.session.getUserProfile(_);
				const endpoint = userProfile.selectedEndpoint(_);
				const superv = entityHelper.getSupervisor(_, endpoint);

				const classes = entityParser.parseSourceFiles(_, 'classes', classDescriptor, superv, tracker);
				const byDictCode = classes.reduce((r, parsed) => {
					//console.error("PARSEDFILES", parsed.file, parsed.data.properties);
					parsed.ast = null;
					if (parsed.data.dictCode) {
						const old = r[parsed.data.dictCode];
						if (old) throw new Error(`${parsed.file}: duplicate dictCode, already found in ${old.file}`);
						r[parsed.data.dictCode] = parsed;
					}
					return r;
				}, {});

				const entity = context.db.model.getEntity(_, "x3jsClass");

				tracker.phase = 'processing metadata';
				const processed = {};
				ezm.reader(superv.mongoStore.collection('ACLASSE', _).find({})).forEach(_, (_, metaData) => {
					var oldData = context.db.db.collection('X3jsClass', _).find({
						'endpoint._uuid': endpoint.$uuid,
						dictCode: metaData.CODCLA,
					}).toArray(_)[0]

					// hack to avoid catastrophic performance and errors with propagate
					globals.context.dontGenerateX3jsSource = true;

					const instance = entity.factory.createInstance(_, null, context.db, null, oldData && oldData._id);
					instance.endpoint(_, endpoint);
					fillInstance(_, superv, instance, metaData, byDictCode[metaData.CODCLA]);
					// preserve mapping data.
					if (oldData) {
						instance.status(_, oldData.status);
						instance.name(_, oldData.name);
						instance.comment(_, oldData.comment);
						instance.properties(_).toArray(_).forEach_(_, (_, prop) => {
							const dictCode = prop.dictCode(_);
							if (!dictCode) return;
							const oldProp = oldData.properties.filter_(_, (_, oldProp) => oldProp.dictCode === dictCode)[0];
							if (oldProp) {
								prop.name(_, oldProp.name);
								prop.comment(_, oldProp.comment);
							}
						});
					} else {
						instance.status(_, '4gl');
					}
					instance.save(_);
					tracker.$diagnoses = tracker.$diagnoses || [];
					if (instance.hasErrors(_)) {
						const oldLen = tracker.$diagnoses.length;
						instance.getAllDiagnoses(_, tracker.$diagnoses, {
							addEntityName: true,
							addPropName: true,
						});
						console.error("SAVE FAILED", tracker.$diagnoses.slice(oldLen));
					}
					processed[metaData.CODCLA] = true;
				});

				tracker.phase = 'purging metadata';
				context.db.db.collection('X3jsClass', _).remove({
					'endpoint._uuid': endpoint.$uuid,
					dictCode: {
						$not: {
							$in: Object.keys(processed),
						},
					},

				}, _);

				tracker.phase = 'inserting pure x3js classes';
				classes.forEach_(_, (_, parsed) => {
					const fileData = parsed.data;
					if (fileData.dictCode) {
						if (processed[fileData.dictCode]) return;
						else throw new Error(`${fileData.name}: invalid dictCode: ${fileData.dictCode}`);
					}
					const instance = entity.factory.createInstance(_, null, context.db);
					instance.endpoint(_, endpoint);
					fillInstance(_, superv, instance, null, parsed);
					instance.save(_);
				});
				context.response.writeHead(200, {});
				context.response.write(_);
				tracker.progress = 100;
			},
		},
	},
	$defaultOrder: [
		["name", true]
	]
};

entityHelper.addProperties(exports.entity, classDescriptor);