"use strict";

function updateAll(_, instance, saving) {
	entityHelper.fromInstance(_, instance, unitTestDescriptor).updateAll(_, instance, saving);
}

exports.entity = {
	$canDelete: true,
	$canCreate: false,
	$canEdit: false,
	$capabilities: "",
	$titleTemplate: "Test results for {unitTest} at {stamp}",
	$listTitle: "List of Unit Tests Results",
	$descriptionTemplate: " ",
	$valueTemplate: "{stamp}: {summary}",
	$properties: {
		stamp: {
			$title: "time",
			$type: 'datetime',
			$linksToDetails: true,
		},
		passed: {
			$title: "passed",
			$type: 'boolean',
			$compute: function(_, instance) {
				const results = instance.caseResults(_).toArray(_);
				return results.filter_(_, (_, res) => !res.passed(_)).length === 0;
			}
		},
		duration: {
			$title: "duration (ms)",
			$type: 'integer',
		},
		summary: {
			$title: "summary",
			$compute: function(_, instance) {
				const counters = instance.caseResults(_).toArray(_).reduce_(_, (_, res, cas) => {
					res.caseCount++;
					if (!cas.passed(_)) res.caseErrors++;
					return res;
				}, {
					caseCount: 0,
					caseErrors: 0,
				});
				if (counters.caseErrors === 0) {
					return `${counters.caseCount} test cases passed`;
				} else {
					return `${counters.caseErrors}/${counters.caseCount} test cases failed`;
				}
			}
		},
	},
	$relations: {
		unitTest: {
			$type: "x3jsUnitTest",
			$title: "unit test",
			$inv: "results",
		},
		caseResults: {
			$type: "x3jsUnitTestCaseResults",
			$title: "case results",
			$isChild: true,
			$isReadOnly: true,
		},
	},
	$links: {
		unitTests: {
			$facets: ['$query', '$details'],
			$title: "All unit tests",
			$url: "{$baseUrl}/x3jsUnitTests?representation=x3jsUnitTest.$query",
		},
	},
	$functions: {
		fill(_, stamp, unitTest, result) {
			this.unitTest(_, unitTest);
			this.stamp(_, stamp);
			this.duration(_, result.stats.duration);
			const caseResults = this.caseResults(_);
			result.tests.forEach_(_, (_, t) => {
				caseResults.add(_).fill(_, t.title, t.duration,
					result.failures.filter(f => f.title === t.title).map(f => f.err)[0], !!result.pending.filter(f => f.title === t.title)[0]);
			});
		},
	},
	$services: {
		deleteAll: {
			$method: "POST",
			$isMethod: false,
			$facets: ["$query"],
			$title: "Delete All",
			$execute(_, context) {
				context.db.db.collection('X3jsUnitTestResult', _).remove({}, {}, _);
				return {};
			}
		},
	},
	$defaultOrder: [
		["stamp", true]
	],
};