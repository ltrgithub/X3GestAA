"use strict";

function updateAll(_, instance, saving) {
	entityHelper.fromInstance(_, instance, unitTestDescriptor).updateAll(_, instance, saving);
}

exports.entity = {
	$canDelete: true,
	$canCreate: false,
	$canEdit: false,
	$capabilities: "",
	$titleTemplate: "Unit test run {stamp}",
	$listTitle: "List of Unit Tests Runs",
	$descriptionTemplate: " ",
	$valueTemplate: " ",
	$properties: {
		stamp: {
			$title: "time",
			$type: 'datetime',
			$linksToDetails: true,
		},
		passed: {
			$title: "passed",
			$type: 'boolean',
			$compute: function(_, instance) {
				const results = instance.suiteResults(_).toArray(_);
				return results.filter_(_, (_, res) => !res.passed(_)).length === 0;
			}
		},
		duration: {
			$title: "duration (ms)",
			$type: 'integer',
		},
		summary: {
			$title: "summary",
			$compute: function(_, instance) {
				const suiteResults = instance.suiteResults(_).toArray(_);
				const counters = suiteResults.reduce_(_, (_, res, suite) => {
					res.suiteCount++;
					if (!suite.passed(_)) res.suiteErrors++;
					const caseResults = suite.caseResults(_).toArray(_);
					return caseResults.reduce_(_, (_, res, cas) => {
						res.caseCount++;
						if (!cas.passed(_)) res.caseErrors++;
						res.assertionCount += cas.assertionCount(_);
						res.assertionErrors += cas.errorCount(_);
						return res;
					}, res);
				}, {
					suiteCount: 0,
					suiteErrors: 0,
					caseCount: 0,
					caseErrors: 0,
					assertionCount: 0,
					assertionErrors: 0,
				});
				if (counters.suiteErrors === 0) {
					return `${counters.assertionCount} assertions passed in ${counters.caseCount} test cases of ${counters.suiteCount} test suites`;
				} else {
					return `${counters.assertionErrors}/${counters.assertionCount} assertions failed in ${counters.caseErrors}/${counters.caseCount} test cases of ${counters.suiteErrors}/${counters.suiteCount} test suites`;
				}
			}
		},
	},
	$relations: {
		suiteResults: {
			$type: "x3jsUnitTestSuiteResults",
			$title: "suite results",
			$isChild: true,
			$isReadOnly: true,
		},
	},
	$links: {
		unitTests: {
			$title: "All unit tests",
			"$url": "{$baseUrl}/x3jsUnitTests?representation=x3jsUnitTest.$query",
			"$method": "GET"
		},
	},
	$functions: {
		fill(_, beg, end, results) {
			this.stamp(_, beg);
			this.duration(_, end.value - beg.value);
			const suiteResults = this.suiteResults(_)
			results.forEach_(_, (_, res) => {
				suiteResults.add(_).fill(_, res);
			});
		},
	},
	$defaultOrder: [
		["stamp", true]
	],
};