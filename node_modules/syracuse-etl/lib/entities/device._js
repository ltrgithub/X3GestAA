"use strict";

var ez = require('ez-streams');
var zlib = require('zlib');

exports.entity = {
	$titleTemplate: "Devices",
	$descriptionTemplate: "I/O Devices",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		mediaType: {
			$title: "Media type",
			$enum: [{
				$value: "application/json",
				$title: "Object (json)",
			}, {
				$value: "text/plain",
				$title: "Plain text",
			}, {
				$value: "application/octet-stream",
				$title: "Binary",
			}],
		},
		type: {
			$title: "Type",
			$enum: [{
				$value: "file",
				$title: "File",
			}, {
				$value: "mongoCollection",
				$title: "Mongo DB Collection",
			}, {
				$value: "console",
				$title: "console",
			}],
		},
		// File properties
		filename: {
			$title: "Filename",
			$isHidden: function(_, instance) {
				return instance.type(_) !== "file";
			},
		},
		fileWriteMode: {
			$title: "Write mode",
			$enum: [{
				$value: "create",
				$title: "Create",
			}, {
				$value: "append",
				$title: "Append",
			}],
			$isMandatory: function(_, instance) {
				return instance.type(_) === "file";
			},
			$isHidden: function(_, instance) {
				return instance.type(_) !== "file";
			},
		},
		compress: {
			$title: "Compress",
			$type: "boolean",
			$isHidden: function(_, instance) {
				return instance.type(_) !== "file";
			},
		},
		mongoCollection: {
			$title: "Collection",
			$isHidden: function(_, instance) {
				return instance.type(_) !== "mongoCollection";
			},
		},
	},
	$relations: {
		mongoDatabase: {
			type: "mongoDatabase",
			$isMandatory: function(_, instance) {
				return instance.type(_) === "mongoCollection";
			},
			$isHidden: function(_, instance) {
				return instance.type(_) !== "mongoCollection";
			},
		},
	},
	$searchIndex: {
		$fields: ["name"]
	},
	$functions: {
		reader: function(_) {
			var handler = handlers[this.type(_)];
			if (!handler) throw new Error("internal error: no device handler: " + this.type(_));
			return handler.reader(_, this);
		},
		writer: function(_) {
			var handler = handlers[this.type(_)];
			if (!handler) throw new Error("internal error: no device handler: " + this.type(_));
			return handler.writer(_, this);
		}
	},
	$services: {},
	$events: {},
};

var jsonOptions = {
	unbounded: true,
};

var handlers = {
	file: {
		reader: function(_, dev) {
			var compress = dev.compress(_);
			var filename = dev.filename(_);
			var mediaType = dev.mediaType(_);
			if (compress && !/\.gz$/.test(filename)) filename += '.gz';
			var reader = ez.devices.file.binary.reader(filename);
			if (compress) reader = reader.nodeTransform(zlib.createGunzip());
			if (/^(text\/|application\/json)/.test(mediaType)) reader = reader.map(ez.mappers.convert.stringify());
			if (/^application\/json/.test(mediaType)) reader = reader.transform(ez.transforms.json.parser(jsonOptions));
			return reader;
		},
		writer: function(_, dev) {
			var compress = dev.compress(_);
			var filename = dev.filename(_);
			var mediaType = dev.mediaType(_);
			if (compress && !/\.gz$/.test(filename)) filename += '.gz';
			var writer = ez.devices.file.binary.writer(filename);
			if (compress) writer = writer.pre.nodeTransform(zlib.createGzip());
			if (/^(text\/|application\/json)/.test(mediaType)) writer = writer.pre.map(ez.mappers.convert.bufferify());
			if (/^application\/json/.test(mediaType)) writer = writer.pre.transform(ez.transforms.json.formatter(jsonOptions));
			return writer;
		},
	},
	mongoCollection: {
		reader: function(_, dev) {
			if (dev.mediaType(_) !== 'application/json') throw new Error("invalid mediaType for mongo collection: " + dev.mediaType(_));
			var db = dev.mongoDatabase(_).database(_);
			var collection = db.collection(dev.mongoCollection(_), _);
			return ez.devices.mongodb.reader(collection);

		},
		writer: function(_, dev) {
			if (dev.mediaType(_) !== 'application/json') throw new Error("invalid mediaType for mongo collection: " + dev.mediaType(_));
			var db = dev.mongoDatabase(_).getDb(_);
			var collection = db.collection(dev.mongoCollection(_), _);
			return ez.devices.mongodb.writer(collection);
		},
	},
	console: {
		reader: function(_, dev) {
			throw new Error("NIY: console reader");
		},
		writer: function(_, dev) {
			var mediaType = dev.mediaType(_);
			var writer = ez.devices.console.log;
			if (/^application\/json/.test(mediaType)) writer = writer.pre.transform(ez.transforms.json.formatter(jsonOptions));
			return writer;
		},
	},
};