"use strict";

var ezmailer = require('ez-mailer');

exports.entity = {
	$titleTemplate: "Mail Template",
	$descriptionTemplate: "Mail template",
	$valueTemplate: "{name}",
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true
		},
		from: {
			$title: "From",
			$isMandatory: true,
		},
		to: {
			$title: "To",
			$isMandatory: true,
		},
		cc: {
			$title: "Cc",
		},
		bcc: {
			$title: "Bcc",
		},
		subject: {
			$title: "Subject",
			$isMandatory: true,
		},
		html: {
			$title: "Body",
			$type: "text/html",
		},
		mandatoryAttachments: {
			$title: "Mandatory attachments",
			$type: "string",
			$default: "",
			// should be strings
		},
		optionalAttachments: {
			$title: "Optional attachments",
			$type: "string",
			$default: "",
			// should be strings
		},
		datasetName: {
			$isHidden: true,
			$isExcluded: true,
			$compute: function(_, instance) {
				return (instance.endpoint(_) && instance.endpoint(_).dataset(_)) || "";
			},
		},
		entityName: {
			$isHidden: true,
			$isExcluded: true,
		},
		representationName: {
			$isHidden: true,
			$isExcluded: true,
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$description: "Choose an endpoint for an endpoint specific function or representation",
			//$lookupFilter: {
			//	applicationRef: "{application}"
			//}
		},
		representationRef: {
			$title: "Representation",
			$type: "representationProxy",
			$inlineStore: true,
			isChild: true,
			$lookup: {
				parameters: "dataset={datasetName}"
			},
			$propagate: function(_, instance, val) {
				if (val) {
					instance.representationName(_, val.representation(_));
					instance.entityName(_, val.entity(_));
				} else {
					instance.representationName(_, "");
					instance.entityName(_, "");
				}
			},
			$isDisabled: function(_, instance) {
				return !instance.datasetName(_);
			},
		},
	},
	$searchIndex: {
		$fields: ["name"]
	},
	$functions: {
		sendMail: function(_, message) {
			var settings = require('syracuse-collaboration/lib/entities/setting').getInstance(_, this._db).mailer(_);
			if (!settings) throw new Error("mailer has not been configured");
			settings = settings.mailerOptions(_);
			var mailer = ezmailer.writer(settings);
			var formatter = ezmailer.messageFormatter(this.serializeInstance(_));
			mailer.writeAll(_, formatter(_, message));
		},
	},
	$services: {},
	$events: {},
};

exports.addMailTemplateService = function(entity) {
	entity.$services.mailWithTemplate = {
		$title: "Mail",
		$method: "POST",
		$isMethod: true,
		$execute: function(_, context, instance) {
			var id = context.parameters.mailTemplate;
			var templateEntity = context.model.getEntity(_, "mailTemplate");
			var template = templateEntity.fetchInstance(_, context.db, id);
			if (!template) throw new Error("mail template not found");

			function mapAttachments(_, atts, mandatory) {
				return atts.split(',').map_(_, function(_, k) {
					k = k.trim();
					if (!k) return null;
					if (typeof instance[k] !== "function") throw new Error("template error: invalid attachement name: " + k);
					var att = instance[k](_);
					if (!att.fileExists(_)) {
						if (mandatory) throw new Error("mandatory attachement " + entity.$properties[k].$title + " missing");
						else return null;
					} else {
						return att.createReadableStream(_);
					}
				}).filter(function(reader) {
					return reader;
				});
			}

			template.sendMail(_, {
				view: instance.serializeInstance(_),
				attachments: mapAttachments(_, template.mandatoryAttachments(_), true) //
				.concat(mapAttachments(_, template.optionalAttachments(_), false)),
			});
		},
		$parameters: {
			$baseUrl: "{$baseUrl}",
			$properties: {
				mailTemplate: {
					$type: "application/x-reference",
					$item: {
						$url: "{$baseUrl}/mailTemplates('{$key}')?representation=mailTemplate.$thumb",
						$value: "{name}",
						$key: "{$uuid}",
						$properties: {
							name: {
								$type: "application/x-string"
							},
						},
						$links: {
							$lookup: {
								$url: "{$baseUrl}/mailTemplates?representation=mailTemplate.$lookup&entityName=" + entity.name,
							}
						},
					},
				},
			},
		},
	};
	entity.$links.mailTemplates = {
		$title: "Mail Templates",
		$url: "{$baseUrl}/mailTemplates?representation=mailTemplate.$query&entityName=" + entity.name,
	};
};