"use strict";
var convert = require("syracuse-rtf");

function escape(html) {
	return html; //.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
}

exports.RTF = function() {
	// RTF header is: 
	// \rtf <charset> \deff? <fonttbl> <filetbl>? <colortbl>? <stylesheet>? <listtables>? <revtbl>?
	var header = {
		charset: "\\rtf1\\ansi",
		deff: "\\deff0",
		fonttbl: "",
		filetbl: "",
		colortbl: "",
		stylesheet: "",
		listtables: "",
		revtbl: "",
		extra: "",
		_string: null,
		set: function(k, v) {
			this[k] = v;
			this._string = null;
		},
		get: function() {
			if (!this._string) {
				this._string = this.charset + this.deff + this.fonttbl + this.filetbl + this.colortbl + this.stylesheet + this.listtables + this.revtbl + this.extra;
			}
			return this._string;
		}
	};
	// RTF document is:
	// <info>? <docfmt>* <section>+ 
	var document = {
		info: "",
		docfmt: [],
		section: [],
		_string: null,
		get: function() {
			if (!this._string) {
				this._string = this.info + this.docfmt.join() + this.section.join();
			}
			return this._string;
		}
	};

	var obj = {
		equals: function(rtf, result, name) {
			var n1 = $("<div>").append(escape(convert.toHtml("{" + header.get() + rtf + "}"))),
				n2 = $("<div>").append(escape(result)),
				eq = n1[0].isEqualNode && n1[0].isEqualNode(n2[0]);
			if (eq) {
				strictEqual(n1.html(), n1.html(), name);
			} else {
				strictEqual(n1.html(), n2.html(), name);
			}
			return this;
		}
	};

	// expose header setter
	Object.keys(header).forEach(function(k) {
		if (k.charAt(0) !== '_') {
			obj[k] = function(v) {
				return header.set(k, v), obj;
			};
		}
	});
	return obj;
};