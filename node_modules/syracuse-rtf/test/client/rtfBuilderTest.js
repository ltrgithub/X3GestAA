var module = QUnit.module;

var rtfbuilder = require("syracuse-rtf/lib/buildrtf");

module('rtf parser');

function testConvert(html, result, name) {
	var rtf = rtfbuilder.buildRtf(html);
	//console.log(JSON.stringify(parsed, null, '  '));
	deepEqual(rtf, result, name);
}





test('basic', 13, function() {
	var prefix ="{\\rtf1\\ansi"
	var suffix="}" ;
	testConvert("<b>bold</b>", prefix+" \\b bold"+suffix, "simple tag ");

	testConvert("<font face='Arial'>fontarial</font>", prefix+"{\\fonttbl{\\f0 Arial;}} \\f0 fontarial"+suffix, "font face ");
	testConvert("<font face='Arial'>fontarial</font>"  //
		+"<font face='Bitstream Charter'>fontbitstreamcharter</font>", // 
		prefix+"{\\fonttbl{\\f0 Arial;}{\\f1 Bitstream Charter;}}"  //
		+ " {\\f0 fontarial}\\f1 fontbitstreamcharter"+ //
		suffix, "font face x2");
	testConvert("<span style='font-size:7.5pt'>fontsize7.5pt</span>", //
		prefix+" \\fs15 fontsize7.5pt"+suffix, "font-size ");
	testConvert("<font color='#ff0000'>red</font>", //
		prefix+"{\\colortbl;\\red255\\green0\\blue0;} \\cf1 red"+suffix, "font color ");
	testConvert("<span style='color:rgb(255,0,0)'>redstyle</span>", //
		prefix+"{\\colortbl;\\red255\\green0\\blue0;} \\cf1 redstyle"+suffix, "color ");
	testConvert("<span style='background-color:rgb(255,0,0)'>redbackground</span>", //
	 prefix+"{\\colortbl;\\red255\\green0\\blue0;} \\highlight1 redbackground"+suffix, //
	 "background color ");
	testConvert("<div align='center'>centered text</div>", //
		prefix+" \\par \\pard \\qc centered text\\par \\pard "+suffix, "alignement  ");
	

	testConvert("<ul><li>item1</li><li>item2</li></ul>", //
		prefix+" \\par \\bullet item1\\par \\bullet item2\\par "+suffix, "unordered bulleted list  ");
	testConvert("<ul><li><font face='Arial'><span style='font-size:12pt'>item1</span></font></li><li>item2</li></ul>", //
		prefix+"{\\fonttbl{\\f0 Arial;}} \\par \\bullet \\f0 \\fs24 item1\\par \\bullet item2\\par "+suffix, "unordered bulleted list with text formatting ");
	
	testConvert("<b>ﻼ</b>", prefix+" \\b \\u65276 "+suffix, "unicode character alone");
	testConvert("<b>beforeﻼafter</b>", prefix+" \\b before\\u65276 after"+suffix, "unicode character inside text ");

	testConvert("<div style='margin-left:40px'>left indented text</div>", //
		prefix+" \\par \\pard \\li600 left indented text\\par \\pard "+suffix, "indentations paragraphe ");




/*testConvert("<ul><li>item1</li><li>item2</li></ul>", //
		prefix+"\\pard {\\pntext }{\\*\\pn \\pnlvlblt {\\pntxtb \\'b7 }}item1\\par {\\pntext }item2\\par \\pard "+suffix, "unordered bulleted list  ");
	testConvert("<ul><li><font face='Arial'><span style='font-size:12pt'>item1</span></font></li><li>item2</li></ul>", //
		prefix+"{\\fonttbl{\\f0 Arial;}}\\pard {\\pntext }{\\*\\pn \\pnlvlblt {\\pntxtb \\'b7 }}{\\f0 {\\fs24 item1}}\\par {\\pntext }item2\\par \\pard "+suffix, "unordered bulleted list with text formatting ");
	*/
});

/*test('maps', 1, function() {
	var source = "{\\rtf1\\ansi" // 
	+ "{\\fonttbl" //
	+ "\n{\\f0\\fnil\\fcharset0\\fprq0\\fttruetype Helvetica;}" //
	+ "\n{\\f1\\fnil\\fcharset0\\fprq0\\fttruetype Bitstream Charter;}}" //
	+ "\n{\\f1\\fs24 Ceci est un texte accentu\\'e9}" //
	+ "\n\\par" //
	+ "\n\\par" //
	+ "\n{\\f1 des {\\fs18 petits} et des {\\fs32 gros}.}" //
	+ "\n}";

	var result = [{
		"word": "rtf",
		"arg": 1,
	}, {
		"word": "ansi",
	}, [{
		"word": "fonttbl",
	}, [{
		"word": "f",
		"arg": 0,
	}, {
		"word": "fnil",
	}, {
		"word": "fcharset",
		"arg": 0,
	}, {
		"word": "fprq",
		"arg": 0,
	}, {
		"word": "fttruetype",
	}, "Helvetica;"],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fnil",
		}, {
			"word": "fcharset",
			"arg": 0,
		}, {
			"word": "fprq",
			"arg": 0,
		}, {
			"word": "fttruetype",
		}, "Bitstream Charter;"]
	],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fs",
			"arg": 24,
		}, "Ceci est un texte accentu", "'", "e9"], {
			"word": "par",
		}, {
			"word": "par",
		}, [{
			"word": "f",
			"arg": 1,
		}, "des ", [{
			"word": "fs",
			"arg": 18,
		}, "petits"], " et des ", [{
			"word": "fs",
			"arg": 32,
		}, "gros"], "."]
	];
	testParse(source, result);
});*/