"use strict";

/* "QUnit" : true, "deepEqual" : true, */

var rtfbuilder = require("syracuse-rtf/lib/buildrtf");

// TODO:
// <span style="font-weight: bold;">Bold<br></span>
// <span style="font-style: italic;">Italic</span>
// <span style="text-decoration: underline;">Underline</span>
// <span style="text-decoration: line-through;">Strikethrough</span>
QUnit.module(module.id);

function testConvert(html, result, name) {
	var rtf = rtfbuilder.buildRtf(html);
	//console.log(JSON.stringify(parsed, null, '  '));
	deepEqual(rtf, "{\\rtf1\\ansi" + (['\\', '{'].indexOf(result.charAt(0)) !== -1 ? "" : " ") + result + "}", name);
}

test('basic', function() {
	testConvert("<b>bold</b>", "\\uc0\\pard\\b bold", "simple tag ");
	testConvert("first line<br>next line<br>and another one", "\\uc0\\pard first line\\line next line\\line and another one", "newlines ");

	testConvert("<font face='Arial'>fontarial</font>", "{\\fonttbl{\\f0 Arial;}}\\uc0\\pard\\f0 fontarial", "font face ");
	testConvert("<font face='Arial'>fontarial</font>" + // -->
		"<font face='Bitstream Charter'>fontbitstreamcharter</font>", //
		"{\\fonttbl{\\f0 Arial;}{\\f1 Bitstream Charter;}}" + // -->
		"\\uc0\\pard{\\f0 fontarial}\\f1 fontbitstreamcharter", //
		"font face x2");
	testConvert("<span style='font-size:7.5pt'>fontsize7.5pt</span>", //
		"\\uc0\\pard\\fs15 fontsize7.5pt", "font-size ");
	testConvert("<font color='#ff0000'>red</font>", //
		"{\\colortbl;\\red255\\green0\\blue0;}\\uc0\\pard\\cf1 red", "font color ");
	testConvert("<span style='color:rgb(255,0,0)'>redstyle</span>", //
		"{\\colortbl;\\red255\\green0\\blue0;}\\uc0\\pard\\cf1 redstyle", "color ");
	testConvert("<span style='background-color:rgb(255,0,0)'>redbackground</span>", //
		"{\\colortbl;\\red255\\green0\\blue0;}\\uc0\\pard\\highlight1 redbackground", //
		"background color ");
	testConvert("<div align='center'>centered text</div>", //
		"\\uc0\\pard\\pard\\qc centered text\\par\\pard", "alignement  ");

	testConvert("<b>ﻼ</b>", "\\uc0\\pard\\b\\u65276", "unicode character alone");
	testConvert("<b>beforeﻼafter</b>", "\\uc0\\pard\\b before\\u65276 after", "unicode character inside text ");

	testConvert("<b>étage</b>", "\\uc0\\pard\\b\\u233 tage", "simple unicode character");

	testConvert("<div style='margin-left:40px'>left indented text</div>", //
		"\\uc0\\pard\\pard\\li600 left indented text\\par\\pard", "indentations paragraphe ");

	/*testConvert("<ul><li>item1</li><li>item2</li></ul>", //
		prefix+"\\pard {\\pntext }{\\*\\pn \\pnlvlblt {\\pntxtb \\'b7 }}item1\\par {\\pntext }item2\\par \\pard "+suffix, "unordered bulleted list  ");
	testConvert("<ul><li><font face='Arial'><span style='font-size:12pt'>item1</span></font></li><li>item2</li></ul>", //
		prefix+"{\\fonttbl{\\f0 Arial;}}\\pard {\\pntext }{\\*\\pn \\pnlvlblt {\\pntxtb \\'b7 }}{\\f0 {\\fs24 item1}}\\par {\\pntext }item2\\par \\pard "+suffix, "unordered bulleted list with text formatting ");
	*/
});

test('bullets', function() {
	testConvert("<ul><li>item1</li><li>item2</li></ul>", //
		"{\\fonttbl{\\f0 Symbol;}}\\uc0\\pard\\pard{\\pntext\\f0\\'B7\\tab}{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}item1\\par{\\pntext\\f0\\'B7\\tab}item2\\par", "unordered bulleted list  ");

	testConvert("<ul><li><font face='Arial'><span style='font-size:12pt'>item1</span></font></li><li>item2</li></ul>", //
		"{\\fonttbl{\\f0 Arial;}{\\f1 Symbol;}}\\uc0\\pard\\pard{\\pntext\\f1\\'B7\\tab}{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}\\f0\\fs24 item1\\par{\\pntext\\f1\\'B7\\tab}item2\\par", "unordered bulleted list with text formatting ");

	// this test is probably wrong, the expected result should be without \pard after \li720 and without 2 \par at the end
	testConvert('<div style="margin-left: 36pt;">\
<ul>\
<li><font face="MS Sans Serif"><span style="font-size: 8.5pt;">item 1</span></font></li>\
<li><font face="MS Sans Serif"><span style="font-size: 8.5pt;">item 2</span></font></li>\
<li><font face="MS Sans Serif"><span style="font-size: 8.5pt;">item 3</span></font></li>\
<li><font face="MS Sans Serif"><span style="font-size: 8.5pt;">item 4</span></font></li>\
</ul></div>', //
		"{\\fonttbl{\\f0 MS Sans Serif;}{\\f1 Symbol;}}\\uc0\\pard\\pard\\li720\\pard{\\pntext\\f1\\'B7\\tab}{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}\
\\f0\\fs17 item 1\\par\
{\\pntext\\f1\\'B7\\tab}\\f0\\fs17 item 2\\par\
{\\pntext\\f1\\'B7\\tab}\\f0\\fs17 item 3\\par\
{\\pntext\\f1\\'B7\\tab}\\f0\\fs17 item 4\\par\\par\\pard", //
		"single bullet list ");

});

test('Multi-line - SAM BUG 92644', function() {

	testConvert("Ligne 1 Ligne 1 Ligne 1<br>Ligne 2 Ligne 2 Ligne 2 <br>Ligne 3 Ligne 3 Ligne 3<br>", // -->
		"\\uc0\\pard Ligne 1 Ligne 1 Ligne 1\\line Ligne 2 Ligne 2 Ligne 2 \\line Ligne 3 Ligne 3 Ligne 3\\line", // -->
		"Firefox multi-line style");

	testConvert("Ligne 1 Ligne 1&nbsp;Ligne 1<div>Ligne 2&nbsp;Ligne 2&nbsp;Ligne 2</div><div>Ligne 3&nbsp;Ligne 3&nbsp;Ligne 3</div><div><br></div>", // -->
		"\\uc0\\pard Ligne 1 Ligne 1 Ligne 1\\line Ligne 2 Ligne 2 Ligne 2\\line Ligne 3 Ligne 3 Ligne 3\\line", // -->
		"Chrome multi-line style");
});

/*test('maps', 1, function() {
	var source = "{\\rtf1\\ansi" //
	+ "{\\fonttbl" //
	+ "\n{\\f0\\fnil\\fcharset0\\fprq0\\fttruetype Helvetica;}" //
	+ "\n{\\f1\\fnil\\fcharset0\\fprq0\\fttruetype Bitstream Charter;}}" //
	+ "\n{\\f1\\fs24 Ceci est un texte accentu\\'e9}" //
	+ "\n\\par" //
	+ "\n\\par" //
	+ "\n{\\f1 des {\\fs18 petits} et des {\\fs32 gros}.}" //
	+ "\n}";

	var result = [{
		"word": "rtf",
		"arg": 1,
	}, {
		"word": "ansi",
	}, [{
		"word": "fonttbl",
	}, [{
		"word": "f",
		"arg": 0,
	}, {
		"word": "fnil",
	}, {
		"word": "fcharset",
		"arg": 0,
	}, {
		"word": "fprq",
		"arg": 0,
	}, {
		"word": "fttruetype",
	}, "Helvetica;"],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fnil",
		}, {
			"word": "fcharset",
			"arg": 0,
		}, {
			"word": "fprq",
			"arg": 0,
		}, {
			"word": "fttruetype",
		}, "Bitstream Charter;"]
	],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fs",
			"arg": 24,
		}, "Ceci est un texte accentu", "'", "e9"], {
			"word": "par",
		}, {
			"word": "par",
		}, [{
			"word": "f",
			"arg": 1,
		}, "des ", [{
			"word": "fs",
			"arg": 18,
		}, "petits"], " et des ", [{
			"word": "fs",
			"arg": 32,
		}, "gros"], "."]
	];
	testParse(source, result);
});*/