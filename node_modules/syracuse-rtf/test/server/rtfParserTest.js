var module = QUnit.module;

var parser = require("syracuse-rtf/lib/rtfparse");

module('rtf parser');

function testParse(rtf, result, name) {
	var parsed = parser.parse(rtf);
	//console.log(JSON.stringify(parsed, null, '  '));
	deepEqual(parsed, result, name);
	//console.log(parsed);
}

test('basic', 7, function() {
	testParse("\\abc", {
		word: "abc"
	}, "control word (no space)");
	testParse("\\abc ", {
		word: "abc"
	}, "control word (space)");
	testParse("\\abc2", {
		word: "abc",
		arg: 2
	}, "control with arg");
	testParse("{\\abc\\def}", [{
		word: "abc"
	}, {
		word: "def"
	}], "group 2 controls");
	testParse("{\\abc \\def} ", [{
		word: "abc"
	}, {
		word: "def"
	}], "group 2 controls (space)");
	testParse("{Ceci est un texte accentu\\'e9.}", ["Ceci est un texte accentu"  ,"é","." ]
	, "text with unicode characters");
	testParse("\\*", {
		word: "*"
	}, "\\* control symbol");
});

test('maps', 1, function() {
	var source = "{\\rtf1\\ansi" // 
	+ "{\\fonttbl" //
	+ "\n{\\f0\\fnil\\fcharset0\\fprq0\\fttruetype Helvetica;}" //
	+ "\n{\\f1\\fnil\\fcharset0\\fprq0\\fttruetype Bitstream Charter;}}" //
	+ "\n{\\f1\\fs24 Ceci est un texte accentu\\'e9}" //
	+ "\n\\par" //
	+ "\n\\par" //
	+ "\n{\\f1 des {\\fs18 petits} et des {\\fs32 gros}.}" //
	+ "\n}";

	var result = [{
		"word": "rtf",
		"arg": 1,
	}, {
		"word": "ansi",
	}, [{
		"word": "fonttbl",
	}, [{
		"word": "f",
		"arg": 0,
	}, {
		"word": "fnil",
	}, {
		"word": "fcharset",
		"arg": 0,
	}, {
		"word": "fprq",
		"arg": 0,
	}, {
		"word": "fttruetype",
	}, "Helvetica;"],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fnil",
		}, {
			"word": "fcharset",
			"arg": 0,
		}, {
			"word": "fprq",
			"arg": 0,
		}, {
			"word": "fttruetype",
		}, "Bitstream Charter;"]
	],
		[{
			"word": "f",
			"arg": 1,
		}, {
			"word": "fs",
			"arg": 24,
		}, "Ceci est un texte accentu", "é"], {
			"word": "par",
		}, {
			"word": "par",
		}, [{
			"word": "f",
			"arg": 1,
		}, "des ", [{
			"word": "fs",
			"arg": 18,
		}, "petits"], " et des ", [{
			"word": "fs",
			"arg": 32,
		}, "gros"], "."]
	];
	testParse(source, result);
});