"use strict";

function builder(documentModel) {
	var rtffonts;
	var deffont;
	var colors;
	var htmltext = "";

	var rootdiv = null;
	var current = null;

	return {

		text: function(str) {
			var content = current.html();
			current.html(content + str);
		},

		_updateContext: function(prop, el) {
			this.context.format[prop] = el;
		},

		control: function(node, context) {
			switch (node.word) {

				case "par":
					var newpar = $("<p></p>");

					var cur = current.closest("div.parformat");
					if (cur.size() === 0) cur = rootdiv.find("p:last").parent();
					if (cur.size() === 0) cur = rootdiv; //current ;
					cur.append(newpar);
					current = newpar;

					recoverContext.apply(this);

					break;

					var p = rootdiv.find("p:last");
					if (p.size() === 0) {
						p = $("<p>");
						current.append(p);
					}

					var pparent = p.parent();
					var el;
					if (pparent.is('div.parformat')) {
						el = pparent;
						var attribute = paragraphFormattingStyle(node);
						el.attr(attribute[0], attribute[1]);
					} else {
						el = paragraphFormatting(node);
						el.addClass('parformat');
						p.detach();
						el.append(p);
						pparent.append(el);
					}
					break;

				case "line":
					current.append("<br>");
					break;

			}, unicodechar: function(code) {
				var content = current.html();
				current.html(content + String.fromCharCode(code));
			},
			;

			getHtml: function() {
				var ss = rootdiv.html();
				return rootdiv.html();
			},
			;

		};
	}; //builder
	exports.buildHtml = function(root, documentModel) {
		var bld = builder(documentModel);
		var stack = [];
		var paragraphFormat = "";

		function interpretNode(node, index, array) {
			if (typeof node == "string") {
				bld.text(node);
				return;
			}
			if (Array.isArray(node) && node.length > 0) {
				if (node[0] && (node[0].word === 'fonttbl' || node[0].word === 'colortbl')) return;

				if (node[0] && node[0].word === "pntxtb") return;

				bld.open();
				node.forEach(interpretNode);
				bld.close(index, array);
			}

			if (typeof node === "object") {
				bld.control(node);
			}
		};

		interpretNode(root, 0, []);
		return bld.getHtml();
	};