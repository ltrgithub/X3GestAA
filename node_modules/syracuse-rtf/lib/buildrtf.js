"use strict";

function builder(documentModel) {
	var rtffonts = documentModel.fonts;
	var colors = documentModel.colors;
	var deffont;
	//var header ;
	//header="{\\rtf1\\ansi" ;
	var rtftext = "{\\rtf1\\ansi" ;

	function has(obj, key) {
		return Object.prototype.hasOwnProperty.call(obj, key);
	};

	function isEmpty(obj) {
		if (obj == null) return true;
		for (var key in obj) if (has(obj, key)) return false;
		return true;
	};

	if (!isEmpty(rtffonts)) {
		rtftext += "{\\fonttbl";
		Object.keys(rtffonts).forEach(function(key) {
			rtftext += "{\\" + key + " " + rtffonts[key].name + ";}";
		});
		rtftext += "}";
	}

	if (colors.length > 0) {
		rtftext += "{\\colortbl";
		colors.forEach(function(e) {
			if (e[0]==0 && e[1]==0 && e[2]==0) 
				rtftext +=';' ;
			else
				rtftext += "\\red" + e[0] + "\\green" + e[1] + "\\blue" + e[2] + ";";
		});
		rtftext += "}";
	}

	function htmlTag2rtfTag(tag) {
		tag = tag.toLowerCase();
		switch (tag) {
		case "p":
			return "\\par";
		case "b":
			return "\\b";
		case "i":
			return "\\i";
		case "u":
			return "\\ul";
		case "s":
			return "\\strike";
		case "br":
			return "\\line";
		case "li" :
			return "\\bullet";
		default:
			return   "<!-- " + tag + " -->"; "\\"+tag ; // cfN, fN etc.. //
		}
	};
	return {
		//header: function(){
		//	rtftext=header+rtftext ;
		//},
		open : function(){
			rtftext += "{";
		},
		text: function(str) {
			rtftext += str;
		},
		font: function(fid) {
			if (fid !== "") {
				rtftext += "\\" + fid+" ";
			}
		},
		controlarg: function(word,arg) {
				rtftext += "\\"+ word + arg+" ";
			
		},
		control : function(word) {
				rtftext += "\\"+ word +" ";
			
		},
		htmltag: function(word) {
			rtftext += htmlTag2rtfTag(word) + " ";
		},
		star : function(){
			rtftext +="\\*"
		},

		close: function() {
			rtftext += "}";
		},
		getRtf: function() {
			return rtftext;
		}
	};
}; //builder

exports.buildRtf = function(html) {
	var documentModel = {};
	documentModel.deffont = "";
	documentModel.fonts = {};
	documentModel.colors = [];
	documentModel.styles = {};
	var fontfamgroups = {
		fnil: "Sans-serif",
		froman: "Sans-serif",
		fswiss: "Serif",
		fmodern: "Monospace",
		fscript: "Cursive",
		fdecor: "Cursive"
	};
	var align = {left: "ql", center : "qc" , right: "qr", justify: "qj"};
	var pointPxTable = [{pt: 6, px: 7}, {pt: 7, px: 9}, {pt: 40 , px: 50}];
	var bld;
	var root = $(html);
	var rtffonts = [];
	//var first = false ;

	function findColor(arr, obj) {
		if (!obj) return -1;
		for (var i = 0; i < arr.length; i++) {
			if (arr[i][0] == obj[0] && //
			arr[i][1] == obj[1] && //
			arr[i][2] == obj[2]) return i;
		}
		return -1;
	}

	function includeFont(arr, obj) {
		return arr.indexOf(obj) >= 0;
	}

	function findFont(fonts, fontname) {
		var keys = Object.keys(fonts);
		for (var i = 0; i < keys.length; i++) {
			if (fonts[keys[i]].name === fontname) return keys[i];
		}
		return "";
	}

	function processNode(n) {
		
		//bld.text(n.nodeType + " - " +  n.nodeName+"\n") ;
		if (n.nodeType === 3) { // TEXT node
			var val=n.nodeValue ;
			var pos=0;
			var beg = pos; 
			while (pos<val.length ){
			 while ( val.charCodeAt(pos)<=128){
				pos++ ;
			}
			bld.text(val.substring(beg,pos));
			if (pos<val.length) {
				bld.controlarg("u",val.charCodeAt(pos)) ;
				pos++ ;
			}
			beg=pos;
			}
		}
		else if ($(n).is("*[style]") ) {
				var rules=$(n).attr('style').split(';') ;
				rules.forEach(function(e) {
				var stylerule=e.split(':') ;
				if (stylerule[0]!=null)
					stylerule[0]=stylerule[0].replace(/^\s*/,'').replace(/\s*$/,'');
				if (stylerule[1]!=null)
					stylerule[1]=stylerule[1].replace(/^\s*/,'').replace(/\s*$/,'');

				switch(stylerule[0]){
					case 'color' :
						
						if (stylerule[1].substring(0,3)==='rgb'){
							var clr = rgbColor(stylerule[1]);
							var idx = findColor(documentModel.colors, clr); 
						}else 
						var idx = findColorInColortbl(stylerule[1]) ;

						var colorid = "cf" ; 
						bld.controlarg(colorid,idx);
						break ;

					case 'background-color' :
						
						if (stylerule[1].substring(0,3)==='rgb'){
							var clr = rgbColor(stylerule[1]);
							var idx = findColor(documentModel.colors, clr);
						}else 
							var idx = findColorInColortbl(stylerule[1]);
						
						var colorid = "highlight"  ;
						bld.controlarg(colorid,idx);
						break ;

					case 'text-decoration' :
						if (stylerule[1]==='underline')
							bld.control('ul') ;
						else if (stylerule[1]==='line-through')
							bld.control('strike') ;
						break ;
					case 'font-style' :
						if (stylerule[1]==='italic')
							bld.control('i') ;
						break ;
					case 'font-weight' :
						if (stylerule[1]==='bold')
							bld.control('b');
						break ;

					case 'font-size' :
						var tmp = $(n).attr("style");
						var points=parseFloat(stylerule[1]) ;
						var halfpoints=Math.round(points*2) ;
						bld.controlarg("fs",halfpoints);
						break ;
					case 'margin-left' :
						var px=parseInt(stylerule[1]) ;
						bld.control("par") ;
						bld.control("pard") ;
						bld.controlarg("li",px*15) ;
						$(n).contents().each(visit);
						bld.control("par") ;
						bld.control("pard") ;
						break ;
					case 'margin-right' :
						var px=parseInt(stylerule[1]) ;
						bld.control("par") ;
						bld.control("pard") ;
						bld.controlarg("ri",px*15) ;
						$(n).contents().each(visit);
						bld.control("par") ;
						bld.control("pard") ;
						break ;
					case 'margin-top' :
						var px=parseInt(stylerule[1]) ;
						bld.control("par") ;
						bld.control("pard") ;
						bld.controlarg("sb",px*15) ;
						$(n).contents().each(visit);
						bld.control("par") ;
						bld.control("pard") ;
						break ;
					case 'margin-bottom' :
						var px=parseInt(stylerule[1]) ;
						bld.control("par") ;
						bld.control("pard") ;
						bld.controlarg("sa",px*15) ;
						$(n).contents().each(visit);
						bld.control("par") ;
						bld.control("pard") ;
						break ;
					case 'text-align' :
						bld.control("par") ;
						bld.control("pard") ;


						var alignment=stylerule[1];
						bld.control(align[alignment]) ;

						$(n).contents().each(visit);
						bld.control("par") ;
						bld.control("pard") ;
						break ;

				}
				});
			} else if ($(n).is("font")) {
			if ($(n).is("font[face]")) {
				var face = $(n).attr("face");
				var fid = findFont(documentModel.fonts, face);
				bld.font(fid);
			}
			if ($(n).is("font[color]")) {
				var idx = findColorInColortbl($(n).attr("color"));
				var colorid = "cf" ; //+ idx;
				bld.controlarg(colorid,idx);
			}
			if ($(n).is("font[bgcolor]")) {
				var idx = findColorInColortbl($(n).attr("bgcolor"));
				var colorid = "highlight" ;//+ idx; //"cb"+(idx);
				bld.controlarg(colorid, idx);
			}

		}
		else if ($(n).is("div[align]")){
			var alignment=$(n).attr("align");

			bld.control("par") ;
			bld.control("pard") ;
			bld.control(align[alignment]) ;

			$(n).contents().each(visit);

			bld.control("par") ;
			bld.control("pard") ;
		}

		
		
		else if ($(n).is("ul")){
			bld.control("par") ;
			//first = true ;
			
		}
		
		else bld.htmltag(n.nodeName);
	}

	function parseColor(colorstr) {
		var match = /#(..)(..)(..)/.exec(colorstr);
		return match && match.slice(1).map(function(elt) {
			return parseInt(elt, 16);
		});
	}

	function findColorInColortbl(colorstr) {
		var parsedclr=parseColor(colorstr) ;
		/*if (parsedclr[0]==0 && parsedclr[1]==0 && parsedclr[2]==0)
			return 0 ;*/
		var idx = findColor(documentModel.colors, parsedclr );
		if (idx==-1)
			return -1 ;
		else return idx ;
	}

	function scan(n) {
		if (!n) return;
		n.each(visit);
	}

	function processColor(coln, atb) {
			coln.each(function(i, e) {
				var tmp = $(e).attr(atb);
				var rgb = parseColor(tmp);
				if (rgb &&  findColor(documentModel.colors, rgb) == -1) {
					documentModel.colors.push(rgb);
					/*(rgb[0]!=0 || rgb[1]!=0 || rgb[2]!=0) &&*/
				}
			});
		}

		function processColorStyle(coln) {
			coln.each(function(i, e) {
				var tmp = $(e).attr("style");
				var styles=tmp.split(';');
				var colorstyles=styles.filter(function(e){ 
					var tmpstylerule = e.split(':');
					tmpstylerule[0]=tmpstylerule[0].replace(/^\s*/,'').replace(/\s*$/,'');
					if (tmpstylerule[0]==='color' || tmpstylerule[0]==='background-color')
						return true ; }) ;

				var stylerule = colorstyles[0].split(':');
				if (stylerule[1]!= null )
					stylerule[1]=stylerule[1].replace(/^\s*/,'').replace(/\s*$/,'');
				if (stylerule[1].substring(0,3)==='rgb'){
							var clr = rgbColor(stylerule[1]);
							var idx ;
							/*if (clr[0]==0 && clr[1]==0 && clr[2]==0)
								idx= 0 ;
							else*/
							 idx = findColor(documentModel.colors, clr);	 
						}else {
						var idx = findColorInColortbl(stylerule[1])
						var clr=parseColor(stylerule[1]) ;
						} 

					if (idx == -1) {
 					documentModel.colors.push(clr);
				}	
			});
		}

	function extractFontsAndColors(el) {
		var fnts = $(el).filter('font[face]');
		var clrs = $(el).filter('font[color]');
		var bgclrs = $(el).filter('font[bgcolor]');
		var stylebgclrs = $(el).filter('*[style*="background-color"]');
		var styleclrs = $(el).filter('*[style*="color"]');
		
		fnts.each(function(i, e) {
			var tmp = $(e).attr("face");
			if (!includeFont(rtffonts, tmp)) rtffonts.push(tmp);
		});

		

		/*if (documentModel.colors.length==0)
			documentModel.colors.push([0,0,0]) ;*/
		processColor(clrs, "color");
		processColor(bgclrs, "bgcolor");
		processColorStyle(stylebgclrs);
		processColorStyle(styleclrs);

		var jqrynod = $(el);
		var tb = jqrynod.children();
		if (tb.length > 0) extractFontsAndColors(tb);
	}

	function rgbColor(colorString) {
		var match = /\s*rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\);*/.exec(colorString);
		if (!match) return [];
		return match.slice(1).map(function(elt) {
			return parseInt(elt, 10);
		});
	}

	function visit(i, e) {
		if ($(e).is("div")){
			processNode(e);
			return ;
		}

		var grp=($(e).contents().size() > 0 && !$(e).is("ul") && !$(e).is("li") ) ;
		if (grp) bld.text("{");
		processNode(e);
		$(e).contents().each(visit);

		/*if ($(e).is("div[align]")) 
			bld.control("par") ;*/
		/*if ($(e).is("ul")) 
			bld.control("pard") ;*/
		if ($(e).is("li")) 
			bld.control("par") ;

		if (grp) bld.text("}");
	}

	function createFontTable() {
		var fname;
		for (var i = 0; i < rtffonts.length; i++) {
			fname = "f" + i;
			documentModel.fonts[fname] = {
				name: rtffonts[i]
			};
		}
	}

	documentModel.colors.push([0,0,0]) ;
	extractFontsAndColors(root);
	createFontTable();
	bld = builder(documentModel);
	
	//bld.header() ;
	scan(root);

	bld.close();
	var rtftxt = bld.getRtf();
	console.log(rtftxt);
	return rtftxt;
};
