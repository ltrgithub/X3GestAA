"use strict";

function builder(documentModel) {
	var rtffonts = documentModel.fonts,
		colors = documentModel.colors,
		// deffont = null,
		rtftext = "",
		needSpace = false;

	function has(obj, key) {
		return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function isEmpty(obj) {
		if (obj == null) return true;
		for (var key in obj) if (has(obj, key)) return false;
		return true;
	}

	if (!isEmpty(rtffonts)) {
		rtftext += "{\\fonttbl";
		Object.keys(rtffonts).forEach(function(key) {
			rtftext += "{\\" + key + " " + rtffonts[key].name + ";}";
		});
		rtftext += "}";
	}

	if (colors.length > 1) {
		rtftext += "{\\colortbl";
		colors.forEach(function(e) {
			if (e[0] === 0 && e[1] === 0 && e[2] === 0) {
				rtftext += ';';
			} else {
				rtftext += "\\red" + e[0] + "\\green" + e[1] + "\\blue" + e[2] + ";";
			}
		});
		rtftext += "}";
	}

	function fromHtmlTag(tag) {
		tag = tag.toLowerCase();
		switch (tag) {
			case "p":
				return "\\par";
			case "b":
				return "\\b";
			case "i":
				return "\\i";
			case "u":
				return "\\ul";
			case "s":
				return "\\strike";
			case "br":
				return "\\line";
				//	case "li":
				//		return "\\bullet";
			default:
				return ""; //<!-- " + tag + " -->"; "\\"+tag ;
		}
	}

	return {
		//header: function(){
		//	rtftext=header+rtftext ;
		//},
		open: function() {
			rtftext += "{";
			needSpace = false;
		},
		text: function(str) {
			var pos = 0,
				beg = pos,
				c;
			while (pos < str.length) {
				while (str.charCodeAt(pos) <= 128) {
					pos++;
				}
				if (pos > beg) {
					rtftext += (needSpace ? " " : "") + str.substring(beg, pos);
				}
				needSpace = false;
				if (pos < str.length) {
					c = str.charCodeAt(pos);
					// replace nbsp by space
					if (c === 160) {
						rtftext += " ";
					} else {
						this.controlarg("u", str.charCodeAt(pos));
					}
					pos++;
				}
				beg = pos;
			}
		},
		fragment: function(str) {
			rtftext += str;
			needSpace = false;
		},
		font: function(fid) {
			if (fid !== "") {
				rtftext += "\\" + fid;
				needSpace = true;
			}
		},
		controlarg: function(word, arg) {
			rtftext += "\\" + word + arg;
			needSpace = true;
		},
		control: function(word) {
			rtftext += "\\" + word;
			needSpace = true;
		},
		htmltag: function(word) {
			rtftext += fromHtmlTag(word);
			needSpace = true;
		},
		star: function() {
			rtftext += "\\*";
			needSpace = false;
		},

		close: function() {
			rtftext = "{\\rtf1\\ansi" + rtftext + "}";
			needSpace = false;
		},
		getRtf: function() {
			return rtftext;
		}
	};
}

var tagMap = {
	"margin-left": "li",
	"margin-right": "ri",
	"margin-top": "sb",
	"margin-bottom": "sa"
},
toTwips = {
	pt: function(v) {
		return v * 20;
	},
	px: function(v) {
		return v * 15;
	}
};

exports.buildRtf = function(html) {
	var documentModel = {};
	documentModel.deffont = "";
	documentModel.fonts = {};
	documentModel.colors = [];
	documentModel.styles = {};
	var fontfamgroups = {
		fnil: "Sans-serif",
		froman: "Sans-serif",
		fswiss: "Serif",
		fmodern: "Monospace",
		fscript: "Cursive",
		fdecor: "Cursive"
	};
	var align = {
		left: "ql",
		center: "qc",
		right: "qr",
		justify: "qj"
	};
	var pointPxTable = [{
		pt: 6,
		px: 7
	}, {
		pt: 7,
		px: 9
	}, {
		pt: 40,
		px: 50
	}];
	var bld;
	var $root = $('<div>').append(html);
	//var $root = $(html);
	var rtffonts = [];
	//var first = false ;

	function findColor(arr, obj) {
		if (!obj) return -1;
		for (var i = 0; i < arr.length; i++) {
			if (arr[i][0] == obj[0] && //
			arr[i][1] == obj[1] && //
			arr[i][2] == obj[2]) return i;
		}
		return -1;
	}

	function addFont(face) {
		rtffonts.indexOf(face) < 0 && rtffonts.push(face);
	}

	function findFont(fontname) {
		var fonts = documentModel.fonts,
			keys = Object.keys(fonts);
		for (var i = 0; i < keys.length; i++) {
			if (fonts[keys[i]].name === fontname) return keys[i];
		}
		return "";
	}

	function processNode(n, i) {
		var clr, idx, colorid;
		//bld.text(n.nodeType + " - " +  n.nodeName+"\n") ;
		if (n.nodeType === 3) { // TEXT node
			bld.text(n.nodeValue);
		} else if ($(n).is("*[style]")) {
			var rules = $(n).attr('style').split(';');
			rules.forEach(function(e) {
				var stylerule = e.split(':');
				if (stylerule[0] != null) stylerule[0] = stylerule[0].replace(/^\s*/, '').replace(/\s*$/, '');
				if (stylerule[1] != null) stylerule[1] = stylerule[1].replace(/^\s*/, '').replace(/\s*$/, '');

				switch (stylerule[0]) {
					case 'color':
						if (stylerule[1].substring(0, 3) === 'rgb') {
							clr = rgbColor(stylerule[1]);
							idx = findColor(documentModel.colors, clr);
						} else {
							idx = findColorInColortbl(stylerule[1]);
						}

						colorid = "cf";
						bld.controlarg(colorid, idx);
						break;

					case 'background-color':
						if (stylerule[1].substring(0, 3) === 'rgb') {
							clr = rgbColor(stylerule[1]);
							idx = findColor(documentModel.colors, clr);
						} else {
							idx = findColorInColortbl(stylerule[1]);
						}

						colorid = "highlight";
						bld.controlarg(colorid, idx);
						break;

					case 'text-decoration':
						if (stylerule[1] === 'underline') bld.control('ul');
						else if (stylerule[1] === 'line-through') bld.control('strike');
						break;
					case 'font-style':
						if (stylerule[1] === 'italic') bld.control('i');
						break;
					case 'font-weight':
						if (stylerule[1] === 'bold') bld.control('b');
						break;

					case 'font-size':
						var tmp = $(n).attr("style");
						var points = parseFloat(stylerule[1]);
						var halfpoints = Math.round(points * 2);
						bld.controlarg("fs", halfpoints);
						break;
					case 'margin-left':
					case 'margin-right':
					case 'margin-top':
					case 'margin-bottom':
						var m = /([0-9\.\-]+)([A-Za-z]*)/g.exec(stylerule[1]),
							unit = m[2] && m[2].toLowerCase() || "px",
							val = parseInt(m[1], 10);
						// bld.control("par");
						bld.control("pard");
						bld.controlarg(tagMap[stylerule[0]], toTwips[unit](val));
						$(n).contents().each(visit);
						bld.control("par");
						bld.control("pard");
						break;
					case 'text-align':
						// bld.control("par");
						bld.control("pard");
						var alignment = stylerule[1];
						bld.control(align[alignment]);
						$(n).contents().each(visit);
						bld.control("par");
						bld.control("pard");
						break;
				}
			});
		} else if ($(n).is("font")) {
			if ($(n).is("font[face]")) {
				var face = $(n).attr("face");
				bld.font(findFont(face));
			}
			if ($(n).is("font[color]")) {
				idx = findColorInColortbl($(n).attr("color"));
				colorid = "cf"; //+ idx;
				bld.controlarg(colorid, idx);
			}
			if ($(n).is("font[bgcolor]")) {
				idx = findColorInColortbl($(n).attr("bgcolor"));
				colorid = "highlight"; //+ idx; //"cb"+(idx);
				bld.controlarg(colorid, idx);
			}

		} else if ($(n).is("div[align]")) {
			var alignment = $(n).attr("align");

			// bld.control("par");
			bld.control("pard");
			bld.control(align[alignment]);

			$(n).contents().each(visit);

			bld.control("par");
			bld.control("pard");
			//} else if (n.nodeName === "DIV") {
			//	bld.control("line");
		} else if (n.nodeName === "UL") {
			bld.control("pard");
		} else if (n.nodeName === "LI") {
			bld.fragment("{\\pntext");
			bld.font(findFont("Symbol"));
			bld.fragment("\\'B7\\tab}");
			if (i === 0) {
				bld.fragment("{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}");
			}
			// bld.control("par");
		} else {
			bld.htmltag(n.nodeName);
		}
	}

	function parseColor(colorstr) {
		var match = /#(..)(..)(..)/.exec(colorstr);
		return match && match.slice(1).map(function(elt) {
			return parseInt(elt, 16);
		});
	}

	function findColorInColortbl(colorstr) {
		var parsedclr = parseColor(colorstr);
		/*if (parsedclr[0]==0 && parsedclr[1]==0 && parsedclr[2]==0)
			return 0 ;*/
		var idx = findColor(documentModel.colors, parsedclr);
		if (idx == -1) return -1;
		else return idx;
	}

	function scan(n) {
		if (!n) return;
		n.each(visit);
	}

	function processColor(coln, atb) {
		coln.each(function(i, e) {
			var tmp = $(e).attr(atb);
			var rgb = parseColor(tmp);
			if (rgb && findColor(documentModel.colors, rgb) == -1) {
				documentModel.colors.push(rgb); /*(rgb[0]!=0 || rgb[1]!=0 || rgb[2]!=0) &&*/
			}
		});
	}

	function processColorStyle(coln) {
		var clr, idx;
		coln.each(function(i, e) {
			var tmp = $(e).attr("style");
			var styles = tmp.split(';');
			var colorstyles = styles.filter(function(e) {
				var tmpstylerule = e.split(':');
				tmpstylerule[0] = tmpstylerule[0].replace(/^\s*/, '').replace(/\s*$/, '');
				if (tmpstylerule[0] === 'color' || tmpstylerule[0] === 'background-color') return true;
			});

			var stylerule = colorstyles[0].split(':');
			if (stylerule[1] != null) stylerule[1] = stylerule[1].replace(/^\s*/, '').replace(/\s*$/, '');
			if (stylerule[1].substring(0, 3) === 'rgb') {
				clr = rgbColor(stylerule[1]);
				idx;
				/*if (clr[0]==0 && clr[1]==0 && clr[2]==0)
								idx= 0 ;
							else*/
				idx = findColor(documentModel.colors, clr);
			} else {
				idx = findColorInColortbl(stylerule[1]);
				clr = parseColor(stylerule[1]);
			}

			if (idx == -1) {
				documentModel.colors.push(clr);
			}
		});
	}

	function extractFontsAndColors() {
		var fnts = $root.find('font[face]');
		var clrs = $root.find('font[color]');
		var bgclrs = $root.find('font[bgcolor]');
		var stylebgclrs = $root.find('*[style*="background-color"]');
		var styleclrs = $root.find('*[style*="color"]');

		fnts.each(function(i, e) {
			addFont($(e).attr("face"));
		});
		// For bullets
		if ($root.find("ul").length > 0) {
			addFont("Symbol");
		}

		// {\\f1\\fnil\\fcharset2 Symbol;		}
		/*if (documentModel.colors.length==0)
			documentModel.colors.push([0,0,0]) ;*/
		processColor(clrs, "color");
		processColor(bgclrs, "bgcolor");
		processColorStyle(stylebgclrs);
		processColorStyle(styleclrs);
	}

	function rgbColor(colorString) {
		var match = /\s*rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\);*/.exec(colorString);
		if (!match) return [];
		return match.slice(1).map(function(elt) {
			return parseInt(elt, 10);
		});
	}

	function visit(i, e) {
		var $e = $(e),
			$contents;
		if ($e.is("div[align]") || $e.is('*[style*=text-align]') || $e.is('*[style*=margin]')) {
			processNode(e, i);
			return;
		}

		var grp, nl, sibling = e.nextSibling;
		$contents = $e.contents();
		if (sibling && sibling.nodeName === "DIV") {
			if (!(sibling.childElementCount === 1 && sibling.firstChild.nodeName === "BR")) {
				nl = true;
			}
		} else if ($contents.length > 0 && e.nextSibling && !$e.is("ul") && !$e.is("li")) {
			grp = true;
			bld.fragment("{");
		}
		processNode(e, i);
		$contents.each(visit);
		if (nl) {
			bld.control("line");
		}

		/*if ($e.is("div[align]"))
			bld.control("par") ;*/
		/*if ($e.is("ul"))
			bld.control("pard") ;*/
		if ($e.is("li")) {
			bld.control("par");
		}

		if (grp) {
			bld.fragment("}");
		}
	}

	function createFontTable() {
		var fname;
		for (var i = 0; i < rtffonts.length; i++) {
			fname = "f" + i;
			documentModel.fonts[fname] = {
				name: rtffonts[i]
			};
		}
	}

	documentModel.colors.push([0, 0, 0]);
	extractFontsAndColors();
	createFontTable();
	bld = builder(documentModel);

	//bld.header() ;
	scan($root);

	bld.close();
	var rtftxt = bld.getRtf();
	// console.log(rtftxt);
	return rtftxt;
};