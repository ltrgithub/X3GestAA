"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NtlmSession = require('jsntlm/lib/ntlmSession').NtlmSession;
var ntlmMessages = require('jsntlm/lib/ntlmMessages');
var Type1Message = ntlmMessages.Type1Message;
var Type2Message = ntlmMessages.Type2Message;
var Type3Message = ntlmMessages.Type3Message;

/// !doc
/// 
/// # NtlmAuthenticator
/// ```javascript
/// var NtlmAuthenticator = require('jsntlm/lib/ntlmAuthenticator').NtlmAuthenticator;  
/// var ntlmAuthentication = new NtlmAuthenticator("myUser", "myPassword", "myComputer", "DOMAIN", options);
/// ```
/// 

exports.NtlmAuthenticator = helpers.defineClass(function(user, password, workstation, domain) {
	this.user = user;
	this.password = password;
	this.workstation = workstation;
	this.domain = domain;

}, null, {
	/// 
	/// -------------
	/// ## generateNegociateMessage :
	/// ``` javascript
	/// var negociateMessage = ntlmAuthentication.generateNegociateMessage();  
	/// ```
	/// Generate Negotiate Message and send to other point if this is connection-oriented protocol.  
	/// 
	/// Returns a base64 encoded String. This will be used to send the negociation message to the server that need NTLM authentication.  
	/// 
	generateNegociateMessage: function() {
		if (!this.session)
			throw new Error("NTLM session must be instanciated before generate negociate message.");
		
		var message = new Type1Message(this.session, this.domain, this.workstation);
		this.session.negociateMessage = message;
		return "NTLM " + message.getResponse();
	},

	/// 
	/// -------------
	/// ## generateAuthenticateMessage :
	/// Generate Negotiate Message and send to other point if this is connection-oriented protocol.    
	///
	/// ``` javascript
	/// var negociateMessage = ntlmAuthentication.generateAuthenticateMessage(challengeMessage);  
	/// ```
	///
	/// The `challengeMessage` parameter is the base64 encoded String received in the server reply in WWW-Authentication header (or Proxy-Authorization header).  
	/// 
	/// Returns a base64 encoded String. This will be used to send the NTLM authentication to the server.  
	/// 
	generateAuthenticateMessage: function(challenge) {
		if (!challenge)
			throw new Error("No server challenge provided.");
		
		if (challenge && challenge.indexOf('NTLM ') !== 0)
			throw new Error("Server challenge MUST begin with 'NTLM ' characters.");
	        
	    this.session.challengeMessage = new Type2Message(challenge.substring(5));
	    var message = new Type3Message(this.session, this.user, this.password, this.workstation, this.domain, this.clientChallenge, this.clientChallenge2, this.randomSessionKey, this.timestamp);
	    this.session.authenticateMessage = message;
	    return "NTLM " + message.getResponse();
	},
	
	/// 
	/// -------------
	/// ## generateNegociateMessage :
	/// ``` javascript
	/// var session = ntlmAuthentication.createSession(options);  
	/// ```
	/// Create NTLM session.  
	/// 
	/// The `options` parameter is optional and can contains the following properties :  
	///    `connectionType`: All other values​​ that 'connectionOriented' means that you want to use the mode 'connectionless'.  
	///    `clientChallenge`: Force the client first challenge used to generate the Authenticate Message.  
	///    `clientChallenge2`: Force the second client challenge used to generate the Authenticate Message.  
	///    `randomSessionKey` Force the random session key used to generate the Authenticate Message.  
	///    `timestamp` Force the timestamp used to generate the Authenticate Message.  
	/// 
	createSession: function(options) {
		this.session = new NtlmSession(options);
		return this.session;
	}	
});