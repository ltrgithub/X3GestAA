"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ntlmMessages = require('jsntlm/lib/ntlmMessages');
var Type1Message = ntlmMessages.Type1Message;
var Type2Message = ntlmMessages.Type2Message;
var Type3Message = ntlmMessages.Type3Message;

/// !doc
/// 
/// # NtlmAuthenticator
/// ```javascript
/// var NtlmAuthenticator = require('jsntlm/lib/ntlmAuthenticator').NtlmAuthenticator;  
/// var ntlmAuthentication = new NtlmAuthenticator("myUser", "myPassword", "myComputer", "DOMAIN", options);
/// ```
/// 
/// The `options` parameter is optional and can contains the following properties :  
///    `connectionType`: All other values​​ 'connectionOriented' means that you want to use the mode 'connectionless'.  
///    `clientChallenge`: Force the client first challenge used to generate the Authenticate Message.  
///    `clientChallenge2`: Force the second client challenge used to generate the Authenticate Message.  
///    `randomSessionKey` Force the random session key used to generate the Authenticate Message.  
///    `timestamp` Force the timestamp used to generate the Authenticate Message.  
/// 
exports.NtlmAuthenticator = helpers.defineClass(function(user, password, workstation, domain, options) {
	this.user = user;
	this.password = password;
	this.workstation = workstation;
	this.domain = domain;
	
	this.connectionType = options.connectionType || "connectionOriented";

	this.clientChallenge = options.clientChallenge;
	this.clientChallenge2 = options.clientChallenge2;
	this.randomSessionKey = options.randomSessionKey;
	this.timestamp = options.timestamp;	
}, null, {
	/// 
	/// -------------
	/// ## generateNegociateMessage :
	/// ``` javascript
	/// var negociateMessage = ntlmAuthentication.generateNegociateMessage();  
	/// ```
	/// Generate Negotiate Message and send to other point if this is connection-oriented protocol.  
	/// 
	/// Returns a base64 encoded String. This will be used to send the negociation message to the server that need NTLM authentication.  
	/// 
	generateNegociateMessage: function() {
		this.negociateMessage = new Type1Message(this.connectionType, this.domain, this.workstation);
		return this.negociateMessage;
	},

	/// 
	/// -------------
	/// ## generateAuthenticateMessage :
	/// Generate Negotiate Message and send to other point if this is connection-oriented protocol.    
	///
	/// ``` javascript
	/// var negociateMessage = ntlmAuthentication.generateAuthenticateMessage(challengeMessage);  
	/// ```
	///
	/// The `challengeMessage` parameter is the base64 encoded String received in the server reply in WWW-Authentication header (or Proxy-Authorization header).  
	/// 
	/// Returns a base64 encoded String. This will be used to send the NTLM authentication to the server.  
	/// 
	generateAuthenticateMessage: function(challenge) {
	    this.challengeMessage = new Type2Message(challenge);
	    return new Type3Message(this.connectionType, this.negociateMessage, this.challengeMessage, this.user, this.password, this.workstation, this.domain, this.clientChallenge, this.clientChallenge2, this.randomSessionKey, this.timestamp);
	}
});