"use strict";
var NtlmAuthenticator = require("jsntlm/lib/ntlmAuthenticator").NtlmAuthenticator;

function _proxyAuthenticate(callback, options) {
	
	var ntlmAuthentication = new NtlmAuthenticator(options.proxy.user, options.proxy.password, options.proxy.workstation, options.proxy.domain, {});
    var msg1 = ntlmAuthentication.generateNegociateMessage();
    msg1.on("done", function() {
        console.log("Event OK");
        console.log("Message 1: " + msg1.response);
        options.headers["Proxy-Connection"] = "Keep-Alive";
        options.headers["Proxy-Authorization"] = "NTLM " + msg1.response;

        console.log("options: "+require('util').inspect(options));
        
        var _negRequest = options.module.request(options, function(res) {
            if (res.statusCode) {
                console.log('STATUS: ' + res.statusCode);
                console.log('HEADERS: ' + JSON.stringify(res.headers));
            }
            res.setEncoding('utf8');
            res.on('data', function(chunk) {});
            res.on('end', function() {
            	console.log("Negociate request ended");
                var proxyAuth = res.headers["proxy-authenticate"];
                var cookie = res.headers["set-cookie"];
                options.headers.cookie += "; " + cookie;
                if (proxyAuth && proxyAuth.indexOf('NTLM ') === 0) {
                    var msg2 = proxyAuth.split('NTLM ')[1];
                    console.log("Message 2: " + msg2);
                    var msg3 = ntlmAuthentication.generateAuthenticateMessage(msg2);
                    msg3.on("done", function() {
                        console.log("Message 3: " + msg3.response);
                        options.headers["Proxy-Authorization"] = "NTLM " + msg3.response;
                        var _authRequest = options.module.request(options, function(res2) {
                            if (res2.statusCode) {
                                console.log('STATUS FIN: ' + res2.statusCode);
                                console.log('HEADERS FIN: ' + JSON.stringify(res2.headers));
                            }
                        });
                        _authRequest.end();
                        callback(null, true);
                    });
                    msg3.getResponse();
                } else {
                    callback(new Error("NTLM Type-2 message not received."));
                }
            });
        });
        _negRequest.on('error', function(e) {
        	console.log("e: "+e.stack);
            callback(new Error('problem with negociate request: ' + e.message));
        });
        
        console.log("Send authenticate request");
        _negRequest.end();
    });
    msg1.getResponse();
}

exports.authenticate = function(_, options) {
    return _proxyAuthenticate(~_, options);
};