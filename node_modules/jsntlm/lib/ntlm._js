"use strict";

var util = require("util");
var crypto = require('crypto');
var streams = require('streamline/lib/streams/server/streams');

function buildType1Message(ntDomain, workstation) {
	
    var host = workstation.indexOf('.') !== -1 ? workstation.split('.')[0] : workstation;          // host string (ASCII)
    var domain = ntDomain.indexOf('.') !== -1 ? ntDomain.split('.')[0] : ntDomain;;          // domain string (ASCII)
  
	  var domainLength = domain.length;
	  var hostLength = host.length;
	  
	  var buffers = [];
	  buffers.push(new Buffer('NTLMSSP', 'ascii'));

	  var header = new Buffer(25);
	  header.writeUInt8(0, 0);
	  header.writeUInt8(0x1, 1);
	  header.writeUInt8(0, 2);
	  header.writeUInt8(0, 3);
	  header.writeUInt8(0, 4);
	  
	  // flags 0xb203
	  header.writeUInt8(0x03, 5);
	  header.writeUInt8(0xb2, 6);
	  header.writeUInt8(0, 7);
	  header.writeUInt8(0, 8);

	  lenBuffer.writeUInt16LE(domain.length, 9);
	  lenBuffer.writeUInt16LE(domain.length, 11);
	  lenBuffer.writeUInt16LE(32 + host.length, 13);
	  lenBuffer.writeUInt8(0, 15);
	  lenBuffer.writeUInt8(0, 16);
	  lenBuffer.writeUInt16LE(host.length, 17);
	  lenBuffer.writeUInt16LE(host.length, 19);
	  lenBuffer.writeUInt16LE(32, 21);
	  lenBuffer.writeUInt8(0, 23);
	  lenBuffer.writeUInt8(0, 24);

	  buffers.push(header);

	  var hostBuffer = new Buffer(host.toUpperCase(), 'ascii');
	  var domainBuffer = new Buffer(domain.toUpperCase(), 'ascii');

	  buffers.push(hostBuffer);
	  buffers.push(domainBuffer);

	  var buf = Buffer.concat(buffers);
	  var message = buf.toString('base64');

	  return message;
}

function buildType3Message(username, ntDomain, workstation, lmResp, ntResp) {
	
      var host = workstation.indexOf('.') !== -1 ? workstation.split('.')[0] : workstation;          // host string (ASCII)
      var domain = ntDomain.indexOf('.') !== -1 ? ntDomain.split('.')[0] : ntDomain;;          // domain string (ASCII)

      var domainOffset = 64;
      var usernameOffset = domainOffset + domain.length;
      var hostOffset = usernameOffset + username.length;
      var lmRepOffset = hostOffset + host.length;
      var ntRespOffset = lmRepOffset + lmResp.length;
      
      var domainBuffer = new Buffer(domain.toUpperCase(), 'ucs2');
	  var usernameBuffer = new Buffer(username, 'ucs2');
	  var hostBuffer = new Buffer(host.toUpperCase(),'ucs2');

	  var buffers = [];
	  buffers.push(new Buffer('NTLMSSP', 'ascii')); // 'N', 'T', 'L', 'M', 'S', 'S', 'P'

	  var header = new Buffer(9);
	  header.writeUInt8(0, 0);			// '\0'
	  header.writeUInt8(0x03, 1); 		// 0x03
	  header.writeUInt8(0, 2);
	  header.writeUInt8(0, 3);
	  header.writeUInt8(0, 4);
	  
	  header.writeUInt16LE(0x18, 5); 				// LanManager response length (always 0x18)
	  header.writeUInt16LE(0x18, 7); 				// LanManager response length (always 0x18)
	  header.writeUInt16LE(lmRepOffset, 9); 		// LanManager response offset
	  header.writeUInt8(0, 11);
	  header.writeUInt8(0, 12);
	  
	  header.writeUInt16LE(0x18, 13);				// NT response length (always 0x18)
	  header.writeUInt16LE(0x18, 15);				// NT response length (always 0x18)
	  header.writeUInt16LE(ntRespOffset, 17); 		// NT response offset TODO
	  header.writeUInt8(0, 19);
	  header.writeUInt8(0, 20);

	  header.writeUInt16LE(domain.length, 21);		// domain string length
	  header.writeUInt16LE(domain.length, 23);		// domain string length
	  header.writeUInt16LE(domainOffset, 25);		// domain string offset (always 0x40)
	  header.writeUInt8(0, 27);
	  header.writeUInt8(0, 28);

	  header.writeUInt16LE(username.length, 29);	// username string length
	  header.writeUInt16LE(username.length, 31);	// username string length
	  header.writeUInt16LE(usernameOffset, 33);		// username string offset
	  header.writeUInt8(0, 35);
	  header.writeUInt8(0, 36);
	  
	  header.writeUInt16LE(host.length, 37);		// host string length
	  header.writeUInt16LE(host.length, 39);		// host string length
	  header.writeUInt16LE(hostOffset, 41);			// host string offset
	  header.writeUInt8(0, 43);
	  header.writeUInt8(0, 44);
	  header.writeUInt8(0, 45);
	  header.writeUInt8(0, 46);
	  header.writeUInt8(0, 47);
	  header.writeUInt8(0, 48);
	  
	  var message = '';
	  header.writeUInt16LE(message.length, 49);		// message length TODO
	  header.writeUInt8(0, 50);
	  header.writeUInt8(0, 51);
	  
	  // flags 0x8201
	  header.writeUInt8(0x01, 52);
	  header.writeUInt8(0x82, 53);
	  
	  header.writeUInt8(0, 50);
	  header.writeUInt8(0, 51);
	  //
	  //
	  buffers.push(header);
	  buffers.push(domainBuffer);
	  buffers.push(usernameBuffer);
	  buffers.push(hostBuffer);
	  
	  var domainBuffer = new Buffer(domain.toUpperCase(), 'hex');
	  buffers.push(domainBuffer);
	  var domainBuffer = new Buffer(domain.toUpperCase(), 'hex');
	  buffers.push(domainBuffer);
	  
	  var buf = Buffer.concat(buffers);
	  var message = buf.toString('base64');

	  return message;
}


function handleType2Message(msg, passw) {
	

	var buf = new Buffer(msg, 'base64');
	console.log("Buf binary = "+ buf.toString('binary'));
	
	var $nonce = '';
	for (var i = 24; i < 32; i++){
		$nonce += buf.readUInt8(i);
	}
	console.log("nonce="+$nonce);
	
	var lm_hash_passw = helpers.hashLanManagerPassword(passw);
	var nt_hash_passw = helpers.hashNtPassword(passw);

	return {
		lmResp: calc_resp(lm_hash_passw, nonce),
		ntResp: calc_resp(nt_hash_passw, nonce)
	}
}



exports.authenticate = function(_, proxy){

	
	function sendToProxy(_,msg){
		var request = streams.httpRequest(_, {
			protocol: "http:",
			method: "GET",
			host: proxy.host,
			port: proxy.port,
			path: "/",
			headers: {
				Connection: "Keep-Alive",
				"Proxy-Connection": "keep-alive",
				Authorization: "NTLM " + msg,
				"Proxy-Authorization": "NTLM " + msg
			}
		});

		return request.end().response(_);
	}
	
	//
	if (!proxy.user) throw new Error("request error: no proxy user for NTLM authentication");
	
	var resps, msg1, msg2, msg3;
	
	msg1 = buildType1Message(proxy.domain, proxy.workstation);

	var response1 = sendToProxy(_,msg1);
	console.log("Request 1 Headers: "+JSON.stringify(response1.headers,null,2));
	console.log("Response 1 status code: "+response1.statusCode);
	
	
	var proxyAuth = response1.headers["proxy-authenticate"];
	if (proxyAuth && proxyAuth.indexOf('NTLM ') === 0){
		msg2 = proxyAuth.split('NTLM ')[1];
		resps = handleType2Message(msg2, proxy.password);
	}else{
		throw new Error ("Type-2 message not received.");
	}
	
	msg3 = buildType3Message(proxy.user, proxy.domain, proxy.workstation, resps.lmResp, ntResp)
	
	var response2 = sendToProxy(_,msg3);
	console.log("Request 2 Headers: "+JSON.stringify(response2.headers,null,2));
	console.log("Response 2 status code: "+response2.statusCode);
	
	
	return "NTLM " ;	
	
}


