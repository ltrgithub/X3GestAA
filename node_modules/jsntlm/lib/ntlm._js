"use strict";

var util = require("util");
var crypto = require('crypto');
var streams = require('streamline/lib/streams/server/streams');

function buildType1Message(ntDomain, workstation) {
	
    var host = workstation.indexOf('.') !== -1 ? workstation.split('.')[0] : workstation;          // host string (ASCII)
    var domain = ntDomain.indexOf('.') !== -1 ? ntDomain.split('.')[0] : ntDomain;;          // domain string (ASCII)
  
	  var domainLength = domain.length;
	  var hostLength = host.length;
	  
	  var buffers = [];
	  buffers.push(new Buffer('NTLMSSP', 'ascii'));

	  var header = new Buffer(9);
	  header.writeUInt8(0, 0);
	  header.writeUInt8(0x1, 1);
	  header.writeUInt8(0, 2);
	  header.writeUInt8(0, 3);
	  header.writeUInt8(0, 4);
	  header.writeUInt8(0x03, 5);
	  header.writeUInt8(0xb2, 6);
	  header.writeUInt8(0, 7);
	  header.writeUInt8(0, 8);

	  buffers.push(header);

	  var lenBuffer = new Buffer(16);
	  lenBuffer.writeUInt16LE(domainLength, 0);
	  lenBuffer.writeUInt16LE(domainLength, 2);
	  lenBuffer.writeUInt16LE(32 + hostLength, 4);
	  lenBuffer.writeUInt8(0, 6);
	  lenBuffer.writeUInt8(0, 7);
	  lenBuffer.writeUInt16LE(hostLength, 8);
	  lenBuffer.writeUInt16LE(hostLength, 10);
	  lenBuffer.writeUInt16LE(32, 12);
	  lenBuffer.writeUInt8(0, 14);
	  lenBuffer.writeUInt8(0, 15);

	  buffers.push(lenBuffer);

	  var hostBuffer = new Buffer(host.toUpperCase(), 'ascii');
	  var domainBuffer = new Buffer(domain.toUpperCase(), 'ascii');

	  buffers.push(hostBuffer);
	  buffers.push(domainBuffer);

	  var buf = Buffer.concat(buffers);
	  var message = buf.toString('base64');

	  return message;
}

function handleType2Message(msg, passw) {
	
	function calcHashesPasswd(passw, nonce){

		
	    
	    

	    
	    /* create responses */

	    var lm_resp = [], nt_resp = [];
//	    calc_resp(lm_hpw, nonce, lm_resp);
//	    calc_resp(nt_hpw, nonce, nt_resp);
	}
	

    

	
	var buf = new Buffer(msg, 'base64');
	console.log("Buf binary = "+ buf.toString('binary'));
	
	var $nonce = '';
	for (var i = 24; i < 32; i++){
		$nonce += buf.readUInt8(i);
	}
	
	console.log("nonce="+$nonce);
	calcHashesPasswd(passw, $nonce)
}



exports.authenticate = function(_, proxy){


	
	

	
	
	if (!proxy.user) throw new Error("request error: no proxy user for NTLM authentication");
	
	var msg1 = buildType1Message(proxy.domain, proxy.workstation);
	var request = streams.httpRequest(_, {
		protocol: "http:",
		method: "GET",
		host: proxy.host,
		port: proxy.port,
		path: "/",
		headers: {
			Connection: "Keep-Alive",
			"Proxy-Connection": "keep-alive",
			Authorization: "NTLM " + msg1,
			"Proxy-Authorization": "NTLM " + msg1

		}
	});

	var response = request.end().response(_);

	console.log("Resp status code: "+response.statusCode);
	console.log("Req 1 Headers: "+JSON.stringify(response.headers,null,2));
	
	var msg2;
	var proxyAuth = response.headers["proxy-authenticate"];
	if (proxyAuth && proxyAuth.indexOf('NTLM ') === 0){
		msg2 = proxyAuth.split('NTLM ')[1];
		handleType2Message(msg2, proxy.password);
	}else{
		throw new Error ("Type-2 message not received.");
	}
	
	
	
	
	
	return "NTLM " ;	
	
}


