/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, test: false, strictEqual: false, start: false, stop: false */ 
"use strict";

var module = QUnit.module;
var ntlmEngine = require('jsntlm/lib/ntlmEngine');
var CipherGen = ntlmEngine.CipherGen;
var helpers = require('jsntlm/lib/helpers');

module('jsntlm');

var target = "DOMAIN";
var username = "user";
var password =  "SecREt01";
var challenge = new Buffer("0123456789abcdef", "hex");
var targetInformation = new Buffer("02000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d0000000000", "hex");
var clientNonce = new Buffer("ffffff0011223344", "hex");

test("LM Response", function() {
	var oemPasswd = new Buffer(password.toUpperCase(), "utf8").toString('hex');
	var expectedPasswd = "5345435245543031";
	strictEqual(oemPasswd, expectedPasswd, "Password ok");
	
	var expectedLmResponse = "c337cd5cbd44fc9782a667af6d427c6de67c20c2d3e77c56";
	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
	var lmResponse = gen.getLMResponse();
	strictEqual(lmResponse.toString("hex"), expectedLmResponse, "LM Response ok");
});

test("NTLM Response", function() {
	var oemPasswd = new Buffer(password, "ucs2").toString('hex');
	var expectedPasswd = "53006500630052004500740030003100";
	strictEqual(oemPasswd, expectedPasswd, "Password ok");
	
	var expectedNtlmResponse = "25a98c1c31e81847466b29b2df4680f39958fb8c213a9cc6";
	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
	var ntlmResponse = gen.getNTLMResponse();
	strictEqual(ntlmResponse.toString("hex"), expectedNtlmResponse, "NTLM Response ok");
});

test("NTLM Hashes", function() {
	var unicodePasswd = new Buffer(password, "ucs2").toString('hex');
	var expectedPasswd = "53006500630052004500740030003100";
	strictEqual(unicodePasswd, expectedPasswd, "Password ok");
	
	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
	var ntlmHash = gen.getNTLMHash();
	strictEqual(ntlmHash.toString('hex'), "cd06ca7c7e10c99b1d33b7485a2ed808", "NTLM Hash OK");
	var ntlmv2Hash = gen.getNTLMv2Hash();
	strictEqual(ntlmv2Hash.toString('hex'), "04b8e0ba74289cc540826bab1dee63ae", "NTLMV2 Hash OK");
});

test("NTLM V2 Response", function() {
	var clientNonce = new Buffer("ffffff0011223344", "hex");
	var forcedTime = new Date("Tue Jun 17 2003 12:00:00 GMT+0200").getTime();
	strictEqual(forcedTime, 1055844000000, "Forced datetime OK");
	
	var gen = new CipherGen(target, username, password, challenge, target, targetInformation, clientNonce, clientNonce);
	
	var expectedTimestamp = "0090d336b734c301";
	var timestamp = gen.getTimestamp(forcedTime);
	strictEqual(timestamp.toString("hex"), expectedTimestamp, "Generate timestamp OK");
	
	
	var blob = gen.getNTLMv2Blob(forcedTime);
	var ExpectedBlobAndChallenge = "0123456789abcdef01010000000000000090d336b734c301ffffff00112233440000000002000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d000000000000000000";
	var blobAndChallenge = Buffer.concat([challenge, blob]);
	strictEqual(blobAndChallenge.toString("hex"), ExpectedBlobAndChallenge, "Concatenate challenge and blob OK");

	var ntlmv2Response = gen.getNTLMv2Response(forcedTime);
	var expectedNtlmv2response = "cbabbca713eb795d04c97abc01ee498301010000000000000090d336b734c301ffffff00112233440000000002000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d000000000000000000";
	strictEqual(ntlmv2Response.toString("hex"), expectedNtlmv2response, "NTLMV2 Response OK");	
});

test("LM V2 Response", function() {
	var gen = new CipherGen(target, username, password, challenge, target, targetInformation, clientNonce, clientNonce);

	var lmv2Response = gen.getLMv2Response();
	var expectedLmv2response = "d6e6152ea25d03b7c6ba6629c2d6aaf0ffffff0011223344";
	strictEqual(lmv2Response.toString("hex"), expectedLmv2response, "LMV2 Response OK");
});


// Remains work on this test

//test("Generate Type 3 Message", function() {
//
//	var domain = "TESTNT";
//	var user = "test";
//	var password = "test1234";
//	var workstation = "MEMBER";
//	var msg2 = new Buffer("4e544c4d53535000020000000c000c003000000035828980514246973ea892c10000000000000000460046003c00000054004500530054004e00540002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d0000000000", 'hex').toString('base64');
//	
//	var expected = "4e544c4d5353500003000000180018006000000076007600780000000c000c0040000000080008004c0000000c000c0054000000";
//	var msg3b64 = ntlmEngine.generateType3Msg(user,password,domain,workstation, msg2);
//
//	// Don't check complete msg because client nonce is unknow in the specification and we can't reproduce the same responses...
//	var msg3 = new Buffer(msg3b64, 'base64').slice(0, 52).toString('hex');
//	strictEqual(msg3, expected, "Message 3 ok");
//});