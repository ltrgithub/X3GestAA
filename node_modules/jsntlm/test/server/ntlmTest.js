/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, test: false, strictEqual: false, start: false, stop: false */ 
"use strict";


var module = QUnit.module;
var ntlmEngine = require('jsntlm/lib/ntlmEngine');
var CipherGen = ntlmEngine.CipherGen;




var BYTES_PER_LINE = 16;
var MIN_LINE_LENGTH = 7+2 + (BYTES_PER_LINE*3);
var LINE_LENGTH = 7+2 + (BYTES_PER_LINE*4);
function block2buffer(blocks) {
    var nextByteNumber = 0;
    var data = [];
    for (var i in blocks) {
        var inLine = blocks[i];
        inLine = inLine.trim();

        if (inLine.length === 0) continue;
        if (inLine.length < MIN_LINE_LENGTH || inLine.length > LINE_LENGTH) {
            throw new Error("Can't parse line[" + i + "] invalid length: " + inLine.length + " (" + inLine + ")");
        } else if (inLine.length < LINE_LENGTH && i < blocks.length-1) {
            throw new Error("Can't parse line[" + i + "] previous line was last: " + inLine);
        }
        if (inLine.charAt(7) !== ':') {
            throw new Error("Can't parse line[" + i + "]: - no ':' " + inLine);
        }
        var byteNumberString = inLine.substring(0, 7);
        var byteNumber = parseInt(byteNumberString, 16);
        nextByteNumber = byteNumber + BYTES_PER_LINE;

        var dataString = inLine.substring(7+2, MIN_LINE_LENGTH-1);
        data.push(new Buffer(dataString.replace(/ /g, ""), "hex"));
    }
    return Buffer.concat(data);
}



var USER_NAME = "User";
var DOMAIN_NAME = "Domain";
var SERVER_NAME = "Server";
var WORKSTATION_NAME = "COMPUTER";
var PASSWORD = "Password";


var RANDOM_SESSION_KEY = block2buffer([
"0000000: 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 UUUUUUUUUUUUUUUU"
]);

var TIME = block2buffer([
"0000000: 00 00 00 00 00 00 00 00                         ........"
]);

var CLIENT_CHALLENGE = block2buffer([
"0000000: aa aa aa aa aa aa aa aa                         ........"
]);

var SERVER_CHALLENGE = block2buffer([
"0000000: 01 23 45 67 89 ab cd ef                         .#Eg...."
]);


module('jsntlm');


test("testNTLMv2Authentication", function() {
    var negotiateFlagBytes = block2buffer([
            "0000000: 33 82 8a e2                                     3..."
    ]);
    console.log("FLAGS: "+negotiateFlagBytes.toString("hex"));
    var negotiateFlags = negotiateFlagBytes.readUInt32LE(0);

    // AV Pair 1 - NetBIOS Server name:
    var avPair1DomainName = new Buffer("Server", "ucs2");
    var expectedavPair1DomainName = block2buffer([
        "0000000: 53 00 65 00 72 00 76 00 65 00 72 00             S.e.r.v.e.r."
    ]);
    
	strictEqual(avPair1DomainName.toString('hex'), expectedavPair1DomainName.toString('hex'), "AV Pair 1 Domain Name OK");

    var avPair1Info = new Buffer(4);
    avPair1Info.writeUInt16LE(0x0002, 0);
    avPair1Info.writeUInt16LE(avPair1DomainName.length, 2);

    // AV Pair 2 - NetBIOS Domain name:
    var avPair2DomainName = new Buffer("Domain", "ucs2");
    var expectedavPair2DomainName = block2buffer([
        "0000000: 44 00 6f 00 6d 00 61 00 69 00 6e 00             D.o.m.a.i.n."
    ]);
    
	strictEqual(avPair2DomainName.toString('hex'), expectedavPair2DomainName.toString('hex'), "AV Pair 2 Domain Name OK");

    var avPair2Info = new Buffer(4);
    avPair2Info.writeUInt16LE(0x0002, 0);
    avPair2Info.writeUInt16LE(avPair2DomainName.length, 2);
    

    // 4.2.4.1 Calculations
    // 4.2.4.1.1 NTOWFv2() and LMOWFv2()
    var gen = new CipherGen(DOMAIN_NAME, USER_NAME, PASSWORD);
    var ntowfv2 = gen.getNTLMv2Hash();
    console.log("HASH: "+ntowfv2);	
    var expectedNtowfv2 = block2buffer([
        "0000000: 0c 86 8a 40 3b fd 7a 93 a3 00 1e f2 2e f0 2e 3f ...@;..........?"
    ]);

	strictEqual(ntowfv2.toString('hex'), expectedNtowfv2.toString('hex'), "NTLMV2 Hash OK");
	
	
	
	var TARGET_INFO = Buffer.concat([avPair2Info, avPair2DomainName, avPair1Info, avPair1DomainName, new Buffer("00000000", "hex")]);
	
	console.log("TARGET INFO 1: "+TARGET_INFO.toString('hex'));
	
	
	var expectedSessionBaseKey = block2buffer([
	  "0000000: 8d e4 0c ca db c1 4a 82 f1 5c b0 ad 0d e9 5c a3 ......J........."
	]);
//	
//	strictEqual(TARGET_INFO.toString('hex'), expectedSessionBaseKey.toString('hex'), "Target informations OK");

	gen = new CipherGen(DOMAIN_NAME, USER_NAME, PASSWORD, SERVER_CHALLENGE, SERVER_NAME, TARGET_INFO, CLIENT_CHALLENGE, CLIENT_CHALLENGE);

	var lMv2Hash = gen.getLMv2Hash();
	var ntlmv2Hash = gen.getNTLMv2Hash();
	var ntlmv2Response = gen.getNTLMv2Response(TIME);
	var lmv2Response = gen.getLMv2Response();
	var ntlm2SessionResponse = gen.getNTLM2SessionResponse();
	var lm2SessionResponse = gen.getLM2SessionResponse();
	var ntlmv2UserSessionKey = gen.getNTLMv2UserSessionKey();
	var ntlm2SessionResponseUserSessionKey = gen.getNTLM2SessionResponseUserSessionKey();
	var lanManagerSessionKey = gen.getLanManagerSessionKey();


    // 4.2.4.2 Results
    // 4.2.4.2.1 LMv2 Response
    var expectedLMv2Response = block2buffer([
            "0000000: 86 c3 50 97 ac 9c ec 10 25 54 76 4a 57 cc cc 19 ..P.....%TvJW...",
            "0000010: aa aa aa aa aa aa aa aa                         ........"
    ]);
    strictEqual(lmv2Response.toString('hex'), expectedLMv2Response.toString('hex'), "LMV2 Response OK");

    var expectedNTLMv2Response = block2buffer([
            "0000000: 68 cd 0a b8 51 e5 1c 96 aa bc 92 7b eb ef 6a 1c h...Q......{..j."
    ]);
    

    strictEqual(ntlmv2Response.toString('hex'), expectedNTLMv2Response.toString('hex'), "NTLMV2 Response OK");

	
	console.log('EXPECTED SessionBaseKey: '+expectedSessionBaseKey.toString('hex'));
	console.log('EXPECTED LMV2: '+expectedLMv2Response.toString('hex'));
	console.log('EXPECTED NTLMV2: '+expectedNTLMv2Response.toString('hex'));

	 var expectedTemp = new Buffer("01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 aa aa aa aa aa aa aa aa 00 00 00 00 02 00 0c 00 44 00 6f 00 6d 00 61 00 69 00 6e 00 01 00 0c 00 53 00 65 00 72 00 76 00 65 00 72 00 00 00 00 00 00 00 00 00".replace(/ /g, ""),"hex");
	console.log("EXPECTED TEMP: "+expectedTemp.toString('hex'));
	
	
	
	console.log('getNTLMv2ResponseBIS: '+gen.getNTLMv2ResponseBIS(TIME).toString('hex'));
	
//	console.log('lMv2Hash: '+lMv2Hash.toString('hex'));
//	console.log('ntlmv2Hash: '+ntlmv2Hash.toString('hex'));
	console.log('ntlmv2Response: '+ntlmv2Response.toString('hex'));
//	
//	console.log('lmv2Response: '+lmv2Response.toString('hex'));
//	console.log('ntlm2SessionResponse: '+ntlm2SessionResponse.toString('hex'));
//	console.log('lm2SessionResponse: '+lm2SessionResponse.toString('hex'));
//	console.log('ntlmv2UserSessionKey: '+ntlmv2UserSessionKey.toString('hex'));
//	console.log('ntlm2SessionResponseUserSessionKey: '+ntlm2SessionResponseUserSessionKey.toString('hex'));
//	console.log('lanManagerSessionKey: '+lanManagerSessionKey.toString('hex'));


	
	
	
});

//var target = "DOMAIN";
//var username = "user";
//var password =  "SecREt01";
//var challenge = new Buffer("0123456789abcdef", "hex");
//var targetInformation = new Buffer("02000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d0000000000", "hex");
//var clientNonce = new Buffer("ffffff0011223344", "hex");
//
//test("LM Response", function() {
//	var oemPasswd = new Buffer(password.toUpperCase(), "utf8").toString('hex');
//	var expectedPasswd = "5345435245543031";
//	strictEqual(oemPasswd, expectedPasswd, "Password ok");
//	
//	var expectedLmResponse = "c337cd5cbd44fc9782a667af6d427c6de67c20c2d3e77c56";
//	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
//	var lmResponse = gen.getLMResponse();
//	strictEqual(lmResponse.toString("hex"), expectedLmResponse, "LM Response ok");
//});
//
//test("NTLM Response", function() {
//	var oemPasswd = new Buffer(password, "ucs2").toString('hex');
//	var expectedPasswd = "53006500630052004500740030003100";
//	strictEqual(oemPasswd, expectedPasswd, "Password ok");
//	
//	var expectedNtlmResponse = "25a98c1c31e81847466b29b2df4680f39958fb8c213a9cc6";
//	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
//	var ntlmResponse = gen.getNTLMResponse();
//	strictEqual(ntlmResponse.toString("hex"), expectedNtlmResponse, "NTLM Response ok");
//});
//
//test("NTLM Hashes", function() {
//	var unicodePasswd = new Buffer(password, "ucs2").toString('hex');
//	var expectedPasswd = "53006500630052004500740030003100";
//	strictEqual(unicodePasswd, expectedPasswd, "Password ok");
//	
//	var gen = new CipherGen(target, username, password, challenge, target, targetInformation);
//	var ntlmHash = gen.getNTLMHash();
//	strictEqual(ntlmHash.toString('hex'), "cd06ca7c7e10c99b1d33b7485a2ed808", "NTLM Hash OK");
//	var ntlmv2Hash = gen.getNTLMv2Hash();
//	strictEqual(ntlmv2Hash.toString('hex'), "04b8e0ba74289cc540826bab1dee63ae", "NTLMV2 Hash OK");
//});
//
//test("NTLM V2 Response", function() {
//	var clientNonce = new Buffer("ffffff0011223344", "hex");
//	var forcedTime = new Date("Tue Jun 17 2003 12:00:00 GMT+0200").getTime();
//	strictEqual(forcedTime, 1055844000000, "Forced datetime OK");
//	
//	var gen = new CipherGen(target, username, password, challenge, target, targetInformation, clientNonce, clientNonce);
//	
//	var expectedTimestamp = "0090d336b734c301";
//	var timestamp = gen.getTimestamp(forcedTime);
//	strictEqual(timestamp.toString("hex"), expectedTimestamp, "Generate timestamp OK");
//	
//	
//	var blob = gen.getNTLMv2Blob(forcedTime);
//	var ExpectedBlobAndChallenge = "0123456789abcdef01010000000000000090d336b734c301ffffff00112233440000000002000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d000000000000000000";
//	var blobAndChallenge = Buffer.concat([challenge, blob]);
//	strictEqual(blobAndChallenge.toString("hex"), ExpectedBlobAndChallenge, "Concatenate challenge and blob OK");
//
//	var ntlmv2Response = gen.getNTLMv2Response(forcedTime);
//	var expectedNtlmv2response = "cbabbca713eb795d04c97abc01ee498301010000000000000090d336b734c301ffffff00112233440000000002000c0044004f004d00410049004e0001000c005300450052005600450052000400140064006f006d00610069006e002e0063006f006d00030022007300650072007600650072002e0064006f006d00610069006e002e0063006f006d000000000000000000";
//	strictEqual(ntlmv2Response.toString("hex"), expectedNtlmv2response, "NTLMV2 Response OK");	
//});
//
//test("LM V2 Response", function() {
//	var gen = new CipherGen(target, username, password, challenge, target, targetInformation, clientNonce, clientNonce);
//	var lmv2Response = gen.getLMv2Response();
//	var expectedLmv2response = "d6e6152ea25d03b7c6ba6629c2d6aaf0ffffff0011223344";
//	strictEqual(lmv2Response.toString("hex"), expectedLmv2response, "LMV2 Response OK");
//});












// Remains work on this test

//test("Generate Type 3 Message", function() {
//
//	var domain = "TESTNT";
//	var user = "test";
//	var password = "test1234";
//	var workstation = "MEMBER";
//	var msg2 = new Buffer("4e544c4d53535000020000000c000c003000000035828980514246973ea892c10000000000000000460046003c00000054004500530054004e00540002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d0000000000", 'hex').toString('base64');
//	
//	var expected = "4e544c4d5353500003000000180018006000000076007600780000000c000c0040000000080008004c0000000c000c0054000000";
//	var msg3b64 = ntlmEngine.generateType3Msg(user,password,domain,workstation, msg2);
//
//	// Don't check complete msg because client nonce is unknow in the specification and we can't reproduce the same responses...
//	var msg3 = new Buffer(msg3b64, 'base64').slice(0, 52).toString('hex');
//	strictEqual(msg3, expected, "Message 3 ok");
//});
