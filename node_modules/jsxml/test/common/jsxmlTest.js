var module = QUnit.module;

var jsxml = require("jsxml");

module('jsxml');

function parseTest(xml, js, skipRT) {
	deepEqual(jsxml.parse(xml), js, "parse " + xml);
	if (!skipRT) strictEqual(jsxml.stringify(jsxml.parse(xml)), xml, "roundtrip " + xml);
}

function rtTest(name, xml, indent, result) {
	strictEqual(jsxml.stringify(jsxml.parse(xml), {
		indent: indent
	}), result || xml, name);
}

test('simple tag without attributes', 6, function() {
	parseTest('<a/>', {
		a: {}
	});
	parseTest('<a></a>', {
		a: ""
	});
	parseTest('<a>5</a>', {
		a: "5"
	});
});
test('simple tag with attributes', 6, function() {
	parseTest('<a x="3" y="4">5</a>', {
		a: {
			$: {
				x: "3",
				y: "4"
			},
			$value: "5"
		}
	});
	parseTest('<a x="3"></a>', {
		a: {
			$: {
				x: "3"
			},
			$value: ""
		}
	});
	parseTest('<a x="3"/>', {
		a: {
			$: {
				x: "3"
			},
		}
	});
});
test('entities', 4, function() {
	parseTest('<a x="a&gt;b&apos;c&lt;"/>', {
		a: {
			$: {
				x: "a>b'c<"
			},
		}
	});
	parseTest('<a>a&gt;b&apos;c&lt;</a>', {
		a: "a>b'c<"
	});
});
test('children', 6, function() {
	parseTest('<a><b>3</b><c>4</c></a>', {
		a: {
			b: "3",
			c: "4"
		}
	});
	parseTest('<a><b x="2">3</b><c>4</c></a>', {
		a: {
			b: {
				$: {
					x: "2"
				},
				$value: "3"
			},
			c: "4"
		}
	});
	parseTest('<a><b>3</b><b>4</b><c>5</c></a>', {
		a: {
			b: ["3", "4"],
			c: "5"
		}
	});
});

test('cdata', 4, function() {
	parseTest('<a><![CDATA[<abc>]]></a>', {
		a: {
			$cdata: "<abc>"
		}
	});
	parseTest('<a><![CDATA[]]></a>', {
		a: {
			$cdata: ""
		}
	});
});

test('comments in text', 1, function() {
	parseTest('<a>abc <!-- <b>def</b> --> ghi</a>', {
		a: "abc  ghi"
	}, true);
});

test('reformatting', 7, function() {
	rtTest('spaces outside', ' \r\n\t <a/> \t', null, '<a/>');
	rtTest('spaces inside tag', '<a  x="v1"\y="v2"\t/>', null, '<a x="v1" y="v2"/>');
	rtTest('spaces around children', '<a> <b />\n<c\n/>\t</a>', null, '<a><b/><c/></a>');
	rtTest('spaces and cdata', '<a> \n<![CDATA[ <abc>\n\t]]>\t</a>', null, '<a><![CDATA[ <abc>\n\t]]></a>');
	rtTest('spaces in value', '<a> </a>', null, '<a> </a>');
	rtTest('more spaces in value', '<a> \r\n\t</a>', null, '<a> &#0d;&#0a;&#09;</a>');
	rtTest('indentation', '<a><b x="3">5</b><c><d/></c></a>', '\t', '<a>\n\t<b x="3">5</b>\n\t<c>\n\t\t<d/>\n\t</c>\n</a>');
});

function canonTest(xml, result, options) {
	var res = jsxml.canon(jsxml.parse(xml), options);
	deepEqual(res, result, "canon " + xml);
}

test('canonicalization', 10, function() {
	canonTest('<a/>', {
		a: {}
	});
	canonTest('<a xmlns="url1" x="3"><b>4</b><c xmlns="url1" y="5">6</c><d xmlns="url2" z="7">8</d></a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$properties: {
					a: {
						$properties: {
							x: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							b: {
								$type: "application/x-string"
							},
							c: {
								$type: "application/json",
								$prototype: "c"
							}
						}
					},
					c: {
						$properties: {
							y: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							$value: {
								$type: "application/x-string"
							}
						}
					}
				}
			},
			"url2": {
				$prefix: "$2",
				$properties: {
					d: {
						$properties: {
							z: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							$value: {
								$type: "application/x-string"
							},
						}
					},
				}
			},
		},
		$1: {
			a: {
				x: '3',
				b: '4',
				c: {
					y: '5',
					$value: '6',
				},
				$2: {
					d: {
						z: '7',
						$value: '8',
					},
				}
			}
		},
	});
	canonTest('<n1:a xmlns:n1="url1" x="3"><n1:b>4</n1:b><n1:c xmlns="url1" y="5">6</n1:c><n2:d xmlns:n2="url2" z="7">8</n2:d></n1:a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$sourcePrefix: "n1",
				$properties: {
					a: {
						$properties: {
							x: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							b: {
								$type: "application/x-string"
							},
							c: {
								$type: "application/json",
								$prototype: "c"
							}
						}
					},
					c: {
						$properties: {
							y: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							$value: {
								$type: "application/x-string"
							}
						}
					}
				}
			},
			"url2": {
				$prefix: "$2",
				$sourcePrefix: "n2",
				$properties: {
					d: {
						$properties: {
							z: {
								$type: "application/x-string",
								$xmlAtb: true
							},
							$value: {
								$type: "application/x-string"
							},
						}
					},
				}
			},
		},
		$1: {
			a: {
				x: '3',
				b: '4',
				c: {
					y: '5',
					$value: '6',
				},
				$2: {
					d: {
						z: '7',
						$value: '8',
					},
				}
			}
		},
	});
	canonTest('<a><b>2</b><b>3</b></a>', {
		a: {
			b: ["2", "3"]
		}
	});
	canonTest('<a xmlns="url1"><b>2</b><b>3</b></a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$properties: {
					a: {
						$properties: {
							b: {
								$type: "application/x-array",
								$item: {
									$type: "application/x-string"
								}
							}
						}
					}
				}
			}
		},
		$1: {
			a: {
				b: ["2", "3"]
			}
		}
	});
	canonTest('<a><b><c>2</c></b><b><c>3</c></b></a>', {
		a: {
			b: [{
				c: "2"
			}, {
				c: "3"
			}]
		}
	});
	canonTest('<n1:a xmlns:n1="url1"><n1:b><n1:c>2</n1:c></n1:b><n1:b><n1:c>3</n1:c></n1:b></n1:a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$sourcePrefix: "n1",
				$properties: {
					a: {
						$properties: {
							b: {
								$type: "application/x-array",
								$item: {
									$type: "application/json",
									$prototype: "b"
								}
							}
						}
					},
					b: {
						$properties: {
							c: {
								$type: "application/x-string"
							}
						}
					}
				}
			}
		},
		$1: {
			a: {
				b: [{
					c: "2"
				}, {
					c: "3"
				}]
			}
		}
	});
	canonTest('<n1:a xmlns:n1="url1" x="2"/>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$sourcePrefix: "n1",
				$properties: {
					a: {
						$properties: {
							x: {
								$type: "application/x-string",
								$xmlAtb: true
							}
						}
					}
				}
			},
		},
		$1: {
			a: {
				x: "2",
			}
		}
	});
	canonTest('<n1:a xmlns:n1="url1"><n1:b x="2"/></n1:a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$sourcePrefix: "n1",
				$properties: {
					a: {
						$properties: {
							b: {
								$type: "application/json",
								$prototype: 'b'
							}
						}
					},
					b: {
						$properties: {
							x: {
								$type: "application/x-string",
								$xmlAtb: true
							}
						}
					}
				}
			},
		},
		$1: {
			a: {
				b: {
					x: "2"
				}
			}
		}
	});
	canonTest('<n1:a xmlns:n1="url1" xmlns:n2="url2"><n1:b x="2" n2:y="3"/></n1:a>', {
		$xmlns: {
			"url1": {
				$prefix: "$1",
				$sourcePrefix: "n1",
				$properties: {
					a: {
						$properties: {
							b: {
								$type: "application/json",
								$prototype: 'b'
							}
						}
					},
					b: {
						$properties: {
							x: {
								$type: "application/x-string",
								$xmlAtb: true
							}
						}
					}
				}
			},
			"url2": {
				$prefix: "$2",
				$sourcePrefix: "n2",
				$properties: {
					y: {
						$type: "application/x-string",
						$xmlAtb: true
					}
				}
			},
		},
		$1: {
			a: {
				b: {
					x: "2",
					$2: {
						y: "3",
					}
				}
			}
		}
	});
});