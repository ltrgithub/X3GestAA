var mongodb = require('mongodb');

exports = module.exports = Object.create(mongodb);
return;

exports.Db = function(databaseName, serverConfig, options) {
	this.obj = new mongodb.Db(databaseName, serverConfig, options);
}
var dbProto = exports.Db.prototype;

dbProto.open = function(_) {
	this.obj.open(~_);
	return this;
}
dbProto.collection = function(name, _) {
	return new Collection(this.obj.collection(name, ~_));
}
dbProto.count = function(name, _) {
	return new Collection(this.obj.collection(name, ~_));
}
Object.defineProperty(dbProto, "state", {
	get: function() { return this.obj.state; }
});

function Collection(obj) {
	this.obj = obj;
}
var colProto = Collection.prototype;

colProto.insert = function(docs, options, _) {
	if (typeof options === "function") this.obj.insert(docs, ~_);
	else this.obj.insert(docs, options, ~_);
	return this;
}
colProto.remove = function(selector, options, _) {
	if (typeof options === "function") this.obj.remove(selector, ~_);
	else this.obj.remove(selector, options, ~_);
	return this;
}
colProto.save = function(doc, options, _) {
	if (typeof options === "function") this.obj.save(doc, ~_);
	else this.obj.save(doc, options, ~_);
	return this;
}
colProto.update = function(selector, doc, options, _) {
	if (typeof options === "function") this.obj.update(selector, doc, ~_);
	else this.obj.update(selector, doc, options, ~_);
	return this;
}
colProto.distinct = function(key, query, _) {
	if (typeof query === "function") this.obj.distinct(key, ~_);
	else this.obj.distinct(key, query, ~_);
	return this;
}
colProto.count = function(query, _) {
	if (typeof query === "function") return this.obj.count(~_);
	else return this.obj.count(query, ~_);
}
colProto.drop = function(_) {
	this.obj.drop(~_);
	return this;
}
colProto.find = function() {
	return new Cursor(this.obj.find.apply(this.obj, arguments));
}

function Cursor(obj) {
	this.obj = obj;
}
var curProto = Cursor.prototype;

curProto.toArray = function(_) {
	return this.obj.toArray(~_);
}
curProto.nextObject = function(_) {
	return this.obj.nextObject(~_);
}
