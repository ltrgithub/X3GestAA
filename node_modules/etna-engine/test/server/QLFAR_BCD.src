#<AdxTL>@(#)8.0.0.0 $Revision$
Local Char CC(20)

TOTO = func TESTSUITE()
Infbox TOTO

End

# ---------- TEST_SUITE uni function       -------------------------
# ------------------------------------------------------------------

Funprog TESTSUITE()

    Call ADD_TESTCASE("TEST_BCD", "Test base", 29) From AXUNIT
    Call ADD_TESTCASE("TEST_CROSS", "Test base cross", 32) From AXUNIT
    Call ADD_TESTCASE("TEST_FUNCTIONS", "Test function", 74) From AXUNIT

End func AXUNIT.RUN_TESTSUITE("Types", "Common")

# -----------------------TEST_UNI -------------------------------------
# #####################################################################

Subprog TEST_BCD( )
Local Decimal A,B,C

A = 5.5
B = 3.2
Call CHECK_EQUAL( A, 5.5 ) From AXUNIT
Call CHECK_EQUAL( B, 3.2 ) From AXUNIT

C = A+B
Call CHECK_EQUAL( C, 8.7 ) From AXUNIT
C = A-B
Call CHECK_EQUAL( C, 2.3 ) From AXUNIT
C = A*B
Call CHECK_EQUAL( C, 17.60 ) From AXUNIT
Call CHECK_EQUAL( A/B, 5.5/3.2 ) From AXUNIT


A = 1
B = 1
Call CHECK_EQUAL( A and B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT

A = 1
B = 1
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A or B, 0 ) From AXUNIT

A = 1
B = 1
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A xor B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT

Call CHECK_EQUAL( 6.2 > 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 > 6.2, 0 ) From AXUNIT
Call CHECK_EQUAL( 6.2 >= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 6.2, 0 ) From AXUNIT

Call CHECK_EQUAL( 6.2 < 5.3, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 < 6.2, 1 ) From AXUNIT
Call CHECK_EQUAL( 6.2 <= 5.3, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <= 6, 1 ) From AXUNIT

Call CHECK_EQUAL( 5.3 = 6.2, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 = 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 6.2, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 5.3, 0 ) From AXUNIT

End

Subprog TEST_CROSS( )
Local Decimal A,C
Local Integer B

A = 5.5
B = 3
Call CHECK_EQUAL( A, 5.5 ) From AXUNIT
Call CHECK_EQUAL( B, 3 ) From AXUNIT

C = A+B
Call CHECK_EQUAL( C, 8.5 ) From AXUNIT
C = A-B
Call CHECK_EQUAL( C, 2.5 ) From AXUNIT
C = A*B
Call CHECK_EQUAL( C, 16.5 ) From AXUNIT
Call CHECK_EQUAL( A/B, 55/30 ) From AXUNIT


A = 1.5
B = 1
Call CHECK_EQUAL( A and B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT

A = 1.5
B = 1
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A or B, 0 ) From AXUNIT

A = 1.5
B = 1
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A xor B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT

A = 16.5
B = 7
C = mod(A, B)
Call CHECK_EQUAL( C, 2.5 ) From AXUNIT
A = 16.5
B = 7
C = mod(B, A)
Call CHECK_EQUAL( C, B ) From AXUNIT
C = mod(B, 0)
Call CHECK_EQUAL( C, B ) From AXUNIT

A = 16.9
B = 7
C = mod(A, B)
Call CHECK_EQUAL( C, 2.9 ) From AXUNIT

A = 4
B = 3
C = A^B
Call CHECK_EQUAL( C, 64 ) From AXUNIT

A = 4.3
B = 3.2
C = A^B
#Call CHECK_EQUAL( C, 106.4385765 ) From AXUNIT



Call CHECK_EQUAL( 6.2 > 5, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 > 6, 0 ) From AXUNIT
Call CHECK_EQUAL( 6.2 >= 5, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 6, 0 ) From AXUNIT

Call CHECK_EQUAL( 6.2 < 5, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 < 6, 1 ) From AXUNIT
Call CHECK_EQUAL( 6.2 <= 5, 0 ) From AXUNIT
#Call CHECK_EQUAL( 5.3 <= 5.3, 1 ) From AXUNIT
#Call CHECK_EQUAL( 5.3 <= 6, 1 ) From AXUNIT

Call CHECK_EQUAL( 5.3 = 6, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 = 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 6, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 5.3, 0 ) From AXUNIT

End


Subprog CHECK_EVAL(STR, RESULT)
Call CHECK_EQUAL(evalue(STR), RESULT)
End

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume


Subprog TEST_FUNCTIONS
Integer EX
Local Decimal V0,V1
Local Decimal AI(1..)
Local Integer I
V0 = 5.3 : Call CHECK_EQUAL(abs(V0), V0)
V0 = -5.3 : Call CHECK_EQUAL(abs(V0), -V0)
V0 = 0 : Call CHECK_EQUAL(abs(V0), V0)

V0 = 100.60
V1 = 7
Call CHECK_EQUAL(mod(V0,V1) , 2.6)
V0 = -100.6
V1 = 7
Call CHECK_EQUAL(mod(V0,7) ,-2.6)

Call CHECK_EQUAL(sgn(0), 0)
Call CHECK_EQUAL(sgn(3.4), 1)
Call CHECK_EQUAL(sgn(-3.4), -1)

Call CHECK_EQUAL(sqr(31.36), 5.6)
Call CHECK_EQUAL(sqr(568.584025), 23.8450)

Call CHECK_EQUAL(ar2(5.269), 5.27)
Call CHECK_EQUAL(ar2(5.261), 5.26)
Call CHECK_EQUAL(ar2(-5.269), -5.27)
Call CHECK_EQUAL(ar2(-5.261), -5.26)

Call CHECK_EQUAL(arr(5.269, 1), 5)
Call CHECK_EQUAL(arr(-5.269, 1), -5)


Call CHECK_EQUAL(fix(3.233), 3)
Call CHECK_EQUAL(fix(3.9), 3)

Call CHECK_EQUAL(fix(-3.233), -3)
Call CHECK_EQUAL(fix(-3.9), -3)

Call CHECK_EQUAL(val("3.2"), 3.2)
Call CHECK_EQUAL(val("-3.6"), -3.6)

Call CHECK_EVAL("1.3 and 1.5", 1)
Call CHECK_EVAL("1.6 and 0", 0)
Call CHECK_EVAL("0 and 1", 0)
Call CHECK_EVAL("0 and 0", 0)

Call CHECK_EVAL("not(1.5=1.5)", 0)
Call CHECK_EVAL("not(1.9=2.0)", 1)

Call CHECK_EVAL("1.5 or 1.2", 1)
Call CHECK_EVAL("1.2 or 0", 1)
Call CHECK_EVAL("0 or 1.6", 1)
Call CHECK_EVAL("0 or 0", 0)

Call CHECK_EVAL("1.6 xor 1.4", 0)
Call CHECK_EVAL("1.4 xor 0", 1)
Call CHECK_EVAL("0 xor 1.2", 1)
Call CHECK_EVAL("0 xor 0", 0)

Call CHECK_EQUAL(anp(7.5,3.2), 210)

Call CHECK_EQUAL(cnp(7.5,3.2), 35)

#Call CHECK_EQUAL(fac(6), 720)

Call CHECK_EQUAL(ar2(avg(3.236,5.25,2.12,7.96,9.9,8.12)), 6.1)
Call CHECK_EQUAL(ar2(avg(2.5,3.6,4.48,5.2,6.89,7.12)), 4.97)

I = 1 : AI(I) =  2.9
I+= 1 : AI(I) =  3.241
I+= 1 : AI(I) =  4.12
I+= 1 : AI(I) =  5.89
I+= 1 : AI(I) =  6.36
I+= 1 : AI(I) =  7.36
Call CHECK_EQUAL(ar2(avg(AI)), 4.98)

Call CHECK_EQUAL(find(2.3,3.6,5.6,2.3,7.99,9.1,8.1), 3)
Call CHECK_EQUAL(find(1.4,3.3,5.63,2.36,1.3,9.3,8), 0)
Call CHECK_EQUAL(find(8.99,3.2,5.3,2.6,7.9,9.1,8.99), 6)
Call CHECK_EQUAL(find(3.2,3.2,5.3,2.6,7.9,9.1,8.99), 1)

Local Decimal AD(1..6)
I = 1 : AD(I) =  3.6
I+= 1 : AD(I) =  5.2
I+= 1 : AD(I) =  2.9
I+= 1 : AD(I) =  7.1
I+= 1 : AD(I) =  9.9
I+= 1 : AD(I) =  8.1
Call CHECK_EQUAL(find(2.9, AD), 3)
Call CHECK_EQUAL(find(1, AD), 0)
Call CHECK_EQUAL(find(8.1, AD), 6)
Call CHECK_EQUAL(find(3.6, AD), 1)


Local Decimal BI(1..)
I=  1 : BI(I) =  3.63
I+= 1 : BI(I) =  5.36
I+= 1 : BI(I) =  2.363
I+= 1 : BI(I) =  7.2
I+= 1 : BI(I) =  9.698
I+= 1 : BI(I) =  8.45
Call CHECK_EQUAL(find(2.363,BI), 3)
Call CHECK_EQUAL(find(1,BI), 0)
Call CHECK_EQUAL(find(8.45,BI), 6)
Call CHECK_EQUAL(find(3.63,BI), 1)


Local Decimal CI(0..5)
I = 0 : CI(I) =  3.36
I+= 1 : CI(I) =  5.1415
I+= 1 : CI(I) =  2.55
I+= 1 : CI(I) =  7.336
I+= 1 : CI(I) =  9.322
I+= 1 : CI(I) =  8.336
Call CHECK_EQUAL(find(2.55,CI), 3)
Call CHECK_EQUAL(find(1,CI), 0)
Call CHECK_EQUAL(find(8.336,CI), 6)
Call CHECK_EQUAL(find(3.36,CI), 1)


Local Decimal DI(0..)
I = 0 : DI(I) =  3.36
I+= 1 : DI(I) =  5.321
I+= 1 : DI(I) =  2.666
I+= 1 : DI(I) =  7.115
I+= 1 : DI(I) =  9.326
I+= 1 : DI(I) =  8.121
Call CHECK_EQUAL(find(2.666,DI), 3)
Call CHECK_EQUAL(find(1,DI), 0)
Call CHECK_EQUAL(find(8.121,DI), 6)
Call CHECK_EQUAL(find(3.36,DI), 1)


Call CHECK_EQUAL(max(3.36,5.145,2.3458,7.65458,8.15246,8.15245), 8.15246)
I = 1 : AI(I) =  3.36
I+= 1 : AI(I) =  5.2154
I+= 1 : AI(I) =  2.1215
I+= 1 : AI(I) =  7.1215
I+= 1 : AI(I) =  9.125
I+= 1 : AI(I) =  9.124
Call CHECK_EQUAL(max(AI), 9.125)

Call CHECK_EQUAL(min(3.58,5.232,2.115,7.115,9.1558,8.1155), 2.115)
I = 1 : AI(I) =  3.36
I+= 1 : AI(I) =  5.489
I+= 1 : AI(I) =  2.1545
I+= 1 : AI(I) =  7.15456
I+= 1 : AI(I) =  9.12
I+= 1 : AI(I) =  8.1545
Call CHECK_EQUAL(min(AI), 2.1545)

Call CHECK_EQUAL(prd(1.3,2.6,3.6,4.6,5.9), 330.23952)
Local Decimal AD5(1..5)
I = 1 : AD5(I) =  1.3
I+= 1 : AD5(I) =  2.6
I+= 1 : AD5(I) =  3.6
I+= 1 : AD5(I) =  4.6
I+= 1 : AD5(I) =  5.9
Call CHECK_EQUAL(prd(AD5), 330.23952)


Call CHECK_EQUAL(sum(1.3,2.36,3.115,4.115,5.130,6.12166,7.112), 29.25366)
I = 1 : AI(I) =  1.3
I+= 1 : AI(I) =  2.36
I+= 1 : AI(I) =  3.115
I+= 1 : AI(I) =  4.115
I+= 1 : AI(I) =  5.130
I+= 1 : AI(I) =  6.12166
I+= 1 : AI(I) =  7.112
Call CHECK_EQUAL(sum(AI), 29.25366)

I = 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6
I+= 1 : AI(I) =  I+5.6

Call CHECK_EQUAL(uni(AI), 0)
AI(4) = 1+5.6
Call CHECK_EQUAL(uni(AI), 4)

I = 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
I+= 1 : AI(I) =  5.6+I
Call CHECK_EQUAL(var(AI), 4)

Call CHECK_EQUAL(var(6.6,7.6,8.6,9.6,10.6,11.6,12.6), 4)
Call CHECK_EQUAL(var(5.36,10.2,15.36,20.36,25.6,30.34,35.36), 100.7547265306122448979591836735)

End

