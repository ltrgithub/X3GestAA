#<AdxTL>@(#)8.0.0.0 $Revision$
Local Char CC(20)

TOTO = func TESTSUITE()
Infbox TOTO

End

# ---------- TEST_SUITE uni function       -------------------------
# ------------------------------------------------------------------

Funprog TESTSUITE()

    Call ADD_TESTCASE("TEST_BCD", "Test 1", 1) From AXUNIT

End func AXUNIT.RUN_TESTSUITE("Types", "Common")

# -----------------------TEST_UNI -------------------------------------
# #####################################################################

Subprog TEST_BCD( )
Local Decimal A,B,C

A = 5.5
B = 3.2
Call CHECK_EQUAL( A, 5.5 ) From AXUNIT
Call CHECK_EQUAL( B, 3.2 ) From AXUNIT

C = A+B
Call CHECK_EQUAL( C, 8.7 ) From AXUNIT
C = A-B
Call CHECK_EQUAL( C, 2.3 ) From AXUNIT
C = A*B
Call CHECK_EQUAL( C, 17.60 ) From AXUNIT
Call CHECK_EQUAL( A/B, 5.5/3.2 ) From AXUNIT


A = 1
B = 1
Call CHECK_EQUAL( A and B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A and B, 0 ) From AXUNIT

A = 1
B = 1
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A or B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A or B, 0 ) From AXUNIT

A = 1
B = 1
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT
B = 0
Call CHECK_EQUAL( A xor B, 1 ) From AXUNIT
A = 0
Call CHECK_EQUAL( A xor B, 0 ) From AXUNIT

Call CHECK_EQUAL( 6.2 > 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 > 6.2, 0 ) From AXUNIT
Call CHECK_EQUAL( 6.2 >= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 >= 6.2, 0 ) From AXUNIT

Call CHECK_EQUAL( 6.2 < 5.3, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 < 6.2, 1 ) From AXUNIT
Call CHECK_EQUAL( 6.2 <= 5.3, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <= 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <= 6, 1 ) From AXUNIT

Call CHECK_EQUAL( 5.3 = 6.2, 0 ) From AXUNIT
Call CHECK_EQUAL( 5.3 = 5.3, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 6.2, 1 ) From AXUNIT
Call CHECK_EQUAL( 5.3 <> 5.3, 0 ) From AXUNIT

End