#<AdxTL>@(#)8.0.0.0 $Revision$

ST = HEAPDMP( )
FREEINSTANCE
adxmpr=adxmpr

Local Char FIC(255)

#Call SETUP
TOTO = func TESTSUITE()
GTRACE = "QLFAR_INSTANCES_"+GUSER
Call LEC_TRACE From LECFIC
#Call TEARDOWN

End


Funprog TESTSUITE()
Local Char OVF(128)
Local Char OVS(128)
Local Char RES(255)
Local Char IRS(2)

OVF = adxovf
OVS = adxovs
IRS = adxirs

adxovs = ""
adxovf = ""
adxirs = chr$(10)



Call ADD_TESTCASE("TESTSUB", "Instance in a subprog", 6) From AXUNIT
Call ADD_TESTCASE("AFFECTATION", "Classic properties assignation", 19) From AXUNIT
Call ADD_TESTCASE("CELLULE", "Test stack", 3) From AXUNIT
Call ADD_TESTCASE("STCEXT", "Test stcexist", 3) From AXUNIT

RES = func AXUNIT.RUN_TESTSUITE("Instances", "Common")

adxovf = OVF
adxovs = OVS
adxirs = IRS

End RES


Subprog SETUP
  Call CREATE_TST( )
  adxmpr=adxmpr
End

Subprog TEARDOWN
 Call DELETE_TST( )
 adxmpr=adxmpr
End


#########################################################################
# TESTSUB
#########################################################################
Subprog TESTSUB( )
Local Integer I
Local Instance TST5 Using ZXCSTRU3
TST5 = NewInstance ZXCSTRU3 AllocGroup null


TST5.BBB = "Init chaine"
For I = 1 To 11
    TST5.AAA(I) = I
Next

Call CHECK_EQUAL( TST5.BBB, "Init chaine" ) From AXUNIT

For I=1 To 5
  Call CHECK_EQUAL( TST5.AAA(I), I ) From AXUNIT
Next

FreeGroup TST5

End


# #######################################################################
# AFFECTATION
# #######################################################################
Subprog AFFECTATION( )

Local Instance TST0 Using ZXCSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null
TST0.AAA(1)= 0
TST0.BBB = "Init chaine"

For I = 1 To 11
    TST0.AAA(I) = I
Next

# DYNAMIc array
For I = 1 To 11
    TST0.HHH(I) = I
Next

Call CHECK_EQUAL( TST0.BBB, "Init chaine" ) From AXUNIT

For I=1 To 5
  Call CHECK_EQUAL( TST0.AAA(I), I ) From AXUNIT
Next

For I=1 To 11
  Call CHECK_EQUAL( TST0.HHH(I), I ) From AXUNIT
Next

TST0.DDD(1) = NewInstance ZXDSTRU3 AllocGroup TST0
TST0.DDD(2) = NewInstance ZXDSTRU3 AllocGroup TST0

TST0.DDD(1).M = 1
TST0.DDD(2).M = 2

For I=1 To 2
  Call CHECK_EQUAL( TST0.DDD(I).M, I ) From AXUNIT
Next

FreeGroup TST0
End


#########################################################################
Subprog CELLULE( )
#########################################################################
Local Instance MYSTACK Using ZXSTACK
Local Instance MYCELL Using ZXCELL

MYSTACK = NewInstance ZXSTACK AllocGroup null

MYCELL = NewInstance ZXCELL ALLOCGROUP MYSTACK
MYCELL.NO = 1
MYCELL.NAME = "toto"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = NewInstance ZXCELL AllocGroup MYSTACK
MYCELL.NO = 2
MYCELL.NAME = "tata"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = NewInstance ZXCELL AllocGroup MYSTACK
MYCELL.NO = 3
MYCELL.NAME = "tutu"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "tutu" )  From AXUNIT

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "tata" )  From AXUNIT

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "toto" )  From AXUNIT


FREEGROUP MYSTACK
End

#########################################################################
Subprog STCEXT( )
#########################################################################

I = objectExist( "", "", "ZXCSTRU3" )
Call CHECK_EQUAL( I, 1 )  From AXUNIT

I = objectExist( "","", "ZZCSTRU4" )
Call CHECK_EQUAL( I, 0 )  From AXUNIT

End



# CREATE_TST
# ----------------------------------------------------
Subprog CREATE_TST
Local Integer I
Local Char STC(255)

# ZXCELL --------------------------------------------------
STC = filpath("STC","ZXCELL","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer NO" Using [FST]
Wrseq "Char NAME(20)" Using [FST]
Wrseq "INSTANCE NXCELL Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq " " Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZSTACK -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXSTACK","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "INSTANCE STACK Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PUSH( CELL )" Using [FST]
Wrseq "Variable INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "Local Integer I" Using [FST]
Wrseq "CELL.NXCELL = THIS.STACK" Using [FST]
Wrseq "this.STACK = CELL" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD POP( )" Using [FST]
Wrseq "Local INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "CELL = THIS.STACK" Using [FST]
Wrseq "THIS.STACK = THIS.STACK.NXCELL" Using [FST]
Wrseq "CELL.NXCELL = NULL" Using [FST]
Wrseq "End CELL" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXCSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXCSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer AAA(1..11) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 0    " Using [FST]
Wrseq "    THIS.AAA(5) = 5" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "Local Integer TESTDD" Using [FST]
Wrseq "" Using [FST]
Wrseq "TESTDD=8 " Using [FST]
Wrseq "" Using [FST]
Wrseq "OLDV = V" Using [FST]
Wrseq "If FMET THIS.AAA.CONTROL( )" Using [FST]
Wrseq " THIS.ISREADONLY = 0" Using [FST]
Wrseq " STAT = FMET THIS.AAA.PROPAGATE( ) " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INIT" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONTROL( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PROPAGATE( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "Local Integer J" Using [FST]
Wrseq "J = THIS.AAA(11)" Using [FST]
Wrseq "THIS.AAA(11) = J+1" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Integer HHH(0..) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "" Using [FST]
Wrseq "    #HHH(I) = I" Using [FST]
Wrseq "    THIS.HHH(8) = 8" Using [FST]
Wrseq "End" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Char BBB(20)" Using [FST]
Wrseq "Decimal CCC {" Using [FST]
Wrseq "METHOD INI0( A )" Using [FST]
Wrseq "Value Integer A" Using [FST]
Wrseq 'THIS.BBB = "INI0"' Using [FST]
Wrseq "THIS.CCC = A+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD INI1( B )" Using [FST]
Wrseq "Value Integer B" Using [FST]
Wrseq "THIS.BBB = 'INI1'" Using [FST]
Wrseq "THIS.CCC = B" Using [FST]
Wrseq "End THIS.CCC+1" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI2( C )" Using [FST]
Wrseq "Value Integer C" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI3  (C)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI3( D )" Using [FST]
Wrseq "Value Integer D" Using [FST]
Wrseq "THIS.BBB = 'INI2-3'" Using [FST]
Wrseq "THIS.CCC = D+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Decimal C" Using [FST]
Wrseq "    C = THIS.CCC" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Instance DDD(1..) Using ZXDSTRU3" Using [FST]
Wrseq "Instance FFF(1..2) Using ZXDSTRU3" Using [FST]
Wrseq "Char EEE(20)(1..2)" Using [FST]
Wrseq "Integer GGG(1..5,1..3)" Using [FST]
Wrseq "Clbfile IIII(0)" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD ZXCSTRU3( N )" Using [FST]
Wrseq "Value Integer N" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "# variation sur SETBBB" Using [FST]
Wrseq "METHOD SETBBB0( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB1( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End THIS.BBB" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB2( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    CALLMET this.SETBBB0( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB3( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.SETBBB1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB4( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.CCC.INI1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB5( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI0  ( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM0( VALU, I )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "Value Integer I" Using [FST]
Wrseq "If (THIS.DDD(I) = Null)" Using [FST]
Wrseq "    THIS.DDD(I) = NEWINSTANCE ZXDSTRU3 AllocGroup This" Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "CALLMET THIS.DDD(I).SETM  ( THIS, VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SYSSNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SYSSNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD WHOAMI( V )" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "If (dim([R]THIS))" Using [FST]
Wrseq "    Default [R],[F],[L],[S],[V]" Using [FST]
Wrseq "    V = 1" Using [FST]
Wrseq "Else" Using [FST]
Wrseq "    V = 2 " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXDSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------

STC = filpath("STC","ZXDSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer M" Using [FST]
Wrseq "Decimal N" Using [FST]
Wrseq "Integer PPP" Using [FST]
Wrseq "Char QQQ(20)(1..3) {" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Char V()" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVC = V" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Date RRR {" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Date V" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVD = V" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "INSTANCE O Using ZXCSTRU3" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM( UP, Z )" Using [FST]
Wrseq "Variable INSTANCE UP Using ZXCSTRU3" Using [FST]
Wrseq "Value Integer Z" Using [FST]
Wrseq "" Using [FST]
Wrseq "THIS.M = Z+UP.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

VV = "valstc "-nomap(0)-"ZXCELL"
System RS = VV

VV = "valstc "-nomap(0)-"ZXSTACK"
System RS = VV

VV = "valstc "-nomap(0)-"ZXCSTRU3"
System RS = VV

VV = "valstc "-nomap(0)-"ZXDSTRU3"
System RS = VV

End

Subprog DELETE_TST
Local Char FIC(255)
Local Integer J

FIC = filpath("STC","ZXCELL","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCELL","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCELL"'

FIC = filpath("STC","ZXSTACK","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXSTACK","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXSTACK"'



FIC = filpath("STC","ZXCSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCSTRU3"'

FIC = filpath("STC","ZXDSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXDSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXDSTRU3"'

End

# -----------------------VALIDATION- --------------------------------
# ###################################################################
Funprog MYVALP( CL )
Value Char CL()
Local Integer TYP
Local Char VV(250)
Local Char RS(250)

VV = "valstc -p"-nomap(0)-CL
System RS = VV
TYP = val(RS)
If (TYP = 0)
    ADXOVE = RS
Endif
End TYP
