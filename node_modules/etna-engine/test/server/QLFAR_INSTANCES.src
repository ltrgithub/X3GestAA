#<AdxTL>@(#)8.0.0.0 $Revision$

ST = HEAPDMP( )
FREEINSTANCE
adxmpr=adxmpr

Local Char FIC(255)

#Call SETUP
TOTO = func TESTSUITE()
GTRACE = "QLFAR_INSTANCES_"+GUSER
Call LEC_TRACE From LECFIC
#Call TEARDOWN

End


Funprog TESTSUITE()
Local Char OVF(128)
Local Char OVS(128)
Local Char RES(255)
Local Char IRS(2)

OVF = adxovf
OVS = adxovs
IRS = adxirs

adxovs = ""
adxovf = ""
adxirs = chr$(10)



Call ADD_TESTCASE("TESTSUB", "Instance in a subprog", 6) From AXUNIT
Call ADD_TESTCASE("AFFECTATION", "Classic properties assignation", 19) From AXUNIT
Call ADD_TESTCASE("TSTFIND", "Test of the find function", 4) From AXUNIT
Call ADD_TESTCASE("TSTFNC", "Test system functions", 15) From AXUNIT
Call ADD_TESTCASE("METHOD0", "Test method functiogn 0", 10) From AXUNIT
Call ADD_TESTCASE("METHOD1", "Test method function 1", 6) From AXUNIT
Call ADD_TESTCASE("METHOD2", "Test method function 2", 4) From AXUNIT
Call ADD_TESTCASE("RAZFNC", "Test raz instruction", 21) From AXUNIT
Call ADD_TESTCASE("CELLULE", "Test stack", 3) From AXUNIT
Call ADD_TESTCASE("STCEXT", "Test stcexist", 3) From AXUNIT
Call ADD_TESTCASE("SNAPSHOT0", "Test snapshot 0", 4) From AXUNIT
Call ADD_TESTCASE("SNAPSHOT1", "Test snapshot 1", 10) From AXUNIT
Call ADD_TESTCASE("SNAPSHOT2", "Test snapshot 2", 65) From AXUNIT
Call ADD_TESTCASE("ACCESSOR0", "Test accessor 0", 7) From AXUNIT
Call ADD_TESTCASE("ACCESSOR1", "Test accessor 1", 7) From AXUNIT
Call ADD_TESTCASE("SYSSNAPSHOT0", "Test syssnapshot 0", 5) From AXUNIT
Call ADD_TESTCASE("SYSSNAPSHOT1", "Test syssnapshot 1", 10) From AXUNIT
Call ADD_TESTCASE("READONLY", "Test readonly", 10) From AXUNIT

RES = func AXUNIT.RUN_TESTSUITE("Instances", "Common")

adxovf = OVF
adxovs = OVS
adxirs = IRS

End RES


Subprog SETUP
  Call CREATE_TST( )
  adxmpr=adxmpr
End

Subprog TEARDOWN
 Call DELETE_TST( )
 adxmpr=adxmpr
End


#########################################################################
# TESTSUB
#########################################################################
Subprog TESTSUB( )
Local Integer I
Local Instance TST5 Using ZXCSTRU3
TST5 = NewInstance ZXCSTRU3 AllocGroup null


TST5.BBB = "Init chaine"
For I = 1 To 11
    TST5.AAA(I) = I
Next

Call CHECK_EQUAL( TST5.BBB, "Init chaine" ) From AXUNIT

For I=1 To 5
  Call CHECK_EQUAL( TST5.AAA(I), I ) From AXUNIT
Next

FreeGroup TST5

End


# #######################################################################
# AFFECTATION
# #######################################################################
Subprog AFFECTATION( )

Local Instance TST0 Using ZXCSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null
TST0.AAA(1)= 0
TST0.BBB = "Init chaine"

For I = 1 To 11
    TST0.AAA(I) = I
Next

# DYNAMIc array
For I = 1 To 11
    TST0.HHH(I) = I
Next

Call CHECK_EQUAL( TST0.BBB, "Init chaine" ) From AXUNIT

For I=1 To 5
  Call CHECK_EQUAL( TST0.AAA(I), I ) From AXUNIT
Next

For I=1 To 11
  Call CHECK_EQUAL( TST0.HHH(I), I ) From AXUNIT
Next

TST0.DDD(1) = NewInstance ZXDSTRU3 AllocGroup TST0
TST0.DDD(2) = NewInstance ZXDSTRU3 AllocGroup TST0

TST0.DDD(1).M = 1
TST0.DDD(2).M = 2

For I=1 To 2
  Call CHECK_EQUAL( TST0.DDD(I).M, I ) From AXUNIT
Next

FreeGroup TST0
End

# TSTFIND
# #########################################################################
Subprog TSTFIND( )
Local Integer I
Local Integer TT(0..2)
Local Instance TST0 Using ZXCSTRU3
Local Instance TST1(1..) Using ZXCSTRU3

For I=0 To 2
    TT(I) = I
Next

TST0 = NewInstance ZXCSTRU3 AllocGroup null
For I=1 To 5
    TST0.AAA(I) = I
Next

TST1(1) = NewInstance ZXCSTRU3 AllocGroup TST1
TST1(2) = NewInstance ZXCSTRU3 AllocGroup TST1
TST1(3) = NewInstance ZXCSTRU3 AllocGroup TST1

TST1(1).AAA(1) = 1
TST1(2).AAA(1) = 2
TST1(3).AAA(1) = 3

TST1.DDD(1) = NewInstance ZXDSTRU3  AllocGroup TST1
TST1.DDD(2) = NewInstance ZXDSTRU3  AllocGroup TST1

TST1.DDD(1).M = 1
TST1.DDD(2).M = 2


I = find(1, TT)
Call CHECK_EQUAL( I, 2 ) From AXUNIT

I = find(2, TST0.AAA(1..3))
Call CHECK_EQUAL( I, 2 ) From AXUNIT

I = find(2, TST1(1..3).AAA(1))
Call CHECK_EQUAL( I, 2 ) From AXUNIT

I = find(2, TST1.DDD(1..2).M)
Call CHECK_EQUAL( I, 2 ) From AXUNIT

FreeGroup TST0
FreeGroup TST1
End


#########################################################################
Subprog TSTFNC( )
Local Instance TST0 Using ZXCSTRU3
Local Instance TST1(1..) Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3


Local Char CHA(255)
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null
TST0.DDD = NewInstance  ZXDSTRU3 AllocGroup TST0

CHA = TST0.ObjectType( )
Call CHECK_EQUAL( CHA, "ZXCSTRU3" ) From AXUNIT

CHA = TST0.DDD.ObjectType( )
Call CHECK_EQUAL( CHA, "ZXDSTRU3" ) From AXUNIT

#CHA = TST0.DDD.AllocGrp( )
#Call CHECK_EQUAL( CHA, "TOTO" ) From AXUNIT

I = TST0.ObjectNbs( )
Call CHECK_EQUAL( I, 9 ) From AXUNIT

I = ZXCSTRU3.ObjectNbs( )
Call CHECK_EQUAL( I, 9 ) From AXUNIT

I = TST0.DDD.ObjectNbs( )
Call CHECK_EQUAL( I, 6 ) From AXUNIT

I = ZXDSTRU3.ObjectNbs( )
Call CHECK_EQUAL( I, 6 ) From AXUNIT

CHA = TST0.ObjectVar( 1 )
Call CHECK_EQUAL( CHA, "AAA" ) From AXUNIT

CHA = TST0.DDD.ObjectVar( 1 )
Call CHECK_EQUAL( CHA, "M" ) From AXUNIT

I = dim(TST0.AAA)
Call CHECK_EQUAL( I, 11 ) From AXUNIT

I = dim(TST0.AAB)
Call CHECK_EQUAL( I, -1 ) From AXUNIT

TST1(1) = NewInstance ZXCSTRU3 AllocGroup null
I = type(TST1(1))
Call CHECK_EQUAL( I, 524 ) From AXUNIT

I = type(TST1(1).AAA)
Call CHECK_EQUAL( I, 4 ) From AXUNIT

I = type(TST1(1).ABB)
Call CHECK_EQUAL( I, -1 ) From AXUNIT


TST0.BBB= "Init chaine"
TST2 = TST0.clone
Call CHECK_EQUAL(TST2.BBB, "Init chaine")  From AXUNIT

FreeGroup TST0
FreeGroup TST1(1)

End


#########################################################################
Subprog METHOD0( )
Local Instance TST0 Using ZXCSTRU3
Local Instance TST1(1..) Using ZXCSTRU3
Local Char CHA(255)
Local Char CHA1(30)
Local Char CHA2(30)


TST0 = NewInstance ZXCSTRU3 AllocGroup null
Callmet TST0.SETBBB0  ( "AAA" )
Call CHECK_EQUAL(TST0.BBB,  "AAA Direct This" )  From AXUNIT


CHA = fmet TST0.SETBBB1  ( "AAA" )
Call CHECK_EQUAL( CHA, "AAA Direct This")  From AXUNIT


Callmet TST0.CCC.INI0  ( 1 )
Call CHECK_EQUAL( TST0.CCC, 2)  From AXUNIT
Call CHECK_EQUAL(TST0.BBB,  "INI0" )  From AXUNIT

D = fmet TST0.CCC.INI1  ( 1 )
Call CHECK_EQUAL( D, 2)  From AXUNIT
Call CHECK_EQUAL(TST0.BBB,  "INI1" )  From AXUNIT

TST1(1) = NewInstance ZXCSTRU3 AllocGroup TST1
TST1(2) = NewInstance ZXCSTRU3 AllocGroup TST1

Callmet TST1(1).SETBBB0( "AAA1" )
Callmet TST1(2).SETBBB0( "AAA2" )

Call CHECK_EQUAL( TST1(2).BBB,"AAA2 Direct This")  From AXUNIT
Call CHECK_EQUAL(TST1(1).BBB,  "AAA1 Direct This" )  From AXUNIT

CHA1 = fmet TST1(1).SETBBB1( "AAA1" )
CHA2 = fmet TST1(1).SETBBB1( "AAA2" )
Call CHECK_EQUAL( CHA1, "AAA1 Direct This")  From AXUNIT
Call CHECK_EQUAL( CHA2, "AAA2 Direct This")  From AXUNIT

FreeGroup TST0
FreeGroup TST1
End


#########################################################################
Subprog METHOD1( )
Local Instance TST0 Using ZXCSTRU3
Local Char CHA(255)

TST0 = NewInstance ZXCSTRU3 AllocGroup null
Callmet TST0.SETBBB2( "BBB" )
Call CHECK_EQUAL(TST0.BBB,  "BBB Direct This" )  From AXUNIT

CHA = fmet TST0.SETBBB3( "BBB" )
Call CHECK_EQUAL( CHA, "BBB Direct This")  From AXUNIT

D = fmet TST0.SETBBB4( 1 )
Call CHECK_EQUAL( D, 2)  From AXUNIT
Call CHECK_EQUAL(TST0.BBB,  "INI1" )  From AXUNIT

Callmet TST0.SETBBB5  ( 1 )
Call CHECK_EQUAL( TST0.CCC, 2)  From AXUNIT
Call CHECK_EQUAL(TST0.BBB,  "INI0" )  From AXUNIT

FreeInstance TST0
End


#########################################################################
Subprog METHOD2( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3

TST0 = NewInstance ZXCSTRU3 AllocGroup null

TST0.AAA(1) = 500
Callmet TST0.SETM0  ( 10, 1 )
Callmet TST0.SETM0  ( 20, 2 )

Call CHECK_EQUAL(TST0.DDD(1).M , 510)  From AXUNIT
Call CHECK_EQUAL(TST0.DDD(2).M,  520 )  From AXUNIT

Callmet TST0.CCC.INI2  ( 1 )
Call CHECK_EQUAL(TST0.CCC, 2)  From AXUNIT
Call CHECK_EQUAL(TST0.BBB,  "INI2-3" )  From AXUNIT


FREEGROUP TST0
End

#########################################################################
Subprog RAZFNC( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null
TST0.GGG(4,2) = 1
TST0.GGG(3,3) = 1
TST0.GGG(5,1) = 1
TST0.GGG(2,2) = 1
TST0.GGG(4,3) = 1

Raz TST0.GGG
Call CHECK_EQUAL(TST0.GGG(4,2),  0 )  From AXUNIT
Call CHECK_EQUAL(TST0.GGG(3,3),  0 )  From AXUNIT
Call CHECK_EQUAL(TST0.GGG(5,1),  0 )  From AXUNIT
Call CHECK_EQUAL(TST0.GGG(2,2),  0 )  From AXUNIT
Call CHECK_EQUAL(TST0.GGG(4,3),  0 )  From AXUNIT


For K=1 To 5
    For L=1 To 3
      Call CHECK_EQUAL(varinit( TST0.GGG, K, L ),  0 )  From AXUNIT
    Next
Next

TST0.GGG(4,2) = 1
TST0.GGG(3,3) = 1
TST0.GGG(5,1) = 1
TST0.GGG(2,2) = 1
TST0.GGG(4,3) = 1

FreeInstance TST0
Raz TST0
If TST0 = null
  I = 1
Endif
Call CHECK_EQUAL(I, 1 )  From AXUNIT

End

#########################################################################
Subprog CELLULE( )
#########################################################################
Local Instance MYSTACK Using ZXSTACK
Local Instance MYCELL Using ZXCELL

MYSTACK = NewInstance ZXSTACK AllocGroup null

MYCELL = NewInstance ZXCELL ALLOCGROUP MYSTACK
MYCELL.NO = 1
MYCELL.NAME = "toto"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = NewInstance ZXCELL AllocGroup MYSTACK
MYCELL.NO = 2
MYCELL.NAME = "tata"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = NewInstance ZXCELL AllocGroup MYSTACK
MYCELL.NO = 3
MYCELL.NAME = "tutu"
Callmet MYSTACK.PUSH  ( MYCELL )

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "tutu" )  From AXUNIT

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "tata" )  From AXUNIT

MYCELL = fmet MYSTACK.POP  ( )
Call CHECK_EQUAL( MYCELL.NAME, "toto" )  From AXUNIT


FREEGROUP MYSTACK
End

#########################################################################
Subprog STCEXT( )
#########################################################################

I = objectExist( "", "", "ZXCSTRU3" )
Call CHECK_EQUAL( I, 1 )  From AXUNIT

I = objectExist( "","", "ZZCSTRU4" )
Call CHECK_EQUAL( I, 0 )  From AXUNIT

End


#########################################################################
Subprog SNAPSHOT0( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null


TST0.AAA(1) = 5
TST0.snapshotEnabled = 1

I = TST0.snapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

TST0.AAA(1) = 6
I = TST0.snapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

TST0.snapshotEnabled = 0
TST2 = TST0.snapshot
I = 0
If (TST2 = null)
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

TST0.snapshotEnabled = 1
TST2 = TST0.snapshot
I = 0
If (TST2 <> null)
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

FreeInstance TST0

End


#########################################################################
Subprog SNAPSHOT1( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Instance TST4 Using ZXDSTRU3
Local Char FIELDS(20)(1..)
Local Integer I
Local Integer K

TST0 = NewInstance ZXCSTRU3 AllocGroup null

TST0.DDD(1) = NewInstance ZXDSTRU3 AllocGroup TST0
TST0.DDD(2) = NewInstance ZXDSTRU3 AllocGroup TST0

TST0.DDD(1).M = 1
TST0.DDD(1).O = TST0

TST0.DDD(2).M = 2
TST0.DDD(2).O = TST0

# test with extent copy
TST0.AAA(1) = 5
For I = 1 To 100
    Append TST0.IIII, "01234567890123456789"
Next

TST0.snapshotEnabled = 1

TST4 = TST0.snapshot.DDD(2)
TST0.DDD(2).M = 3
I = TST4.M
Call CHECK_NOTEQUAL( I, TST0.DDD(2).M )  From AXUNIT

TST0.AAA(1) = 6
I = TST0.snapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT
Call CHECK_EQUAL( len(TST0.IIII), len( TST0.snapshot.IIII) )  From AXUNIT
Call CHECK_EQUAL( TST0.snapshotEnabled, 1 )  From AXUNIT


Callmet TST0.SNAPAAA( I )
Call CHECK_EQUAL( I, 5 )  From AXUNIT

Callmet TST0.SNAPDDD( I )
Call CHECK_EQUAL( I, 2 )  From AXUNIT


I = TST0.revertToSnapshot

K = TST0.getModified( FIELDS )
Call CHECK_EQUAL( K, 0 )  From AXUNIT


I = TST0.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

I = TST0.DDD(2).M
Call CHECK_EQUAL( I, 2 )  From AXUNIT

FreeInstance TST0.DDD(2)
TST0.DDD(2) = null
I = TST0.freeSnapshot
TST0.snapshotEnabled = 0

TST2 = TST0.snapshot
I = 0
If (TST2 = null)
  I=1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

FREEGROUP TST0

End


#########################################################################
Subprog SNAPSHOT2( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Integer INI(1..5,1..3)
Local Integer I,K,L
Local Integer IND0(1..)
Local Integer IND1(1..)
Local Integer IND2(1..)
Local Integer IND3(1..)
Local Char FIELDS(20)(1..)


TST0 = NewInstance ZXCSTRU3  AllocGroup null

INI(4,2) = 1
INI(3,3) = 1
INI(5,1) = 1
INI(2,2) = 1
INI(4,3) = 1

TST0.snapshotEnabled=1
TST0.AAA(4) = 5
TST0.BBB = "toto"

TST0.GGG(4,2) = 1
TST0.GGG(3,3) = 1
TST0.GGG(5,1) = 1
TST0.GGG(2,2) = 1
TST0.GGG(4,3) = 1

For K=1 To 5
    For L=1 To 3
      Call CHECK_EQUAL( INI(K,L), TST0.GGG(K, L).modified )  From AXUNIT
    Next
Next

K = TST0.getModified( FIELDS , IND0, IND1, IND2, IND3)
Call CHECK_EQUAL( K, 7 )  From AXUNIT

Call CHECK_EQUAL( FIELDS(1), "AAA" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(2), "BBB" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(3), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(4), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(5), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(6), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(7), "GGG" )  From AXUNIT

Call CHECK_EQUAL( IND0(1), 4 )  From AXUNIT
Call CHECK_EQUAL( IND0(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND0(3), 5 )  From AXUNIT
Call CHECK_EQUAL( IND0(4), 2 )  From AXUNIT
Call CHECK_EQUAL( IND0(5), 4 )  From AXUNIT
Call CHECK_EQUAL( IND0(6), 3 )  From AXUNIT
Call CHECK_EQUAL( IND0(7), 4 )  From AXUNIT

Call CHECK_EQUAL( IND1(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND1(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND1(3), 1 )  From AXUNIT
Call CHECK_EQUAL( IND1(4), 2 )  From AXUNIT
Call CHECK_EQUAL( IND1(5), 2 )  From AXUNIT
Call CHECK_EQUAL( IND1(6), 3 )  From AXUNIT
Call CHECK_EQUAL( IND1(7), 3 )  From AXUNIT

Call CHECK_EQUAL( IND2(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(3), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(4), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(5), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(6), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(7), 0 )  From AXUNIT

Call CHECK_EQUAL( IND3(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(3), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(4), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(5), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(6), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(7), 0 )  From AXUNIT

TST2 = NewInstance ZXCSTRU3 ALLOCGROUP NULL
TST2.snapshotEnabled=1
TST2.HHH(1) = 1
TST2.HHH(3) = 1
TST2.HHH(5) = 1

For I = 1 To 5
     Call CHECK_EQUAL( TST2.HHH(I), TST2.HHH(I).modified )  From AXUNIT
Next

TST2.BBB = "tata"
K = TST2.getModified( FIELDS , IND0 )
Call CHECK_EQUAL( K, 4 )  From AXUNIT

Call CHECK_EQUAL( FIELDS(1), "BBB" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(2), "HHH" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(3), "HHH" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(4), "HHH" )  From AXUNIT


Call CHECK_EQUAL( IND0(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND0(2), 1 )  From AXUNIT
Call CHECK_EQUAL( IND0(3), 3 )  From AXUNIT
Call CHECK_EQUAL( IND0(4), 5 )  From AXUNIT



FREEINSTANCE TST0
FreeInstance TST2
End


#########################################################################
Subprog ACCESSOR0( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Decimal C
Global Integer OLDV
Local Integer I

TST0 = NewInstance ZXCSTRU3  AllocGroup TST0

TST0.getAccessorEnabled = 1
Call CHECK_NOTEQUAL( TST0.getAccessorEnabled, 0 )  From AXUNIT

I = TST0.AAA(5)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

TST0.setAccessorEnabled = 1
Call CHECK_NOTEQUAL( TST0.setAccessorEnabled, 0 )  From AXUNIT
TST0.AAA(5) = 2
Call CHECK_EQUAL( OLDV, 5 )  From AXUNIT

TST0.setAccessorEnabled = 0
Call CHECK_NOTEQUAL( TST0.setAccessorEnabled, 1 )  From AXUNIT

I = TST0.HHH(8)
Call CHECK_EQUAL( I, 8 )  From AXUNIT

C = TST0.CCC

TST0.getAccessorEnabled = 0
Call CHECK_EQUAL( TST0.getAccessorEnabled, 0 )  From AXUNIT

Kill [V]OLDV

FreeInstance TST0
End

#########################################################################
Subprog SYSSNAPSHOT0( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3  AllocGroup TST0


TST0.AAA(1) = 5
TST0.sysSnapshotEnabled = 1

I = TST0.sysSnapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

TST0.AAA(1) = 6
I = TST0.sysSnapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

TST0.sysSnapshotEnabled = 0
TST2 = TST0.sysSnapshot
I = 0
If (TST2 = null)
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

TST0.sysSnapshotEnabled = 1
TST2 = TST0.sysSnapshot
I = 0
If (TST2 <> null)
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

FreeInstance TST0

End


#########################################################################
Subprog SYSSNAPSHOT1( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Instance TST4 Using ZXDSTRU3
Local Char FIELDS(20)(1..)
Local Integer I
Local Integer K

TST0 = NewInstance ZXCSTRU3  AllocGroup null

TST0.DDD(1) = NewInstance ZXDSTRU3  AllocGroup TST0
TST0.DDD(2) = NewInstance ZXDSTRU3 AllocGroup TST0

TST0.DDD(1).M = 1
TST0.DDD(1).O = TST0

TST0.DDD(2).M = 2
TST0.DDD(2).O = TST0

# test with extent copy
TST0.AAA(1) = 5
For I = 1 To 100
    Append TST0.IIII, "01234567890123456789"
Next

TST0.sysSnapshotEnabled = 1

TST4 = TST0.sysSnapshot.DDD(2)
TST0.DDD(2).M = 3
I = TST4.M
Call CHECK_NOTEQUAL( I, TST0.DDD(2).M )  From AXUNIT

TST0.AAA(1) = 6
I = TST0.sysSnapshot.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT
Call CHECK_EQUAL( len(TST0.IIII), len( TST0.sysSnapshot.IIII) )  From AXUNIT
Call CHECK_EQUAL( TST0.sysSnapshotEnabled, 1 )  From AXUNIT


Callmet TST0.SYSSNAPAAA( I )
Call CHECK_EQUAL( I, 5 )  From AXUNIT

Callmet TST0.SYSSNAPDDD( I )
Call CHECK_EQUAL( I, 2 )  From AXUNIT

I = TST0.revertToSysSnapshot

K = TST0.getSysModified( FIELDS )
Call CHECK_EQUAL( K, 0 )  From AXUNIT


I = TST0.AAA(1)
Call CHECK_EQUAL( I, 5 )  From AXUNIT

I = TST0.DDD(2).M
Call CHECK_EQUAL( I, 2 )  From AXUNIT

FreeInstance TST0.DDD(2)
TST0.DDD(2) = null
I = TST0.freeSysSnapshot
TST0.sysSnapshotEnabled = 0

TST2 = TST0.sysSnapshot
I = 0
If (TST2 = null)
  I=1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

FreeGroup TST0

End


#########################################################################
Subprog SYSSNAPSHOT2( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3
Local Instance TST2 Using ZXCSTRU3
Local Integer INI(1..5,1..3)
Local Integer I,K,L
Local Integer IND0(1..)
Local Integer IND1(1..)
Local Integer IND2(1..)
Local Integer IND3(1..)
Local Char FIELDS(20)(1..)


TST0 = NewInstance ZXCSTRU3 AllocGroup null

INI(4,2) = 1
INI(3,3) = 1
INI(5,1) = 1
INI(2,2) = 1
INI(4,3) = 1

TST0.sysSnapshotEnabled=1
TST0.AAA(4) = 5
TST0.BBB = "toto"

TST0.GGG(4,2) = 1
TST0.GGG(3,3) = 1
TST0.GGG(5,1) = 1
TST0.GGG(2,2) = 1
TST0.GGG(4,3) = 1

For K=1 To 5
    For L=1 To 3
      Call CHECK_EQUAL( INI(K,L), TST0.GGG(K, L).sysModified )  From AXUNIT
    Next
Next

K = TST0.getSysModified( FIELDS , IND0, IND1, IND2, IND3)
Call CHECK_EQUAL( K, 7 )  From AXUNIT

Call CHECK_EQUAL( FIELDS(1), "AAA" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(2), "BBB" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(3), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(4), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(5), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(6), "GGG" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(7), "GGG" )  From AXUNIT

Call CHECK_EQUAL( IND0(1), 4 )  From AXUNIT
Call CHECK_EQUAL( IND0(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND0(3), 5 )  From AXUNIT
Call CHECK_EQUAL( IND0(4), 2 )  From AXUNIT
Call CHECK_EQUAL( IND0(5), 4 )  From AXUNIT
Call CHECK_EQUAL( IND0(6), 3 )  From AXUNIT
Call CHECK_EQUAL( IND0(7), 4 )  From AXUNIT

Call CHECK_EQUAL( IND1(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND1(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND1(3), 1 )  From AXUNIT
Call CHECK_EQUAL( IND1(4), 2 )  From AXUNIT
Call CHECK_EQUAL( IND1(5), 2 )  From AXUNIT
Call CHECK_EQUAL( IND1(6), 3 )  From AXUNIT
Call CHECK_EQUAL( IND1(7), 3 )  From AXUNIT

Call CHECK_EQUAL( IND2(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(3), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(4), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(5), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(6), 0 )  From AXUNIT
Call CHECK_EQUAL( IND2(7), 0 )  From AXUNIT

Call CHECK_EQUAL( IND3(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(2), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(3), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(4), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(5), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(6), 0 )  From AXUNIT
Call CHECK_EQUAL( IND3(7), 0 )  From AXUNIT

TST2 = NewInstance ZXCSTRU3 AllocGroup TST0
TST2.sysSnapshotEnabled = 1
TST2.HHH(1) = 1
TST2.HHH(3) = 1
TST2.HHH(5) = 1

For I = 1 To 5
     Call CHECK_EQUAL( TST2.HHH(I), TST2.HHH(I).sysModified )  From AXUNIT
Next

TST2.BBB = "tata"
K = TST2.getSysModified( FIELDS , IND0 )
Call CHECK_EQUAL( K, 4 )  From AXUNIT

Call CHECK_EQUAL( FIELDS(1), "BBB" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(2), "HHH" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(3), "HHH" )  From AXUNIT
Call CHECK_EQUAL( FIELDS(4), "HHH" )  From AXUNIT


Call CHECK_EQUAL( IND0(1), 0 )  From AXUNIT
Call CHECK_EQUAL( IND0(2), 1 )  From AXUNIT
Call CHECK_EQUAL( IND0(3), 3 )  From AXUNIT
Call CHECK_EQUAL( IND0(4), 5 )  From AXUNIT

FreeInstance TST0
FreeInstance TST2

End


#########################################################################
Subprog ACCESSOR1( )
#########################################################################

Global Char OLDVC(30)
Global Date OLDVD
Local Instance TST0 Using ZXCSTRU3
Local Instance TST3 Using ZXDSTRU3
Local Integer I

TST0 = NewInstance ZXCSTRU3 AllocGroup null
TST3 = NewInstance ZXDSTRU3 AllocGroup null

TST0.setAccessorEnabled = 1
TST0.AAA(5) = 1
TST0.AAA(6) = 1
TST0.AAA(8) = 1

TST0.setAccessorEnabled = 0

I = TST0.AAA(11)
Call CHECK_EQUAL( I, 3 )  From AXUNIT

TST3.setAccessorEnabled = 1
TST3.QQQ = "toto"
Call CHECK_EQUAL( OLDVC, "")  From AXUNIT

TST3.QQQ = "tata"
Call CHECK_EQUAL( OLDVC, "toto")  From AXUNIT

TST3.RRR = [01/01/2011]
I = 0
If (OLDVD = [0/0/0])
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

I = 0
TST3.RRR = [01/01/2012]
If (OLDVD = [01/01/2011])
  I = 1
Endif
Call CHECK_EQUAL( I, 1 )  From AXUNIT

TST3.setAccessorEnabled = 0

Kill [V]OLDVC
Kill [V]OLDVD

FreeInstance TST0
FreeInstance TST3
End

#########################################################################
Subprog READONLY( )
#########################################################################
Local Instance TST0 Using ZXCSTRU3

TST0 = NewInstance ZXCSTRU3 AllocGroup TST0

TST0.isReadonly = 1
Call CHECK_EQUAL( TST0.isReadonly, 1 )  From AXUNIT

TST0.isReadonly = 0
Call CHECK_EQUAL( TST0.isReadonly, 0 )  From AXUNIT

FreeInstance TST0
End



# CREATE_TST
# ----------------------------------------------------
Subprog CREATE_TST
Local Integer I
Local Char STC(255)

# ZXCELL --------------------------------------------------
STC = filpath("STC","ZXCELL","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer NO" Using [FST]
Wrseq "Char NAME(20)" Using [FST]
Wrseq "INSTANCE NXCELL Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq " " Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZSTACK -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXSTACK","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "INSTANCE STACK Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PUSH( CELL )" Using [FST]
Wrseq "Variable INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "Local Integer I" Using [FST]
Wrseq "CELL.NXCELL = THIS.STACK" Using [FST]
Wrseq "this.STACK = CELL" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD POP( )" Using [FST]
Wrseq "Local INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "CELL = THIS.STACK" Using [FST]
Wrseq "THIS.STACK = THIS.STACK.NXCELL" Using [FST]
Wrseq "CELL.NXCELL = NULL" Using [FST]
Wrseq "End CELL" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXCSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXCSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer AAA(1..11) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 0    " Using [FST]
Wrseq "    THIS.AAA(5) = 5" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "Local Integer TESTDD" Using [FST]
Wrseq "" Using [FST]
Wrseq "TESTDD=8 " Using [FST]
Wrseq "" Using [FST]
Wrseq "OLDV = V" Using [FST]
Wrseq "If FMET THIS.AAA.CONTROL( )" Using [FST]
Wrseq " THIS.ISREADONLY = 0" Using [FST]
Wrseq " STAT = FMET THIS.AAA.PROPAGATE( ) " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INIT" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONTROL( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PROPAGATE( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "Local Integer J" Using [FST]
Wrseq "J = THIS.AAA(11)" Using [FST]
Wrseq "THIS.AAA(11) = J+1" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Integer HHH(0..) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "" Using [FST]
Wrseq "    #HHH(I) = I" Using [FST]
Wrseq "    THIS.HHH(8) = 8" Using [FST]
Wrseq "End" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Char BBB(20)" Using [FST]
Wrseq "Decimal CCC {" Using [FST]
Wrseq "METHOD INI0( A )" Using [FST]
Wrseq "Value Integer A" Using [FST]
Wrseq 'THIS.BBB = "INI0"' Using [FST]
Wrseq "THIS.CCC = A+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD INI1( B )" Using [FST]
Wrseq "Value Integer B" Using [FST]
Wrseq "THIS.BBB = 'INI1'" Using [FST]
Wrseq "THIS.CCC = B" Using [FST]
Wrseq "End THIS.CCC+1" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI2( C )" Using [FST]
Wrseq "Value Integer C" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI3  (C)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI3( D )" Using [FST]
Wrseq "Value Integer D" Using [FST]
Wrseq "THIS.BBB = 'INI2-3'" Using [FST]
Wrseq "THIS.CCC = D+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Decimal C" Using [FST]
Wrseq "    C = THIS.CCC" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Instance DDD(1..) Using ZXDSTRU3" Using [FST]
Wrseq "Instance FFF(1..2) Using ZXDSTRU3" Using [FST]
Wrseq "Char EEE(20)(1..2)" Using [FST]
Wrseq "Integer GGG(1..5,1..3)" Using [FST]
Wrseq "Clbfile IIII(0)" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD ZXCSTRU3( N )" Using [FST]
Wrseq "Value Integer N" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "# variation sur SETBBB" Using [FST]
Wrseq "METHOD SETBBB0( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB1( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End THIS.BBB" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB2( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    CALLMET this.SETBBB0( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB3( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.SETBBB1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB4( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.CCC.INI1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB5( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI0  ( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM0( VALU, I )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "Value Integer I" Using [FST]
Wrseq "If (THIS.DDD(I) = Null)" Using [FST]
Wrseq "    THIS.DDD(I) = NEWINSTANCE ZXDSTRU3 AllocGroup This" Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "CALLMET THIS.DDD(I).SETM  ( THIS, VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SYSSNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SYSSNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD WHOAMI( V )" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "If (dim([R]THIS))" Using [FST]
Wrseq "    Default [R],[F],[L],[S],[V]" Using [FST]
Wrseq "    V = 1" Using [FST]
Wrseq "Else" Using [FST]
Wrseq "    V = 2 " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXDSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------

STC = filpath("STC","ZXDSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer M" Using [FST]
Wrseq "Decimal N" Using [FST]
Wrseq "Integer PPP" Using [FST]
Wrseq "Char QQQ(20)(1..3) {" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Char V()" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVC = V" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Date RRR {" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Date V" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVD = V" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "INSTANCE O Using ZXCSTRU3" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM( UP, Z )" Using [FST]
Wrseq "Variable INSTANCE UP Using ZXCSTRU3" Using [FST]
Wrseq "Value Integer Z" Using [FST]
Wrseq "" Using [FST]
Wrseq "THIS.M = Z+UP.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

VV = "valstc "-nomap(0)-"ZXCELL"
System RS = VV

VV = "valstc "-nomap(0)-"ZXSTACK"
System RS = VV

VV = "valstc "-nomap(0)-"ZXCSTRU3"
System RS = VV

VV = "valstc "-nomap(0)-"ZXDSTRU3"
System RS = VV

End

Subprog DELETE_TST
Local Char FIC(255)
Local Integer J

FIC = filpath("STC","ZXCELL","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCELL","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCELL"'

FIC = filpath("STC","ZXSTACK","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXSTACK","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXSTACK"'



FIC = filpath("STC","ZXCSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCSTRU3"'

FIC = filpath("STC","ZXDSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXDSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXDSTRU3"'

End

# -----------------------VALIDATION- --------------------------------
# ###################################################################
Funprog MYVALP( CL )
Value Char CL()
Local Integer TYP
Local Char VV(250)
Local Char RS(250)

VV = "valstc -p"-nomap(0)-CL
System RS = VV
TYP = val(RS)
If (TYP = 0)
    ADXOVE = RS
Endif
End TYP
