"use strict";
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var glob = require('streamline/lib/globals');
var runtime = require("etna-engine/lib/runtime/runtime");
var helper = require("etna-engine/test/fixtures/helper");
var trace = console.log;

var script;
var superv;

asyncTest("start", function(_) {
	var supervisor = require('etna-supervisor/lib/supervisor');
	var config = require("etna-util/lib/nodeconfig").config;
	var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
	superv = supervisor.create(_, etnaConfig);
	require("etna-engine/lib/runtime/variables").initStack(superv);
	ok(true, "start");
	start();
});

function gosub(_, fnName) {
	var frame = glob.context.x3frame;
	frame.done = false;
	frame.sub.done = false;
	ok(true, "=> " + fnName);
	script[fnName].apply_(_, null, [], 0);
}

function initStack() {
	var frame = glob.context.x3frame;
	frame.values = {};
	frame.types = {};
	return frame.values;
}

asyncTest("TC_X3RIGHTS", function(_) {
	var locals = initStack();
	var user = "ADC";
	try {
		var userKO = superv.loadRights(_, user, null);
	} catch (ex) {
		ok(ex.statusCode === 401, user + " Incorrect user");
	}
	user = "AQC";
	var userOk = superv.loadRights(_, user, null);
	ok(userOk !== undefined, user + " correct user");
	ok(userOk.hasOwnProperty("_accessCodes") === true, "accessCodes");
	ok(userOk.hasOwnProperty("_authorizedFunctions") === true, "authorizedFunctions");
	ok(userOk.hasOwnProperty("_authorizedRepresentations") === true, "authorizedRepresentations");
	start();
});

asyncTest("stop", function() {
	doStop = true;
	ok(true, "stop");
	start();
});