#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_ARRAY3") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_ARRAY3_"+GUSER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE_()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ARRAY3", "ARRAY3") From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ARRAY3", "ARRAY3")
End SUITE_RESULT


Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ARRAY3", "ARRAY3") From AXUNIT
Local Integer NBTEST

NBTEST = 55
Call ADD_TESTCASE("TC_INSA0","TC_INSA0"-"Function Insa 0..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA1","TC_INSA1"-"Function Insa 1..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA0_9","TC_INSA0_9"-"Function Insa 0..9",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA1_10","TC_INSA1_10"-"Function Insa 1..10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA10","TC_INSA10"-"Function Insa 10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA5","TC_INSA5"-"Function Insa 5..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_INSA5_14","TC_INSA5_14"-"Function Insa 5..14",NBTEST) From AXUNIT

NBTEST = 51
Call ADD_TESTCASE("TC_DELA0","TC_DELA0"-"Function Dela 0..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA1","TC_DELA1"-"Function Dela 1..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA0_9","TC_DELA0_9"-"Function Dela 0..9",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA1_10","TC_DELA1_10"-"Function Dela 1..10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA10","TC_DELA10"-"Function Dela 10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA5","TC_DELA5"-"Function Dela 4..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DELA5_14","TC_DELA5_14"-"Function Dela 5..14",NBTEST) From AXUNIT

NBTEST = 63
Call ADD_TESTCASE("TC_FIND0","TC_FIND0"-"Function Find 0..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND1","TC_FIND1"-"Function Find 1..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND0_9","TC_FIND0_9"-"Function Find 0..9",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND1_10","TC_FIND1_10"-"Function Find 1..10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND10","TC_FIND10"-"Function Find 10",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND5","TC_FIND5"-"Function Find 5..",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_FIND5_14","TC_FIND5_14"-"Function Find 5..14",NBTEST) From AXUNIT

NBTEST = 26
Call ADD_TESTCASE("TC_DIM0","TC_DIM0"-"Function on array (0..,3,5)",NBTEST+2) From AXUNIT
Call ADD_TESTCASE("TC_DIM1","TC_DIM1"-"Function on array (1..,1..3,1..5)",NBTEST+2) From AXUNIT
Call ADD_TESTCASE("TC_DIM5","TC_DIM5"-"Function on array (5..16,3,4)",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DIM1_12","TC_DIM1_12"-"Function on array (1..12,1..3,1..5)",NBTEST+2) From AXUNIT
Call ADD_TESTCASE("TC_DIM0_11","TC_DIM0_11"-"Function on array (0..11,3,5)",NBTEST+2) From AXUNIT
Call ADD_TESTCASE("TC_DIM534","TC_DIM534"-"Function on array (5..16,2..4,4..7)",NBTEST) From AXUNIT
Call ADD_TESTCASE("TC_DIM_M5","TC_DIM_M5"-"Function on array (-5..,3,4)",NBTEST+4) From AXUNIT
Call ADD_TESTCASE("TC_DIM_M5_5","TC_DIM_M5_5"-"Function on array (-5..6,3,4)",NBTEST+4) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ARRAY3", "ARRAY3")
End SUITE_RESULT

$ERROR
Call CHECK_EQUAL(errn, EX)
EX = 0
Resume

Subprog CHECK_EVAL(STR, RESULT)
Call CHECK_EQUAL(evalue(STR), RESULT) From AXUNIT
End

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

#--------------------------------------------------#
$DEF_TAB
Call CHECK_EQUAL("DEF_TAB","DEF_TAB")
Local Integer STR,MAXI
If WCAS="0.."
 Local Char CAR1(10)(0..)
 Local Char CAR2(10)(0..)
 Local Char CAR3(10)(0..)
 STR = 0
 MAXI = 9
 Call CHECK_EQUAL(maxtab (CAR1),0)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="1.."
 Local Char CAR1(10)(1..)
 Local Char CAR2(10)(1..)
 Local Char CAR3(10)(1..)
 STR = 1
 MAXI = 10
 Call CHECK_EQUAL(maxtab (CAR1),0)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="5.."
 Local Char CAR1(10)(5..)
 Local Char CAR2(10)(5..)
 Local Char CAR3(10)(5..)
 STR = 5
 MAXI = 14
 Call CHECK_EQUAL(maxtab (CAR1),0)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Elsif WCAS="5..14"
 Local Char CAR1(10)(5..14)
 Local Char CAR2(10)(5..14)
 Local Char CAR3(10)(5..14)
 STR = 5
 MAXI = 14
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Elsif WCAS="1..10"
 Local Char CAR1(10)(1..10)
 Local Char CAR2(10)(1..10)
 Local Char CAR3(10)(1..10)
 STR = 1
 MAXI = 10
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="0..9"
 Local Char CAR1(10)(0..9)
 Local Char CAR2(10)(0..9)
 Local Char CAR3(10)(0..9)
 STR = 0
 MAXI = 9
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="10"
 Local Char CAR1(10)(10)
 Local Char CAR2(10)(10)
 Local Char CAR3(10)(10)
 STR = 0
 MAXI = 9
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,0),1)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Endif

#Error(50) - Fonction indéfinie pour la valeur donnée
Local Integer EX : EX=50
Onerrgo ERROR
Call CHECK_EQUAL(dim(CAR1,2),0)
Return

#--------------------------------------------------#
$INSERT_TAB
Call CHECK_EQUAL("INSERT_TAB","INSERT_TAB")
For I=STR To MAXI
 Call CHECK_EQUAL("Insa"-num$(I)+',1',"Insa"-num$(I)+',1')
 Insa I, 1 CAR1,CAR2,CAR3
 If WCAS="0.."
 Call CHECK_EQUAL(maxtab (CAR1),I+1)
 Elsif WCAS="5.." & I=STR & STR=5 : #1 element
 Call CHECK_EQUAL(maxtab (CAR1),0)
 Elsif WCAS="1.." | WCAS="5.."
 Call CHECK_EQUAL(maxtab (CAR1),I)
 Else
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Endif
 CAR1(I) = "A"+num$(I)
 CAR2(I) = "B"+num$(I)
 CAR3(I) = "C"+num$(I)
 If WCAS="0.."
 Call CHECK_EQUAL(maxtab (CAR1),I+1)
 Elsif WCAS="5.." & I=STR & STR=5 : #1 element
 Call CHECK_EQUAL(maxtab (CAR1),5)
 Elsif WCAS="1.." | WCAS="5.."
 Call CHECK_EQUAL(maxtab (CAR1),I)
 Else
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Endif
Next
Call CHECK_EQUAL("After For..Insa","After For..Insa")
Call CHECK_EQUAL(dim(CAR1,0),1)
If WCAS="0.."
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="1.."
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="5.."
 Call CHECK_EQUAL(maxtab (CAR1),14)
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Elsif WCAS="1..10"
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="0..9" | WCAS="10"
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="5..14"
 Call CHECK_EQUAL(maxtab (CAR1),10)
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Endif
Return

#--------------------------------------------------#
$VERIF_TAB_INSA
Call CHECK_EQUAL("VERIF_TAB_INSA","VERIF_TAB_INSA")
Call CHECK_EQUAL(CAR1(5),"A5")
Insa  5, 1 CAR1,CAR2,CAR3
CAR1(5) = "555"
Call CHECK_EQUAL(CAR1(5),"555")
Case WCAS
 When "0.."
  Call CHECK_EQUAL(maxtab (CAR1),11)
 When "1.."
  Call CHECK_EQUAL(maxtab (CAR1),11)
 When "0..9"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "1..10"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "10"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "5.."
  Call CHECK_EQUAL(maxtab (CAR1),15)
 When "5..14"
  Call CHECK_EQUAL(maxtab (CAR1),10)
Endcase
Insa  5, 2 CAR1,CAR2,CAR3
Case WCAS
 When "0.."
  Call CHECK_EQUAL(maxtab (CAR1),13)
 When "1.."
  Call CHECK_EQUAL(maxtab (CAR1),13)
 When "0..9"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "1..10"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "10"
  Call CHECK_EQUAL(maxtab (CAR1),10)
 When "5.."
  Call CHECK_EQUAL(maxtab (CAR1),17)
 When "5..14"
  Call CHECK_EQUAL(maxtab (CAR1),10)
Endcase
Call CHECK_EQUAL(CAR1(5),"")
Case WCAS
 When "0.."
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)-1),"A9")
 When "1.."
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)),"A10")
 When "0..9"
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)-1),"A6")
 When "10"
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)-1),"A6")
 When "1..10"
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)),"A7")
 When "5.."
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)),"A14")
 When "5..14"
  Call CHECK_EQUAL(CAR1(maxtab (CAR1)),"A7")
Endcase
Call CHECK_EQUAL(dim(CAR1,0),1)
If WCAS="0.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="1.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="1..10"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="0..9" | WCAS="10"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="5.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Elsif WCAS="5..14"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Endif
Return

#--------------------------------------------------#
$VERIF_TAB_DELA
Call CHECK_EQUAL("VERIF_TAB_DELA","VERIF_TAB_DELA")
Dela 5,1 CAR1,CAR2,CAR3
Call CHECK_EQUAL(CAR1(5),"A6")
Dela 5,2 CAR1,CAR2,CAR3
Call CHECK_EQUAL(CAR2(5),"B8")
Call CHECK_EQUAL(dim(CAR1,0),1)
If WCAS="0.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="1.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="5.."
 Call CHECK_EQUAL(dim(CAR1),32767)
 Call CHECK_EQUAL(dim(CAR1,1),32767)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Elsif WCAS="1..10"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),1)
Elsif WCAS="0..9" | WCAS="10"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),0)
Elsif WCAS="5..14"
 Call CHECK_EQUAL(dim(CAR1),10)
 Call CHECK_EQUAL(dim(CAR1,1),10)
 Call CHECK_EQUAL(dim(CAR1,-1),5)
Endif
Return

#--------------------------------------------------#
Subprog TC_INSA5
Local Char WCAS(10) : WCAS = '5..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#
Subprog TC_INSA5_14
Local Char WCAS(10) : WCAS = '5..14'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End


#--------------------------------------------------#
Subprog TC_INSA0
Local Char WCAS(10) : WCAS = '0..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#
Subprog TC_INSA1
Local Char WCAS(10) : WCAS = '1..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#
Subprog TC_INSA0_9
Local Char WCAS(10) : WCAS = '0..9'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#
Subprog TC_INSA10
Local Char WCAS(10) : WCAS = '10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#
Subprog TC_INSA1_10
Local Char WCAS(10) : WCAS = '1..10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_INSA
End

#--------------------------------------------------#

#--------------------------------------------------#
Subprog TC_DELA0
Local Char WCAS(10) : WCAS = '0..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA5
Local Char WCAS(10) : WCAS = '5..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA5_14
Local Char WCAS(10) : WCAS = '5..14'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA1
Local Char WCAS(10) : WCAS = '1..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA0_9
Local Char WCAS(10) : WCAS = '0..9'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA10
Local Char WCAS(10) : WCAS = '10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End

#--------------------------------------------------#
Subprog TC_DELA1_10
Local Char WCAS(10) : WCAS = '1..10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_DELA
End
#--------------------------------------------------#

#--------------------------------------------------#
$VERIF_TAB_FIND
Call CHECK_EQUAL("VERIF_TAB_FIND","VERIF_TAB_FIND")
If pat(WCAS,"0*") | WCAS="10"
 Call CHECK_EQUAL(find("A6",CAR1),7)
 Call CHECK_EQUAL(sum(CAR1),'A0A1A2A3A4A5A6A7A8A9')
Elsif WCAS='5..' | WCAS='5..14'
 Call CHECK_EQUAL(find("A6",CAR1),2)
 Call CHECK_EQUAL(sum(CAR1),'A5A6A7A8A9A10A11A12A13A14')
Else
 Call CHECK_EQUAL(find("A6",CAR1),6)
 Call CHECK_EQUAL(sum(CAR1),'A1A2A3A4A5A6A7A8A9A10')
Endif

Call CHECK_EQUAL("Dela 5,1","Dela 5,1")
Dela 5,1 CAR1,CAR2,CAR3
Call CHECK_EQUAL(CAR1(5),"A6")

If pat(WCAS,"0*") | WCAS="10"
 Call CHECK_EQUAL(find("A6",CAR1),6)
 Call CHECK_EQUAL(sum(CAR1),'A0A1A2A3A4A6A7A8A9')
 Call CHECK_EQUAL(find("A6",CAR1(3..5)),3)
Elsif WCAS='5..' | WCAS='5..14'
 Call CHECK_EQUAL(find("A6",CAR1),1)
 Call CHECK_EQUAL(sum(CAR1),'A6A7A8A9A10A11A12A13A14')
 Call CHECK_EQUAL(find("A11",CAR1(8..10)),3)
Else
 Call CHECK_EQUAL(find("A6",CAR1),5)
 Call CHECK_EQUAL(sum(CAR1),'A1A2A3A4A6A7A8A9A10')
 Call CHECK_EQUAL(find("A6",CAR1(3..5)),3)
Endif

If WCAS='5..' | WCAS='5..14'
 Call CHECK_EQUAL(sum(CAR1(8..10)),'A9A10A11')
 Call CHECK_EQUAL(min(CAR1(8..10)),'A10')
 Call CHECK_EQUAL(max(CAR1(8..10)),'A9')
Else
 Call CHECK_EQUAL(sum(CAR1(3..5)),'A3A4A6')
 Call CHECK_EQUAL(min(CAR1(3..5)),'A3')
 Call CHECK_EQUAL(max(CAR1(3..5)),'A6')
Endif

Call CHECK_EQUAL("Dela 5,2","Dela 5,2")
Dela 5,2 CAR1,CAR2,CAR3
Call CHECK_EQUAL(CAR2(5),"B8")
If pat(WCAS,"0*") | WCAS="10"
 Call CHECK_EQUAL(find("B8",CAR2),6)
 Call CHECK_EQUAL(sum(CAR2),'B0B1B2B3B4B8B9')
 Call CHECK_EQUAL(find("B8",CAR2(3..5)),3)
 Call CHECK_EQUAL(sum(CAR2(3..5)),'B3B4B8')
 Call CHECK_EQUAL(min(CAR2(3..5)),'B3')
 Call CHECK_EQUAL(max(CAR2(3..5)),'B8')
Elsif WCAS='5..' | WCAS='5..14'
 Call CHECK_EQUAL(find("B8",CAR2),1)
 Call CHECK_EQUAL(sum(CAR2),'B8B9B10B11B12B13B14')
 Call CHECK_EQUAL(find("B13",CAR2(8..10)),3)
 Call CHECK_EQUAL(sum(CAR2(8..10)),'B11B12B13')
 Call CHECK_EQUAL(min(CAR2(8..10)),'B11')
 Call CHECK_EQUAL(max(CAR2(8..10)),'B13')
Else
 Call CHECK_EQUAL(find("B8",CAR2),5)
 Call CHECK_EQUAL(sum(CAR2),'B1B2B3B4B8B9B10')
 Call CHECK_EQUAL(find("B8",CAR2(3..5)),3)
 Call CHECK_EQUAL(sum(CAR2(3..5)),'B3B4B8')
 Call CHECK_EQUAL(min(CAR2(3..5)),'B3')
 Call CHECK_EQUAL(max(CAR2(3..5)),'B8')
Endif
Return

#--------------------------------------------------#
Subprog TC_FIND0
Local Char WCAS(10) : WCAS = '0..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND5
Local Char WCAS(10) : WCAS = '5..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND5_14
Local Char WCAS(10) : WCAS = '5..14'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND1
Local Char WCAS(10) : WCAS = '1..'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND0_9
Local Char WCAS(10) : WCAS = '0..9'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND10
Local Char WCAS(10) : WCAS = '10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_FIND1_10
Local Char WCAS(10) : WCAS = '1..10'
Gosub DEF_TAB
Gosub INSERT_TAB
Gosub VERIF_TAB_FIND
End

#--------------------------------------------------#
Subprog TC_DIM534
#Déclaration d'un tableau 12*3*4 de chaînes de longueur maximale 8
    Char TOTO(8) (5..16,2..4,4..7)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'18 12')
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),12)
    Call CHECK_EQUAL(dim (TOTO, -1),5)
    Call CHECK_EQUAL("TC_DIM534 Before For-1","TC_DIM534 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=5
     When 2 : RES1=3 : RES2=2
     When 3 : RES1=4 : RES2=4
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I+dim(TOTO,-2)-1,I+dim(TOTO,-3))=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL("TC_DIM534 Before For-2","TC_DIM534 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=5
     When 2 : RES1=3 : RES2=2
     When 3 : RES1=4 : RES2=4
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(6,3,4)="6,3,4"
    TOTO(9,2,4)="9,2,4"
    TOTO(6,2,6)="6,2,6"
    Call CHECK_EQUAL(TOTO(6,3,4),"6,3,4")
    Call CHECK_EQUAL(TOTO(9,2,4),"9,2,4")
    Call CHECK_EQUAL(TOTO(6,2,6),"6,2,6")
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(16,2,4)="16,2,4"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(16,4,7)="16,4,7"
    Call CHECK_EQUAL(maxtab (TOTO),12)
End

#--------------------------------------------------#
Subprog TC_DIM5
#Déclaration d'un tableau 12*3*4 de chaînes de longueur maximale 8
    Char TOTO(8) (5..16,3,4)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'18 12')
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),12)
    Call CHECK_EQUAL(dim (TOTO, -1),5)
    Call CHECK_EQUAL("TC_DIM5 Before For-1","TC_DIM5 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I-1,I)=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL("TC_DIM5 Before For-2","TC_DIM5 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(7,0,3)="7,0,3"
    TOTO(9,2,3)="9,2,3"
    TOTO(16,2,3)="16,2,3"
    Call CHECK_EQUAL(TOTO(7,0,3),"7,0,3")
    Call CHECK_EQUAL(TOTO(9,2,3),"9,2,3")
    Call CHECK_EQUAL(TOTO(16,2,3),"16,2,3")
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(16,0,0)="16,0,0"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(16,2,3)="16,2,3"
    Call CHECK_EQUAL(maxtab (TOTO),12)
End

#--------------------------------------------------#
Subprog TC_DIM1_12
#Déclaration d'un tableau 12*3*5 de chaînes de longueur maximale 10
    Char TOTO(10) (1..12,1..3,1..5)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 12')
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),12)
    Call CHECK_EQUAL(dim (TOTO, -1),1)
    Call CHECK_EQUAL("TC_DIM1_12 Before For-1","TC_DIM1_12 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=1
     When 2 : RES1=3 : RES2=1
     When 3 : RES1=5: RES2=1
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I,I)=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL("TC_DIM1_12 Before For-2","TC_DIM1_12 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=1
     When 2 : RES1=3 : RES2=1
     When 3 : RES1=5 : RES2=1
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(3,2,2)="3,2,2"
    TOTO(2,3,2)="2,3,2"
    TOTO(2,2,3)="2,2,3"
    Call CHECK_EQUAL(TOTO(3,2,2),"3,2,2")
    Call CHECK_EQUAL(TOTO(2,3,2),"2,3,2")
    Call CHECK_EQUAL(TOTO(2,2,3),"2,2,3")
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(12,1,1)="12,1,1"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(12,3,4)="12,3,4"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(5,1,5)="5,1,5"
    TOTO(5,2,1)="5,2,1"
    Call CHECK_EQUAL(TOTO(5,1,5),"5,1,5")
    Call CHECK_EQUAL(TOTO(5,2,1),"5,2,1")
End

#--------------------------------------------------#
Subprog TC_DIM1
#Déclaration d'un tableau 12*3*5 de chaînes de longueur maximale 10
    Char TOTO(10) (1..,1..3,1..5)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 32767')
    Call CHECK_EQUAL(maxtab (TOTO),0)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),32767)
    Call CHECK_EQUAL(dim (TOTO, -1),1)
    Call CHECK_EQUAL("TC_DIM1 Before For-1","TC_DIM1 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=1
     When 2 : RES1=3 : RES2=1
     When 3 : RES1=5 : RES2=1
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I,I)=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),4)
    Call CHECK_EQUAL("TC_DIM1 Before For-2","TC_DIM1 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=1
     When 2 : RES1=3 : RES2=1
     When 3 : RES1=5 : RES2=1
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(3,2,2)="3,2,2"
    TOTO(2,3,2)="2,3,2"
    TOTO(2,2,3)="2,2,3"
    Call CHECK_EQUAL(TOTO(3,2,2),"3,2,2")
    Call CHECK_EQUAL(TOTO(2,3,2),"2,3,2")
    Call CHECK_EQUAL(TOTO(2,2,3),"2,2,3")
    Call CHECK_EQUAL(maxtab (TOTO),4)
    TOTO(16,1,1)="16,1,1"
    Call CHECK_EQUAL(maxtab (TOTO),16)
    TOTO(16,3,4)="16,3,4"
    Call CHECK_EQUAL(maxtab (TOTO),16)
    TOTO(5,1,5)="5,1,5"
    TOTO(5,2,1)="5,2,1"
    Call CHECK_EQUAL(TOTO(5,1,5),"5,1,5")
    Call CHECK_EQUAL(TOTO(5,2,1),"5,2,1")
End

#--------------------------------------------------#
Subprog TC_DIM0
#Déclaration d'un tableau x*3*5 de chaînes de longueur maximale 10
    Char TOTO(10) (0..,3,5)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 32767')
    Call CHECK_EQUAL(maxtab (TOTO),0)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),32767)
    Call CHECK_EQUAL(dim (TOTO, -1),0)
    Call CHECK_EQUAL("TC_DIM0 Before For-1","TC_DIM0 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=0
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=5 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I-1,I)=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),3)
    Call CHECK_EQUAL("TC_DIM0 Before For-2","TC_DIM0 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=0
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=5 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(1,2,2)="1,2,2"
    TOTO(2,1,2)="2,1,2"
    TOTO(2,2,1)="2,2,1"
    Call CHECK_EQUAL(TOTO(1,2,2),"1,2,2")
    Call CHECK_EQUAL(TOTO(2,1,2),"2,1,2")
    Call CHECK_EQUAL(TOTO(2,2,1),"2,2,1")
    Call CHECK_EQUAL(maxtab (TOTO),3)
    TOTO(16,0,0)="16,0,0"
    Call CHECK_EQUAL(maxtab (TOTO),16)
    TOTO(16,2,3)="16,2,3"
    Call CHECK_EQUAL(maxtab (TOTO),16)
    TOTO(5,1,0)="5,1,0"
    Call CHECK_EQUAL(TOTO(5,1,0),"5,1,0")
    TOTO(5,0,4)="5,0,4"
    Call CHECK_EQUAL(TOTO(5,0,4),"5,0,4")
End

#--------------------------------------------------#
Subprog TC_DIM0_11
#Déclaration d'un tableau 12*3*5 de chaînes de longueur maximale 10
    Char TOTO(10) (0..11,3,5)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 12')
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),12)
    Call CHECK_EQUAL(dim (TOTO, -1),0)
    Call CHECK_EQUAL("TC_DIM0_11 Before For-1","TC_DIM0_11 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=0
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=5 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I-1,I)=num$(I)
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL("TC_DIM0_11 Before For-2","TC_DIM0_11 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=0
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=5 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(3,2,2)="3,2,2"
    TOTO(6,2,0)="6,2,0"
    TOTO(4,0,3)="4,0,3"
    Call CHECK_EQUAL(TOTO(3,2,2),"3,2,2")
    Call CHECK_EQUAL(TOTO(6,2,0),"6,2,0")
    Call CHECK_EQUAL(TOTO(4,0,3),"4,0,3")
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(11,0,0)="11,0,0"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(11,2,3)="11,2,3"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(5,1,0)="5,1,0"
    TOTO(5,0,4)="5,0,4"
    Call CHECK_EQUAL(TOTO(5,1,0),"5,1,0")
    Call CHECK_EQUAL(TOTO(5,0,4),"5,0,4")
End


#--------------------------------------------------#
Subprog TC_DIM_M5
#Déclaration d'un tableau x*3*4 de chaînes de longueur maximale 10
    Char TOTO(10) (-5..,3,4)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 32767')
    Call CHECK_EQUAL(maxtab (TOTO),0)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),32767)
    Call CHECK_EQUAL(dim (TOTO, -1),-5)
    Call CHECK_EQUAL("TC_DIM_M5 Before For-1","TC_DIM_M5 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=-5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I-1,I)=num$(I)
     Call CHECK_EQUAL("TOTO("+num$(I+dim(TOTO,-1))+","+num$(I-1)+","+num$(I)+")=num$("+num$(I)+")","TOTO("+num$(I+dim(TOTO,-1))+","+num$(I-1)+","+num$(I)+")=num$("+num$(I)+")")
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),0)
    Call CHECK_EQUAL("TC_DIM_M5 Before For-2","TC_DIM_M5 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=32767 : RES2=-5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(3,2,2)="3,2,2"
    Call CHECK_EQUAL(maxtab (TOTO),3)
    TOTO(6,2,0)="6,2,0"
    TOTO(4,0,3)="4,0,3"
    Call CHECK_EQUAL(TOTO(3,2,2),"3,2,2")
    Call CHECK_EQUAL(TOTO(6,2,0),"6,2,0")
    Call CHECK_EQUAL(TOTO(4,0,3),"4,0,3")
    Call CHECK_EQUAL(maxtab (TOTO),6)
    TOTO(-5,0,0)="-5"
    Call CHECK_EQUAL(maxtab (TOTO),6)
    TOTO(-5,2,3)="-5,2,3"
    Call CHECK_EQUAL(maxtab (TOTO),6)
End
#--------------------------------------------------#
Subprog TC_DIM_M5_5
#Déclaration d'un tableau 12*3*4 de chaînes de longueur maximale 10
    Char TOTO(10) (-5..6,3,4)
    Integer RES1,RES2
    Call CHECK_EQUAL(num$(type(TOTO))-num$(dim(TOTO)),'20 12')
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL(dim (TOTO, 0),3)
    Call CHECK_EQUAL(dim (TOTO, 1),12)
    Call CHECK_EQUAL(dim (TOTO, -1),-5)
    Call CHECK_EQUAL("TC_DIM_M5_5 Before For-1","TC_DIM_M5_5 Before For-1")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=-5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    For I=1 To dim (TOTO, 0)
     TOTO(I+dim(TOTO,-1),I-1,I)=num$(I)
     Call CHECK_EQUAL("TOTO("+num$(I+dim(TOTO,-1))+","+num$(I-1)+","+num$(I)+")=num$("+num$(I)+")","TOTO("+num$(I+dim(TOTO,-1))+","+num$(I-1)+","+num$(I)+")=num$("+num$(I)+")")
    Next I
    Call CHECK_EQUAL(maxtab (TOTO),12)
    Call CHECK_EQUAL("TC_DIM_M5_5 Before For-2","TC_DIM_M5_5 Before For-2")
    For I=1 To dim (TOTO, 0)
     Raz RES1,RES2
     Case I
     When 1 : RES1=12 : RES2=-5
     When 2 : RES1=3 : RES2=0
     When 3 : RES1=4 : RES2=0
     Endcase
     Call CHECK_EQUAL(dim (TOTO, I),RES1)
     Call CHECK_EQUAL(dim (TOTO, -I),RES2)
    Next I
    TOTO(3,2,2)="3,2,2"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(6,2,0)="6,2,0"
    TOTO(4,0,3)="4,0,3"
    Call CHECK_EQUAL(TOTO(3,2,2),"3,2,2")
    Call CHECK_EQUAL(TOTO(6,2,0),"6,2,0")
    Call CHECK_EQUAL(TOTO(4,0,3),"4,0,3")
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(-5,0,0)="-5"
    Call CHECK_EQUAL(maxtab (TOTO),12)
    TOTO(-5,2,3)="-5,2,3"
    Call CHECK_EQUAL(maxtab (TOTO),12)
End
