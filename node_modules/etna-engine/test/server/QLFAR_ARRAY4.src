End func TESTSUITE()

Funprog TESTSUITE()
Call ADD_TESTCASE("SIMPLE_TEST", "simple test", 12) From AXUNIT
Call ADD_TESTCASE("SORT_TEST", "sort test", 20) From AXUNIT
Call ADD_TESTCASE("INSERT_TEST", "insert test", 4) From AXUNIT
Call ADD_TESTCASE("DELETE_TEST", "delete test", 4) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("ARRAY", "Engine array functions")

$FILL
Global Char STRINGS(1)(10)
Global Integer INTS(10)
Global Char LETTERS, DIGITS, LSORT, DSORT, LBYD, DBYL, DBYL2
LETTERS = "DAAFBCBBAF"
DIGITS =  "5531244153"
LSORT =   "AAABBBCDFF"
DSORT =   "1123344555"
LBYD  =   "BFBAFBCAAD"
DBYL  =   "3551244513"
DBYL2 =   "5534214513"
LSORTPART = "DAABBCFBAF"
ISORTPART = "5532441153"

For I = 0 To 9 : STRINGS(I) = mid$(LETTERS, I+1, 1) : INTS(I) = VAL(mid$(DIGITS, I+1, 1)) : Next I
Return

FunProg DUMP_S(AR)
	Variable Char AR()()
End sigma(DIM(AR,-1), DIM(AR,-1) + DIM(AR,1) - 1, AR(indcum))

FunProg DUMP_I(AR)
	Variable Integer AR()
End sigma(DIM(AR,-1), DIM(AR,-1) + DIM(AR,1) - 1, num$(AR(indcum)))

SubProg SLICE_NOBASE(S1, S2, I1, I2)
	Variable Char S1()(), S2()()
	Variable Integer I1(), I2()
    Call CHECK_EQUAL(func DUMP_S(S1), mid$(LETTERS, 4, 3), "Char slice 3..5") from AXUNIT
    Call CHECK_EQUAL(func DUMP_S(S2), right$(LETTERS, 4), "Char slice 3..") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(I1), mid$(DIGITS, 4, 3), "Integer slice 3..5") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(I2), right$(DIGITS, 4), "Integer slice 3..") from AXUNIT
End

SubProg SLICE_BASE(S1, S2)
	Variable Char S1()(1..), S2()(3..)
    Call CHECK_EQUAL(func DUMP_S(S1), mid$(LETTERS, 4, 3), "Char slice 3..5") from AXUNIT
    Call CHECK_EQUAL(func DUMP_S(S2), right$(LETTERS, 4), "Char slice 3..") from AXUNIT
    Call CHECK_EQUAL(S1(1), mid$(LETTERS, 4, 1), "S1(1)") from AXUNIT
    Call CHECK_EQUAL(S1(3), mid$(LETTERS, 6, 1), "S1(3)") from AXUNIT
    Call CHECK_EQUAL(S2(3), mid$(LETTERS, 4, 1), "S2(3)") from AXUNIT
    Call CHECK_EQUAL(S2(9), mid$(LETTERS, 10, 1), "S2(9)") from AXUNIT
End

SubProg SORT_BASE(S, I)
	Variable Char S()(4..), I()(2..)
	Call CHECK_EQUAL(S(4), 'D', "S indexing") from AXUNIT
	Call CHECK_EQUAL(S(13), 'F', "S indexing") from AXUNIT
	Call CHECK_EQUAL(I(2), 5, "I indexing") from AXUNIT
	Call CHECK_EQUAL(I(11), 3, "I indexing") from AXUNIT
    Sorta S,I
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LSORT, "Sorta S,D") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(INTS), DBYL, "Sorta S,D") from AXUNIT
	Call CHECK_EQUAL(S(4), 'A', "S indexing") from AXUNIT
	Call CHECK_EQUAL(S(13), 'F', "S indexing") from AXUNIT
	Call CHECK_EQUAL(I(2), 3, "I indexing") from AXUNIT
	Call CHECK_EQUAL(I(11), 3, "I indexing") from AXUNIT
    Sorta I,S
	Call CHECK_EQUAL(I(2), 1, "I indexing") from AXUNIT
	Call CHECK_EQUAL(I(11), 5, "I indexing") from AXUNIT
End

SubProg SIMPLE_TEST()
    Gosub FILL
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LETTERS) From AXUNIT
    Call CHECK_EQUAL(func DUMP_I(INTS), DIGITS) From AXUNIT
    Call SLICE_NOBASE(STRINGS(3..5), STRINGS(3..), INTS(3..5), INTS(3..))
    Call SLICE_BASE(STRINGS(3..5), STRINGS(3..))
End

SubProg SORT_TEST()
    Gosub FILL
    Sorta STRINGS,INTS
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LSORT, "Sorta S,D") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(INTS), DBYL, "Sorta S,D") from AXUNIT
    Sorta STRINGS, INTS Order By STRINGS(indice) Desc
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LSORT, "Sorta S,D Order By S(indice) Desc") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(INTS), DBYL2, "Sorta S,D") from AXUNIT
    Sorta INTS,STRINGS
    Call CHECK_EQUAL(func DUMP_I(INTS), DSORT, "Sorta D,S") from AXUNIT
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LBYD, "Sorta D,S") from AXUNIT
    Gosub FILL
    Call SORT_BASE(STRINGS, INTS)
    Gosub FILL
    Sorta STRINGS(2..6),INTS(2..6)
    Call CHECK_EQUAL(func DUMP_S(STRINGS), LSORTPART, "Sorta partial") from AXUNIT
    Call CHECK_EQUAL(func DUMP_I(INTS), ISORTPART, "Sorta partial") from AXUNIT
End

SubProg INSERT_TEST()
	Gosub FILL
	Insa 2, 3 STRINGS, INTS
	STRINGS(2) = 'X' : STRINGS(3) = 'Y' : STRINGS(4) = 'Z'
	Call CHECK_EQUAL(func DUMP_S(STRINGS), left$(LETTERS, 2)+"XYZ"+mid$(LETTERS, 3, 5), "Insa S") from AXUNIT
	Call CHECK_EQUAL(func DUMP_I(INTS), left$(DIGITS, 2)+"000"+mid$(DIGITS, 3, 5), "Insa I") from AXUNIT
	Gosub FILL
	Insa 2, 3, 7 STRINGS, INTS
	STRINGS(2) = 'X' : STRINGS(3) = 'Y' : STRINGS(4) = 'Z'
	Call CHECK_EQUAL(func DUMP_S(STRINGS), left$(LETTERS, 2)+"XYZ"+mid$(LETTERS, 3, 3) +right$(LETTERS, 9), "Insa S") from AXUNIT
	Call CHECK_EQUAL(func DUMP_I(INTS), left$(DIGITS, 2)+"000"+mid$(DIGITS, 3, 3) + right$(DIGITS, 9), "Insa I") from AXUNIT
End

SubProg DELETE_TEST()
	Gosub FILL
	Dela 2, 3 STRINGS, INTS
	STRINGS(7) = 'X' : STRINGS(8) = 'Y' : STRINGS(9) = 'Z'
	Call CHECK_EQUAL(func DUMP_S(STRINGS), left$(LETTERS, 2)+right$(LETTERS, 6)+"XYZ", "Dela S") from AXUNIT
	Call CHECK_EQUAL(func DUMP_I(INTS), left$(DIGITS, 2)+right$(DIGITS, 6)+"000", "Dela I") from AXUNIT
	Gosub FILL
	Dela 2, 3, 7 STRINGS, INTS
	STRINGS(5) = 'X' : STRINGS(6) = 'Y' : STRINGS(7) = 'Z'
	Call CHECK_EQUAL(func DUMP_S(STRINGS), left$(LETTERS, 2)+mid$(LETTERS, 6, 3)+"XYZ"+right$(LETTERS, 9), "Dela S") from AXUNIT
	Call CHECK_EQUAL(func DUMP_I(INTS), left$(DIGITS, 2)+mid$(DIGITS, 6, 3)+"000"+right$(DIGITS, 9), "Dela I") from AXUNIT
End

