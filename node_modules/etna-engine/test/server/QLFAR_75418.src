#<AdxTL>@(#)3.0.0.0 $Revision$
Call  TESTSUITE()
GTRACE = "QLFAR_75418_"+GUSER
Call LEC_TRACE From LECFIC
End

# ---------- TEST_SUITE extend Blbfile ----------------------------
# -----------------------------------------------------------------

Funprog TESTSUITE()

 Call ADD_TESTCASE('DELETE_TABLES', "Delete table : ZQLFBLOB", 6) From AXUNIT
 Call ADD_TESTCASE('CREATE_TABLES', "Create table : ZQLFBLOB ",0) From AXUNIT
 Call ADD_TESTCASE('VALID_TABLES' , "Valid table  : ZQLFBLOB ", 3) From AXUNIT
 Call ADD_TESTCASE("CLB_TEST0", "Rd/Wr/Put/Get 1", 1) From AXUNIT
 Call ADD_TESTCASE("CLB_TEST1", "Rd/Wr/Put/Get 2", 3 ) From AXUNIT
 Call ADD_TESTCASE("BLB_TEST0", "Rd/Wr/Put/Get 3", 3) From AXUNIT

 Call ADD_TESTCASE("BLB_DB0", "With DB", 9) From AXUNIT
 Call ADD_TESTCASE("BLB_DB1", "With Flat DB", 18) From AXUNIT

 Call ADD_TESTCASE("BLB_ENCDEC", "strencode/decode", 11) From AXUNIT
 Call ADD_TESTCASE('DELETE_TABLES', "Delete table : ZQLFBLOB", 6) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("75418", "75418")

End SUITE_RESULT

# -----------------------  BLB_ENCDEC ----------------------------------
# ######################################################################
Subprog BLB_ENCDEC( )

Local Char PATH0(60)
Local Blbfile MYB(0)

Local Clbfile MYC(0)


Local Integer SIZ
Local Integer NBC


PATH0 = filpath("TRT", "MENU", "src", -1 )
SIZ = filinfo( PATH0, 7)
Call CHECK_NOTEQUAL(SIZ, 0 ) From AXUNIT

Openi PATH0, 0 Using [FIC]
Getseq 1,MYB Sized SIZ Using [FIC]
Openi Using [FIC]

NBC = strDecode( MYB, MYC, GUTF8 )
Call CHECK_NOTEQUAL(NBC, 0 ) From AXUNIT

ST = strEncode( MYC, MYB, GUTF8 )
Call CHECK_EQUAL( ST, SIZ ) From AXUNIT

# blob writing in a file
PATH1 = filpath("TMP", "MENU0", "src", -1 )
Openo PATH1, 0 Using [FIC]
Putseq 1,MYB Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT
Call FILE_COMP( PATH0, PATH1 )
ST = Delfile( PATH1 )

ST = strEncode( MYC, MYB, GASCII )
Call CHECK_EQUAL( ST, NBC ) From AXUNIT

# blob writing in a file
PATH1 = filpath("TMP", "MENU0", "src", -1 )
Openo PATH1, 0 Using [FIC]
Putseq 1,MYB Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( ST, NBC ) From AXUNIT
ST = Delfile( PATH1 )

ST = strDecode( MYB, MYC, GASCII )
Call CHECK_EQUAL( ST, NBC ) From AXUNIT

ST = strEncode( MYC, MYB, GUCS2 )
Call CHECK_EQUAL( ST, NBC ) From AXUNIT

# blob writing in a file
PATH1 = filpath("TMP", "MENU0", "src", -1 )
Openo PATH1, 0 Using [FIC]
Putseq 1,MYB Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( ST, NBC*2 ) From AXUNIT
ST = Delfile( PATH1 )

ST = strDecode( MYB, MYC, GUCS2 )
Call CHECK_EQUAL( ST, NBC ) From AXUNIT


End

# -----------------------  BLB_DB1 -----------------------------------
# ######################################################################
Subprog BLB_DB1( )
Local File ZQLFBLOB[ZQL]
Local Blbfile MYB(0)
Local Char RESULT(60)
Local Char PATH0(60)
Local Char PATH1(60)
Local Char PATH2(60)
Local Char PATH3(60)
Local Char PATH4(60)


Local Integer ST
Local Integer SIZ
PATH0 = filpath("TRT", "MENU", "src", -1 )

SIZ = filinfo( PATH0, 7)
Call CHECK_NOTEQUAL(SIZ, 0 ) From AXUNIT

# blob loading
[ZQL]MYK= 1
Openi PATH0, 0 Using [FIC]
Getseq 1,[ZQL]MYBLB1 Sized SIZ Using [FIC]
Openi Using [FIC]

Call CHECK_EQUAL( SIZ, len([ZQL]MYBLB1) ) From AXUNIT

# blob writing in the db
Trbegin [ZQL]
Write [ZQL]
Commit
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT

[ZQL]MYK= 2
Trbegin [ZQL]
Write [ZQL]
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT
Commit

#export de la table
System RESULT = "@valfil -c -s -t2"-nomap(0)-nomap+".ZQLFBLOB"-nomap+".SVG/ZQLFBLOB"
Call CHECK_EQUAL( RESULT, "" ) From AXUNIT
PATH1 = filpath("SVG", "ZQLFBLOB", "fde", -1 )
ST = filinfo( PATH1, 7)
Call CHECK_NOTEQUAL( ST, 0 ) From AXUNIT
PATH1 = filpath("SVG", "ZQLFBLOB", "dat", -1 )
ST = filinfo( PATH1, 7)
Call CHECK_NOTEQUAL( ST, 0 ) From AXUNIT

Close Local File [ZQL]

PATH3= filpath("FIL", "ZQLFBLOB", "srf", -1 )
PATH4= filpath("SVG", "ZQLFBLOB", "srf", -1 )

ST = renameFile( PATH3, PATH4 )

#suppression
System RESULT = "@valfil -d"-nomap(0)-"ZQLFBLOB"
Call CHECK_EQUAL( RESULT, "" ) From AXUNIT

#import
System RESULT = "@valfil -c -s -t3"-nomap(0)-nomap+".SVG/ZQLFBLOB"-nomap+".ZQLFBLOB"
Call CHECK_EQUAL( RESULT, "" ) From AXUNIT
PATH1 = filpath("FIL", "ZQLFBLOB", "fde", -1 )
ST = filinfo( PATH1, 7)
Call CHECK_NOTEQUAL( ST, -20 ) From AXUNIT
PATH1 = filpath("FIL", "ZQLFBLOB", "srf", -1 )
ST = filinfo( PATH1, 7)
Call CHECK_NOTEQUAL( ST, -20 ) From AXUNIT

# relecture de enregistrement apres import
Local File ZQLFBLOB[ZQL]

Raz [ZQL]
Read [ZQL]ZQLFBLOB0 = 1
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT

# blob writing in a file
PATH1 = filpath("TMP", "MENU0", "src", -1 )
Openo PATH1, 0 Using [FIC]
Putseq 1,[ZQL]MYBLB1 Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT

Call FILE_COMP( PATH0, PATH1 )
ST = Delfile( PATH1 )

Raz [ZQL]
Read [ZQL]ZQLFBLOB0 = 2
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT

# blob writing in a file
Openo PATH1, 0 Using [FIC]
Putseq 1,[ZQL]MYBLB1 Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT

Call FILE_COMP( PATH0, PATH1 )
ST = Delfile( PATH1 )

#suppression de l export
System RESULT = "@valfil -d"-nomap(0)-nomap+".SVG/ZQLFBLOB"
Call CHECK_EQUAL( RESULT, "" ) From AXUNIT
Trbegin [ZQL]
Delete [ZQL]ZQLFBLOB0 = 1
Delete [ZQL]ZQLFBLOB0 = 2
Commit
End

# -----------------------  BLB_DB0 -----------------------------------
# ######################################################################
Subprog BLB_DB0( )
Local File ZQLFBLOB[ZQL]
Local Blbfile MYB(0)

Local Integer ST
Local Integer SIZ
PATH0 = filpath("TRT", "MENU", "src", -1 )
PATH1 = filpath("TMP", "MENU0", "src", -1 )

SIZ = filinfo( PATH0, 7)
Call CHECK_NOTEQUAL(SIZ, 0 ) From AXUNIT

# blob loading
[ZQL]MYK= 1
Openi PATH0, 0 Using [FIC]
Getseq 1,[ZQL]MYBLB1 Sized SIZ Using [FIC]
Openi Using [FIC]

Call CHECK_EQUAL( SIZ, len([ZQL]MYBLB1) ) From AXUNIT

# blob writing in the db
Trbegin [ZQL]
Write [ZQL]
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT
Commit

Raz [ZQL]
Read [ZQL]ZQLFBLOB0 = 1
Call CHECK_EQUAL( fstat, 0 ) From AXUNIT

# blob writing in a file
Openo PATH1, 0 Using [FIC]
Putseq 1,[ZQL]MYBLB1 Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT

Call FILE_COMP( PATH0, PATH1 )
ST = Delfile( PATH1 )

# blob sized 1 to blob sized 0
MYB = [ZQL]MYBLB1
Call CHECK_EQUAL( SIZ, len(MYB) ) From AXUNIT


Openo PATH1, 0 Using [FIC]
Putseq 1,MYB Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT

Call FILE_COMP( PATH0, PATH1 )
Trbegin [ZQL]
Delete [ZQL]ZQLFBLOB0 = 1
Commit
ST = Delfile( PATH1 )

Close Local File [ZQL]
End


# -----------------------  BLB_TEST0 -----------------------------------
# ######################################################################
Subprog BLB_TEST0( )

Local Blbfile MYB(0)
Local Integer ST
Local Integer SIZ

PATH0 = filpath("TRT", "MENU", "src", -1 )
PATH1 = filpath("TMP", "MENU0", "src", -1 )

SIZ = filinfo( PATH0, 7)
Openi PATH0, 0 Using [FIC]
Getseq 1,MYB Sized SIZ Using [FIC]
Openi Using [FIC]
Call CHECK_EQUAL( SIZ, len(MYB) ) From AXUNIT


Openo PATH1, 0 Using [FIC]
Putseq 1,MYB Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( SIZ, ST ) From AXUNIT

Call FILE_COMP( PATH0, PATH1 )

ST = Delfile( PATH1 )
End


# -----------------------  CLB_TEST0 -----------------------------------
# ######################################################################
Subprog CLB_TEST1( )
Local File ABLOB [ABL]
Local Char PATH0(255)
Local Char PATH1(255)
Local Char RESULT(20)(0..2)
Local Integer ST
Local Integer SIZ


Local Clbfile MYC(8)

PATH0 = filpath("TRT", "MENU", "src", -1 )
PATH1 = filpath("TMP", "MENU0", "src", -1 )
PATH2 = filpath("TMP", "MENU1", "src", -1 )

SIZ = filinfo( PATH0, 7)

# on charge le fichier
adxifs = chr$(255)
adxirs = chr$(255)
Openi PATH0, 0 Using [FIC]
Rdseq MYC Using [FIC]
Openi Using [FIC]

Openo PATH1, 0 Using [FIC]
Putseq 1,MYC Using [FIC]
Openo Using [FIC]
ST = filinfo( PATH1, 7)
Call CHECK_EQUAL( ST, 2^18 ) From AXUNIT

Openi PATH1, 0 Using [FIC]
Getseq 1,MYC Using [FIC]
Openi Using [FIC]

Openo PATH2, 0 Using [FIC]
Putseq 1,MYC Using [FIC]
Openo Using [FIC]
Call CHECK_EQUAL( ST, 2^18 ) From AXUNIT

Call FILE_COMP( PATH1, PATH2 )

ST = Delfile( PATH1 )
ST = Delfile( PATH2 )

End



# -----------------------  CLB_TEST0 -----------------------------------
# ######################################################################
Subprog CLB_TEST0( )
Local File ABLOB [ABL]
Local Char PATH0(255)
Local Char PATH1(255)
Local Char RESULT(20)

Local Blbfile MYB(2)
Local Clbfile MYC(2)

PATH0 = filpath("TRT", "MENU", "src", -1 )
PATH1 = filpath("TMP", "MENU", "src", -1 )

adxifs = chr$(255)
adxirs = chr$(255)
Openi PATH0, 0 Using [FIC]
    Rdseq MYC Using [FIC]
Openi Using [FIC]

adxifs = chr$(255)
adxirs = ""

Openo PATH1, 0 Using [FIC]
Wrseq MYC Using [FIC]
Openo Using [FIC]

Call FILE_COMP( PATH0, PATH1 )

ST = Delfile( PATH1 )

End


# -------------- fonction outils --------------------------------------
# ######################################################################
Subprog FILE_COMP( PATH1, PATH2)
Value Char PATH1( )
Value Char PATH2( )

If (GOS="unix")
    System RESULT(0)="@cmp"-PATH1-PATH2
    Call CHECK_NOTEQUAL( RESULT(0), "" ) From AXUNIT
Else
    System RESULT="@fc /b"-PATH1-PATH2
    Call CHECK_NOTEQUAL( RESULT(1), "FC : aucune différence trouvée" ) From AXUNIT
Endif
End


Subprog CREATE_TABLES()

# Superviseur
# Data restoration
  If !clalev([ATB]) : Local File ATABLE : Endif
  Trbegin [ATB]
  Raz [ATB]
  [ATB]ABRFIC="ZTSTBL" :  [ATB]CODACT="" :  [ATB]CODFIC="ZQLFBLOB"
  [ATB]CRE=1 :  [ATB]UPDFLG=0 :  [ATB]INTIT="INTITL"
  [ATB]INTITC="" :  [ATB]INTITFIC=1485 :  [ATB]MODULE=2
  [ATB]NBENREG=0 :  [ATB]OPT=0 :  [ATB]ZERO=1
  [ATB]STA=0 :  [ATB]TYPDLV=1 :  [ATB]TYPDBA=3
  [ATB]TYPFIC=1 :  [ATB]FLG130=1 :  [ATB]AUDCRE=1
  [ATB]AUDUPD=1 :  [ATB]AUDDEL=1 :  [ATB]AUDWRK=1
  [ATB]AUDBI=1 :  [ATB]AUDSDA=1 :  [ATB]AUDCLE=""
  [ATB]ASDCLE="" :  [ATB]GENTRA=1 :  [ATB]SECURE=1
  [ATB]FLGLEG=0 :  [ATB]CREDAT=gdat$(25,5,2012) :  [ATB]UPDDAT=gdat$(0,0,0)
  [ATB]CREUSR="SD" :  [ATB]UPDUSR="SD" :  [ATB]CREDATTIM=gdatetime$('2012-05-25T15:21:29Z')
  [ATB]UPDDATTIM=gdatetime$('2012-05-25T15:21:29Z') :
  Write [ATB]
  Commit
  If !clalev([ATZ]) : Local File ATABZON : Endif
  Trbegin [ATZ]
  Raz [ATZ]
  [ATZ]ANNUL=1 :  [ATZ]CODACT="" :  [ATZ]CODFIC="ZQLFBLOB"
  [ATZ]CODTYP="L" :  [ATZ]CODZONE="MYK" :  [ATZ]DIME=1
  [ATZ]EXPLIEN="" :  [ATZ]LIEN="" :  [ATZ]LONG=0
  [ATZ]NOABREG=5296 :  [ATZ]NOCOURT=5296 :  [ATZ]NOLIB=0
    [ATZ]NOLONG=5296 :  [ATZ]NUMLIG=1
  [ATZ]OBLIG=1 :  [ATZ]OPTION="" :
  [ATZ]ZERO=1 :  [ATZ]VERIF=2 :  [ATZ]CHPLEG=1
  [ATZ]CREUSR="SD" :  [ATZ]UPDUSR="SD" :  [ATZ]CREDATTIM=gdatetime$('2012-05-25T15:21:29Z')
  [ATZ]UPDDATTIM=gdatetime$('2012-05-25T15:21:29Z') :
  Write [ATZ]
  Raz [ATZ]
  [ATZ]ANNUL=0 :  [ATZ]CODACT="" :  [ATZ]CODFIC="ZQLFBLOB"
  #[ATZ]CODTYP="ZABB0" :  [ATZ]CODZONE="MYBLB1" :  [ATZ]DIME=1
  [ATZ]CODTYP="AB0" :  [ATZ]CODZONE="MYBLB1" :  [ATZ]DIME=1
  [ATZ]EXPLIEN="" :  [ATZ]LIEN="" :  [ATZ]LONG=1
  [ATZ]NOABREG=171 :  [ATZ]NOCOURT=171 :  [ATZ]NOLIB=0
    [ATZ]NOLONG=171 :  [ATZ]NUMLIG=2
  [ATZ]OBLIG=2 :  [ATZ]OPTION="" :
  [ATZ]ZERO=1 :  [ATZ]VERIF=0 :  [ATZ]CHPLEG=0
  [ATZ]CREUSR="SD" :  [ATZ]UPDUSR="SD" :  [ATZ]CREDATTIM=gdatetime$('2012-05-25T15:21:29Z')
  [ATZ]UPDDATTIM=gdatetime$('2012-05-25T15:21:29Z') :
  Write [ATZ]
  Commit
  If !clalev([ATI]) : Local File ATABIND : Endif
  Trbegin [ATI]
  Raz [ATI]
  [ATI]CODACT="" :  [ATI]CODFIC="ZQLFBLOB" :  [ATI]CODIND="ZQLFBLOB0"
  [ATI]ORDIND=1 :  [ATI]DESCRIPT="MYK" :  [ATI]HOMONYM=1
  [ATI]NUMLIG=1 :  [ATI]NIVDEC=0 :  [ATI]CREUSR="SD"
  [ATI]UPDUSR="SD" :  [ATI]CREDATTIM=gdatetime$('2012-05-25T15:21:29Z') :  [ATI]UPDDATTIM=gdatetime$('2012-05-25T15:21:29Z')
  Write [ATI]
  Commit
End

Subprog DELETE_TABLES
Local Integer OKTAB
If !clalev([ATY]) : Local File ATYPE : Endif

Call DESTROY_TABLE("ZQLFBLOB") From ="QLFSUP-LIB"

Local Integer OKTRT
Local Char SUP(3),CODE(20)
CODE= "ZQLFBLOB"
For SUF = "srf", "fde", "dat", "idx" , "cfg"
  FICTRT = filpath("FIL",[L]CODE,SUF,nomap)
  OKTRT = 1
  If filinfo(FICTRT,0)>=0
   OKTRT = 0
  Endif
  Call CHECK_EQUAL(OKTRT, 1 ) From AXUNIT
Next SUF

If !clalev([ATB]) : Local File ATABLE : Endif
CODE= "ZQLFBLOB"
OKTRT = 1
Read [ATB]CODFIC = [L]CODE
If !fstat : OKTRT = 0 : Endif
Call CHECK_EQUAL(OKTRT, 1 ) From AXUNIT
End

Subprog VALID_TABLES
Call VALFIL_TABLE("ZQLFBLOB",1) From ="QLFSUP-LIB"
Local Integer OKTRT
Local Char SUP(3),CODE(20)
CODE= "ZQLFBLOB"
For SUF = "srf", "fde"
 FICTRT = filpath("FIL",[L]CODE,SUF,nomap)
 OKTRT = 0
 If filinfo(FICTRT,0)>=0
  OKTRT = 1
 Endif
 Call CHECK_EQUAL(OKTRT, 1 ) From AXUNIT
Next SUF

If !clalev([ATB]) : Local File ATABLE : Endif
CODE= "ZQLFBLOB"
OKTRT = 0
Read [ATB]CODFIC = [L]CODE
If !fstat : OKTRT = 1 : Endif
Call CHECK_EQUAL(OKTRT, 1 ) From AXUNIT
End
