Local Clbfile RESULT
RESULT = func TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_RAZ_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


Funprog TESTSUITE()
Callmet GACTX.ACTX_SET_LANISO("fr-FR")

Call TESTSUITE_START("RAZ", "RAZ ") From AXUNIT


Call ADD_TESTCASE("TC_RAZ_LOCAL","TC_RAZ_LOCAL"-"Raz local variables", 24) From AXUNIT
Call ADD_TESTCASE("TC_RAZ_GLOBAL","TC_RAZ_GLOBAL"-"Raz global variables", 24) From AXUNIT
Call ADD_TESTCASE("TC_RAZ_LOCAL_CLASS", "TC_RAZ_LOCAL_CLASS"-"Raz [L] class",11) From AXUNIT
Call ADD_TESTCASE("TC_RAZ_ERR","TC_RAZ_ERRL"-"Raz errors", 2) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT


$ERROR
Local Char TT(255),TT1(255)
TT=num$(errn)-errmes$(errn)
TT1=num$(ERR)-errmes$(ERR)
Call CHECK_EQUAL(TT, TT1) From AXUNIT
ERR = 0
Resume

Subprog TC_RAZ_LOCAL
Onerrgo ERROR
Local Integer ERR
Local Char TT(255)

Local Shortint ASHORTINT
TT="Raz SHORTINT"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ASHORTINT = 32000
Raz [L]ASHORTINT
Call CHECK_EQUAL([L]ASHORTINT,0) From AXUNIT

Local Date     ADATE
TT="Raz DATE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ADATE=[31/01/2012]
Raz [L]ADATE
Call CHECK_EQUAL([L]ADATE,[0/0/0]) From AXUNIT

Local Integer  AINT
TT="Raz INT"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]AINT = 50000
Raz [L]AINT
Call CHECK_EQUAL([L]AINT,0) From AXUNIT

Local Double   ADOUBLE
TT="Raz DOUBLE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ADOUBLE = 50000.12345
Raz [L]ADOUBLE
Call CHECK_EQUAL([L]ADOUBLE,0) From AXUNIT

Local Decimal  ADECIMAL
TT="Raz DECIMAL"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ADECIMAL = 50000.12345
Raz [L]ADECIMAL
Call CHECK_EQUAL([L]ADECIMAL,0) From AXUNIT

Local Char     ACHAR(100)
TT="Raz CHAR"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ACHAR = "This is a test"
Raz [L]ACHAR
Call CHECK_EQUAL([L]ACHAR,"") From AXUNIT

Local Schar    ASCHAR(100)
TT="Raz SCHAR"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ASCHAR = "This is a test"
Raz [L]ASCHAR
Call CHECK_EQUAL([L]ASCHAR,"") From AXUNIT

Local Blbfile  ABLOB(2)
TT="Raz BLOB"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Raz [L]ABLOB
Call CHECK_EQUAL(len([L]ABLOB), 0) From AXUNIT

Local Clbfile  ACLOB(2)
TT="Raz ACLOB"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ACLOB = "This is a test"
Raz [L]ACLOB
Call CHECK_EQUAL([L]ACLOB,"") From AXUNIT

Local Uuident  AUUID
TT="Raz AUUID"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]AUUID = getUuid
Raz [L]AUUID
Call CHECK_EQUAL([L]AUUID,NullUuid) From AXUNIT

Local Datetime ADATETIME
TT="Raz ADATETIME"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ADATETIME = gdatetime$("2014-08-28T12:00:00Z")
Raz [L]ADATETIME
# note gdatetime$() returns null date on any invalid date# note gdatetime$() returns null date
#             on any invalid date
# gdatetime$ converts canonical datetime to datetime type
Call CHECK_EQUAL([L]ADATETIME,gdatetime$("")) From AXUNIT

Local Tinyint  ATINYINT
TT="Raz TINYINT - supersedes ALIBELLE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[L]ATINYINT = 12
Raz [L]ATINYINT
Call CHECK_EQUAL([L]ATINYINT,0) From AXUNIT



#TODO ? TT="Raz INSTANCE of C_FACILITY"
#TODO ? Local Integer MY_STATUS
#TODO ? Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Local Instance MY_FACILITY Using C_FACILITY
#TODO ? MY_FACILITY = NewInstance C_FACILITY AllocGroup null
#TODO ? 
#TODO ? Local File FACILITY [FCY]
#TODO ? Read [FCY]First
#TODO ? If !fstat
#TODO ?   MY_STATUS = fmet MY_FACILITY.AREAD([F:FCY]FCY)
#TODO ?   If MY_STATUS = [V]CST_AOK
#TODO ?     Raz MY_FACILITY
#TODO ?     If MY_FACILITY=null
#TODO ?       Call CHECK_EQUAL("null","null") From AXUNIT
#TODO ?     Else
#TODO ?       Call CHECK_EQUAL("Not null","null") From AXUNIT
#TODO ?     Endif
#TODO ?   Else
#TODO ?     TT="Unable to read instance"
#TODO ?     Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ?   Endif
#TODO ? Else
#TODO ?   TT="No facilities found"
#TODO ?   Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Endif
#TODO ? LogicClose File [FCY]
#TODO ? 
#TODO ? Local Integer I
#TODO ? TT="Raz table row"
#TODO ? Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Local File FACILITY [FCY]
#TODO ? Read [FCY]First
#TODO ? If !fstat
#TODO ?     Raz [FCY]
#TODO ?     For I=1 To clanbs([F:FCY],1)
#TODO ?       Call CHECK_RAZ(clavar([F:FCY],I),evalue("type("+clavar([F:FCY],I)+")"),evalue("[F:FCY]"+clavar([F:FCY],I)))
#TODO ?     Next
#TODO ? Endif
#TODO ? End
#TODO ? 
End

Subprog TC_RAZ_GLOBAL
Onerrgo ERROR
Local Integer ERR
Local Char TT(255)

Global Shortint ASHORTINT
TT="Raz SHORTINT"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ASHORTINT = 32000
Raz [V]ASHORTINT
Call CHECK_EQUAL([V]ASHORTINT,0) From AXUNIT

Global Date     ADATE
TT="Raz DATE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ADATE=[31/01/2012]
Raz [V]ADATE
Call CHECK_EQUAL([V]ADATE,[0/0/0]) From AXUNIT

Global Integer  AINT
TT="Raz INT"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]AINT = 50000
Raz [V]AINT
Call CHECK_EQUAL([V]AINT,0) From AXUNIT


Global Double   ADOUBLE
TT="Raz DOUBLE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ADOUBLE = 50000.12345
Raz [V]ADOUBLE
Call CHECK_EQUAL([V]ADOUBLE,0) From AXUNIT

Global Decimal  ADECIMAL
TT="Raz DECIMAL"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ADECIMAL = 50000.12345
Raz [V]ADECIMAL
Call CHECK_EQUAL([V]ADECIMAL,0) From AXUNIT

Global Char     ACHAR(100)
TT="Raz CHAR"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ACHAR = "This is a test"
Raz [V]ACHAR
Call CHECK_EQUAL([V]ACHAR,"") From AXUNIT

Global Schar    ASCHAR(100)
TT="Raz SCHAR"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ASCHAR = "This is a test"
Raz [V]ASCHAR
Call CHECK_EQUAL([V]ASCHAR,"") From AXUNIT

Global Blbfile  ABLOB(2)
TT="Raz BLOB"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Raz [V]ABLOB
Call CHECK_EQUAL(len([V]ABLOB), 0) From AXUNIT

Global Clbfile  ACLOB(2)
TT="Raz ACLOB"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ACLOB = "This is a test"
Raz [V]ACLOB
Call CHECK_EQUAL([V]ACLOB,"") From AXUNIT

Global Uuident  AUUID
TT="Raz AUUID"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]AUUID = getUuid
Raz [V]AUUID
Call CHECK_EQUAL([V]AUUID,NullUuid) From AXUNIT

Global Datetime ADATETIME
TT="Raz ADATETIME"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ADATETIME = "0000-00-00T00:00:00Z"
Raz [V]ADATETIME
# note gdatetime$() returns null date on any invalid date# note gdatetime$() returns null date
#             on any invalid date
# gdatetime$ converts canonical datetime to datetime type
Call CHECK_EQUAL([V]ADATETIME,gdatetime$("")) From AXUNIT

Global Tinyint  ATINYINT
TT="Raz TINYINT - supersedes ALIBELLE"
Call CHECK_EQUAL(TT,TT) From AXUNIT
[V]ATINYINT = 12
Raz [V]ATINYINT
Call CHECK_EQUAL([V]ATINYINT,0) From AXUNIT

#TODO ? TT="Raz INSTANCE of C_FACILITY"
#TODO ? Global Integer MY_STATUS
#TODO ? Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Global Instance MY_FACILITY Using C_FACILITY
#TODO ? MY_FACILITY = NewInstance C_FACILITY AllocGroup null
#TODO ? 
#TODO ? Global File FACILITY [FCY]
#TODO ? Read [FCY]First
#TODO ? If !fstat
#TODO ?   MY_STATUS = fmet MY_FACILITY.AREAD([F:FCY]FCY)
#TODO ?   If MY_STATUS = [V]CST_AOK
#TODO ?     Raz MY_FACILITY
#TODO ?     If MY_FACILITY=null
#TODO ?       Call CHECK_EQUAL("null","null") From AXUNIT
#TODO ?     Else
#TODO ?       Call CHECK_EQUAL("Not null","null") From AXUNIT
#TODO ?     Endif
#TODO ?   Else
#TODO ?     TT="Unable to read instance"
#TODO ?     Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ?   Endif
#TODO ? Else
#TODO ?   TT="No facilities found"
#TODO ?   Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Endif
#TODO ? LogicClose File [FCY]
#TODO ? 
#TODO ? Global Integer I
#TODO ? TT="Raz table row"
#TODO ? Call CHECK_EQUAL(TT,TT) From AXUNIT
#TODO ? Global File FACILITY [FCY]
#TODO ? Read [FCY]First
#TODO ? If !fstat
#TODO ?     Raz [FCY]
#TODO ?     For I=1 To clanbs([F:FCY],1)
#TODO ?       Call CHECK_RAZ(clavar([F:FCY],I),evalue("type("+clavar([F:FCY],I)+")"),evalue("[F:FCY]"+clavar([F:FCY],I)))
#TODO ?     Next
#TODO ? Endif
#TODO ? 
Kill [V]ASHORTINT
Kill [V]ADATE
Kill [V]AINT
Kill [V]ADOUBLE
Kill [V]ADECIMAL
Kill [V]ACHAR
Kill [V]ASCHAR
Kill [V]ABLOB
Kill [V]ACLOB
Kill [V]AUUID
Kill [V]ADATETIME
Kill [V]ATINYINT
#TODO Kill [V]MY_FACILITY
#TODO ? LogicClose File [FCY]
End

Subprog CHECK_RAZ(FLD,ATYPE,AVALUE)
Value Char FLD
Value Integer ATYPE

If ATYPE>10 & ATYPE<=265
  ATYPE=10
Endif

Call CHECK_EQUAL(FLD,FLD) From AXUNIT

Case ATYPE
  When 10,523          : Call CHECK_EQUAL(AVALUE,"") From AXUNIT
  When 1,2,4,5,6,7     : Call CHECK_EQUAL(AVALUE,0 ) From AXUNIT
  When 3               : Call CHECK_EQUAL(AVALUE,[0/0/0])  From AXUNIT
  When 522             : Call CHECK_EQUAL(len(AVALUE),0)  From AXUNIT
  When 526             : Call CHECK_EQUAL(AVALUE,gdatetime$(""))  From AXUNIT
  When 525             : Call CHECK_EQUAL(AVALUE,NullUuid)  From AXUNIT
Endcase

End

Subprog TC_RAZ_LOCAL_CLASS
Local Integer I
Local Shortint ASHORTINT
ASHORTINT = 12
Local Date ADATE
ADATE = [31/01/2019]
Local Integer AINT
AINT = 16000
Local Double ADOUBLE
ADOUBLE = 12.232
Local Decimal ADECIMAL
ADECIMAL = 19.765
Local Char ACHAR(10)
ACHAR = "ABC"
Local Schar ASCHAR(10)
ASCHAR = "DEF"
Local Clbfile ACLOB(2)
ACLOB = "clob"
Local Uuident AUUID
AUUID = getUuid
Local Datetime ADATETIME
ADATETIME = datetime$
Local Tinyint ATINYINT
ATINY=15

Raz [L]

Call CHECK_EQUAL([L]ASHORTINT,0) From AXUNIT
Call CHECK_EQUAL([L]ADATE,[0/0/0]) From AXUNIT
Call CHECK_EQUAL([L]AINT,0) From AXUNIT
Call CHECK_EQUAL([L]ADOUBLE,0) From AXUNIT
Call CHECK_EQUAL([L]ADECIMAL,0) From AXUNIT
Call CHECK_EQUAL([L]ACHAR,"") From AXUNIT
Call CHECK_EQUAL([L]ASCHAR,"") From AXUNIT
Call CHECK_EQUAL([L]ACLOB,"") From AXUNIT
Call CHECK_EQUAL([L]AUUID,NullUuid) From AXUNIT
Call CHECK_EQUAL([L]ADATETIME,gdatetime$("")) From AXUNIT
Call CHECK_EQUAL([L]ATINYINT,0) From AXUNIT
End

Subprog TC_RAZ_ERR
Local Integer ERR
Onerrgo ERROR

ERR=6
Raz ABCDE
TT="Raz non-existent variable"

ERR=7
Raz [ABCD]
TT="Raz non-existent class"
End
