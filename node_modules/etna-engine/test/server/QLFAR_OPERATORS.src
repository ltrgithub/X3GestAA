#<AdxTL>@(#)0.0.0.0 $Revision$
#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_OPERATORS") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_OPERATORS_"+GUSER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("OPERATORS", "OPERATORS") From AXUNIT
Call ADD_TESTCASE("TC_CDECL","Variables declaration", 8) From AXUNIT
Call ADD_TESTCASE("TC_NUMBERS","Operations on numbers", 40) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT


$ERROR
Call CHECK_EQUAL(errn, EX)
EX = 0
Resume

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

Subprog TC_CDECL
Integer EX
Onerrgo ERROR

Local Integer A
A=1
Call CHECK_EQUAL(A, 1)
A=1.23456789
Call CHECK_EQUAL(A, 1)

A= -(2^31-1)
Call CHECK_EQUAL(A, -(2^31-1))
A= 2^31-1
Call CHECK_EQUAL(A, 2^31-1)
#Set A with a value out of limits:
EX = 50 :# expected error
A= -(2^31)
EX = 50 :# expected error
A= 2^31

Local Decimal B
B=1
Call CHECK_EQUAL(B, 1)
B=1.23456789
Call CHECK_EQUAL(B, 1.23456789)

End

Subprog TC_NUMBERS
Integer EX
Onerrgo ERROR
#Basic :
Call CHECK_EQUAL(1+1, 2)
Call CHECK_EQUAL(1-1 , 0)
Call CHECK_EQUAL(1*1, 1)
Call CHECK_EQUAL(1/1 , 1)
Call CHECK_EQUAL(1>=1 , 1)
Call CHECK_EQUAL(1>1 , 0)
Call CHECK_EQUAL(1<1 , 0)
Call CHECK_EQUAL(1<=1 , 1)

Call CHECK_EQUAL(arr((1/3)+(1/3)+(1/3),0.000001),1 )

Call CHECK_EQUAL(arr(3*(1/3),0.000001),1 )
Call CHECK_EQUAL(1/3-1/3 , 0)

Call CHECK_EQUAL(log(10^3), 3)
Call CHECK_EQUAL(3*log(10^3), 9)
Call CHECK_EQUAL(10^log(10^3), 10^3)
Call CHECK_EQUAL(log(10^3) >=3, 1)
Call CHECK_EQUAL(log(10^3) > 3 , 0)
Call CHECK_EQUAL(log(10^3) <=3, 1)
Call CHECK_EQUAL(log(10^3) < 3 , 0)

Call CHECK_EQUAL(sqr(2^2) , 2)
Call CHECK_EQUAL(sqr(3^2) , 3)
Call CHECK_EQUAL(sqr(4^2) , 4)
Call CHECK_EQUAL(sqr(5^2) , 5)
Call CHECK_EQUAL(sqr(6^2) , 6)

Call CHECK_EQUAL(ln(exp(2)) , 2)
Call CHECK_EQUAL(ln(exp(3)) , 3)
Call CHECK_EQUAL(ln(exp(4)) , 4)
Call CHECK_EQUAL(ln(exp(5)) , 5)
Call CHECK_EQUAL(ln(exp(6)) , 6)


[S]adxmda = 1
Call CHECK_EQUAL(cos(pi/4), sqr(2)/2)
Call CHECK_EQUAL(sin(pi/4) , sqr(2)/2)
Call CHECK_EQUAL(cos(pi/4)+sin(pi/4) , sqr(2))
Call CHECK_EQUAL(cos(pi/4)^2+sin(pi/4)^2 , 1)
Call CHECK_EQUAL(cos(pi/2)+sin(pi/2) , 1)
Call CHECK_EQUAL(cos(pi/2)^2+sin(pi/2)^2 , 1)
Call CHECK_EQUAL(cos(pi)+sin(pi) , -1)
Call CHECK_EQUAL(cos(pi)^2+sin(pi)^2 , 1)


Local Integer A,B,C
A=4
B=3
C=A/B
Call CHECK_EQUAL(C, 1)
A=2
B=3
C=A/B
Call CHECK_EQUAL(C, 0)
Local Decimal D
A=2
B=3
D = A/B
Call CHECK_EQUAL(D, 2/3)
C =2*D
Call CHECK_EQUAL(C, 1)

End
