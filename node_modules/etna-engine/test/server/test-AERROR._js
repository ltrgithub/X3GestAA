"use strict";
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var glob = require('streamline/lib/globals');
var runtime = require("etna-engine/lib/runtime/runtime");
var helper = require("etna-engine/test/fixtures/helper");
var constants = require("etna-supervisor/lib/constants");

var script;
var superv;

function nanos(hr) {
	return hr[0] * 1e9 + hr[1];
}

asyncTest("start", function(_) {
	var supervisor = require('etna-supervisor/lib/supervisor');
	var config = require("etna-util/lib/nodeconfig").config;
	var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
	superv = supervisor.create(_, etnaConfig);
	require("etna-engine/lib/runtime/variables").initStack(superv);
	require("etna-supervisor/lib/builtins/ACTX").init(_, etnaConfig.session, superv);
	ok(true, "start");
	start();
});


asyncTest("TC_AERROR", function(_) {
	ok(true, "TC_AERROR 0");
	var superv = glob.context.x3frame.context.superv;
	var instance = superv.newInstance(_, "ADOPAR");
	instance.AREAD(_, "SUP", "FMTDAT");

	var chapitre = instance.get(_, "CHAPITRE");
	strictEqual(chapitre, "SUP");

	instance.ASETERROR(_, "CHAPITRE", "Celine DION sings AC/DC", constants.CST_AERROR);
	instance.ASETERROR(_, "PARAM", "The Cure remix", constants.CST_AERROR);
	instance.ASETERROR(_, "CHAPITRE", "Neil Young new EP", constants.CST_AOK);
	instance.ASETERROR(_, "", "Liam Gallagher drunk", constants.CST_AINFO);
	instance.ASETERROR(_, "CHAPITRE", "Pixies new bass player", constants.CST_AINFO);

	var err = instance.getDiagnoses(_);
	strictEqual(err[0].message, "Celine DION sings AC/DC");
	strictEqual(err[1].message, "The Cure remix");
	strictEqual(err[2].message, "Neil Young new EP");
	strictEqual(err[3].message, "Liam Gallagher drunk");
	strictEqual(err[4].message, "Pixies new bass player");

	// collections
	var instance_c1 = superv.newInstance(_, "AQCCOL01");
	instance_c1.set(_, "KEY1", "TEST1");
	instance_c1.set(_, "FIELD1", "Header");

	var ln = instance_c1.ADDLINE(_, "LINCOL", constants.CST_ALASTPOS);
	var instance_c2_0 = instance_c1.get(_, "LINCOL").getChildren()[ln - 1];

	instance_c2_0.set(_, "KEY1", "TEST1");
	instance_c2_0.set(_, "LINNO", 1);
	instance_c2_0.set(_, "LINFLD", "Line1");

	var ln = instance_c1.ADDLINE(_, "LINCOL", constants.CST_ALASTPOS);
	var instance_c2_1 = instance_c1.get(_, "LINCOL").getChildren()[ln - 1];

	instance_c2_1.set(_, "KEY1", "TEST2");
	instance_c2_1.set(_, "LINNO", 2);
	instance_c2_1.set(_, "LINFLD", "Line2");

	instance_c1.ASETERROR(_, "FIELD1", "Celine DION sings AC/DC", constants.CST_AERROR);
	instance_c1.ASETERRORCAT(_, "", "Elvis Alive", constants.CST_AFATAL, 6);
	instance_c2_0.ASETERROR(_, "KEY1", "The Cure remix", constants.CST_AERROR);
	instance_c2_1.ASETERROR(_, "LINNO", "Neil Young new EP", constants.CST_AOK);
	instance_c2_0.ASETERROR(_, "", "Liam Gallagher drunk", constants.CST_AINFO);
	instance_c2_0.ASETERROR(_, "KEY1", "BB King dead", constants.CST_AFATAL);
	instance_c2_1.ASETERROR(_, "LINNO", "Pixies new bass player", constants.CST_AINFO);

	err = instance_c1.getDiagnoses(_);

	strictEqual(err[0].get(_, "MES"), "Celine DION sings AC/DC");
	strictEqual(err[1].get(_, "MES"), "Elvis Alive");
	strictEqual(err[2].get(_, "MES"), "The Cure remix");
	strictEqual(err[3].get(_, "MES"), "Neil Young new EP");
	strictEqual(err[4].get(_, "MES"), "Liam Gallagher drunk");
	strictEqual(err[5].get(_, "MES"), "BB King dead");
	strictEqual(err[6].get(_, "MES"), "Pixies new bass player");

	strictEqual(err[0].get(_, "PRO"), "FIELD1");
	strictEqual(err[1].get(_, "PRO"), "");
	strictEqual(err[2].get(_, "PRO"), "LINCOL(1).KEY1");
	strictEqual(err[3].get(_, "PRO"), "LINCOL(2).LINNO");
	strictEqual(err[4].get(_, "PRO"), "LINCOL(1)");
	strictEqual(err[5].get(_, "PRO"), "LINCOL(1).KEY1");
	strictEqual(err[6].get(_, "PRO"), "LINCOL(2).LINNO");

	strictEqual(err[0].get(_, "LAB"), "Zone");
	strictEqual(err[1].get(_, "LAB"), "");
	strictEqual(err[2].get(_, "LAB"), "Clé");
	strictEqual(err[3].get(_, "LAB"), "Ligne");
	strictEqual(err[4].get(_, "LAB"), "");
	strictEqual(err[5].get(_, "LAB"), "Clé");
	strictEqual(err[6].get(_, "LAB"), "Ligne");


	var maxSeverityAll = instance_c1.AGETMAXERRORALL(_);
	strictEqual(maxSeverityAll, constants.CST_AFATAL);

	var maxSeverity = instance_c1.AGETMAXERROR(_);
	strictEqual(maxSeverity, constants.CST_AFATAL);

	var args = [constants.CST_ALL];

	var stat = instance_c1.xmetAGETMAXERRORTXT(_, args);
	strictEqual(stat, constants.CST_AOK);
	if (stat === constants.CST_AOK) {
		strictEqual(args[1], ""); // No PRO
		strictEqual(args[2], constants.CST_AFATAL);
		strictEqual(args[3], ""); // No Label
		strictEqual(args[4], "Elvis Alive");
		strictEqual(args[5], 6);
		strictEqual(args[6], "");
	}

	stat = instance_c2_0.ADELETEERROR(_, "KEY1");
	strictEqual(stat, constants.CST_AOK);
	stat = instance_c1.ADELETEERRORALL(_);
	strictEqual(stat, constants.CST_AOK);

	var max = 100;
	var hrtime = process.hrtime();
	for (var i = 0; i < max; i++) {
		instance.AREAD(_, "SUP", "FMTDAT");
	}
	var diff = process.hrtime(hrtime);
	ok(true, "AREAD=" + Math.floor(nanos(diff) / max) + " ns, " + Math.floor(nanos(diff) / (1e3 * max)) + " us, " + Math.floor(nanos(diff) / (1e6 * max)) + " ms");

	start();
});

asyncTest("stop", function() {
	doStop = true;
	ok(true, "stop");
	start();
});