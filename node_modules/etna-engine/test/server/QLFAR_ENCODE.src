#<AdxTL>@(#)5.0.0.0 $Revision$
Local Clbfile RES(4)
RES = func TESTSUITE()
Infbox RES
End

#**
#* The main entry point of the unit test suite for Requirement 70693
#*
#* @see
#* <a href="http://www.cafewebmaster.com/online_tools/utf8_encode">Online UTF-8 encoding and decoding</a><br>
#* <a href="http://www.utf8-chartable.de/">Table of utf-8 characters</a><br>
#* <a href="http://webnet77.com/cgi-bin/helpers/base-64.pl">Online base64 encoding and decoding</a>
#*!
Funprog TESTSUITE()

#  Call CHECK_EQUAL(1, 1) From AXUNIT

#TODO  Call ADD_TESTCASE("TEST_STRENCODE", "Encoding to UTF-8 blob", 15) From AXUNIT
#TODO  Call ADD_TESTCASE("TEST_STRDECODE", "Decoding from UTF-8 blob", 15) From AXUNIT
#TODO  Call ADD_TESTCASE("TEST_B64ENCODE_STRING", "Encoding to base64 string", 5) From AXUNIT
#TODO  Call ADD_TESTCASE("TEST_B64DECODE_STRING", "Decoding from base64 string", 5) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("REQ-70693", "Encoding")

Subprog SETUP
#  Append GXUNIT_SUITE_RESULT, chr$(10)
#  Append GXUNIT_SUITE_RESULT, "SETUP"
#  Append GXUNIT_SUITE_RESULT, chr$(10)
End

Subprog TEARDOWN
#  Append GXUNIT_SUITE_RESULT, chr$(10)
#  Append GXUNIT_SUITE_RESULT, "TEARDOWN"
#  Append GXUNIT_SUITE_RESULT, chr$(10)
End

#**
#* Test case for encoding string to utf-8 blob
#*!
Subprog TEST_STRENCODE()
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Integer COUNT
  Local Char STRIN(255)
  Local Char EXPECT(255)

  # test fatal error
#  A = B

  # =================
  # check invariability of char 32 - 127
  STRIN = sigma(I = 32, 127, chr$(I))
  # 5 asserts
  Call CHECK_ENCODE_UTF8(STRIN, STRIN)

  # =================
  # Encodes isolatin-1 char 128 - 191
  # see: http://www.utf8-chartable.de/
  STRIN = sigma(I = 0, 63, chr$(128+I))
  EXPECT = sigma(I = 0, 63, chr$(194)+chr$(128+I))
  # 5 asserts
  Call CHECK_ENCODE_UTF8(STRIN, EXPECT)

  # =================
  # Encodes isolatin-1 char 192 - 255
  # see: http://www.utf8-chartable.de/
  STRIN = sigma(I = 0, 63, chr$(192+I))
  EXPECT = sigma(I = 0, 63, chr$(195)+chr$(128+I))
  # 5 asserts
  Call CHECK_ENCODE_UTF8(STRIN, EXPECT)
End

#**
#* Test case for decoding string from utf-8 blob
#*!
Subprog TEST_STRDECODE()
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Integer COUNT
  Local Char STRIN(255)
  Local Char EXPECT(255)

  # =================
  # check invariability of char 32 - 127
  STRIN = sigma(I = 32, 127, chr$(I))
  # 5 asserts
  Call CHECK_DECODE_UTF8(STRIN, STRIN)

  # =================
  # http://www.utf8-chartable.de/
  # encode isolatin-1 char 128 - 191
  STRIN = sigma(I = 0, 63, chr$(194)+chr$(128+I))
  EXPECT = sigma(I = 0, 63, chr$(128+I))
  # 5 asserts
  Call CHECK_DECODE_UTF8(STRIN, EXPECT)

  # =================
  # http://www.utf8-chartable.de/
  # encode isolatin-1 char 192 - 255
  STRIN = sigma(I = 0, 63, chr$(195)+chr$(128+I))
  EXPECT = sigma(I = 0, 63, chr$(192+I))
  # 5 asserts
  Call CHECK_DECODE_UTF8(STRIN, EXPECT)
End

#**
#* Test case for base64 encoding<br>
#*
#* Encoding of expecting result has been done using http://webnet77.com/cgi-bin/helpers/base-64.pl
#*!
Subprog TEST_B64ENCODE_STRING()
  Local Clbfile GOT(2)
  Local Blbfile BLB(2)
  Local Integer COUNT
  Local Clbfile STRIN(1)
  Local Clbfile EXPECT(2)

  # some basic tests
  # 1 assert
  Call CHECK_B64ENCODE_STRING("leasure", "bGVhc3VyZQ==")
  # 1 assert
  Call CHECK_B64ENCODE_STRING("easure", "ZWFzdXJl")
  # 1 assert
  Call CHECK_B64ENCODE_STRING("asure", "YXN1cmU=")
  # 1 assert
  Call CHECK_B64ENCODE_STRING("sure", "c3VyZQ==")

  # string concatening char 32 - 127
  STRIN = sigma(I = 32, 127, chr$(I))
  EXPECT = "ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/"
  # 1 assert
  Call CHECK_B64ENCODE_STRING(STRIN, EXPECT)
End

Subprog TEST_B64DECODE_STRING()
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Integer COUNT
  Local Clbfile STRIN(1)
  Local Clbfile EXPECT(2)

  # some basic tests
  # 1 assert
  Call CHECK_B64DECODE_STRING("bGVhc3VyZQ==", "leasure")
  # 1 assert
  Call CHECK_B64DECODE_STRING("ZWFzdXJl", "easure")
  # 1 assert
  Call CHECK_B64DECODE_STRING("YXN1cmU=", "asure")
  # 1 assert
  Call CHECK_B64DECODE_STRING("c3VyZQ==", "sure")

  # string concatening char 32 - 127
  STRIN = "ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/"
  EXPECT = sigma(I = 32, 127, chr$(I))
  # 1 assert
  Call CHECK_B64DECODE_STRING(STRIN, EXPECT)
End

#**
#* Helper method to check base 64 encoding to blob
#*
#* @param STRIN
#* @param EXPECT
#*!
Subprog CHECK_B64ENCODE_STRING(STRIN, EXPECT)
  Local Clbfile GOT(2)
  Local Blbfile BLB(2)
  Local Integer COUNT

  COUNT = strEncode(STRIN, BLB, GASCII)
  COUNT = b64Encode(BLB, GOT)
  Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

#**
#* Helper method to check base 64 decoding from blob
#*
#* @param STRIN
#* @param EXPECT
#*!
Subprog CHECK_B64DECODE_STRING(STRIN, EXPECT)
  Local Clbfile GOT(2)
  Local Blbfile BLB(2)
  Local Integer COUNT

  COUNT = b64Decode(STRIN, BLB)
  COUNT = strDecode(BLB, GOT, GASCII)
  Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

#**
#* Helper method to check encoding to utf-8 blob
#*
#* @param STRIN
#* @param EXPECT
#*!
Subprog CHECK_ENCODE_UTF8(STRIN, EXPECT)
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Integer COUNT

  COUNT = strEncode(STRIN, BLB, GUTF8) : # utf-8 bytes
  Call CHECK_EQUAL(COUNT, len(EXPECT)) From AXUNIT

  COUNT = strDecode(BLB, CLB, GASCII) : # iso-8859-1 string
  Call CHECK_EQUAL(CLB, EXPECT) From AXUNIT
  Call CHECK_EQUAL(COUNT, len(EXPECT)) From AXUNIT

  COUNT = strDecode(BLB, CLB, GUTF8) : # utf-8 string
  Call CHECK_EQUAL(COUNT, len(STRIN)) From AXUNIT
  Call CHECK_EQUAL(CLB, STRIN) From AXUNIT
End

#**
#* Helper method to check decoding from utf-8 blob
#*
#* @param STRIN
#* @param EXPECT
#*!
Subprog CHECK_DECODE_UTF8(STRIN, EXPECT)
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Integer COUNT

  COUNT = strEncode(STRIN, BLB, GASCII) : # iso-8859-1 bytes
  Call CHECK_EQUAL(COUNT, len(STRIN)) From AXUNIT

  COUNT = strDecode(BLB, CLB, GASCII) : # iso-8859-1 string
  Call CHECK_EQUAL(COUNT, len(STRIN)) From AXUNIT
  Call CHECK_EQUAL(CLB, STRIN) From AXUNIT

  COUNT = strDecode(BLB, CLB, GUTF8) : # utf-8 string
  Call CHECK_EQUAL(COUNT, len(EXPECT)) From AXUNIT
  Call CHECK_EQUAL(CLB, EXPECT) From AXUNIT
End

#**
#* Test function
#*
#* @param STRIN
#*!
Funprog ENCODE(STRIN)
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Clbfile CLBOUT(2)
  Local Integer COUNT
  Local Char STR(255)

  COUNT = strEncode(STRIN, BLB, GUTF8) : # utf-8 bytes
  COUNT = strDecode(BLB, CLB, GASCII) : # iso-8859-1

  Append CLBOUT, STRIN
  Append CLBOUT, chr$(10)
  For I=1 To len(STRIN)
    Append CLBOUT, num$(ascii(mid$(STRIN, I,1)))
    Append CLBOUT, " "
  Next

  Append CLBOUT, chr$(10)
  Append CLBOUT, CLB
  Append CLBOUT, chr$(10)
  For I=1 To len(CLB)
    Append CLBOUT, num$(ascii(mid$(CLB, I,1)))
    Append CLBOUT, " "
  Next

#  A = B.C("abc", B, 2, "def",5,CCCC)
End CLBOUT

Funprog ENCODEB64(STRIN)
  Local Clbfile CLB(1)
  Local Blbfile BLB(1)
  Local Clbfile CLBOUT(2)
  Local Integer COUNT
  Local Char STR(255)

  COUNT = strEncode(STRIN, BLB, GASCII)
  COUNT = b64Encode(BLB, CLB)

  Append CLBOUT, STRIN
  Append CLBOUT, chr$(10)
  For I=1 To len(STRIN)
    Append CLBOUT, num$(ascii(mid$(STRIN, I,1)))
    Append CLBOUT, " "
  Next

  Append CLBOUT, chr$(10)
  Append CLBOUT, CLB
  Append CLBOUT, chr$(10)
  For I=1 To len(CLB)
    Append CLBOUT, num$(ascii(mid$(CLB, I,1)))
    Append CLBOUT, " "
  Next

#  A = B.C("abc", B, 2, "def",5,CCCC)
End CLBOUT
