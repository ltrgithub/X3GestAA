#<AdxTL>@(#)4.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_ARRAY2") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_ARRAY2_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE_()
#Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ARRAY2", "ARRAY2") From AXUNIT
EX=0
Onerrgo ERROR

NB_TEST=30
Call ADD_TESTCASE("TC2_FCTZ6","TC2_FCTZ6 Variable Array(6) passed to Function",NB_TEST) From AXUNIT



Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ARRAY2", "ARRAY2")
End SUITE_RESULT


Funprog TESTSUITE()
#Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ARRAY2", "ARRAY2") From AXUNIT
EX=0
Onerrgo ERROR

Call ADD_TESTCASE("TC_SORTA0_5","TC_SORTA0_5 Function Sorta 0..5",8) From AXUNIT
Call ADD_TESTCASE("TC_SORTA0","TC_SORTA0 Function Sorta 0..",8) From AXUNIT
Call ADD_TESTCASE("TC_SORTA1_6","TC_SORTA1_6 Function Sorta 1..6",8) From AXUNIT
Call ADD_TESTCASE("TC_SORTA1","TC_SORTA1 Function Sorta 1..",8) From AXUNIT
Call ADD_TESTCASE("TC_SORTA6","TC_SORTA6 Function Sorta 6",8) From AXUNIT

Call ADD_TESTCASE("TC_ORD_SORTA6","TC_ORD_SORTA6 Function Sorta array(6) Order By CAR(indice),NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORD_SORTA0_5","TC_ORD_SORTA0_5 Function Sorta array(0..5) Order By CAR(indice),NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORD_SORTA0","TC_ORD_SORTA0 Function Sorta array(0..) Order By CAR(indice),NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORD_SORTA1_6","TC_ORD_SORTA1_6 Function Sorta array(1..6) Order By CAR(indice+1),NUM(indice+1)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORD_SORTA1","TC_ORD_SORTA1 Function Sorta array(1..) Order By CAR(indice+1),NUM(indice+1)",8) From AXUNIT

Call ADD_TESTCASE("TC_ORDD_SORTA6","TC_ORDD_SORTA6 Function Sorta array(6) Order By -NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDD_SORTA0_5","TC_ORDD_SORTA0_5 Function Sorta array(0..5) Order By -NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDD_SORTA0","TC_ORDD_SORTA0 Function Sorta array(0..) Order By -NUM(indice)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDD_SORTA1_6","TC_ORDD_SORTA1_6 Function Sorta array(1..6) Order By -NUM(indice+1)",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDD_SORTA1","TC_ORDD_SORTA1 Function Sorta array(1..) Order By -NUM(indice+1)",8) From AXUNIT

Call ADD_TESTCASE("TC_ORDDESC_SORTA6","TC_ORDDESC_SORTA6 Function Sorta array(6) Order By NUM(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC_SORTA0_5","TC_ORDDESC_SORTA0_5 Function Sorta array(0..5) Order By NUM(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC_SORTA0","TC_ORDDESC_SORTA0 Function Sorta array(0..) Order By NUM(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC_SORTA1_6","TC_ORDDESC_SORTA1_6 Function Sorta array(1..6) Order By NUM(indice+1) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC_SORTA1","TC_ORDDESC_SORTA1 Function Sorta array(1..) Order By NUM(indice+1) Desc",8) From AXUNIT

Call ADD_TESTCASE("TC_ORDDESC1_SORTA6","TC_ORDDESC1_SORTA6 Function Sorta array(6) Order By CAR(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC1_SORTA0_5","TC_ORDDESC1_SORTA0_5 Function Sorta array(0..5) Order By CAR(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC1_SORTA0","TC_ORDDESC1_SORTA0 Function Sorta array(0..) Order By CAR(indice) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC1_SORTA1_6","TC_ORDDESC1_SORTA1_6 Function Sorta array(1..6) Order By CAR(indice+1) Desc",8) From AXUNIT
Call ADD_TESTCASE("TC_ORDDESC1_SORTA1","TC_ORDDESC1_SORTA1 Function Sorta array(1..) Order By CAR(indice+1) Desc",8) From AXUNIT

#########################
NB_TEST=30
Call ADD_TESTCASE("TC_FCTW6","TC_FCTW6 Array(6) passed to Function(const)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTW0_5","TC_FCTW0_5 Array(0..5) passed to Function(const)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTW0","TC_FCTW0 Array(0..) passed to Function(const)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTW1_6","TC_FCTW1_6 Array(1..6) passed to Function(const)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTW1","TC_FCTW1 Array(1..) passed to Function(const)",NB_TEST+2) From AXUNIT

#########################
Call ADD_TESTCASE("TC_FCTY6","TC_FCTY6 Array(6) passed to Function(null)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTY0_5","TC_FCTY0_5 Array(0..5) passed to Function(null)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTY0","TC_FCTY0 Array(0..) passed to Function(null)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTY1_6","TC_FCTY1_6 Array(1..6) passed to Function(null)",NB_TEST+2) From AXUNIT
Call ADD_TESTCASE("TC_FCTY1","TC_FCTY1 Array(1..) passed to Function(null)",NB_TEST+2) From AXUNIT

#########################
Call ADD_TESTCASE("TC_FCTZ6","TC_FCTZ6 Array(6) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTZ0_5","TC_FCTZ0_5 Array(0..5) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTZ0","TC_FCTZ0 Array(0..) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTZ1_6","TC_FCTZ1_6 Array(1..6) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTZ1","TC_FCTZ1 Array(1..) passed to Function",NB_TEST) From AXUNIT


#########################
Call ADD_TESTCASE("TC_FCTX6","TC_FCTX6 Array(6) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTX0_5","TC_FCTX0_5 Array(0..5) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTX0","TC_FCTX0 Array(0..) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTX1_6","TC_FCTX1_6 Array(1..6) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTX1","TC_FCTX1 Array(1..) passed to Function()",NB_TEST) From AXUNIT

#########################
Call ADD_TESTCASE("TC_FCTXX6","TC_FCTXX6 Array(6) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTXX0_5","TC_FCTXX0_5 Array(0..5) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTXX0","TC_FCTXX0 Array(0..) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTXX1_6","TC_FCTXX1_6 Array(1..6) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCTXX1","TC_FCTXX1 Array(1..) passed to Function()()",NB_TEST) From AXUNIT

#########################
Call ADD_TESTCASE("TC_FCT0_6","TC_FCT0_6 Array(6) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT0_0_5","TC_FCT0_0_5 Array(0..5) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT0_0","TC_FCT0_0 Array(0..) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT0_1_6","TC_FCT0_1_6 Array(1..6) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT0_1","TC_FCT0_1 Array(1..) passed to Function(0..)",NB_TEST) From AXUNIT

#########################
NB_TEST+=4
Call ADD_TESTCASE("TC_FCT1_6","TC_FCT1_6 Array(6) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT1_0_5","TC_FCT1_0_5 Array(0..5) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT1_0","TC_FCT1_0 Array(0..) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT1_1_6","TC_FCT1_1_6 Array(1..6) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC_FCT1_1","TC_FCT1_1 Array(1..) passed to Function(1..)",NB_TEST) From AXUNIT
#########################

NB_TEST-=4

#########################
Call ADD_TESTCASE("TC2_FCTZ6","TC2_FCTZ6 Variable Array(6) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTZ0_5","TC2_FCTZ0_5 Variable Array(0..5) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTZ0","TC2_FCTZ0 Variable Array(0..) passed to Function",NB_TEST-1) From AXUNIT
Call ADD_TESTCASE("TC2_FCTZ1_6","TC2_FCTZ1_6 Variable Array(1..6) passed to Function",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTZ1","TC2_FCTZ1 Variable Array(1..) passed to Function",NB_TEST) From AXUNIT


#########################
Call ADD_TESTCASE("TC2_FCTX6","TC2_FCTX6 Variable Array(6) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTX0_5","TC2_FCTX0_5 Variable Array(0..5) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTX0","TC2_FCTX0 Variable Array(0..) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTX1_6","TC2_FCTX1_6 Variable Array(1..6) passed to Function()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTX1","TC2_FCTX1 Variable Array(1..) passed to Function()",NB_TEST) From AXUNIT

#########################
Call ADD_TESTCASE("TC2_FCTXX6","TC2_FCTXX6 Variable Array(6) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTXX0_5","TC2_FCTXX0_5 Variable Array(0..5) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTXX0","TC2_FCTXX0 Variable Array(0..) passed to Function()()",NB_TEST-1) From AXUNIT
Call ADD_TESTCASE("TC2_FCTXX1_6","TC2_FCTXX1_6 Variable Array(1..6) passed to Function()()",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCTXX1","TC2_FCTXX1 Variable Array(1..) passed to Function()()",NB_TEST) From AXUNIT

#########################
Call ADD_TESTCASE("TC2_FCT0_6","TC2_FCT0_6 Variable Array(6) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT0_0_5","TC2_FCT0_0_5 Variable Array(0..5) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT0_0","TC2_FCT0_0 Variable Array(0..) passed to Function(0..)",NB_TEST-1) From AXUNIT
Call ADD_TESTCASE("TC2_FCT0_1_6","TC2_FCT0_1_6 Variable Array(1..6) passed to Function(0..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT0_1","TC2_FCT0_1 Variable Array(1..) passed to Function(0..)",NB_TEST) From AXUNIT

#########################
Call ADD_TESTCASE("TC2_FCT1_6","TC2_FCT1_6 Variable Array(6) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT1_0_5","TC2_FCT1_0_5 Variable Array(0..5) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT1_0","TC2_FCT1_0 Variable Array(0..) passed to Function(1..)",NB_TEST-1) From AXUNIT
Call ADD_TESTCASE("TC2_FCT1_1_6","TC2_FCT1_1_6 Variable Array(1..6) passed to Function(1..)",NB_TEST) From AXUNIT
Call ADD_TESTCASE("TC2_FCT1_1","TC2_FCT1_1 Variable Array(1..) passed to Function(1..)",NB_TEST) From AXUNIT


Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ARRAY2", "ARRAY2")
End SUITE_RESULT

$ERROR
Call CHECK_EQUAL(errn, EX)
EX = 0
Resume

Subprog CHECK_EVAL(STR, RESULT)
Call CHECK_EQUAL(evalue(STR), RESULT)
End

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

#####################################################################
$DEF_SORTA
Case WCAS
When "0"
 Local Integer I : I=-2
When "0_5","6"
 Local Integer I : I=0
When "1"
 Local Integer I : I=-1
When "1_6"
 Local Integer I : I=1
Endcase
Local Char CHAINE(250)
CHAINE="First CHAINE"
Gosub _DEF_SORTA
Return

$_DEF_SORTA
indice=0
If WCAS="6"
 Local Integer NUM(6)
 Local Char CAR(1)(6)
 Local Char NOM(10)(6)
Elsif I<0
 Local Integer NUM(I+2..)
 Local Char CAR(1)(I+2..)
 Local Char NOM(10)(I+2..)
 I=I+2
Else
 Local Integer NUM(I..I+5)
 Local Char CAR(1)(I..I+5)
 Local Char NOM(10)(I..I+5)
Endif
        NUM(I) =  1 : CAR(I) =  'A' : NOM(I) =  'at386'
I+= 1 : NUM(I) =  2 : CAR(I) =  'H' : NOM(I) =  'hp'
I+= 1 : NUM(I) =  3 : CAR(I) =  'I' : NOM(I) =  'ibm3151'
I+= 1 : NUM(I) =  4 : CAR(I) =  'V' : NOM(I) =  'vt220'
I+= 1 : NUM(I) =  5 : CAR(I) =  'V' : NOM(I) =  'vt200'
I+= 1 : NUM(I) =  6 : CAR(I) =  'A' : NOM(I) =  'ansi'
Return

$VERIF_LIST
Call CHECK_EQUAL("BEGIN VERIF_LIST","BEGIN VERIF_LIST")
Local Integer INIT : If I=0 : INIT=1 : Endif
Call CHECK_EQUAL(NUM(I), 1)
Call CHECK_EQUAL(CAR(I),'A')
Call CHECK_EQUAL(NOM(I),'at386')
Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
If I+INIT<NB | dim(NUM)>I+INIT
 I+= 1 : Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
Endif
Call CHECK_EQUAL("END VERIF_LIST","END VERIF_LIST")
Return

$VERIF_LISTX
Call CHECK_EQUAL("BEGIN VERIF_LISTX","BEGIN VERIF_LISTX")
Local Integer INIT : If I=0 : INIT=1 : Endif
Call CHECK_EQUAL(NU(I), 1)
Call CHECK_EQUAL(CA(I),'A')
Call CHECK_EQUAL(NO(I),'at386')
Call CHECK_EQUAL(NU(I)=1 & CA(I)='A' & NO(I)='at386', 1)
I+= 1 : Call CHECK_EQUAL(NU(I)=2 & CA(I)='H' & NO(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NU(I)=3 & CA(I)='I' & NO(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NU(I)=4 & CA(I)='V' & NO(I)='vt220', 1)
I+= 1 : Call CHECK_EQUAL(NU(I)=5 & CA(I)='V' & NO(I)='vt200', 1)
If I+INIT<NB | dim(NUM)>I+INIT
 I+= 1 : Call CHECK_EQUAL(NU(I)=6 & CA(I)='A' & NO(I)='ansi', 1)
Endif
Call CHECK_EQUAL("END VERIF_LISTX","END VERIF_LISTX")
Return

$VERIF_LIST2
Call CHECK_EQUAL("BEGIN VERIF_LIST2","BEGIN VERIF_LIST2")
Local Integer INIT : If I=0 : INIT=1 : Endif
#Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
Call CHECK_EQUAL(NUM(I),2)
Call CHECK_EQUAL(CAR(I),'B')
Call CHECK_EQUAL(NOM(I),'bbbb')
Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='B' & NOM(I)='bbbb', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
If I+INIT<NB | dim(NUM)>I+INIT
 I+= 1 : Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
Endif
Call CHECK_EQUAL("END VERIF_LIST2","END VERIF_LIST2")
Return

$VERIF_SORTA
Call CHECK_EQUAL("BEGIN VERIF_SORTA","BEGIN VERIF_SORTA")
Case WCAS
When "0","0_5","6"
 I=0
When "1","1_6"
 I=1
Endcase
Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
Call CHECK_EQUAL("END VERIF_SORTA","END VERIF_SORTA")
Return

$VERIF_SORTA_ORD
Call CHECK_EQUAL("BEGIN VERIF_SORTA_ORD","BEGIN VERIF_SORTA_ORD")
Case WCAS
When "0","0_5","6"
 I=0
When "1","1_6"
 I=1
Endcase
Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
Call CHECK_EQUAL("END VERIF_SORTA_ORD","END VERIF_SORTA_ORD")
Return

$VERIF_SORTA_ORDD
Call CHECK_EQUAL("BEGIN VERIF_SORTA_ORDD","BEGIN VERIF_SORTA_ORDD")
Case WCAS
When "0","0_5","6"
 I=0
When "1","1_6"
 I=1
Endcase
Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
I+= 1 : Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
Call CHECK_EQUAL("END VERIF_SORTA_ORDD","END VERIF_SORTA_ORDD")
Return

$VERIF_SORTA_ORDD1
Call CHECK_EQUAL("BEGIN VERIF_SORTA_ORDD1","BEGIN VERIF_SORTA_ORDD1")
Case WCAS
When "0","0_5","6"
 I=0
When "1","1_6"
 I=1
Endcase
#Call CHECK_EQUAL(NUM(I)=5 & CAR(I)='V' & NOM(I)='vt200', 1)
#I+= 1 : Call CHECK_EQUAL(NUM(I)=4 & CAR(I)='V' & NOM(I)='vt220', 1)
#I+= 1 : Call CHECK_EQUAL(NUM(I)=3 & CAR(I)='I' & NOM(I)='ibm3151', 1)
#I+= 1 : Call CHECK_EQUAL(NUM(I)=2 & CAR(I)='H' & NOM(I)='hp', 1)
#I+= 1 : Call CHECK_EQUAL(NUM(I)=1 & CAR(I)='A' & NOM(I)='at386', 1)
#I+= 1 : Call CHECK_EQUAL(NUM(I)=6 & CAR(I)='A' & NOM(I)='ansi', 1)
Call CHECK_EQUAL(CAR(I)='V', 1)
I+= 1 : Call CHECK_EQUAL(CAR(I)='V', 1)
I+= 1 : Call CHECK_EQUAL(CAR(I)='I', 1)
I+= 1 : Call CHECK_EQUAL(CAR(I)='H', 1)
I+= 1 : Call CHECK_EQUAL(CAR(I)='A', 1)
I+= 1 : Call CHECK_EQUAL(CAR(I)='A', 1)
Call CHECK_EQUAL("END VERIF_SORTA_ORDD1","END VERIF_SORTA_ORDD1")
Return

#########################
Subprog TC_SORTA6
WCAS="6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM
Gosub VERIF_SORTA
End

Subprog TC_SORTA0
WCAS="0"
Gosub DEF_SORTA
Sorta I+1 CAR, NOM, NUM
Gosub VERIF_SORTA
End

Subprog TC_SORTA0_5
WCAS="0_5"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM
Gosub VERIF_SORTA
End

Subprog TC_SORTA1
WCAS="1"
Gosub DEF_SORTA
Sorta I CAR, NOM, NUM
Gosub VERIF_SORTA
End

Subprog TC_SORTA1_6
WCAS="1_6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM
Gosub VERIF_SORTA
End

#########################
Subprog TC_ORD_SORTA0
WCAS="0"
Gosub DEF_SORTA
Sorta I+1 CAR, NOM, NUM Order By CAR(indice),NUM(indice)
Gosub VERIF_SORTA_ORD
End

Subprog TC_ORD_SORTA0_5
WCAS="0_5"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice),NUM(indice)
Gosub VERIF_SORTA_ORD
End

Subprog TC_ORD_SORTA6
WCAS="6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice),NUM(indice)
Gosub VERIF_SORTA_ORD
End

Subprog TC_ORD_SORTA1
WCAS="1"
Gosub DEF_SORTA
Sorta I CAR, NOM, NUM Order By CAR(indice+1),NUM(indice+1)
Gosub VERIF_SORTA_ORD
End

Subprog TC_ORD_SORTA1_6
WCAS="1_6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice+1),NUM(indice+1)
Gosub VERIF_SORTA_ORD
End

#########################
Subprog TC_ORDD_SORTA0
WCAS="0"
Gosub DEF_SORTA
Sorta I+1 CAR, NOM, NUM Order By -NUM(indice)
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDD_SORTA0_5
WCAS="0_5"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By -NUM(indice)
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDD_SORTA6
WCAS="6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By -NUM(indice)
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDD_SORTA1
WCAS="1"
Gosub DEF_SORTA
Sorta I CAR, NOM, NUM Order By -NUM(indice+1)
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDD_SORTA1_6
WCAS="1_6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By -NUM(indice+1)
Gosub VERIF_SORTA_ORDD
End

#########################
Subprog TC_ORDDESC_SORTA0
WCAS="0"
Gosub DEF_SORTA
Sorta I+1 CAR, NOM, NUM Order By NUM(indice) Desc
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDDESC_SORTA0_5
WCAS="0_5"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By NUM(indice) Desc
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDDESC_SORTA6
WCAS="6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By NUM(indice) Desc
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDDESC_SORTA1
WCAS="1"
Gosub DEF_SORTA
Sorta I CAR, NOM, NUM Order By NUM(indice+1) Desc
Gosub VERIF_SORTA_ORDD
End

Subprog TC_ORDDESC_SORTA1_6
WCAS="1_6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By NUM(indice+1) Desc
Gosub VERIF_SORTA_ORDD
End

#########################
Subprog TC_ORDDESC1_SORTA0
WCAS="0"
Gosub DEF_SORTA
Sorta I+1 CAR, NOM, NUM Order By CAR(indice) Desc
Gosub VERIF_SORTA_ORDD1
End

Subprog TC_ORDDESC1_SORTA0_5
WCAS="0_5"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice) Desc
Gosub VERIF_SORTA_ORDD1
End

Subprog TC_ORDDESC1_SORTA6
WCAS="6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice) Desc
Gosub VERIF_SORTA_ORDD1
End

Subprog TC_ORDDESC1_SORTA1
WCAS="1"
Gosub DEF_SORTA
Sorta I CAR, NOM, NUM Order By CAR(indice+1) Desc
Gosub VERIF_SORTA_ORDD1
End

Subprog TC_ORDDESC1_SORTA1_6
WCAS="1_6"
Gosub DEF_SORTA
Sorta CAR, NOM, NUM Order By CAR(indice+1) Desc
Gosub VERIF_SORTA_ORDD1
End

#####################################################
############################################
Subprog FCTW(NB,CAR,NOM,NUM,CHAINE)
Const    Integer NB : # Number of elements
Const    Char    CAR : # text array
Const    Char    NOM : # text array
Const    Integer NUM : # number array
Const    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
Local Integer EX
If pat(ver$(0),"etna*")<=0
 Onerrgo ERROR
 EX=62
 #Error(62) - Variable non modifiable
Else
 Call CHECK_EQUAL("Error 62 on arrays not check in ETNA", "Error 62 on arrays not check in ETNA")
Endif
NUM(X)= X+2
If pat(ver$(0),"etna*")<=0
 Call CHECK_EQUAL(NUM=X+1,1)
 Call CHECK_EQUAL(NUM, X+1)
 Call CHECK_EQUAL(NUM(X), X+1)
Else
 Call CHECK_EQUAL(NUM=X+2,1)
 Call CHECK_EQUAL(NUM, X+2)
 Call CHECK_EQUAL(NUM(X), X+2)
Endif

Onerrgo ERROR
EX=62
#Error(62) - Variable non modifiable
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"First CHAINE")
End

#########################
Subprog TC_FCTW0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCTW(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTW0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTW(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTW6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTW(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTW1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTW(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCTW1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTW(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

#####################################################
############################################
Subprog FCTY(NB,CAR,NOM,NUM,CHAINE)
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
Local Integer EX
If pat(ver$(0),"etna*")<=0
 Onerrgo ERROR
 EX=62
 #Error(62) - Variable non modifiable
Else
 Call CHECK_EQUAL("Error 62 on arrays not check in ETNA", "Error 62 on arrays not check in ETNA")
Endif
NUM(X)= X+2
If pat(ver$(0),"etna*")<=0
 Call CHECK_EQUAL(NUM=X+1,1)
 Call CHECK_EQUAL(NUM, X+1)
 Call CHECK_EQUAL(NUM(X), X+1)
Else
 Call CHECK_EQUAL(NUM=X+2,1)
 Call CHECK_EQUAL(NUM, X+2)
 Call CHECK_EQUAL(NUM(X), X+2)
Endif

Onerrgo ERROR
EX=62
#Error(62) - Variable non modifiable
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"First CHAINE")
End

#########################
Subprog TC_FCTY0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCTY(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTY0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTY(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTY6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTY(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTY1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTY(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCTY1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTY(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

############################################
Subprog FCTZ(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR : # text array
Value    Char    NOM : # text array
Value    Integer NUM : # number array
Value    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
NUM(X)= X+2
Call CHECK_EQUAL(NUM=X+2,1)
Call CHECK_EQUAL(NUM, X+2)
Call CHECK_EQUAL(NUM(X), X+2)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC_FCTZ0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCTZ(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTZ0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTZ(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTZ6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTZ(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTZ1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTZ(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCTZ1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTZ(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End


############################################
Subprog FCTX(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR() : # text array
Value    Char    NOM() : # text array
Value    Integer NUM() : # number array
Value    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
NUM(X)= X+2
Call CHECK_EQUAL(NUM=X+2,1)
Call CHECK_EQUAL(NUM, X+2)
Call CHECK_EQUAL(NUM(X), X+2)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC_FCTX0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCTX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTX0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTX6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTX1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCTX1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End


############################################
Subprog FCTXX(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR()() : # text array
Value    Char    NOM()() : # text array
Value    Integer NUM() : # number array
Value    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
NUM(X)= X+2
Call CHECK_EQUAL(NUM=X+2,1)
Call CHECK_EQUAL(NUM, X+2)
Call CHECK_EQUAL(NUM(X), X+2)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC_FCTXX0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCTXX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTXX0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTXX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTXX6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTXX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCTXX1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTXX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCTXX1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCTXX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

############################################
Subprog FCT0_(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR()(0..) : # text array
Value    Char    NOM()(0..) : # text array
Value    Integer NUM(0..) : # number array
Value    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
NUM(X)=X+2
Call CHECK_EQUAL(NUM=X+2,1)
Call CHECK_EQUAL(NUM, X+2)
Call CHECK_EQUAL(NUM(X), X+2)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC_FCT0_0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCT0_0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCT0_6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
End

Subprog TC_FCT0_1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End

Subprog TC_FCT0_1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
End


############################################
Subprog _FCT1_(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR()(1..) : # text array
Value    Char    NOM()(1..) : # text array
Value    Integer NUM(1..) : # number array
Value    Char    CHAINE : # text
Local Integer X : X=1
Call CHECK_EQUAL("_FCT1_","_FCT1_")
NUM(X)=X+5
Call CHECK_EQUAL(NUM(X), X+5)
Call CHECK_EQUAL(NUM=X+5,1)
Call CHECK_EQUAL(NUM, X+5)

End

Subprog FCT1_(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Value    Char    CAR()(1..) : # text array
Value    Char    NOM()(1..) : # text array
Value    Integer NUM(1..) : # number array
Value    Char    CHAINE : # text
Local Integer X : X=1
Call CHECK_EQUAL(NUM=X,1)
Call CHECK_EQUAL(NUM, X)
Call CHECK_EQUAL(NUM(X), X)
Local Integer I : I=1
Gosub VERIF_LIST
NUM(X)=X+1
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC_FCT1_0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
Call _FCT1_(NB,CAR,NOM,NUM,CHAINE)
End

Subprog TC_FCT1_0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
Call _FCT1_(NB,CAR,NOM,NUM,CHAINE)
End

Subprog TC_FCT1_6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=0
Gosub VERIF_LIST
Call _FCT1_(NB,CAR,NOM,NUM,CHAINE)
End

Subprog TC_FCT1_1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
Call _FCT1_(NB,CAR,NOM,NUM,CHAINE)
End

Subprog TC_FCT1_1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"First CHAINE")
Local Integer I : I=1
Gosub VERIF_LIST
Call _FCT1_(NB,CAR,NOM,NUM,CHAINE)
End

#####################################################################

############################################
Subprog FCT2_Z(NB,CA,NO,NU,CHA)
Value    Integer NB : # Number of elements
Variable    Char    CA : # text array
Variable    Char    NO : # text array
Variable    Integer NU : # number array
Variable    Char    CHA : # text
Local Integer X : X=0
Call CHECK_EQUAL(NU=X+1,1)
Call CHECK_EQUAL(NU, X+1)
Call CHECK_EQUAL(NU(X), X+1)
Local Integer I : I=0
Gosub VERIF_LISTX
NU(X)= X+2
CA(X)= "B"
NO(X)= "bbbb"
Call CHECK_EQUAL(NU=X+2,1)
Call CHECK_EQUAL(NU, X+2)
Call CHECK_EQUAL(NU(X), X+2)
CHA="CHAINE changed"
Call CHECK_EQUAL(CHA,"CHAINE changed")
End

#########################
Subprog TC2_FCTZ0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT2_Z(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTZ0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_Z(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTZ6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_Z(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTZ1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_Z(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

Subprog TC2_FCTZ1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_Z(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End


############################################
Subprog FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Value    Integer NB : # Number of elements
Variable    Char    CAR() : # text array
Variable    Char    NOM() : # text array
Variable    Integer NUM() : # number array
Variable    Char    CHAINE : # text
Local Integer X : X=0
Call CHECK_EQUAL(NUM=X+1,1)
Call CHECK_EQUAL(NUM, X+1)
Call CHECK_EQUAL(NUM(X), X+1)
Local Integer I : I=0
Gosub VERIF_LIST
NUM(X)= X+2
CAR(X)= "B"
NOM(X)= "bbbb"
Call CHECK_EQUAL(NUM=X+2,1)
Call CHECK_EQUAL(NUM, X+2)
Call CHECK_EQUAL(NUM(X), X+2)
CHAINE="CHAINE changed"
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
End

#########################
Subprog TC2_FCTX0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTX0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTX6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTX1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

Subprog TC2_FCTX1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_X(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End


############################################
Subprog FCT2_XX(NB,CA,NO,NU,CHA)
Value    Integer NB : # Number of elements
Variable    Char    CA()() : # text array
Variable    Char    NO()() : # text array
Variable    Integer NU() : # number array
Variable    Char    CHA : # text
Local Integer X : X=0
Call CHECK_EQUAL(NU=X+1,1)
Call CHECK_EQUAL(NU, X+1)
Call CHECK_EQUAL(NU(X), X+1)
Local Integer I : I=0
Gosub VERIF_LISTX
NU(X)= X+2
CA(X)= "B"
NO(X)= "bbbb"
Call CHECK_EQUAL(NU=X+2,1)
Call CHECK_EQUAL(NU, X+2)
Call CHECK_EQUAL(NU(X), X+2)
CHA="CHAINE changed"
Call CHECK_EQUAL(CHA,"CHAINE changed")
End

#########################
Subprog TC2_FCTXX0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT2_XX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTXX0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_XX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTXX6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_XX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCTXX1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_XX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

Subprog TC2_FCTXX1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_XX(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

############################################
Subprog FCT2_0_(NB,CA,NO,NU,CHA)
Value    Integer NB : # Number of elements
Variable    Char    CA()(0..) : # text array
Variable    Char    NO()(0..) : # text array
Variable    Integer NU(0..) : # number array
Variable    Char    CHA : # text
Local Integer X : X=0
Call CHECK_EQUAL(NU=X+1,1)
Call CHECK_EQUAL(NU, X+1)
Call CHECK_EQUAL(NU(X), X+1)
Local Integer I : I=0
Gosub VERIF_LISTX
NU(X)=X+2
CA(X)= "B"
NO(X)= "bbbb"
Call CHECK_EQUAL(NU=X+2,1)
Call CHECK_EQUAL(NU, X+2)
Call CHECK_EQUAL(NU(X), X+2)
CHA="CHAINE changed"
Call CHECK_EQUAL(CHA,"CHAINE changed")
End

#########################
Subprog TC2_FCT0_0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT2_0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT0_0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT0_6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT0_1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

Subprog TC2_FCT0_1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_0_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End


############################################
Subprog FCT2_1_(NB,CA,NO,NU,CHA)
Value    Integer NB : # Number of elements
Variable    Char    CA()(1..) : # text array
Variable    Char    NO()(1..) : # text array
Variable    Integer NU(1..) : # number array
Variable    Char    CHA : # text
Local Integer X : X=1
Call CHECK_EQUAL(NU=X,1)
Call CHECK_EQUAL(NU, X)
Call CHECK_EQUAL(NU(X), X)
Local Integer I : I=1
Gosub VERIF_LISTX
NU(X)=X+1
CA(X)= "B"
NO(X)= "bbbb"
Call CHECK_EQUAL(NU=X+1,1)
Call CHECK_EQUAL(NU, X+1)
Call CHECK_EQUAL(NU(X), X+1)
CHA="CHAINE changed"
Call CHECK_EQUAL(CHA,"CHAINE changed")
End

#########################
Subprog TC2_FCT1_0
WCAS="0"
Gosub DEF_SORTA
Local Integer NB : NB=5
Call FCT2_1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT1_0_5
WCAS="0_5"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT1_6
WCAS="6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=0
Gosub VERIF_LIST2
End

Subprog TC2_FCT1_1
WCAS="1"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

Subprog TC2_FCT1_1_6
WCAS="1_6"
Gosub DEF_SORTA
Local Integer NB : NB=6
Call FCT2_1_(NB,CAR,NOM,NUM,CHAINE)
Call CHECK_EQUAL(CHAINE,"CHAINE changed")
Local Integer I : I=1
Gosub VERIF_LIST2
End

#####################################################################
