#Global Integer CST_ALASTPOS      : [V]CST_ALASTPOS    = -1
#Global Integer CST_AFIRSTPOS     : [V]CST_AFIRSTPOS   =  0
#Global Integer CST_ANOTDEFINED   : [V]CST_ANOTDEFINED = -1

Call OUVRE_TRACE("QLFAR_ATTRIBUTES") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC

GTRACE = "QLFAR_ATTRIBUTES_"+GUSER
Call LEC_TRACE From LECFIC
End

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ATTRIBUTES", "ATTRIBUTES") From AXUNIT
Call ADD_TESTCASE("TC_ACTX_ATTRIBUTES"	        ,"TC_ACTX_ATTRIBUTES"	  ,8 ) From AXUNIT
Call ADD_TESTCASE("TC_INSTANCE_ATTRIBUTES"		,"TC_INSTANCE_ATTRIBUTES" ,25) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ATTRIBUTES", "ATTRIBUTES")
End SUITE_RESULT

Subprog TC_INSTANCE_ATTRIBUTES
Local Integer IS_READONLY
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03

[L]IS_READONLY = 0

Infbox "TC_INSTANCE_ATTRIBUTES"

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's try to change the propertye C03P01 :
INS1.C03P01 = "ins1-0"
Call CHECK_EQUAL(INS1.C03P01,"ins1-0") From AXUNIT

INS1.C03P01 = "ins1-1"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

#Set INS1.C03P01 as "readonly"
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-2"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

INS1.C03P01 = "ins1-3"
Call CHECK_EQUAL(INS1.C03P01,"ins1-3") From AXUNIT

# 1. set the $isReadonly attribute to false at the property level 
# 2. set the $isReadonly attribute to false at the object level 
# 3. check the $isReadonly attribute at the property level 
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

Callmet INS1.ASETATTR("$isReadonly",[V]CST_ATRUE)

[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Set INS1 as "readonly"
Callmet INS1.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-4"
Call CHECK_EQUAL(INS1.C03P01,"ins1-3") From AXUNIT

#Set INS1 as writtable
Callmet INS1.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-5"
Call CHECK_EQUAL(INS1.C03P01,"ins1-5") From AXUNIT


Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's create a new instance :
Local Instance INS2 Using C_AQCPROC03
INS2 = NewInstance C_AQCPROC03

INS2.C03P01 = "ins2-1"
Call CHECK_EQUAL(INS2.C03P01,"ins2-1") From AXUNIT

#Let's set INS2.C03.P01 as readonly...
Callmet INS2.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
#Let's set INS1.C03.P01 as writtable...
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)

#and check attributes
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#set different attributes :
Callmet INS1.C03P01.ASETATTR("$isHidden"  ,[V]CST_AFALSE)
Callmet INS1.C03P01.ASETATTR("$filename"  		,"filename")
Callmet INS1.C03P01.ASETATTR("$contentType"  	,"contentType")
Callmet INS2.C03P01.ASETATTR("$isDisabled",[V]CST_ATRUE)
Callmet INS2.C03P01.ASETATTR("$isDeleted" ,[V]CST_ATRUE)

Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$isHidden")  	,[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$filename")  	,"filename") From AXUNIT
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$contentType")  ,"contentType") From AXUNIT

Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isDisabled"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isDeleted") ,[V]CST_ATRUE) From AXUNIT


End

# Comment : ACTX.USER property is set as readonly by the supervisor
# this behavior cannot be changed : 
Subprog TC_ACTX_ATTRIBUTES
Local Char USER1(50)
Local Integer IS_READONLY

#Let's get the user : 
USER1 = GACTX.USER
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 

#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to change the "$isReadonly" attribute :
Callmet GACTX.USER.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet GACTX.USER.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 
#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to hack the system :
Callmet GACTX.USER.ASETATTR("$_isReadonly",[V]CST_AFALSE)
Callmet GACTX.USER.ASETATTR("$isReadonly" ,[V]CST_AFALSE)
[L]IS_READONLY = Fmet GACTX.USER.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 
#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Compare GACTX and INS1.ACTX !
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03
Call CHECK_EQUAL(INS1.ACTX.USER,[V]GACTX.USER) From AXUNIT

#Let's try to change the user : 
INS1.ACTX.USER = "Z"+USER1 
#INS1.ACTX.USER wasn't changed :
Call CHECK_EQUAL(INS1.ACTX.USER,[V]GACTX.USER) From AXUNIT


End

