Call OUVRE_TRACE("QLFAR_ATTRIBUTES") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC

GTRACE = "QLFAR_ATTRIBUTES_"+GUSER
Call LEC_TRACE From LECFIC
End

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("ATTRIBUTES", "ATTRIBUTES") From AXUNIT
Call ADD_TESTCASE("TC_ACTX_ATTRIBUTES"	        ,"TC_ACTX_ATTRIBUTES"	    ,8 ) From AXUNIT
Call ADD_TESTCASE("TC_INSTANCE_ATTRIBUTES"		,"TC_INSTANCE_ATTRIBUTES"   ,25) From AXUNIT
Call ADD_TESTCASE("TC_COLLECTION_ATTRIBUTES"    ,"TC_COLLECTION_ATTRIBUTES" ,33) From AXUNIT
Call ADD_TESTCASE("TC_COLUMN_ATTRIBUTES"    	,"TC_COLUMN_ATTRIBUTES" 	,25) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ATTRIBUTES", "ATTRIBUTES")
End SUITE_RESULT

Subprog TC_INSTANCE_ATTRIBUTES
Local Integer IS_READONLY
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03

[L]IS_READONLY = 0

Infbox "TC_INSTANCE_ATTRIBUTES"

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's try to change the propertye C03P01 :
INS1.C03P01 = "ins1-0"
Call CHECK_EQUAL(INS1.C03P01,"ins1-0") From AXUNIT

INS1.C03P01 = "ins1-1"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

#Set INS1.C03P01 as "readonly"
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-2"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

INS1.C03P01 = "ins1-3"
Call CHECK_EQUAL(INS1.C03P01,"ins1-3") From AXUNIT

# 1. set the $isReadonly attribute to false at the property level 
# 2. set the $isReadonly attribute to false at the object level 
# 3. check the $isReadonly attribute at the property level 
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

Callmet INS1.ASETATTR("$isReadonly",[V]CST_ATRUE)

[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Set INS1 as "readonly"
Callmet INS1.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-4"
Call CHECK_EQUAL(INS1.C03P01,"ins1-3") From AXUNIT

#Set INS1 as writtable
Callmet INS1.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's try to change the property C03P01 :
INS1.C03P01 = "ins1-5"
Call CHECK_EQUAL(INS1.C03P01,"ins1-5") From AXUNIT


Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet INS1.C03P01.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

#Let's create a new instance :
Local Instance INS2 Using C_AQCPROC03
INS2 = NewInstance C_AQCPROC03

INS2.C03P01 = "ins2-1"
Call CHECK_EQUAL(INS2.C03P01,"ins2-1") From AXUNIT

#Let's set INS2.C03.P01 as readonly...
Callmet INS2.C03P01.ASETATTR("$isReadonly",[V]CST_ATRUE)
#Let's set INS1.C03.P01 as writtable...
Callmet INS1.C03P01.ASETATTR("$isReadonly",[V]CST_AFALSE)

#and check attributes
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#set different attributes :
Callmet INS1.C03P01.ASETATTR("$isHidden"  ,[V]CST_AFALSE)
Callmet INS1.C03P01.ASETATTR("$filename"  		,"filename")
Callmet INS1.C03P01.ASETATTR("$contentType"  	,"contentType")
Callmet INS2.C03P01.ASETATTR("$isDisabled",[V]CST_ATRUE)
Callmet INS2.C03P01.ASETATTR("$isDeleted" ,[V]CST_ATRUE)

Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$isHidden")  	,[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$filename")  	,"filename") From AXUNIT
Call CHECK_EQUAL(Fmet INS1.C03P01.AGETATTR("$contentType")  ,"contentType") From AXUNIT

Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isDisabled"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(Fmet INS2.C03P01.AGETATTR("$isDeleted") ,[V]CST_ATRUE) From AXUNIT


End

# Comment : ACTX.USER property is set as readonly by the supervisor
# this behavior cannot be changed : 
Subprog TC_ACTX_ATTRIBUTES
Local Char USER1(50)
Local Integer IS_READONLY

#Let's get the user : 
USER1 = GACTX.USER
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 

#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to change the "$isReadonly" attribute :
Callmet GACTX.USER.ASETATTR("$isReadonly",[V]CST_AFALSE)
[L]IS_READONLY = Fmet GACTX.USER.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 
#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Let's try to hack the system :
Callmet GACTX.USER.ASETATTR("$_isReadonly",[V]CST_AFALSE)
Callmet GACTX.USER.ASETATTR("$isReadonly" ,[V]CST_AFALSE)
[L]IS_READONLY = Fmet GACTX.USER.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the user : 
GACTX.USER = "Z"+USER1 
#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

#Compare GACTX and INS1.ACTX !
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03
Call CHECK_EQUAL(INS1.ACTX.USER,[V]GACTX.USER) From AXUNIT

#Let's try to change the user : 
INS1.ACTX.USER = "Z"+USER1 
#INS1.ACTX.USER wasn't changed :
Call CHECK_EQUAL(INS1.ACTX.USER,[V]GACTX.USER) From AXUNIT
End


Subprog TC_COLLECTION_ATTRIBUTES
Local Integer IS_READONLY,LINE,C03P02
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03

Infbox "TC_COLLECTION_ATTRIBUTES"
[L]IS_READONLY = 0
[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 10+[L]LINE
Call CHECK_EQUAL(INS1.COL(0).C03P02,10+[L]LINE) From AXUNIT

[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,1) From AXUNIT
INS1.COL(1).C03P02 = 10+[L]LINE
Call CHECK_EQUAL(INS1.COL(1).C03P02,10+[L]LINE) From AXUNIT

[L]LINE = Fmet INS1.COL.AADD([V]CST_AFIRSTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 10 
Call CHECK_EQUAL(INS1.COL(0).C03P02,10) From AXUNIT

#set INS1.COL(0).C03P02 as readonly
Callmet INS1.COL(0).C03P02.ASETATTR("$isReadonly",[V]CST_ATRUE)
[L]IS_READONLY = Fmet INS1.COL(0).C03P02.AGETATTR("$isReadonly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
C03P02 =  INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 20 
Call CHECK_EQUAL(INS1.COL(0).C03P02,C03P02) From AXUNIT

#set INS1.COL(0).C03P02 as writtable:
Callmet INS1.COL(0).C03P02.ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL(0).C03P02.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 21 
Call CHECK_EQUAL(INS1.COL(0).C03P02,21) From AXUNIT

#set INS1.COL(0) as readonly
Callmet INS1.COL(0).ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.COL(0).AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 22 
Call CHECK_EQUAL(INS1.COL(0).C03P02,21) From AXUNIT

#set INS1.COL(0) as writtable
Callmet INS1.COL(0).ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL(0).AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 23 
Call CHECK_EQUAL(INS1.COL(0).C03P02,23) From AXUNIT

#set INS1.COL as readonly
Callmet INS1.COL.ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.COL.AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 24 
Call CHECK_EQUAL(INS1.COL(0).C03P02,23) From AXUNIT

#set INS1.COL as writtable
Callmet INS1.COL.ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 24 
Call CHECK_EQUAL(INS1.COL(0).C03P02,24) From AXUNIT

#set INS1 as readonly
Callmet INS1.ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 25 
Call CHECK_EQUAL(INS1.COL(0).C03P02,24) From AXUNIT

#set INS1 as writtable
Callmet INS1.ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 26 
Call CHECK_EQUAL(INS1.COL(0).C03P02,26) From AXUNIT

#set INS1.COL(1) as writtable
Callmet INS1.COL(1).ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL(1).AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(1).C03P02 = 11 
Call CHECK_EQUAL(INS1.COL(1).C03P02,11) From AXUNIT

#set INS1.COL(1) as readonly
Callmet INS1.COL(1).ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.COL(1).AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(1).C03P02
INS1.COL(1).C03P02 = 12 
Call CHECK_EQUAL(INS1.COL(1).C03P02,11) From AXUNIT

#set INS1.COL(1) as writtable
Callmet INS1.COL(1).ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL(1).AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#set INS1.COL(0) as readonly
Callmet INS1.COL(0).ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.COL(0).AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(1).C03P02
INS1.COL(1).C03P02 = 13 
Call CHECK_EQUAL(INS1.COL(1).C03P02,13) From AXUNIT

#set INS1.COL as readonly
Callmet INS1.COL.ASETATTR("$isReadonly",[V]CST_ATRUE)
Call CHECK_EQUAL(Fmet INS1.COL.AGETATTR("$isReadonly"),[V]CST_ATRUE) From AXUNIT

#Let's try to add a new line :
[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,-1) From AXUNIT

#set INS1.COL as writtable
Callmet INS1.COL.ASETATTR("$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL.AGETATTR("$isReadonly"),[V]CST_AFALSE) From AXUNIT

#Let's try to add a new line :
[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_NOTEQUAL([L]LINE,-1) From AXUNIT
End


Subprog TC_COLUMN_ATTRIBUTES
Local Integer IS_READONLY,LINE,C03P02
Local Instance INS1 Using C_AQCPROC03

INS1 = NewInstance C_AQCPROC03

Infbox "TC_COLUMN_ATTRIBUTES"
[L]IS_READONLY = 0

[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 1
INS1.COL(0).C03P03 = "ref01"
Call CHECK_EQUAL(INS1.COL(0).C03P02,1) From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P03,"ref01") From AXUNIT

[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,1) From AXUNIT
INS1.COL(1).C03P02 = 2
INS1.COL(1).C03P03 = "ref02"
Call CHECK_EQUAL(INS1.COL(1).C03P02,2) From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P03,"ref02") From AXUNIT

#Let's set the column "C03P02" of the collection COL as readonly :  
Callmet INS1.COL.ASETCOLUMNATTR("C03P02","$isReadonly",[V]CST_ATRUE)
Callmet INS1.COL.ASETCOLUMNATTR("C03P02","$isHidden"  ,[V]CST_AFALSE)

Call CHECK_EQUAL(Fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadonly"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(Fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isHidden")  ,[V]CST_AFALSE) From AXUNIT

#Let's try to change C03P02 and C03P03:
INS1.COL(0).C03P02 = 10
INS1.COL(0).C03P03 = "ref10"
INS1.COL(1).C03P02 = 20
INS1.COL(1).C03P03 = "ref20"


Call CHECK_EQUAL(INS1.COL(0).C03P02,    1) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P03,"ref10") From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P03,"ref20") From AXUNIT

# MAXCOL = 4 for AQCPROC03.COL :
Callmet INS1.COL.ASETCOLUMNATTR("C03P02","$isReadonly",[V]CST_AFALSE)
Call CHECK_EQUAL(Fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadonly"),[V]CST_AFALSE) From AXUNIT

[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,2) From AXUNIT
INS1.COL(2).C03P02 = 3

[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,3) From AXUNIT
INS1.COL(3).C03P02 = 4

Call CHECK_EQUAL(INS1.COL(0).C03P02,    1) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(2).C03P02,    3) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(3).C03P02,    4) 	 From AXUNIT

#Cannot insert another line :
[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,-1) From AXUNIT

#remove the last line :
Callmet INS1.COL.ADEL(3)

#insert a line
[L]LINE = Fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,3) From AXUNIT
INS1.COL(3).C03P02 = 5

Call CHECK_EQUAL(INS1.COL(0).C03P02,    1) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(2).C03P02,    3) 	 From AXUNIT
Call CHECK_EQUAL(INS1.COL(3).C03P02,    5) 	 From AXUNIT

End
