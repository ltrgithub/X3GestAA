#<AdxTL>@(#)5.0.0.0 $Revision$
Local Clbfile RESULT
RESULT = func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_UUID_"+GUSER
Call LEC_TRACE From LECFIC
End


#**
#* The main entry point of the unit test suite for Requirement 73835
#*
#* @see
#* <a href="http://tools.ietf.org/pdf/rfc4122.pdf"> A Universally Unique IDentifier (UUID) </a>
#*!
Funprog TESTSUITE()
Call ADD_TESTCASE("TEST_DECL_UUID", "déclaration variable de type  UUID ", 3) From AXUNIT
Call ADD_TESTCASE("TEST_GETUUID", "Fonction getuuid-génère nouveau UUID et retourne type LUUID", 1) From AXUNIT
Call ADD_TESTCASE("TEST_NULUUID", "Fonction nulluuid", 3) From AXUNIT
Call ADD_TESTCASE("TEST_NUMD", "Fonction num$", 2) From AXUNIT
Call ADD_TESTCASE("TEST_SADXXX", "Sauvegarde et récupération d'un champ UUIDENT de la BD", 4) From AXUNIT
Call ADD_TESTCASE("TEST_TRANSCLASS", "Transclass UUID<->chaîne ", 3) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("REQ-73835", "Universally Unique IDentifier (UUID)")

# -----------------------------------------------------------------------
Subprog TEST_DECL_UUID
Local Uuident MYUUID
Call CHECK_NOTEQUAL(dim(MYUUID),-1) From AXUNIT
Call CHECK_EQUAL(type(MYUUID),525) From AXUNIT
Call CHECK_EQUAL(clasiz([L],1),16) From AXUNIT
End

# -----------------------------------------------------------------------
Subprog TEST_GETUUID
Local Char GOT(50),EXPECT(50)
Local Char GOT(25)
Local Char EXPECT(25)
Local Char MYUUIDSTR(40)
Local Uuident MYUUID
MYUUID=getUuid
MYUUIDSTR=num$(MYUUID)
#SPLIT LES DIFFéRENTES PARTIES OCTETS ET VéRIFIER S'ils sont conformes au standart
Call CHECK_EQUAL(len(MYUUIDSTR),36) From AXUNIT
End

# -----------------------------------------------------------------------
Subprog TEST_NUMD
Local Char    EXPECT(100) , UUID_FALSE(100)
Local Uuident MYUUID
Local Integer ER
EXPECT="86EDC6C6-5641-4515-B0A3-53F4638B18D8"
MYUUID=toUuid(EXPECT)
GOT=toupper(num$(MYUUID))
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT
Onerrgo ER
UUID_FALSE = "86EDC6C6-5641-4515-B0A3-53F4638B18D8ss"
MYUUID = toUuid(UUID_FALSE)
Call CHECK_EQUAL(ER,151) From AXUNIT
Onerrgo
End

#----------#
$ER
ER = errn
Resume

# -----------------------------------------------------------------------
Subprog TEST_NULUUID
Local Uuident MYNULLUUID , MYUUID
Local Char    GOT(25), EXPECT(25) , UUID_FALSE(100)
Local Integer ER
MYNULLUUID=NullUuid
EXPECT="00000000-0000-0000-0000-000000000000"
GOT =num$(MYNULLUUID)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT
Onerrgo ER
UUID_FALSE = "00000000-0000-0000-0000-000000000000ss"
MYUUID = toUuid(UUID_FALSE)
Call CHECK_EQUAL(ER,151) From AXUNIT
UUID_FALSE = "00000000-0000-0000-0000-00000"
MYUUID = toUuid(UUID_FALSE)
Call CHECK_EQUAL(ER,151) From AXUNIT
Onerrgo
End

# -----------------------------------------------------------------------
Subprog TEST_SADXXX

Local Uuident EXPECT
Local Char TRP(60)
TRP = [S]adxtrp
[S]adxtrp = ""

EXPECT=getUuid

Local File AQRSTU [TEST]

[TEST]STU = 172
[TEST]AUUID = EXPECT

Trbegin [TEST]              # début de la transaction

Write [TEST]                # écriture sur fichier
If [S]fstat                 # en cas de problème quelconque
    Rollback                # la transaction est annulée
Else
    Commit                  # sinon elle est validée
Endif

#Infbox num$([S]fstat)

If (fstat = 3)               # cle dupliquee (l'enregistrement existe), on fait  update
  Trbegin [TEST]          # début de la transaction
  Read [TEST]=
  [TEST]AUUID = EXPECT
  Rewrite [TEST]
  If [S]fstat # en cas de problème quelconque
      Rollback # la transaction est annulée
  Else
      Commit # sinon elle est validée
  Endif
  #Infbox num$([S]fstat)
Endif

Call CHECK_EQUAL(fstat, 0) From AXUNIT
If (fstat = 0)
    Read [TEST]= # on se positionne dessus
    Call CHECK_EQUAL([TEST]AUUID,EXPECT) From AXUNIT
Endif

[TEST]AUUID = NullUuid
Trbegin [TEST]                  # début de la transaction
Rewrite [TEST]
If [S]fstat                     # en cas de problème quelconque
    Rollback                    # la transaction est annulée
Else
    Commit                      # sinon elle est validée
Endif

Call CHECK_EQUAL( fstat, 0 ) From AXUNIT
If (fstat = 0)
    Read [TEST]=
    Call CHECK_EQUAL([TEST]AUUID,NullUuid) From AXUNIT
Endif

Trbegin [TEST]
    Delete [TEST]STU=172
Commit
[S]adxtrp = TRP
End

# -----------------------------------------------------------------------
Subprog TEST_TRANSCLASS
Local Uuident MYUUID , AUUID

Local File AQRSTU [TBL0] # déclaration du fichier TEST
Local File AQRSTU [TBL1] # déclaration du fichier TEST

MYUUID = getUuid
[TBL0]AUUID = MYUUID
[TBL1] = [TBL0]
Call CHECK_EQUAL([TBL0]AUUID,[TBL1]AUUID) From AXUNIT

Raz [F:TBL0]
Call CHECK_EQUAL([F:TBL0]AUUID,NULLUUID) From AXUNIT

AUUID = MYUUID
[F:TBL0] = [L]
Call CHECK_EQUAL([F:TBL0]AUUID,[L]AUUID) From AXUNIT

End

# -----------------------------------------------------------------------

$ERR_DECL
ERROR_DECL=1
Resume
