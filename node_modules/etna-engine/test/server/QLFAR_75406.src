#<AdxTL>@(#)6.0.0.0 $Revision$
##Infbox func TESTSUITE()
##GTRACE = "QLFRTM_75406_"+GUSER
##Call LEC_TRACE From LECFIC
Local Clbfile SUITE_RESULT
Local Char FIC(255)


SUITE_RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_75406_"+GUSER
Call LEC_TRACE From LECFIC

FIC = HEAPDMP( )
Infbox FIC


End

# ---------- TEST_SUITE dynamic table -----------------------------
# -----------------------------------------------------------------

Funprog TESTSUITE()
Local Char OVF(128)
Local Char OVS(128)
Local Char RES(255)
Local Char IRS(2)

OVF = adxovf
OVS = adxovs
IRS = adxirs

adxovs = ""
adxovf = ""
adxirs = chr$(10)


  Call ADD_TESTCASE("TEST_RANGING", "Ranging array", 304) From AXUNIT
  Call ADD_TESTCASE("TEST_SUBPROG", "Subprog array", 103) From AXUNIT
  Call ADD_TESTCASE("TEST_OBJECT", "Object array 1 ", 305) From AXUNIT
  Call ADD_TESTCASE("TEST_SUBOBJECT", "Object array 2", 1) From AXUNIT

RES = func AXUNIT.RUN_TESTSUITE("DynamicArray", "Common")

adxovf = OVF
adxovs = OVS
adxirs = IRS

End RES

Subprog SETUP
  Call CREATE_TST( )
  adxmpr=adxmpr
End

Subprog TEARDOWN
 Call DELETE_TST( )
 adxmpr=adxmpr
End




# -----------------------TEST_RANGING --------------------------------
# ######################################################################
Subprog TEST_RANGING( )
Local Integer I
Local Integer T(1..)


For I = 1 To 100
    T(I) = I
Next
For I = 1 To 100
    Call CHECK_EQUAL( T(I), I ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(T), 100 ) From AXUNIT


For I = 101 To 200
    Call CHECK_EQUAL( T(I), 0 ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(T), 100 ) From AXUNIT


For I = 31000 To 31100
    T(I) = I
Next
For I = 31000 To 31100
    Call CHECK_EQUAL( T(I), I ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(T), 31100 ) From AXUNIT


For I = 500 To 600
    T(I) = I
Next
For I = 500 To 600
    Call CHECK_EQUAL( T(I), I ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(T), 31100 ) From AXUNIT


End

# ------------------------ TEST_SUBPROG --------------------------------
# ######################################################################

Subprog TEST_SUBPROG( )
Local Integer TAB(1..)

Call SUBTEST( TAB )
Call CHECK_EQUAL( maxtab(TAB), 300 ) From AXUNIT
For I = 200 To 300
    Call CHECK_EQUAL( TAB(I), I ) From AXUNIT
Next
End

# ------------------------ TEST_OBJECT --------------------------------
# ######################################################################

Subprog TEST_OBJECT( )
Local Integer I,M
Local Instance OB Using ZXCSTRU3 


M = freeheap
OB = NewInstance ZXCSTRU3

For I = 1 To 100
    OB.HHH(I) = I
Next
For I = 1 To 100
    Call CHECK_EQUAL( OB.HHH(I), I ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(OB.HHH), 100 ) From AXUNIT


For I = 101 To 200
    Call CHECK_EQUAL( OB.HHH(I), 0 ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(OB.HHH), 100 ) From AXUNIT


For I = 31000 To 31100
    OB.HHH(I) = I
Next
For I = 31000 To 31100
    Call CHECK_EQUAL( OB.HHH(I), I ) From AXUNIT
Next
Call CHECK_EQUAL( maxtab(OB.HHH), 31100 ) From AXUNIT

FreeInstance OB

Call CHECK_EQUAL( freeheap-M, 0 ) From AXUNIT


End


# ------------------------ TEST_SUBOBJECT --------------------------------
# ######################################################################

Subprog TEST_SUBOBJECT( )
Local Instance OB Using ZXCSTRU3

M = freeheap
OB = NewInstance ZXCSTRU3

Call SUBTEST0( OB.HHH )
Call CHECK_EQUAL( maxtab(OB.HHH), 300 ) From AXUNIT
For I = 200 To 300
    Call CHECK_EQUAL( OB.HHH(I), I ) From AXUNIT
Next

FreeInstance OB

Call CHECK_EQUAL( freeheap-M, 0 ) From AXUNIT


End

Subprog SUBTEST0( T  )
Variable Integer T(0..)
For I = 200 To 300
    T(I) = I
Next
Call CHECK_EQUAL( maxtab(T), 300 ) From AXUNIT

End

Subprog SUBTEST( T  )
Variable Integer T(1..)
For I = 200 To 300
    T(I) = I
Next
Call CHECK_EQUAL( maxtab(T), 300 ) From AXUNIT

End


# CREATE_TST
# ----------------------------------------------------
Subprog CREATE_TST
Local Integer I
Local Char STC(255)

# ZXCELL --------------------------------------------------
STC = filpath("STC","ZXCELL","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer NO" Using [FST]
Wrseq "Char NAME(20)" Using [FST]
Wrseq "INSTANCE NXCELL Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq " " Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZSTACK -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXSTACK","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "INSTANCE STACK Using ZXCELL" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PUSH( CELL )" Using [FST]
Wrseq "Variable INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "Local Integer I" Using [FST]
Wrseq "CELL.NXCELL = THIS.STACK" Using [FST]
Wrseq "this.STACK = CELL" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD POP( )" Using [FST]
Wrseq "Local INSTANCE CELL Using ZXCELL" Using [FST]
Wrseq "CELL = THIS.STACK" Using [FST]
Wrseq "THIS.STACK = THIS.STACK.NXCELL" Using [FST]
Wrseq "CELL.NXCELL = NULL" Using [FST]
Wrseq "End CELL" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXCSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------
STC = filpath("STC","ZXCSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer AAA(1..11) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 0    " Using [FST]
Wrseq "    THIS.AAA(5) = 5" Using [FST]
Wrseq "    #THIS.ACCESSORENABLED = 1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "Local Integer TESTDD" Using [FST]
Wrseq "" Using [FST]
Wrseq "TESTDD=8 " Using [FST]
Wrseq "" Using [FST]
Wrseq "OLDV = V" Using [FST]
Wrseq "If FMET THIS.AAA.CONTROL( )" Using [FST]
Wrseq " THIS.ISREADONLY = 0" Using [FST]
Wrseq " STAT = FMET THIS.AAA.PROPAGATE( ) " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INIT" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONTROL( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD PROPAGATE( )" Using [FST]
Wrseq "# Value Integer I" Using [FST]
Wrseq "Local Integer STAT" Using [FST]
Wrseq "Local Integer J" Using [FST]
Wrseq "J = THIS.AAA(11)" Using [FST]
Wrseq "THIS.AAA(11) = J+1" Using [FST]
Wrseq "STAT=1" Using [FST]
Wrseq "End STAT" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Integer HHH(0..) {" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "" Using [FST]
Wrseq "    #HHH(I) = I" Using [FST]
Wrseq "    THIS.HHH(8) = 8" Using [FST]
Wrseq "End" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Char BBB(20)" Using [FST]
Wrseq "Decimal CCC {" Using [FST]
Wrseq "METHOD INI0( A )" Using [FST]
Wrseq "Value Integer A" Using [FST]
Wrseq 'THIS.BBB = "INI0"' Using [FST]
Wrseq "THIS.CCC = A+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD INI1( B )" Using [FST]
Wrseq "Value Integer B" Using [FST]
Wrseq "THIS.BBB = 'INI1'" Using [FST]
Wrseq "THIS.CCC = B" Using [FST]
Wrseq "End THIS.CCC+1" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI2( C )" Using [FST]
Wrseq "Value Integer C" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI3  (C)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD INI3( D )" Using [FST]
Wrseq "Value Integer D" Using [FST]
Wrseq "THIS.BBB = 'INI2-3'" Using [FST]
Wrseq "THIS.CCC = D+1" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD GET( )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Local Decimal C" Using [FST]
Wrseq "    C = THIS.CCC" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "Instance DDD(1..) Using ZXDSTRU3" Using [FST]
Wrseq "Instance FFF(1..2) Using ZXDSTRU3" Using [FST]
Wrseq "Char EEE(20)(1..2)" Using [FST]
Wrseq "Integer GGG(1..5,1..3)" Using [FST]
Wrseq "Clbfile IIII(0)" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD ZXCSTRU3( N )" Using [FST]
Wrseq "Value Integer N" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "# variation sur SETBBB" Using [FST]
Wrseq "METHOD SETBBB0( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB1( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    THIS.BBB = VALU-'Direct'" Using [FST]
Wrseq "    THIS.BBB -= 'This'" Using [FST]
Wrseq "End THIS.BBB" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB2( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "    CALLMET this.SETBBB0( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB3( VALU )" Using [FST]
Wrseq "Value Char VALU()" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.SETBBB1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "FMETHOD SETBBB4( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "End FMET THIS.CCC.INI1  ( VALU )" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETBBB5( VALU )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "CALLMET THIS.CCC.INI0  ( VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM0( VALU, I )" Using [FST]
Wrseq "Value Integer VALU" Using [FST]
Wrseq "Value Integer I" Using [FST]
Wrseq "If (THIS.DDD(I) = Null)" Using [FST]
Wrseq "    THIS.DDD(I) = NEWINSTANCE ZXDSTRU3" Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "CALLMET THIS.DDD(I).SETM  ( THIS, VALU )" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPAAA( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = THIS.SYSSNAPSHOT.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SYSSNAPDDD( VALU )" Using [FST]
Wrseq "Variable Integer VALU" Using [FST]
Wrseq "" Using [FST]
Wrseq "VALU = SYSSNAPSHOT.DDD(2).M" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD WHOAMI( V )" Using [FST]
Wrseq "Variable Integer V" Using [FST]
Wrseq "" Using [FST]
Wrseq "If (dim([R]THIS))" Using [FST]
Wrseq "    Default [R],[F],[L],[S],[V]" Using [FST]
Wrseq "    V = 1" Using [FST]
Wrseq "Else" Using [FST]
Wrseq "    V = 2 " Using [FST]
Wrseq "Endif" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

# ZXDSTRU3 -----------------------------------------------------------------
# ------------------------------------------------------------------------

STC = filpath("STC","ZXDSTRU3","stc", nomap(0))
Openo STC Using [FST]
Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
Wrseq "Integer M" Using [FST]
Wrseq "Decimal N" Using [FST]
Wrseq "Integer PPP" Using [FST]
Wrseq "Char QQQ(20)(1..3) {" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Char V()" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVC = V" Using [FST]
Wrseq "}" Using [FST]
Wrseq "" Using [FST]
Wrseq "Date RRR {" Using [FST]
Wrseq "METHOD SET( V )" Using [FST]
Wrseq "#Value Integer I" Using [FST]
Wrseq "Variable Date V" Using [FST]
Wrseq "" Using [FST]
Wrseq "[V]OLDVD = V" Using [FST]
Wrseq "" Using [FST]
Wrseq "}" Using [FST]
Wrseq "INSTANCE O Using ZXCSTRU3" Using [FST]
Wrseq "" Using [FST]
Wrseq "%%" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
Wrseq "" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Wrseq "" Using [FST]
Wrseq "METHOD SETM( UP, Z )" Using [FST]
Wrseq "Variable INSTANCE UP Using ZXCSTRU3" Using [FST]
Wrseq "Value Integer Z" Using [FST]
Wrseq "" Using [FST]
Wrseq "THIS.M = Z+UP.AAA(1)" Using [FST]
Wrseq "End" Using [FST]
Wrseq "" Using [FST]
Openo Using [FST]

VV = "valstc "-nomap(0)-"ZXCELL"
System RS = VV

VV = "valstc "-nomap(0)-"ZXSTACK"
System RS = VV

VV = "valstc "-nomap(0)-"ZXCSTRU3"
System RS = VV

VV = "valstc "-nomap(0)-"ZXDSTRU3"
System RS = VV

End

Subprog DELETE_TST
Local Char FIC(255)
Local Integer J

FIC = filpath("STC","ZXCELL","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCELL","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCELL"'

FIC = filpath("STC","ZXSTACK","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXSTACK","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXSTACK"'



FIC = filpath("STC","ZXCSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXCSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXCSTRU3"'

FIC = filpath("STC","ZXDSTRU3","stc", nomap(0))
J = Delfile( FIC )
FIC = filpath("STC","ZXDSTRU3","adx", nomap(0))
J = Delfile( FIC )
System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZXDSTRU3"'

End

# -----------------------VALIDATION- --------------------------------
# ###################################################################
Funprog MYVALP( CL )
Value Char CL()
Local Integer TYP
Local Char VV(250)
Local Char RS(250)

VV = "valstc -p"-nomap(0)-CL
System RS = VV
TYP = val(RS)
If (TYP = 0)
    ADXOVE = RS
Endif
End TYP


