#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_CLBFILE") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_CLBFILE_"+GUSER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("CLBFILE", "CLBFILE") From AXUNIT
Call ADD_TESTCASE("TC_STRING","TC_STRING", 14) From AXUNIT


Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT

Subprog TC_STRING()
Local Clbfile S
Local Integer I,LENGTH

Append S,"A"
Call CHECK_EQUAL(len(S),1) From AXUNIT
Call CHECK_EQUAL(S,"A") From AXUNIT

Raz S
Call CHECK_EQUAL(len(S),0) From AXUNIT

For I = 0 To 25
 Append S, chr$(ascii('A')+I)
Next I
Call CHECK_EQUAL(len(S),26) From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 1),"A") From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 26),"Z") From AXUNIT


Local Clbfile S2
For I = 1 To 100
 Append S2, S
Next I
Call CHECK_EQUAL(len(S2),2600) From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 1),"A") From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 26),"Z") From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 2600),"Z") From AXUNIT

Raz S
LENGTH=4000
Call CHECK_EQUAL(len(S),0) From AXUNIT
For I = 1 To LENGTH
 Append S, num$(mod(I,10))
Next I
Call CHECK_EQUAL(len(S),LENGTH) From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 1),"1") From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 9),"9") From AXUNIT

End
