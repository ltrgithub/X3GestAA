#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_CLBFILE") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_CLBFILE_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()
Callmet GACTX.ACTX_SET_LANISO("fr-FR")

Call TESTSUITE_START("CLBFILE", "CLBFILE") From AXUNIT
Call ADD_TESTCASE("TC_CLBFILE","TC_CLBFILE", 37) From AXUNIT
Call ADD_TESTCASE("TC_CLBFILE_DIMENSIONS","TC_CLBFILE_DIMENSIONS", 6) From AXUNIT
Call ADD_TESTCASE("TC_CLBFILE_OPERATORS","TC_CLBFILE_OPERATORS", 11) From AXUNIT


Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("CLBFILE", "CLBFILE")
End SUITE_RESULT

Subprog TC_CLBFILE()
Local Char TC(255)
Local Clbfile S
Local Integer I,LENGTH

TC="Append"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Append S,"A"
Call CHECK_EQUAL(len(S),1) From AXUNIT
Call CHECK_EQUAL(S,"A") From AXUNIT

Raz S
Call CHECK_EQUAL(len(S),0) From AXUNIT

For I = 0 To 25
 Append S, chr$(ascii('A')+I)
Next I
Call CHECK_EQUAL(len(S),26) From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 1),"A") From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 26),"Z") From AXUNIT

TC="Append 1 clob to another clob"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Clbfile S2
For I = 1 To 100
 Append S2, S
Next I
Call CHECK_EQUAL(len(S2),2600) From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 1),"A") From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 26),"Z") From AXUNIT
Call CHECK_EQUAL(xgetchar( S2, 2600),"Z") From AXUNIT

TC="xgetchar on a clob"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Raz S
LENGTH=4000
Call CHECK_EQUAL(len(S),0) From AXUNIT
For I = 1 To LENGTH
 Append S, num$(mod(I,10))
Next I
Call CHECK_EQUAL(len(S),LENGTH) From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 1),"1") From AXUNIT
Call CHECK_EQUAL(xgetchar( S, 9),"9") From AXUNIT

TC="Test Raz"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Raz S
Call CHECK_EQUAL(len(S),0) From AXUNIT

TC="Test vireblc space removal"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Clbfile S1
S1=" "+string$(100,"A")+" "
For I=1 To 10
  Append S,S1
Next

TC="Remove leading space"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S=vireblc(S,0)
Call CHECK_EQUAL(left$(S,1),"A") From AXUNIT

TC="Remove trailing space"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S=vireblc(S,1)
Call CHECK_EQUAL(right$(S,len(S)),"A") From AXUNIT

TC="Remove leading and trailing space"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S=" "+S+" "
S=vireblc(S,2)
Call CHECK_EQUAL(left$(S,1),"A") From AXUNIT
Call CHECK_EQUAL(right$(S,len(S)),"A") From AXUNIT

TC="Remove leading space and truncate string at next space"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S="    "+S+" "
S=vireblc(S,3)
Call CHECK_EQUAL(left$(S,1),"A") From AXUNIT
Call CHECK_EQUAL(len(S),100) From AXUNIT

TC="Remove all spaces"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S="    "+S+" "
S=vireblc(S,4)
Call CHECK_EQUAL(instr(1,S," "),0) From AXUNIT

TC="Remove consecutive spaces"
Call CHECK_EQUAL(TC,TC) From AXUNIT

Call CHECK_EQUAL(instr(1,S," "),0) From AXUNIT
S1="  "+string$(100,"A")+"  "
For I=1 To 10
  Append S,S1
Next
S=vireblc(S,5)
Call CHECK_EQUAL(instr(1,S,"  "),0) From AXUNIT

TC="Test multiple declarations"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Clbfile S4(1)
Append S4,"AAAAAAAAAAAAAAAAAAAA"
Local Clbfile S4(1)
Call CHECK_EQUAL(S4,"") From AXUNIT
End

Subprog TC_CLBFILE_DIMENSIONS()
TC="Test multiple dimensions"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Clbfile S4(1)(2)
Append S4(0),"AAAAAAAAAAAAAAAAAAAA"
Append S4(1),"AAAAAAAAAAAAAAAAAAAA"
Call CHECK_NOTEQUAL(S4(0),"") From AXUNIT
Call CHECK_EQUAL(S4(0),S4(1)) From AXUNIT

TC="Test multiple dimensions"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Clbfile S4(1)(2,2)
Append S4(0,0),"AAAAAAAAAAAAAAAAAAAA"
Append S4(0,1),"AAAAAAAAAAAAAAAAAAAA"
Call CHECK_EQUAL(S4(0,0),"AAAAAAAAAAAAAAAAAAAA") From AXUNIT
Call CHECK_EQUAL(S4(0,1),S4(0,0)) From AXUNIT
End

#Check vireblc for space removal
Subprog TC_CLBFILE_OPERATORS()
Local Char TC(255)
Local Clbfile S


TC="Test equals assignment"
Call CHECK_EQUAL(TC,TC) From AXUNIT
S = string$(1000,"A")
Call CHECK_EQUAL(len(S),1000) From AXUNIT

TC="Test equals comparison"
Local Clbfile S3
Append S3,S
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_TRUE(S3=S) From AXUNIT

TC="Test not equals comparison"
Local Clbfile S3
S3=S
Append S3,"B"
Append S,"D"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_TRUE(S3<>S) From AXUNIT

TC="Test greater than comparison"
Append S3,"B"
Append S,"D"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(len(S3),len(S)) From AXUNIT
Call CHECK_TRUE(S>S3) From AXUNIT

TC="Test less than comparison"
Append S3,"B"
Append S,"D"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_TRUE(S3<S) From AXUNIT

End
#
