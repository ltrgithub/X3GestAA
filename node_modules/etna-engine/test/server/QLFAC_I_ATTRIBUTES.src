Local Clbfile RESULT
RESULT=func TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAC_I_ATTRIBUTES_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#Code  Attribute Description Français  Descriptiion English  Comment
#
#l $isLoaded: Rich media loaded (charged)   ? Used in class or representation?
#B $isLobFound:Rich media exists   ? Used in class?
#M $isMandatory: Property is Mandatory   Used in Class script
#H $isHidden: Property is in the representation but Hidden (not visible)  Used in Representation script
#R $isReadOnly: Display only  Internal - if set to true then property cannot be changed, even in the script
#G $isDisabled: Property is cannot be edited - Display only/read only - representation   Used in Representation - display in grayed area
#r $isRequested  Activé  Activé  ?
#E $isEditMode Modifiable  Modifiable  ?
#d $isDelta  Mode delta  Mode delta  ?
#s $isDeleted  Ligne supprimée   Line is deleted Line in a collection is deleted
#e $isExcluded Champs exclus de l'affichage ne devant jamais être affiché  field is excluded from dispaly    ?
#


$ERROR
Local Char TC(255),TC1(255)
TC=num$(errn)-errmes$(errn)
TC1=num$(EX)-errmes$(EX)
Call CHECK_EQUAL(TC, TC1) From AXUNIT
Resume

$SET_EX_ISREADLONY
If pat(ver$(0),"etna*")>0
	EX=147
Else
	EX=26
Endif
Return

Funprog TESTSUITE()
[L]ASTATUS = fmet GACTX.ACTX_SET_LANISO("fr-FR")

Call TESTSUITE_START("ATTRIBUTES", "ATTRIBUTES") From AXUNIT
Call ADD_TESTCASE("TC_ACTX_ATTRIBUTES","TC_ACTX_ATTRIBUTES"     ,29 ) From AXUNIT
Call ADD_TESTCASE("TC_PROPERTY_ATTRIBUTES","TC_PROPERTY_ATTRIBUTES"   ,108) From AXUNIT
Call ADD_TESTCASE("TC_INSTANCE_ATTRIBUTES","TC_INSTANCE_ATTRIBUTES"   ,11) From AXUNIT
Call ADD_TESTCASE("TC_COLLECTION_ATTRIBUTES","TC_COLLECTION_ATTRIBUTES" ,38) From AXUNIT
Call ADD_TESTCASE("TC_COLUMN_ATTRIBUTES","TC_COLUMN_ATTRIBUTES"   ,36) From AXUNIT
Call ADD_TESTCASE("TC_MISC","TC_MISC",9) From AXUNIT
Call ADD_TESTCASE("TC_COMPATIBILITY","TC_COMPATIBILITY",2) From AXUNIT
Call ADD_TESTCASE("TC_ETNA_SYNTAX","TC_ETNA_SYNTAX",13) From AXUNIT
Call ADD_TESTCASE("TC_ISSUE_4834","TC_ISSUE_4834",8) From AXUNIT
Call ADD_TESTCASE("TC_ISSUE_4838","TC_ISSUE_4838",5) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ATTRIBUTES", "ATTRIBUTES")
End SUITE_RESULT

Subprog TC_PROPERTY_ATTRIBUTES
Local Char TC(255)
Local Integer IS_READONLY,ASTATUS,EX
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03

Gosub SET_EX_ISREADLONY
Onerrgo ERROR

[L]IS_READONLY = 0
TC="Initial state $isReadOnly=false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AFALSE) From AXUNIT

TC="set state $isReadOnly=true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="set state $isReadOnly=false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_AFALSE)
[L]IS_READONLY = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

TC="Change the property C03P01 to ins1-0 with $isReadOnly=false"
Call CHECK_EQUAL(TC,TC) From AXUNIT
INS1.C03P01 = "ins1-0"
Call CHECK_EQUAL(INS1.C03P01,"ins1-0") From AXUNIT

TC="Change the property C03P01 to ins1-1 with $isReadOnly=false"
Call CHECK_EQUAL(TC,TC) From AXUNIT
INS1.C03P01 = "ins1-1"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

TC="set C03P01 of $isReadOnly=true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_ATRUE)
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="Change the property C03P01 to ins1-2 with $isReadOnly=true"
Call CHECK_EQUAL(TC,TC) From AXUNIT
INS1.C03P01 = "ins1-2"
Call CHECK_EQUAL(INS1.C03P01,"ins1-1") From AXUNIT

TC="1 Change the property C03P01 $isReadOnly=false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_AFALSE)
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AFALSE) From AXUNIT

TC="2 set the object $isReadOnly=true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_ATRUE)
[L]ASTATUS = fmet INS1.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="3 check  property $isReadOnly=true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="4 Set object attribute isReadOnly=false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_AFALSE)
[L]ASTATUS = fmet INS1.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AFALSE) From AXUNIT

TC="5 Get property attribute isReadOnly = false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AFALSE) From AXUNIT
INS1.C03P01 = "ins1-5"
Call CHECK_EQUAL(INS1.C03P01,"ins1-5") From AXUNIT

TC="6. Set instance attribute isReadOnly = false(0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_AFALSE)
[L]IS_READONLY = fmet INS1.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT

TC="7. Change instance property" :
Call CHECK_EQUAL(TC,TC) From AXUNIT
INS1.C03P01 = "ins1-5"
Call CHECK_EQUAL(INS1.C03P01,"ins1-5") From AXUNIT

TC="8. Set instance attribute isReadOnly = true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_ATRUE)

TC="9. Get property attribute isReadOnly should equal true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="10. Set property attribute isReadOnly=false(0) with instance $isReadOnly =true(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

TC="11. Set property value to INS1-6"
Call CHECK_EQUAL(TC,TC) From AXUNIT
EX=147
INS1.C03P01 = "INS1-6"
#INS1.C03P01 is readonly :
Call CHECK_EQUAL(INS1.C03P01,"ins1-5") From AXUNIT

#New instance :
Local Instance INS2 Using C_AQCPROC03
INS2 = NewInstance C_AQCPROC03

INS2.C03P01 = "ins2-1"
Call CHECK_EQUAL(INS2.C03P01,"ins2-1") From AXUNIT

TC="Check isReadOnly on multiple concurrent instances"
Call CHECK_EQUAL(TC,TC) From AXUNIT

#Let's set INS1 and INS2 as Writtable.
INS1.isReadOnly =[V]CST_AFALSE
INS2.isReadOnly =[V]CST_AFALSE


#Let's set INS2.C03.P01 as ReadOnly...
[L]ASTATUS = fmet INS2.C03P01.ASETATTR("$isReadOnly",[V]CST_ATRUE)
#Let's set INS1.C03.P01 as writtable...
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_AFALSE)

#and check attributes
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(fmet INS2.C03P01.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#set different attributes :
TC="Set/check different attributes"
Call CHECK_EQUAL(TC,TC) From AXUNIT
EX=0

TC="Property isHidden"
Call CHECK_EQUAL(TC,TC) From AXUNIT
INS1.C03P01.$isHidden=[V]CST_AFALSE
Call CHECK_EQUAL(INS1.C03P01.$isHidden,[V]CST_AFALSE) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isHidden",[V]CST_ATRUE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isHidden"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isHidden,[V]CST_ATRUE) From AXUNIT
INS1.C03P01.$isHidden=[V]CST_AFALSE
Call CHECK_EQUAL(INS1.C03P01.$isHidden,[V]CST_AFALSE) From AXUNIT

TC="Property isMandatory"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isMandatory",[V]CST_ATRUE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isMandatory"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isMandatory,[V]CST_ATRUE) From AXUNIT
INS1.C03P01.$isMandatory=[V]CST_AFALSE
Call CHECK_EQUAL(INS1.C03P01.$isMandatory,[V]CST_AFALSE) From AXUNIT

TC="Property isDisabled"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isDisabled",[V]CST_ATRUE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isDisabled"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isDisabled,[V]CST_ATRUE) From AXUNIT
INS1.C03P01.$isDisabled=[V]CST_AFALSE
Call CHECK_EQUAL(INS1.C03P01.$isDisabled,[V]CST_AFALSE) From AXUNIT

#isDeleted is internal => error 147
EX=147
TC="Property isDeleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isDeleted",[V]CST_ATRUE)
INS1.C03P01.$isDeleted=[V]CST_AFALSE

#isLoaded is internal => error 147
EX=147
TC="Property isLoaded"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isLoaded",[V]CST_ATRUE)
INS1.C03P01.$isLoaded=[V]CST_AFALSE

#isLobFound is internal => error 147
EX=147
TC="Property isLobFound"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isLobFound",[V]CST_ATRUE)
INS1.C03P01.$isLobFound=[V]CST_AFALSE

#isExcluded is internal => error 147
EX=147
TC="Property isExcluded"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isExcluded",[V]CST_ATRUE)
INS1.C03P01.$isExcluded=[V]CST_AFALSE

#isRequested is internal => error 147
EX=147
TC="Property isRequested"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isRequested",[V]CST_ATRUE)
INS1.C03P01.$isRequested=[V]CST_AFALSE

#isDelta is internal => error 147
EX=147
TC="Property isDelta"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isDelta",[V]CST_ATRUE)
INS1.C03P01.$isDelta=[V]CST_AFALSE

#isEditMode is internal => error 147
EX=147
TC="Property isEditMode"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isEditMode",[V]CST_ATRUE)
INS1.C03P01.$isEditMode=[V]CST_AFALSE


# Other attributes
TC="Property filename"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$filename","filename")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$filename"),"filename") From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$filename,"filename") From AXUNIT
INS1.C03P01.$filename=""
Call CHECK_EQUAL(INS1.C03P01.$filename,"") From AXUNIT

TC="Property contentType"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$contentType","contentType")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$contentType"),"contentType") From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$contentType,"contentType") From AXUNIT
INS1.C03P01.$contentType=""
Call CHECK_EQUAL(INS1.C03P01.$contentType,"") From AXUNIT

#_rightAccess is internal => error 26
EX=26
TC="Property $_rightAccess"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$_rightAccess"),"") From AXUNIT

TC="Property $symbol"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$symbol"),"") From AXUNIT

TC="Property $x3Format"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$x3Format"),"") From AXUNIT

TC="Property $title"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$title"),"") From AXUNIT

TC="Property $description"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$description"),"") From AXUNIT

TC="Property $acceptedTypes"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$acceptedTypes"),"") From AXUNIT

TC="Property $style"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$style"),"") From AXUNIT

TC="Property $label"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$label"),"") From AXUNIT

TC="Property $namProParent"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$namProParent"),"") From AXUNIT

TC="Property $index"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$index"),0) From AXUNIT

TC="Property $scale"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$scale"),0) From AXUNIT

TC="Property $precision"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$precision"),0) From AXUNIT

End

Subprog TC_INSTANCE_ATTRIBUTES
Local Char TC(255)
Local Integer IS_READONLY,ASTATUS,EX,LINE
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03
[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)

EX=147
Onerrgo ERROR
INS1.$isReadOnly = [V]CST_ATRUE

TC="Set Instance isReadOnly = true (1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT

TC="Get Instance isReadOnly = true (1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

TC="Get Instance property isReadOnly = true (1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.C03P01.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

TC="Get Instance collection isReadOnly = true (1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.COL.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

TC="Get Instance collection row isReadOnly = true (1) at"-num$([L]LINE)
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.COL(0).AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

TC="Get Instance collection column isReadOnly = true (1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadOnly"),[V]CST_ATRUE) From AXUNIT

End

# Comment : ACTX.USER property is set as ReadOnly by the supervisor
# this behavior cannot be changed :
Subprog TC_ACTX_ATTRIBUTES
Local Char TC(255)
Local Char USER1(50)
Local Integer IS_READONLY,ASTATUS,ERR,EX

Gosub SET_EX_ISREADLONY
Onerrgo ERROR

TC="Retrieve user"
Call CHECK_EQUAL(TC,TC) From AXUNIT
USER1 = GACTX.USER
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

TC="Read only status on GACTX.USER = True(1)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]IS_READONLY = fmet GACTX.USER.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#Let's try to change the user :
GACTX.USER = "Z"+USER1

#GACTX.USER wasn't changed :
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT


TC="Retrieve user"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]IS_READONLY = fmet GACTX.USER.AGETATTR("$isReadOnly")
USER1 = GACTX.USER
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

TC="Check read only state - GACTX"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]IS_READONLY = fmet GACTX.USER.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#
TC="try to change read-only GACTX user"
Call CHECK_EQUAL(TC,TC) From AXUNIT
GACTX.USER = "Z"+USER1

TC="User not changed"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

TC="change the $isReadOnly state to false (0)"
Call CHECK_EQUAL(TC,TC) From AXUNIT
If pat(ver$(0),"etna*")>0
	EX=147
Else
	Ex=39
Endif	
[L]ASTATUS = fmet GACTX.USER.ASETATTR("$isReadOnly",[V]CST_AFALSE)
[L]IS_READONLY = fmet GACTX.USER.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

TC="change the user -GACTX.USER"
Call CHECK_EQUAL(TC,TC) From AXUNIT
GACTX.USER = "Z"+USER1
Call CHECK_EQUAL([V]GACTX.USER,USER1) From AXUNIT

TC="Invalid attribute $_isReadOnly"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet GACTX.USER.ASETATTR("$_isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT

TC="Compare GACTX and INS1.ACTX"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local Instance INS2 Using C_AQCPROC03
INS2 = NewInstance C_AQCPROC03
Call CHECK_EQUAL(INS2.ACTX.USER,[V]GACTX.USER) From AXUNIT

TC="Initial Check read only state - INS2.C03P01"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS2.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AFALSE) From AXUNIT

TC="Set read only state - INS1.C03P01"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS2.C03P01.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

TC="Check after set read only state - INS1.C03P01"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet INS2.C03P01.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ATRUE) From AXUNIT

End


Subprog TC_COLLECTION_ATTRIBUTES
Local Integer IS_READONLY,LINE,C03P02,ASTATUS,EX
Local Instance INS1 Using C_AQCPROC03

Gosub SET_EX_ISREADLONY
Onerrgo ERROR

INS1 = NewInstance C_AQCPROC03

Infbox "TC_COLLECTION_ATTRIBUTES"
[L]IS_READONLY = 0
[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 10+[L]LINE
Call CHECK_EQUAL(INS1.COL(0).C03P02,10+[L]LINE) From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,1) From AXUNIT
INS1.COL(1).C03P02 = 10+[L]LINE
Call CHECK_EQUAL(INS1.COL(1).C03P02,10+[L]LINE) From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_AFIRSTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 10
Call CHECK_EQUAL(INS1.COL(0).C03P02,10) From AXUNIT

#set INS1.COL(0).C03P02 as ReadOnly
[L]ASTATUS = fmet INS1.COL(0).C03P02.ASETATTR("$isReadOnly",[V]CST_ATRUE)
[L]IS_READONLY = fmet INS1.COL(0).C03P02.AGETATTR("$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
C03P02 =  INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 20
Call CHECK_EQUAL(INS1.COL(0).C03P02,C03P02) From AXUNIT

#set INS1.COL(0).C03P02 as writtable:
[L]ASTATUS = fmet INS1.COL(0).C03P02.ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL(0).C03P02.AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 21
Call CHECK_EQUAL(INS1.COL(0).C03P02,21) From AXUNIT

#set INS1.COL(0) as ReadOnly
[L]ASTATUS = fmet INS1.COL(0).ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.COL(0).AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 22
Call CHECK_EQUAL(INS1.COL(0).C03P02,21) From AXUNIT

#set INS1.COL(0) as writtable
[L]ASTATUS = fmet INS1.COL(0).ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL(0).AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 23
Call CHECK_EQUAL(INS1.COL(0).C03P02,23) From AXUNIT

#set INS1.COL as ReadOnly
[L]ASTATUS = fmet INS1.COL.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.COL.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 24
Call CHECK_EQUAL(INS1.COL(0).C03P02,23) From AXUNIT

#set INS1.COL as writtable
[L]ASTATUS = fmet INS1.COL.ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL.AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 24
Call CHECK_EQUAL(INS1.COL(0).C03P02,24) From AXUNIT

#set INS1 as ReadOnly
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 25
Call CHECK_EQUAL(INS1.COL(0).C03P02,24) From AXUNIT

#set INS1 as writtable
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(0).C03P02 = 26
Call CHECK_EQUAL(INS1.COL(0).C03P02,26) From AXUNIT

#set INS1.COL(1) as writtable
[L]ASTATUS = fmet INS1.COL(1).ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL(1).AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#let's try to modify INS1.COL(0).C03P02
INS1.COL(1).C03P02 = 11
Call CHECK_EQUAL(INS1.COL(1).C03P02,11) From AXUNIT

#set INS1.COL(1) as ReadOnly
[L]ASTATUS = fmet INS1.COL(1).ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.COL(1).AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(1).C03P02
INS1.COL(1).C03P02 = 12
Call CHECK_EQUAL(INS1.COL(1).C03P02,11) From AXUNIT

#set INS1.COL(1) as writtable
[L]ASTATUS = fmet INS1.COL(1).ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL(1).AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#set INS1.COL(0) as ReadOnly
[L]ASTATUS = fmet INS1.COL(0).ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.COL(0).AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#let's try to modify INS1.COL(1).C03P02
INS1.COL(1).C03P02 = 13
Call CHECK_EQUAL(INS1.COL(1).C03P02,13) From AXUNIT

#set INS1.COL as ReadOnly
[L]ASTATUS = fmet INS1.COL.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL(fmet INS1.COL.AGETATTR("$isReadOnly"),[V]CST_ATRUE) From AXUNIT

#Let's try to add a new line :
[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,-1) From AXUNIT

#set INS1.COL as writtable
[L]ASTATUS = fmet INS1.COL.ASETATTR("$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL.AGETATTR("$isReadOnly"),[V]CST_AFALSE) From AXUNIT

#Let's try to add a new line :
[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_NOTEQUAL([L]LINE,-1) From AXUNIT
End


Subprog TC_COLUMN_ATTRIBUTES
Local Integer IS_READONLY,LINE,C03P02,ASTATUS,EX
Local Instance INS1 Using C_AQCPROC03

EX=147
Onerrgo ERROR

INS1 = NewInstance C_AQCPROC03

Infbox "TC_COLUMN_ATTRIBUTES"
[L]IS_READONLY = 0

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 1
INS1.COL(0).C03P03 = "ref01"
Call CHECK_EQUAL(INS1.COL(0).C03P02,1) From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P03,"ref01") From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,1) From AXUNIT
INS1.COL(1).C03P02 = 2
INS1.COL(1).C03P03 = "ref02"
Call CHECK_EQUAL(INS1.COL(1).C03P02,2) From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P03,"ref02") From AXUNIT

#Let's set the column "C03P02" of the collection COL as ReadOnly :
[L]ASTATUS = fmet INS1.COL.ASETCOLUMNATTR("C03P02","$isReadOnly",[V]CST_ATRUE)
[L]ASTATUS = fmet INS1.COL.ASETCOLUMNATTR("C03P02","$isHidden"  ,[V]CST_AFALSE)

Call CHECK_EQUAL(fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadOnly"),[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isHidden")  ,[V]CST_AFALSE) From AXUNIT

#Let's try to change C03P02 and C03P03:
INS1.COL(0).C03P02 = 10
INS1.COL(0).C03P03 = "ref10"
INS1.COL(1).C03P02 = 20
INS1.COL(1).C03P03 = "ref20"


Call CHECK_EQUAL(INS1.COL(0).C03P02,    1)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P03,"ref10") From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P03,"ref20") From AXUNIT

# MAXCOL = 4 for AQCPROC03.COL :
[L]ASTATUS = fmet INS1.COL.ASETCOLUMNATTR("C03P02","$isReadOnly",[V]CST_AFALSE)
Call CHECK_EQUAL(fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadOnly"),[V]CST_AFALSE) From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,2) From AXUNIT
INS1.COL(2).C03P02 = 3

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,3) From AXUNIT
INS1.COL(3).C03P02 = 4

Call CHECK_EQUAL(INS1.COL(0).C03P02,    1)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(2).C03P02,    3)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(3).C03P02,    4)   From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)

#Cannot insert another line :
Call CHECK_EQUAL(maxtab(INS1.COL),4) From AXUNIT
Call CHECK_EQUAL([L]LINE,-1) From AXUNIT
Call CHECK_EQUAL(maxtab(INS1.COL),4) From AXUNIT


#remove the last line :
[L]ASTATUS = fmet INS1.COL.ADEL(3)
Call CHECK_EQUAL(maxtab(INS1.COL),3) From AXUNIT

#insert a line
[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL(maxtab(INS1.COL),4) From AXUNIT

Call CHECK_EQUAL([L]LINE,3) From AXUNIT
INS1.COL(3).C03P02 = 5

Call CHECK_EQUAL(INS1.COL(0).C03P02,    1)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(2).C03P02,    3)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(3).C03P02,    5)   From AXUNIT

#set INS1.COL as ReadOnly
[L]ASTATUS = fmet INS1.COL.ASETATTR("$isReadOnly",[V]CST_ATRUE)

#let's try to delete a line :
[L]ASTATUS = fmet INS1.COL.ADEL(3)
Call CHECK_EQUAL(maxtab(INS1.COL),4) From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P02,    1)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(1).C03P02,    2)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(2).C03P02,    3)   From AXUNIT
Call CHECK_EQUAL(INS1.COL(3).C03P02,    5)   From AXUNIT
End


Subprog TC_MISC
Local Integer IS_READONLY,LINE,C03P02, ASTATUS,EX
Local Char TC(255)
Local Instance INS1 Using C_AQCPROC03
INS1 = NewInstance C_AQCPROC03

EX=0
TC="Object instance - read only"
Call  CHECK_EQUAL(TC,TC) From AXUNIT

TC="Set object is_Readonly=true(1)"
Call  CHECK_EQUAL(TC,TC) From AXUNIT
INS1.$isReadOnly = [V]CST_ATRUE

TC="GSet object is_Readonly=true(1)"
Call  CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(INS1.$isReadOnly,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(INS1.$isReadOnly,fmet INS1.AGETATTR("$isReadOnly")) From AXUNIT

TC="Set object is_Readonly=false(0)"
Call  CHECK_EQUAL(TC,TC) From AXUNIT
INS1.$isReadOnly = [V]CST_AFALSE

TC="Set object is_Readonly=false(0)"
Call  CHECK_EQUAL(TC,TC) From AXUNIT
Call CHECK_EQUAL(INS1.$isReadOnly,[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(INS1.$isReadOnly,fmet INS1.AGETATTR("$isReadOnly")) From AXUNIT
End


Subprog TC_COMPATIBILITY
Local Integer IS_READONLY,ASTATUS
Local Instance INS1 Using C_AQCPROC03

INS1 = NewInstance C_AQCPROC03

[L]ASTATUS     = fmet INS1.ASETATTRIBUTE("C03P01","$isReadOnly",[V]CST_ATRUE)
[L]IS_READONLY = fmet INS1.AGETATTRIBUTE("C03P01","$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT

[L]ASTATUS     = fmet INS1.ASETATTRIBUTE("C03P01","$isReadOnly",[V]CST_AFALSE)
[L]IS_READONLY = fmet INS1.AGETATTRIBUTE("C03P01","$isReadOnly")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_AFALSE) From AXUNIT
End


Subprog TC_ETNA_SYNTAX
Local Integer IS_READONLY,ASTATUS
Local Instance INS1 Using C_AQCPROC03
Local Char ATTNAME(20),TC(255)
Local Integer EX

Onerrgo ERROR
ATTNAME = "$isReadOnly"


TC="TC_ETNA_SYNTAX"
Call CHECK_EQUAL(TC,TC) From AXUNIT

INS1 = NewInstance C_AQCPROC03
INS1.C03P01.$isReadOnly = [V]CST_ATRUE
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,fmet INS1.C03P01.AGETATTR("$isReadOnly")) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,fmet INS1.C03P01.AGETATTR(ATTNAME)) From AXUNIT

INS1.C03P01.$isReadOnly = [V]CST_AFALSE
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,[V]CST_AFALSE) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,fmet INS1.C03P01.AGETATTR("$isReadOnly")) From AXUNIT
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,fmet INS1.C03P01.AGETATTR(ATTNAME)) From AXUNIT

[L]LINE = fmet INS1.COL.AADD([V]CST_ALASTPOS)
Call CHECK_EQUAL([L]LINE,0) From AXUNIT
INS1.COL(0).C03P02 = 1
INS1.COL(0).C03P03 = "ref01"

INS1.COL(0).C03P02.$isReadOnly = [V]CST_ATRUE
Call CHECK_EQUAL(INS1.COL(0).C03P02.$isReadOnly,[V]CST_ATRUE) From AXUNIT
Call CHECK_EQUAL(INS1.COL(0).C03P02.$isReadOnly,fmet INS1.COL(0).C03P02.AGETATTR("$isReadOnly") ) From AXUNIT

INS1.$isReadOnly = [V]CST_ATRUE
Call CHECK_EQUAL(INS1.$isReadOnly,[V]CST_ATRUE) From AXUNIT

INS1.$isReadOnly = [V]CST_AFALSE
Call CHECK_EQUAL(INS1.$isReadOnly,[V]CST_AFALSE) From AXUNIT

INS1.$isHidden = [V]CST_ATRUE
Call CHECK_EQUAL(INS1.$isHidden,[V]CST_ATRUE) From AXUNIT

INS1.$isHidden = [V]CST_AFALSE
Call CHECK_EQUAL(INS1.$isHidden,[V]CST_AFALSE) From AXUNIT
End

##ERRORS:
#Local Integer ERR, EX
#EX=26
#Onerrgo ERROR
#Infbox "INS1.$attribut"
#INS1.$ATTRIBUT = [V]CST_AFALSE
#Onerrgo
#End


Funprog SET_ATTRIBUTE(_THIS, _TYPE, _COLUMN_NAME, _ATTRIBUTE, _ATTRIBUTE_VAL)
Variable Instance _THIS Using OBJECT
Value Integer type   # 1=Instance, 2=Collection, 3=Column, 4=Property

Value Char _COLLECTION,_COLUMN,_PROPERTY,_ATTRIBUTE
Value Integer _ROW
Local Integer ASTATUS : [L]ASTATUS=[V]CST_AOK

If [L]_TYPE=1 | [L]type=2 | [L]_TYPE=4
  [L]ASTATUS = _THIS.ASETATTR(_ATTRIBUTE,_ATTRIBUTE_VAL)
Elsif [L]_TYPE=3
  [L]ASTATUS = _THIS.ASETCOLUMNATTR(_COLUMN_NAME,_ATTRIBUTE,_ATTRIBUTE_VAL)
Endif

End [L]ASTATUS

Subprog TC_ISSUE_4834
Local Integer IS_READONLY,ASTATUS
Local Instance INS1 Using C_AQCPROC03
Local Integer EX

Onerrgo ERROR

INS1 = NewInstance C_AQCPROC03
[L]ASTATUS = fmet INS1.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([V]CST_ASUCCESS,1) From AXUNIT
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ASUCCESS) From AXUNIT

[L]ASTATUS = fmet INS1.ASETATTR("$_isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([V]CST_AERROR,4) From AXUNIT
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT

INS1 = NewInstance C_AQCPROC03
[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([V]CST_ASUCCESS,1) From AXUNIT
Call CHECK_EQUAL([L]ASTATUS,[V]CST_ASUCCESS) From AXUNIT

[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$_isReadOnly",[V]CST_ATRUE)
Call CHECK_EQUAL([V]CST_AERROR,4) From AXUNIT
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
End

Subprog TC_ISSUE_4838
Local Integer IS_READONLY,ASTATUS
Local Instance INS1 Using C_AQCPROC03
Local Integer EX

Onerrgo ERROR

INS1 = NewInstance C_AQCPROC03
INS1.C03P01.$isReadOnly = [V]CST_ATRUE
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,[V]CST_ATRUE) From AXUNIT
IS_READONLY = fmet INS1.C03P01.AGETATTR("$ISREADONLY")
Call CHECK_EQUAL(IS_READONLY,INS1.C03P01.$isReadOnly) From AXUNIT

[L]ASTATUS = fmet INS1.C03P01.ASETATTR("$ISREADONLY",[V]CST_AFALSE)
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,[V]CST_AFALSE) From AXUNIT
[L]ASTATUS     = fmet INS1.ASETATTRIBUTE("C03P01","$ISREADONLY",[V]CST_ATRUE)
Call CHECK_EQUAL(INS1.C03P01.$isReadOnly,[V]CST_ATRUE) From AXUNIT
[L]IS_READONLY = fmet INS1.AGETATTRIBUTE("C03P01","$ISREADONLY")
Call CHECK_EQUAL([L]IS_READONLY,[V]CST_ATRUE) From AXUNIT
End