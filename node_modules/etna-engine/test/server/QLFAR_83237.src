#<AdxTL>@(#)12.0.0.0 $Revision$

TOTO = func TESTSUITE()
GTRACE = "QLFAR_83237_"+GUSER
Call LEC_TRACE From LECFIC




End

# ---------- TEST_SUITE On-time Validation -------------------------
# ------------------------------------------------------------------

Funprog TESTSUITE()
  Local File AABREV[ABV]

  Local Char OVF(60)
  Local Char OVS(60)
  Local Char RES(60)

  OVF = ADXOVF
  OVS = ADXOVS

  Call ADD_TESTCASE("SYS_VAR", "", 2) From AXUNIT
  Call ADD_TESTCASE("ONE_TEST0", "", 5) From AXUNIT
  Call ADD_TESTCASE("INVALIDATE0", "", 4) From AXUNIT
  Call ADD_TESTCASE("ONE_TEST1", "", 5) From AXUNIT
  Call ADD_TESTCASE("INVALIDATE1", "", 3) From AXUNIT
  Call ADD_TESTCASE("NOFILE", "", 2) From AXUNIT
  Call ADD_TESTCASE("FULL_TEST", "", 8) From AXUNIT
  Call ADD_TESTCASE("TSTPUSHSCRIPT", "", 4) From AXUNIT
  Call ADD_TESTCASE("TSTPULLSCRIPT", "", 5) From AXUNIT

  RES = func AXUNIT.RUN_TESTSUITE("On-time Validation", "Common")

  ADXOVF = OVF
  ADXOVS = OVS
End RES


Subprog SETUP
    Local Char NL
    NL = adxirs
    adxirs = chr$(10)
    Call CREATE_TEST( )
    adxirs = NL
End

Subprog TEARDOWN
    Call DELETE_TEST( )
End

# -----------------------SYS_VAR --------------------------------
# ###################################################################
Subprog SYS_VAR( )
    ADXOVS = "A1234567890123456789012345678901234567890123456789"
    Call CHECK_EQUAL( len(ADXOVS), 50 ) From AXUNIT

    ADXOVF = "A1234567890123456789012345678901234567890123456789"
    Call CHECK_EQUAL( len(ADXOVF), 50 ) From AXUNIT

    ADXOVS = ""
    ADXOVF = ""
End


# -----------------------ONE_TEST0 --------------------------------
# ###################################################################
Subprog ONE_TEST0( )

    ADXOVS = "QLFAR_83237"
    ADXOVF = "MYVALP"

    Local Instance IS Using ZCELL2
    Local Integer ST

    ST = filinfo(filpath("STC", "ZCELL2","adx", ""), 7)
    Call CHECK_NOTEQUAL( ST, -20 ) From AXUNIT
    Call CHECK_NOTEQUAL( ST, 0 ) From AXUNIT
    Call CHECK_EQUAL( ST, 387 ) From AXUNIT

    IS = NewInstance ZCELL2
    IS.NO = 1
    IS.NAME = "toto"
    Call CHECK_EQUAL( IS.NO, 1 ) From AXUNIT
    Call CHECK_EQUAL( IS.NAME, "toto" ) From AXUNIT

    FreeInstance IS
End

# -----------------------INVALIDATE0 --------------------------------
# ###################################################################
Subprog INVALIDATE0( )
Local Char FIC(250)
Local Integer ST

    ADXOVS = "QLFAR_83237"
    ADXOVF = "MYVALP"

    Local Instance IS Using ZCELL2
    Local Integer ST

    IS = NewInstance ZCELL2


    # class is used => return -1
    ST = PULLOBJECT( "","","ZCELL2" )
    Call CHECK_EQUAL( ST, -1 ) From AXUNIT

    FreeInstance IS

    # class is not used => return 1
    # invalidate ZCELL2
    ST = PULLOBJECT( "","","ZCELL2" )
    Call CHECK_EQUAL( ST, 1 ) From AXUNIT

    FIC = filpath("STC","ZCELL2","adx", "")
    ST = Delfile( FIC )
    Call CHECK_EQUAL( ST, 0 ) From AXUNIT

    # class doesn't exist => return 0
    ST = PULLOBJECT( "","","ZCELL3" )
    Call CHECK_EQUAL( ST, 0 ) From AXUNIT
End

# -----------------------ONE_TEST1 --------------------------------
# ###################################################################
Subprog ONE_TEST1( )

    ADXOVS = "QLFAR_83237"
    ADXOVF = "MYVALP"

    # the class has been invalidated
    # in INVALIDATE0

    Local Instance IS Using ZCELL2
    Local Integer ST

    ST = filinfo(filpath("STC", "ZCELL2","adx", ""), 7)
    Call CHECK_NOTEQUAL( ST, -20 ) From AXUNIT
    Call CHECK_NOTEQUAL( ST, 0 ) From AXUNIT
    Call CHECK_EQUAL( ST, 387 ) From AXUNIT

    IS = NewInstance ZCELL2
    IS.NO = 1
    IS.NAME = "toto"
    Call CHECK_EQUAL( IS.NO, 1 ) From AXUNIT
    Call CHECK_EQUAL( IS.NAME, "toto" ) From AXUNIT

    FreeInstance IS
End

# -----------------------INVALIDATE1 --------------------------------
# ###################################################################
Subprog INVALIDATE1( )

    ADXOVS = "QLFAR_83237"
    ADXOVF = "MYVALP"

    Local Instance IS Using ZCELL2
    Local Integer ST

    ST = PULLOBJECT( "","","ZCELL2" )
    Call CHECK_EQUAL( ST, 1 ) From AXUNIT

    # validation on new
    IS = NewInstance ZCELL2
    IS.NO = 1
    IS.NAME = "toto"
    Call CHECK_EQUAL( IS.NO, 1 ) From AXUNIT
    Call CHECK_EQUAL( IS.NAME, "toto" ) From AXUNIT

    FreeInstance IS

End

# -----------------------NO FILE --------------------------------
# ###################################################################
Subprog NOFILE( )

    ADXOVS = "QLFAR_83237"
    ADXOVF = "MYVALP"

    Local Instance IS Using ZCELL3
    Local Integer ST
    Local Char FIC(255)

    # validation on new
    IS = NewInstance ZCELL3
    IS.NO = 1
    IS.NAME = "toto"
    Call CHECK_EQUAL( IS.NO, 1 ) From AXUNIT
    Call CHECK_EQUAL( IS.NAME, "toto" ) From AXUNIT

    FreeInstance IS

End


$INV1
Infbox num$(errn)
Resume

# -----------------------FULL_TEST --------------------------------
# ###################################################################
Subprog FULL_TEST( )

Local Instance IS1 Using ZCELL1
Local Instance IS2 Using ZCELL2
Local Instance IS3 Using ZCELL3
Local Instance IS4 Using ZCELL4
Local Instance IS5 Using ZCELL5
Local Instance IS6 Using ZCELL6
Local Instance IS7 Using ZCELL7
Local Instance IS8 Using ZCELL8
Local Instance IS9 Using ZCELL9
Local Instance IS10 Using ZCELL10
Local Instance IS11 Using ZCELL11
Local Instance IS12 Using ZCELL12
Local Instance IS13 Using ZCELL13
Local Instance IS14 Using ZCELL14
Local Instance IS15 Using ZCELL15
Local Instance IS16 Using ZCELL16
Local Instance IS17 Using ZCELL17
Local Instance IS18 Using ZCELL18
Local Instance IS19 Using ZCELL19
Local Instance IS20 Using ZCELL20
Local Instance IS21 Using ZCELL21
Local Instance IS22 Using ZCELL22
Local Instance IS23 Using ZCELL23
Local Instance IS24 Using ZCELL24
Local Instance IS25 Using ZCELL25
Local Instance IS26 Using ZCELL26
Local Instance IS27 Using ZCELL27
Local Instance IS28 Using ZCELL28
Local Instance IS29 Using ZCELL29
Local Instance IS30 Using ZCELL30
Local Instance IS31 Using ZCELL31
Local Instance IS32 Using ZCELL32
Local Instance IS33 Using ZCELL33
Local Instance IS34 Using ZCELL34
Local Instance IS35 Using ZCELL35
Local Instance IS36 Using ZCELL36
Local Instance IS37 Using ZCELL37
Local Instance IS38 Using ZCELL38
Local Instance IS39 Using ZCELL39
Local Instance IS40 Using ZCELL40
Local Instance IS41 Using ZCELL41
Local Instance IS42 Using ZCELL42
Local Instance IS43 Using ZCELL43
Local Instance IS44 Using ZCELL44
Local Instance IS45 Using ZCELL45
Local Instance IS46 Using ZCELL46
Local Instance IS47 Using ZCELL47
Local Instance IS48 Using ZCELL48
Local Instance IS49 Using ZCELL49
Local Instance IS50 Using ZCELL50
Local Instance IS51 Using ZCELL51
Local Instance IS52 Using ZCELL52
Local Instance IS53 Using ZCELL53
Local Instance IS54 Using ZCELL54
Local Instance IS55 Using ZCELL55
Local Instance IS56 Using ZCELL56
Local Instance IS57 Using ZCELL57
Local Instance IS58 Using ZCELL58
Local Instance IS59 Using ZCELL59
Local Instance IS60 Using ZCELL60
Local Instance IS61 Using ZCELL61
Local Instance IS62 Using ZCELL62
Local Instance IS63 Using ZCELL63
Local Instance IS64 Using ZCELL64
Local Instance IS65 Using ZCELL65
Local Instance IS66 Using ZCELL66
Local Instance IS67 Using ZCELL67
Local Instance IS68 Using ZCELL68
Local Instance IS69 Using ZCELL69
Local Instance IS70 Using ZCELL70
Local Instance IS71 Using ZCELL71
Local Instance IS72 Using ZCELL72
Local Instance IS73 Using ZCELL73
Local Instance IS74 Using ZCELL74
Local Instance IS75 Using ZCELL75
Local Instance IS76 Using ZCELL76
Local Instance IS77 Using ZCELL77
Local Instance IS78 Using ZCELL78
Local Instance IS79 Using ZCELL79
Local Instance IS80 Using ZCELL80
Local Instance IS81 Using ZCELL81
Local Instance IS82 Using ZCELL82
Local Instance IS83 Using ZCELL83
Local Instance IS84 Using ZCELL84
Local Instance IS85 Using ZCELL85
Local Instance IS86 Using ZCELL86
Local Instance IS87 Using ZCELL87
Local Instance IS88 Using ZCELL88
Local Instance IS89 Using ZCELL89
Local Instance IS90 Using ZCELL90
Local Instance IS90 Using ZCELL90
Local Instance IS91 Using ZCELL91
Local Instance IS92 Using ZCELL92
Local Instance IS93 Using ZCELL93
Local Instance IS94 Using ZCELL94
Local Instance IS95 Using ZCELL95
Local Instance IS96 Using ZCELL96
Local Instance IS97 Using ZCELL97
Local Instance IS98 Using ZCELL98
Local Instance IS99 Using ZCELL99
Local Instance IS100 Using ZCELL100


IS10 = NewInstance ZCELL10
IS10.NO = 1
IS10.NAME = "toto"
Call CHECK_EQUAL( IS10.NO, 1 ) From AXUNIT
Call CHECK_EQUAL( IS10.NAME, "toto" ) From AXUNIT

FreeInstance IS10

IS50 = NewInstance ZCELL50
IS50.NO = 1
IS50.NAME = "toto"
Call CHECK_EQUAL( IS50.NO, 1 ) From AXUNIT
Call CHECK_EQUAL( IS50.NAME, "toto" ) From AXUNIT

FreeInstance IS50

IS80 = NewInstance ZCELL80
IS80.NO = 1
IS80.NAME = "toto"
Call CHECK_EQUAL( IS80.NO, 1 ) From AXUNIT
Call CHECK_EQUAL( IS80.NAME, "toto" ) From AXUNIT

FreeInstance IS80

IS100 = NewInstance ZCELL100
IS100.NO = 1
IS100.NAME = "toto"
Call CHECK_EQUAL( IS100.NO, 1 ) From AXUNIT
Call CHECK_EQUAL( IS100.NAME, "toto" ) From AXUNIT

FreeInstance IS100
End

# -----------------------PUSHSCRIPT --------------------------------
# ###################################################################
Subprog TSTPUSHSCRIPT( )
Local Integer ST

ST = filexist("","","ZPUSHINDEX")
Call CHECK_EQUAL( ST, 0 ) From AXUNIT

ST = PUSHSCRIPT( "", "", "ZPUSHINDEX" )
Call CHECK_EQUAL( ST, 1 ) From AXUNIT

ST = filexist("","","ZPUSHINDEX")
Call CHECK_EQUAL( ST, 1 ) From AXUNIT

ST = PUSHSCRIPT( "", "", "ZPUSHINDEX" )
Call CHECK_EQUAL( ST, 0 ) From AXUNIT


End

# -----------------------PULLSCRIPT --------------------------------
# ###################################################################
Subprog TSTPULLSCRIPT( )
Local Integer ST

ST = filexist( "","","QLFAR_83237")
Call CHECK_EQUAL( ST, 1 ) From AXUNIT

# script is loaded -> -1
ST = PULLSCRIPT("","","QLFAR_83237")
Call CHECK_EQUAL( ST, -1 ) From AXUNIT

# pull script does nt work with a loaded script
ST = filexist( "","","QLFAR_83237")
Call CHECK_EQUAL( ST, 1 ) From AXUNIT

# script exist and try to unload but it can't
ST = PUSHSCRIPT("","","QLFAR_83237")
Call CHECK_EQUAL( ST, -1 ) From AXUNIT

ST = filexist( "","","QLFAR_83237")
Call CHECK_EQUAL( ST, 1 ) From AXUNIT



End


# -----------------------VALIDATION- --------------------------------
# ###################################################################
Funprog MYVALP( CL )
Value Char CL()
Local Integer TYP
Local Char VV(250)
Local Char RS(250)

VV = "valstc -p"-nomap(0)-CL
System RS = VV
TYP = val(RS)
If (TYP = 0)
    ADXOVE = RS
Endif
End TYP


# -----------------------CREATE_TEST--------------------------------
# ###################################################################
Subprog CREATE_TEST( )

Local Integer I
Local Char STC(255)

For I = 1 To 100
    STC = filpath("STC","ZCELL"+num$(I),"stc", "")

    Openo STC Using [FST]
    Wrseq "#<AdxTL>@(#)4.0.0.0 $Revision$" Using [FST]
    Wrseq "Integer NO" Using [FST]
    Wrseq "Char NAME(20)" Using [FST]
    Wrseq "INSTANCE NXCELL Using ZCELL"+num$(I) Using [FST]
    Wrseq "" Using [FST]
    Wrseq "%%" Using [FST]
    Wrseq " " Using [FST]
    Wrseq "METHOD CONSTRUCTOR( )" Using [FST]
    Wrseq "" Using [FST]
    Wrseq "End" Using [FST]
    Wrseq "" Using [FST]
    Openo Using [FST]
Next

End

# -----------------------DELETE_TEST--------------------------------
# ###################################################################
Subprog DELETE_TEST( )

Local Integer I

    Local Char FIC(250)
    Local Integer I,J
For I = 1 To 100
    FIC = filpath("STC","ZCELL"+num$(I),"stc", "")
    J = Delfile( FIC )
    FIC = filpath("STC","ZCELL"+num$(I),"adx", "")
    J = Delfile( FIC )

    System FIC= "archive -d"-nomap(0)-"-o -e"-'"ZCELL'+num$(I)+'"'
Next
End
