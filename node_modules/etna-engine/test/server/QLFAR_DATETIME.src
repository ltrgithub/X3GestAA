#<AdxTL>@(#)7.0.0.0 $Revision$
Local Clbfile RESULT
RESULT=func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_DATETIME_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


#**
#* The main entry point of the unit test suite for Requirement 69072
#*
#* @see
#* <a href="http://dotat.at/tmp/ISO_8601-2004_E.pdf">International standart for representation of date and time </a>
#*!
Funprog TESTSUITE()
Call ADD_TESTCASE("TC_DECL", "DECL-Datetime declaration", 2) From AXUNIT
Call ADD_TESTCASE("TC_GDATETIME", "GDATETIME$ -Function ", 6) From AXUNIT
Call ADD_TESTCASE("TC_DATETIME", "DATETIME$-Function", 3) From AXUNIT
Call ADD_TESTCASE("TC_NUM", "NUM$-Function", 1) From AXUNIT
Call ADD_TESTCASE("TC_OP_COMP", "OP_COMP-Comparison of datetimes", 9) From AXUNIT
Call ADD_TESTCASE("TC_OP_OPERATIONS", "OP_OPERATIONS operations on datetimes", 7) From AXUNIT
Call ADD_TESTCASE("TC_OP_LOGICAL", "OP_LOGICAL-Logical operations on datetimes", 4) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("REQ-69072", "Datetime GMT")

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume


Subprog TC_DECL
Integer EX
Onerrgo ERROR
Local Datetime MYDATE

Call CHECK_NOTEQUAL(dim(MYDATE),-1) From AXUNIT
Call CHECK_EQUAL(type(MYDATE),526) From AXUNIT

End

Subprog TC_GDATETIME
Integer EX
Onerrgo ERROR

Local Datetime MYDATE
Local Char ONLYDATE(20)
Local Char ONLYTIME(20)
Local Char COMPLETEDATE(20)
Local Char BADDATE(20)
Local Char GOT(25)
Local Char EXPECT(25)
ONLYDATE="2011-12-05"
ONLYDATEZ="2011-12-05"+"Z"
ONLYTIME="09:30:15Z"
COMPLETEDATE="2011-12-05T09:30:15Z"


#Date nulle
MYDATE=gdatetime$("")
GOT=num$(MYDATE)
EXPECT="0000-00-00T00:00:00Z"
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT


EXPECT=ONLYDATE+"T00:00:00"+"Z"
dbgetna
MYDATE=gdatetime$(ONLYDATEZ)
GOT= num$(MYDATE)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT

EXPECT=COMPLETEDATE
MYDATE=gdatetime$(COMPLETEDATE)
GOT= num$(MYDATE)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT

BADDATE="2011-15-05T09:30:15Z"
EXPECT="0000-00-00T00:00:00Z"

MYDATE=gdatetime$(BADDATE)
GOT= num$(MYDATE)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT

BADDATE="15-05-2011T09:30:15Z"

MYDATE=gdatetime$(BADDATE)
GOT= num$(MYDATE)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT


BADDATE="n'importequoi"
MYDATE=gdatetime$(BADDATE)
GOT= num$(MYDATE)
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT
End

Subprog TC_DATETIME
Integer EX
Onerrgo ERROR

Local Datetime CURRENTDTM
Local Char DATETMSTR(25)

CURRENTDTM=datetime$
DATETMSTR=num$(CURRENTDTM)
Local Char TOKEN(10)

Local Integer DATETMY, DATETMM, DATETMD, DATEY, DATEM, DATED

TOKEN=left$(DATETMSTR,4)
Local Integer DATETMY
DATETMY=val(TOKEN)
TOKEN=mid$(DATETMSTR,6,2)
DATETMM=val(TOKEN)
TOKEN=mid$(DATETMSTR,9,2)
DATETMD=val(TOKEN)

Local Date TODAY
Local Char TODAYSTR(20)
TODAY=date$
TODAYSTR=num$(TODAY)

Local Integer DATEY
DATEY=year(TODAY)
Local Integer DATEM
DATEM=month(TODAY)
Local Integer DATED
DATED=day(TODAY)
Local Integer GOT
GOT=evalue("DATETMY=DATEY | DATETMY=DATEY+1 | DATETMY=DATEY-1")
Call CHECK_TRUE(GOT) From AXUNIT
GOT=evalue("DATETMM=DATEM | DATETMM=DATEM+1 | DATETMM=DATEM-1")
Call CHECK_TRUE (GOT) From AXUNIT
GOT=evalue("DATETMD=DATED | DATETMD=DATED+1 | DATETMD=DATED-1")
Call CHECK_TRUE (GOT) From AXUNIT



End

Subprog TC_NUM
Integer EX
Onerrgo ERROR

Local Datetime MYDATETM
Local Char DATETMSTR(25)
MYDATETM=datetime$
DATETMSTR=num$(MYDATETM)
Local Integer GOT,EXPECT
EXPECT=1 #pat retourne 1 si la chaîne est conforme au modèle
GOT=pat(DATETMSTR,"####-##-##T##:##:##Z")
Call CHECK_EQUAL(GOT,EXPECT) From AXUNIT
End



Subprog TC_OP_COMP
Integer EX
Onerrgo ERROR

Local Datetime DATE1,DATE2

DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE2=gdatetime$("2012-02-01T05:07:08Z")
Call CHECK_TRUE(DATE1=DATE1) From AXUNIT
Call CHECK_TRUE(DATE2<>DATE1) From AXUNIT
Call CHECK_TRUE(DATE1<>DATE2) From AXUNIT
Call CHECK_TRUE(DATE2>DATE1) From AXUNIT
Call CHECK_TRUE(DATE1<DATE2) From AXUNIT
Call CHECK_TRUE(DATE2>=DATE1) From AXUNIT
Call CHECK_TRUE(DATE2>=DATE2) From AXUNIT
Call CHECK_TRUE(DATE1<=DATE1) From AXUNIT
Call CHECK_TRUE(DATE1<=DATE2) From AXUNIT

End

Subprog TC_OP_OPERATIONS
Integer EX
Onerrgo ERROR

Local Datetime DATE1,DATE2

#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 += 1
#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 -= 1
#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 *= 1
#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 /= 1
#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 =mod(DATE1,1)
#Operation not allowed :
EX=10
DATE1=gdatetime$("2012-01-01T05:07:08Z")
DATE1 =DATE1^2
#Operation not allowed :
EX=10
DATE1=abs(DATE1)
End

Subprog TC_OP_LOGICAL
Integer EX
Onerrgo ERROR

Local Datetime DATE1
Local Integer RESULT

DATE1=gdatetime$("2012-01-01T05:07:08Z")
#Operation not allowed :
EX=10
RESULT = DATE1 and DATE1
#Operation not allowed :
EX=10
RESULT = DATE1 or DATE1
#Operation not allowed :
EX=10
RESULT = DATE1 xor DATE1
#Operation not allowed :
EX=10
RESULT = !DATE1

End
