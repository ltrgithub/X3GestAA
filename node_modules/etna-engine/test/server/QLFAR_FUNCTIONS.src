#<AdxTL>@(#)0.0.0.0 $Revision$

Call OUVRE_TRACE("QLFAR_FUNCTIONS") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_FUNCTIONS_"+GUSER
Call LEC_TRACE From LECFIC

End

Funprog TESTSUITE_()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("FUNCTIONS", "FUNCTIONS") From AXUNIT
Call ADD_TESTCASE("TC_FIND","Function find()",1) From AXUNIT
Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT


Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("FUNCTIONS", "FUNCTIONS") From AXUNIT

#Classic functions :
Call ADD_TESTCASE("TC_ABS", "Function abs()", 4) From AXUNIT
Call ADD_TESTCASE("TC_MOD", "Function mod()", 2) From AXUNIT
Call ADD_TESTCASE("TC_RND", "Function rnd()", 2) From AXUNIT
Call ADD_TESTCASE("TC_SGN", "Function sgn()", 3) From AXUNIT
Call ADD_TESTCASE("TC_SQR", "Function sqr()", 2) From AXUNIT

#Truncating functions :
Call ADD_TESTCASE("TC_AR2", "Function ar2()", 3) From AXUNIT
Call ADD_TESTCASE("TC_ARR", "Function arr()", 4) From AXUNIT
Call ADD_TESTCASE("TC_FIX", "Function fix()", 2) From AXUNIT
Call ADD_TESTCASE("TC_INT", "Function fix()", 2) From AXUNIT

#String functions :
Call ADD_TESTCASE("TC_ASCII","Function ascii()", 2) From AXUNIT
Call ADD_TESTCASE("TC_LEN","Function len()", 3) From AXUNIT
Call ADD_TESTCASE("TC_PARSE","Function parse()", 2) From AXUNIT
Call ADD_TESTCASE("TC_PAT","Function pat()", 19) From AXUNIT
Call ADD_TESTCASE("TC_VAL","Function val()", 9) From AXUNIT

#Date functions :
Call ADD_TESTCASE("TC_DAY","Function day()", 5) From AXUNIT
Call ADD_TESTCASE("TC_DAYN","Function dayn()", 2) From AXUNIT
Call ADD_TESTCASE("TC_MONTH","Function month()", 3) From AXUNIT
Call ADD_TESTCASE("TC_NDAY","Function nday()", 3) From AXUNIT
Call ADD_TESTCASE("TC_WEEK","Function week()", 2) From AXUNIT
Call ADD_TESTCASE("TC_YEAR","Function year()", 2) From AXUNIT

#Operators :
Call ADD_TESTCASE("TC_AND","operator and",4) From AXUNIT
Call ADD_TESTCASE("TC_NOT","operator not",2) From AXUNIT
Call ADD_TESTCASE("TC_OR","operator or",4) From AXUNIT
Call ADD_TESTCASE("TC_XOR","operator xor",4) From AXUNIT
Call ADD_TESTCASE("TC_ADD","operator +",5) From AXUNIT
Call ADD_TESTCASE("TC_SUB","operator -",5) From AXUNIT
Call ADD_TESTCASE("TC_MUL","operator *",6) From AXUNIT
Call ADD_TESTCASE("TC_DIV","operator /",1) From AXUNIT
Call ADD_TESTCASE("TC_POW","operator ^",3) From AXUNIT

#Arithmetics functions
Call ADD_TESTCASE("TC_ANP","Function anp()",1) From AXUNIT
Call ADD_TESTCASE("TC_CNP","Function cnp()",1) From AXUNIT
Call ADD_TESTCASE("TC_FAC","Function fac()",1) From AXUNIT

#Statistics functions
Call ADD_TESTCASE("TC_AVG","Function avg()",3) From AXUNIT
Call ADD_TESTCASE("TC_FIND","Function find()",15) From AXUNIT
Call ADD_TESTCASE("TC_MAX","Function max()",2) From AXUNIT
Call ADD_TESTCASE("TC_MIN","Function min()",2) From AXUNIT
Call ADD_TESTCASE("TC_PRD","Function prd()",2) From AXUNIT
Call ADD_TESTCASE("TC_SIGMA","Function sigma()",4) From AXUNIT
Call ADD_TESTCASE("TC_SUM","Function sum()",3) From AXUNIT
Call ADD_TESTCASE("TC_UNI","Function uni()",2) From AXUNIT
Call ADD_TESTCASE("TC_VAR","Function var()",1) From AXUNIT

#Trigonometric functions
Call ADD_TESTCASE("TC_COS","Function cos()",0) From AXUNIT
Call ADD_TESTCASE("TC_SIN","Function sin()",0) From AXUNIT
Call ADD_TESTCASE("TC_TAN","Function tan()",0) From AXUNIT
Call ADD_TESTCASE("TC_ACOS","Function acos()",1) From AXUNIT
Call ADD_TESTCASE("TC_ASIN","Function asin()",1) From AXUNIT
Call ADD_TESTCASE("TC_ATAN","Function atan()",1) From AXUNIT
Call ADD_TESTCASE("TC_ACH","Function ach()",2) From AXUNIT
Call ADD_TESTCASE("TC_ASH","Function ash()",2) From AXUNIT
Call ADD_TESTCASE("TC_ATH","Function ath()",2) From AXUNIT
Call ADD_TESTCASE("TC_CH","Function ch()",2) From AXUNIT
Call ADD_TESTCASE("TC_SH","Function sh()",2) From AXUNIT
Call ADD_TESTCASE("TC_TH","Function th()",3) From AXUNIT

#Logarithmic functions
Call ADD_TESTCASE("TC_EXP","Function exp()",2) From AXUNIT
Call ADD_TESTCASE("TC_LN","Function ln()",1) From AXUNIT
Call ADD_TESTCASE("TC_LOG","Function log()",2) From AXUNIT

#String functions
Call ADD_TESTCASE("TC_LEFT","Function left$()",1) From AXUNIT
Call ADD_TESTCASE("TC_MID","Function mid$()",1) From AXUNIT
Call ADD_TESTCASE("TC_RIGHT","Function right$()",1) From AXUNIT
Call ADD_TESTCASE("TC_SEG","Function seg$()",1) From AXUNIT

Call ADD_TESTCASE("TC_CTRANS","Function ctrans()",1) From AXUNIT
Call ADD_TESTCASE("TC_TOLOWER","Function tolower()",1) From AXUNIT
Call ADD_TESTCASE("TC_TOUPPER","Function toupper()",1) From AXUNIT
Call ADD_TESTCASE("TC_VIREBLC","Function vireblc()",6) From AXUNIT

Call ADD_TESTCASE("TC_CHR","Function chr()",1) From AXUNIT
Call ADD_TESTCASE("TC_GRAPH","Function graph()",0) From AXUNIT
Call ADD_TESTCASE("TC_SPACE","Function space()",1) From AXUNIT
Call ADD_TESTCASE("TC_STRING","Function string()",2) From AXUNIT
Call ADD_TESTCASE("TC_INSTR","Function instr()",1) From AXUNIT

Call ADD_TESTCASE("TC_COP","Function cop$",0) From AXUNIT
Call ADD_TESTCASE("TC_DIR","Function dir$",0) From AXUNIT
Call ADD_TESTCASE("TC_FILCOM","Function filcom()",0) From AXUNIT
Call ADD_TESTCASE("TC_FILPATH","Function filpath()",0) From AXUNIT
Call ADD_TESTCASE("TC_FORMAT","Function format$()",0) From AXUNIT
Call ADD_TESTCASE("TC_GETENV","Function getenv$()",0) From AXUNIT
Call ADD_TESTCASE("TC_MESS","Function mess()",0) From AXUNIT
Call ADD_TESTCASE("TC_NUM","Function num$()",0) From AXUNIT
Call ADD_TESTCASE("TC_TIME","Function time$",0) From AXUNIT
Call ADD_TESTCASE("TC_TRTCOU","Function trtcou",0) From AXUNIT
Call ADD_TESTCASE("TC_VER","Function ver$()",0) From AXUNIT
Call ADD_TESTCASE("TC_ADDMONTH","Function addmonth()",0) From AXUNIT
Call ADD_TESTCASE("TC_AWEEK","Function aweek()",0) From AXUNIT
Call ADD_TESTCASE("TC_DATE","Function date$",0) From AXUNIT
Call ADD_TESTCASE("TC_EOMONTH","Function eomonth()",0) From AXUNIT
Call ADD_TESTCASE("TC_GDAT","Function gdat$()",0) From AXUNIT
Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume

Subprog CHECK_EVAL(STR, RESULT)
Call CHECK_EQUAL(evalue(STR), RESULT) From AXUNIT
End

Subprog TC_ABS
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("abs(3)", 3)
Call CHECK_EVAL("abs(-3)", 3)
Call CHECK_EVAL("abs(0)", 0)
EX = 10 : Call CHECK_EQUAL(abs('hello'), "!!!") From AXUNIT
End

Subprog TC_MOD
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("mod(100,7)"  ,2)
Call CHECK_EVAL("mod(-100,7)" ,5)
End

Subprog TC_RND
Integer EX,RESULT
Onerrgo ERROR
RESULT = rnd(10)
Call CHECK_EVAL("(RESULT >= 0) AND (RESULT < 10)",1)
RESULT = rnd(100)
Call CHECK_EVAL("(RESULT >= 0) AND (RESULT < 100)",1)
End

Subprog TC_SGN
Integer EX,RESULT
Onerrgo ERROR
Call CHECK_EVAL("sgn(0)", 0)
Call CHECK_EVAL("sgn(3)", 1)
Call CHECK_EVAL("sgn(-3)", -1)
End

Subprog TC_SQR
Integer EX,RESULT
Onerrgo ERROR
Call CHECK_EVAL("sqr(9)", 3)
Call CHECK_EVAL("sqr(49)", 7)
End

Subprog TC_AR2
Integer EX,RESULT
Onerrgo ERROR
Call CHECK_EVAL("ar2(1.234)", 1.23)
Call CHECK_EVAL("ar2(1.235)", 1.24)
Call CHECK_EVAL("ar2(1.236)", 1.24)
End

Subprog TC_ARR
Integer EX,RESULT
Onerrgo ERROR
Call CHECK_EVAL("arr(1.236, 1)", 1)
Call CHECK_EVAL("arr(1.236, 0.01)", 1.24)
Call CHECK_EVAL("arr(1.236, 0.05)", 1.25)
Call CHECK_EVAL("arr(1.236, 0)", 1.236)
End

Subprog TC_FIX
Integer EX,RESULT
Onerrgo ERROR
Call CHECK_EVAL("fix(pi)", 3)
Call CHECK_EVAL("fix(-pi)", -3)
End

Subprog TC_INT
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("int(pi)" , 3)
Call CHECK_EVAL("int(-pi)", -4)
End

Subprog TC_ASCII
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("ascii('a')", 97)
Call CHECK_EVAL("ascii('z')", 122)
End

Subprog TC_LEN
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("len('a')", 1)
Call CHECK_EVAL("len('ab')", 2)
Call CHECK_EVAL("len('abcdef')", 6)
End

Subprog TC_PARSE
Integer EX
Onerrgo ERROR
Call CHECK_EVAL("parse('date$')" , 0)
Call CHECK_EVAL("parse('date$$')", 5)
End

Subprog TC_PAT
Integer EX
Onerrgo ERROR
#le caractère '*' représente un nombre quelconque, éventuellement nul, de caractères,
#le caractère '?' représente exactement un caractère,
#le caractère '#' représente un chiffre,
#le caractère '!' représente une lettre.
Call CHECK_EVAL("pat('TC','*TC*')" , 1)
Call CHECK_EVAL("pat(' TC','*TC*')" , 1)
Call CHECK_EVAL("pat('TC ','*TC*')" , 1)
Call CHECK_EVAL("pat(' TC ','*TC*')" , 1)
Call CHECK_EVAL("pat('TC ','#TC')" , 0)
Call CHECK_EVAL("pat('TC ','1TC')" , 0)
Call CHECK_EVAL("pat('TC','##TC')" , 0)
Call CHECK_EVAL("pat('2TC','##TC')" , 0)
Call CHECK_EVAL("pat('23TC','##TC')" , 1)
Call CHECK_EVAL("pat('TC','TC##')" , 0)
Call CHECK_EVAL("pat('TC3','TC##')" , 0)
Call CHECK_EVAL("pat('TC34','TC##')" , 1)
Call CHECK_EVAL("pat('TC','!')" , 0)
Call CHECK_EVAL("pat('TC','!!')" , 1)
Call CHECK_EVAL("pat('T#','!!')" , 0)
Call CHECK_EVAL("pat('TC','!!!')" , 0)
Call CHECK_EVAL("pat('TC','?')" , 0)
Call CHECK_EVAL("pat('TC','??')" , 1)
Call CHECK_EVAL("pat('T#','??')" , 1)
Call CHECK_EVAL("pat('!TC5','?!!#')" , 1)
End

Subprog TC_VAL
Call CHECK_EVAL("val('3')", 3)
Call CHECK_EVAL("val('-3')", -3)
Call CHECK_EVAL("val('3.14')", 3.14)
Call CHECK_EVAL("val('6.02e23')", 6.02E23)
Call CHECK_EVAL("val('6.62e-34')", 6.62E-34)
Call CHECK_EVAL("val('10E3')", 10000)
Call CHECK_EVAL("val('1E37')", 1.00E37)
Call CHECK_EVAL("val(sum('1', '2', '3'))", 123)
Call CHECK_EVAL("val('-111+a111')", -111)
End

Subprog TC_DAY
Call CHECK_EVAL("day(gdat$(22,8,2011))", 22)
Call CHECK_EVAL("day(gdat$(1,12,2013))", 1)
Call CHECK_EVAL("day(gdat$(31,1,2014))", 31)
Call CHECK_EVAL("day$(gdat$(22,8,2011))", "lundi")
Call CHECK_EVAL("day$(1)", "lundi")
End

Subprog TC_DAYN
Call CHECK_EVAL("dayn(gdat$(21,8,2011))", 7)
Call CHECK_EVAL("dayn(gdat$(22,8,2011))", 1)
End

Subprog TC_MONTH
Call CHECK_EVAL("month(gdat$(22,8,2011))", 8)
Call CHECK_EVAL("month$(gdat$(22,7,2011))", "juillet")
Call CHECK_EVAL("month$(7)", "juillet")
End

Subprog TC_NDAY
Call CHECK_EVAL("nday(gdat$(4,1,1600))", 3)
Call CHECK_EVAL("nday(gdat$(2,6,2014))", 151363)
Call CHECK_EVAL("nday$(nday(date$))", date$)
End

Subprog TC_WEEK
Call CHECK_EVAL("week(gdat$(21,8,2011))", 33)
Call CHECK_EVAL("week(gdat$(22,8,2011))", 34)
End

Subprog TC_YEAR
Call CHECK_EVAL("year(gdat$(22,8,2011))", 2011)
Call CHECK_EVAL("year(date$) >= 2011", 1)
End

Subprog TC_AND
Call CHECK_EVAL("1 and 1", 1)
Call CHECK_EVAL("1 and 0", 0)
Call CHECK_EVAL("0 and 1", 0)
Call CHECK_EVAL("0 and 0", 0)
End

Subprog TC_NOT
Call CHECK_EVAL("not(1=1)", 0)
Call CHECK_EVAL("not(1=0)", 1)
End

Subprog TC_OR
Call CHECK_EVAL("1 or 1", 1)
Call CHECK_EVAL("1 or 0", 1)
Call CHECK_EVAL("0 or 1", 1)
Call CHECK_EVAL("0 or 0", 0)
End

Subprog TC_XOR
Call CHECK_EVAL("1 xor 1", 0)
Call CHECK_EVAL("1 xor 0", 1)
Call CHECK_EVAL("0 xor 1", 1)
Call CHECK_EVAL("0 xor 0", 0)
End

Subprog TC_ADD
Call CHECK_EVAL("2+3", 5)
Call CHECK_EVAL("(2+3)", 5)
Call CHECK_EVAL("'2'+'3'", '23')
Call CHECK_EVAL("gdat$(24,8,2011)+8", gdat$(1,9,2011))
Call CHECK_EVAL("8+gdat$(24,8,2011)", gdat$(1,9,2011))
End

Subprog TC_SUB
Call CHECK_EVAL("2-3", -1)
Call CHECK_EVAL("'2'-'3'", '2 3')
Call CHECK_EVAL("'2  '-'  3'", '2 3')
Call CHECK_EVAL("gdat$(1,9,2011)-8", gdat$(24,8,2011))
Call CHECK_EVAL("gdat$(1,9,2011)-gdat$(24,8,2011)", 8)
End

Subprog TC_MUL
Call CHECK_EVAL("2*3", 6)
Call CHECK_EVAL("2*(2+3)", 10)
Call CHECK_EVAL("2*3+4*5", 26)
Call CHECK_EVAL("2*3-4*5", -14)
Call CHECK_EVAL("2*(3+4)*5", 70)
Call CHECK_EVAL("2*(3-4)*5", -10)
End

Subprog TC_DIV
Call CHECK_EVAL("12/2", 6)
End

Subprog TC_POW
Call CHECK_EVAL("2^2", 4)
Call CHECK_EVAL("2^4", 16)
Call CHECK_EVAL("3^3", 27)
End

Subprog TC_ANP
Call CHECK_EVAL("anp(7,3)", 210)
End

Subprog TC_CNP
Call CHECK_EVAL("cnp(7,3)", 35)
End

Subprog TC_FAC
Call CHECK_EVAL("fac(6)", 720)
End

Subprog TC_AVG
Call CHECK_EQUAL(ar2(avg(3,5,2,7,9,8)), 5.67) From AXUNIT
Call CHECK_EQUAL(ar2(avg(2,3,4,5,6,7)), 4.50) From AXUNIT
Local Integer AI(1..),I
I+= 1 : AI(I) =  2
I+= 1 : AI(I) =  3
I+= 1 : AI(I) =  4
I+= 1 : AI(I) =  5
I+= 1 : AI(I) =  6
I+= 1 : AI(I) =  7
Call CHECK_EQUAL(ar2(avg(AI)), 4.50) From AXUNIT
End

Subprog TC_FIND
Integer EX
Onerrgo ERROR
Call CHECK_EQUAL(find(2,3,5,2,7,9,8), 3) From AXUNIT
Call CHECK_EQUAL(find(1,3,5,2,7,9,8), 0) From AXUNIT
Call CHECK_EQUAL(find(8,3,5,2,7,9,8), 6) From AXUNIT

Local Integer AI(1..6),I
I+= 1 : AI(I) =  3
I+= 1 : AI(I) =  5
I+= 1 : AI(I) =  2
I+= 1 : AI(I) =  7
I+= 1 : AI(I) =  9
I+= 1 : AI(I) =  8
Call CHECK_EQUAL(find(2,AI), 3) From AXUNIT
Call CHECK_EQUAL(find(1,AI), 0) From AXUNIT
Call CHECK_EQUAL(find(8,AI), 6) From AXUNIT

Local Integer BI(1..)
I=  1 : BI(I) =  3
I+= 1 : BI(I) =  5
I+= 1 : BI(I) =  2
I+= 1 : BI(I) =  7
I+= 1 : BI(I) =  9
I+= 1 : BI(I) =  8
Call CHECK_EQUAL(find(2,BI), 3) From AXUNIT
Call CHECK_EQUAL(find(1,BI), 0) From AXUNIT
Call CHECK_EQUAL(find(8,BI), 6) From AXUNIT

Local Integer CI(0..5)
I = 0 : CI(I) =  3
I+= 1 : CI(I) =  5
I+= 1 : CI(I) =  2
I+= 1 : CI(I) =  7
I+= 1 : CI(I) =  9
I+= 1 : CI(I) =  8
Call CHECK_EQUAL(find(2,CI), 3) From AXUNIT
Call CHECK_EQUAL(find(1,CI), 0) From AXUNIT
Call CHECK_EQUAL(find(8,CI), 6) From AXUNIT

Local Integer DI(0..)
I = 0 : DI(I) =  3
I+= 1 : DI(I) =  5
I+= 1 : DI(I) =  2
I+= 1 : DI(I) =  7
I+= 1 : DI(I) =  9
I+= 1 : DI(I) =  8
Call CHECK_EQUAL(find(2,DI), 3) From AXUNIT
Call CHECK_EQUAL(find(1,DI), 0) From AXUNIT
Call CHECK_EQUAL(find(8,DI), 6) From AXUNIT

End

Subprog TC_MAX
Call CHECK_EQUAL(max(3,5,2,7,9,8), 9) From AXUNIT
Local Integer AI(1..),I :
I+= 1 : AI(I) =  3
I+= 1 : AI(I) =  5
I+= 1 : AI(I) =  2
I+= 1 : AI(I) =  7
I+= 1 : AI(I) =  9
I+= 1 : AI(I) =  8
Call CHECK_EQUAL(max(AI), 9) From AXUNIT
End

Subprog TC_MIN
Call CHECK_EQUAL(min(3,5,2,7,9,8), 2) From AXUNIT
Local Integer AI(1..),I :
I+= 1 : AI(I) =  3
I+= 1 : AI(I) =  5
I+= 1 : AI(I) =  2
I+= 1 : AI(I) =  7
I+= 1 : AI(I) =  9
I+= 1 : AI(I) =  8
Call CHECK_EQUAL(min(AI), 2) From AXUNIT
End

Subprog TC_PRD
Call CHECK_EQUAL(prd(1,2,3,4,5), fac(5)) From AXUNIT
Local Integer AI(1..5),I :
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
Call CHECK_EQUAL(prd(AI), fac(5)) From AXUNIT
End

Subprog TC_SIGMA
Call CHECK_EQUAL(sigma(I=1, 10, I), 55) From AXUNIT
Call CHECK_EQUAL(ar2(sigma(I=1, 120, 1/I^2)), ar2(pi^2/6)) From AXUNIT
Call CHECK_EQUAL(sigma( I = 1, 26, chr$(64+I)), "ABCDEFGHIJKLMNOPQRSTUVWXYZ") From AXUNIT
Call CHECK_EQUAL(sigma( I = 1, 7, I*I), 140) From AXUNIT
End

Subprog TC_SUM
Call CHECK_EQUAL(sum(1,2,3,4,5,6,7), 28) From AXUNIT
Local Integer AI(1..),I :
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
Call CHECK_EQUAL(sum(AI), 28)  From AXUNIT
Call CHECK_EQUAL(sum('TC','_','SUM'), "TC_SUM") From AXUNIT
End

Subprog TC_UNI
#TODO Call CHECK_EQUAL(uni(1,2,3,4,5,6,7), 0)  From AXUNIT
#TODO Call CHECK_EQUAL(uni(1,1,3,4,5,6,7), 2)  From AXUNIT
#TODO Call CHECK_EQUAL(uni(1,2,1,4,5,6,7), 3)  From AXUNIT
#TODO Call CHECK_EQUAL(uni(1,2,3,4,5,6,1), 7)  From AXUNIT
Local Integer AI(1..),I :
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
Call CHECK_EQUAL(uni(AI), 0)  From AXUNIT
AI(4) = 1
Call CHECK_EQUAL(uni(AI), 4)  From AXUNIT
End

Subprog TC_VAR
#TODO Call CHECK_EQUAL(var(1,2,3,4,5,6,7), 4)  From AXUNIT
Local Integer AI(1..),I :
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
I+= 1 : AI(I) =  I
Call CHECK_EQUAL(var(AI), 4)  From AXUNIT
#TODO Call CHECK_EQUAL(var(5,10,15,20,25,30,35), 100)  From AXUNIT
End

Subprog TC_COS
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(ar2(pi), 3.14)  From AXUNIT
Call CHECK_EQUAL(cos(0), 1)  From AXUNIT
Call CHECK_EQUAL( ar2(cos(pi)), -1)  From AXUNIT
Call CHECK_EQUAL(ar2(cos(pi/2)), 0)  From AXUNIT
Call CHECK_EQUAL(ar2(cos(pi/3)), 0.5)  From AXUNIT
Call CHECK_EQUAL(ar2(cos(pi/4)), ar2(sqr(2)/2))  From AXUNIT
Call CHECK_EQUAL(ar2(cos(pi/6)), ar2(sqr(3)/2))  From AXUNIT

# On calcule désormais en degrés
[S]adxmda = 0
Call CHECK_EQUAL(cos(0) , 1)  From AXUNIT
Call CHECK_EQUAL(cos(90), 0)  From AXUNIT
Call CHECK_EQUAL(cos(45), sqr(2)/2)  From AXUNIT
Call CHECK_EQUAL(cos(30), sqr(3)/2)  From AXUNIT

End

Subprog TC_SIN
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(sin(0), 0) From AXUNIT
Call CHECK_EQUAL(sin(pi/2), 1) From AXUNIT
Call CHECK_EQUAL(sin(pi), 0) From AXUNIT
Call CHECK_EQUAL(sin((3*pi)/2), -1) From AXUNIT
Call CHECK_EQUAL(cos(pi/6)^2 + sin(pi/6)^2, 1) From AXUNIT


# On calcul désormais en degrés
[S]adxmda = 0
Call CHECK_EQUAL(sin(90), 1) From AXUNIT
Call CHECK_EQUAL(sin(45), sqr(2)/2) From AXUNIT
End

Subprog TC_TAN
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(tan(0), 0) From AXUNIT
Call CHECK_EQUAL(ar2(tan(pi/4)), 1) From AXUNIT
Call CHECK_EQUAL(ar2(tan(pi/6)), ar2(sin(pi/6)/cos(pi/6))) From AXUNIT

# On calcul désormais en degrés
[S]adxmda = 0
Call CHECK_EQUAL(tan(0), 0) From AXUNIT
Call CHECK_EQUAL(tan(45), 1) From AXUNIT
End

Subprog TC_ACH
Call CHECK_EQUAL(ach(1), 0) From AXUNIT
Call CHECK_EQUAL(ar2(ach(ch(3))), 3) From AXUNIT
End

Subprog TC_ASH
Call CHECK_EQUAL(ar2(ash(1)), 0.88) From AXUNIT
Call CHECK_EQUAL(ar2(ash(sh(3))), 3) From AXUNIT
End

Subprog TC_ATH
Call CHECK_EQUAL(ath(0),0) From AXUNIT
Call CHECK_EQUAL(ar2(ath(th(3))), 3) From AXUNIT
End

Subprog TC_CH
Call CHECK_EQUAL(ar2(ch(1)),1.54) From AXUNIT
Call CHECK_EQUAL(ch(0), 1) From AXUNIT
End

Subprog TC_SH
Call CHECK_EQUAL(ar2(sh(1)),1.18) From AXUNIT
Call CHECK_EQUAL(sh(0), 0) From AXUNIT
End

Subprog  TC_TH
Call CHECK_EQUAL(ar2(th(1)),0.76) From AXUNIT
Call CHECK_EQUAL(th(0), 0) From AXUNIT
Call CHECK_EQUAL(ar2(sh(3)/ch(3)), ar2(th(3))) From AXUNIT
End


Subprog TC_ACOS
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(ar2(acos(cos(pi/6))), ar2(pi/6)) From AXUNIT
End

Subprog TC_ASIN
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(ar2(asin(sin(pi/6))), ar2(pi/6)) From AXUNIT
End

Subprog TC_ATAN
# On calcul désormais en radians
[S]adxmda = 1
Call CHECK_EQUAL(ar2(atan(tan(pi/6))), ar2(pi/6)) From AXUNIT
End

Subprog TC_EXP
Call CHECK_EQUAL(exp(0), 1) From AXUNIT
Call CHECK_EQUAL(ar2(exp(1)), 2.72) From AXUNIT
End

Subprog TC_LN
Call CHECK_EQUAL(ar2(ln(exp(5))), 5) From AXUNIT
End

Subprog TC_LOG
Call CHECK_EQUAL(ar2(log(10^3)), 3) From AXUNIT
Call CHECK_EQUAL(ar2(log(10^8)), 8) From AXUNIT
End

Subprog TC_LEFT
Call CHECK_EVAL("left$('ABCDEFGH', 5)", "ABCDE")
End

Subprog TC_MID
Call CHECK_EVAL("mid$('ABCDEFGH', 4, 3)", "DEF")
End

Subprog TC_RIGHT
Call CHECK_EVAL("right$('ABCDEFGH', 4)", "DEFGH")
End

Subprog TC_SEG
Call CHECK_EVAL("seg$('ABCDEFGH', 3, 7)", "CDEFG")
End

Subprog TC_CTRANS
Call CHECK_EQUAL(ctrans('He**o','*','l'),"Hello")From AXUNIT
End

Subprog TC_TOLOWER
Call CHECK_EVAL("tolower('Hello')", "hello")
End

Subprog TC_TOUPPER
Call CHECK_EVAL("toupper('Hello')", "HELLO")
End

Subprog TC_VIREBLC
Call CHECK_EVAL("vireblc(' a b  c ', 0)", "a b  c ")
Call CHECK_EVAL("vireblc(' a b  c ', 1)", " a b  c")
Call CHECK_EVAL("vireblc(' a b  c ', 2)", "a b  c")
Call CHECK_EVAL("vireblc(' a b  c ', 3)", "a")
Call CHECK_EVAL("vireblc(' a b  c ', 4)", "abc")
Call CHECK_EVAL("vireblc(' a b  c ', 5)", " a b c ")
End

Subprog TC_CHR
Call CHECK_EVAL("chr$(97)", "a")
End

Subprog TC_GRAPH
Call CHECK_EQUAL(graph$(1), 'ﾖ') From AXUNIT
Call CHECK_EQUAL(graph$(3,1), 'ﾖﾖﾖ') From AXUNIT
End

Subprog TC_SPACE
Call CHECK_EVAL("space$(3)", "   ")
End

Subprog TC_STRING
Call CHECK_EVAL("string$(3, 97)", "aaa")
Call CHECK_EVAL("string$(3, 'ab')", "ababab")
End

Subprog TC_INSTR
Call CHECK_EVAL("instr(1, 'ABCDEF', 'CD')", 3)
End

Subprog TC_COP
Call CHECK_EQUAL(cop$, '') From AXUNIT
End

Subprog TC_DIR
#TODO
End

Subprog TC_FILCOM
#TODO
End

Subprog TC_FILPATH
#TODO
End

Subprog TC_FORMAT
Call CHECK_EQUAL(format$("N:9.2[ Euros]",0)," 0,00 Euros") From AXUNIT
Call CHECK_EQUAL(format$("Kv0:20X"," A B C "),"A B C ") From AXUNIT
Call CHECK_EQUAL(format$("Kv1:20X"," A B C ")," A B C") From AXUNIT
Call CHECK_EQUAL(format$("Kv5:20X"," A B C ")," A B C ") From AXUNIT
Call CHECK_EQUAL(format$("N:6.2",1234567.12),"******,**") From AXUNIT
Call CHECK_EQUAL(format$("N:3.2",123.456),"123,45") From AXUNIT
End

Subprog TC_GETENV
#TODO
End

Subprog TC_MESS
#TODO
End

Subprog TC_NUM
Call CHECK_EQUAL(num$(1), '1') From AXUNIT
Call CHECK_EQUAL(num$(1E37), 'num$(1E37)') From AXUNIT
End

Subprog TC_TIME
#TODO
End

Subprog TC_TRTCOU
Call CHECK_EQUAL(trtcou, 'QLFAR_FUNCTIONS') From AXUNIT
End

Subprog TC_VER
Call CHECK_EQUAL(ver$(0),"") From AXUNIT
Call CHECK_EQUAL(ver$(1),"") From AXUNIT
End

Subprog TC_ADDMONTH
Call CHECK_EVAL("addMonth(gdat$(22,8,2011), 1)", gdat$(22,9,2011))
End

Subprog TC_AWEEK
Call CHECK_EVAL("aweek(34, 2011)", gdat$(22,8,2011))
End

Subprog TC_DATE
#TODO
End

Subprog TC_EOMONTH
Call CHECK_EVAL("eomonth(gdat$(22,8,2011))", gdat$(31,8,2011))
End

Subprog TC_GDAT
Call CHECK_EVAL("gdat$(0,8,2011)", gdat$(31,7,2011))
Call CHECK_EVAL("gdat$(22,0,2011)", gdat$(22,12,2010))
End


Funprog SQUARE(X)
 Variable Decimal X
End X^2
