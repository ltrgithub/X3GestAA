#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_FLOWS") From LECFIC
Call TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_FLOWS_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()
Call TESTSUITE_START("FLOWS", "FLOWS") From AXUNIT
Call ADD_TESTCASE("GOSUB_TEST", "gosub test", 4) From AXUNIT
Call ADD_TESTCASE("IF_TEST", "if test", 2) From AXUNIT
Call ADD_TESTCASE("CASE_TEST", "case test", 5) From AXUNIT
Call ADD_TESTCASE("LOOP_TEST", "loop test", 7) From AXUNIT
#TODO Call ADD_TESTCASE("ERROR_TEST", "error test", 6) From AXUNIT
#Call ADD_TESTCASE("WRSEQ_TEST", "wrseq test", 1) From AXUNIT
Call ADD_TESTCASE("SCOPES_TEST", "scopes test", 3) From AXUNIT
Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FLOWS", "FLOWS")
End SUITE_RESULT

$SUB1
 Char SUBRES
 SUBRES = "A"
 Gosub SUB2
 SUBRES += "B"
 Gosub SUB2
 SUBRES += "C"
Return

$SUB2
  SUBRES += "D"
 Gosub SUB3
 SUBRES += "E"
Return

$SUB3
 SUBRES += "F"
Return

$SUB4
 If SUBRES = "A" Then SUBRES += "B" : Return : Endif
 SUBRES += "C"
Return

Subprog GOSUB_TEST()
Gosub SUB1
Call CHECK_EQUAL(SUBRES, "ADFEBDFEC") From AXUNIT
Gosub SUB3
Call CHECK_EQUAL(SUBRES, "ADFEBDFECF") From AXUNIT
SUBRES = "" : Gosub SUB4
Call CHECK_EQUAL(SUBRES, "C") From AXUNIT
SUBRES = "A" : Gosub SUB4
Call CHECK_EQUAL(SUBRES, "AB") From AXUNIT
End

Funprog IF_PROG(X)
 Value Integer X
 Char GOT
 GOT=""
 If X = 10 Then GOT += "A" Endif
 If X <> 10 Then GOT += "B" Endif
 If X = 10 Then GOT += "C" Else GOT += "D" Endif
 If X <> 10 Then GOT += "E" Else GOT += "F" Endif
 If X = 10 Then GOT += "G" Elsif X=10 Then GOT += "H" Else GOT += "I" Endif
 If X <> 10 Then GOT += "J" Elsif X=10 Then GOT += "K" Else GOT += "L" Endif
 If X <> 10 Then GOT += "M" Elsif X<>10 Then GOT += "N" Else GOT += "O" Endif
End GOT

Subprog IF_TEST()
Call CHECK_EQUAL(func IF_PROG(10), "ACFGKO") From AXUNIT
Call CHECK_EQUAL(func IF_PROG(5), "BDEIJM") From AXUNIT
End

Funprog CASE_PROG(X)
 Value Integer X
 Char GOT
 GOT=""
 Case X
 Endcase

Case X
When 10 GOT += "A"
Endcase

Case X
When 5,10 GOT += "B"
When 20,30 GOT += "C"
Endcase
End GOT

Funprog CASE_PROG2(X)
 Value Integer X
 Char GOT
 GOT=""
 Case X
 When 10 GOT += "A"
 When Default GOT += "B"
 Endcase

Case X
When Default GOT += "C"
 Endcase
End GOT

Subprog CASE_TEST()
Call CHECK_EQUAL(func CASE_PROG(10), "AB") From AXUNIT
Call CHECK_EQUAL(func CASE_PROG(20), "C") From AXUNIT
Call CHECK_EQUAL(func CASE_PROG(25), "") From AXUNIT
Call CHECK_EQUAL(func CASE_PROG2(10), "AC") From AXUNIT
Call CHECK_EQUAL(func CASE_PROG2(25), "BC") From AXUNIT
End

$ERROR_RESUME
Resume

$ERROR_END
End "Z"

$ERROR_RECURSE
#TODO CALLJS SYNC FAIL("Error during error") From "etna-engine/lib/helpers"
Resume

$ERROR_SUB
#TODO  CALLJS SYNC FAIL("T5") From "etna-engine/lib/helpers"
Return

#TODO
#Subprog ERROR_PROG(X)
# Value Integer X
# Char GOT
# GOT=""
# Onerrgo ERROR_RESUME
# If X = 1 Then GOT += "A": CALLJS SYNC FAIL("T1") From "etna-engine/lib/helpers" : GOT += "B": Endif
# Onerrgo ERROR_END
# If X = 2 Then GOT += "C": CALLJS SYNC FAIL("T2") From "etna-engine/lib/helpers" : GOT += "D": Endif
# Onerrgo
# If X = 3 Then GOT += "E": CALLJS SYNC FAIL("T3") From "etna-engine/lib/helpers" : GOT += "F": Endif
# Onerrgo ERROR_RECURSE
# If X = 4 Then GOT += "G": CALLJS SYNC FAIL("T4") From "etna-engine/lib/helpers" : GOT += "H": Endif
# Onerrgo
# If X = 5 Then GOT += "I": Gosub ERROR_SUB : GOT += "J": Endif
# GOT += "K"
#End GOT

$ERROR_UNHANDLED
 Call CHECK_EQUAL(ERROR_MESSAGE, "UNHANDLED ERROR", "ERROR") From AXUNIT
Resume

Subprog ERROR_TEST()
 Char ERROR_MESSAGE
 Onerrgo ERROR_UNHANDLED
 Call CHECK_EQUAL(func ERROR_PROG(0), "K", "ERROR") From AXUNIT
 Call CHECK_EQUAL(func ERROR_PROG(1), "ABK", "ERROR") From AXUNIT
 Call CHECK_EQUAL(func ERROR_PROG(2), "Z", "ERROR") From AXUNIT
 ERROR_MESSAGE = "UNHANDLED ERROR"
 Call CHECK_EQUAL(func ERROR_PROG(3), "???", "ERROR") From AXUNIT
 # Call CHECK_EQUAL(func ERROR_PROG(4), "???", "ERROR") from AXUNIT
 Call CHECK_EQUAL(func ERROR_PROG(5), "???", "ERROR") From AXUNIT
 ERROR_MESSAGE = ""
 Call CHECK_EQUAL(func ERROR_PROG(6), "K", "ERROR") From AXUNIT
End

Funprog FACT_R(N)
 Value Integer N
 If N > 1 End N * func FACT_R(N-1)
 Else End 1
Endif

Funprog FACT_W(N)
 Value Integer N
 Integer R
 R = 1
 While N > 1 : R *= N : N -= 1 Wend
End R

Funprog FACT_WB0(N)
 Value Integer N
 Integer R
 R = 1
 While N > 1 : R *= N : Break 0 : N -= 1 Wend
End R

Funprog FACT_WB1(N)
 Value Integer N
 Integer R
 R = 1
 While 1 : R *= N : Break N <= 1 : N -= 1 Wend
End R

Funprog FACT_U(N)
 Value Integer N
 Integer R
 R = 1
 Repeat R *= N : N -= 1 : Until N <= 1
End R

Funprog FACT_F(N)
 Value Integer N
 Integer R
 R = 1
 For I = 1 To N : R *= I : Next
End R

Funprog FACT_L(N)
 Value Integer N
 Integer R
 R = 1
 For I = 6,2,10 : R *= I : Next
End R

Subprog LOOP_TEST()
Call CHECK_EQUAL(func FACT_R(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_W(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_WB0(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_WB1(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_U(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_F(5), 120) From AXUNIT
Call CHECK_EQUAL(func FACT_L(5), 120) From AXUNIT
End

Funprog SCOPES_SUB(P1,P2)
Value Char P1, P2
Local Char LTEST
GTEST = P1
LTEST = P2
Call CHECK_EQUAL(LTEST, "D") From AXUNIT
End

Subprog SCOPES_TEST()
Global Char GTEST
Local Char LTEST

GTEST = "A"
LTEST = "B"
Call SCOPES_SUB("C", "D")
Call CHECK_EQUAL(GTEST, "C") From AXUNIT
Call CHECK_EQUAL(LTEST, "B") From AXUNIT
End

Subprog WRSEQ_TEST()
 Openo "/tmp/factorials.txt"
 Integer N
 N=1
 While N < 3 : Wrseq N, func FACT_R(N) : N += 1 : Wend
 Openo
End

Subprog LOP(N)
 Value Integer N
 Local Integer I
 I = N
 While I > 0
  I -= 1
 Wend
End I
