"use strict";
QUnit.module(module.id);

var syracuse = require('syracuse-main/lib/syracuse');
var util = require("etna-supervisor/lib/util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");


var runtime = require("etna-engine/lib/runtime/runtime");

var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("start", function(_) {
	var eps = adminHelper.getEndpoints(_, {});
	var epEtna;
	flows.some(_, eps, function(_, ep) {
	    if ("x3" === ep.protocol(_) && "etnaOracle" === ep.dataset(_)) {
	        epEtna = ep;
	        return true
	    }
	    return false;
	});

	var config =  (epEtna && epEtna.getEtnaConfig(_)) || {};
	var supervisor = require('etna-supervisor/lib/supervisor');
	var superv = supervisor.create(_,config);
	require("etna-engine/lib/runtime/variables").initStack(superv);
	ok(true,"start");
	start();
});

asyncTest("Local src", function(_) {
	var script = runtime.requireScript(_,"QLFAR_DECL"); 
	ok(typeof script !== undefined,"QLFAR_DECL");
	start();
});

asyncTest("Builtin", function(_) {
	var script = runtime.requireScript(_,"AXUNIT"); 
	ok(typeof script !== undefined,"AXUNIT");
	start();
});

asyncTest("Shared src", function(_) {
	var script = runtime.requireScript(_,"ASYRCONST"); 
	ok(typeof script !== undefined,"ASYRCONST");
	start();
});

asyncTest("stop tests",  function(_) {
	doStop = true;
	start();
});