"use strict";
var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var fs = require("fs");
var Parser = require("etna-engine/lib/parser").Parser;
var jsgen = require('etna-engine/lib/jsgen');

var glob = require('streamline/lib/globals');
var runtime = require("etna-engine/lib/runtime/runtime");

glob.context.x3frame={
	context:{
		messages:{
			200:"200"
		}}
};

function compile(source,expected) {
	try {
		var path = '.';
		var parsed = new Parser(source, path).parse();
		var transformed = jsgen.generate(parsed.node, path);
		console.log(transformed);
		ok(true == expected,"OK : "+source);
	} catch(e) {
		ok(false == expected,"NOK : "+source);
	}
}

asyncTest("attributes", function(_) {
	compile("INS1.C03P01.$isReadonly = [V]CST_ATRUE",true);
	compile("INS1.$isReadonly = [V]CST_ATRUE",true);
	compile("INS1.COL(0).$isReadonly = [V]CST_ATRUE",true);
	compile("INS1.COL(1).$isReadonly = [V]CST_ATRUE",true);
	compile("ATT = INS1.$isReadonly",true);
	compile("ASTATUS = fmet INS1.C03P01.ASETATTR('$isReadonly',[V]CST_ATRUE)",true);
	compile("ATTRIBUTE = fmet INS1.C03P01.AGETATTR('$isReadonly')",true);
	compile('Callmet INS1.COL.ASETCOLUMNATTR("C03P02","$isHidden"  ,[V]CST_AFALSE)',true);
	compile('Call CHECK_EQUAL(Fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadonly"),[V]CST_ATRUE) From AXUNIT',true);
	compile('INS1.COL(0).C03P02.$isReadonly = [V]CST_ATRUE',true);
	compile('Call CHECK_EQUAL(INS1.COL(0).C03P02.$isReadonly,[V]CST_AFALSE) From AXUNIT',true);

	compile("INS1.$isReadonly.PROP = [V]CST_ATRUE",false);

	start();
});


test("stop", function() {
	done = true;
	start();
});