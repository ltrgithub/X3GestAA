"use strict";
QUnit.module(module.id);

var bcd = require("etna-engine/lib/runtime/bcd");

function roundtrip(from, to, isZero) {
	//console.log(bcd.toString(bcd.fromString(from)))
	strictEqual(bcd.toString(bcd.fromString(from)), to == null ? from : to);
	if (!isZero) strictEqual(bcd.toString(bcd.fromString('-' + from)), '-' + (to == null ? from : to));
}

function testOp(op) {
	return function(s1, s2, result) {
		var v1 = bcd.fromString(s1);
		var v2 = bcd.fromString(s2);
		var r = bcd[op](v1, v2);
		strictEqual(bcd.toString(r), result);
	};
}

var add = testOp('add');
var multiply = testOp('multiply');
var divide = testOp('divide');

/*test('instanceof', 2, function() {
	ok(bcd.isBCD(bcd.ZERO), 'ZERO instanceof');
	ok(bcd.isBCD(bcd.ONE), 'ONE instanceof');
});
*/
test('constants', 7, function() {
	strictEqual(bcd.toString(bcd.ZERO), '0');
	strictEqual(bcd.toString(bcd.ONE), '1');
	strictEqual(bcd.toString(bcd.ONE_HALF), '0.5');
	strictEqual(bcd.toString(bcd.MIN_INT32), '-2147483648');
	strictEqual(bcd.toString(bcd.MAX_INT32), '2147483647');
	strictEqual(bcd.toString(bcd.MIN), '-9.99999999e79'); // odd scale - lose one digit?
	strictEqual(bcd.toString(bcd.MAX), '9.99999999e79'); // odd scale - lose one digit?
});

test('string roundtrip', 92, function() {
	// note: we lose one digit of precision when scale is odd because we track by pairs of digits rather than by digits.
	roundtrip('', '0', true);
	roundtrip('0', '0', true);
	roundtrip('1');
	roundtrip('10');
	roundtrip('100');
	roundtrip('1000');
	roundtrip('1000.1');
	roundtrip('1000.01');
	roundtrip('1000.001');
	roundtrip('123456789.000', '123456789');
	roundtrip('123456789.0000', '123456789');
	roundtrip('12345678901234567890123456789012');
	roundtrip('12345678901234567890.123456789012');
	roundtrip('123456789012345678901.23456789012', '123456789012345678901.2345678901'); // odd scale
	roundtrip('10000000000000000000000000000000');
	roundtrip('99999999999999999999999999999999');
	roundtrip('0.1');
	roundtrip('0.01');
	roundtrip('0.001');
	roundtrip('0.12345678901234567890123456789012');
	roundtrip('0.99999999999999999999999999999999');
	roundtrip('0.012345678901234567890123456789012', '0.01234567890123456789012345678901'); // odd scale
	roundtrip('0.0012345678901234567890123456789012');
	roundtrip('0.10000000000000000000000000000009', '0.10000000000000000000000000000009');
	roundtrip('0.100000000000000000000000000000009', '0.1'); // parse does not round but truncates instead!
	roundtrip('1e0', '1');
	roundtrip('1e1', '10');
	roundtrip('1e2', '100');
	roundtrip('1e3', '1000');
	roundtrip('1e-1', '0.1');
	roundtrip('1e-2', '0.01');
	roundtrip('1e-3', '0.001');
	roundtrip('1e31', '10000000000000000000000000000000');
	roundtrip('1e32', '1e32');
	roundtrip('1e33', '1e33');
	roundtrip('123456789012345678901234567890123', '1.234567890123456789012345678901e32'); // odd scale
	roundtrip('1234567890123456789012345678901234', '1.2345678901234567890123456789012e33');
	roundtrip('12345678901234567890123456789012345', '1.234567890123456789012345678901e34'); // odd scale
	roundtrip('1e-12', '0.000000000001');
	roundtrip('1e-13', '1e-13');
	roundtrip('1e-14', '1e-14');
	roundtrip('1.23456789012345678901234567890123e-12', '0.000000000001234567890123456789012345678901'); //odd scale
	roundtrip('1.23456789012345678901234567890123e-13', '1.2345678901234567890123456789012e-13');
	roundtrip('1.23456789012345678901234567890123e-14', '1.234567890123456789012345678901e-14'); // odd scale
	roundtrip('9.9999999999999999999999999999999e125', '9.9999999999999999999999999999999e125');
	roundtrip('9.9999999999999999999999999999999e-129', '9.9999999999999999999999999999999e-129');
	roundtrip('9.9999999999999999999999999999999e-130', '1e-129'); // odd scale
});

test('add', 16, function() {
	add('0', '0', '0');
	add('0', '1', '1');
	add('0', '-1', '-1');
	add('12345678901234567890123456789012', '87654321098765432109876543210987', '99999999999999999999999999999999');
	add('12345678901234567890123456789012', '87654321098765432109876543210988', '1e32');
	add('33333333333333333330000000000000', '00000000000000000004444444444444', '33333333333333333334444444444444');
	add('33333333333333333333000000000000', '00000000000000000004444444444444', '33333333333333333337444444444444');
	add('33333333333333333338000000000000', '00000000000000000004444444444444', '33333333333333333342444444444444');
	add('3333333333333333333800000000000000', '0000000000000000000444444444444522', '3.3333333333333333342444444444445e33');
	add('3333333333333333333800000000000000', '0000000000000000000444444444444577', '3.3333333333333333342444444444446e33');
	add('33333333333333333338000000000000', '00000000000000000004444444444445.22', '33333333333333333342444444444445');
	add('33333333333333333338000000000000', '00000000000000000004444444444445.77', '33333333333333333342444444444446');
	add('1e41', '1e9', '1e41');
	add('1e41', '1.000111000222e9', '1e41');
	add('1e41', '9.0e9', '1.0000000000000000000000000000001e41');
	add('1e41', '5.000111000222e9', '1.0000000000000000000000000000001e41');
});

test('multiply', 14, function() {
	multiply('0', '0', '0');
	multiply('0', '1', '0');
	multiply('-1', '1', '-1');
	multiply('1', '-1', '-1');
	multiply('-1', '-1', '1');
	multiply('42', '72', '3024');
	multiply('11111111111111111111111111111111', '3', '33333333333333333333333333333333');
	multiply('11111111111111111111111111111111', '9', '99999999999999999999999999999999');
	multiply('11111111111111111111111111111111', '9.000000000000000000000000000001', '1e32');
	multiply('11111111111111111111111111111111', '90.000000000000000000000000000001', '1e33');
	multiply('1e60', '1e64', '1e124');
	multiply('1e125', '1e-125', '1');
	multiply('1e125', '1e-130', '0.00001');
	multiply('1e-60', '1e-70', '1e-130');
});

test('div', 20, function() {
	divide('0', '1', '0');
	divide('-1', '1', '-1');
	divide('1', '-1', '-1');
	divide('-1', '-1', '1');
	divide('1', '2', '0.5');
	divide('1', '3', '0.33333333333333333333333333333333');
	divide('2', '3', '0.66666666666666666666666666666667');
	divide('10', '3', '3.333333333333333333333333333333'); // odd scale, lose one digit
	divide('20', '3', '6.666666666666666666666666666667'); // odd scale, lose one digit
	divide('100', '3', '33.333333333333333333333333333333');
	divide('200', '3', '66.666666666666666666666666666667');
	divide('3024', '42', '72');
	divide('33333333333333333333333333333333', '3', '11111111111111111111111111111111');
	divide('99999999999999999999999999999999', '9', '11111111111111111111111111111111');
	divide('1.0e32', '9.000000000000000000000000000001', '11111111111111111111111111111110'); // odd scale, lose one digit
	divide('1.0e33', '90.000000000000000000000000000001', '11111111111111111111111111111111');
	divide('1.0e124', '1e64', '1e60');
	divide('1', '1e-125', '1e125');
	divide('0.00001', '1e-130', '1e125');
	divide('1.0e-130', '1e-70', '1e-60');
});