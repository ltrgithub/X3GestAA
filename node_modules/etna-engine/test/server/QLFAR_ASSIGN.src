Call OUVRE_TRACE("QLFAR_ASSIGN") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_ASSIGN_"+GUSER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()
Callmet GACTX.ACTX_SET_LANISO("fr-FR")

Call TESTSUITE_START("ASSIGN", "ASSIGN") From AXUNIT
Call ADD_TESTCASE("TC_NUMBER","TC_NUMBER", 29) From AXUNIT
Call ADD_TESTCASE("TC_CHAR","TC_CHAR", 16) From AXUNIT
Call ADD_TESTCASE("TC_ERROR","TC_ERROR", 2) From AXUNIT

#Call ADD_TESTCASE("DEBUG","DEBUG", 5) From AXUNIT


Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "FUNCTIONS")
End SUITE_RESULT

$ERROR
Call CHECK_EQUAL(errn, EX)
EX = 0
Resume

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

Subprog DEBUG()
Integer EX
Onerrgo ERROR

Local Integer A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,I,AA(1..10)

Assign "AA(1)" With 111
Call CHECK_EQUAL(AA(1),111) From AXUNIT

Assign "AA(2)" With 112
Call CHECK_EQUAL(AA(2),112) From AXUNIT

Assign "AA(3)" With 113
Call CHECK_EQUAL(AA(3),113) From AXUNIT

Assign "AA(4)" With 114
Call CHECK_EQUAL(AA(4),114) From AXUNIT

Assign "AA(5)" With 115
Call CHECK_EQUAL(AA(5),115) From AXUNIT
End

Subprog TC_NUMBER()
Integer EX
Onerrgo ERROR

Local Integer A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,I,AA(1..10)


Call CHECK_EQUAL(A1,0) From AXUNIT
A1 = 1
Call CHECK_EQUAL(A1,1) From AXUNIT
Assign "A1" With 2
Call CHECK_EQUAL(A1,2) From AXUNIT
Assign "A"+num$(1) With 3
Call CHECK_EQUAL(A1,3) From AXUNIT
Assign "A1" With 10
Call CHECK_EQUAL(A1,10) From AXUNIT

Raz I
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT
I += 1
Assign "A"+num$(I) With I
Call CHECK_EQUAL(evalue("A"+num$(I)) ,I) From AXUNIT

AA(1) =11
Call CHECK_EQUAL(AA(1),11) From AXUNIT
Assign "AA(1)" With 110
Call CHECK_EQUAL(AA(1),110) From AXUNIT

AA(2) =12
Call CHECK_EQUAL(AA(2),12) From AXUNIT

Assign "AA(2)" With 120
Call CHECK_EQUAL(AA(2),120) From AXUNIT

Raz I
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT
I += 1
Assign "AA("+num$(I) + ")" With I
Call CHECK_EQUAL(evalue("AA("+num$(I) +")") ,I) From AXUNIT

End

Subprog TC_CHAR()
Integer EX
Onerrgo ERROR
Local Char B(26)
Local Char C(10)

Call CHECK_EQUAL(len(B),0) From AXUNIT
B = "A"
Call CHECK_EQUAL(len(B),1) From AXUNIT
Call CHECK_EQUAL(B,"A") From AXUNIT

Assign "B" With "AB"
Call CHECK_EQUAL(len(B),2) From AXUNIT
Call CHECK_EQUAL(B,"AB") From AXUNIT

Assign "B" With "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Call CHECK_EQUAL(len(B),26) From AXUNIT
Call CHECK_EQUAL(B,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") From AXUNIT


Call CHECK_EQUAL(len(C),0) From AXUNIT
Assign "C" With "A"
Call CHECK_EQUAL(len(C),1) From AXUNIT
Call CHECK_EQUAL(C,"A") From AXUNIT

Assign "C" With "123456789012345679801234567980"
Call CHECK_EQUAL(len(C),10) From AXUNIT
Call CHECK_EQUAL(C,"1234567890") From AXUNIT

Assign "C" With evalue("chr$(65)")
Call CHECK_EQUAL(len(C),1) From AXUNIT
Call CHECK_EQUAL(C,"A") From AXUNIT

Assign "C" With num$(evalue("ascii('A')"))
Call CHECK_EQUAL(len(C),2) From AXUNIT
Call CHECK_EQUAL(C,"65") From AXUNIT
End

Subprog TC_ERROR()
Integer EX
Onerrgo ERROR
#X3 creates the variable if is doesn't exist:
AX = 1
Call CHECK_EQUAL(AX,1) From AXUNIT
Assign "AX"  With 2
Call CHECK_EQUAL(AX,2) From AXUNIT
End
