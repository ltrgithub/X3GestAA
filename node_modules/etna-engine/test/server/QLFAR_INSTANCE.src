#<AdxTL>@(#)0.0.0.0 $Revision$
Call OUVRE_TRACE("QLFAR_TSTRING") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC

GTRACE = "QLFAR_TSTRING_"+GUSER
Call LEC_TRACE From LECFIC
End

#########################
$ERROR
Call CHECK_EQUAL(errn, EX)
EX = 0
Resume

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

Funprog TESTSUITE_()
Call SET_LOCALE("fr-FR") From ASYRQLF
Call TESTSUITE_START("TSTRING", "TSTRING") From AXUNIT
EX=0
Onerrgo ERROR

Local Clbfile  SUITE_RESULT

SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TSTRING", "TSTRING")
End SUITE_RESULT
#########################

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From ASYRQLF

Call TESTSUITE_START("TSTRING", "TSTRING") From AXUNIT
EX=0
Onerrgo ERROR 

##
Local Integer NBTEST
NBTEST = 5
#Call ADD_TESTCASE("ADOPAR","Read ADOPAR",NBTEST) From AXUNIT
NBTEST = 4
#Call ADD_TESTCASE("ACTIV","Read ACTIV",NBTEST) From AXUNIT
NBTEST = 0
Call ADD_TESTCASE("TESTACTX","CONTEXT",NBTEST) From AXUNIT
##
Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TSTRING", "TSTRING")
End SUITE_RESULT
#################################################################

Subprog  ADOPAR
Local Integer ASTATUS,SILENCE

If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ADOPAR [ADP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ADOPAR") From ASYRCOM : Endif
Call CHECK_EQUAL(dim(ADOPAR),-1)
Local Instance ADOPAR Using C_ADOPAR
Call CHECK_EQUAL(dim(ADOPAR),1)

If !SILENCE : Call TRACE("3 --> New Instance C_ADOPAR") From ASYRCOM : Endif

ADOPAR = NewInstance C_ADOPAR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read ADX;ARCDIR") From ASYRCOM : Endif
Read [ADP_]ADP0 = "ADX";"ARCDIR"
If !fstat
 If !SILENCE : Call TRACE("Call program read of ADOPAR") From ASYRCOM : Endif
 [L]ASTATUS = fmet ADOPAR.AREAD([ADP_]CHAPITRE,[ADP_]PARAM)
 Call CHECK_EQUAL([L]ASTATUS,0)
 Call CHECK_EQUAL(ADOPAR.CHAPITRE,[ADP_]CHAPITRE)
 Call CHECK_EQUAL(ADOPAR.PARAM,[ADP_]PARAM)
Endif

Close Local File [ADP_]
FreeGroup ADOPAR
End
#################################################################

Subprog ACTIV
Local Integer ASTATUS,SILENCE
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACTIV [ACV_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACTIV") From ASYRCOM : Endif
Call CHECK_EQUAL(dim(ACTIV),-1)

Local Instance ACTIV Using C_ACTIV
Call CHECK_EQUAL(dim(ACTIV),1)

If !SILENCE : Call TRACE("3 --> New Instance C_ACTIV") From ASYRCOM : Endif
ACTIV = NewInstance C_ACTIV AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACV_]CODACT ="ABI"
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACTIV") From ASYRCOM : Endif
 [L]ASTATUS = fmet ACTIV.AREAD([ACV_]CODACT)
  Call CHECK_EQUAL([L]ASTATUS,0)
  Call CHECK_EQUAL(ACTIV.CODACT,[ACV_]CODACT)
Endif
dbgetna(2000)
Infbox ACTIV.CODACT
Close Local File [ACV_]
FreeGroup ACTIV
End
#################################################################

Subprog TESTACTX
#dbgetna(5000)
Infbox "GACTX.USER"-GACTX.USER
#dbgetna(2000)

Infbox adxmother(0)


#Infbox "GACTX.AFOLD.ALANGDEF"-GACTX.AFOLD.ALANGDEF
End
