"use strict";
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var glob = require('streamline/lib/globals');
var runtime = require("etna-engine/lib/runtime/runtime");
var helper = require("etna-engine/test/fixtures/helper");

var script;
var superv;

function nanos(hr) {
	return hr[0] * 1e9 + hr[1];
}

asyncTest("start", function(_) {
	var supervisor = require('etna-supervisor/lib/supervisor');
	var config = require("etna-util/lib/nodeconfig").config;
	var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
	superv = supervisor.create(_, etnaConfig);
	require("etna-engine/lib/runtime/variables").initStack(superv);
	require("etna-supervisor/lib/builtins/ACTX").init(_, etnaConfig.session, superv);
	ok(true, "start");
	start();
});


asyncTest("TC_AREAD", function(_) {
	ok(true, "TC_AREAD 0");
	var superv = glob.context.x3frame.context.superv;
	var instance = superv.newInstance(_, "ADOPAR");
	instance.AREAD(_, "SUP", "FMTDAT");

	var chapitre = instance.get(_, "CHAPITRE");
	strictEqual(chapitre, "SUP");

	var max = 100;
	var hrtime = process.hrtime();
	for (var i = 0; i < max; i++) {
		instance.AREAD(_, "SUP", "FMTDAT");
	}
	var diff = process.hrtime(hrtime);
	ok(true, "AREAD=" + Math.floor(nanos(diff) / max) + " ns, " + Math.floor(nanos(diff) / (1e3 * max)) + " us, " + Math.floor(nanos(diff) / (1e6 * max)) + " ms");

	start();
});

asyncTest("stop", function() {
	doStop = true;
	ok(true, "stop");
	start();
});