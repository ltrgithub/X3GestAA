"use strict";
QUnit.module(module.id);

var bcd = require("etna-engine/lib/runtime/bcd");

function roundtrip(from, to, isZero) {
	strictEqual(bcd.toString(bcd.fromString(from)), to == null ? from : to)
	if (!isZero) strictEqual(bcd.toString(bcd.fromString('-' + from)), '-' + (to == null ? from : to));
}
function add(s1, s2, result) {
	var v1 = bcd.fromString(s1);
	var v2 = bcd.fromString(s2);
	var r = bcd.add(v1, v2);
	strictEqual(bcd.toString(r), result);
}

test('string roundtrip', 88, function() {
	// note: we lose one digit of precision when scale is odd because we track by pairs of digits rather than by digits.
	roundtrip('', '0', true);
	roundtrip('0', '0', true);
	roundtrip('1');
	roundtrip('10');
	roundtrip('100');
	roundtrip('1000');
	roundtrip('1000.1');
	roundtrip('1000.01');
	roundtrip('1000.001');
	roundtrip('12345678901234567890123456789012');
	roundtrip('12345678901234567890.123456789012');
	roundtrip('123456789012345678901.23456789012', '123456789012345678901.2345678901'); // odd scale
	roundtrip('10000000000000000000000000000000');
	roundtrip('99999999999999999999999999999999');
	roundtrip('0.1');
	roundtrip('0.01');
	roundtrip('0.001');
	roundtrip('0.12345678901234567890123456789012');
	roundtrip('0.99999999999999999999999999999999');
	roundtrip('0.012345678901234567890123456789012', '0.01234567890123456789012345678901'); // odd scale
	roundtrip('0.0012345678901234567890123456789012');
	roundtrip('0.10000000000000000000000000000009', '0.10000000000000000000000000000009');
	roundtrip('0.100000000000000000000000000000009', '0.1'); // parse does not round but truncates instead!
	roundtrip('1e0', '1');
	roundtrip('1e1', '10');
	roundtrip('1e2', '100');
	roundtrip('1e3', '1000');
	roundtrip('1e-1', '0.1');
	roundtrip('1e-2', '0.01');
	roundtrip('1e-3', '0.001');
	roundtrip('1e31', '10000000000000000000000000000000');
	roundtrip('1e32', '1.0e32');
	roundtrip('1e33', '1.0e33');
	roundtrip('123456789012345678901234567890123', '1.234567890123456789012345678901e32'); // odd scale
	roundtrip('1234567890123456789012345678901234', '1.2345678901234567890123456789012e33');
	roundtrip('12345678901234567890123456789012345', '1.234567890123456789012345678901e34'); // odd scale
	roundtrip('1e-12', '0.000000000001');
	roundtrip('1e-13', '1.0e-13');
	roundtrip('1e-14', '1.0e-14');
	roundtrip('1.23456789012345678901234567890123e-12', '0.000000000001234567890123456789012345678901'); //odd scale
	roundtrip('1.23456789012345678901234567890123e-13', '1.2345678901234567890123456789012e-13');
	roundtrip('1.23456789012345678901234567890123e-14', '1.234567890123456789012345678901e-14'); // odd scale
	roundtrip('9.9999999999999999999999999999999e125', '9.9999999999999999999999999999999e125');
	roundtrip('9.9999999999999999999999999999999e-129', '9.9999999999999999999999999999999e-129');
	roundtrip('9.9999999999999999999999999999999e-130', '9.999999999999999999999999999999e-130'); // odd scale
});

test('add', 12, function() {
	add('0', '0', '0');
	add('0', '1', '1');
	add('0', '-1', '-1');
	add('12345678901234567890123456789012', '87654321098765432109876543210987', '99999999999999999999999999999999');
	add('12345678901234567890123456789012', '87654321098765432109876543210988', '1.0e32');
	add('33333333333333333330000000000000', '00000000000000000004444444444444', '33333333333333333334444444444444');
	add('33333333333333333333000000000000', '00000000000000000004444444444444', '33333333333333333337444444444444');
	add('33333333333333333338000000000000', '00000000000000000004444444444444', '33333333333333333342444444444444');
	add('3333333333333333333800000000000000', '0000000000000000000444444444444522', '3.3333333333333333342444444444445e33');
	add('3333333333333333333800000000000000', '0000000000000000000444444444444577', '3.3333333333333333342444444444446e33');
	add('33333333333333333338000000000000', '00000000000000000004444444444445.22', '33333333333333333342444444444445');
	add('33333333333333333338000000000000', '00000000000000000004444444444445.77', '33333333333333333342444444444446');
});