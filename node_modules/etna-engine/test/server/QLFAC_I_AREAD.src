Call OUVRE_TRACE("QLFAC_INSTANCE") From LECFIC
Call TESTSUITE()

Call FERME_TRACE From LECFIC

GTRACE = "QLFAC_INSTANCE_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#########################
Funprog TESTSUITE()
Callmet GACTX.ACTX_SET_LANISO("fr-FR")

Call TESTSUITE_START("QLFAC_INSTANCE", "QLFAC_INSTANCE") From AXUNIT

Call ADD_TESTCASE("TC_ADOPAR"  		,"Read ADOPAR"	,11) From AXUNIT
Call ADD_TESTCASE("TC_AQCPROC01" 	,"Read AQCPROC01 (AXX Field) " ,8) From AXUNIT
Call ADD_TESTCASE("TC_ACTIV"   		,"Read ACTIV "	,4) From AXUNIT
Call ADD_TESTCASE("TC_ACLAIDX" 		,"Read ACLAIDX (ATX Field) " ,4) From AXUNIT
Call ADD_TESTCASE("TC_ERRORS"  		,"ERRORS"		,1) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("QLFAC_INSTANCE", "QLFAC_INSTANCE")
End SUITE_RESULT

#################################################################

#########################
$ERROR
Call CHECK_EQUAL(errn, EX) 
EX = 0
Resume

Subprog CHECK_EQUAL(GOT, EXPECT)
Call CHECK_EQUAL(GOT, EXPECT) From AXUNIT
End

Subprog  TC_ADOPAR
Local Integer ASTATUS

Local Instance INS0 Using C_ADOPAR
INS0 = NewInstance C_ADOPAR AllocGroup null

[L]ASTATUS = fmet INS0.AREAD("SUP","FMTDAT")
Call CHECK_EQUAL([L]ASTATUS,0)

Call CHECK_EQUAL(INS0.CHAPITRE,"SUP")
Call CHECK_EQUAL(INS0.PARAM   ,"FMTDAT")
Call CHECK_EQUAL(INS0.NBVAL   ,3)
Call CHECK_EQUAL(INS0.COLVAL(0).VALUES,"1")
Call CHECK_EQUAL(INS0.COLVAL(1).VALUES,"2")
Call CHECK_EQUAL(INS0.COLVAL(2).VALUES,"3")

FreeGroup INS0

Local Instance INS1 Using C_ADOPAR
INS1 = NewInstance C_ADOPAR AllocGroup null

[L]ASTATUS = fmet INS1.AREAD("SUP","ADONIX")
Call CHECK_EQUAL([L]ASTATUS,0)

Call CHECK_EQUAL(INS1.CHAPITRE,"SUP")
Call CHECK_EQUAL(INS1.PARAM   ,"ADONIX")
Call CHECK_EQUAL(INS1.NBVAL   ,0)
FreeGroup ADOPAR

End
#################################################################


Subprog TC_ACTIV
Local Integer ASTATUS,SILENCE
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACTIV [ACV_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACTIV") From ASYRCOM : Endif
Call CHECK_EQUAL(dim(ACTIV),-1)

Local Instance ACTIV Using C_ACTIV
Call CHECK_EQUAL(dim(ACTIV),1)

If !SILENCE : Call TRACE("3 --> New Instance C_ACTIV") From ASYRCOM : Endif
ACTIV = NewInstance C_ACTIV AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACV_]CODACT ="ABI"
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACTIV") From ASYRCOM : Endif
 [L]ASTATUS = fmet ACTIV.AREAD([ACV_]CODACT)
 If !SILENCE : Call TRACE("[L]ASTATUS:"+num$([L]ASTATUS)) From ASYRCOM : Endif
 Call CHECK_EQUAL([L]ASTATUS,0)
 Call CHECK_EQUAL(ACTIV.CODACT,[ACV_]CODACT)
Endif

Infbox ACTIV.CODACT
Close Local File [ACV_]
FreeGroup ACTIV
End


Subprog TC_ACLAIDX
Local Integer ASTATUS,EX
Local Instance ACLAIDX Using C_ACLAIDX

ACLAIDX = NewInstance C_ACLAIDX
[L]ASTATUS = fmet ACLAIDX.AREAD("ACLAIDX")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK)

# INTCLA : ATX Property
Callmet GACTX.ACTX_SET_LANISO("fr-FR")
Call CHECK_EQUAL(ACLAIDX.INTCLA,"Index des classes")
Call CHECK_EQUAL(ACLAIDX.INTCLA,"Index des classes")

Onerrgo ERROR 
EX=147
ACLAIDX.INTCLA ="Index of classes"
End

Subprog TC_AQCPROC01
Local Integer ASTATUS,EX
Local Instance AQCPROC01 Using C_AQCPROC01
Onerrgo ERROR 

Callmet GACTX.ACTX_SET_LANISO("fr-FR")
AQCPROC01 = NewInstance C_AQCPROC01
[L]ASTATUS = fmet AQCPROC01.AREAD("QUNIT_001")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK)
Call CHECK_EQUAL(AQCPROC01.C01P01,"QUNIT_001")
Call CHECK_EQUAL(AQCPROC01.DESCRIPTION,"FRA QUNIT_001")
Call CHECK_EQUAL(AQCPROC01.DESCRIPTION,"FRA QUNIT_001")

Callmet GACTX.ACTX_SET_LANISO("en-US")
[L]ASTATUS = fmet AQCPROC01.AREAD("QUNIT_001")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK)
Call CHECK_EQUAL(AQCPROC01.C01P01,"QUNIT_001")
Call CHECK_EQUAL(AQCPROC01.DESCRIPTION,"ENG QUNIT_001")
Call CHECK_EQUAL(AQCPROC01.DESCRIPTION,"ENG QUNIT_001")
End

Subprog TC_ERRORS
Local Integer ASTATUS
Local Instance ACLAIDX Using C_ACLAIDX

ACLAIDX = NewInstance C_ACLAIDX
[L]ASTATUS = fmet ACLAIDX.AREAD("NOTFOUND")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR)
End