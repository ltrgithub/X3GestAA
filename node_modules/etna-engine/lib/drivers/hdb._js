"use strict";

var ezh = require('ez-hdb');
var hdb = require('hdb');
var trace; // = console.log;
var date = require("syracuse-core/lib/types/date");
var datetime = require("syracuse-core/lib/types/datetime");

module.exports = function(config) {
	var connections = [];

	return {
		decimalCast: function(name) {
			return "convert( nvarchar(40), " + name + " ) As " + name;
		},
		uuidCast: function(name) {
			return name;
		},
		sqlUuid: function(val) {
			// no conversion needed
			return val;
		},
		sqlDate: function(val) {
			return val.toISOString().substring(0, 10);
		},
		fromSqlDate: function(val) {
			if (val === "1599-12-31") return null;
			return date.fromInternalValue(val);
		},
		sqlDatetime: function(val) {
			return val.toISOString().substring(0, 19);
		},
		fromSqlDatetime: function(val) {
			if (val === "1599-12-31") return null;
			return datetime.fromJsDate(new Date(val));
		},
		nullDate: function() {
			return new Datetime(1599, 12, 31, 0, 0, 0, 0);
		},
		isNullDate: function(val) {
			return val === "1599-12-31";
		},
		isNullUuid: function(val) {
			return (val === null) || (val === undefined) || (val === "00000000000000000000000000000000");
		},
		escape: function(name) {
			return '"' + name + '"';
		},
		param: function(i) {
			return '?';
		},
		withConnection: function(_, body) {
			var cnx = connections.pop();
			if (!cnx) {
				trace && trace("connecting ...");
				var cnx = hdb.createClient(config);
				cnx.connect(~_);
			}
			try {
				return body(_, cnx);
			} finally {
				connections.push(cnx);
			}
		},
		execute: function(_, cnx, sql, args) {
			trace && trace("SQL=" + sql + ", ARGS=" + args);
			return (!args || !args.length) ? cnx.exec(sql, ~_) : cnx.prepare(sql, ~_).exec(args, ~_);
		},
		reader: function(_, cnx, sql, args) {
			trace && trace("SQL=" + sql + ", ARGS=" + args);
			var rs = (!args || !args.length) ? cnx.execute(sql, ~_) : cnx.prepare(sql, ~_).execute(args, ~_);
			return ezh.reader(rs);
		},
		writer: function(_, cnx, sql) {
			trace && trace("SQL=" + sql);
			var prepared = cnx.prepare(sql, ~_);
			return ezh.writer(prepared);
		},
		dropIndexSql: function(indexName, tableName) {
			return 'drop index "' + indexName + '"';
		},
		isIndexNotFound: function(ex) {
			return /invalid index name:/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			return /invalid table name:/.test(ex.message);
		},
		blobType: function() {
			return "VARCHAR2(1020)";
		},
		tinyIntType: function() {
			return "NUMBER(3)";
		},
		shortIntType: function() {
			return "NUMBER(5)";
		},
		intType: function() {
			return "NUMBER(10)";
		},
		stringType: function(len) {
			return "VARCHAR2(" + len + ")";
		},
		dateType: function() {
			return "DATE";
		},
		datetimeType: function() {
			return "DATE";
		},
		uuidType: function() {
			return "VARCHAR2(32)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "VARCHAR2(32)";
		},
		backupDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},
		restoreDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},
	};
};