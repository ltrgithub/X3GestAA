"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');
var tinteger = require('./tinteger');
var tdate = require('./tdate');
var tdouble = require('./tdouble');

Object.defineProperty( String.prototype, "x3ToString", {
    value: function() {
      return  this ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDouble", {
    value: function() {
      return  new tdouble.Double( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToBCD", {
    value: function() {
      return  new bcd.FromString( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToInteger", {
    value: function() {
      return  ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDate", {
    value: function() {
	/*try {
		var y = this.substring(0,4);
		var m = this.substring(5,6);
		var d = this.substring(7,8);
		return new tdate.date(d,m,y) ;	
	} catch (e) {new tdate.date( ) ; } ;*/
      return  ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Compare", {
    value: function() {
	/*if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
	
	if (tdate.isDate(b)){
		console.log("b " + b);
		return 1;
	}
	
	if (this.value === b.valueOf()) return 0 ;
	else if (this.value < b.valueOf()) return -1 ;
	else return 1 ;*/
      return  ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Add", {
    value: function() {
	/*if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
	
	if (tdate.isDate(b)){
		return new TString(this.value+b.toTString());
	}
	return new TString(this.value + b.value) ;*/
      return  "";
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3IsNumeric", {
    value: function() {
      return false ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Minus", {
    value: function() {
	/*if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
	
	if (tdate.isDate(b)){
		return new TString(this.value+" "+b.toTString());
	}
	
	return new TString(this.value + " " + b.valueOf( )) ;*/
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Sub", {
    value: function() {
	/*if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
	
	if (tdate.isDate(b)){
		return new TString(this.value+" "+b.toTString());
	}
	
	return new TString(this.value + " " + b.valueOf( )) ;*/
  },
  enumerable: false
}) ;
