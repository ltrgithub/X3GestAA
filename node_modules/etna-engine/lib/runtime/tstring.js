"use strict";
var glob = require('streamline/lib/globals');
var X3Error = require('./errors').X3Error;
var util = require('./util');
var tbcd = require('./tbcd');
var tdate = require('./tdate');
var tdatetime = require('./tdatetime');
var tdouble = require('./tdouble');
var tuuid = require('./tuuid');
var Blbfile = require('./tblbfile').Blbfile;
var Clbfile = require('./tclbfile').Clbfile;

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.engine");

var RE_NUMBER = /^([+-]?\d+(\.\d*)?([eE][+-]?\d+)?)$/;
var RE_ZERO = /^[\s.0]*$/;
var RE_INTEGER = /^[\s\d]*$/;
var RE_DATETIME = /^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}\.\d{3}Z$/;

Object.defineProperty(String.prototype, "x3ToString", {
	value: function() {
		return this;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToDouble", {
	value: function() {
		return new tdouble.Double(this);
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToBCD", {
	value: function() {
		return tbcd.fromString(this);
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToInteger", {
	value: function() {
		var s = this.replace(/ /g, "");
		if (s[0] === ".") return 0;
		if (s.length === 0) return 0;
		//return parseInt(s);
		if (RE_INTEGER.exec(s)) {
			// Is it a null string for integer ?
			if (RE_ZERO.exec(s)) return 0;
			return parseInt(s);
		}
		throw new X3Error(10, "");
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Val", {
	value: function() {
		// Is it an integer ? (has to be the first)
		if (RE_INTEGER.exec(this)) {
			// Is it a null string for integer ?
			if (RE_ZERO.exec(this)) return 0;
			return parseInt(this);
		}
		// Is it a null string ?
		if (RE_ZERO.exec(this)) return 0.0;
		// Is it a date time
		if (RE_DATETIME.exec(this)) return new tdouble.Double(tdatetime.x3Parse(this).value);

		// is it a decimal ?
		var r = tbcd.fromString(this);

		if (r.x3IsZero() && (RE_NUMBER.exec(this) === null))
			throw util.badOperand(this);

		return (r.isInt32(1)) ? r.x3ToInteger() : r;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3IsEmpty", {
	value: function() {
		return (this.length === 0) ? true : false;
	},
	enumerable: false
});

String.prototype.x3IsZero = String.prototype.x3IsEmpty;
String.prototype.x3IsUndefined = String.prototype.x3IsEmpty;

Object.defineProperty(String.prototype, "x3Length", {
	value: function() {
		return this.length;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToDate", {
	value: function() {
		if (/^\d{8}$/.test(this)) return tdate.parse(this, "yyyyMMdd");
		if (/^\d{4}-\d{2}-\d{2}$/.test(this)) return tdate.parse(this, "yyyy-MM-dd"); // Format used by the client
		if (/^\d{6}$/.test(this)) {
			console.log("x3ToDate:" + this);

			var date = tdate.parse(this, "yyMMdd");
			var frame = glob.context.x3frame;
			if (date.x3Year < frame.context.sys.values.ADXDCS) {
				date = date.addYears(100);
			}
			return date;
		}
		if (!this.length) return tdate.NULLDATE();
		throw new X3Error(10, "");
	},
	enumerable: false
});


Object.defineProperty(String.prototype, "x3ToUuid", {
	value: function() {
		try {
			return tuuid.x3ToUuid(this);
		} catch (e) {
			throw new X3Error(50, "");
		}
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToDatetime", {
	value: function() {
		try {
			return tdatetime.x3Parse(this);
		} catch (e) {
			throw new X3Error(50, "");
		}
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToClbfile", {
	value: function() {
		return new Clbfile(this);
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Compare", {
	value: function(b) {
		if (util.x3IsString(b)) {
			if (this === b) return 0;
			else if (this < b) return -1;
			else return 1;
		} else if (util.x3IsClbfile(b)) {
			return this.x3Compare(b.value);
		} else if (util.x3IsDate(b)) {
			return 1;
		} else {
			tracerJs.error && tracerJs.error("tstring.x3Compare '" + this + "' badOperand:" + JSON.stringify(b));
			throw util.badOperand(b);
		}
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Add", {
	value: function(b) {
		if (util.x3IsString(b)) {
			return this + b;
		} else if (util.x3IsClbfile(b)) {
			return this + b.value;
		} else if (util.x3IsDate(b)) {
			return this + b.x3ToString();
		} else {
			throw util.badOperand(b);
		}
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3IsNumeric", {
	value: function() {
		return false;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Minus", {
	value: function() {
		return " " + this;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Sub", {
	value: function(b) {
		if (util.x3IsString(b)) {
			return util.x3Trim(this, 1) + " " + util.x3Trim(b, 0);
		} else if (util.x3IsClbfile(b)) {
			return util.x3Trim(this, 1) + " " + util.x3Trim(b.value, 0);
		} else if (util.x3IsDate(b)) {
			return util.x3Trim(this, 1) + " " + util.x3Trim(b.x3ToString(), 0);
		} else {
			throw util.badOperand(b);
		}
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3ToSql", {
	value: function() {
		return (this === "") ? " " : this;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Serialize", {
	value: function(len) {
		var b0 = new Buffer(this, "ucs2");
		var b1 = new Buffer(len);
		var i = 0;

		if (len > 512) {
			// clob case, write lng on header
			b1.writeUInt32BE(b0.length, 0);
			while (i < b1.length - 4) {
				if (i < b0.length) b1.writeUInt16BE(b0.readUInt16LE(i), i + 4);
				else break;
				i += 2;
			}
			b1.fill(0, i + 4);
		} else {
			// string case
			if (b1.length < b0.length + 2)
				throw new X3Error(26, "Inconsistant length in BE conversion");

			// to BE and trailling 0
			while (i < b1.length) {
				if (i < b0.length) b1.writeUInt16BE(b0.readUInt16LE(i), i);
				else break;
				i += 2;
			}
			b1.fill(0, i);
		}
		return b1;
	},
	enumerable: false
});

Object.defineProperty(String.prototype, "x3Type", {
	value: function() {
		return 265;
	},
	enumerable: false
});