"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');
var tinteger = require('./tinteger');
var tdate = require('./tdate');
var tdouble = require('./tdouble');


Object.defineProperty( String.prototype, "x3ToString", {
    value: function() {
    	return  this ;
  }, 
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDouble", {
    value: function() {
    	return  new tdouble.Double( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToBCD", {
    value: function() {
    	return  new bcd.FromString( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToInteger", {
    value: function() {
    	return  parseInt(this);
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3IsEmpty", {
    value: function() {
      return  (this.length === 0)? true : false ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Length", {
    value: function() {
      return  this.length ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDate", {
    value: function() {   	
      if ( /^\d{8}$/.test(this) ) return tdate.parse(this, "yyyyMMdd") ;
      if ( /^\d{6}$/.test(this) ) return tdate.parse(this, "yyMMdd") ;
      /*if ( /^\d{2}\/\d{2}\/\d{2}$/.test(this) ) return tdate.parse(this, "dd/MM/yy") ;
      if ( /^\d{2}\/\d{2}\/\d{4}$/.test(this) ) return tdate.parse(this, "dd/MM/yyyy") ;
      */
      if(!this.length) return tdate.NULLDATE();
  		throw new X3Error(10,"") ;
    },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Compare", {
    value: function(b) {
	if (util.x3IsString(b)){
		if (this === b) return 0 ;
		else if (this< b) return -1 ;
		else return 1 ;
	} else if (util.x3IsDate(b)){
		return 1;
	} else {
		throw util.badOperand(b);
	}
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Add", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  this+b;
    	}else if (util.x3IsDate(b)){
			return this+b.x3ToString();
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3IsNumeric", {
    value: function() {
    	return false ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Minus", {
    value: function() {
    	return " "+this ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Sub", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  util.x3Trim( this, 1 )+" "+util.x3Trim( b, 0 ) ;
    	}else if (util.x3IsDate(b)){
			return util.x3Trim( this, 1 )+" "+util.x3Trim( b.x3ToString(), 0 ) ;
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;



