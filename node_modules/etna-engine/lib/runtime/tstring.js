"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');
var tinteger = require('./tinteger');
var tdate = require('./tdate');
var tdouble = require('./tdouble');

Object.defineProperty( String.prototype, "x3ToString", {
    value: function() {
    	return  this ;
  }, 
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDouble", {
    value: function() {
    	return  new tdouble.Double( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToBCD", {
    value: function() {
    	return  new bcd.FromString( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToInteger", {
    value: function() {
    	return  parseInt(this);
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDate", {
    value: function() {
	/*try {
		var y = this.substring(0,4);
		var m = this.substring(5,6);
		var d = this.substring(7,8);
		return new tdate.date(d,m,y) ;	
	} catch (e) {new tdate.date( ) ; } ;*/
		return  ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Compare", {
    value: function(b) {
	if (util.x3IsString(b)){
		if (this === b) return 0 ;
		else if (this< b) return -1 ;
		else return 1 ;
	} else if (tdate.isDate(b)){
		return 1;
	} else {
		throw util.badOperand(b);
	}
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Add", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  this+b;
    	}else if (util.x3IsDate(b)){
			return this+b.x3ToString();
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3IsNumeric", {
    value: function() {
    	return false ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Minus", {
    value: function() {
    	return " "+this ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Sub", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  this+" "+b;
    	}else if (util.x3IsDate(b)){
			return this+" "+b.x3ToString();
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;
