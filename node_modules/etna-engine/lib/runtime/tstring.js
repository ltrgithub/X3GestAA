"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var tbcd = require('./tbcd');
var tinteger = require('./tinteger');
var tdate = require('./tdate');
var tdouble = require('./tdouble');


exports.isString = function(val) {
	return val instanceof TString ;
}

var TString = (function() {
	function TString( v ) {
		this.value=v;
	} ;

	TString.prototype.valueOf = function() {
		return this.value ;
	} ;

	TString.prototype.toString = function() {
		return this.value ;
	} ;
	
	TString.prototype.toDouble = function() {
		return new tdouble.Double( this.value ) ;
	} ;
	
	TString.prototype.toBCD = function() {
		return new tbcd.BCD( this ) ;
	} ;
	
	TString.prototype.toInteger = function() { 
		return new tinteger.Integer(parseInt(this.value) ) ;
	} ;    
	
	TString.prototype.toDate = function() {
		try {
			var y = this.substring(0,4);
			var m = this.substring(5,6);
			var d = this.substring(7,8);
			return new tdate.date(d,m,y) ;	
		} catch (e) {new tdate.date( ) ; } ;
	
	} ; 	
	
	TString.prototype.toDatetime = function() {
	        
	} ;   
	
	TString.prototype.isNumeric = function() {
		return false ;
	} ;
	
	TString.prototype.isZero = function() {
		return false;
	} ;	
	
	TString.prototype.compare = function( b ) {
		if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
		
		if (tdate.isDate(b)){
			console.log("b " + b);
			return 1;
		}
		
		if (this.value === b.valueOf()) return 0 ;
		else if (this.value < b.valueOf()) return -1 ;
		else return 1 ;
	}	
	
	TString.prototype.add = function( b ) {
		if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
		
		if (tdate.isDate(b)){
			return new TString(this.value+b.toTString());
		}
		return new TString(this.value + b.value) ;
	} ;
	
	TString.prototype.sub = function( b ) {
		if (!exports.isString(b) && typeof b !== "string" && !tdate.isDate(b)) throw util.badOperand(b);
		
		if (tdate.isDate(b)){
			return new TString(this.value+" "+b.toTString());
		}
		
		return new TString(this.value + " " + b.valueOf( )) ;
	} ;
	
	TString.prototype.mul = function( b ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.div = function( b ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.mod = function( b ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.pow = function( b ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.xor = function( b ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.abs = function( ) {
		throw util.badOperand(b);
	} ;
	
	TString.prototype.truncate = function( b ) {
		throw util.badOperand(b);
	} ;

	return TString ;
})( ) ;


exports.TString = TString ;

exports.instructions = {
  TSTRING: function( v ) {
	return util.instructions.C(new TString( v )) ;
  }
} ;