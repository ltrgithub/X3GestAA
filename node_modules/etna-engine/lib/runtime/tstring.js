"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');
var tinteger = require('./tinteger');
var tdate = require('./tdate');
var tdouble = require('./tdouble');
//var trimFuncs = require('./util').trimFuncs;

// make general function with this 
var SP = ' '.charCodeAt(0);
var trimFuncs = [function(s) { // left
	var i, len = s.length;
	for (i = 0; i < len && s.charCodeAt(i) === SP; i++);
	return i === 0 ? s : s.substring(i);
}, function(s) { // right
	var i, len = s.length;
	for (i = len - 1; i >= 0 && s.charCodeAt(i) === SP; i--);
	return i === len ? s : s.substring(0, i + 1);
}, function(s) { // both
	var i, j, len = s.length;
	for (i = 0; i < len && s.charCodeAt(i) === SP; i++);
	for (j = len - 1; j >= i && s.charCodeAt(j) === SP; j--);
	return s.substring(i, j + 1);
}, function(s) { // token
	var i, j, len = s.length;
	for (i = 0; i < len && s.charCodeAt(i) === SP; i++);
	for (j = i; j < len && s.charCodeAt(j) !== SP; j++);
	return s.substring(i, j);
}, function(s) { // all
	return s.replace(/ /g, '');
}, function(s) { // adjacent
	return s.replace(/[ ]+/g, ' ');
}];


Object.defineProperty( String.prototype, "x3ToString", {
    value: function() {
    	return  this ;
  }, 
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDouble", {
    value: function() {
    	return  new tdouble.Double( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToBCD", {
    value: function() {
    	return  new bcd.FromString( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToInteger", {
    value: function() {
    	return  parseInt(this);
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3ToDate", {
    value: function() {   	
	try {
		return tdate.parse(this, "yyyyMMdd") ;
	} catch (e) { 	
		throw new X3Error(50,"") ;
	}
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Compare", {
    value: function(b) {
	if (util.x3IsString(b)){
		if (this === b) return 0 ;
		else if (this< b) return -1 ;
		else return 1 ;
	} else if (tdate.isDate(b)){
		return 1;
	} else {
		throw util.badOperand(b);
	}
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Add", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  this+b;
    	}else if (util.x3IsDate(b)){
			return this+b.x3ToString();
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3IsNumeric", {
    value: function() {
    	return false ;
  },
  enumerable: false
}) ;
	
Object.defineProperty( String.prototype, "x3Minus", {
    value: function() {
    	return " "+this ;
  },
  enumerable: false
}) ;

Object.defineProperty( String.prototype, "x3Sub", {
    value: function(b) {
    	if (util.x3IsString(b)){
    		return  trimFuncs[1](this)+" "+trimFuncs[0](b) ;
    	}else if (util.x3IsDate(b)){
			return trimFuncs[1](this)+" "+trimFuncs[0](b.x3ToString());
		} else {
			throw util.badOperand(b);
		}
  },
  enumerable: false
}) ;
