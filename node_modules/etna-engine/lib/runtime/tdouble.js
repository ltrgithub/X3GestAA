"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');

exports.isDouble = function(val) {
	return val instanceof Double ;
}

var Double = (function() {
	function Double( v ) {
    this.value=v
    } ;

  Double.prototype.valueOf = function() {
      return this.value ;
    } ;
  Double.prototype.toDouble = function() {
      return this ;
    } ;

  Double.prototype.toString = function() {
    	return ""+this.value ;
  	} ;

  Double.prototype.toBCD = function() {
    	return new BCD( this ) ;
  	} ;

	Double.prototype.toDate = function() {
    	throw util.badOperand(this.value) ;
  	} ; 	

  Double.prototype.toDatetime = function() {
      throw util.badOperand(this.value) ;
    } ;   

	Double.prototype.isNumeric = function() {
		return true ;
	  } ;

  Double.prototype.isZero = function() {
		return (this.value === 0)?true : false ;
	  } ;	

  Double.prototype.compare = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      var e = (this.value >= 0)? this.value : -this.value ;
      var d = (bb.value >= 0)? bb.value : -bb.value ;

      
      if (d < e) e = d ;
      if (e === 0) e = 1 ;
      e /= 10 ;
      d = this.value - bb.value ;
      
      if ((-e < d) && (d < e)) return 0
      else if (d >= e) return 1 ;
      else return -1 ;

  	} ;	

	Double.prototype.add = function( b ) {
      if (tdate.isDate(b)) { 
        //return b.add((this.value >= 0)?Math.floor(this.value):Math.ceil(this.value)) ;
        return b.add(this) ;
      }
      else if (tdatetime.isDateTime(b)) { 
        //return b.add((this.value >= 0)?Math.floor(this.value):Math.ceil(this.value)) ;
        return b.add(this) ;
      }
      else if (b.isNumeric()) { 
        var bb=b.toDouble();
        return new Double (this.value+bb.value) ;
      }
      else throw util.badOperand(b);
    
  	} ;

	Double.prototype.sub = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      return new Double(this.value-bb.value) ;
    
  	} ;

	Double.prototype.mul = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      return new Double(this.value*bb.value) ;
    
  	} ;

	Double.prototype.div = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);
      if (b.isZero())  throw new X3Error(53) ;

      var bb=b.toDouble();
      return new Double(this.value/bb.value);
    
  	} ;

	Double.prototype.mod = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      return new Integer(this.value%bb.value) ;
    
  	} ;

	Double.prototype.pow = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      return new Double (Math.pow(this.value, bb.value));

  	} ;

  	Double.prototype.xor = function( b ) {
      if (!b.isNumeric()) throw util.badOperand(b);

      var bb=b.toDouble();
      return new Integer(this.value ^ bb.value) ;
    
  	} ;

  	Double.prototype.abs = function() {
    	return new Double( Math.abs( this.value )) ;
  	} ;

  	Double.prototype.truncate = function() {
  		return new Double( this.value ) ;
  	} ;

})( ) ;

exports.Double = Double ;