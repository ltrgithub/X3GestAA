"use strict";

var util = require('./util');
var variables = require('./variables');
var operators = require('./operators');
var array = require('./arrays');
var dates = require('./dates');
var tdate = require('etna-engine/lib/runtime/tdate');
var tdatetime = require('etna-engine/lib/runtime/tdatetime');
var flowControl = require('./flowControl');
var X3Error = require('./errors').X3Error;
var glob = require('streamline/lib/globals');

exports.functions = {
	FILECLA: {
		count: 0
	},
	FILETYP: {
		count: 0
	},
	CLANBS: {
		count: 2,
		fn: function(name, kind) {
			// kind is 1 or 2 to indicate existing or allocated - ignore for now
			var context = this;
			var cla = context.tables[name];
			if (!cla) throw new X3Error(7, "invalid class: " + name);
			switch (kind) {
				case 1:
					return cla.types.length;
				case 2:
					return cla.values.length;
				default:
					throw new X3Error(10, "invalid value for clanbs parameter: " + typeof arg);
			}
		}
	},
	CLASIZ: {
		count: 2,
		fn: function(classe, exp_buf) {
			return 16;
		}
	},
	CLANAM: {
		count: 1
	},
	CLAVAR: {
		count: 1
	},
	CLALEV: {
		count: 1,
		fn: function(classe) {
			return 0;
		}
	},
};

function concat(a1, a2) {
	return (a1 && a2) ? a1.concat(a2) : (a1 || a2);
}

function genSql(_, exp, ctx) {
	var val = typeof exp === 'function' ? exp(_, ctx) : exp;
	if (val && val.sql) return val;
	return {
		sql: "@?",
		type: typeof val,
		constants: [val.x3ToSql() || val],
		isConstant: true
	};
}

function binaryOp(op, sqlOp, type, numOp, numType) {
	return function(op1, op2) {
		return function binaryOp$do(_, ctx) {
			var frame = glob.context.x3frame;
			if (!frame.tryingSql) return operators.instructions[op](op1, op2)(_);
			var v1 = genSql(_, op1, ctx);
			var v2 = genSql(_, op2, ctx);
			if (numOp && v1.type === v2.type && v1.type === "number") sqlOp = numOp, type = numType;
			var sql;
			if (sqlOp === "CONCAT") {
				if (numOp === '-') {
					v1.sql = "RTRIM(" + v1.sql + "),' '";
					v2.sql = "' ',LTRIM(" + v2.sql + ")";
				}
				sql = "CONCAT(" + v1.sql + "," + v2.sql + ")";
			} else sql = "(" + v1.sql + " " + sqlOp + " " + v2.sql + ")";

			var vals = (v1.constants || []).concat(v2.constants || []);
			return {
				sql: sql,
				type: type,
				constants: vals
			};
		};
	};
}

function rowIn(row, descs) {
	return descs.reduce(function(obj, desc) {
		obj[desc.name] = desc.type.fromSql(row[desc.name]); // for now!
		return obj;
	}, {});
}

function sqlFn(name, type) {
	return function() {
		var ctt = [];
		var thesql = name + "(" + Array.prototype.map.call(arguments, function(arg) {
			ctt = ctt.concat(arg.constants || []);
			return arg.sql;
		}).join(',') + ")";
		return {
			sql: thesql,
			type: type,
			constants: ctt
		};
	};
}

function tooComplex() {
	return {
		tooComplexForSql: true
	};
}

function defVal(type) {
	switch (type) {
		case 'string':
			return '';
		case 'number':
			return 0;
		case 'date':
			return null; //TODO : dates.ORIGIN;
		case 'binary':
			return null;
		default:
			throw new Error('unsupported column type: ' + type);
	}
}

var sqlCmpOps = {
	EQ: {
		op: '=',
		combine: 'and',
	},
	NE: {
		op: '<>',
		combine: 'or'
	},
	LT: {
		op: '<',
		combine: 'lexi'
	},
	LE: {
		op: '<=',
		combine: 'lexi'
	},
	GT: {
		op: '>',
		combine: 'lexi'
	},
	GE: {
		op: '>=',
		combine: 'lexi'
	},
};

var sqlFunctions = {
	// string functions
	LEN: sqlFn("LENGTH", "number"),
	LEFT$: sqlFn("LEFT", "string"),
	RIGHT$: sqlFn("RIGHT", "string"),
	MID$: sqlFn("SUBSTRING", "string"),
	TOUPPER: sqlFn("UPPER", "string"),
	TOLOWER: sqlFn("LOWER", "string"),
	CHR$: sqlFn("CHAR", "string"),
	SEG$: function(arg, first, last) {
		return {
			sql: "SUBSTRING(" + arg.sql + "," + first.sql + "," + last.sql + " + 1 - " + first.sql + ")",
			type: "string",
		};
	},
	CTRANS: function(arg) {
		if (arguments.length > 1) throw tooComplex();
		return {
			sql: "CONVERT(" + arg.sql + " USING ASCII)",
			type: "string",
		};
	},
	PAT: function(str, pat) {
		if (/[?#!]/.match(pat.sql)) throw tooComplex();
		return {
			sql: "(" + str.sql + " LIKE " + pat.sql.replace(/%/g, '%%').replace(/\*/g, '%') + ")",
			type: "string",
		};
	},

	// Numeric functions
	ABS: sqlFn("ABS", "number"),
	MOD: sqlFn("MOD", "number"),
	// investigate neg values
	ARR2: function(arg) {
		return {
			sql: "ROUND(" + arg.sql + ",2)",
			type: "number",
		};
	},
	ARR: sqlFn("ROUND", "number"),
	FIX: sqlFn("TRUNCATE", "number"),
	INT: sqlFn("FLOOR", "number"),
	SQR: sqlFn("SQRT", "number"),
	COS: sqlFn("COS", "number"),
	SIN: sqlFn("SIN", "number"),
	TAN: sqlFn("TAN", "number"),
	ACOS: sqlFn("ACOS", "number"),
	ASIN: sqlFn("ASIN", "number"),
	ATAN: sqlFn("ATAN", "number"),
	PI: sqlFn("PI", "number"),
	EXP: sqlFn("EXP", "number"),
	LN: sqlFn("LOG", "number"),
	LOG: sqlFn("LOG10", "number"),

	// Find
	FIND: function(arg) {
		var vals = Array.prototype.slice.call(arguments, 1);
		return {
			sql: "FIND_IN_SET(" + arg.sql + ",'" + vals.map(function(val) {
				if (!/['\-\d]/.test(val.sql[0])) throw tooComplex();
				return val.sql.substring(1, val.sql.length - 1);
			}).join(',') + "')",
			type: "number",
		};
	}

	// see later about date functions
};

function findTable(frame, abbrev) {
	// use frame's default abbrev by default
	var table = frame.context.tables[abbrev || frame.abbrev];
	if (!table) throw new X3Error(7, "bad table abbrev: " + abbrev);
	return table;
}

function findView(frame, abbrev) {
	// use frame's default abbrev by default
	var abb = abbrev || frame.abbrev;
	var table = frame.context.tables[abb];
	if (!table) throw new X3Error(7, "bad table abbrev: " + abbrev);
	return table.views[abb];
}

function findIndex(table, name) {
	var index = table.desc.index(name);
	if (!index) throw new X3Error(21, "bad index: " + name);
	return index;
}

function allocateSlots(frame, table, columns, first) {
	Object.keys(columns).forEach(function(colName) {
		var etnaType = columns[colName].type.etnaType;
		//console.log("colName etnaType:"+etnaType+ "def:"+variables.types[etnaType].def);
		if (columns[colName].data.DIME <= 1)
			table.values[colName] = variables.types[etnaType].def;
		else {
			table.values[colName] = [];
			//table.values[colName][0] = variables.types[etnaType].def;
		}
		table.types[colName] = ' ' + etnaType;
	});
}

function identity(x) {
	return x;
}

exports.instructions = {
	KEY: function(letter, abbrev, name, indices) {
		return function key$do(_) {
			return {
				letter: letter,
				abbrev: abbrev,
				name: name,
				indices: indices && indices.map_(_, function(_, exp) {
					return exp(_);
				})
			};
		};
	},
	FILESQL: function(abbrev, name, where, order) {
		return function file$do(_) {
			var frame = glob.context.x3frame;
			var nameVal = name(_);
			var desc = frame.context.superv.load(_, 'Table', nameVal);
			if (!desc) throw new X3Error(7, "unknown table or unsupport FILE syntax: " + nameVal);
			var abb = abbrev || desc.abbrev;
			var ctx = [abb];

			var table = frame.context.tables[abb] = {
				abbrev: abb,
				desc: desc,
				views: {},
				types: {},
				values: {},
			};
			// allocate column slots
			allocateSlots(frame, table, desc.columns, true);
			// add link to self with where and order clauses
			table.views[abb] = {
				table: table,
				joins: [],
				where: where && where(_, ctx),
				order: order && order(_),
				filter: {},
			};
			// record last abbrev as default one
			frame.abbrev = abb;
		};
	},
	CLOSEFILE: function(scope, abbrevs) {
		return function closefile$do(_) {
			var frame = glob.context.x3frame;
			abbrevs.forEach(function(abbrev) {
				delete frame.context.tables[abbrev];
				if (abbrev === frame.abbrev) frame.abbrev = null;
			});
		};
	},
	LOGICCLOSE: function(scope, abbrev) {
		return function logicclose$do(_) {};
	},
	FILTER: function(abbrev, where, order) {
		return function filter$do(_) {
			var frame = glob.context.x3frame;
			var view = findView(frame, abbrev);

			// table in views
			var ctx = [view.table.abbrev];
			view.joins.forEach(function(join) {
				ctx.push(join.abbrev);
			});

			view.filter = {
				where: where && where(_, ctx),
				order: order && order(_)
			};
		};
	},
	COLUMNS: function(abbrev, columns) {
		return function columns$do(_) {
			var frame = glob.context.x3frame;
			var view = findView(frame, abbrev);
			// columns is an array of [abbrev, field] pairs
			table.columns = columns;
		};
	},
	LINKITEM: function(key, outer, values) {
		return function linkitem$do(_) {
			var frame = glob.context.x3frame;
			var k = key(_);
			var abv = k.abbrev || frame.abbrev;
			var table = findTable(frame, k.abbrev);
			var index = findIndex(table, k.name);

			/*allocateSlots(frame, table, table.desc.columns);
			var sql = (outer ? " LEFT" : " INNER") + " JOIN " + table.desc.name + " AS " + k.abbrev //
			+ " ON " + values.map_(_, function(_, val, i) {
				frame.tryingSql = true;
				try {
					val = genSql(_, val);
					frame.tryingSql = false;
					return k.abbrev + "." + index.columns[i].substring(1) + "_0 = " + val.sql;
				} catch (ex) {
					frame.tryingSql = false;
					throw ex; // TODO: handle this
					if (!ex.tooComplexForSql) throw ex;
					//exps.push(exp);
				}
			});
			*/
			return {
				abbrev: abv,
				table: table,
				index: index,
				isOuter: outer,
				key: values
			};
		};
	},
	LINK: function(abbrev, as, joins, where, order) {
		return function link$do(_) {
			var frame = glob.context.x3frame;
			var table = findTable(frame, abbrev);
			var ctx = [table.abbrev];
			// main table is also accessible with the link abbrev
			frame.context.tables[as] = table;
			// link information is 
			table.views[as] = {
				table: table,
				joins: joins.map_(_, function(_, join) {
					return genSql(_, join);
				}),
				where: where && where(_, ctx),
				order: order && order(_),
				filter: {},
			};
			// TODO: should we insert it in dicts (table is already there)?
		};
	},
	READ: function(key, op, values) {
		var avalues = util.instructions.A(values);
		return function read$do(_) {
			var frame = glob.context.x3frame;
			var k = key(_);

			if (k.indices && k.indices.length > 1) {
				throw new X3Error(26, "NIY: READ with indices");
			}
			var vals = avalues(_);
			var table = findTable(frame, k.abbrev);
			var index = findIndex(table, k.name);
			var abv = table.abbrev;
			var driver = frame.context.superv.sqlDriver;


			var indexExps = index.sqlNames(_);
			var cmpOp = sqlCmpOps[op || 'EQ'];
			var where = '(' + abv + '.' + indexExps[0] + cmpOp.op + driver.param(0) + ')';
			var lexi = '(' + indexExps[0] + '=:1)';;
			for (var i = 1; i < vals.length; i++) {
				var clause = abv + '.' + indexExps[i] + cmpOp.op + driver.param(i);
				if (cmpOp.combine === 'lexi') {
					where = where + ' or (' + lexi + ' and (' + clause + '))';
					lexi = '(' + lexi + ' and (' + abv + '.' + indexExps[i] + '=' + driver.param(i) + ')';
				} else {
					where = where + ' ' + cmpOp.combine + ' (' + clause + ')';
				}
			}
			var descs = [];
			var typesmap = [0];
			var sql = "select " + abv + ".ROWID As " + abv + "$ROWID, " + Object.keys(table.desc.columns).map_(_, function(_, name) {
				var column = table.desc.columns[name];
				column.sqlTypesMap(typesmap);
				return column.sqlNames(abv + ".", abv);
			}).join(',') + " from " + table.desc.name + " " + abv + " where " + where;

			vals = vals.map(function(val) {
				return (typeof val === 'string' && !val.length) ? " " : val;
			});

			console.log("Read SQL " + table.abbrev + ":" + sql);
			var row = frame.context.superv.executeSql(_, sql, vals, typesmap, true)[0];
			console.log(row);
			if (row && row[abv]) {
				table.values = row[abv];
				frame.context.sys.values.FSTAT = 0;
			} else {
				frame.context.sys.values.FSTAT = 5;
			}
		};
	},
	WRITE: function(abbrev) {
		return function write$do(_) {
			var frame = glob.context.x3frame;
			var table = findTable(frame, abbrev);
			var driver = frame.context.superv.sqlDriver;
			var colNames = Object.keys(table.desc.columns);
			var row = table.values;

			abbrev = table.abbrev;

			var currind = 0;
			var sql = table.insert || (table.insert = "Insert into " + table.desc.name + " (" + colNames.map(function(name) {
				var col = table.desc.columns[name];
				return col.sqlNames("");
			}) + ") VALUES (" + colNames.map(function(name) {
				var s = "";
				var col = table.desc.columns[name];
				s += driver.param(currind++);
				for (var i = 1; i < col.data.DIME; i++) {
					s += ',';
					s += driver.param(currind++);
				}
				return s;
			}) + ")");

			var user = frame.loginName || "USER";

			//!console.log("\nWRITE row:"+JSON.stringify(row));
			var values = [];
			colNames.forEach(function(colName) {
				var val = row[colName];
				var col = table.desc.columns[colName];
				var etnaType = col.type.etnaType;

				//table.values[colName] = ;				
				if (col.data.DIME > 1) {
					for (var i = 0; i < col.data.DIME; i++) {
						if (val[i] !== undefined) values.push(val[i]);
						else values.push(variables.types[etnaType].def);
					}
				} else {

					if (/^(CREDATTIM|UPDDATTIM)$/.test(colName) && (val === undefined || val === null || (val.x3IsZero && val.x3IsZero()))) {
						val = tdatetime.now();
						//val.setMilliseconds(0); // bug tds ??? insertion error with milliseconds
						//val = tdate.fromJsDate(now);
					} else if (/^(CREUSR|UPDUSR)$/.test(colName) && (!val || !val.length)) {
						val = user;
					} else if (val === undefined) {
						throw new X3Error(26, colName + ": bad value: " + val);
					}
					values.push(val);
				}
			});
			console.log("WRITE sql:" + sql);
			console.log("WRITE values:" + values);

			try {
				var result = frame.context.superv.executeSql(_, sql, values);
				frame.context.sys.values.FSTAT = 0;
			} catch (e) {
				if (driver.isUniqueViolated(e))
					frame.context.sys.values.FSTAT = 3;
				else if (driver.isLocked(e))
					frame.context.sys.values.FSTAT = 1;
				else throw e;
			}
		};
	},
	REWRITE: function(key, op, values) {
		var avalues = util.instructions.A(values);
		return function rewrite$do(_) {
			var frame = glob.context.x3frame;
			var k = key(_);
			if (k.indices) throw new X3Error(26, "NIY: READ with indices");
			var vals = avalues(_);
			var table = findTable(frame, k.abbrev);
			var driver = frame.context.superv.sqlDriver;

			var descs = [];
			var rowVals = [];
			var colNames = Object.keys(table.desc.columns);
			colNames.forEach_(_, function(_, name) {
				var column = table.desc.columns[name];
				column.sqlDescs(descs);
			});
			descs.forEach(function(desc) {
				// TODO: check indexed array layout
				var val = desc.index != null ? table.values[desc.name][desc.offset] : table.values[desc.name];
				val = desc.type.toSql(val);
				rowVals.push(val);
			});

			var index = k.name ? table.desc.index(k.name) : table.desc.indexes[0];
			if (!index) throw new X3Error(26, "index not found: " + k.name);
			var indexExps = index.sqlNames(_);
			if (vals.length === 0) vals = index.columns.map(function(col) {
				return col.type.toSql(table.values[col.name]);
			});
			var cmpOp = sqlCmpOps[op || 'EQ'];
			var where = '(' + indexExps[0] + cmpOp.op + driver.param(descs.length) + ')';
			var lexi = '(' + indexExps[0] + '=' + driver.param(descs.length) + ')';
			for (var i = 1; i < vals.length; i++) {
				var clause = indexExps[i] + cmpOp.op + driver.param(descs.length + i);
				if (cmpOp.combine === 'lexi') {
					where = where + ' or (' + lexi + ' and (' + clause + '))';
					lexi = '(' + lexi + ' and (' + indexExps[i] + '=' + driver.param(descs.length + i) + ')';
				} else {
					where = where + ' ' + cmpOp.combine + ' (' + clause + ')';
				}
			}
			var sql = "update " + table.desc.name + " set " + descs.map(function(desc) {
				return desc.name + "_" + (desc.index || 0) + '=' + driver.param(desc.offset);
			}).join(',') + " where " + where;
			//console.log(vals);
			var result = frame.context.superv.executeSql(_, sql, rowVals.concat(vals))[0];
			var updateCount = (result && result.updateCount) || 0; // fix driver, I get undefined if 0 updated!
			//if (!result || result.updateCount === undefined) throw new X3Error(26, "bad SQL result: " + result);
			frame.context.sys.values.ADXUPREC = updateCount;
			frame.context.sys.values.FSTAT = 0;
		};
	},
	DELETE: function(abbrev, where, op, values) {
		return function delete$do(_) {
			var frame = glob.context.x3frame;
			var table = findTable(frame, abbrev);
			var driver = frame.context.superv.sqlDriver;
			var view = findView(frame, abbrev);
			var ctx = [table.abbrev];
			if (op) throw new X3Error(33, "NIY delete with op");



			// generate WHERE clause
			var whereSqls = [],
				constants = [];
			[view.where, view.filter.where, where && where(_, ctx)].filter(identity).forEach(function(w) {
					w.sql && whereSqls.push(w.sql);
					constants = constants.concat(w.constants);
				});
			//if (whereExps.length > 0) throw new X3Error(26, "where clause cannot be fully translated to SQL");
			var currtag = 0;
			var whereSql = whereSqls.length ? " where " + whereSqls.join(' and ') : '';
			whereSql = whereSql.replace(/@\?/g, function(val) {
				return driver.param(currtag++);
			});
			var sql = "delete from " + driver.escape(view.table.desc.name) + " " + abbrev + " " + whereSql;
			console.log(sql);
			var result = frame.context.superv.executeSql(_, "delete from " + driver.escape(view.table.desc.name) + " " + abbrev + " " + whereSql, constants);
			if (!result || result.updateCount === undefined) throw new X3Error(26, "bad SQL result: " + result);
			frame.context.sys.values.ADXDLREC = result.updateCount;
			frame.context.sys.values.FSTAT = 0;
		};
	},
	TRBEGIN: function(abbrevs) {
		//var aabrevs = util.instructions.A(abbrevs);
		return function trbegin$do(_) {
			var frame = glob.context.x3frame;
			var name = "TX"; //aabrevs(_).join('_');
			frame.context.superv.executeSql(_, "set transaction name '" + name + "'");
		};
	},
	COMMIT: function() {
		return function commit$do(_) {
			var frame = glob.context.x3frame;
			frame.context.superv.executeSql(_, "commit");
		};
	},
	ROLLBACK: function() {
		return function rollback$do(_) {
			var frame = glob.context.x3frame;
			frame.context.superv.executeSql(_, "rollback");
		};
	},
	FORF: function(key, where, p, end, block) {
		return function forf$do(_) {
			var frame = glob.context.x3frame;
			var k = key(_);
			var table = frame.context.tables[k.abbrev];
			var driver = frame.context.superv.sqlDriver;
			var utilDriver = require("etna-supervisor/lib/drivers/util");
			if (!table) throw new X3Error(7, "class not found: " + k.abbrev);

			var view = findView(frame, k.abbrev);

			// we must know tables in game
			var abbrevs = [view.table.abbrev];
			var tablesSql = view.table.desc.name + " " + view.table.abbrev + view.joins.map(function(join) {
				abbrevs.push(join.abbrev);
				return join.sql;
			}).join('');

			// generate WHERE clause
			var whereSqls = [],
				constants = [];
			[view.where, view.filter.where, where && where(_, abbrevs)].filter(identity).forEach(function(w) {
					w.sql && whereSqls.push(w.sql);
					constants = constants.concat(w.constants || []);
				});

			var currtag = 0;
			var whereSql = whereSqls.length ? " WHERE " + whereSqls.join(' AND ') : '';

			whereSql = whereSql.replace(/@\?/g, function(val) {
				return driver.param(currtag++);
			});


			// generate ORDER BY clause
			var ord = view.filter.order || view.order;
			var orderBySql = ord ? " ORDER BY " + ord.items.map(function(item) {
				return item.substring(1) + "_0" + (item[0] === '-' ? ' DESC' : ' ASC');
			}).join(',') : '';

			var typesmap = [0];
			var columnsSql = (view.columns ? view.columns.map(function(column) {
				column.sqlTypesMap(typesmap);;
				return column[0] + "." + column[1] + "_0 AS " + column[0] + "_" + column[1];
			}) : abbrevs.reduce(function(result, abbrev) {
				var tab = findTable(frame, abbrev);
				Object.keys(tab.desc.columns).forEach(function(name) {
					var col = table.desc.columns[name];
					col.sqlTypesMap(typesmap);
					result.push(col.sqlNames(abbrev + ".", abbrev));
				});
				return result;
			}, [])).join(', ');

			var maptrim = utilDriver.maptrim(driver, typesmap, true);

			var sql = "Select " + view.table.abbrev + ".ROWID As " + view.table.abbrev + "$ROWID, " + columnsSql + " From " + tablesSql + whereSql + orderBySql;
			console.log("FORF:" + sql);
			/*whereExps.length > 0 && console.log(whereExps.length + " WHERE clause(s) not translated to SQL.");*/
			console.log("Constants :" + constants);
			driver.withConnection(_, function(_, cnx) {
				var rdr = driver.reader(_, cnx, sql, constants);

				var level = ++frame.loopLevel;
				while (frame.loopLevel === level) {
					var rec = rdr.read(_, 1);
					if (rec) {
						var row = maptrim(rec);
						Object.keys(row).forEach(function(abv) {
							findTable(frame, abv).values = row[abv];
						});


						block(_);
					} else {
						frame.loopLevel = level - 1;
					}
				}

				if (frame.loopLevel === level - 1) p[end](_);
			});
		};
	},
	WHERE: function(wheres) {
		return function(_, ctx) {
			var frame = glob.context.x3frame;
			var sqls = [];
			var exps = [];
			var pe = false;

			wheres.forEach_(_, function(_, exp) {
				frame.tryingSql = true;
				try {
					var r = genSql(_, exp, ctx);
					sqls.push(r.sql);
					exps = exps.concat(r.constants || []);

					frame.tryingSql = false;
				} catch (ex) {
					frame.tryingSql = false;
					if (!ex.tooComplexForSql) throw ex;
					//exps.concat(r.constants || []);
					pe = true;
				}
			});
			return {
				sql: sqls.join(" AND "),
				constants: exps,
				postEvaluation: pe
			};
		};
	},
	ORDER: function(keyName, by, withExp) {
		return function(_) {
			var items = by;
			if (withExp) {
				items = withExp(_).split(';').map(function(s) {
					var pair = s.split(' ');
					return (pair[1] && pair[1].toLowerCase() === 'desc' ? '-' : '+') + pair[0];
				});
			}
			return {
				name: keyName,
				items: items
			};
		};
	},

	SQLV: function(field) {
		return function sqlv$do(_) {
			var frame = glob.context.x3frame;
			if (!frame.tryingSql) return variables.instructions.V(field)(_);
			//throw new X3Error(26, "NIY");
			var tables = frame.context.tables;
			var abbrevs = Object.keys(tables);
			for (var i = 0; i < abbrevs.length; i++) {
				var abbrev = abbrevs[i];
				var table = tables[abbrev];
				if (table.values[field] !== undefined) return {
					sql: abbrev + '.' + field + '_0',
					type: table.types[field],
				};
			}
			return variables.instructions.V(field)(_);
		};
	},
	SQLINDEX: function(field, args) {
		var aargs = util.instructions.A(args);
		return function sqlindex$do(_, ctx) {
			if (!frame.tryingSql) return array.instructions.INDEX(field, args);
			var f = field(_, ctx);
			var i = aargs(_);

			return {
				sql: f.sql.replace("_0", "_" + i),
				type: f.type
			};

		};
	},
	SQLCV: function(letter, abbrev, field) {
		return function sqlcv$do(_, ctx) {
			var frame = glob.context.x3frame;
			console.log("Letter : " + letter + " abbrev:" + abbrev + " field:" + field);
			if (!frame.tryingSql || letter === 'L' || letter === 'V' || letter === 'S') return variables.instructions.CV(letter, abbrev, field)(_);
			if (abbrev) {
				if (ctx.indexOf(abbrev) >= 0) {
					var table = frame.context.tables[abbrev];
					var col = table && table.desc && table.desc.columns[field];
					return {
						sql: abbrev + '.' + field + '_0',
						type: col && col.type,
					};
				} else
					return variables.instructions.CV(letter, abbrev, field)(_);
			} else {
				for (var i = 0; i < ctx.length; i++) {
					var table = frame.context.tables[ctx[i]];

					if (table.desc.columns[field]) {
						var col = table.desc.columns[field];
						return {
							sql: abbrev + '.' + field + '_0',
							type: col && col.type,
						};
					}
				}
				return variables.instructions.CV(letter, abbrev, field)(_);
			}
		};
	},
	SQLF: function(field, args) {
		var sqlFunc = sqlFunctions[field];
		//if (!sqlFunc) return flowControl.instructions.F(field, args);
		return function sqlf$do(_) {
			var frame = glob.context.x3frame;
			if (!frame.tryingSql) return flowControl.instructions.F(field, args)(_);

			var cst = true;
			var argSqls = args.map_(_, function(_, arg) {
				var s = genSql(_, arg);
				if (!s.isConstant) cst = false;
			});
			if (cst) return flowControl.instructions.F(field, args)(_);
			else if (sqlFunc) return sqlFunc.apply(this, argSqls);
			else throw tooComplex();
		};
	},
	SQLAND: binaryOp('AND', 'AND', 'boolean'),
	SQLOR: binaryOp('OR', 'OR', 'boolean'),
	SQLEQ: binaryOp('EQ', '=', 'boolean'),
	SQLNE: binaryOp('NE', '<>', 'boolean'),
	SQLLT: binaryOp('LT', '<', 'boolean'),
	SQLLE: binaryOp('LE', '<=', 'boolean'),
	SQLGT: binaryOp('GT', '>', 'boolean'),
	SQLGE: binaryOp('GE', '>=', 'boolean'),
	SQLADD: binaryOp('ADD', 'CONCAT', 'string', '+', 'number'),
	SQLSUB: binaryOp('SUB', 'CONCAT', 'string', '-', 'number'),
	SQLMUL: binaryOp('MUL', '*', 'number'),
	SQLDIV: binaryOp('DIV', '/', 'number'),
};