var errors = require('./errors');
var X3Error = errors.X3Error;
var tdouble = require('./tdouble') ;
var tinteger = require('./tinteger') ;
var tstring = require('./tstring') ;
/* 
 * Line numbers
 */
// _sourceLoc and _sourceFile are set at 'require' time
// _sourceLoc is incremented as we load statements
var _sourceFile = null;
var _moduleName = null;
exports.sourceLoc = {
	module: _moduleName,
	line: 0,
};


exports.badOperand = function(x) {
	return new X3Error(10, "bad operand" + x? (": "+x + " (type " + x.constructor.name + ")"):"");
};

exports.badArgumentType = function(x) {
	return new X3Error(10, "bad argument: " + x + " (type " + x.constructor.name + ")");
};

exports.checkNumber = function(x) {
	if (!x.x3IsNumeric || !x.x3IsNumeric()) throw exports.badArgumentType(x);
};

exports.checkInteger = function(x) {
	if (!x3IsInteger(x)) throw exports.badArgumentType(x);
};

exports.checkString = function(x) {
	if (typeof x!== 'string' ) throw exports.badArgumentType(x);
};

exports.checkArray = function(x) {
	if (!Array.isArray(x)) throw exports.badArgumentType(x);
};

exports.checkMonoArray = function(x) {
	if (!Array.isArray(x)) throw exports.badArgumentType(x);
	if (x[0] !== 1) throw new X3Error(55, "bad array dimension: " + x[0]);
};

exports.checkNotZero = function(x) {
	if (!x.x3IsZero || !x.x3IsZero( )) throw new X3Error(53);
};

exports.x3IsDouble = function(val) {
	return val instanceof tdouble.Double ;
}
exports.x3IsInteger = function(x) {
	return typeof x === 'number';
};

exports.instructions = {
	C: function(x) {
		var fn = function c$do(_) {
			//console.log(x);
			return x;
		};
		fn.value = x;
		return fn;
	},
	A: function(items, forget) {
		return function a$do(_) {
			var results = !forget && [];
			for (var i = 0; i < items.length; i++) {
				var item = items[i];
				var v = item.value !== undefined ? item.value : item(_);
				results && results.push(v);
			}
			return results;
		};
	},
	NIY: function(node) {
		return function niy$do(_) {
			throw new X3Error(33, "NIY: " + (node && node.tag));
		};
	},
	BEGIN: function(mod) {
		_sourceFile = mod.filename.replace(/\.js$/, ".src");
		_moduleName = mod.filename.replace(/[\/\/]([^\/\/]*).js$/, "$1");
	},
	NL: function(delta) {
		exports.sourceLoc = {
			file: _sourceFile,
			line: delta ? exports.sourceLoc.line + delta : 1
		};
		return null;
	},
};