"use strict";
var util = require('./util') ;
var errors = require('./errors') ;
var X3Error = errors.X3Error ;
var glob = require('streamline/lib/globals') ;
var tdouble = require('./tdouble') ;
var bcd = require('./bcd') ;


function fac(n) {
	return (n > 1) ? n * fac(n - 1) : 1;
}
function anp(n, p) {
	return fac(n)/fac(n-p);
}

function toRadians(angle) {
	var frame = glob.context.x3frame;
	switch(frame.context.sys.values.adxmda) {
		case 0 : return angle * (Math.PI / 180); //Degrees => Radians
		case 2 : return angle * (Math.PI / 200); //Grades => Radians
	}
	return angle;
}

exports.functions = {
	ABS: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			return x.x3Abs();
		}
	},
	MOD: {
		count: 2,
		fn: function mod(x, y) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			if (!y.x3IsNumeric()) throw util.badOperand(y) ;	
			return x.x3Mod(y) ;
		}
	},
	RND: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	

			return new tdouble.Double(x.x3ToDouble().valueOf()*Math.random());		
		}
	},
	SGN: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			return x.x3Compare(0);
		}
	},
	SQR: {
		count: 1,
		fn: function(x) { 
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			return new tdouble.Double(Math.sqrt(x.x3ToDouble().valueOf()));
		}
	},
	AR2: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			if (util.x3IsInteger(x)) return x ;

			var b = x.x3Abs().x3Mul(bcd.fromInteger(100)).x3Add( bcd.fromDouble(0.5) ) ;
			var sign=(x.x3ToDouble().valueOf()<0)?-1:1;
			return b.x3Truncate().x3Div(bcd.fromInteger(100)).x3Mul(sign) ;
		}
	},
	ARR: {
		count: 2,
		fn: function(x, y) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			if (!y.x3IsNumeric()) throw util.badOperand(y) ;	
			if (y.x3IsZero()) return( x ) ;	
						
			var val = x.x3Div(y) ;
			var sign=(val.valueOf()<0)?-1:1;

			return y.x3Mul( val.abs().add(bcd.fromDouble(0.5)).x3Truncate().x3Mul(sign) ) ;
		}
	},
	FIX: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;	
			if (util.x3IsInteger(x)) return x ;

			return x.x3Truncate().x3ToDouble().valueOf() ;
		}
	},
	INT: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.floor(x.x3ToDouble().valueOf()));
		}
	},
	ANP: {
		count: 2,
		fn: function(n, p) {
			if (!n.x3IsNumeric()) throw util.badOperand(n) ;
			if (!p.x3IsNumeric()) throw util.badOperand(p) ;
			return new tdouble.Double(anp(n.x3ToDouble().valueOf(), p.x3ToDouble().valueOf()));
		}
	},
	CNP: {
		count: 2,
		fn: function(n, p) {
			if (!n.x3IsNumeric()) throw util.badOperand(n) ;
			if (!p.x3IsNumeric()) throw util.badOperand(p) ;
			return new tdouble.Double(anp(n.x3ToDouble().valueOf(), p.x3ToDouble().valueOf()) / anp(p.x3ToDouble().valueOf()));
		}
	},
	FAC: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(fac(x.x3ToDouble().valueOf()));
		}
	},
	COS: {
		count: 1,
		fn: function(angle) {
			if (!angle.x3IsNumeric()) throw util.badOperand(angle) ;
			return new tdouble.Double(Math.cos(toRadians(angle.x3ToDouble().valueOf())));
		}
	},
	SIN: {
		count: 1,
		fn: function(angle) {
			if (!angle.x3IsNumeric()) throw util.badOperand(angle) ;
			return new tdouble.Double(Math.sin(toRadians(angle.x3ToDouble().valueOf())));
		}
	},
	TAN: {
		count: 1,
		fn: function(angle) {
			if (!angle.x3IsNumeric()) throw util.badOperand(angle) ;
			return new tdouble.Double(Math.tan(toRadians(angle.x3ToDouble().valueOf())));
		}
	},
	ACOS: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.acos(x.x3ToDouble().valueOf()));
		}
	},
	ASIN: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.asin(x.x3ToDouble().valueOf()));
		}
	},
	ATAN: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.atan(x.x3ToDouble().valueOf()));
		}
	},
	ACH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.log(x.x3ToDouble().valueOf() + Math.sqrt(x.x3ToDouble().valueOf() * x.x3ToDouble().valueOf() - 1)));
		}
	},
	ASH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.log(x.x3ToDouble().valueOf() + Math.sqrt(x.x3ToDouble().valueOf() * x.x3ToDouble().valueOf() + 1)));
		}
	},
	ATH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.log((1 + x.x3ToDouble().valueOf()) / (1 - x.x3ToDouble().valueOf())) / 2);
		}
	},
	CH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double((Math.exp(x.x3ToDouble().valueOf()) + Math.exp(-x.x3ToDouble().valueOf())) / 2);
		}
	},
	SH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double((Math.exp(x.x3ToDouble().valueOf()) - Math.exp(-x.x3ToDouble().valueOf())) / 2);
		}
	},
	TH: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double((Math.exp(2 * x.x3ToDouble().valueOf()) - 1) / (Math.exp(2 * x.x3ToDouble().valueOf()) + 1));
		}
	},
	EXP: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.exp(x.x3ToDouble().valueOf()));
		}
	},
	LN: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(Math.log(x.x3ToDouble().valueOf()));
		}
	},
	LOG: {
		count: 1,
		fn: function(x) {
			if (!x.x3IsNumeric()) throw util.badOperand(x) ;
			return new tdouble.Double(parseFloat( (Math.log(x.x3ToDouble().valueOf()) / Math.LN10).toFixed(10) ) );
		}
	},
	PI: {
		count: 0,
		fn: function() {
			return new tdouble.Double(Math.PI) ;
		}
	},
	SETBIT: {
		count: 3,
		fn: function(val,pos,bit) {
			return  bit==1 ? val | (1 << (pos-1)) : val & ~(1 << (pos-1));
		}
	},
	GETBIT: {
		count: 2,
		fn: function(val,pos) {
			return (val & (1 << (pos-1)))?1:0;
		}
	}
};