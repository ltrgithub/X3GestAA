"use strict";

var util = require('./util');
var helpers = require('syracuse-core/lib/helpers');
var tracer = require("syracuse-trace/lib/helper").getTracer("etna.engine");
var variables = require('./variables');

var DBTableParent = require('./dbtableparent').DBTableParent;
var DBCursor = require('./dbcursor').DBCursor;

var DBTableSQL = helpers.defineClass(function(driver, abbrev, superv, loc, qry) {
	var self = this;
	DBTableParent.call(self, driver, abbrev, superv, loc);

	self.query = qry;
	return self;
}, DBTableParent, {
	init: function(_) {
		return this;
	},

	declVar: function(type, name) {
		var self = this;

		self.values[name] = variables.types[type[1]].def;
		self.types[name] = type;
	},

	x3OpenFor: function(_, fieldList, tcnx) {
		var self = this;
		var utilDriver = require("etna-supervisor/lib/drivers/util");

		/* query describe  */

		var desc = self.driver.describeQuery(_, self.query, self.superv.folderName);
		var descobj = {};

		for (var i = 0; i < desc.length; i++) {
			descobj[desc[i].name] = {
				"name": fieldList[i].name,
				"typtyp": fieldList[i].typtyp,
			};
		}
		var maptrim = utilDriver.mapFromSql(self.driver, self.abbrev, descobj);

		// execution ---------------------------------------
		var cf;
		var dbrd = {};
		var tables = {};
		tables[self.abbrev] = self;

		if (tcnx) {
			var rdr = self.driver.reader(_, tcnx, self.query, [], dbrd);
			cf = new DBCursor(rdr, dbrd.reader, tables, maptrim, [], null, 0);
		} else {
			self.driver.withConnection(_, function(_, cnx) {
				var rdr = self.driver.reader(_, cnx, self.query, [], dbrd);
				cf = new DBCursor(rdr, dbrd.reader, tables, maptrim, [], null, 0);
			});
		}

		return cf;
	},

	x3CloseFor: function() {
		var self = this;
	}

});

exports.DBTableSQL = DBTableSQL;