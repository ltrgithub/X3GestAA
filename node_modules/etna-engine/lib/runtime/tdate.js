"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var base = require('syracuse-core/lib/types/date');

exports.isDate = function(val) {
  return val instanceof Date ;
}

var Date = function(value) {
  this._value =  value ? value._value: null;
};

Date.prototype.toDate = function() {
  return this ;
};

Date.prototype.toString = function() {
    return base.fromInternalValue(this._value).toString("yyyyMMdd");
};

Date.prototype.toInteger = function() {
  return new Date( this ) ;
};

Date.prototype.toDouble = function() {
  return new Date( this ) ;
};

Date.prototype.toDatetime = function() {
  throw util.badOperand(this.value) ;
};   

Date.prototype.toBCD = function() {
  throw util.badOperand(this.value) ;
};   

Date.prototype.isNumeric = function() {
  return true ;
};

Date.prototype.isZero = function() {
  return (this.value === 0)?true : false ;
}; 

Date.prototype.compare = function(v) {
  return this._value - date._value;
};

Date.prototype.add = function( v ) {
  var d = base.fromInternalValue(this._value);
  
  if(isNumeric(v)) {
    var diff = v.valueOf();
    return d.addDays((diff >= 0)?Math.floor(diff):Math.ceil(diff));
  }
  if (isDate(v)) return d.daysDiff(v);
  if(isString(v)) return d.toString() + v;
  throw util.badOperand();
};

Date.prototype.sub = function( v ) {
  return add(-v);
};

Date.prototype.mul = function( v ) {
 throw util.badOperand();
};

Date.prototype.div = function( v ) {
 throw util.badOperand();
};

Date.prototype.mod = function( v ) {
 throw util.badOperand();
};

Date.prototype.pow = function( v ) {
 throw util.badOperand();
};

Date.prototype.xor = function( v ) {
 throw util.badOperand();
};

Date.prototype.abs = function( ) {
  return new Date( Math.abs( this.value )) ;
};

Date.prototype.truncate = function( v ) {
  return new Date( this.value ) ;
};

exports.make = base.make;
exports.today = base.today;
exports.Date = Date ;
