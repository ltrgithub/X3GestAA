"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var base = require('syracuse-core/lib/types/date');

var ORIGIN = base.make(1600, 1, 1);
var ENDDATE = base.make(9999, 12, 31);
var NULLDATE = base.make(0, 0, 0);

var _prototype = Object.getPrototypeOf(base.today());

Object.defineProperty(_prototype, 'x3ToString', {
	value: function() {
		return this.x3IsZero() ? "000000" : this.toString("yyyyMMdd");
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToJson', {
	value: function() {
		return this.x3IsZero() ? "0000-00-00" : this.toString("yyyy-MM-dd");
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3NumDollar', {
	value: function() {
		return this.x3IsZero() ? "00/00/0000" : this.toString("dd/MM/yyyy");
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToInteger', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Val', {
	value: function() {
		return this.x3IsZero() ? 0 : this.x3ToString();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDouble', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDate', {
	value: function() {
		return this;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDatetime', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToBCD', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3IsNumeric', {
	value: function() {
		return false;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3IsZero', {
	value: function() {
		return !this || !this.year || !this.month || !this.day;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, "x3IsEmpty", {
	value: function() {
		throw util.badOperand(this);
	},
	enumerable: false
});

Object.defineProperty(_prototype, 'x3Compare', {
	value: function(v) {
		return (this.compare(v) > 0) ? 1 : (this.compare(v) < 0) ? -1 : 0;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, '_addOrSub', {
	value: function(v, op) {
		if (v.x3IsNumeric()) {
			var d = (this.x3IsZero()) ? ORIGIN : this;
			var diff = op * v.x3ToInteger();

			if (this.x3IsZero()) diff -= 1;
			var r = d.addDays((diff >= 0) ? Math.floor(diff) : Math.ceil(diff));
			if (r.compare(ENDDATE) > 0) throw new X3Error(56, "");
			return r;
		}
		if (util.x3IsDate(v)) return this.daysDiff(v);
		if (util.x3IsString(v)) return this.x3ToString().x3Add(v);
		throw util.badOperand();
	},
	enumerable: false
});

Object.defineProperty(_prototype, 'x3Add', {
	value: function(v) {
		var date = this._addOrSub(v, 1);
		return date > ENDDATE.valueOf() ? ENDDATE : date;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Sub', {
	value: function(v) {
		var date = this._addOrSub(v, -1);
		return date < ORIGIN.valueOf() ? NULLDATE : date;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mul', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Div', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mod', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Pow', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Xor', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Abs', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Truncate', {
	value: function(v) {
		return new Date(this._value);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Nday', {
	value: function(origin) {
		return (this.x3IsZero()) ? new Number(-1) : new Number(this.daysDiff(origin));
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3AddDays', {
	value: function(n) {
		if (n.x3IsNumeric()) {
			if (n < 0) return NULLDATE;
			var date = this._addOrSub(n, 1);
			if (date < ORIGIN) return ORIGIN;
			else if (date > ENDDATE) return ENDDATE;
			return date;
		}
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3AddMonths', {
	value: function(months) {
		if (months.x3IsNumeric()) {
			var d = this.addMonths(months.valueOf());
			if (d.x3Compare(ORIGIN) < 0 || d.x3Compare(ENDDATE) > 0) throw new X3Error(56, "out off limit");
			return d;
		}
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Year', {
	get: function() {
		return this.x3IsZero() ? 0 : this.year;
	},
	set: function(year) {
		this.year = year;
	},
	enumerable: false,
});

exports.parse = function(str, format) {
	var date = base.parse(str, format);
	if (!date.year || !date.month || date.month > 12 || !date.day || date.day > 31) return NULLDATE;
	return (date.compare(ORIGIN) < 0) ? NULLDATE : date;
};

exports.make = base.make;
exports.year = base.year;
exports.today = base.today;
exports.dayName = base.dayName;
exports.today = base.today;
exports.makeInWeek = base.makeInWeek;
exports.monthName = base.monthName;
exports.fromJsDate = base.fromJsDate;
exports.toJsDate = base.toJsDate;

exports.ORIGIN = function() {
	return ORIGIN;
};
exports.NULLDATE = function() {
	return NULLDATE;
};
exports.ENDDATE = function() {
	return ENDDATE;
};