"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var base = require('syracuse-core/lib/types/date');
var tstring = require('./tstring');
var tinteger = require('./tinteger');

exports.isDate = function(val) {
  return val instanceof Date ;
}

var Date = (function() {
  function Date(value) {
    this._value =  value.year ? value: base.fromInternalValue(value);
  };

  Date.prototype.toDate = function() {
    return this ;
  };

  Date.prototype.toString = function() {
      return this._value.toString("yyyyMMdd");
  };

  Date.prototype.toTString = function() {
      return new tstring.TString(this.toString()) ;
  };

  Date.prototype.toInteger = function() {
    return new Date( this ) ;
  };

  Date.prototype.toDouble = function() {
    return new Date( this ) ;
  };

  Date.prototype.toDatetime = function() {
    throw util.badOperand(this.value) ;
  };   

  Date.prototype.toBCD = function() {
    throw util.badOperand(this.value) ;
  };   

  Date.prototype.isNumeric = function() {
    return true ;
  };

  Date.prototype.isString = function() {
    return false ;
  };


  Date.prototype.isZero = function() {
    return (this.value === 0)?true : false ;
  }; 

  Date.prototype.compare = function(v) {
    return this._value - date._value;
  };

  Date.prototype.add = function( v ) {
   
    if(v.isNumeric() ) {
      var diff = v.valueOf();
      return this._value.addDays((diff >= 0)?Math.floor(diff):Math.ceil(diff));
    }
    if (isDate(v)) return this._value.daysDiff(v);
    if(v.isString()) return this._value.toString() + v;
    throw util.badOperand();
  };

  Date.prototype.sub = function( v ) {
    return add(-v);
  };

  Date.prototype.mul = function( v ) {
   throw util.badOperand();
  };

  Date.prototype.div = function( v ) {
   throw util.badOperand();
  };

  Date.prototype.mod = function( v ) {
   throw util.badOperand();
  };

  Date.prototype.pow = function( v ) {
   throw util.badOperand();
  };

  Date.prototype.xor = function( v ) {
   throw util.badOperand();
  };

  Date.prototype.abs = function( ) {
    return new Date( Math.abs( this.value )) ;
  };

  Date.prototype.truncate = function( v ) {
    return new Date( this.value ) ;
  };

  Date.prototype.year = function() {
    return new tinteger.Integer(this._value.year);
  };

  Date.prototype.month = function() {
    return new tinteger.Integer(this._value.month);
  };

  Date.prototype.day = function() {
    return new tinteger.Integer(this._value.day);
  };

  Date.prototype.week = function() {
    return new tinteger.Integer(this._value.week);
  };


  return Date ;
})( ) ;

exports.make  = function(year, month, day){
  return new Date(base.make(year, month, day));
}

exports.today = function() {
  return new Date(base.today());
} 

exports.Date = Date ;
