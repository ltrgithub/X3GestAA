"use strict";

var fs = require('streamline-fs');
var path = require('path');
var util = require('./util');
var variables = require('./variables');
var X3Error = require('./errors').X3Error;
var config = require('../../../../nodelocal').config.etna;
if (!config) throw new Error("etna section missing in nodelocal.js");

/* 
 * Sequential I/0
 */

function File(name, fd, offset) {
	this.adxifs = ' ';
	this.adxirs = '\n';
	this.adxium = 50;

	this.write = function(_, str) {
		var len = fs.write(fd, str, offset, 'utf8', _);
		offset += len;
		return len;
	};
	this.close = function(_, frame) {
		var oldFd = fd;
		fd = null;
		oldFd && fs.close(oldFd, _);
	};
}

exports.functions = {
	DIR$: {
		count: 0,
		fn: function() {
			return process.cwd();
		}
	},
	FILINFO: {
		count: 2,
		async: true,
		fn: function(_, path, what) {
			var stat;
			try {
				stat = fs.stat(path, _);
			} catch (ex) {
				if (ex.code === 'ENOENT') return 0;
				else throw ex;
			}
			//console.log("FILINFO: " + path + ": " + require("sys").inspect(stat));
			switch (what) {
			case 0:
				// mode 
				return stat.mode;
			case 1:
				return stat.ino;
			case 2:
				// device id, 
			case 3:
				// device id, char or block mode (who cares?)
				return stat.dev;
			case 4:
				// link number
				return stat.nlink;
			case 5:
				return stat.uid;
			case 6:
				return stat.gid;
			case 7:
				return stat.size;
			case 8:
				return stat.uid;
			case 9:
				return stat.atime;
			case 10:
				return stat.mtime;
			case 11:
				return stat.ctime;
			default:
				// cannot find 
				throw new X3Error(10, "bad filinfo action: " + what);
			}
		},
	},
	FILCOM: {
		//count: 6,
		// some args are optional (for ex only 4 in AVOLUME_CSTD line 665)
		fn: function(folder, name, ext, app, drive, host) {
			util.checkString(folder);
			util.checkString(name);
			util.checkString(ext);
			app = app || "test";
			return config.tmpRoot + "/" + app + (folder ? "/" + folder : "") + "/" + name + (ext ? "." + ext : "");
		}
	},
	FILPATH: {
		count: -1,
		fn: function(folder, name, ext, app, drive, host) {
			util.checkString(folder);
			util.checkString(name);
			util.checkString(ext);
			app = app || "TEST_APP";
			return config.tmpRoot + (folder ? "/" + folder : "") + "/" + name + (ext ? "." + ext : "");
		}
	},
};

function findFile(frame, abbrev) {
	var file = frame.context.files[abbrev];
	if (!file) throw new X3Error(7, "Sequential file abbrev not found: " + abbrev);
	return file;
}
exports.instructions = {
	OPEN: function(abbrev, name, mode, seek) {
		var loc = util.sourceLoc;
		seek = seek || util.instructions.C(0);
		return function open$do(_, frame) {
			frame.sub.loc = loc;
			var nameVal = name(_, frame);
			var seekVal = seek(_, frame);
			if (seekVal < 0) {
				if (mode === "w") mode = "a";
				else if (mode === "r+") mode = "a+";
			}
			try {
				var fd = fs.open(nameVal, mode, _);
			} catch (ex) {
				// todo: analyze error to get error code
				throw new X3Error(20, ex.message);
			}
			frame.context.files[abbrev] = new File(nameVal, fd, seekVal);
		};
	},
	CLOSE: function(abbrev) {
		var loc = util.sourceLoc;
		return function close$do(_, frame) {
			frame.sub.loc = loc;
			var file = findFile(frame, abbrev);
			file.close(_, frame);
		};
	},
	IOMODE: function(abbrev, mode, value) {
		var loc = util.sourceLoc;
		mode = mode.toLowerCase();
		return function iomode$do(_, frame) {
			frame.sub.loc = loc;
			var file = findFile(frame, abbrev);
			var val = value(_, frame);
			if (file[mode] === undefined) throw new X3Error(22, "bad iomode: " + val);
			file[mode] = val;
		};
	},
	WRSEQ: function(abbrev, exps, sep) {
		var loc = util.sourceLoc;
		sep = sep || util.instructions.C(',');
		return function wrseq$do(_, frame) {
			frame.sub.loc = loc;
			var file = findFile(frame, abbrev);
			var vals = exps(_, frame);
			var sepVal = sep === null ? file.adxifs : sep(_, frame);
			return file.write(_, vals.join(sepVal) + file.adxirs);
		};
	}
};