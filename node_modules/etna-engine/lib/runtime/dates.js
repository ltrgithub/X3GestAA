"use strict";
var errors = require('./errors');
var util = require('./util');
var time = require('syracuse-core/lib/types/time');

var date     = require('etna-engine/lib/runtime/tdate') ;
var datetime = require('etna-engine/lib/runtime/tdatetime') ;
var tinteger = require('etna-engine/lib/runtime/tinteger') ;

var variables = require('./variables');

var ORIGIN = date.make(1600, 1, 1);

exports.ORIGIN = ORIGIN;

function x3DateCasse(val) {
	return val.substring(0,1).toUpperCase() + val.substring(1);
}

exports.functions = {
	DAY: {
		count: 1,
		fn: function(d) {
			if (d.day) return d.day();
			throw util.badArgumentType(d);			
		}
	},
	DAYN: {
		count: 1,
		fn: function(d) {
			// shift sunday from 0 to 7, others unchanged
			return 1 + (d.weekDay + 6) % 7;
		}
	},
	MONTH: {
		count: 1,
		fn: function(d) {
			if (d.month) return d.month();
			throw util.badArgumentType(d);
		}
	},
	NDAY: {
		count: 1,
		fn: function(d) {
			if (d.nday) return d.nday(ORIGIN);
			throw util.badArgumentType(d);
		}
	},
	WEEK: {
		count: 1,
		fn: function(d) {
			if (d.week) return d.week();
			throw util.badArgumentType(d);
		}
	},
	YEAR: {
		count: 1,
		fn: function(d) {
			if (d.year) return d.year();
			throw util.badArgumentType(m);
		}
	},
	DAY$: {
		count: 1,
		fn: function(d) {
			if (date.isDate(d)) d = d.weekDay;
			else if (util.isInteger(d)) d = d % 7;
			else throw util.badArgumentType(d);
			return x3DateCasse(date.dayName(d));
		}
	},
	MONTH$: {
		count: 1,
		fn: function(m) {
			if (date.isDate(m)) m = m.month;
			else if (util.isInteger(m)) m = 1 + (m + 11) % 12;
			else throw util.badArgumentType(m);
			return x3DateCasse(date.monthName(m));
		}
	},
	TIME$: {
		count: 0,
		fn: function() {
			return time.now().toString();
		}
	},
	ADDMONTH: {
		count: 2,
		fn: function(d, dm) {
			return d.addMonths(dm);
		}
	},
	AWEEK: {
		count: 2,
		fn: function(w, y) {
			return date.makeInWeek(y, w, 1);
		}
	},
	DATE$: {
		count: 0,
		fn: function() {
			return date.today();
		}
	},
	DATETIME$: {
		count: 0,
		fn: function() {
			return datetime.now();
		}
	},
	GDATETIME$: {
		count: 1,
		fn: function(s) {
			return datetime.parse(s);
		}
	},
	EOMONTH: {
		count: 1,
		fn: function(d) {
			return d.endOfMonth();
		}
	},
	GDAT$: {
		//count: 3, -- sometimes used with 1 - see AFNC line 588
		fn: function(d, m, y) {
			var dd = 0,
				dy = 0;
			if (d <= 0) dd = d - 1, d = 1;
			if (m <= 0 || m > 12) dy = Math.floor((m - 1) / 12), y += dy, m -= dy * 12;
			var d = date.make(y, m, d);
			return dd ? d.addDays(dd) : d;
		}
	},
	NDAY$: {
		count: 1,
		fn: function(n) {
			return ORIGIN.addDays(n);
		}
	},
	TIME: {
		count: 0,
		fn: function() {
			return time.now().value % (24 * 3600);
		}
	},
	TIMESTAMP$: {
		count: 0,
		fn: function() {
			return datetime.now().toString();
		}
	},

};

exports.instructions = {
	DATE: function(year, month, day) {
		return util.instructions.C(date.make(year, month, day));
	}
};