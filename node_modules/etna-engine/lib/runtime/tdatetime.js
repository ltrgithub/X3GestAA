"use strict";
var util = require('./util');
var base = require('syracuse-core/lib/types/datetime');
var tdate = require('./tdate');

var _prototype = Object.getPrototypeOf(base.now());

Object.defineProperty(_prototype, 'x3ToString', {
	value: function() {
		return (this.isUndefined()) ?
			"0000-00-00T00:00:00Z" :
			base.Datetime.prototype.toString.call(this, "yyyy-MM-ddTHH:mm:ssZ");
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3NumDollar', {
	value: function() {
		return (this.isUndefined()) ?
			"0000-00-00T00:00:00Z" :
			this.x3ToString();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToInteger', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDouble', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDate', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToBCD', {
	value: function() {
		throw util.badOperand();
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDatetime', {
	value: function() {
		return this;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToBlbfile', {
	value: function() {
		var dd = tdate.make(this.year, this.month, this.day);
		var dif = dd.x3Sub(tdate.ORIGIN()) + 1;
		var n = (((dif * 24 + this.hour)) * 60 + this.minute) * 60 + this.second;

		return n.x3ToBlbfile(8);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3IsNumeric', {
	value: function() {
		return false;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3IsZero', {
	value: function() {
		return !this || !this.year || !this.month || !this.day;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, "x3IsEmpty", {
	value: function() {
		throw util.badOperand(this);
	},
	enumerable: false
});

Object.defineProperty(_prototype, 'x3Compare', {
	value: function(v) {
		if (!util.x3IsDatetime(v)) throw util.badOperand();
		return this.compare(v) || 0;

	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Add', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Sub', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mul', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Div', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mod', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Pow', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Xor', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Abs', {
	value: function(v) {
		throw util.badOperand(v);
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3Truncate', {
	value: function(v) {
		return this.value;
	},
	enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToSql', {
	value: function(driver) {
		return (this.x3IsZero()) ? driver.nullDate() : this.toJsDate();
	},
	enumerable: false,
});

exports.x3Parse = function(str) {
	if (/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}\.\d{3}Z$/.test(str.toString())) {
		return base.parse(str.toString());
	} else if (/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}Z$/.test(str.toString())) {
		return base.parse(str.toString(), "yyyy-MM-ddTHH:mm:ssZ");
	} else if (/^\d{4}-\d{2}-\d{2}Z$/.test(str.toString())) {
		return base.parse(str.toString(), "yyyy-MM-ddZ");
	} else if (/^\d{2}:\d{2}:\d{2}Z$/.test(str.toString())) {
		return base.parse(str.toString(), "HH:mm:ssZ");
	}
	return new base.Datetime();
};

exports.now = function() {
	return base.now(true);
};

exports.Datetime = base.Datetime;
exports.toJsDate = base.toJsDate;
exports.fromJsDate = base.fromJsDate;