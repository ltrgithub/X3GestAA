"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var base = require('syracuse-core/lib/types/datetime');
var tstring = require('./tstring');
var tinteger = require('./tinteger');

var _prototype = Object.getPrototypeOf(base.now());

Object.defineProperty(_prototype, 'x3ToString', {
  value: function() {
    console.log("tdatetime.x3ToString");
    return (this.isUndefined())?
    "0000-00-00T00:00:00Z":
    base.Datetime.prototype.toString.call(this,"yyyy-MM-ddTHH:mm:ss")+"Z";
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3NumDollar', {
  value: function() {    
    return (this.isUndefined())?
    "0000-00-00T00:00:00Z":
    this.x3ToString();
  },
  enumerable: false,
});


Object.defineProperty(_prototype, 'x3ToInteger', {
  value: function() {
    throw util.badOperand() ;
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDouble', {
  value: function() {
    throw util.badOperand() ;
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToDate', {
  value: function() {
    throw util.badOperand() ;
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3ToBCD', {
  value: function() {
    throw util.badOperand() ;
  },
  enumerable: false,
});


Object.defineProperty(_prototype, 'x3IsNumeric', {
  value: function() {
    return false ;
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3IsZero', {
  value: function() {
    return !this || !this.year || !this.month || !this.day;  
  },
  enumerable: false,
});

Object.defineProperty( _prototype, "x3IsEmpty", {
    value: function() {
      throw util.badOperand(this) ;
  },
  enumerable: false
}) ;


Object.defineProperty(_prototype, 'x3Compare', {
  value: function(v) {
    if(util.x3IsDatetime(v)) return this.compare(v);
    throw util.badOperand();
  },
  enumerable: false,
});


Object.defineProperty(_prototype, 'x3Add', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Sub', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mul', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Div', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Mod', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Pow', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Xor', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Abs', {
  value: function(v) {
   throw util.badOperand(v);
  },
  enumerable: false,
});

Object.defineProperty(_prototype, 'x3Truncate', {
  value: function(v) {
  return this.value;
  },
  enumerable: false,
});


exports.x3Parse = function(str) {
  if(/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}Z$/.test(str.toString())){
    return base.parse(str.toString(),"yyyy-MM-ddTHH:mm:ssZ");
  } else if(/^\d{4}-\d{2}-\d{2}Z$/.test(str.toString())){
    return base.parse(str.toString(),"yyyy-MM-ddZ");
  } else if(/^\d{2}:\d{2}:\d{2}Z$/.test(str.toString())){
    return base.parse(str.toString(),"HH:mm:ssZ");
  }
  return new base.Datetime();
}
exports.now  = function() {
  return base.now();
}

exports.Datetime = base.Datetime;