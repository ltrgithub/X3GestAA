"use strict";
var util = require('./util');
var base = require('syracuse-core/lib/types/datetime');
var tdate = require('./tdate');

var _prototype = Object.getPrototypeOf(base.now());

_prototype.x3ToString = function() {
	return (this.x3IsZero()) ?
		"0000-00-00T00:00:00Z" :
		base.Datetime.prototype.toString.call(this, "yyyy-MM-ddTHH:mm:ssZ");
};

_prototype.x3NumDollar = function() {
	return (this.x3IsZero()) ?
		"0000-00-00T00:00:00Z" :
		this.x3ToString();
};

_prototype.x3ToInteger = function() {
	throw util.badOperand();
};

_prototype.x3ToDouble = function() {
	throw util.badOperand();
};

_prototype.x3ToDate = function() {
	throw util.badOperand();
};

_prototype.x3ToBCD = function() {
	throw util.badOperand();
};

_prototype.x3ToDatetime = function() {
	return this;
};

_prototype.x3Serialize = function() {
	var dd = tdate.make(this.year, this.month, this.day);
	var dif = dd.x3Sub(tdate.ORIGIN()) + 1;
	var n = (((dif * 24 + this.hour)) * 60 + this.minute) * 60 + this.second;

	return n.x3Serialize(8);
};

_prototype.x3IsNumeric = function() {
	return false;
};

_prototype.x3IsZero = function() {
	return this.isUndefined() || this._value === 0 || !this.year || !this.month || !this.day;
};

_prototype.x3IsUndefined = _prototype.x3IsZero;

_prototype.x3IsEmpty = function() {
	throw util.badOperand(this);
};

_prototype.x3Compare = function(v) {
	if (!util.x3IsDatetime(v)) throw util.badOperand();
	return this.compare(v) || 0;

};

_prototype.x3Add = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Sub = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Mul = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Div = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Mod = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Pow = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Xor = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Abs = function(v) {
	throw util.badOperand(v);
};

_prototype.x3Truncate = function(v) {
	return this.value;
};

_prototype.x3ToSql = function(driver) {
	return (this.x3IsZero()) ? driver.nullDate() : this.toJsDate();
};


_prototype.x3Clone = function() {
	return new base.Datetime(this._value);
};

exports.x3Parse = function(str) {
	if (/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}\.\d{3}Z$/.test(str.toString())) {
		if (str === "0000-00-00T00:00:00.000Z")
			return new base.Datetime();
		return base.parse(str.toString());
	} else if (/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}Z$/.test(str.toString())) {
		str = str.replace("Z", ".000Z");
		if (str === "0000-00-00T00:00:00.000Z")
			return new base.Datetime();
		return base.parse(str.toString());;
	} else if (/^\d{4}-\d{2}-\d{2}Z$/.test(str.toString())) {
		str = str.replace("Z", "T00:00:00.000Z");
		if (str === "0000-00-00T00:00:00.000Z")
			return new base.Datetime();
		return base.parse(str.toString());
	}
	/* else if (/^\d{2}:\d{2}:\d{2}Z$/.test(str.toString())) {
		return base.parse(str.toString(), "HH:mm:ssZ");
	}*/
	return new base.Datetime();
};

exports.now = function() {
	return base.now(true);
};



exports.Datetime = base.Datetime;
exports.toJsDate = base.toJsDate;
exports.fromJsDate = base.fromJsDate;