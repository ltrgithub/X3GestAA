"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var base = require('syracuse-core/lib/types/datetime');


exports.isDatetime = function(val) {
  return val instanceof Datetime ;
}

var Datetime = function(value) {
  this._value =  value ? value._value: null;
};

Datetime.prototype = new base.Datetime();

Datetime.prototype.toDatetime = function() {
  return this ;
} ;

Datetime.prototype.toString = function() {
  return (this.isUndefined())?
    "0000-00-00T00:00:00Z":
    base.Datetime.prototype.toString.call(this,"yyyy-MM-ddTHH:mm:ss")+"Z";
} ;

Datetime.prototype.toInteger = function() {
  return new Datetime( this ) ;
} ;

Datetime.prototype.toDouble = function() {
  return new Datetime( this ) ;
} ;

Datetime.prototype.toDate = function() {
  throw util.badOperand(this.value) ;
} ;   

Datetime.prototype.toBCD = function() {
  throw util.badOperand(this.value) ;
} ;   

Datetime.prototype.isNumeric = function() {
return true ;
} ;

Datetime.prototype.isZero = function() {
return (this.value === 0)?true : false ;
} ; 

Datetime.prototype.add = function( v ) {
 throw util.badOperand();
} ;

Datetime.prototype.sub = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.mul = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.div = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.mod = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.pow = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.xor = function( v ) {
  throw util.badOperand();
} ;

Datetime.prototype.abs = function( ) {
  return new Datetime( Math.abs( this.value )) ;
} ;

Datetime.prototype.truncate = function( v ) {
  return new Datetime( this.value ) ;
} ;

exports.parse = function(str) {
  if(/^\d{4}-(?:1[0-2]|0\d{1})-\d{2}T\d{2}\:\d{2}\:\d{2}Z$/.test(str)){
    return new Datetime(base.parse(str,"yyyy-MM-ddTHH:mm:ssZ"));
  } else if(/^\d{4}-\d{2}-\d{2}Z$/.test(str)){
    return new Datetime(base.parse(str,"yyyy-MM-ddZ"));
  } else if(/^\d{2}:\d{2}:\d{2}Z$/.test(str)){
    return new Datetime(base.parse(str,"HH:mm:ssZ"));
  }
  return new Datetime();
}
exports.now  = function() {
  return new Datetime(base.now());
}
exports.Datetime = Datetime ;