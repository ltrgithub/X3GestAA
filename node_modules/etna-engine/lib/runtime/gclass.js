"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = require("syracuse-trace/lib/helper").getTracer("etna.engine");
var X3Error = require('./errors').X3Error;

// --------------------------------------------------------------
function VGClass(tbl) {
	this.table = tbl;
}

Object.defineProperty(VGClass.prototype, "ADXFNAME", {
	get: function() {
		var self = this;
		var tb = Object.keys(this.table.desc.columns).reduce(function(o, kn) {
			var c = self.table.desc.columns[kn];
			o.push(c.data.CODZONE);
			return o;
		}, ["~W"]);
		return [1, "", tb, 0, tb.length - 1];
	},
	set: function() {
		throw new X3Error(26, "Property adxfname is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "TAIREC", {
	get: function() {
		return 471;
	},
	set: function() {
		throw new X3Error(26, "Property tairec is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "NBZON", {
	get: function() {
		return Object.keys(this.table.desc.columns).length + 1 //(~W);
	},
	set: function() {
		throw new X3Error(26, "Property nbzon is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "FILENUME", {
	get: function() {
		return 0;
	},
	set: function() {
		throw new X3Error(26, "Property filenume is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "KEYNAME", {
	get: function() {
		return this.table.keys.reduce(function(t, k) {
			if (!k.hidden) t.push(k.name);
			return t;
		}, []);
	},
	set: function() {
		throw new X3Error(26, "Property keyname is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "KEYUNIQ", {
	get: function() {
		return this.table.keys.reduce(function(t, k) {
			if (!k.hidden) t.push((k.unique) ? 1 : 0);
			return t;
		}, []);
	},
	set: function() {
		throw new X3Error(26, "Property keyuniq is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "KEYLEN", {
	get: function() {
		return this.table.keys.reduce(function(t, k) {
			if (!k.hidden) t.push(0);
			return t;
		}, []);
	},
	set: function() {
		throw new X3Error(26, "Property keylen is readonly");
	},
	enumerable: false,
});


Object.defineProperty(VGClass.prototype, "NBIND", {
	get: function() {
		return this.table.keys.reduce(function(t, k) {
			if (!k.hidden) t += 1;
			return t;
		}, 0);
	},
	set: function() {
		throw new X3Error(26, "Property nbind is readonly");
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "CURRIND", {
	get: function() {
		var ck = this.table.currkey;


		for (var i = 0, j = 1, k; i < this.table.keys.length; i++) {
			k = this.table.keys[i];
			if (i === ck) return j;
			else if (!k.hidden) j++;
		}
		return 0;
	},
	set: function(ck) {
		for (var i = 0, j = 1, k; i < this.table.keys.length; i++) {
			k = this.table.keys[i];
			if (k.hidden) continue;
			else if (j === ck) break;
			else j++;
		}
		if (i >= this.table.keys.length) throw new X3Error(50, "");
		this.table.currkey = i;
	},
	enumerable: false,
});

Object.defineProperty(VGClass.prototype, "CURRLEN", {
	get: function() {
		var ck = this.table.keys[this.table.currkey];

		return (ck.items.length === this.table.currlen) ? 0 : this.table.currlen;
	},
	set: function(np) {
		var ck = this.table.keys[this.table.currkey];

		if ((np > ck.items.length) || (np < 0)) throw new X3Error(50, "");
		this.table.currlen = (np === 0) ? ck.items.length : np;
	},
	enumerable: false,
});

// --------------------------------------------------------------


// --------------------------------------------------------------
var GClass = helpers.defineClass(function(tbl) {
	var self = this;
	self.values = new VGClass(tbl);
	self.types = {
		ADXFNAME: " S",
		NBZON: " I",
		KEYNAME: " S",
		KEYUNIQ: " I",
		KEYLEN: " I",
		FILENUME: " I",
		NBIND: " I",
		CURRIND: " I",
		CURRLEN: " I",
		TAIREC: " I",
	};
	return self;
}, null, {

});
// --------------------------------------------------------------


exports.GClass = GClass;