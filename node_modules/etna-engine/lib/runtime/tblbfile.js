"use strict";
var helpers = require('syracuse-core/lib/helpers');
var util = require('./util');

function base64_encode(data) {
  //  discuss at: http://phpjs.org/functions/base64_encode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Bayron Guevara
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Rafał Kukawski (http://kukawski.pl)
  // bugfixed by: Pellentesque Malesuada
  //   example 1: base64_encode('Kevin van Zonneveld');
  //   returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
  //   example 2: base64_encode('a');
  //   returns 2: 'YQ=='

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    enc = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  do { // pack three octets into four hexets
    o1 = data.charCodeAt(i++);
    o2 = data.charCodeAt(i++);
    o3 = data.charCodeAt(i++);

    bits = o1 << 16 | o2 << 8 | o3;

    h1 = bits >> 18 & 0x3f;
    h2 = bits >> 12 & 0x3f;
    h3 = bits >> 6 & 0x3f;
    h4 = bits & 0x3f;

    // use hexets to index into b64, and append result to encoded string
    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
  } while (i < data.length);

  enc = tmp_arr.join('');

  var r = data.length % 3;

  return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
}

function base64_decode(data) {
  //  discuss at: http://phpjs.org/functions/base64_decode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (http://brett-zamir.me)
  // bugfixed by: Onno Marsman
  // bugfixed by: Pellentesque Malesuada
  // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
  //   returns 1: 'Kevin van Zonneveld'
  //   example 2: base64_decode('YQ===');
  //   returns 2: 'a'
  //   example 3: base64_decode('4pyTIMOgIGxhIG1vZGU=');
  //   returns 3: '✓ à la mode'

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    dec = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  data += '';

  do {
    // unpack four hexets into three octets using index points in b64
    h1 = b64.indexOf(data.charAt(i++));
    h2 = b64.indexOf(data.charAt(i++));
    h3 = b64.indexOf(data.charAt(i++));
    h4 = b64.indexOf(data.charAt(i++));

    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    o1 = bits >> 16 & 0xff;
    o2 = bits >> 8 & 0xff;
    o3 = bits & 0xff;

    if (h3 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i < data.length);

  dec = tmp_arr.join('');

  return decodeURIComponent(escape(dec.replace(/\0+$/, '')));
}

/*
function test(s) {
  var r = base64_decode(base64_encode(s));
  console.log(s + " => " +r);
}

test("Hi!");
test("Hi!a");

*/

var Blbfile = helpers.defineClass(function(v) { // constructor
    var self = this;
    if (v instanceof Buffer) {
      self.value = v ;
    }
    else throw util.badOperand(v) ;
  }, null, { // Pass null if no parent class - public methods follow

  valueOf : function() {
    var self = this;
    return self.value ;
  },
  // more public methods
  x3IsNumeric : function() {
    return false ;
  },
  x3AssertOverflow : function ( type ) {
    return true ;    
  },

  x3Minus : function(v) {
    throw util.badOperand(v) ;
  },

  x3ToDouble : function(v) {
    throw util.badOperand(v) ;
  },

  x3ToString : function(v) {
    var s="";
    for (var i=0, len=this.value.length; i<len; i++) {
         s+=String.fromCharCode(this.value[i]);
    }
    return s;
  },


  x3ToBCD : function(v) {
    throw util.badOperand(v) ;
  },

  x3ToInteger : function(v) {
    throw util.badOperand(v) ;
  },

  x3ToDate : function(v) {
    throw util.badOperand(v) ;
  },

  x3ToDatetime : function(v) {
    throw util.badOperand(v) ;
  },

  x3IsZero : function(v) {
    throw util.badOperand(v) ;
  },

  x3IsEmpty : function(v) {
    throw util.badOperand(v) ;
  },

  x3Length : function( ) {
    var self = this;
    return self.value.length ;
  },

  x3Compare : function( b ) {
    var self = this;
      if (!util.x3IsBlbfile( b ))
        throw util.badOperand(b) ;

    if (self.value.length < b.value.length) return -1 ;
    else if (self.value.length > b.value.length) return 1 ;
    else {
      for (var i = 0; i < this.value.length; i++) {
        if (self.value[i] < b.value[i]) return -1 ;
        else if (self.value[i] > b.value[i]) return 1 ;
      }
      return 0 ;
    }
  },

  x3Add : function( b ) {
    throw util.badOperand(b);    
  },

  x3Sub : function( b ) {
    throw util.badOperand(b);    
  },

  x3Mul : function( b ) {
    throw util.badOperand(b);    
  },

  x3Div : function( b ) {
    throw util.badOperand(b);    
  },

  x3Mod : function( b ) {
    throw util.badOperand(b);    
  },

  x3Pow : function( b ) {
    throw util.badOperand(b);
  },

  x3Xor : function( b ) {
    throw util.badOperand(b);
  },

  x3Abs : function(v) {
    throw util.badOperand(v);
  },

  x3Truncate : function(v) {
    throw util.badOperand(v);
  },

  x3ToBase64 : function() {
    return base64_decode(this.value);
  },

});

function fromString(c,t) {
  var b = new Buffer(c.length);

  for (var i=0, len=c.length; i<len; i++) {
       b[i] = c.charCodeAt(i);
  }
  return new Blbfile(b);
}

function fromBase64(s) {
  return new Blbfile(base64_encode(s));
}

exports.Blbfile = Blbfile ;

exports.functions = {
  TOBLBFILE: {
    count: 2,
    fn: function(c,t) {
      if (typeof c !== 'string') throw util.badOperand(c) ;
      if (typeof t !== 'number') throw util.badOperand(t) ;
      return fromString(c);
    }
  },
  TOCLBFILE: {
    count: 2,
    fn: function(b,t) {
      if (!util.x3IsBlbfile(b))  throw util.badOperand(b) ;
      if (typeof t !== 'number') throw util.badOperand(t) ;
      return b.x3ToString();
    }
  },
  TOBASE64: {
    count: 1,
    fn: function(b) {
      if (!util.x3IsBlbfile(b))  throw util.badOperand(b) ;
      return b.x3ToBase64();
    }
  },
  FROMBASE64: {
    count: 1,
    fn: function(c) {
      if (typeof c !== 'string') throw util.badOperand(c) ;
      return fromBase64(c);
    }
  }
};

exports.fromString = fromString;
exports.fromBase64 = fromBase64;
