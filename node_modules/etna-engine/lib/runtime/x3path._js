"use strict";
var fs = require('fs');

// / = 47
// : = 58
// . = 46
// 

var _volumes = getFolderVolumes();
var _defaultDir = "DefaultDir";
var _isWin = /^win/.test(process.platform);
var _dirsep = (_isWin) ? "\\" : "/";
var _slash = "/".charCodeAt(0);
var _dot = ".".charCodeAt(0);
var _dotdot = ":".charCodeAt(0);

// -----------------------------------------------------------
function _patabs(pat) {
	return (
		(pat.charCodeAt(0) === 47) ||
		(pat.charCodeAt(1) === 58) ||
		(
			(pat.charCodeAt(0) === 46) &&
			(
				(pat.charCodeAt(1) === 47) ||
				(!(pat.charCodeAt(1))) ||
				((pat.charCodeAt(1) === 46) && ((pat.charCodeAt(2) === 47) || (!(pat.charCodeAt(2)))))
			)
		)
	);
}

// -----------------------------------------------------------
function fromString(canstr) {

	var can = {};

	//replace \\	
	var str = canstr.replace(/\\/g, "/");

	// host
	var p = str.lastIndexOf("@");
	if (p >= 0) {
		if (p > 0) can.host = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// volume
	p = str.lastIndexOf("%");
	if ((p >= 0) && (!(_patabs(str)))) {
		if (p > 0) can.volume = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// app
	p = str.lastIndexOf(".");
	if ((p >= 0) && (!(_patabs(str)))) {
		if (p > 0) can.application = str.slice(0, p);
		str = str.substr(p + 1);
	}

	for (var i = str.length; i > 0; i--) {
		if ((str.charCodeAt(i - 1) === 47) ||
			(i === 2) && (str.charCodeAt(1) === 58))
			break;
	}

	if (i > 0) {
		var si = i;
		if (!(str.charCodeAt(i))) {
			// root case			
			if (i === 1) {
				//case '/'
				i++;
			} else if (str.charCodeAt(1) === 58) {
				if (i === 3) {
					//case 'c:/'
					i++;
				} else if (i === 2) {
					//case 'c:'
					var dd = str.slice(0, 1) + ":/";
					i = 4;
				}
			}
		}
		can.directory = dd || str.slice(0, i - 1);
		str = str.substr(si);
	}

	p = str.lastIndexOf("$");
	if (p >= 0) {
		can.extention = str.substr(p + 1);
		if (p > 0) can.name = str.slice(0, p);
	} else if (str !== "") can.name = str;

	return (can);
}

// -----------------------------------------------------------
// extract volumes directories
function getFolderVolumes() {
	var config = require("etna-engine/configRuntime");
	var dir = config.sandbox.directories;
	var vol = dir.reduce(function(vol, obj) {
		var v = (vol.isArray) ? vol : [];
		if (obj.volume)
			v.push({
				name: obj.volume,
				path: obj.path
			});
		return v;
	});
	return (vol);
}

function _getApplicationVolumes(_, app) {
	for (var i = 0; i < _volumes.length; i++) {
		try {
			fs.stat(_volumes[i].path + _dirsep + app, ~_);
			return _volumes[i].path;
		} catch (e) {
			if (e.code !== 'ENOENT') return _volumes[i].path;
		}

	}
	return undefined;
}

// -----------------------------------------------------------
function buildPath(_, can) {

	var vol, pat;
	if (can.volume) {
		for (var i = 0; i < _volumes.length; i++) {
			if (can.volume === _volumes[i].name) {
				vol = _volumes[i].path;
				break;
			}
		}
	}

	if (can.directory && _patabs(can.directory))
		pat = "";
	else if ((!(can.application)) || can.application === "" || can.application === "!")
		pat = (vol) ? vol.path : _defaultDir; // should nt exist
	else {
		if (!(vol)) pat = _getApplicationVolumes(_, can.application);
		if (!(pat)) pat = _defaultDir;
		pat += _dirsep + can.application;
	}

	if (can.directory) pat += (pat === "") ? can.directory : _dirsep + can.directory;
	if (can.name) pat += _dirsep + can.name;
	if (can.extention) pat += "." + can.extention;

	return pat;
}

// -----------------------------------------------------------
function filpath(_, dir, nam, ext, app, vol, hst) {
	var p, fca;
	var result = "";

	var can = fromString(nam);

	if ((can.directory === undefined) && (dir !== ""))
		can.directory = dir;

	if (can.directory)
		fca = (can.directory === "" || _patabs(can.directory)) ? true : false;
	else
		fca = false;

	// host
	if (can.host === undefined) {
		p = app.lastIndexOf("@");
		if (p >= 0) {
			can.host = app.slice(0, p);
			app = app.substr(p + 1);
		} else if (hst !== "")
			can.host = hst;
	}

	// volume
	if ((can.volume === undefined) && (!(fca))) {
		p = app.lastIndexOf("%");
		if (p >= 0) {
			can.volume = app.slice(0, p);
			app = app.substr(p + 1);
		} else if (vol !== "")
			can.volume = vol;
	}

	// application
	if ((can.application === undefined) && (!(fca)))
		can.application = app;

	// extention
	if ((can.extention === undefined) && (ext !== ""))
		can.extention = ext;

	// find host of  a known appication
	// ....

	// find the right application path
	//could we accept still accept this
	// I don't think so, it used sript and file

	if (can.application === "")
		can.application = "X3";
	// we simply get the current application


	// rebuild can string
	if (can.host) result += hst + "@";
	if (can.application) result += can.application + ".";
	if (can.directory) result += can.directory + "/";
	if (can.name) result += can.name;
	if (can.extention) result += "$" + can.extention;

	can.string = result;
	return (can);
}

var res = fromString("machine@SUPERV.TRT/filname$adx");
var res = fromString("machine@SUPERV.TRT/SUB/filname$adx");
var res = fromString("machine@SUPERV.TRT/SUB/filname");
var res = fromString("machine@SUPERV.filname");
var res = fromString("machine@SUPERV.filname$adx");
var res = fromString("machine@/home/adonix/toto$adx");
var res = fromString("machine@/adonix/toto$adx");
var res = fromString("machine@toto$adx");
var res = fromString("@SUPERV.TRT/adonix$adx");
var res = fromString("SUPERV.TRT/adonix$adx");
var res = fromString("c:/");
var res = fromString("c:\\");
var res = fromString("/");
var res = fromString("@/");
var res = fromString("@c:");
var res = fromString("@c:/");
var res = fromString("@c:\\");
var res = fromString("SUPERV.TRT/TRALALA/adonix$");
var res = fromString("/machin/chose/adonix$adx");
var res = fromString("C:\\taratata\\adonix$adx");

//console.log(res);

//console.log(_volumes ) ;
//console.log( _getApplicationVolumes(_, "X3" )) ;

//console.log(fs.stat("C:\\Adodev\\ADXV7.1\\dossiers\\X3", ~_)) ;
//console.log("/".charCodeAt(0)) ;
//console.log(".".charCodeAt(0)) ;
//console.log(":".charCodeAt(0)) ;

var can;
can = filpath(_, "", "", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "fic", "src", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "SUPERV", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "taratata");
console.log(can);
console.log(buildPath(_, can));