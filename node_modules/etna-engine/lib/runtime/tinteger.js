"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var Double = require('./tdouble').Double;
var bcd = require('./tbcd');

exports.MAX_INT = Math.pow(2, 31);
exports.MIN_SHORTINT = -Math.pow(2, 15);
exports.MAX_SHORTINT = Math.pow(2, 15) - 1;
exports.MIN_TINYINT = 0;
exports.MAX_TINYINT = 255;

Object.defineProperty(Number.prototype, "x3AssertOverflow", {
	value: function(type) {
		/* whatever the type, error 50 in this case*/

		if (Math.abs(this) >= Math.pow(2, 31))
			throw new X3Error(50, "");

		if (type === 'J')
			return (Math.abs(this) < Math.pow(2, 15) + ((this >= 0) ? 0 : 1)) ? true : false;
		else if (type === 'V')
			return ((this >= 0) && (this < Math.pow(2, 8))) ? true : false;

		return true;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Minus", {
	value: function() {
		return -this;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToInteger", {
	value: function() {
		return this;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToString", {
	value: function(v) {
		return "" + this;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToDouble", {
	value: function() {
		return new Double(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToBCD", {
	value: function() {
		// be carefull that x3ToBCD applies to numbers (see flowcontrol)
		//return bcd.fromInt32( this ) ;
		return bcd.fromDouble(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToDate", {
	value: function() {
		throw util.badOperand(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3ToDatetime", {
	value: function() {
		throw util.badOperand(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3IsNumeric", {
	value: function() {
		return true;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3IsZero", {
	value: function() {
		return (this === 0) ? true : false;
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3IsEmpty", {
	value: function() {
		throw util.badOperand(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Compare", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			var diff = this - b;
			return !diff ? 0 : ((diff > 0) ? 1 : -1);
		} else if (util.x3IsDouble(b)) {
			return this.x3ToDouble().x3Compare(b);
		} else if (util.x3IsBCD(b)) {
			return this.x3ToBCD().x3Compare(b);
		} else throw util.badOperand(b);

	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Add", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			return this + b;
		} else if (util.x3IsDate(b)) {
			return b.x3Add(this);
		} else if (util.x3IsDatetime(b)) {
			return b.x3Add(this);
		} else if (b.x3IsNumeric()) {
			return b.x3Add(this);
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Sub", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			return this - b;
		} else if (util.x3IsDouble(b)) {
			return this.x3ToDouble.x3Sub(b);
		} else if (util.x3IsBCD(b)) {
			return this.x3ToBCD().x3Sub(b);
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Mul", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			return this * b;
		} else if (b.x3IsNumeric()) {
			return b.x3Mul(this);
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Div", {
	value: function(b) {
		if (util.x3IsDouble(b)) {
			return this.x3ToDouble().x3Div(b);
		} else if (util.x3IsBCD(b)) {
			return this.x3ToBCD().x3Div(b);
		} else if (util.x3IsInteger(b)) {
			if (b.x3IsZero())
				throw new X3Error(53, "");

			if (this % b === 0) return this / b;
			else return this.x3ToBCD().x3Div(b.x3ToBCD());
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Mod", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			if (b.x3IsZero()) return this;
			return this % b;
		} else if (util.x3IsDouble(b)) {
			return this.x3ToDouble.x3Mod(b);
		} else if (util.x3IsBCD(b)) {
			return this.x3ToBCD().x3Mod(b);
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Pow", {
	value: function(b) {
		if (util.x3IsInteger(b)) {
			if (this === 0) {
				if (b >= 0) return 0;
				throw new X3Error(53, "");
			}
			if (b >= 0) return Math.pow(this, b);
			else return this.x3ToDouble().x3Pow(b);
		} else if (util.x3IsDouble(b)) {
			return this.x3ToDouble().x3Pow(b);
		} else if (util.x3IsBCD(b)) {
			return this.x3ToBCD().x3Pow(b);
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Xor", {
	value: function(b) {
		if (b.x3IsNumeric()) {
			var i = (this.x3IsZero()) ? 1 : 0;
			var j = (b.x3IsZero()) ? 1 : 0;

			return i ^ j;
		} else
			throw util.badOperand(b);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Abs", {
	value: function() {
		return Math.abs(this);
	},
	enumerable: false
});

Object.defineProperty(Number.prototype, "x3Truncate", {
	value: function(v) {
		return this;
	},
	enumerable: false
});