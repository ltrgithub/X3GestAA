"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var tstring = require('./tstring');
var tdate = require('./tdate');
var tdatetime = require('./tdatetime');
var tdouble = require('./tdouble');


exports.isInteger = function(val) {
	return val instanceof Integer ;
}

var Integer = (function() {
  function Integer( v ) {
    if ((typeof v === "number") && (Math.round(v) === v)) this.value = v ;
  } ;

  Integer.prototype.valueOf = function( ) {
    return this.value ;
  }

  Integer.prototype.toInteger = function() {
    return this ;
  } ;

  Integer.prototype.toString = function( v ) {
    return new tstring.String( ""+this.value ) ;
  } ;

  Integer.prototype.toDouble = function() {
    return new Double( this.value ) ;
  } ;
	
  Integer.prototype.toBCD = function() {
    return new BCD( this.value ) ;
  } ;

  Integer.prototype.toDate = function() {
    throw util.badOperand(this.value) ;
  } ; 	

  Integer.prototype.toDatetime = function() {
    throw util.badOperand(this.value) ;
  } ;       

  Integer.prototype.isNumeric = function() {
    return true ;
  } ;

  Integer.prototype.isZero = function() {
    return (this.value === 0) ? true : false ;
  } ;	

  Integer.prototype.compare = function( b ) {

  } ;	

  Integer.prototype.add = function( b ) {
    if (exports.isInteger(b)) {
      return new Integer( a.value + b.valueOf( )) ;
    } else if (tstring.isString( b )) {
      return this.toString( ).add( b ) ;
    } else if (tdate.isDate(b)) {
      return b.add( this ) ;
    } else if (tdatetime.isDatetime(b)) {
      return b.add( this ) ;
    } else if (tdouble.isDouble( b )) {
      return this.toDouble.add( b ) ;
    } else if (tbcd.isBCD(b)) {
      return this.toBCD( ).add( b ) ;
    }
    else
      throw util.badOperand( b );
  } ;

  Integer.prototype.sub = function( b ) {
    if (exports.isInteger(b)) {
      return new Integer( this.value - b.valueOf( )) ;
    } else if (tdouble.isDouble( b )) {
      return this.toDouble.sub( b ) ;
    } else if (tbcd.isBCD(b)) {
      return this.toBCD( ).sub( b ) ;
    }
    else
      throw util.badOperand( b );
  } ;

  Integer.prototype.mul = function( b ) {
    if (exports.isInteger(b)) {
      return new Integer( this.value * b.valueOf( )) ;
    } else if (tdouble.isDouble( b )) {
      return this.toDouble.mul( b ) ;
    } else if (tbcd.isBCD(b)) {
      return this.toBCD( ).mul( b ) ;
    }
    else
      throw util.badOperand( b );   
  } ;

  Integer.prototype.div = function( b ) {
    if (tdouble.isDouble( b )) {
      return this.toDouble( ).div( b ) ;
    } else if (tbcd.isBCD( b ) ) {
      return this.toBCD( ).div( b ) ;
    } else if (exports.isInteger( b )) {
      if (b.isZero( ))
        throw new X3Error(53) ;

      if (a.valueOf()%b.valueOf() === 0) return new Integer( this.value / b.valueOf( )) ;
      else return this.toBCD( ).div( b.toBCD( )) ;        
    }
  } ;


  Integer.prototype.mod = function( v ) {
    
  } ;

  Integer.prototype.pow = function( v ) {
    
  } ;

  Integer.prototype.xor = function( v ) {
    
  } ;

  Integer.prototype.abs = function( ) {
    return new Integer( Math.abs( this.value )) ;
  } ;

  Integer.prototype.truncate = function( v ) {
    return new Integer( this.value ) ;
  } ;

})( ) ;

exports.Integer = Integer ;