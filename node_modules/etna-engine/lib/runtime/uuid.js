"use strict";

var util = require("etna-supervisor/lib/util");
var tuuid = require("./tuuid");

function _UUID(value) {
	if(typeof value === 'undefined') {
		this.value = util.uuid('');
		return this;
	} else if (typeof value === 'string') {
		if(/^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(value) ) {
			this.value = value;
			return this;
		} else if(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(value) ){
			this.value = value.replace(/-/g, '');
			return this;
		}		
	}
	return undefined;
}

_UUID.prototype.toString = function() {
	//return this.value;
	var start=0;
	var suuid=this.value;
	return [8,4,4,4,12].map(function(len) {
		var s = suuid.substring(start,start+len);
		start += len;
		return s;
	}).join('-');
};

exports.isUUID = function(uuid) {
	return uuid instanceof _UUID;
};

exports.nullUuidString = function( ) {
	return "00000000000000000000000000000000" ;
};


exports.UUID = _UUID;
exports.generate = tuuid.generate;

exports.functions = {
	GETUUID: {
		count: 0,
		fn: function() {
			return tuuid.generate( ) ;
		}
	},
	NULLUUID:{
		count: 0,
		fn : function() {
			return tuuid.make( ) ;
		}
	},
	TOUUID: {
		count : 1,
		fn : function(s) {
			return tuuid.x3ToUuid( s ) ;
		}
	}

};