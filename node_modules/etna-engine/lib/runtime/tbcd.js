"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd') ;

/*
  function BCD( v ) {
    if (typeof v === "number")
      this.value = bcd.fromDouble(v) ;
    else if (bcd.isBCD( v ))
      this.value = v ;
    else if (tstring.isString( v ))
      this.value = bcd.fromString( ) ;
    else if (tinteger.isInteger( v ))
      this.value = bcd.fromInt32( v.valueOf( ) ) ;
    else if (tdouble.isDouble( v ))
      this.value = bcd.fromDouble( v.valueOf( ) ) ;
    else throw util.badOperand( v );  
  } ;
  */

Object.defineProperty( Uint8Array.prototype, "x3AssertOverflow", { 
  value: function (type) { 
    return true ;
  },
  enumerable: false   
}) ;


Object.defineProperty( Uint8Array.prototype, "x3Minus", {
  value :function( ) {
    return bcd.minus( this ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3ToBCD", {
  value : function() {
    return this ;
  },
  enumerable: false   
}) ;  

Object.defineProperty( Uint8Array.prototype, "x3ToString", {
  value: function( ) {
    return bcd.toString( this ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3ToInteger", {
  value: function() {
    return bcd.toInt32( this ) ;
  },
  enumerable: false   
}) ;
  
Object.defineProperty( Uint8Array.prototype, "x3ToDouble", {
  value: function() {
    return bcd.toDouble( this ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3ToDate", {
  value: function() {
    throw util.badOperand(this) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3ToDatetime", {
  value: function() {
    throw util.badOperand(this) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3IsNumeric", {
  value: function() {
    return true ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3IsZero", {
  value: function() {
    return bcd.isZero( this ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Compare", {
  value: function( b ) {
    if (util.x3IsDouble( b ))
      return a.x3ToDouble( ).x3Compare( b )
    if (b.x3IsNumeric( ))    
      return bcd.compare( this, b.x3ToBCD( ) ) ;
    else throw util.badOperand( v );  
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Add", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Add( b ) ;    
    } else if (b.x3IsNumeric( )) {
      return bcd.add( this, b.x3ToBCD( )) ;
    } else throw util.badOperand(b);    
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Sub", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Sub( b ) ;    
    } else if (b.x3IsNumeric( )) {
      return bcd.sub( this, b.x3ToBCD( )) ;
    } else throw util.badOperand(b);
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Mul", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Mul( b ) ;    
    } else if (b.x3IsNumeric( )) {
      return bcd.multiply( this, b.x3ToBCD( )) ;
    } else throw util.badOperand(b);  
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Div", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Div( b ) ;    
    } else if (b.x3IsNumeric( )) {
      return bcd.divide( this, b.x3ToBCD( )) ;
    } else throw util.badOperand(b);  
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Mod", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Mod( b ) ;
    } else if (b.x3IsNumeric( )) {
      if (b.x3IsZero( )) return this ;
      
      var dv = bcd.divide( this, b.x3ToBCD( )) ;      
      var fx = bcd.toInt32( dv ) ;
      var ml = bcd.multiply( bcd.fromInt32(fx), b.x3ToBCD( ) ) ;
      return bcd.sub( this, ml ) ;      
    } else throw util.badOperand(b);  
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Pow", {
  value: function( b ) {
    if (util.x3IsDouble(b)) {
      return this.x3ToDouble( ).x3Pow( b ) ;
    } else if (b.x3IsNumeric( )) {
      if (b.x3IsZero( ))
        return  1 ;

      var r = bcd.fromDouble( 1 ) ;
      var n = bcd.toInt32( b.x3ToBCD( ) ) ;

      for (var i = n; i > 0; i--) {
        r = bcd.multiply( r, this ) ;
      }

      return  r ;      
    } else
      throw util.badOperand(b);
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Xor", {
  value: function( b ) {
    if (b.x3IsNumeric( )) {
      var i = (this.x3IsZero())?1:0 ;
      var j = (b.x3IsZero())?1:0 ;

      return new  i ^ j  ;
    } else
      throw util.badOperand( b ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Abs", {
  value: function( ) {
    return bcd.abs( this ) ;
  },
  enumerable: false   
}) ;

Object.defineProperty( Uint8Array.prototype, "x3Truncate", {
  value: function( v ) {
    return bcd.truncate( this, 0 ) ;
  },
  enumerable: false   
}) ;


exports.instructions = {
  DECIMAL: function( v ) {
    return util.instructions.C( bcd.fromString(v) ) ;
  }
};