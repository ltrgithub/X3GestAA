"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var bcd = require('./bcd');
var tstring = require('./tstring');
var tinteger = require('./tinteger');
var tdouble = require('./tdouble');

exports.isBCD = function(val) {
  return val instanceof BCD ;
}

var BCD = (function() {
  function BCD( v ) {
    if (typeof v === "number")
      this.value = bcd.fromDouble(v) ;
    else if (bcd.isBCD( v ))
      this.value = v ;
    else if (tstring.isString( v ))
      this.value = bcd.fromString( ) ;
    else if (tinteger.isInteger( v ))
      this.value = bcd.fromInt32( v.valueOf( ) ) ;
    else if (tdouble.isDouble( v ))
      this.value = bcd.fromDouble( v.valueOf( ) ) ;
    else throw util.badOperand( v );  
  } ;

  BCD.prototype.assertOverflow = function ( type ) {
    return true ;    
  }

  BCD.prototype.valueOf = function( ) {
    return this.value ;
  } 

  BCD.prototype.minus = function( ) {
    return new BCD( bcd.minus( this.value) ) ;
  } 

  BCD.prototype.toBCD = function() {
    return this ;
  } ;

  BCD.prototype.toTString = function( ) {
    return new tstring.TString( bcd.toString( this.value ) ) ;
  } ;

  BCD.prototype.toString = function( ) {
    return bcd.toString( this.value ) ;
  } ;

  BCD.prototype.toInteger = function() {
    return new tinteger.Integer( bcd.toInt32( this.value ) ) ;
  } ;
  
  BCD.prototype.toDouble = function() {
    return new tdouble.Double( bcd.toDouble( this.value ) ) ;
  } ;

  BCD.prototype.toDate = function() {
    throw util.badOperand(this.value) ;
  } ;   

  BCD.prototype.toDatetime = function() {
    throw util.badOperand(this.value) ;
  } ;   

  BCD.prototype.isNumeric = function() {
    return true ;
  } ;

  BCD.prototype.isZero = function() {
    return bcd.isZero( this.value ) ;
  } ; 

  BCD.prototype.compare = function( b ) {
    if (tdouble.isDouble( b ))
      return a.toDouble( ).compare( b )
    if (b.isNumeric( )) {    
      return bcd.compare( this.value, b.toBCD( ).valueOf( ) ) ;
    } else throw util.badOperand( v );  
  } ; 

  BCD.prototype.add = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).add( b ) ;    
    } else if (b.isNumeric( )) {
      return new BCD( bcd.add( this.value, b.toBCD( ).valueOf( )) ) ;
    } else throw util.badOperand(b);    
  } ;

  BCD.prototype.sub = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).sub( b ) ;    
    } else if (b.isNumeric( )) {
      return new BCD(bcd.sub( this.value, b.toBCD( ).valueOf( ))) ;
    } else throw util.badOperand(b);
  } ;

  BCD.prototype.mul = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).mul( b ) ;    
    } else if (b.isNumeric( )) {
      return new BCD( bcd.multiply( this.value, b.toBCD( ).valueOf( ))) ;
    } else throw util.badOperand(b);  
  } ;

  BCD.prototype.div = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).div( b ) ;    
    } else if (b.isNumeric( )) {
      return new BCD( bcd.divide( this.value, b.toBCD( ).valueOf( ))) ;
    } else throw util.badOperand(b);  
  } ;

  BCD.prototype.mod = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).mod( b ) ;
    } else if (b.isNumeric( )) {
      if (b.isZero( )) return this ;
      
      var dv = bcd.divide( this.value, b.toBCD( ).valueOf( )) ;      
      var fx = bcd.toInt32( dv ) ;
      var ml = bcd.multiply( bcd.fromInt32(fx), b.toBCD( ).valueOf( ) ) ;
      return new BCD(bcd.sub( this.value, ml )) ;      
    } else throw util.badOperand(b);  

  } ;

  BCD.prototype.pow = function( b ) {
    if (tdouble.isDouble(b)) {
      return this.toDouble( ).pow( b ) ;
    } else if (b.isNumeric( )) {
      if (b.isZero( ))
        return new Integer( 0 ) ;

      var r = bcd.fromDouble( 1 ) ;
      var n = bcd.toInt32( b.toBCD( ).valueOf( ) ) ;

      for (var i = n; i > 0; i--) {
        r = bcd.multiply( r, this.value ) ;
      }

      return new BCD( r ) ;      
    } else throw util.badOperand(b);
  } ;

  BCD.prototype.xor = function( b ) {
    if (exports.isBCD(b)) {
      var i = (this.isZero())?1:0 ;
      var j = (b.isZero())?1:0 ;

      return new tinteger.Integer( i ^ j ) ;
    } else if (b.isNumeric( )) {
      return b.xor( this ) ;
    }
    else
      throw util.badOperand( b );      
  } ;

  BCD.prototype.abs = function( ) {
    return new BCD( bcd.abs( this.value )) ;
  } ;

  BCD.prototype.truncate = function( v ) {
    return new BCD( bcd.truncate( this.value, 0 ) ) ;
  } ;

  return BCD ;

})( ) ;

exports.BCD = BCD ;

exports.instructions = {
  DECIMAL: function( v ) {
    return util.instructions.C(new BCD( bcd.fromString(v) )) ;
  }
};