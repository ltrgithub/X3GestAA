"use strict";
var util = require('./util');
var bcd = require('./bcd');
var tdouble = require('./tdouble');
var Blbfile = require('./tblbfile').Blbfile;

function BCD(mantissa) { // constructor
	this.value = mantissa;
}

BCD.prototype.x3AssertOverflow = function(type) {
	return true;
};

BCD.prototype.x3Minus = function() {
	return new BCD(bcd.minus(this.value));
};

BCD.prototype.x3ToBCD = function() {
	return this;
};

BCD.prototype.x3ToString = function() {
	return bcd.toString(this.value);
};

BCD.prototype.toString = function() {
	return bcd.toString(this.value);
};

BCD.prototype.x3ToInteger = function() {
	return bcd.toInt32(this.value);
};

BCD.prototype.x3ToDouble = function() {
	return new tdouble.Double(bcd.toDouble(this.value));
};

BCD.prototype.x3ToDate = function() {
	throw util.badOperand(this);
};

BCD.prototype.x3ToDatetime = function() {
	throw util.badOperand(this);
};

BCD.prototype.x3Serialize = function(l) {
	return bcd.toBuffer(this.value);
};

BCD.prototype.x3IsNumeric = function() {
	return true;
};

BCD.prototype.x3IsZero = function() {
	return bcd.isZero(this.value);
};
BCD.prototype.x3IsUndefined = BCD.prototype.x3IsZero;


BCD.prototype.isInt32 = function(opt) {
	return bcd.isInt32(this.value, opt);
};

BCD.prototype.x3IsEmpty = function() {
	throw util.badOperand(this);
};

BCD.prototype.x3Add = function(b) {
	if (b instanceof BCD) return new BCD(bcd.add(this.value, b.value));
	if (util.x3IsDate(b) || util.x3IsDatetime(b)) return b.x3Add(this.x3ToInteger());

	if (b.x3ToBCD) return this.x3Add(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Sub = function(b) {
	if (b instanceof BCD) return new BCD(bcd.sub(this.value, b.value));
	if (b.x3ToBCD) return this.x3Sub(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Mul = function(b) {
	if (b instanceof BCD) return new BCD(bcd.multiply(this.value, b.value));
	if (b.x3ToBCD) return this.x3Mul(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Div = function(b) {
	if (b instanceof BCD) return new BCD(bcd.divide(this.value, b.value));
	if (b.x3ToBCD) return this.x3Div(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Mod = function(b) {
	if (b instanceof BCD) {
		if (b.x3IsZero()) return this;

		var dv = bcd.divide(this.value, b.value);
		var fx = bcd.toInt32(dv);
		var ml = bcd.multiply(bcd.fromInt32(fx), b.value);
		return new BCD(bcd.sub(this.value, ml));
	}
	if (b.x3ToBCD) return this.x3Mod(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Pow = function(b) {

	if (b instanceof BCD) {
		if (b.x3IsZero()) return 1;

		var r = bcd.fromInt32(1);
		var n = b.x3ToInteger();

		for (var i = n; i > 0; i--) {
			r = bcd.multiply(r, this.value);
		}

		return new BCD(r);
	}
	if (b.x3ToBCD) return this.x3Pow(b.x3ToBCD());

	throw util.badOperand(b);
};

BCD.prototype.x3Compare = function(b) {
	if (b instanceof BCD) return bcd.compare(this.value, b.value);
	if (b.x3ToBCD) return this.x3Compare(b.x3ToBCD());
	throw util.badOperand(b);
};

BCD.prototype.x3Xor = function(b) {
	if (b.x3IsNumeric()) {
		var i = (this.x3IsZero()) ? 1 : 0;
		var j = (b.x3IsZero()) ? 1 : 0;

		return i ^ j;
	} else
		throw util.badOperand(b);
};

BCD.prototype.x3Abs = function() {
	return new BCD(bcd.abs(this.value));
};

BCD.prototype.x3Truncate = function(v) {
	return new BCD(bcd.truncate(this.value, 0));
};

BCD.prototype.x3ToSql = function(v) {
	return this.x3ToString();
};

BCD.prototype.x3Clone = function() {
	return new BCD(this.value.slice());
};


exports.instructions = {
	DECIMAL: function(v) {
		return util.instructions.C(bcd.fromString(v));
	}
};

exports.BCD = BCD;

exports.fromString = function(s) {
	return new BCD(bcd.fromString(s));
};

exports.fromInt32 = function(i) {
	return new BCD(bcd.fromInt32(i));
};

exports.fromDouble = function(i) {
	return new BCD(bcd.fromDouble(i));
};

exports.fromBlbfile = function(i) {
	return new BCD(bcd.fromBuffer(i.valueOf()));

};
exports.instructions = {
	DECIMAL: function(v) {
		return util.instructions.C(exports.fromString(v));
	}
};