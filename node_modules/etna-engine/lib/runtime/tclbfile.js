"use strict";
var helpers = require('syracuse-core/lib/helpers');
var util = require('./util');
var tdate = require('./tdate');
var tdatetime = require('./tdatetime');
var datetime = require('syracuse-core/lib/types/datetime');
var tbcd = require('./tbcd');
var X3Error = require('./errors').X3Error;

var Clbfile = helpers.defineClass(function(v) { // constructor
	var self = this;
	if (typeof v === "string") {
		self.value = v;
	} else throw util.badOperand(v);
}, null, { // Pass null if no parent class - public methods follow
	// we delegate almost everything to tstring - keeps things simple.
	valueOf: function() {
		return this.value;
	},
	// more public methods
	x3IsNumeric: function() {
		return false;
	},
	x3AssertOverflow: function(type) {
		return true;
	},
	x3Minus: function(v) {
		throw this.value.x3Minus(v);
	},
	x3ToDouble: function() {
		return this.value.x3ToDouble();
	},
	x3ToString: function() {
		return this.value;
	},
	x3ToBCD: function() {
		return this.value.x3ToBCD();
	},
	x3Serialize: function(len) {
		return this.value.x3Serialize(len);
	},
	x3ToClbfile: function() {
		// Clbfile is mutable. Is this safe? 
		return this;
	},
	x3ToInteger: function() {
		return this.value.x3ToInteger();
	},
	x3ToDate: function() {
		return this.value.x3ToDate();
	},
	x3ToUuid: function() {
		return this.value.x3ToUuid();
	},
	x3ToDatetime: function(v) {
		return this.value.x3ToDatetime();
	},
	x3IsZero: function(v) {
		return this.value.x3IsZero(v);
	},
	x3IsEmpty: function(v) {
		return this.value.x3IsEmpty(v);
	},
	x3Length: function() {
		return this.value.x3Length();
	},
	x3Compare: function(b) {
		return this.value.x3Compare(b);
	},
	x3Add: function(b) {
		return this.value.x3Add(b);
	},
	x3Sub: function(b) {
		return this.value.x3Sub(b);
	},
	x3Mul: function(b) {
		return this.value.x3Mul(b);
	},
	x3Div: function(b) {
		return this.value.x3Div(b);
	},
	x3Mod: function(b) {
		return this.value.x3Mod(b);
	},
	x3Pow: function(b) {
		return this.value.x3Pow(b);
	},
	x3Xor: function(b) {
		return this.value.x3Xor(b);
	},
	x3Abs: function(b) {
		return this.value.x3Abs(b);
	},
	x3Truncate: function(v) {
		return this.value.x3Truncate(v);
	},
	x3ToSql: function(driver) {
		return this.value.x3ToSql(driver);
	}
});

exports.Clbfile = Clbfile;

exports.functions = {
	APPEND: {
		count: 2,
		fn: function(clb, arg) {
			if (!util.x3IsClbfile(clb)) throw util.badOperand(t);
			clb.value += util.x3ToString(arg, true);
		}
	}
};