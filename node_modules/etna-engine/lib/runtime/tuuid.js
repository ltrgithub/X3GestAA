"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var uuid = require("syracuse-core/lib/uuid");

function _fromHex(str, i) {
  var code = str.charCodeAt(i);
  return code < 0x3A ? code - 0x30 : code < 0x47 ? code + 10 - 0x41 : code + 10 - 0x61;
};

function _toBytes(str) {
  //if (!str || str.length != 36 || !_uuidRE.test(str)) return null;
  str = str.replace(/-/g, '');
  var bytes = new Buffer( 16 ) ;
  for (var i = 0; i < 16; i++) {
    var j = i;
    var b = (_fromHex(str, 2 * j) << 4) + _fromHex(str, 2 * j + 1);
    bytes[i] = (b >= 128 ? b - 256 : b);
  }
  return bytes;
};

function make ( ) {
  var r = new Buffer( 16 ) ;
      for (var i = 0; i < this.length; i++) {
          this[i] = 0 ;
      }
  return r ;
}

Object.defineProperty( Buffer.prototype, "x3Minus", { 
  value:  function( ) {
      throw util.badOperand( this ) ;
    },
  enumerable: false   
}) ;

Object.defineProperty( Buffer.prototype, "x3ToInteger", {
    value : function() {
    throw util.badOperand( this ) ;
  },
  enumerable: false
}) ;  

Object.defineProperty( Buffer.prototype, "x3ToString", {
    value : function( v ) {
    var s1 =  this[0].toString(16)+this[1].toString(16)+this[2].toString(16)+this[3].toString(16);
    var s2 =  this[4].toString(16)+this[5].toString(16);
    var s3 =  this[6].toString(16)+this[7].toString(16);
    var s4 =  this[8].toString(16)+this[9].toString(16);
    var s5 =  this[10].toString(16)+this[11].toString(16)+this[12].toString(16)+this[13].toString(16);
    var s6 =  this[14].toString(16)+this[15].toString(16);
    return s1 + "-" + s2 + "-" + s3 + "-" + s4 + "-" + s5 + s6 ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3ToDouble", {
    value: function() {
    throw util.badOperand( this ) ;
  },
  enumerable: false
}) ;
                
Object.defineProperty( Buffer.prototype, "x3ToBCD", {
  value: function() {
    throw util.badOperand( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3ToDate", {
  value: function() {
    throw util.badOperand( this ) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3ToDatetime", {
    value: function( ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3IsNumeric", {
    value: function( ) {
      return false ;
  },
  enumerable: false
}) ;
  
Object.defineProperty( Buffer.prototype, "x3IsZero", {
    value: function() {
      throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Compare", {
  value: function( b ) {
    if (!util.x3IsUuid( b ))
      throw util.badOperand(this) ;

    for (var i = 0; i < this.length; i++) {
        if (this[i] < b[i]) return -1 ;
        else if (this[i] > b[i]) return 1 ;
    }
    return 0 ;
  },
  enumerable: false
}) ;  

Object.defineProperty( Buffer.prototype, "x3Add", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Sub", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;  

Object.defineProperty( Buffer.prototype, "x3Mul", {
  value: function( b ) {
    throw util.badOperand(this) ;
 },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Div", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Mod", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Pow", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Xor", {
  value: function( b ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Abs", {
  value : function( ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;

Object.defineProperty( Buffer.prototype, "x3Truncate", {
  value : function( v ) {
    throw util.badOperand(this) ;
  },
  enumerable: false
}) ;


function generate( ) {
  var s = uuid.generate( ) ;
  return _toBytes( s ) ;
}

function x3ToUuid( s ) {
    return _toBytes( s ) ;
}

exports.make = make ;
exports.generate = generate ;
exports.x3ToUuid = x3ToUuid ;
