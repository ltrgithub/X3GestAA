"use strict";
var bcd = require('./tbcd');
/*
 * Eval
 */
var Parser = require("../parser").Parser;
var instructions;

var util = require('./util');
var errors = require('./errors');
var X3Error = errors.X3Error;

function buildLiteral(node) {
	return util.instructions.C(node.value);
}

function buildDecimal(node) {
	return util.instructions.C(bcd.fromString(node.value));
}

var _buildExports;
var _buildRequire;

var builders = {
	STRING: buildLiteral,
	DECIMAL: buildDecimal,
	INTEGER: buildLiteral,
	IDENT: function(node) {
		return instructions.V(node.value);
	},
	CLAS: function(node) {
		return instructions.CV(node.letter, node.abbrev, node.field.toUpperCase());
	},
	OP: function(node) {
		return instructions[node.op].apply(null, node.args.map(_build));
	},
	FCALL: function(node) {
		return instructions.F(node.name, (node.args || []).map(_build));
	},
	EVALUE: function(node) {
		return instructions.EVALUE(_buildRequire, _buildExports, _build(node.arg));
	},
	SIGMA: function(node) {
		return instructions.SIGMA(node.field, node.args.map(_build));
	},
	FUNC: function(node) {
		return instructions.CALL(node.from ? instructions.REQ(_buildRequire, _build(node.from)) : instructions.C(_buildExports), _build(node.name), (node.args || []).map(_build));
	},
	INDEX: function(node) {
		return instructions.INDEX(_build(node.target), node.args.map(_build));
	},
	DATE: function(node) {
		return instructions.DATE(node.year, node.month, node.day);
	},
	DIM: function(node) {
		var letter, field, rhs;
		for (var i = 0; i < node.args.length; i++) {
			switch (node.args[i].tag) {
				case "CLAS":
					letter = node.args[i].letter;
					field = node.args[i].field;
					break;
				case "IDENT":
					field = node.args[i].value;
					break;
				case "INTEGER":
					rhs = instructions.C(node.args[i].value);
					break;
			}
		}
		return instructions.DIM(letter || "", field || "", rhs);
	},

};

function _build(node) {
	var builder = builders[node.tag];
	if (!builder) throw new X3Error(200, "unsupported eval construct: " + node.tag);
	return builder(node);
}

exports.functions = {
	EVALUE: { // parser needs it in this table but fn will never be called
		count: -1
	},
};

exports.instructions = {
	EVALUE: function(req, ns, arg) {
		return function evalue$do(_) {
			instructions = instructions || require('./index').instructions;
			var argVal = arg(_);
			if (Array.isArray(argVal) && argVal[0] == 1) {
				var exp = "";
				for (var i = 0; i < argVal[2].length; i++) {
					exp += argVal[2][i];
				}
				argVal = exp;
			}
			util.checkString(argVal);
			try {
				var node = new Parser(argVal, "eval").parseExp(true);
				_buildRequire = req;
				_buildExports = ns;
				var fn = _build(node);
				return fn(_);
			} catch (e) {
				if (e.errn === 200) throw new X3Error(5, "Illegal character:" + JSON.stringify(e));
				else if (e.errn === 13) throw new X3Error(26, "Internal error");
				throw e;
			}
		};
	}
};

exports.evalue = function(_, expression) {
	var node = new Parser(expression, "eval").parseExp(true);
	var fn = _build(node);
	return fn(_);
};