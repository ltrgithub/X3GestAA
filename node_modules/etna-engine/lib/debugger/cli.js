"use strict";

// Command line etna debugger
// To start a debug session: 
// $ node node_modules/etna-engine/lib/debugger/cli.js
// etna-dbg> open
// etna-dbg> list
// 111
// <response command="list" transaction_id="1">
//   <session id="7472a57d-16a5-41e0-baf4-a1d451e913ca"/>
// </response>
// etna-dbg> attach 7472a57d-16a5-41e0-baf4-a1d451e913ca
// etna-dbg> stack_get
// etna-dbg> context_get
// etna-dbg> breakpoint_set -t line -f TABCOUNTRY_CSTD.src -n 42
// etna-dbg> source -f TABCOUNTRY_CSTD.src -b 39 -e 45
var sys = require("sys");
var net = require("net");
var readline = require('readline');
var rl = readline.createInterface(process.stdin, process.stdout);

var client;
var session;

rl.setPrompt('etna-dbg> ');
rl.prompt();
rl.on('line', function(line) {
	if (line === "exit") rl.close();
	var parts = line.split(/ /g);
	var cmd = parts[0] && parts[0].toLowerCase();
	switch (cmd) {
		case "open":
			client = new Client(parts[1] || 9124);
			client.write(["options", "-b", "s2"]);
			client.write(["list"]);
			break;
		case "close":
			client && client.close();
			client = null;
			session = null;
			break;
		case "attach":
			if (client && !client.closed) {
				if (!parts[1]) {
					usage("attach -s [sid]");
				} else {
					session = parts[1];
					client.write(["attach", "-s", session]);
				}
			}
			break;
		default:
			if (!session && ["list", "options"].indexOf(cmd) == -1) {
				log("Attach to session first!");
				rl.prompt();
			} else {
				client.write(parts);
			}
			break;
	}
}).on('close', function() {
	process.exit(0);
});

function log(s) {
	// console.log(s.replace(/\0/g, "\n[NULL]\n"));
	console.log(s.replace(/\0/g, "\n"));
}

function usage(s) {
	console.log("usage: " + s);
}

function Client(port) {
	var socket = new net.Socket(),
		tid = 0,
		q = [];
	socket.connect(port, "localhost", function() {
		log("connected to " + socket.remoteAddress + ":" + socket.remotePort + " as " + socket.localAddress + ":" + socket.localPort);
		rl.prompt();
		socket.setNoDelay();
		socket.on('data', function(data) {
			log("=== received ===\n" + data.toString("utf8"));
			if (q.length === 0) {
				rl.prompt();
			} else {
				_write(q.shift());
			}
		});
		socket.on('error', function(e) {
			console.error("=== ERROR ===\n" + e.message);
			rl.prompt();
		});
		socket.on('end', function() {
			console.error("=== END ===\n");
		});
	});

	function _write(data) {
		socket.write(data, function() {
			log("=== Sending ===\n" + data);
		});
	}

	Object.defineProperty(this, 'closed', {
		get: function() {
			return socket && socket.closed;
		}
	});

	this.write = function(cmd, args) {
		if (Array.isArray(cmd)) {
			args = cmd.concat(args || []);
			cmd = args.shift();
			args = ["-i", tid++].concat(args || []);
		}
		var data = (cmd || "").split(/\s+/).concat(args || []).join(" ").split(/\0/)[0] + "\0";
		if (q.length === 0) {
			_write(data);
		} else {
			q.push(data);
		}
	};

	this.close = function() {
		socket.end();
	};
}