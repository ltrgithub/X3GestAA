"use strict";
var sys = require("util");
var url = require("url");
var fs = require("fs");
var ez = require('ez-streams');
var helpers = require('syracuse-core/lib/helpers');
var uuid = require('syracuse-core/lib/uuid');
var util = require('etna-engine/lib/runtime/util');
var config = require("config");

var _typeMap = {
	"line": BreakpointLine,
	"call": BreakpointCall,
	"return": BreakpointReturn,
	"exception": BreakpointException,
	"conditional": BreakpointConditional,
	"watch": BreakpointWatch
};

exports.create = function(options) {
	var clazz = _typeMap[options.type];
	return clazz && new clazz();
};

function Breakpoint(options) {
	var id = uuid.generate();
	Object.defineProperty(this, '$id', {
		get: function() {
			return id;
		}
	});

	Object.keys(options).forEach(function(k) {
		this["$" + k] = options[k];
	});
};

helpers.defineClass(Breakpoint, null, {
	function_name: function(argument) {
		// body...
	}
});

// line: break on the given lineno in the given file
// require: filename, lineno
function BreakpointLine(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointLine, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});

// call: break on entry into new stack for function name
// require: function
function BreakpointCall(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointCall, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});

// return: break on exit from stack for function name
// require:	function
function BreakpointReturn(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointReturn, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});

// exception: break on exception of the given name
// require: exception
function BreakpointException(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointException, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});

// conditional:  filename	break when the given expression is true at the given filename and line number or just in given filename
// require: expression
function BreakpointConditional(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointConditional, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});

// watch: break on write of the variable or address defined by the expression argument
// require: 	expression
function BreakpointWatch(options) {
	Breakpoint.call(this, options);
};

helpers.defineClass(BreakpointWatch, Breakpoint, {
	function_name: function(argument) {
		// body...
	}
});