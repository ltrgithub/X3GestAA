End func TESTSUITE()

Funprog TESTSUITE()
Call SET_LOCALE("fr-FR") From TEST_HELPER
Call ADD_TESTCASE("OP_TEST", "operators", 10) From AXUNIT
Call ADD_TESTCASE("ARITHM_TEST", "arithmetics", 19) From AXUNIT
Call ADD_TESTCASE("STRING_TEST1", "strings 1", 7) From AXUNIT
Call ADD_TESTCASE("DATE_TEST1", "dates", 8) From AXUNIT
Call ADD_TESTCASE("COMB_TEST", "combinations", 3) From AXUNIT
Call ADD_TESTCASE("STATS_TEST", "statistics", 4) From AXUNIT
Call ADD_TESTCASE("TRIGO_TEST", "trigonometry", 12) From AXUNIT
Call ADD_TESTCASE("HYPER_TEST", "hyperbolic", 11) From AXUNIT
Call ADD_TESTCASE("STRING_TEST2", "string 2", 19) From AXUNIT
Call ADD_TESTCASE("STRING_TEST3", "string 3", 0) From AXUNIT
Call ADD_TESTCASE("DATE_TEST2", "date 2", 11) From AXUNIT
Call ADD_TESTCASE("EVAL_TEST", "evaluate", 3) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("FUNCTIONS", "Engine functions")

$ERROR
	Call CHECK_EQUAL(errn, EX, errm) From AXUNIT
	EX = 0
Resume

SubProg CHECK_EVAL(STR, RESULT) 
	Call CHECK_EQUAL(evalue(str), result, str) From AXUNIT
End

SubProg OP_TEST
	Integer EX
	Onerrgo ERROR
	Call CHECK_EVAL("2+3", 5)
	Call CHECK_EVAL("'2'+'3'", '23')
	Call CHECK_EVAL("gdat$(24,8,2011)+8", gdat$(1,9,2011))
	Call CHECK_EVAL("8+gdat$(24,8,2011)", gdat$(1,9,2011))
	Call CHECK_EVAL("2-3", -1)
	Call CHECK_EVAL("'2'-'3'", '2 3')
	Call CHECK_EVAL("'2  '-'  3'", '2 3')
	Call CHECK_EVAL("gdat$(1,9,2011)-8", gdat$(24,8,2011))
	Call CHECK_EVAL("gdat$(1,9,2011)-gdat$(24,8,2011)", 8)
	# Call CHECK_EVAL("gdat$(1,9,2011)-'20110824'", 8)
	Call CHECK_EVAL("2*3", 6)
End

SubProg ARITHM_TEST
    Integer EX
	Onerrgo ERROR
	Call CHECK_EVAL("abs(3)", 3) 
	Call CHECK_EVAL("abs(-3)", 3)
	EX = 10 : Call CHECK_EQUAL(abs('hello'), "!!!") From AXUNIT
	Call CHECK_EVAL("mod(100,7)", 2) 
	Call CHECK_EVAL("mod(-100,7)", 5) 
	# TODO: test rnd
	Call CHECK_EVAL("sgn(0)", 0) 
	Call CHECK_EVAL("sgn(3)", 1) 
	Call CHECK_EVAL("sgn(-3)", -1) 
	Call CHECK_EVAL("sqr(9)", 3) 
	Call CHECK_EVAL("ar2(1.234)", 1.23) 
	Call CHECK_EVAL("ar2(1.235)", 1.24) 
	Call CHECK_EVAL("ar2(1.236)", 1.24) 
	Call CHECK_EVAL("arr(1.236, 1)", 1) 
	Call CHECK_EVAL("arr(1.236, 0.01)", 1.24) 
	Call CHECK_EVAL("arr(1.236, 0.05)", 1.25) 
	Call CHECK_EVAL("fix(pi)", 3) 
	Call CHECK_EVAL("fix(-pi)", -3) 
	Call CHECK_EVAL("int(pi)", 3) 
	Call CHECK_EVAL("int(-pi)", -4)
End

SubProg STRING_TEST1
	Call CHECK_EVAL("ascii('a')", 97)
	Call CHECK_EVAL("len('abcdef')", 6)
	# TODO: parse
	# TODO: pat
	Call CHECK_EVAL("val('3')", 3)
	Call CHECK_EVAL("val('-3')", -3)
	Call CHECK_EVAL("val('3.14')", 3.14)
	Call CHECK_EVAL("val('6.02e23')", 6.02e23)
	Call CHECK_EVAL("val('6.62e-34')", 6.62e-34)
End

SubProg DATE_TEST1
	Call CHECK_EVAL("day(gdat$(22,8,2011))", 22)
	Call CHECK_EVAL("dayn(gdat$(21,8,2011))", 7)
	Call CHECK_EVAL("dayn(gdat$(22,8,2011))", 1)
	Call CHECK_EVAL("month(gdat$(22,8,2011))", 8)
	Call CHECK_EVAL("nday(gdat$(4,1,1600))", 3)
	Call CHECK_EVAL("week(gdat$(21,8,2011))", 33)
	Call CHECK_EVAL("week(gdat$(22,8,2011))", 34)
	Call CHECK_EVAL("year(gdat$(22,8,2011))", 2011)
	# TODO: operators on dates
End

SubProg COMB_TEST
	Call CHECK_EVAL("anp(7,3)", 840)
	Call CHECK_EVAL("cnp(7,3)", 140)
	Call CHECK_EVAL("fac(6)", 720)
End

SubProg STATS_TEST
	# TODO: avg, find, min, max, ...
	Call CHECK_EVAL("min(3,5,2,7,9,8)", 2)
	Call CHECK_EVAL("max(3,5,2,7,9,8)", 9)
	Call CHECK_EVAL("sigma(I=1, 10, I)", 55)
	Call CHECK_EVAL("ar2(sigma(I=1, 120, 1/I^2))", ar2(pi^2/6))
End

SubProg TRIGO_TEST()
	Call CHECK_EVAL("ar2(pi)", 3.14)
	Call CHECK_EVAL("cos(0)", 1)
	Call CHECK_EVAL("cos(pi)", -1)
	Call CHECK_EVAL("ar2(cos(pi/2))", 0)
	Call CHECK_EVAL("ar2(cos(pi/3))", 0.5)
	Call CHECK_EVAL("ar2(cos(pi/4))", ar2(sqr(2)/2))
	Call CHECK_EVAL("ar2(cos(pi/6))", ar2(sqr(3)/2))
	Call CHECK_EVAL("ar2(acos(cos(pi/6)))", ar2(pi/6))
	Call CHECK_EVAL("cos(pi/6)^2 + sin(pi/6)^2", 1)
	Call CHECK_EVAL("ar2(tan(pi/6))", ar2(sin(pi/6)/cos(pi/6)))
	Call CHECK_EVAL("ar2(asin(sin(pi/6)))", ar2(pi/6))
	Call CHECK_EVAL("ar2(atan(tan(pi/6)))", ar2(pi/6))
End

SubProg HYPER_TEST()
	Call CHECK_EVAL("exp(0)", 1)
	Call CHECK_EVAL("ar2(exp(1))", 2.72)
	Call CHECK_EVAL("ar2(ln(exp(5)))", 5)
	Call CHECK_EVAL("log(10^8)", 8)
	Call CHECK_EVAL("ch(0)", 1)
	Call CHECK_EVAL("sh(0)", 0)
	Call CHECK_EVAL("th(0)", 0)
	Call CHECK_EVAL("ar2(sh(3)/ch(3))", ar2(th(3)))
	Call CHECK_EVAL("ar2(ach(ch(3)))", 3)
	Call CHECK_EVAL("ar2(ash(sh(3)))", 3)
	Call CHECK_EVAL("ar2(ath(th(3)))", 3)
End

SubProg STRING_TEST2()
	Call CHECK_EVAL("left$('ABCDEFGH', 5)", "ABCDE")
	Call CHECK_EVAL("mid$('ABCDEFGH', 4, 3)", "DEF")
	Call CHECK_EVAL("right$('ABCDEFGH', 4)", "DEFGH")
	Call CHECK_EVAL("seg$('ABCDEFGH', 3, 7)", "CDEFG")
	# TODO: ctrans
	Call CHECK_EVAL("tolower('Hello')", "hello")
	Call CHECK_EVAL("toupper('Hello')", "HELLO")
	Call CHECK_EVAL("vireblc(' a b  c ', 0)", "a b  c ")
	Call CHECK_EVAL("vireblc(' a b  c ', 1)", " a b  c")
	Call CHECK_EVAL("vireblc(' a b  c ', 2)", "a b  c")
	Call CHECK_EVAL("vireblc(' a b  c ', 3)", "a")
	Call CHECK_EVAL("vireblc(' a b  c ', 4)", "abc")
	Call CHECK_EVAL("vireblc(' a b  c ', 5)", " a b c ")
	Call CHECK_EVAL("chr$(97)", "a")
	Call CHECK_EVAL("graph$(1)", chr$(150))
	Call CHECK_EVAL("graph$(3, 1)", string$(3, 150))
	Call CHECK_EVAL("space$(3)", "   ")
	Call CHECK_EVAL("string$(3, 97)", "aaa")
	Call CHECK_EVAL("string$(3, 'ab')", "ababab")
	Call CHECK_EVAL("instr(1, 'ABCDEF', 'CD')", 3)
End

SubProg STRING_TEST3
	# Misc string functions (adxmac, adxpam, ...). See later
End

SubProg DATE_TEST2
	Call CHECK_EVAL("addMonth(gdat$(22,8,2011), 1)", gdat$(22,9,2011))	
	Call CHECK_EVAL("aweek(34, 2011)", gdat$(22,8,2011))	
	Call CHECK_EVAL("year(date$) >= 2011", 1)	
	Call CHECK_EVAL("eomonth(gdat$(22,8,2011))", gdat$(31,8,2011))	
	Call CHECK_EVAL("gdat$(0,8,2011)", gdat$(31,7,2011))	
	Call CHECK_EVAL("gdat$(22,0,2011)", gdat$(22,12,2010))	
	Call CHECK_EVAL("nday$(nday(date$))", date$)	
	Call CHECK_EVAL("day$(gdat$(22,8,2011))", "lundi")	
	Call CHECK_EVAL("day$(1)", "lundi")	
	Call CHECK_EVAL("month$(gdat$(22,7,2011))", "juillet")	
	Call CHECK_EVAL("month$(7)", "juillet")	
End

FunProg SQUARE(X)
	Variable Decimal X
End X^2

SubProg EVAL_TEST
	Call CHECK_EVAL("Func SQUARE(7)", 49)
	Call CHECK_EVAL("evalue('1'+'+2')", 3)
	Call CHECK_EVAL("evalue('func SQUARE(7)')", 49)
End

