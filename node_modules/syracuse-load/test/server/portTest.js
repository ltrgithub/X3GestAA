"use strict";
var balancer = require('syracuse-load/lib/balancer')
var util = require('util')
var fs = require('fs');

QUnit.module(module.id);

test('Balancer', 4, function() {
	var host1 = { hostname: "a", status: 3, children: 2};
	var host2 = { hostname: "b", status: 3, children: 3};
	var res = balancer.balance({ "a:N0": 1, "a:N1": 2}, [host1], "a")
	strictEqual(JSON.stringify(res), JSON.stringify([host1,"N0"]), "balance 1 port N0")
	var res = balancer.balance({ "a:N0": 2, "a:N1": 2}, [host1], "a")
	strictEqual(JSON.stringify(res), JSON.stringify([host1,"N0"]), "balance 1 port N0")
	var res = balancer.balance({ "a:N1": 2, "a:N0": 3}, [host1], "a")
	strictEqual(JSON.stringify(res), JSON.stringify([host1,"N1"]), "balance 1 port N1")
	var res = balancer.balance({ "a:N1": 1, "a:N0": 2, "b:N0": 1}, [host1, host2], "a")
	strictEqual(JSON.stringify(res), JSON.stringify([host2,"N2"]), "balance 2 port N2")
	
})

test('deep equal', 10, function() {
	strictEqual(balancer._deepEqual(null, undefined), true, "null and undefined");
	strictEqual(balancer._deepEqual(null, 1), false, "null and 1");
	strictEqual(balancer._deepEqual(1, {}), false, "1 and object");
	strictEqual(balancer._deepEqual([], {}), true, "array and object");
	strictEqual(balancer._deepEqual({a:5, b:7}, {b:7, a:5}), true, "two equal simple objects");
	strictEqual(balancer._deepEqual({a:5, b:7, c:8}, {b:7, a:5}), false, "extra property in first argument");
	strictEqual(balancer._deepEqual({a:5, b:7}, {b:7, a:5, c:8}), false, "extra property in second argument");
	strictEqual(balancer._deepEqual([1, 2], [2, 1]), false, "two different arrays");
	strictEqual(balancer._deepEqual([2], [2, 1]), false, "two different arrays");
	strictEqual(balancer._deepEqual({a:{c: 77}, b:[5,{t:8, r:4}]}, {b:[5,{r:4, t:8}], a:{c: 77}}), true, "two equal structured objects");
})

test('Host update', 14, function() {
	var hosts = [ { hostname: "A1", started: false, deactivated: false, connectionData: [{active: true}]}, { hostname: "A2", started: true, connectionData: [{active: true}]}]
	var oldHosts = [ { hostname: "A1", started: true, connectionData: [{active: true}]}, { hostname: "A2", started: false, connectionData: [{active: true}]}]
	var res = balancer._updateHosts(oldHosts, hosts, "A1");
	strictEqual(res[0].hostname, "A1", "local host name")
	strictEqual(res[0].started, false, "local host started")
	strictEqual(res[1].hostname, "A2", "other host name")
	strictEqual(res[1].started, true, "other host started")
	strictEqual(res[0].status, 1, "status local host (init)")
	strictEqual(res[1].status, -5, "status other host (unknown)")
	strictEqual(res.length, 2, "number of hosts")

	var hosts = [ { hostname: "A1", deactivated: false, started: true, connectionData: [{active: true}]}, { hostname: "A2", deactivated: false, started: true, connectionData: [{active: true}]}]
	var oldHosts = [ { hostname: "A1", started: false, connectionData: [{active: true}]}, { hostname: "A2", started: false, connectionData: [{active: true}]}]
	var res = balancer._updateHosts(oldHosts, hosts, "A1");
	strictEqual(res[0].hostname, "A1", "local host name")
	strictEqual(res[1].status, -5, "other host unknown status")
	var hosts = [ { hostname: "A1", started: false, connectionData: [{active: true, port: 8112}]}, { hostname: "A2", started: true, connectionData: [{active: true}]}]
	var oldHosts = [ { hostname: "A1", started: true, connectionData: [{active: true, port:8111}]}]
	var res = balancer._updateHosts(oldHosts, hosts, "A1");
	strictEqual(res[0].hostname, "A1", "first host name")
	strictEqual(res[0].stop, true, "stop host")
	strictEqual(res[1].hostname, "A2", "other host name")
	strictEqual(res[1].started, true, "other host started")
	strictEqual(res.length, 2, "number of hosts")
})


