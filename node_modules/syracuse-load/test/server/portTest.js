"use strict";
var balancer = require('syracuse-load/lib/balancer')
var util = require('util')

var qmodule = QUnit.module;

qmodule('balancer');

// returns exception message for invocation
function callException(list, nanny) {
	try {
		balancer.portArray(list, nanny);
		return "";
	} catch (e) { return e.toString() };
	return "";
}

// General remark: test data do not have checksums, because they are not tested in _parseLicenses

test('Port range 22', 3, function(){
	var res = balancer.portArray("P22 ", 55);
   strictEqual(res.length, 1, "number of ports")
   strictEqual(res[0], "22", "port")

   strictEqual(callException("P22 ", 22), "Error: Port already used: 22", "double port");
});

test('Port range 22,25, 28', 6, function(){
	var res = balancer.portArray("P22, 25,28", 55);
   strictEqual(res.length, 3, "number of ports")
   res = res.sort(function(a,b) { return a-b;});
   strictEqual(res[0], "22", "port 0")
   strictEqual(res[1], "25", "port 1")
   strictEqual(res[2], "28", "port 2")

   strictEqual(callException("P22, 25,28", 25), "Error: Port already used: 25", "double port");
   strictEqual(callException("P22, 25,22", 26), "Error: Port already used: 22", "double port");
});

test('Port range 22,25, 22', 1, function(){
	   strictEqual(callException("P22, 25,22", 26), "Error: Port already used: 22", "double port");
});   
test('Port range 22,25-28, 29-29', 9, function(){
	var res = balancer.portArray("P22,25-28, 29-29", 55);
   strictEqual(res.length, 6, "number of ports")
   res = res.sort(function(a,b) { return a-b;});
   strictEqual(res[0], "22", "port 0")
   strictEqual(res[1], "25", "port 1")
   strictEqual(res[2], "26", "port 1")
   strictEqual(res[3], "27", "port 1")
   strictEqual(res[4], "28", "port 1")
   strictEqual(res[5], "29", "port 1")

   strictEqual(callException("P22,25-28, 29-29", 26), "Error: Port already used: 26", "double port");
   strictEqual(callException("P22, 25,22", 26), "Error: Port already used: 22", "double port");
});

test('Port range 22,25-24', 1, function(){

   strictEqual(callException("P22,25-24", 26), "Error: Upper bound less than lower bound in range 25-24", "double port");
});

test('Port range 22-26,23-24', 1, function(){

   strictEqual(callException("P22-26,23-24", 27), "Error: Port already used: 23", "double port");
});   

test('Port range 3 children', 4, function(){
	var res = balancer.portArray("3", 1);	
	   strictEqual(res.length, 3, "number")
	   strictEqual(res[0], "N0", "port 0")
	   strictEqual(res[1], "N1", "port 1")
	   strictEqual(res[2], "N2", "port 1")
	});   

test('Port range 0 children', 1, function(){

	   strictEqual(callException("0", 27), "Error: There must be at least one child process", "no child process");
	});   


test('Balancer', 7, function() {
	var res = balancer.balance({ "a:5": 1, "a:7": 2}, [{ hostname: "a", started: true, active: true, ports: [5,7]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{ hostname: "a", started: true, active: true, ports: [5,7]},5]), "balance 2 ports 1")
	var res = balancer.balance({ "a:5": 2, "a:7": 2}, [{ hostname: "a", started: true, active: true, ports: [5,7]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{ hostname: "a", started: true, active: true, ports: [5,7]},5]), "balance 2 ports 2")
	var res = balancer.balance({ "a:5": 3, "a:7": 2}, [{ hostname: "a", started: true, active: true, ports: [5,7]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{ hostname: "a", started: true, active: true, ports: [5,7]},7]), "balance 2 ports 3")
	var res = balancer.balance({ "a:5": 3, "b:7": 2}, [{ hostname: "a", started: true, active: true, ports: [5,7]}, {hostname: "b", ports: [7,8]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{ hostname: "a", started: true, active: true, ports: [5,7]},7]), "balance 4 ports 3")
	var res = balancer.balance({ "a:5": 3, "b:7": 2, "a:7": 3}, [{ hostname: "a", ports: [5,7]}, {hostname: "b", started: true, active: true, ports: [7,8]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{hostname: "b", started: true, active: true, ports: [7,8]},8]), "balance 4 ports 3")
	var res = balancer.balance({ "a:5": 3, "b:7": 2, "a:7": 3, "b:8":2}, [{ hostname: "a", ports: [5,7]}, {hostname: "b", started: true, active: true, ports: [7,8]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{hostname: "b", started: true, active: true, ports: [7,8]},7]), "balance 4 ports 3")
	var res = balancer.balance({ "a:5": 1, "b:7": 2, "a:7": 1, "b:8":2}, [{ hostname: "a", ports: [5,7]}, {hostname: "b", started: true, active: true, ports: [7,8]}])
	strictEqual(JSON.stringify(res), JSON.stringify([{hostname: "b", started: true, active: true, ports: [7,8]},7]), "balance 4 ports 3")
	
})