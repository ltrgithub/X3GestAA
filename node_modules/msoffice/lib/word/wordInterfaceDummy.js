"use strict";

// Used be wordInterface if word is not opened (testing in browser)

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');

function WordInterfaceDummy() {
	var self = this;
}
exports.WordInterfaceDummy = helpers.defineClass(WordInterfaceDummy, null, {
	
	getResourceUrl: function () {
		var val = this._getBaseURIParam("url");
		return val;
	},
	attachResourceUrl: function(url) {
		console.log("Attach resource: " + url);
	},
	createDatasource: function(mailMergeData, url) {
		console.log("Create datasource: " + url + "\n" + JSON.stringify(mailMergeData));
	},
	createWordTemplate: function(layoutBoxes) {
		alert("Extracted layout:\n" + JSON.stringify(layoutBoxes));
	},
	populateWordTemplate: function(proto, data) {
		alert("Data:\n" + JSON.stringify(data));
		alert("Proto:\n" + JSON.stringify(proto));
	},
	getDocumentContent: function() {
		console.log("Read document content");
		var x;
		var y = "Date: " + (new Date());
		for (x = 1; x < 2; x ++)
			y += "Dummy content to store as word document...";
        return y
	},
	getDocumentTitle: function() {
	},
	setDocumentTitle: function(value) {
	},
	getDocumentUrl: function() {
		//return "http://localhost:8124/sdata/x3/erp/SYDEV/IMAGE('C_AOBJBUR~BLOB~SQH~CC10711SQH00000006~~')";
		//return "http://localhost:8124/sdata/x3/erp/SUPERV/BDOC('C_AOBJBUR~BLOB~SQH~TEST~~')";
		return "http://localhost:8124/sdata/x3/erp/SUPERV/BDOC('C_AOBJBUR~BLOB~ZQS~TEST~~')";
	},
	setDocumentUrl: function(value) {
	},
	getDocumentRepresentation: function() {
		return "noentity.$nofacet";
	},
	getDocumentLocale: function() {
		return "de-DE";
	},
	getOriginalFileName: function() {
		return "doc-de";
	},
	notifySaveDocumentDone: function(value) {
		alert("Document has been saved!");
	},
	getSyracuseDocumentType: function() {
		var val = this._getBaseURIParam("mode");
		return val;
	},
	getDocumentFilename: function() {
		return "dummyname.docx";
	},
	_getBaseURIParam: function(param) {
		var params = document.baseURI.split("?")[1].split("&");
		var val;
		params.forEach(function(p) {
			var idx = p.indexOf(param + "=");
			if (idx > -1)
			{
				val = p.substring(idx + param.length + 1);
				val = decodeURIComponent(val);
			}
		});
		return val;
	},
	signalError: function(closeBrowser, errorText) {
		console.log(errorText);
		alert(errorText);
	},
	expectedVersion: function(value) {
	}
});