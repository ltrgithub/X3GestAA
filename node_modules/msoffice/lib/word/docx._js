"use strict";

var fs = require('streamline-fs');
var zip = require('streamline-zip');
var unzip = require('streamline-zip/lib/unzip/unzip');
var helpers = require("syracuse-core/lib/helpers");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var docxHelper = require("./docxHelper").DocxHelper;

exports.render = function(_, ctx, result, proto, headers, statusCode) {

	var format = ctx && ctx.parameters && ctx.parameters.format;
	if (format.indexOf(httpHelper.mediaTypes.word_mailmerge) > -1) {
		_docx_set_headers(_, ctx, result, proto, headers, statusCode);
		return _docx_mailmerge(_, ctx, result, proto);
	} else if (format.indexOf(httpHelper.mediaTypes.word_report) > -1) {
		return _docx_word_report(_, ctx, result, proto, headers, statusCode);
	}
};

exports.handleV6Document = function(_, document, documentUrl) {
	var customDataXml;
	var doc;
	var customDataObj;

	var isZipFile = docxHelper.is_docx_format(_, document);
	var newDoc = new docxHelper.MemoryOutStream();
	var parts = (documentUrl.split("?")[0] || "").split("/");
	var connectUrl = parts.slice(0, 3).join('/');

	if (isZipFile == false) {
		//customDataObj 			= _docx_build_custom_data(_, null, null, "v6_doc_download", "1");
		customDataObj = _docx_build_custom_data(_, null, null, "v6_doc_embedded", "1");
		customDataObj.docContent = document.toString('base64');
		customDataObj.serverUrl = connectUrl;
		customDataXml = _docx_build_custom_data_xml(customDataObj);
		customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);

		docxHelper.serve_docx_dir(_, newDoc, "/templates/new_doc", customDataXml);
	} else {
		docxHelper.serve_docx_buffer(_, newDoc, document,

		function(_, xmlData) {
			// Preserve old document url
			customDataXml = xmlData;
			documentUrl = xmlData.match(/"documentUrl":"(.*?)"/);
			documentUrl = documentUrl && documentUrl[1];
		},

		function(_) {
			if (!customDataXml) {
				customDataObj = _docx_build_custom_data(_, null, null, "v6_doc", "1");
				customDataObj.serverUrl = connectUrl;
				var customDataXml = _docx_build_custom_data_xml(customDataObj);
				documentUrl = documentUrl || documentUrl;

				customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);
			}
			return customDataXml;
		});
	}
	return {
		type: httpHelper.mediaTypes.docx,
		data: newDoc.content(_)
	};
};

function _docx_mailmerge(_, ctx, result, proto) {
	var createMode = (ctx.parameters && ctx.parameters.createMode) || "1";
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";

	switch (createMode) {
		case "use_tpl":
			// 3 create file by template from doc storage
			createMode = "3";
			break;
		case "new_empty_doc":
			// 1 create new blank file
			createMode = "1";
			break;
		case "new_word_tpl":
			// 2 create file by word wizard
			createMode = "2";
			break;
		default:
			createMode = "1";
	}

	if ((createMode == "3") && (doc_uuid == "{document}")) {
		createMode = "1";
	}

	var customData = _docx_build_custom_data(_, ctx, result, createMode, "1");
	
	if (createMode != "3") {
		_docx_serve_empty_template(_, ctx, customData);
	} else if (createMode == "3") {
		_docx_serve_template(_, ctx, doc_uuid, customData);
	}
}

function _docx_word_report(_, ctx, result, prototype, headers, statusCode) {
	var reportMode = ctx && ctx.parameters && ctx.parameters.reportMode;
	if (reportMode === "tpl_download") return _docx_report_download_tpl(_, ctx, result, prototype, headers, statusCode);
	
	_docx_set_headers(_, ctx, result, prototype, headers, statusCode);
	if (reportMode === "new_tpl") return _docx_report_tpl(_, ctx, result, prototype);
	if (reportMode === "mod_tpl") return _docx_report_mod_tpl(_, ctx, result, prototype);
	return _docx_report(_, ctx, result, prototype);
}

function _docx_report_tpl(_, ctx, result, prototype) {
	_docx_serve_empty_template(_, ctx, _docx_build_custom_data(_, ctx, result, "rpt_build_tpl", "1"));
}

function _docx_report_mod_tpl(_, ctx, result, prototype) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_docx_serve_template(_, ctx, doc_uuid, _docx_build_custom_data(_, ctx, result, "rpt_is_tpl", "1"));
}

function _docx_report_download_tpl(_, ctx, result, prototype, headers, statusCode) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	var filename = (ctx.parameters && ctx.parameters.fileName) || "";
	
	var data = _docx_build_custom_data(_, ctx, result, "rpt_is_tpl", "0");
	data.serverUrl 		= "";
	data.resourceUrl 	= "";
	data.documentUrl 	= "";

	headers["content-disposition"] = "attachment; filename=\"" + filename + "\"";
	headers["content-type"] = httpHelper.mediaTypes.docx;
	headers["cache-control"] = "no-cache,must-revalidate";
	ctx.response.writeHead(statusCode, headers);
	_docx_serve_template(_, ctx, doc_uuid, data);
}

function _docx_report(_, ctx, result, prototype) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_docx_serve_template(_, ctx, doc_uuid, _docx_build_custom_data(_, ctx, result, "rpt_fill_tpl", "1"));
}

function _docx_build_custom_data_xml(customDataObj) {
	var customData = JSON.stringify(customDataObj);
	var customDataXml =
		"<SyracuseOfficeCustomData>" + customData.replace(/&/g, "&amp;") +
		"</SyracuseOfficeCustomData>";
	return customDataXml;
}

function _docx_build_custom_data(_, ctx, result, mode, refresh) {
	var urlRep = ctx ? (ctx.url + "?representation=" + ctx.parameters.representation) : "";

	var parts = (urlRep.split("?")[0] || "").split("/");
	var connectUrl = parts.slice(0, 3).join('/');
	var resourceUrl = urlRep.substring(connectUrl.length);

	var queryParts = {};
	if (result && result.$url) queryParts = helpers.url.parseQueryString(result.$url.split("?")[1] || "");

	resourceUrl += ".$bulk&count=1000";
	if (queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where);
	if (queryParts.orderBy) resourceUrl += "&orderBy=" + encodeURIComponent(queryParts.orderBy);

	return {
		"serverUrl": connectUrl,
		"resourceUrl": resourceUrl,
		"createMode": mode,
		"forceRefresh": refresh,
		"documentRepresentation": ctx ? ctx.parameters.representation : "",
		"originalFileName": "",
		"supportedLocales": ctx ? docxHelper.get_supported_locales(_) : [],
		"documentUrl": "::documentUrl::"
	};
}

function _docx_set_headers(_, ctx, result, proto, headers, statusCode) {
	var filename;

	function format(expression, proto, res) {
		res = res || {};
		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
			return res[p1] || proto[p1] || p1;
		});
		return value;
	}

	filename = format(proto.$title + (proto.$description ? (" - " + proto.$description) : ""), proto, result);

	headers["content-disposition"] = "attachment; filename=\"" + filename + ".docx\"";
	headers["content-type"] = httpHelper.mediaTypes.docx;
	headers["cache-control"] = "no-cache,must-revalidate";

	ctx.response.writeHead(statusCode, headers);
}

function _docx_serve_empty_template(_, ctx, customDataObj, test_template) {
	var tplPath = "/templates/new_doc";
	if (test_template && !test_template.indexOf("/") > -1) {
		tplPath = "/templates/" + test_template;
	}

	var customDataXml = _docx_build_custom_data_xml(customDataObj);
	customDataXml = customDataXml.replace(/::documentUrl::/, "");
	docxHelper.serve_docx_dir(_, ctx.response, tplPath, customDataXml);
}

function _docx_serve_template(_, ctx, doc_uuid, customDataObj) {
	var documentUrl;
	var doc;

	if (ctx.parameters && ctx.parameters.test_template) {
		return _docx_serve_empty_template(_, ctx, customDataObj, ctx.parameters.test_template);
	}

	doc = docxHelper.get_template(_, doc_uuid);
	customDataObj.originalFileName = doc.originalFileName;

	return docxHelper.serve_docx_buffer(_, ctx.response, doc.content,

	function(_, xmlData) {
		// Preserve old document url (for modifying templates)
		documentUrl = xmlData.match(/"documentUrl":"(.*?)"/);
		documentUrl = documentUrl && documentUrl[1];
	},

	function(_) {
		var customDataXml = _docx_build_custom_data_xml(customDataObj);
		documentUrl = documentUrl || "";
		customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);
		return customDataXml;
	});
}