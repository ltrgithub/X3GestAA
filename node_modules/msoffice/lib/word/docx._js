"use strict";

var fs = require('fs');
var zip = require('streamline-zip');
var unzip = require('streamline-zip/lib/unzip/unzip');
var helpers = require("syracuse-core/lib/helpers");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

exports.render = function(_, ctx, result,  proto, headers, statusCode) {
	
	_docx_set_headers(_, ctx, result, proto, headers, statusCode);
	
	var format = ctx && ctx.parameters && ctx.parameters.format;
	if (format.indexOf(httpHelper.mediaTypes.word_mailmerge) > -1) {
		return _docx_mailmerge(_, ctx, result, proto);
	} else if (format.indexOf(httpHelper.mediaTypes.word_report) > -1) {
		return _docx_word_report(_, ctx, result, proto);
	}
	
};

function _docx_mailmerge(_, ctx, result, proto) {
	var createMode 	= (ctx.parameters && ctx.parameters.createMode) || "1";
	var doc_uuid 	= (ctx.parameters && ctx.parameters.doc_uuid) || "";

	switch (createMode) {
		case "use_tpl": 
			createMode = "3";
			break;
		case "new_empty_doc": 
			createMode = "1";
			break;
		case "new_word_tpl": 
			createMode = "2";
			break;
		default:
			createMode = "1";
	}

	/* Modes: 
	 * 1 create new blank file
	 * 2 create file by word wizard
	 * 3 create file by template from doc storage
	 */
	
	/* When createMode == 3
	 * uuid of the document to use as template
	 */

	// when createMode==3 there must be a choosen document
	if ((createMode == "3") && (doc_uuid == "{document}")) {
		createMode = "1";	
	}

	var customData =  _docx_build_custom_data(_, ctx, result, createMode, "1");
	if (createMode != "3") {
		_docx_serve_empty_template(_, ctx, customData);
	}
	else if (createMode == "3")
	{
		_docx_serve_template(_, ctx, doc_uuid, customData);
	}
}

function _docx_word_report(_, ctx, result, prototype) {
	var reportMode = ctx && ctx.parameters && ctx.parameters.reportMode;
	if (reportMode === "new_tpl")
		return _docx_report_tpl(_, ctx, result, prototype);
	if (reportMode === "mod_tpl")
		return _docx_report_mod_tpl(_, ctx, result, prototype);
	return _docx_report(_, ctx, result, prototype);
}

function _docx_report_tpl(_, ctx, result, prototype) {
	_docx_serve_empty_template(_, ctx, _docx_build_custom_data(_, ctx, result, "rpt_build_tpl", "1"));
}

function _docx_report_mod_tpl(_, ctx, result, prototype) {
	var doc_uuid 	= (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_docx_serve_template(_, ctx, doc_uuid, _docx_build_custom_data(_, ctx, result, "rpt_is_tpl", "1"));
}

function _docx_report(_, ctx, result, prototype) {
	var doc_uuid 	= (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_docx_serve_template(_, ctx, doc_uuid, _docx_build_custom_data(_, ctx, result, "rpt_fill_tpl", "1"));
}

function _docx_serve_empty_template(_, ctx, customDataObj) {
	var customDataXml = _docx_build_custom_data_xml(customDataObj);
	new zip.Zip(ctx.response, {
		filter: function(_, name, entry) {	return name !== '.svn';	},
		transform: function(_, contents, entry) {
			if (entry.name !== 'customXml/item1.xml') 
				return contents;
			return new Buffer(customDataXml);					
		}		
	}).add(_, { path: __dirname + "/templates/new_doc"}).finish(_);
}

function _docx_serve_template(_, ctx, doc_uuid, customDataObj) {
	var filter = {
			jsonWhere:{
				$uuid: doc_uuid
			}
	};
	var db = adminHelper.getCollaborationOrm(_);
	var docEntity = db.model.getEntity("msoWordTemplateDocument");
	var documentInstance = db.fetchInstance(_, docEntity, filter);
	if (!documentInstance)
	{
		throw new Error("Unable to read document content");
	}
	customDataObj.originalFileName = documentInstance.fileName(_);
	var customDataXml = _docx_build_custom_data_xml(customDataObj);

	var content = documentInstance.content(_);
	if (!content.fileExists(_))
	{
		throw new Error("Unable to read document content");
	}

	var document = content.createReadableStream(_).readAll(_);
	var archive = new zip.Zip(ctx.response);

	var word_rels_document_xml_rels_name 	= "word/_rels/document.xml.rels";
	var content_typesName 					= "[Content_Types].xml";
	var word_rels_document_xml_rels;
	var content_types;
	
	var customXmlFile;
	var customXmlFiles = [];
	
	new unzip.Unzip(
		document, 
		function(filename, filecontent, headers, _) {
			var customXmlNum
			customXmlNum = filename.match(/customXml\/item([0-9]*?)\.xml/);

			if (customXmlNum && customXmlNum[1]) {
				customXmlFiles.push(customXmlNum);
				if (filecontent.toString("utf8").match(/<SyracuseOfficeCustomData>.*<\/SyracuseOfficeCustomData>/))
					customXmlFile = filename;
				else
					archive.add(_, { name: filename, data: filecontent});
			} else if (filename === word_rels_document_xml_rels_name) {
				// Maybe this file has to be modified later, so don't add it to archive yet
				word_rels_document_xml_rels = filecontent;
			} else if (filename === content_typesName) {
				content_types = filecontent;
			} else {
				archive.add(_, { name: filename, data: filecontent});
			}
		}).unzip(_);

	if (customXmlFile) { // There is already a custom XML-File, just change the content
		archive.add(_, { name: customXmlFile, data: new Buffer(customDataXml) });
	} else {
		var newFileNum = 0;
		var rid = 0;
		var rels = word_rels_document_xml_rels.toString();
		
		while (customXmlFiles.indexOf(newFileNum++) >= 0);		// Generate new unique filename for customXml
		while (rels.indexOf("Id=\"rId" + rid + "\"") >= 0);		// Generate new unique relation id for customXml

		// modify document.xml.rels
		var newRel = '<Relationship Id="rId' + rid + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml" Target="../customXml/item' + newFileNum + '.xml"/>';
		word_rels_document_xml_rels = new Buffer(rels.replace("</Relationships>", newRel + "</Relationships>"));
		
		// Modify [Content_Types].xml
		content_types = new Buffer(content_types.toString().replace("</Types>", '<Override PartName="/customXml/itemProps' + newFileNum + '.xml" ContentType="application/vnd.openxmlformats-officedocument.customXmlProperties+xml"/></Types>'));

		var uid = helpers.uuid.generate().toUpperCase();
		var itemProps = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
						'<ds:datastoreItem ds:itemID="{' + uid + '}" xmlns:ds="http://schemas.openxmlformats.org/officeDocument/2006/customXml"><ds:schemaRefs/></ds:datastoreItem>';
		
		archive.add(_, { 	
					name: "customXml/item" + newFileNum + ".xml", 
					data: new Buffer(customDataXml) });
		archive.add(_, { 
					name: "customXml/itemProps" + newFileNum + ".xml", 
					data: new Buffer(itemProps) });
		archive.add(_, { 
					name: "customXml/_rels/item" + newFileNum + ".xml.rels", 
					data: new Buffer('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' + 
						'<Relationship Id="rId' + rid + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps" Target="itemProps' + newFileNum + '.xml"/></Relationships>')});
	}
	
	if (word_rels_document_xml_rels)
		archive.add(_, { name: word_rels_document_xml_rels_name, data: word_rels_document_xml_rels });
	if (content_types)
		archive.add(_, { name: content_typesName, data: content_types });

	archive.finish(_);
}

function _docx_build_custom_data_xml(customDataObj) {
	var customData = JSON.stringify(customDataObj);
	var customDataXml =
		"<SyracuseOfficeCustomData>" +
		customData.replace(/&/g, "&amp;") +
		"</SyracuseOfficeCustomData>";
	return customDataXml;
}

function _docx_build_custom_data(_, ctx, result, mode, refresh) {
	var urlRep = ctx.url + "?representation=" + ctx.parameters.representation;

	var parts 		= (urlRep.split("?")[0] || "").split("/");
	var connectUrl 	= parts.slice(0, 3).join('/');
	var resourceUrl = urlRep.substring(connectUrl.length);

	var queryParts = {};
	if (result.$url)
		queryParts = helpers.url.parseQueryString(result.$url.split("?")[1] || "");
	
	if(queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where); 
	if(queryParts.orderBy) resourceUrl += "&orderBy=" + encodeURIComponent(queryParts.orderBy); 
	
	return {
		"serverUrl":      connectUrl,
		"resourceUrl":    resourceUrl,
		"createMode":     mode,
		"forceRefresh":   refresh,
		"documentRepresentation": ctx.parameters.representation,
		"originalFileName": "",
		"supportedLocales": _docx_get_supported_locales(_)
	};
}

function _docx_set_headers(_, ctx, result, proto, headers, statusCode) {
	var filename;

	function format(expression, proto, res) {
		res = res || {};
		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
			return res[p1] || proto[p1] || p1;
		});
		return value;
	}

	filename = format(proto.$title + (proto.$description ? (" - " + proto.$description): ""), proto, result);

	headers["content-disposition"] = "attachment; filename=\"" + filename + ".docx\"";
	headers["content-type"] = httpHelper.mediaTypes.docx;
	headers["cache-control"] = "no-cache,must-revalidate";

	ctx.response.writeHead(statusCode, headers);
}

function _docx_get_supported_locales(_) 
{
	var lookupLocales = require('syracuse-collaboration/lib/entities/lookupLocale').readLocales(_);
	var locales = lookupLocales.map_(_, function(_, e) { 
		return { 
			name: e.name, 
			nativeName: e.nativeName,
			englishName: e.englishName
		};
	});
	return locales;
}