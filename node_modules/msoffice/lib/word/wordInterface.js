"use strict"

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');
var httpController = require("syracuse-ui/lib/common/controller/httpController");
var httpHelper = require('syracuse-sdata/lib/httpHelper');

function WordInterface() {
	var self = this;
    var wordInterfaceCtor;

    if (external == "WordAddIn.WordAddInJSExternal") // Did word open this page using IE 
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceImpl").WordInterfaceImpl;
    }
    else // no word - so use a dummy stub
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceDummy").WordInterfaceDummy;
    }
    
    this.wordInterfaceImpl = new wordInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function() {
            return self.wordInterfaceImpl.getDocumentUrl();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function() {
        	return self.wordInterfaceImpl.getDocumentTitle();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentTitle(value);
        }
    });    
}

exports.WordInterface = helpers.defineClass(WordInterface, null, {
	attachResourceUrl: function(url) {
		var self = this;
		self.wordInterfaceImpl.attachResourceUrl(url);
	},
	
    onLogin: function() {
        var self = this;
        var resourceUrl = self.wordInterfaceImpl.getResourceUrl();
        if (resourceUrl != "")
        {
        	self.loadPage(resourceUrl);
        }
    },
    
    loadPage: function(resourceUrl, name, onLoaded) {
        var self = this;
        document.controller.loadRepresentation(null, resourceUrl, function(response) {
            var repr = response.$representation;
            repr.$article = (repr.$prototype || {}).$article || {};
            repr.$article.$category = "wordmailmerge";
            repr.$prototype = repr.$prototype || {};
            
            var page = document.itemFactory.loadPage({
                $representation: repr,
                $urlParts: response.$urlParts,
                $category: "wordmailmerge",
                $autoFetch: false
            });
            self.fetchData(page, -1, null, function() {
            	onLoaded && onLoaded();
            });
        }, function(error){
            alert(error);
        }, null);
    },
    
    fetchData: function(page, maxLines, data, onLoaded) {
        var self = this;
        var options = null;
        
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = page.formatMenuUrl(data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + msofficeHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + msofficeHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        
        page.fetch(options, function(fetchData, response, requestUrl){
            // first fetch, resize table
            if (!data) {
                var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
                if (maxLines < 0) 
                    page.setLineCount(fetchCount);
                else 
                    page.setLineCount(Math.min(fetchCount, maxLines));
            }
            //
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources.length;
            //
            if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }
            // apply data
            page.applyChange(fetchData, response, requestUrl, self.wordInterfaceImpl);
            
            if ((((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) &&
            (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess) {
    	var self = this;

    	var docUrl = this.documentUrl;
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is already published");
        }

        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;

        // Retrieving content of doc has to be done bevor setting title and url as done above
        // This is neccessary, because title and url will be also stored in the the doc
        content = self.wordInterfaceImpl.getDocumentContent();
        
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.docx
            },
            fileName: docTitle + ".docx"
        }, function(data, response) {
        	self.wordInterfaceImpl.notifySaveDocumentDone();
            onSuccess && onSuccess(data, response);
        });
    },
    getDocumentUrl: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getDocumentUrl();    	
    }
});
