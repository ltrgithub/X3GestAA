"use strict";

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var helpers = require("syracuse-core/lib/helpers");

function WordInterface() {
	var self = this;
    var wordInterfaceCtor;

    if (external == "WordAddIn.WordAddInJSExternal") // Did word open this page using IE 
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceImpl").WordInterfaceImpl;
    }
    else // no word - so use a dummy stub
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceDummy").WordInterfaceDummy;
    }
    
    this.wordInterfaceImpl = new wordInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function() {
            return self.wordInterfaceImpl.getDocumentUrl();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function() {
        	return self.wordInterfaceImpl.getDocumentTitle();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentTitle(value);
        }
    });    
}

exports.WordInterface = helpers.defineClass(WordInterface, null, {
	attachResourceUrl: function(url) {
		var self = this;
        var documentType = self.wordInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.wordInterfaceImpl.getResourceUrl();
        if (resourceUrl != "")
        {
        	self.loadPage(resourceUrl, null, null, documentType);
        }
	},
	
    onLogin: function() {
        var self = this;
        var documentType = self.wordInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.wordInterfaceImpl.getResourceUrl();
        
        if (documentType === "word-v6-download")
        {
           	self.wordInterfaceImpl.downloadV6Document();
        }
        else
        {
	        if (resourceUrl != "")
	        {
	        	self.loadPage(resourceUrl, null, null, documentType);
	        }
        }
    },
    
    loadPage: function(resourceUrl, name, onLoaded, documentType) {
        var self = this;

        if (documentType === "word-report-tpl" || documentType === "word-report-tpl-refresh" || documentType === "word-report")
       	{
        	document.controller.loadRepresentation(null, resourceUrl, function(response) {
        		var repr = response.$representation;
        		repr.$article = repr.$article || ((repr.$prototype || {}).$article || {});
        		repr.$article.$category = "wordreport";
        		repr.$prototype = repr.$prototype || {};
	    		var page = document.site.loadNewPage({
	    			$representation: repr,
	    			$urlParts: response.$urlParts,
	    			$category: "wordreport",
	    			$autoFetch: false
	    		});
        		self.fetchData(page, -1, null, function() {
        			if (documentType === "word-report-tpl") {
        				page.createWordTemplate(self.wordInterfaceImpl, false);
        			} else if (documentType === "word-report-tpl-refresh") {
            			page.createWordTemplate(self.wordInterfaceImpl, true);
        			} else if (documentType === "word-report") {
        				page.populateWordTemplate(self.wordInterfaceImpl);        			
        			}
        			onLoaded && onLoaded();
        		});
        	});
       	}
        else if (documentType === "word-mailmerge")
        {
        	document.controller.loadRepresentation(null, resourceUrl, function(response) {
        		var repr = response.$representation;
        		repr.$article = (repr.$prototype || {}).$article || {};
        		repr.$article.$category = "wordmailmerge";
        		repr.$prototype = repr.$prototype || {};
        		
        		var page = document.site.loadNewPage({
        			$representation: repr,
        			$urlParts: response.$urlParts,
        			$category: "wordmailmerge",
        			$autoFetch: false
        		});
        		self.fetchData(page, -1, null, function() {
        			page.finish(self.wordInterfaceImpl, resourceUrl);
        			onLoaded && onLoaded();
        		});
        	}, function(error){
        		alert(error);
        	}, null);
        }
    },
    
    fetchData: function(page, maxLines, data, onLoaded) {
        var self = this;
        var options = null;
        
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = page.formatMenuUrl(data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + msofficeHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + msofficeHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        
        var locale = self.getDocumentLocale();
        if (locale){
        	options = options || {};
        	options.headers = {
        			"accept-language" : locale
        	};
        }
        
        page.fetch(options, function(fetchData, response, requestUrl){

        	// fetching a single resource, not a query - done here!
        	if (fetchData && !fetchData.$resources)
        	{
        		page.applyChange(fetchData, response, requestUrl, self.wordInterfaceImpl);
        		onLoaded && onLoaded();
        		return;
        	}
            // first fetch, resize table
            if (!data) {
                var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
                if (maxLines < 0) 
                    page.setLineCount(fetchCount);
                else 
                    page.setLineCount(Math.min(fetchCount, maxLines));
            }
        	
            //
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources.length;
            //
            if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }
            // apply data
            page.applyChange(fetchData, response, requestUrl, self.wordInterfaceImpl);
            
            if ((((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) &&
            (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess) {
    	var self = this;
    	
    	var docUrl = this.documentUrl;
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is already published");
        }

        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;

        // Retrieving content of doc has to be done bevor setting title and url as done above
        // This is neccessary, because title and url will be also stored in the the doc
        var content = self.wordInterfaceImpl.getDocumentContent();
        
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.docx
            },
            fileName: docTitle + ".docx"
        }, function(data, response) {
        	self.wordInterfaceImpl.notifySaveDocumentDone();
            onSuccess && onSuccess(data, response);
        });
    },

    publishDocumentX3: function(docUrl) {
    	var self = this;

//    	docUrl = "http://localhost:8124/sdata/x3/erp/SUPERV/IMAGE('C_AUTILIS~AUSPIC~AUSPIC~AAA')";
//    	docUrl = "http://localhost:8124/sdata/x3/erp/SUPERV/IMAGE('C_AOBJBUR~BLOB~SQH~TEST~~')";

    	var blobKey		= docUrl.match(/\/IMAGE\('(.*?)'\)/);
    	if (!blobKey || blobKey.length < 2 || !blobKey[1]) {
    		return;
    	}
    	var blobKeys 	= blobKey[1].split("~");
    	var imgKey		= blobKeys.slice(2).join("~");
    	var x3Class 	= blobKeys[0];
    	var x3Prop		= blobKeys[1];
    	var x3Key		= blobKeys.slice(2).join("~");
    	var x3ClassUrl  = x3Class.slice(0, 2) === "C_" ? x3Class.slice(2) : x3Class;	// TODO: Review this
    	var baseUrl		= docUrl.slice(0, docUrl.indexOf("/IMAGE("));
    	var sdataUrl	= "/" + baseUrl.split("/").slice(3).join("/");
    	
    	var wcUuid = helpers.uuid.generate();
    	var xhr = new XMLHttpRequest();

    	var content 	= self.wordInterfaceImpl.getDocumentContent();
    	var wcCreateURL = baseUrl + "/" + x3ClassUrl + "('" + x3Key + "')" + "/$workingCopies?representation=" + x3ClassUrl + ".$edit&trackingId=" + wcUuid;
    	var filename 	= self.wordInterfaceImpl.getDocumentFilename();

    	function displayDiagnoses(error) {
			function traverseNode(node)
			{
				if (node.$diagnoses)
				{
					node.$diagnoses.forEach(function(diag) {
						msg += "\n" + diag.message;
					});
				}
				var prop;
				for (prop in node) {
				    if (prop !== "$diagnoses" && node.hasOwnProperty(prop) && typeof node[prop] === "object") {
				    	traverseNode(node[prop]);
				    }
				}
			}

    		var msg = "";
    		try {
    			if (error && error.data) {
    				var data = JSON.parse(error.data);
    				traverseNode(data);
    			}
    		} catch (e) {   }
    		if (msg === "")
    			msg = error && error.data;
    		self.wordInterfaceImpl.signalError(true, msg);
    	};

    	xhr.open('POST', wcCreateURL, false);

    	xhr.send();
		if (!(xhr.status == 200 || xhr.status == 201)) {
			displayDiagnoses({ data: xhr.responseText});
			return;
		}
		try {
			var wc 			= JSON.parse(xhr.responseText);
			var imagePUTUrl = baseUrl + "/IMAGE('" + x3Class + "~" + x3Prop + "~" + wc.$uuid + "~" + imgKey + "')";
			var refererUrl  = baseUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
		} catch (e) {
			displayDiagnoses({ data: e});
			return;
		}

		var xhr = new XMLHttpRequest();
		xhr.open('PUT', imagePUTUrl, false);
		xhr.setRequestHeader("content-type", 	"image/gif");
		xhr.setRequestHeader("accept", 			"application/json;vnd.sage=syracuse");
		xhr.setRequestHeader("x3-referer", 		refererUrl);
		xhr.setRequestHeader("x-file-name", 	filename);
		
		xhr.send(content);

		if (!(xhr.status == 200 || xhr.status == 201)) {
			displayDiagnoses({ data: xhr.responseText});
			return;
		}

		//var wcSaveURL 	= baseUrl + "/" + x3ClassUrl + "('" + x3Key + "')" + "/$workingCopies?representation=" + x3ClassUrl + ".$edit&trackingId=" + wcUuid;
		var wcSaveURL 	= baseUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
		refererUrl		= sdataUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
		var saveWc 		= {
			"$etag": 	wc["$etag"],
			"$url":		refererUrl,
			"$uuid":	wc["$uuid"],
			"$actions": {
				"$save": {
					"$isRequested": true
				}
			}
		};
		
		var saveWcJSon 	= JSON.stringify(saveWc);
		var xhr = new XMLHttpRequest();
		xhr.open('POST', wcSaveURL, false);
		xhr.setRequestHeader("content-type", 			"application/json");
		xhr.setRequestHeader("accept", 					"application/json;vnd.sage=syracuse");
		xhr.setRequestHeader("x3-referer", 				refererUrl);
		xhr.setRequestHeader("X-HTTP-Method-Override", 	"PUT");
		xhr.send(saveWcJSon);
		if (!(xhr.status == 200 || xhr.status == 201) || xhr.responseText.indexOf("$diagnoses") > -1) {
			displayDiagnoses({ data: xhr.responseText});
			return;
		}
		self.wordInterfaceImpl.notifySaveDocumentDone();
    },
    getDocumentUrl: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getDocumentUrl();    	
    },
	getDocumentRepresentation: function() {
		var self = this;
		return self.wordInterfaceImpl.getDocumentRepresentation();
	},
	getDocumentLocale: function() {
		var self = this;
		return self.wordInterfaceImpl.getDocumentLocale();
	},
    getAddinVersion: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getAddinVersion();    	
    },
    getResourceUrl: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getResourceUrl();
    }
});
