"use strict"

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var locale = require('syracuse-core/lib/locale');
var date = require('syracuse-core/lib/types/date');
var globals = require('streamline/lib/globals');
var _resources = date.resources;
var userProfile  = require('syracuse-ui/lib/site/userProfile');

function WordInterface() {
	var self = this;
    var wordInterfaceCtor;

    if (external == "WordAddIn.WordAddInJSExternal") // Did word open this page using IE 
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceImpl").WordInterfaceImpl;
    }
    else // no word - so use a dummy stub
    {
        wordInterfaceCtor = require("msoffice/lib/word/wordInterfaceDummy").WordInterfaceDummy;
    }
    
    this.wordInterfaceImpl = new wordInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function() {
            return self.wordInterfaceImpl.getDocumentUrl();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function() {
        	return self.wordInterfaceImpl.getDocumentTitle();
        },
        set: function(value) {
        	return self.wordInterfaceImpl.setDocumentTitle(value);
        }
    });    
}

exports.WordInterface = helpers.defineClass(WordInterface, null, {
	attachResourceUrl: function(url) {
		var self = this;
        var documentType = self.wordInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.wordInterfaceImpl.getResourceUrl();
        if (resourceUrl != "")
        {
        	self.loadPage(resourceUrl, null, null, documentType);
        }
	},
	
    onLogin: function() {
        var self = this;
        var documentType = self.wordInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.wordInterfaceImpl.getResourceUrl();
        if (resourceUrl != "")
        {
        	self._changeLocale();
        	self.loadPage(resourceUrl, null, null, documentType);
        }
    },
    
    loadPage: function(resourceUrl, name, onLoaded, documentType) {
        var self = this;

        if (documentType === "word-report-tpl" || documentType === "word-report-tpl-refresh" || documentType === "word-report")
       	{
        	document.controller.loadRepresentation(null, resourceUrl, function(response) {
        		var repr = response.$representation;
        		repr.$article = repr.$article || ((repr.$prototype || {}).$article || {});
        		repr.$article.$category = "wordreport";
        		repr.$prototype = repr.$prototype || {};
	    		var page = document.site.loadNewPage({
	    			$representation: repr,
	    			$urlParts: response.$urlParts,
	    			$category: "wordreport",
	    			$autoFetch: false
	    		});
        		self.fetchData(page, -1, null, function() {
        			if (documentType === "word-report-tpl") {
        				page.createWordTemplate(self.wordInterfaceImpl, false);
        			} else if (documentType === "word-report-tpl-refresh") {
            			page.createWordTemplate(self.wordInterfaceImpl, true);
        			} else if (documentType === "word-report") {
        				page.populateWordTemplate(self.wordInterfaceImpl);        			
        			}
        			onLoaded && onLoaded();
        		});
        	});
       	}
        else if (documentType === "word-mailmerge")
        {
        	//alert("wordinterface loadPage");
        	document.controller.loadRepresentation(null, resourceUrl, function(response) {
        		var repr = response.$representation;
        		repr.$article = (repr.$prototype || {}).$article || {};
        		repr.$article.$category = "wordmailmerge";
        		repr.$prototype = repr.$prototype || {};
        		
        		
        		var page = document.site.loadNewPage({
        			$representation: repr,
        			$urlParts: response.$urlParts,
        			$category: "wordmailmerge",
        			$autoFetch: false
        		});
        		self.fetchData(page, -1, null, function() {
        			page.finish(self.wordInterfaceImpl, resourceUrl);
        			onLoaded && onLoaded();
        		});
        	}, function(error){
        		alert(error);
        	}, null);
        }
    },
    
    fetchData: function(page, maxLines, data, onLoaded) {
        var self = this;
        var options = null;
        
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = page.formatMenuUrl(data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + msofficeHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + msofficeHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        
        page.fetch(options, function(fetchData, response, requestUrl){

        	// fetching a single resource, not a query - done here!
        	if (fetchData && !fetchData.$resources)
        	{
        		page.applyChange(fetchData, response, requestUrl, self.wordInterfaceImpl);
        		onLoaded && onLoaded();
        		return;
        	}
            // first fetch, resize table
            if (!data) {
                var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
                if (maxLines < 0) 
                    page.setLineCount(fetchCount);
                else 
                    page.setLineCount(Math.min(fetchCount, maxLines));
            }
        	
            //
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources.length;
            //
            if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }
            // apply data
            page.applyChange(fetchData, response, requestUrl, self.wordInterfaceImpl);
            
            if ((((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) &&
            (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess) {
    	var self = this;

    	var docUrl = this.documentUrl;
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is already published");
        }

        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;

        // Retrieving content of doc has to be done bevor setting title and url as done above
        // This is neccessary, because title and url will be also stored in the the doc
        content = self.wordInterfaceImpl.getDocumentContent();
        
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.docx
            },
            fileName: docTitle + ".docx"
        }, function(data, response) {
        	self.wordInterfaceImpl.notifySaveDocumentDone();
            onSuccess && onSuccess(data, response);
        });
    },

    getDocumentUrl: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getDocumentUrl();    	
    },
	getDocumentRepresentation: function() {
		var self = this;
		return self.wordInterfaceImpl.getDocumentRepresentation();
	},
    getAddinVersion: function() {
    	var self = this;
    	return self.wordInterfaceImpl.getAddinVersion();    	
    },

    _changeLocale: function() {
    	var self = this;
  	
    	var trackingId = helpers.uuid.generate();
    	var locale = self._getLocaleFromTemplate();
    	if (!locale){
    		return;
    	}
    		
    	var localeUuid = self._getLocaleUuid(locale);
    	if (!localeUuid) {
    		return;
    	}
    	//alert("Fetching data for language: >" + localeUuid.code + "< >" + localeUuid.description + "< >" + localeUuid.$uuid + "< >" + localeUuid.$key + "< >");
    	document.controller.sendRequest(null, {
             $location: {
            	 $url: "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit&role={$role}",
            	 $method: "POST"
             },
             params: {
                 trackingId: trackingId
             },
             data: {
            	selectedLocale: {
        			$uuid: localeUuid.$uuid
            	}
             },
             method: "POST",
             noDisplayErr: false
         }, function(data, response){
        	 
         }, function(err){
             if (callbackError) {
                 callbackError(err);
             }
         });    	
    },
 
    
    // get locale from the template filename
    _getLocaleFromTemplate: function(){
        var self = this;
     
        var originalFileName = self.wordInterfaceImpl.getOriginalFileName();
        
        if (!originalFileName) {
        	return;
        }
        	
    	var locale;
    	if (originalFileName.length > 3) {
    		locale = originalFileName.substring(0 , 2).toLowerCase() + "-" + originalFileName.substring(2 , 4).toUpperCase();
    	}
    		
        return locale;
    }, 
    
    
    // Fetch UUID of locale
    _getLocaleUuid: function(locale){
        var self = this;
        var localeUuid;
        if (!locale) {
            return "";
        }

        var url = "/sdata/syracuse/collaboration/syracuse/localePreferences" +
        "?representation=localePreference.$query" +
        "&where=(code%20like%20%27%25" +
        locale +
        "%25%27)&startIndex=1&count=1";
        
        var response = $.ajax({
            type: 'get',
            url: url,
            dataType: 'json',
            async: false
        });
        
        if (response.status == 200) {
            try {
                var list = JSON.parse(response.responseText);
                var localeUuid = list && list.$resources && list.$resources[0];
                if (localeUuid) {
                	//alert(localeUuid.$uuid + "< >" localeUuid.$key + "< >" + localeUuid.$title + "< >" + localeUuid.$value);
                	//return localeUuid.$uuid;
                	return localeUuid;
                }
            } 
            catch (e) {
                alert(e);
            }
        }
        return "";
    }    
});
