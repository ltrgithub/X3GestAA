"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function WordPage(){
}

exports.WordPage = helpers.defineClass(WordPage, DesktopPage, {
    loadBox: function(){
        this.isAutoInsertFieldDisabled = true;
        return DesktopPage.prototype.loadBox.call(this);
    },
    drawPage: function(){
        this.$mailMergeGridPrototype = this.createMailMergeDataPrototype($properties.$resources.$item.$properties, this.$item);
        syra_site.addGrid(this);
        this.mailMergeData = {
            columns: [],
            data: []
        };
    },
    // dummy function for to do nothing (called from controller)
    applyChange: function(){
    },
    applyChangeOffice: function(newData, response, requestUrl, wordInterface){
        var self = this;
        var representation = this;
        var proto = representation.$prototype.$properties.$resources.$item.$properties;
        var items = self.$mailMergeGridPrototype;
        var data = self.convertDataTo2DimArray(newData, proto, items);
        
        self.mailMergeData.columns = items;
        for (var i = 0; i < data.length; i++) {
            self.mailMergeData.data.push(data[i]);
        }
    },
    finish: function(wordInterface, requestUrl){
        wordInterface.createDatasource(this.mailMergeData, requestUrl);
    },
    createMailMergeDataPrototype: function($prototype, $item){
        var proto = $prototype;
        var _item = $item;
        
        // get to "$resources" layout
        while (_item && _item.$layout && (_item.$bind !== "$resources")) {
            _item = _item.$layout.$items && _item.$layout.$items[0];
        }
        if (!_item) {
            return;
        }
        // get column list as string array 
        var items = (_item.$layout && _item.$layout.$items) || _item.$items;
        if (!items) {
            items = Object.keys(proto).map(function(prop){
                return {
                    $bind: prop
                };
            });
        }
        
        // simplified proto
        return items.map(function(item){
            var protoItem = proto[item.$bind];
            return {
                _name: item.$bind.replace("$", "_"), // escape $ properties
                _orgName: item.$bind, // temporary storage of original name
                _title: protoItem.$title,
                _type: protoItem.$type
            };
        });
    },
 convertDataTo2DimArray: function(data, $prototype, $mailMergeGridPrototype) {
		var proto = $prototype;
		var items = $mailMergeGridPrototype;
		var self = this;
		
		function format(expression, res) {
			res = res || {};
			var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
				return res[p1] || self.$prototype[p1] || (self.$prototype.$localization && self.$prototype.$localization[p1]);
			});
			return value;
		}

		var ret = data.$resources.map(function(res) {
			return items.map(function(item) {
				var prop = res[item._orgName];
				var propProto = proto[item._orgName];
				var result = {
					value: "",
					$type: "",
					$link: ""
				};
				var record = res;
				// manage limited set of types
				switch (item._type) {
					case "application/x-string":
						if (record && prop && propProto.$format) {
							switch (propProto.$format) {
								case "$email":
									if (prop) {
										result.$link = "mailto:" + prop;
										break;
									}
								case "$phone":
									if (prop) {
										result.$link = "phoneto:" + prop;
										break;
									}
								case "$url":
									if (prop) {
										result.$link = prop;
										break;
									}
							}
						}
						/*
                    	result.value = prop;
                    	if (prop){
                    		if (propProto.$format == "$email"){
                    			result.value = "mailto:" + prop;
                    		}
                    		else if (propProto.$format == "$phone"){
                    			result.value = "phoneto:" + prop;
                    		}
                    	}
                    	break;
                    	*/
					case "application/x-integer":
					case "application/x-decimal":
					case "application/x-datetime":
					case "application/x-date":
					case "application/x-time":
						result.value = prop;
						break;
					case "image":
						if (res[item._orgName]) result.$url = format(res[item._orgName].$url, record);
						break;
					case "application/x-boolean":
						result.value = prop;
						break;

					case "application/x-choice":
						result.value = prop;
						propProto.$value.$enum.some(function(element) {
							if (element.$value == prop) {
								result.value = element.$title;
								result.value = format(result.value, record);
								return true;
							}
							return false;
						});
						break;

					case "application/x-reference":
						record = prop;
						result.value = (record && propProto.$value && syra_expression.parse(self.$grid.$record, propProto.$value, record)) || "";
						break;
					default:
						result.value = "";
				}
				result.value = result.value || "";
				result.$type = item._type;
				result.$link = result.$link || "";
				return result;
			});
		});
		return ret;
	},     
    setLineCount: function(lineCount){
    }
});
