"use strict";

var sa = require('syracuse-orm/lib/storageArea');
var fs = require('streamline-fs');
var zip = require('streamline-zip');
var unzip = require('streamline-zip/lib/unzip/unzip');
var helpers = require("syracuse-core/lib/helpers");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var excelDefines = require("../helpers").defines;

exports.render = function(_, ctx, result, proto, headers, statusCode) {
	_pptx_set_headers(_, ctx, result, proto, headers, statusCode);

	var customData = _pptx_build_custom_data(ctx, result, "new_chart_slide", "1");
	_pptx_serve_empty_template(_, ctx, customData);

};

function _pptx_serve_empty_template(_, ctx, customDataObj) {
	var customDataXml = _pptx_build_custom_data_xml(customDataObj);
	new zip.Zip(ctx.response, {
		filter: function(_, name, entry) {
			return ['.svn', '.checksums', '.git'].indexOf(name) < 0;
		},
		transform: function(_, contents, entry) {
			if (entry.name !== 'customXml/item1.xml') return contents;
			return new Buffer(customDataXml);
		}
	}).add(_, {
		path: __dirname + "/templates/new_pptx"
	}).finish(_);
}

function _pptx_build_custom_data_xml(customDataObj) {
	var customData = JSON.stringify(customDataObj);
	var customDataXml =
		"<SyracusePptCustomData>" + customData.replace(/&/g, "&amp;") +
		"</SyracusePptCustomData>";
	return customDataXml;
}

function _pptx_build_custom_data(ctx, result, mode, refresh) {
	var urlRep = ctx.url + "?representation=" + ctx.parameters.representation;
	var parts = (urlRep.split("?")[0] || "").split("/");
	var connectUrl = parts.slice(0, 3).join('/');
	var resourceUrl = urlRep.substring(connectUrl.length);
	var repr = ctx.parameters.representation;

	var queryParts = {};

	if (result.$url) queryParts = helpers.url.parseQueryString(result.$url.split("?")[1] || "");

	if (queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where);
	if (queryParts.orderBy) resourceUrl += "&orderBy=" + encodeURIComponent(queryParts.orderBy);
	if (queryParts.$bind) resourceUrl += "&$bind=" + queryParts.$bind;
	
	var arr = Object.keys(ctx.parameters);
	arr.forEach(function(key) {
		if (["startRecord", "displayLineNum", "cube", "count", "level", "item", "FACILITY", "PORTVIEW", "portview"].indexOf(key) >= 0) {
			var val = ctx.parameters[key];
			resourceUrl  += "&" + key + "=" + encodeURIComponent(val);
		}
		else if (["DATBEG1", "DATEND1", "DATBEG2", "DATEND2", "COMPANY", "representation", "$bind", "pptMode", "format", "startIndex", "orderBy", "rawSelect", "select" , "rawInclude", "include" , "includeSchema", "where"].indexOf(key) >= 0) {
			// just ignore
		}		
		else {
			var val = ctx.parameters[key];
			if (key) resourceUrl  += "&" + key + "=" + encodeURIComponent(val);
		}
	});

	// Settings needed by PPT
	var customData = {
		serverUrl: connectUrl,
		actionType: mode,
		forceRefresh: refresh,
		resourceUrl: resourceUrl,
	};
	return customData;
}

function _pptx_set_headers(_, ctx, result, proto, headers, statusCode) {
	var filename;

	function format(expression, proto, res) {
		res = res || {};
		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
			return res[p1] || proto[p1] || p1;
		});
		return value;
	}

	if (!proto) {
		proto = {
			$title: "new slide",
		};
	}
	filename = format(proto.$title + (proto.$description ? (" - " + proto.$description) : ""), proto, result);

	headers["content-disposition"] = "attachment; filename=\"" + filename + ".pptx\"";
	headers["content-type"] = httpHelper.mediaTypes.pptx;
	headers["cache-control"] = "no-cache,must-revalidate";

	ctx.response.writeHead(statusCode, headers);
}