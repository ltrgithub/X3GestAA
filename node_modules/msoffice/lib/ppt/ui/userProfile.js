"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var date = require('syracuse-core/lib/types/date');
var locale = require('syracuse-core/lib/locale');
var globals = require('streamline/lib/globals');
var _resources = date.resources;
function UserProfile(){
}

exports.UserProfile = helpers.defineClass(UserProfile, RawPage, {
    dispose: function(){
        delete this.externalAdapter;
        delete this.formBlock;
        RawPage.prototype.dispose.call(this);
    },
    ensureFormBlock: function(){
        var self = this;
        if (!self.formBlock) {
			self.$$item = $("<div id='s-user-profile'/>");
            self.formBlock = self.loadNewItem(self.$$item[0], {
                $category: "section",
                $id: "s-user-profile-form-block",
                $skin: "s-user-profile-form",
                $layout: {
                    $items: [{
                        $bind: "$save",
                        $category: "link",
                        $isHidden: true,
                        onServerRequest: function(menu){
                            //this is item menu	
                            if (menu.$links && menu.$links.$location) {
                                var currentPage = menu.boxParent.getArticle();
                                self.validatePrototype(self.$prototype);
                                var location = ((document.site.$prototype || {}).$links || {}).$home;
                                location && document.controller.openPage(self, location);
                            }
                            return false;
                        }
                    }, {
                        $isEditMode: true,
                        $isReferenceTitleVisible: false,
                        $skin: "s-user-profile-ref",
                        $css: "s-user-profile-selectedRole",
                        $bind: "photo"
                    }, {
                        $isEditMode: true,
                        $isReferenceTitleVisible: false,
                        $skin: "s-user-profile-ref",
                        $css: "s-user-profile-selectedRole",
                        $bind: "selectedRole"
                    }                    /*, {
                     $isEditMode: true,
                     $title: "Your current endpoint is",
                     $skin: "s-user-profile-ref",
                     $isReferenceTitleVisible: false,
                     $css: "s-user-profile-selectedEndpoint",
                     $bind: "selectedEndpoint"
                     }*/
                    , {
                        $isEditMode: true,
                        $skin: "s-user-profile-ref",
                        $isReferenceTitleVisible: false,
                        $css: "s-user-profile-selectedLocale",
                        $bind: "selectedLocale"
                    }]
                }
            });
            self._localizeFields();
        }
        
    },
    _localizeFields: function(){
        var localize = locale.resources(module)();
        this.idMap["s-user-profile-form-block"].applyDesignMetaData({
            $title: localize.up_welcome
        }, true);
        this.boundFields.selectedRole[0].setTitle(localize.up_role);
        //this.boundFields.selectedEndpoint[0].setTitle(localize.up_endpoint);
        this.boundFields.selectedLocale[0].setTitle(localize.up_locale);
    },
    drawBox: function(){
        this.externalAdapter = document.site.externalAdapter;
        this.$$item = $("<div id='s-user-profile'/>");
        this.ensureFormBlock();
    },
    showDiagnoses: function(message){
        //afficher erreur ds popup ???
    },
    onNotifyRecordChange: function(value, binding){
        var data = {
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        };
        data[binding] = value;
        return data;
    },
    decoratePrototype: function($prototype){
        if (this.dataset && this.dataset.selectedRole) {
            $prototype.$role = this.dataset.selectedRole.$uuid;
        }
    },
    applyChange: function(newData){
        // refresh page when user changes locale
        var sl = this.getSelectedLocale();
        if (Object.keys(this.dataset).length > 0) {
            if (sl && newData.selectedLocale && JSON.stringify(sl) != JSON.stringify(newData.selectedLocale)) 
                location.reload();
        }
        
        if (newData && newData.selectedRole) {
            document.site.$prototype.$role = newData.selectedRole.$uuid;
        }
        
        RawPage.prototype.applyChange.call(this, newData);
        
        // adding localePreferences to globals.context
        if (this.dataset && this.dataset.selectedLocale) {
            globals.context = {};
            globals.context.localePreferences = this.dataset.selectedLocale;
        }
        
        if (this.$isTitleUpdateRequested) {
            if (document.site.updateDocumentTitle) {
                document.site.updateDocumentTitle();
            }
            this.$isTitleUpdateRequested = false;
        }
        
    },
    getSelectedEndpointString: function(){
        /*        var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
         return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
         */
        return null;
    },
    getDateFormat: function(displayFormat){
        return displayFormat == "DD" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longDate : "dd MMMM yyyy") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortDate : "yyyy-MM-dd");
    },
    getTimeFormat: function(displayFormat){
        return displayFormat == "TT" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longTime : "HH:mm:ss") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortTime : "HH:mm");
    },
    getDatetimeFormat: function(displayFormat){
        var format;
        var self = this;
        switch (displayFormat) {
            case "F": // sortable datetime format
                format = _resources().formatPatterns ? _resources().formatPatterns["sortableDateTime"] : "yyyy-MM-ddTHH:mm:ss";
                break;
            case "FF": // full datetime format
                format = self.dataset.selectedLocale ? self.dataset.selectedLocale.longDatetime : (_resources().formatPatterns ? _resources().formatPatterns["fullDateTime"] : "dd MMMM yyyy HH:mm:ss");
                break;
            case "U": // universal sortable datetime format 
                format = _resources().formatPatterns ? _resources().formatPatterns["universalSortableDateTime"] : "yyyy-MM-dd HH:mm:ssZ";
                break;
            default: // datetime default format is dateformat + space + timeformat
                format = self.dataset.selectedLocale ? self.dataset.selectedLocale.shortDatetime : this.getDateFormat() + " " + this.getTimeFormat();
        }
        return format;
    },
    getSelectedLocale: function(){
        return this.dataset.selectedLocale;
    },
    getNumberFormatObj: function(type){
        var formatObj = {};
        var f = "#,";
        var gs = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSize : "3";
        for (var i = 0; i < gs; i++) {
            f += "#";
        }
        f += type == "application/x-integer" ? '' : '.##';
        formatObj.numFormat = f;
        formatObj.decimalSeparator = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberDecimalSeparator : ".";
        formatObj.groupSeparator = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSeparator : ".";
        formatObj.groupSize = gs;
        return formatObj;
        //		return {
        //            groupSeparator: this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSeparator : "",
        //            decimalSeparator: this.dataset.selectedLocale ? this.dataset.selectedLocale.numberDecimalSeparator : ".",
        //            groupSize: gs,
        //			displayFormat: f
        //        };
    },
    getNumberFormat: function(type){
        return this.getNumberFormatObj(type).numFormat;
    },
    getTwoDigitYearMax: function(){
        return (this.dataset.selectedLocale && this.dataset.selectedLocale.twoDigitYearMax) || 2029;
    }
});
