"use strict";
var helpers = require('syracuse-core/lib/helpers');
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var PptInterfaceImpl = require("msoffice/lib/ppt/html/pptInterfaceImpl").PptInterfaceImpl;
var PptInterfaceDummy = require("msoffice/lib/ppt/html/pptInterfaceDummy").PptInterfaceDummy;

function PptInterface(){
    var self = this;
    var pptInterfaceCtor;
    
    if (external == "PowerPointAddIn.PptAddInJSExternal") // Did ppt open this page using IE 
    {
        pptInterfaceCtor = PptInterfaceImpl;
    }
    else // no ppt - so use a dummy stub
    {
        pptInterfaceCtor = PptInterfaceDummy;
    }
    
    this.pptInterfaceImpl = new pptInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function(){
            return self.pptInterfaceImpl.getDocumentUrl();
        },
        set: function(value){
            return self.pptInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function(){
            return self.pptInterfaceImpl.getDocumentTitle();
        },
        set: function(value){
            return self.pptInterfaceImpl.setDocumentTitle(value);
        }
    });
}

exports.PptInterface = helpers.defineClass(PptInterface, null, {
    onLogin: function(){
        var self = this;
        syra_controller.callServer(null, {
            $location: {
                $url: "/sdata/syracuse/collaboration/syracuse/moduleVersions('officeAddin')?representation=moduleVersion.$details"
            }
        }, function(data, response){
            if (data && data.version) {
                self.pptInterfaceImpl.expectedVersion(data.version);
            }
        });
        var actionType = self.pptInterfaceImpl.getActionType();
        if (actionType != "") {
            self.loadPage(actionType);
        }
    },
    
    loadPage: function(actionType){
        var self = this;
        if (actionType === "ppt_populate_worksheet" || actionType === "ppt_refresh_charts") {
            var resourceUrl = self.pptInterfaceImpl.getResourceUrl();
            syra_controller.loadRepresentation({
                article: null,
                segments: resourceUrl,
                success: function(response){
                    var repr = response.$representation;
                    repr.$article = repr.$article || ((repr.$prototype || {}).$article || {});
                    repr.$article.$category = "ppt_populate_worksheet";
                    repr.$prototype = repr.$prototype || {};
                    var page = syra_pageBuilder.load({
                        $representation: repr,
                        openerUrlSegments: response.openerUrlSegments,
                        $category: "ppt_populate_worksheet"
                    });
                    self.fetchData(page, -1, null, function(){
                        if (actionType === "ppt_refresh_charts") {
                            self.pptInterfaceImpl.refreshNextChart();
                        }
                    });
                }
            });
        }
    },
    
    fetchData: function(page, maxLines, data, onLoaded){
        var self = this;
        var options = null;
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = syra_url.formatMenuUrl(page, data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + syra_site.defaultFetchCount;
                    else 
                        url = url + "&count=" + syra_site.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        page.fetch(options, function(fetchData, response, requestUrl){
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources && fetchData.$resources.length;
            //
            if (fetchData.$resources && (maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }
            
            var mustFetchNext = false && (((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) && (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url);
            var isFirstPage = !data;
            var isLastPage = !mustFetchNext;
            page.applyChangeOffice(fetchData, response, requestUrl, self.pptInterfaceImpl, isFirstPage, isLastPage);
            
            if (mustFetchNext) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    getDocumentUrl: function(){
        return this.pptInterfaceImpl.getDocumentUrl();
    },
    getAddinVersion: function(){
        return this.pptInterfaceImpl.getAddinVersion();
    }
});
