"use strict";

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var httpHelper = require('syracuse-sdata/lib/httpHelper');

function PptInterface() {
	var self = this;
    var pptInterfaceCtor;

    if (external == "PowerPointAddIn.PptAddInJSExternal") // Did ppt open this page using IE 
    {
        pptInterfaceCtor = require("msoffice/lib/ppt/pptInterfaceImpl").PptInterfaceImpl;
    }
    else // no ppt - so use a dummy stub
    {
        pptInterfaceCtor = require("msoffice/lib/ppt/pptInterfaceDummy").PptInterfaceDummy;
    }
    
    this.pptInterfaceImpl = new pptInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function() {
            return self.pptInterfaceImpl.getDocumentUrl();
        },
        set: function(value) {
        	return self.pptInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function() {
        	return self.pptInterfaceImpl.getDocumentTitle();
        },
        set: function(value) {
        	return self.pptInterfaceImpl.setDocumentTitle(value);
        }
    });    
}

exports.PptInterface = helpers.defineClass(PptInterface, null, {
    onLogin: function() {
        var self = this;

        var actionType = self.pptInterfaceImpl.getActionType();
        if (actionType != "")
        {
        	self.loadPage(actionType);
        }
    },
    
    loadPage: function(actionType) {
        var self = this;
        if (actionType === "ppt_populate_worksheet" ||
        	actionType === "ppt_refresh_charts")
       	{
            var resourceUrl = self.pptInterfaceImpl.getResourceUrl();
        	document.controller.loadRepresentation(null, resourceUrl, function(response) {
        		var repr = response.$representation;
        		repr.$article = repr.$article || ((repr.$prototype || {}).$article || {});
        		repr.$article.$category = "ppt_populate_worksheet";
        		repr.$prototype = repr.$prototype || {};
	    		var page = document.site.loadNewPage({
	    			$representation: repr,
	    			$urlParts: response.$urlParts,
	    			$category: "ppt_populate_worksheet",
	    			$autoFetch: false
	    		});
        		self.fetchData(page, -1, null, function() {
        			if (actionType === "ppt_refresh_charts") {
        				self.pptInterfaceImpl.refreshNextChart();
        			}
        		});
        	});
       	}
    },
    
    fetchData: function(page, maxLines, data, onLoaded) {
        var self = this;
        var options = null;
        
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = page.formatMenuUrl(data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + msofficeHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + msofficeHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        
        page.fetch(options, function(fetchData, response, requestUrl){
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources.length;
            //
            if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }

            var mustFetchNext = (((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) &&
            	(fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url);
            var isFirstPage = !data;
            var isLastPage = !mustFetchNext;
            page.applyChange(fetchData, response, requestUrl, self.pptInterfaceImpl, isFirstPage, isLastPage);
            
            if (mustFetchNext) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess) {
    	var self = this;

    	var docUrl = this.documentUrl;
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is already published");
        }

        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;

        // Retrieving content of doc has to be done bevor setting title and url as done above
        // This is neccessary, because title and url will be also stored in the the doc
        var content = self.pptInterfaceImpl.getDocumentContent();
        
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.pptx
            },
            fileName: docTitle + ".pptx"
        }, function(data, response) {
        	self.pptInterfaceImpl.notifySaveDocumentDone();
            onSuccess && onSuccess(data, response);
        });
    },

    getDocumentUrl: function() {
    	var self = this;
    	return self.pptInterfaceImpl.getDocumentUrl();    	
    },
    
    getAddinVersion: function() {
    	var self = this;
    	return self.pptInterfaceImpl.getAddinVersion();    	
    }
});

