"use strict";

exports.entity = {
	$title: "Data Sources",
	$entityName: "excelDatasource",
	$pluralName: "excelDatasources",
	$capabilities: "edit,delete",
	$properties: {
		description: {
			$title: "Description"
		},
		dsName: {
			$title: "Name"
		},
		title: {
			$title: "Title"
		},
		endpoint: {
			$title: "Endpoint"
		},
		entity: {
			$title: "Entity"
		},
		representation: {
			$title: "Representation"
		},
		fetchAll: {
			$title: "Fetch all",
			$type: "boolean"
		},
		fetchLimit: {
			$title: "Fetch limit",
			$type: "integer",
			$default: 1000,
			$isDefined: function(instance) {
				return !instance.fetchAll;
			}
		},
		filter: {
			$title: "Filter",
			$type: "filter",
			$isDisabled: function(instance) {
				return (instance.entity == null);
			},
			$applyMeta: function(instance) {
				// Fallback: When a datasource is created by creating a new xlsx document,
				// there is no endpointRef and therefor no dataBaseUrl
				if ((!instance.dataBaseUrl || instance.dataBaseUrl === "") && instance.serviceUrl) {
					instance.dataBaseUrl = instance.serviceUrl.split("/").slice(0, 5).join("/");
				}

				if (instance.dataBaseUrl && instance.representation) {
					instance.$properties = instance.$properties || {};
					var f = instance.$properties.filter = instance.$properties.filter || {};
					var facet = "$query";
					if (instance.menuItem && instance.menuItem.linkType && instance.menuItem.linkType === "$stats") facet = "$cube";
					f.$links = f.$links || {};
					f.$links.$prototype = f.$links.$prototype || {};
					f.$links.$prototype.$url = "{dataBaseUrl}/$prototypes('{representation}." + facet + "')";
				}
			}
		}
	},
	$relations: {
		endpointRef: {
			$title: "Endpoint",
			$isMandatory: true,
			$value: "{description}",
			$baseUrl: syra_site.excelDocument.syracuseBaseUrl,
			$type: "endPoints",
			$representation: "endPoint",
			$key: "{dataset}", // key MUST be different of "{$uuid}" to have the lookup fetch all the record
			$properties: {
				applicationRef: {},
				dataset: {},
				application: {},
				contract: {}
			},
			$propagate: function(resource, val, oldVal) {
				if (val) {
					resource.applicationId = (val.applicationRef && val.applicationRef.$uuid) || "";
					resource.endpoint = val.dataset;
					resource.dataset = val.dataset;
					resource.dataBaseUrl = ["/sdata", val.application, val.contract, val.dataset].join("/");

					if (val.dataset && oldVal && oldVal.dataset && val.dataset !== oldVal.dataset) {
						resource.entity = "";
						resource.representation = "";
						resource.menuItem = "";
						resource.filter = "";
						resource.title = "";
					}
				} else {
					resource.applicationId = "";
					resource.endpoint = "";
					resource.dataset = "";
					resource.databaseUrl = "";
					resource.entity = "";
					resource.representation = "";
					resource.menuItem = "";
					resource.filter = "";
				}
			}
		},
		menuItem: {
			$title: "Data Source",
			$value: "{description}",
			$baseUrl: syra_site.excelDocument.syracuseBaseUrl,
			$type: "menuItems",
			$representation: "menuItem",
			$key: "{description}", // key MUST be different of "{$uuid}" to have the lookup fetch all the record
			$isDisabled: function(instance) {
				return instance.endpoint == null;
			},
			$properties: {
				representationRef: {},
				title: {},
				linkType: {},
				requestName: {},
				requestLevel: {},
				statName: {},
				$links: {}
			},
			$lookup: {
				$filter: "(application eq \"{applicationId}\") and (((linkType eq \"$representation\") and (facet eq \"$query\")) or (linkType eq \"$request\") or (linkType eq \"$stats\"))",
			},
			$propagate: function(resource, val) {
				if (val) {
					switch (val.linkType || "$query") {
						case "$representation":
							resource.entity = (val.representationRef && val.representationRef.entity) || "";
							resource.representation = (val.representationRef && val.representationRef.representation) || "";
							break;
						case "$request":
							resource.entity = "QUERY('" + val.requestName + "')";
							resource.representation = "QUERY~" + val.requestName + (val.requestLevel ? "~" + val.requestLevel : "");
							break;
						case "$stats":
							resource.entity = "STATS('" + val.statName + "')";
							resource.representation = "STATS~" + val.statName;
							break;
					}
					resource.title = val.title;
/*					if (val.$links) {
						Object.keys(val.$links).some(function(lkey) {
							if (val.$links[lkey] && (lkey.indexOf("$execute") === 0)) {
								resource.serviceUrl = val.$links[lkey].$url || "";
								// normalize
								if (resource.serviceUrl.indexOf("{$baseUrl}") >= 0) resource.serviceUrl = resource.serviceUrl.replace("{$baseUrl}", resource.dataBaseUrl);
								else {
									var parts = resource.serviceUrl.split("/");
									resource.serviceUrl = resource.dataBaseUrl + "/" + parts.pop();
								}
								return true;
							}
							return false;
						});
					}*/
				} else {
					resource.entity = "";
					resource.representation = "";
					resource.filter = "";
					resource.title = "";
				}
			}
		},
		representationRef: {
			$title: "Representation",
			$type: "representationProxies",
			$value: "{description}",
			$baseUrl: syra_site.excelDocument.syracuseBaseUrl,
			$representation: "representationProxy",
			$key: "{respresentation}", // key MUST be different of "{$uuid}" to have the lookup fetch all the record
			$isChild: true,
			$properties: {
				entity: {
					$title: "Entity",
					$type: "application/x-string"
				},
				representation: {
					$title: "Representation",
					$type: "application/x-string"
				}
			},
			$lookup: {
				$parameters: "dataset={endpoint}",
				$properties: {
					representation: {},
					entity: {},
					title: {}
				}
			},
			$propagate: function(resource, val) {
				if (val) {
					resource.representation = val.representation;
					resource.entity = val.entity;
					resource.title = val.title;
				} else {
					resource.representation = "";
					resource.entity = "";
					resource.filter = "";
					resource.title = "";
				}
			},
			$isDisabled: function(instance) {
				return instance.endpoint == null;
			}
		},
		orderBys: {
			$title: "Order bys",
			$isArray: true,
			$isPlural: true,
			$baseUrl: syra_site.excelDocument.syracuseBaseUrl,
			$value: "{name}",
			$itemTitle: "{title}",
			$properties: {
				title: {
					$type: "application/x-string"
				},
				name: {
					$type: "application/x-string"
				}
			},
			$type: "excelOrderAttr",
			$capabilities: "insert,append,delete,reorder",
			$select: {
				$title: "Attributes",
				$url: syra_site.excelDocument.syracuseBaseUrl + "/lookupEntityAttrs?representation=lookupEntityAttr.$select",
				$parameters: "dataset={endpoint}&entity={entity}"
			}
		}
	},
	$actions: {
		$save: {
			$title: "Apply",
			$isDisabled: function(resource) {
				return (resource.dataBaseUrl && resource.representation && resource.entity) || (resource.serviceUrl) ? false : true;
			},
			$facets: ["$edit"],
			$links: {
				$details: {
					$title: "Ok",
					$url: syra_site.$prototype && syra_site.$prototype.$links && syra_site.$prototype.$links.$home && syra_site.$prototype.$links.$home.$url,
					$isHidden: false
				}
			}
		}
	},
	$links: {
		refresh: {
			$title: "Refresh",
			$url: "excel://excelDatasources('{$uuid}')/$service/refresh?representation=excelDatasource.$details",
			$method: "POST",
			$facets: "$query,$details"
		}
	},
	$queryLinks: {
		browseMenu: {
			$title: "Predefined datasources",
			$type: "application/json; vnd-sage=syracuse",
			$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsMenuItem.$edit",
			$method: "POST"
		},
		browseEntity: {
			$title: "Data model browse",
			$type: "application/json; vnd-sage=syracuse",
			$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsEntity.$edit",
			$method: "POST"
		},
		refreshAll: {
			$title: "Refresh all",
			$url: "excel://excelDatasources/$service/refreshAll?representation=excelDatasource.$query",
			$method: "POST"
		}
	},
	// standard functions, MUST implement
	$fetch: function(id) {
		return syra_site.excelDocument.getDatasourcesResource(id);
	}
};