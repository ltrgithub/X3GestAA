"use strict";

var x3ModuleName = "Sage_X3";
var x3UDFCategory = "Sage X3 User Functions";

exports.UdfRegistry = {
	SageX3GetDataAsString: {
		$prototype: {
			$type: "String",
			$description: "Gets X3 data from an endpoint",
			$args: {
				endpoint: {
					$type: "String",
					$description: "Endpoint name as defined in Syracuse"
				},
				objectKey: {
					$type: "String",
					$description: "Key to identify the object"
				},
				attributeName: {
					$type: "String",
					$description: "Name of the attribute to be returned"
				}
			}
		},
		$handler: function(endpoint, objectKey, attributeName) {
			return "handled: "+Array.prototype.slice.call(arguments, 0).join(",");
		}
	}
}

function _registerUdf(x3Module, udfName, udfPrototype) {
	var argNames = Object.keys(udfPrototype.$args);
	var argCnt = 1;
	x3Module.CodeModule.AddFromString(
		// declaration
		"Public Function " + udfName + "(" + 
		argNames.map(function(argName) {
			return argName + " as " + udfPrototype.$args[argName].$type;
		}).join(",") + 
		") As " + udfPrototype.$type + "\n" + 
		// arguments
		"Dim args(1 To " + argNames.length + ") As Variant\n" +
		argNames.map(function(argName) {
			return "args(" + (argCnt++) + ") = " + argName + "\n"
		}).join("") +
		udfName + " = managedObject.InvokeFunction(\"" + udfName + "\", args)\nEnd Function");
	// register help
	external.RegisterMacroOptions(udfName, udfPrototype.$description, x3UDFCategory, 
		JSON.stringify(Object.keys(udfPrototype.$args).map(function(argName) {
			return udfPrototype.$args[argName].$description;
		})));
}

exports.registerUdfs = function(workbook) {
	var registry =  exports.UdfRegistry;
	// create UDFs
	var x3Module = null;
	if(!workbook.VBProject) return;
	// find/create x3 VB module
	for(var i = 1; i <= workbook.VBProject.VBComponents.Count; i++) {
		var vbComponent = workbook.VBProject.VBComponents.Item(i);
		if((vbComponent.Type == external.vbext_ct_StdModule) && (vbComponent.Name == x3ModuleName)) 
			x3Module = vbComponent;
	}
	if(!x3Module) {
		x3Module = workbook.VBProject.VBComponents.Add(external.vbext_ct_StdModule);
        x3Module.Name = x3ModuleName;
        x3Module.CodeModule.AddFromString("Dim managedObject As Object");
        x3Module.CodeModule.AddFromString("Public Sub RegisterCallback(callback As Object)\nSet managedObject = callback\nEnd Sub");
        // generate udfs
		for(var udfName in registry) {
			_registerUdf(x3Module, udfName, registry[udfName].$prototype);
		}
	}
    // register UDF callbacks
    external.RegisterVBCallback();
}