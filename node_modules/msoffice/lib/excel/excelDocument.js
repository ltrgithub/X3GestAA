"use strict"

var helpers = require('syracuse-core/lib/helpers');
var excelStub = require('./excelStub');
var excelLoaded = (external && external.Application);
//var excelLoaded = false;
var Application = (external && external.Application) || excelStub.Application;
var UdfRegistry = require('./udfRegistry');
var excelHelpers = require('../helpers');
var excelDefines = excelHelpers.defines;
var excelUtils = excelHelpers.utils;
var base64 = require("msoffice/lib/Base64").Base64;
var httpController = require("syracuse-ui/lib/controller/httpController");
var locale = require("syracuse-core/lib/locale");
var DataModel = require("syracuse-ui/lib/office/dataModel").DataModel;

//var x3ModuleName = "Sage_X3";
var x3UDFCategory = excelDefines.x3UDFCategory;
var x3CustomPropDsPrefix = excelDefines.x3CustomPropDsPrefix;

var _stubsDs = {
	"f1af2c6d-ccd9-4488-a2f1-c54166147374": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147374",
		$url: "/sdata/syracuse/collaboration/syracuse/applications?representation=application.$bulk&count=1000",$title:"Applications",
		title:"Applications",
		entity:"applications",
		representation:"application",
		endpoint:"syracuse",
		fetchAll:false,
		fetchLimit:1000,
		filter: "(application eq \"x3\") and (contract eq \"erp\")",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys:[{ $uuid: "id1", name: "application", title: "Name" }, { $uuid: "id2", name: "contract", title: "Contract" }],
		dsName:"Sage.X3.DS.syracuse_applications"
	},
    "f1af2c6d-ccd9-4488-a2f1-c54166147375": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147375",
		$url: "/sdata/syracuse/collaboration/syracuse/documents?representation=document.$bulk&count=1000",$title:"Documents",
		title:"Documents",
		entity:"documents",
		representation:"document",
		endpoint:"syracuse",
		fetchAll:true,
		fetchLimit:1000,
		filter: "(description eq \"sample\")",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys:[],
		dsName:"Sage.X3.DS.syracuse_documents"
	},
    "f1af2c6d-ccd9-4488-a2f1-c54166147376": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147376",
		$url: "/sdata/syracuse/collaboration/syracuse/users?representation=user.$bulk&count=1000",$title:"Users",
		title:"Users",
		entity:"users",
		representation:"user",
		endpoint:"syracuse",
		fetchAll:true,
		fetchLimit:1000,
		filter: "(active eq true)",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys:[],
		dsName:"Sage.X3.DS.syracuse_documents"
	}
}

function ExcelDocument(){
    var self = this;
	// TODO: properly decode the address ?
	self.enableSageIntelligence = true;
	//self.enableSageIntelligence = ((document.controller._currentUrl || "").indexOf("sageIntelligence=1") >= 0);
	//
	self.syracuseBaseUrl = "/sdata/syracuse/collaboration/syracuse";
    // allow testing in Firefox
    this.workbook = Application.ActiveWorkbook;
    // register UDFS
    UdfRegistry.registerUdfs(this.workbook);
    // document Url
    Object.defineProperty(this, "documentUrl", {
        get: function(){
            return self._getCustomData(excelDefines.documentUrlAddress);
        },
        set: function(value){
            self._storeCustomData(excelDefines.documentUrlAddress, value);
        }
    });
    // document title
    Object.defineProperty(this, "documentTitle", {
        get: function(){
            return self._getCustomData(excelDefines.documentTitleAddress);
        },
        set: function(value){
            self._storeCustomData(excelDefines.documentTitleAddress, value);
        }
    });
}

exports.ExcelDocument = helpers.defineClass(ExcelDocument, null, {
    // custom data / document properties
    _storeCustomData: function(adr, value){
        excelLoaded && external.StoreCustomData(adr, value);
    },
    _getCustomData: function(adr){
        return excelLoaded ? external.GetCustomData(adr) : "";
    },
    customProperty: function(propName, value){
        if (arguments.length == 1) {
            // get
            try {
                return this.workbook.CustomDocumentProperties.Item(propName);
            } 
            catch (e) {
                return null;
            }
        }
        else {
            // set
            var prop = this.customProperty(propName);
            if (prop) 
                prop.Value = value
            else 
                this.workbook.CustomDocumentProperties.Add(propName, false, external.msoString, value);
        }
    },
    _saveDatasources: function(){
        this._storeCustomData(excelDefines.datasourcesAddress, JSON.stringify(this.datasources));
    },
    _loadDatasources: function(){
        return JSON.parse(this._getCustomData(excelDefines.datasourcesAddress) || "{}");
    },
	autoLoad: function() {
		var self = this;
		// autoload ?
		var datasources = self.getDatasources();
		helpers.object.forEachKey(datasources, function(key, ds){
			if (ds.$mustRefresh) {
				delete ds.$mustRefresh;
				self.loadPage(ds, ds.dsName);
			}
		});
	},
	getDataModel: function() {
		if(!this._dataModel)
			this._dataModel = new DataModel(require("msoffice/lib/excel/contract/contract").contract);
		return this._dataModel;
	},
    getDatasources: function(){
        var self = this;
        //
        self.datasources = self._loadDatasources();
        //
        return self.datasources;
    },
    getDatasource: function(uuid){
        var self = this;
        //
        self.datasources = self._loadDatasources();
        //
        return self.datasources[uuid];
    },
    getWorkingCopy: function(wcId) {
    	return (this.$workingCopies = this.$workingCopies || {})[wcId];
    },
    deleteWorkingCopy: function(wcId) {
    	if(this.$workingCopies && this.$workingCopies[wcId])
    		this.$workingCopies[wcId] = null;
    }, 
    getDatasourcesResource: function(uuid, facet){
        function getDsResource(datasource){
            var dsItem = helpers.object.clone(datasource);
            dsItem.$uuid = dsItem.$uuid || helpers.uuid.generate();
            dsItem.$key = dsItem.$uuid;
            dsItem.$etag = 1;
            //			dsItem.name = dsName;
            dsItem.description = locale.format(module, "representation", dsItem.title, dsItem.representation, dsItem.entity, dsItem.endpoint);
            dsItem.orderBys = datasource.orderBys && datasource.orderBys.slice(0);
			dsItem.serviceUrl = datasource.$url;
            //
            return dsItem;
        }
        if (uuid) {
            return getDsResource(this.getDatasource(uuid) || (!excelLoaded && _stubsDs[uuid]) || {});
        }
        else {
            // load datasources
            var ds = {};
            var datasources = this.getDatasources();
			var i = 0;
            ds.$resources = Object.keys(datasources || {}).filter(function(dsName) {
				return !datasources[dsName].$isHidden;
			}).map(function(dsName){
				var r = getDsResource(datasources[dsName]);
				r.$index = i++;
                return r;
            });
            if (!excelLoaded) {
            	// STUB DATASOURCES FOR TESTING PURPOSES
                ds.$resources = ds.$resources || [];
                Object.keys(_stubsDs).forEach(function(uuid) {
                	ds.$resources.push(_stubsDs[uuid]);
                });
            }
            //
            return ds;
        }
    },
    // datasources management
    makeDatasourceName: function(datasource){
        // fetch list objects names
        var objectNames = [];
        if (excelLoaded) {
			var wsList = Application.Worksheets;
			for(var w = 1; w <= wsList.Count; w++) {
				var listObjects = Application.Worksheets.Item(w).ListObjects;
				for (var i = 1; i <= listObjects.Count; i++) 
					objectNames.push(listObjects.Item(i).Name);
			}
        }
        //
        return excelUtils.makeDatasourceName(datasource.$url, objectNames);
    },
    updateDatasourceToDocument: function(datasource, name){
        datasource.dsName = datasource.dsName || name;
        datasource.$uuid = datasource.$uuid || helpers.uuid.generate();
        this.datasources[datasource.$uuid] = datasource;
        //
        this._saveDatasources();
    },
    deleteDatasource: function(dsUuid){
        var ds = this.getDatasource(dsUuid);
        if (ds && external.DeleteTable(ds.dsName)) {
            // force datasources load
            this.datasources = this._loadDatasources();
            delete this.datasources[dsUuid];
            this._saveDatasources();
        }
    },
	workingCopyToDatasource: function(workingCopy) {
		var record = workingCopy;
		var ds = {
			$uuid: record.$uuid,
			dsName: record.dsName,
			$url: record.serviceUrl,
			$title: record.title,
			title: record.title,
			entity: record.entity,
			representation: record.representation,
			endpoint: record.dataset,
			dataset: record.dataset,
			fetchAll: record.fetchAll,
			fetchLimit: record.fetchLimit,
			filter: record.filter,
			dataBaseUrl: record.dataBaseUrl
		};
		if(record.orderBys)
			ds.orderBys = record.orderBys.map(function(orderBy) {
				return {
					$index: orderBy.$index,
					name: orderBy.name,
					title: orderBy.title,
					order: orderBy.order
				}
			});
		return ds;
	},
    // loading
    addDatasource: function(record, onLoaded){
        if (record.serviceUrl) {
            // load / update datasource
            // TODO: make a datasource validation function
            var ds = this.getDatasource(record.$uuid);
			if(!ds) {
            	ds = this.workingCopyToDatasource(record);
                this._saveDatasources();
			}
            if (ds)
            	this.loadPage(ds, ds.dsName, null, onLoaded);
        }
    },
    refreshDatasource: function(dsUuid, onLoaded){
        var ds = this.getDatasource(dsUuid);
        ds && this.loadPage(ds, ds.dsName, null, onLoaded);
    },
    refreshAllDatasources: function(){
        function asyncRefresh(){
            key = keys.shift();
            key && self.refreshDatasource(key, asyncRefresh);
        }
        //
        var self = this;
        var keys = Object.keys(self.getDatasources() || {});
        asyncRefresh();
    },
    computeFetchLimit: function(datasource){
        return (datasource.fetchAll ? -1 : (datasource.fetchLimit || 1000));
    },
    fetchSlice: function(page, maxLines, data, onLoaded){
		function onEndData() {
			// end update
			excelLoaded && external.EndUpdateTable();
			// cannot call selectionChanged directly as document might be the settings form, not the right-side panel
			// self.selectionChanged();
			excelLoaded && external.SelectionChanged();
			//
			onLoaded && onLoaded();
		}
        var self = this;
        var options = null;

        if (data) {
            if (data.$links && data.$links.$next) {
                var url = page.formatMenuUrl(data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + excelHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + excelHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else 
                return;
        }
		page.fetch(options, function(fetchData, response, requestUrl){
			// first fetch, resize table
			if (!data) {
				var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
				var res;
				if (maxLines < 0) 
					res = page.createExcelTableShell(fetchCount);
				else 
					res = page.createExcelTableShell(Math.min(fetchCount, maxLines));
				// if cannot resize, return
				if(!res) {
					onEndData();
					//
					return;
				}
			}
			//
			if (!fetchData.$startIndex) 
				fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
			if(fetchData.$startIndex < 0) {
				onEndData();
				throw new Error("Internal error: $startIndex out of range: " + fetchData.$startIndex);
			}
			if (!fetchData.$itemsPerPage) 
				fetchData.$itemsPerPage = fetchData.$resources.length;
			//
			if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
				fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
			}
			// apply data
			if(!page.applyChange(fetchData, response, requestUrl)) {
				onEndData();
				//
				return;
			}
			//
			var aborted = excelLoaded && external.Aborted;
			if (!aborted && (((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) &&
			(fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
				// next
				self.fetchSlice(page, maxLines, fetchData, onLoaded);
			}
			else {
				onEndData();
			}
		}, function(error, query) {
			onEndData();
		});
    },
    loadPage: function(datasource, name, cellAddress, onLoaded){
        var self = this;
        name = name || self.makeDatasourceName(datasource);
        //
        excelLoaded && external.StartUpdateTable();
		var order = (datasource.orderBys || []).map(function(orderBy) {
			return orderBy.name + (orderBy.order ? (" " + orderBy.order) : "");
		});
		var url = datasource.$url + (order.length ? "&orderBy=" + order.join(",") : "");

		if (datasource.filter && url.indexOf("&where") < 0) {
			url += "&where=" + encodeURIComponent(datasource.filter);
		}
        document.controller.loadRepresentation(null, url, function(response){
            var repr = response.$representation;
            repr.$article = (repr.$prototype || {}).$article || {};
            repr.$article.$category = "worksheet";
            repr.$prototype = repr.$prototype || {};
            repr.$prototype.$datasource = datasource;
            repr.$prototype.$datasourceName = name;
			repr.$prototype.cellAddress = cellAddress;
			repr.$prototype.fields = datasource.fields;
            //
            var page = document.site.loadNewPage({
                $representation: repr,
                $urlParts: response.$urlParts,
                $category: "worksheet",
                $autoFetch: false
            });
            //
            self.fetchSlice(page, self.computeFetchLimit(datasource), null, onLoaded);
        }, function(error){
			excelLoaded && external.EndUpdateTable();
        }, null);
    },
	// load one table
	loadTable: function(params, onLoaded, onError) {
		var self = this;
		var isDetail = params.hasOwnProperty("endpointId");
		var epUrl = isDetail ? self.syracuseBaseUrl + "/endPoints('" + params.endpointId + "')?representation=endPoint.$details" : 
			self.syracuseBaseUrl + "/endPoints?representation=endPoint.$query&where=(dataset eq \"" + params.endpointName + "\")";
		// fetch the endpoint
		//var facetName = "$query";
		var facetName = "$bulk";
		var query = httpController.parseUrl(epUrl).sendRequest(null, function(data) {
			if((data && data.$resources && data.$resources.length) || isDetail) {
				var ep = isDetail ? data : data.$resources[0];
				var ds = {
					$isHidden: params.$isHidden,
					$url: ["/sdata", ep.application, ep.contract, ep.dataset, params.className].join("/") + 
						"?representation=" + params.representationName + "." + facetName + (params.parameters ? "&" + params.parameters : ""),
					$title: params.dsName,
					title: params.dsName,
					entity: params.className,
					representation: params.representationName,
					endpoint: ep.dataset,
					fetchAll: true,
					fetchLimit: params.limit,
					fields: params.fields,
					filter: params.filter
				};
				//
				self.loadPage(ds, params.dsName, params.cellAddress, onLoaded);
			} else
				// TODO: localize
				onError("Endpoint " + params.endpointName + " not found");
		}, function(error) {
			onError && onError(error);
		});
	},
	// load all tables
	loadTables: function(params, onLoaded, onError) {
		var self = this;
		function asyncLoad() {
			var t = p.shift();
			if(t) {
				self.loadTable(t, asyncLoad, onError);
			} else
				onLoaded && onLoaded();
		}
		var p = params.slice(0);
		asyncLoad();
	},
    // publishing
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess){
        //
        var docUrl = this.documentUrl;
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is allready published");
        }
        //
        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;
        // content is documents binary buffer
        // important: get the content only after having set documentUrl and documentTitle, or theses won't be saved 
        content = excelLoaded ? base64.raw_decode(external.GetDocumentContent()) : "";
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            },
            fileName: docTitle + ".xlsx"
        }, function(data, response){
			onSuccess && onSuccess(data, response);
            //
            excelLoaded && external.DocumentSaved();
        });
    },
	// Sage Intelligence
	getSIParams: function() {
		this.SIParams = JSON.parse(this._getCustomData(excelDefines.SIParametersAddress) || "{}");
		var par = this.SIParams = this.SIParams || {
			$uuid: helpers.uuid.generate()
		};
		return par;
	},
	setSIParams: function(params) {
		this.SIParams = params;
        this._storeCustomData(excelDefines.SIParametersAddress, JSON.stringify(this.SIParams));
	},
    // other
    getCurrentDatasourceId: function(){
		return excelLoaded ? document.site.$currentDatasource || "" : "f1af2c6d-ccd9-4488-a2f1-c54166147374";
    },
    selectionChanged: function(){
        // get active table
        var activeCell = external.Application.ActiveCell;
        if (activeCell && activeCell.ListObject) {
            // get table id
            var name = activeCell.ListObject.Name;
            var tableId = null;
            var dss = this.getDatasources();
            for (var ds in dss) {
                if (dss[ds].dsName === name) {
                    tableId = ds;
                    break;
                }
            }
            if (tableId && (document.site.$currentDatasource !== tableId)) {
                document.site.$currentDatasource = tableId;
                document.site.mainPage && document.site.mainPage.idMap &&
                Object.keys(document.site.mainPage.idMap).forEach(function(p){
                    var vignette = document.site.mainPage.idMap[p];
                    if (vignette.vignette && vignette.vignette.$urlParts && (vignette.vignette.$urlParts.representationRoot == "excelActionPanelDs")) 
                        vignette.doPicker("refresh");
                });
            }
        }
    }
});
