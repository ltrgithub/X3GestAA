"use strict";

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;
var httpController = require("syracuse-ui/lib/controller/httpController");
// allow debug in Firefox
var excelLoaded = (external && external.Application);
var paramsEntity = require("msoffice/lib/excel/contract/entities/excelSIParams").entity;

exports.getPrototype = function(reprName, facetName, onSuccess, onError) {
	var result = {};
	var itemProto = syra_site.excelDocument.getDataModel().getPrototype(paramsEntity, "$edit");
	if (facetName == "$edit") {
		result.$prototype = itemProto;
	}
	onSuccess(result);
};

function _makeTablesJSON() {
	var par = syra_site.excelDocument.getSIParams();
	return [{
		"$isHidden": true,
		"dsName": "users_1", // create an unique ds name here
		"cellAddress": "Sheet2!A1", // cell to receive data
		"endpointId": par.endpoint.$uuid,
		"className": "users", // class to be fetched
		"representationName": "user", // particular representation
		"fields": ["login", "firstName", "lastName"], // list of fields (leave empty array or null to get all the fields of the representation)
		//		"parameters": "where=(login eq \"guest\")", // relevant url parameters as filters, order bys
		"limit": -1 // number of lines to be fetchet. < 0 means "all"
	}];
}

function _applyDelta(resource, onSuccess, onError) {
	// have to Save ?
	if (resource.$actions && resource.$actions.$save && resource.$actions.$save.$isRequested) {
		resource.$actions.$save.$isRequested = false;
		// CHECK IF ALL PARAMS ARE SET HERE >>>
		// CHECK IF ALL PARAMS ARE SET HERE <<<
		// CREATE JSON TO FETCH RESOURCES HERE >>>
		var tablesStructure = _makeTablesJSON();
		// CREATE JSON TO FETCH RESOURCES HERE <<<
		syra_site.excelDocument.loadTables(tablesStructure, function() {
			// external callback
			excelLoaded && external.onTablesLoaded();
			// continue with js callback
			onSuccess(resource);
		}, function(error) {
			excelLoaded && external.onTablesLoaded(error);
			onError && onError(error);
		});
		return;
	}
	// apply delta
	var par = syra_site.excelDocument.getSIParams();
	if (resource.endpoint && (((par.endpoint && par.endpoint.$key) || "") != resource.endpoint.$key)) {
		// get the endpoint
		var epUrl = syra_site.excelDocument.syracuseBaseUrl + "/endPoints('" + resource.endpoint.$key + "')?representation=endPoint.$details";
		var query = httpController.parseUrl(epUrl).sendRequest(null, function(data) {
			if (data) {
				resource.application = data.application;
				resource.contract = data.contract;
				resource.dataset = data.dataset;
				resource.$baseUrl = ["/sdata", resource.application, resource.contract, resource.dataset].join("/");
				//
				syra_site.excelDocument.setSIParams(helpers.resource.applyDiff(par, resource));
				onSuccess((excelLoaded && syra_site.excelDocument.getSIParams()) || resource);
			} else
			// TODO: localize
			onError("Endpoint " + params.endpointName + " not found");
		}, function(error) {
			onError && onError(error);
		});
	} else {
		syra_site.excelDocument.setSIParams(helpers.resource.applyDiff(par, resource));
		par = syra_site.excelDocument.getSIParams();
		var a = (par.$actions = par.$actions || {});
		var s = (a.$save = a.$save || {});
		// CHECK IF SAVE SHOULD BE ENABLED HERE >>>
		s.$isDisabled = false;
		// CHECK IF SAVE SHOULD BE ENABLED HERE <<<
		onSuccess(par);
	}
}

exports.dispatcher = {
	GET: function(excelQuery, id, data, onSuccess, onError) {
		if (id) {
			onSuccess(syra_site.excelDocument.getSIParams());
		}
	},
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		data = id ? data : data.$resources;
		if (data) {
			_applyDelta(data, onSuccess, onError);
		}
	}
};