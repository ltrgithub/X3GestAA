"use strict"

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;
var httpController = require("syracuse-ui/lib/controller/httpController");
var entity = require("msoffice/lib/excel/contract/entities/excelDatasource").entity;
var dataModel = document.site.excelDocument.getDataModel();

function _computeServiceUrl(resource) {
	if(resource.dataBaseUrl && resource.representation && resource.entity) {
		var facetName = "$bulk";
		var limit = resource.fetchLimit;
		var params = ["representation=" + resource.representation + "." + facetName]
		if(!resource.fetchAll)
			params.push("count=" + limit);
		return ([resource.dataBaseUrl, 
		         resource.entity].join("/") + "?" + 
		         params.join("&"));
	} else
		if(resource.serviceUrl)
			return resource.serviceUrl;
		else
			return "";
}

var _actions = {
	refreshAll: function(action, resource) {
		document.site.excelDocument.refreshAllDatasources();
	},
	refresh: function(action, resource) {
		resource.$uuid && document.site.excelDocument.refreshDatasource(resource.$uuid);
	},
	$delete: function(action, resource) {
		resource.$uuid && document.site.excelDocument.deleteDatasource(resource.$uuid);
	},
	$save: function(action, resource, onSuccess, onError) {
		resource.serviceUrl = _computeServiceUrl(resource);
		// !!! TODO: for now, onSuccess it will not be passes to the function !!!
		var d = document.site.excelDocument;
		d.updateDatasourceToDocument(d.workingCopyToDatasource(resource));
		d.addDatasource(resource);
		//
		if(action) {
			(action.$diagnoses = action.$diagnoses || []).push({
				severity: "success",
				message: "Modifications have been applied"
			});
		}
	}
}

var _operationMap = {
	refreshAll: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshAllDatasources();
		}
	},
	refresh: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshDatasource(id);
		}
	}
}

function _applyDelta(resource, target) {
	var result = {};

	var datasource = target = target || document.site.excelDocument.getDatasource(resource.$uuid) || {};
	if(resource.$isDeleted) {
		document.site.excelDocument.deleteDatasource(resource.$uuid);
	} else {
		// TODO: realy genericaly apply delta here
		if(resource.hasOwnProperty("endpointRef")) {
			target.endpointRef = resource.endpointRef;
			entity.$relations["endpointRef"].$propagate(target, resource.endpointRef);
		}
		if(resource.hasOwnProperty("menuItem")) {
			target.menuItem = resource.menuItem;
			entity.$relations["menuItem"].$propagate(target, resource.menuItem);
		}
		if(resource.hasOwnProperty("representationRef")) {
			target.representationRef = resource.representationRef;
			entity.$relations["representationRef"].$propagate(target, resource.representationRef);
		}
		if(resource.hasOwnProperty("fetchAll")) {
			target.fetchAll = resource.fetchAll;
		}
		if(resource.hasOwnProperty("fetchLimit")) {
			target.fetchLimit = resource.fetchLimit;
		}
		if(resource.hasOwnProperty("filter")) {
			target.filter = resource.filter;
		}
		if(resource.hasOwnProperty("title")) {
			target.title = resource.title;
		}
		if(resource.hasOwnProperty("orderBys")) {
			target.orderBys = resource.orderBys.map(function(order) {
				return {
					$uuid: order.$uuid,
					name: order.name,
					title: order.title
				}
			});
		}
	}
	document.site.excelDocument._saveDatasources();
	if(resource.$actions)
		forEachKey(resource.$actions, function(key, action) {
			if(!action.$isRequested) {
				action.$isDisabled = false;
				return;
			}
			result = _actions[key] && _actions[key](action, target);
			action.$isRequested = false;
			action.$isDisabled = true;
		});
	//
	return result;
}

// currently not used, since filter is x-string (changing to x-filter will require additional metadata
// works for a single resource only at the moment!
function _addFilterProperties(excelQuery, id, data, result, onSuccess) {
	var $resources = result.$resources;
	var invokeSuccess = true;
	
	if ($resources) {
		$resources.map(function($resource) {
			if ($resource.$url) {
				var parts = ($resource.$url.split("?")[0] || "").split("/");
				var repr = $resource.$url.match(/\?.*representation=(.*)\.(\$|%24)/);
				repr = ((repr && repr[1]) || "").split("&")[0];
				if (repr) {
					repr = repr + ".$bulk";
					var protoUrl = parts.slice(0, 5).join("/") + "/$prototypes('" + repr + "')";

					var query = httpController.parseUrl(protoUrl).sendRequest(null, function(data) {
						invokeSuccess = false;
						
						$resource.$properties = $resource.$properties || {};
						$resource.$properties.filter = {
							$title: "Filter: <no filter>",
							$item: { 
								$properties: { }
							}
						};
						var filterPrototype = data.$properties.$resources.$item.$properties;
						var dataSourcefilterPrototype = $resource.$properties.filter.$item.$properties;
						Object.keys(filterPrototype).map(function($property) {
							var props = filterPrototype[$property];
							if (props.$capabilities.indexOf("filter") >= 0) {
								props.$isUnique = false;
								props.$isMandatory = false;
								props.$isReadOnly = false;
								props.$linksToDetails = false;
								dataSourcefilterPrototype[$property] = props;
							}
						});
						onSuccess(result);
					});
				}
			}
			return $resource;
		});
		result.$resources = $resources;
	}
	
	if (invokeSuccess) {
		onSuccess(result);
	}
}

exports.dispatcher = {
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		// data = id ? data : data.$resources;
		var resData = document.site.excelDocument.getDatasourcesResource(id ? data.$uuid : null);
		if(data) {
			_applyDelta(data, resData);
			var resources = data.$resources;
			if(resources && Array.isArray(resources))
				resources.forEach(function(res) {
					_applyDelta(res);
				});
		}
		if(resData.$resources && data.$resources) {
			var dataMap = data.$resources.reduce(function(prev, val) {
				prev[val.$uuid] = val;
				return prev;
			}, {});
			resData.$resources.forEach(function(r) {
				dataMap[r.$uuid] && helpers.object.extend(r, dataMap[r.$uuid], false, true);
			});
			if(data.$actions) 
				helpers.object.extend(resData.$actions = (resData.$actions || {}), data.$actions, false, true);
		} else
			if(id)
				helpers.object.extend(resData, data, false, true);
		onSuccess(resData);
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if(id) {
			document.site.excelDocument.deleteDatasource(id);
			document.site.excelDocument._saveDatasources();
		}
		var h = document.site.$prototype && document.site.$prototype.$links && document.site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			}
		});
	}
}

exports.executeOperation = function(name, resourceId, method, data, onSuccess, onError) {
	var op = _operationMap[name] && _operationMap[name][method];
	if(!op) throw new Error("Operation unknown "+name+" for entity excelDatasources");
	op(resourceId, data, onSuccess, onError);
}

exports.workingCopies = {
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		var m = document.site.excelDocument.getDataModel();
		var e = m.pluralToEntity("excelDatasources");
		//
		var a = data.$actions = data.$actions || {};
		var s = a.$save = a.$save || {};
		s.$diagnoses = [];
		//
		var resData = m.getWorkingCopy(id);
		if(data) {
			_applyDelta(data, resData);
		}
		//
		s.$isRequested = false;
//		s.$isDisabled = false;
		//
		helpers.object.extend(resData, data, false, true);
		m.applyMeta(e, resData);
		//
		onSuccess(resData);
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		document.site.excelDocument.getDataModel().deleteWorkingCopy(id);
	}
}

