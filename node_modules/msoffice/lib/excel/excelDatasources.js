"use strict"

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;


exports.getPrototype = function(facetName, onSuccess, onError) {
	var result = {};
	var itemProto = {
		$type: "application/json",
		$title: "{title}",
		$value: "{endpoint}/{entity}/{representation}",
		$properties: {
			description: {
				$title: "Description",
				$type: "application/x-string"
			},
			dsName: {
				$title: "Name",
				$type: "application/x-string"
			},
			title: {
				$title: "Title",
				$type: "application/x-string"
			},
			endpoint: {
				$title: "Endpoint",
				$type: "application/x-string"
			},
			entity: {
				$title: "Entity",
				$type: "application/x-string"
			},
			representation: {
				$title: "Representation",
				$type: "application/x-string"
			},
			fetchAll: {
				$title: "Fetch all",
				$type: "application/x-boolean"
			},
			fetchLimit: {
				$title: "Fetch limit",
				$type: "application/x-integer"
			},
			orderBys: {
				$title: "Order bys",
				$type: "application/x-string"
			}
		},
		$links: {
			$delete: {
				$url: "excel://excelDatasources('{$uuid}')?representation=excelDatasource.$details",
				$method: "DELETE"
			},
			refresh: {
				$title: "Refresh",
				$url: "excel://excelDatasources('{$uuid}')/$service/refresh?representation=excelDatasource.$details",
				$method: "POST"
			}
		}
	}
	if(facetName == "$query") {
		result.$prototype = {
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: itemProto
				}
			},
			$links: {
				browseMenu: {
					$title: "Select by menu",
					$type: "application/json; vnd-sage=syracuse",
					$url: "/sdata/syracuse/collaboration/syracuse/excelBrowseDatasources/$template/$workingCopies?representation=excelBrowseDsMenuItem.$edit",
					$method: "POST"
				},
				browseEntity: {
					$title: "Select by entity",
					$type: "application/json; vnd-sage=syracuse",
					$url: "/sdata/syracuse/collaboration/syracuse/excelBrowseDatasources/$template/$workingCopies?representation=excelBrowseDsEntity.$edit",
					$method: "POST"
				},
				refreshAll: {
					$title: "Refresh all",
					$url: "excel://excelDatasources/$service/refreshAll?representation=excelDatasource.$query",
					$method: "POST"
				}
			}
		};
		result.$prototype.$article = {
			$layout: {
				  "$items": [{
						"$bind": "$resources",
						"$format": "cards",
						"$cardsByRowCount": 2,
						"$cards": {
							"$layout": {
								"$layoutType": "columns",
								"$layoutSubType": "100",
								"$items": [{
									"$items": [{
										"$bind": "dsName"
									}, {
										"$bind": "description"
									}, {
										"$bind": "orderBys"
									}, {
										"$layoutType": "columns",
										"$layoutSubType": "30,70",
										"$items":[{
											"$items": [{
													"$bind": "fetchAll",
													"$isEditMode": true
												}, {
													"$bind": "fetchLimit",
													"$isEditMode": true,
													"$isTopLabelAlignment": false
											}]
										}]
									}]
								}]
							}
						}
				  }]
			   }
		}
	}
	if(facetName == "$details") {
		result.$prototype = itemProto;
		result.$prototype.$article = {
			$layout: {
				$category: "section",
				$items: [{
					$layout: {
						$items: [{
							$bind: "title"
						}, {
							$bind: "entity"
						},{
							"$bind": "fetchAll",
							"$isEditMode": true
						}, {
							"$bind": "fetchLimit",
							"$isEditMode": true,
							"$isTopLabelAlignment": false
						}]
					}
				}]
			}
		}
	}
	onSuccess(result);
}

var _actions = {
	refreshAll: function(resource) {
		document.site.excelDocument.refreshAllDatasources();
	},
	refresh: function(resource) {
		resource.$uuid && document.site.excelDocument.refreshDatasource(resource.$uuid);
	},
	$delete: function(resource) {
		resource.$uuid && document.site.excelDocument.deleteDatasource(resource.$uuid);
	}
}

var _operationMap = {
	refreshall: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshAllDatasources();
		}
	},
	refresh: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshDatasource(id);
		}
	}
}

function _applyDelta(resource) {
	var result = {};
	if(resource.$actions)
		forEachKey(resource.$actions, function(key, action) {
			if(!action.$isRequested)
				return;
			result = _actions[key] && _actions[key](resource);
			action.$isRequested = false;
		});
	var datasource = document.site.excelDocument.getDatasource(resource.$uuid);
	if(resource.$isDeleted) {
		document.site.excelDocument.deleteDatasource(resource.$uuid);
	} else {
		// TODO: realy genericaly apply delta here
		if(resource.hasOwnProperty("fetchAll")) {
			datasource.fetchAll = resource.fetchAll;
		}
		if(resource.hasOwnProperty("fetchLimit")) {
			datasource.fetchLimit = resource.fetchLimit;
		}
	}
	document.site.excelDocument._saveDatasources();
	//
	return result;
}

exports.dispatcher = {
	GET: function(excelQuery, id, data, onSuccess, onError) {
		if(id) {
//			alert("get datasource:" + id);
			onSuccess(document.site.excelDocument.getDatasourcesResource(document.site.$currentDatasource));
		} else
			onSuccess(document.site.excelDocument.getDatasourcesResource());
	},
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		// data = id ? data : data.$resources;
		if(data) {
			_applyDelta(data);
			var resources = data.$resources;
			if(resources && Array.isArray(resources))
				resources.forEach(function(res) {
					_applyDelta(res);
				});
		}
		var resData = document.site.excelDocument.getDatasourcesResource(id ? data.$uuid : null);
		if(resData.$resources && data.$resources) {
			var dataMap = data.$resources.reduce(function(prev, val) {
				prev[val.$uuid] = val;
				return prev;
			}, {});
			resData.$resources.forEach(function(r) {
				dataMap[r.$uuid] && helpers.object.extend(r, dataMap[r.$uuid], false, true);
			});
			if(data.$actions) 
				helpers.object.extend(resData.$actions = (resData.$actions || {}), data.$actions, false, true);
		} else
			if(id)
				helpers.object.extend(resData, data, false, true);
		onSuccess(resData);
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if(id) {
			document.site.excelDocument.deleteDatasource(id);
			document.site.excelDocument._saveDatasources();
		}
		var h = document.site.$prototype && document.site.$prototype.$links && document.site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			}
		});
	}
}

exports.executeOperation = function(name, resourceId, method, data, onSuccess, onError) {
	var op = _operationMap[name] && _operationMap[name][method];
	if(!op) throw new Error("Operation unknown "+name+" for entity excelDatasources");
	op(resourceId, data, onSuccess, onError);
}
