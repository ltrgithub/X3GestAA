"use strict"

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;


exports.getPrototype = function(facetName, onSuccess, onError) {
	var result = {};
	var itemProto = {
		$type: "application/json",
		$title: "{title}",
		$value: "{endpoint}/{entity}/{representation}",
		$: {
			description: {
				$title: "Description",
				$type: "application/x-string"
			},
			dsName: {
				$title: "Name",
				$type: "application/x-string"
			},
			title: {
				$title: "Title",
				$type: "application/x-string"
			},
			endpoint: {
				$title: "Endpoint",
				$type: "application/x-string"
			},
			entity: {
				$title: "Entity",
				$type: "application/x-string"
			},
			representation: {
				$title: "Representation",
				$type: "application/x-string"
			},
			fetchAll: {
				$title: "Fetch all",
				$type: "application/x-boolean"
			},
			fetchLimit: {
				$title: "Fetch limit",
				$type: "application/x-integer"
			},
			orderBys: {
				$title: "Order bys",
				$type: "application/x-string"
			}
		},
		$links: {
			
		},
		$actions: {
			refresh: {
				$title: "Refresh"
			},
			$delete: {
				$title: "Delete"
			}
		}
	}
	if(facetName == "$query") {
		result.$prototype = {
			$: {
				$resources: {
					$type: "application/x-collection",
					$item: itemProto,
					$links: {
						browseMenu: {
							$title: "Select by menu",
							$type: "application/json; vnd-sage=syracuse",
							$url: "/sdata/syracuse/collaboration/syracuse/excelBrowseDatasources/$template/$workingCopies?representation=excelBrowseDsMenuItem.$edit",
							$method: "POST"
						},
						browseEntity: {
							$title: "Select by entity",
							$type: "application/json; vnd-sage=syracuse",
							$url: "/sdata/syracuse/collaboration/syracuse/excelBrowseDatasources/$template/$workingCopies?representation=excelBrowseDsEntity.$edit",
							$method: "POST"
						}
					},
					$actions: {
						refreshAll: {
							$title: "Refresh all"
						}
					}
				}
			}
		};
		result.$prototype.$article = {
			$layout: {
				  "$items": [{
						"$bind": "$resources",
						"$format": "cardList",
						"$columnCount": 1,
						"$cardview": {
							"$layout": {
								"$layoutType": "columns",
								"$layoutSubType": "100",
								"$items": [{
									"$items": [{
										"$bind": "dsName"
									}, {
										"$bind": "description"
									}, {
										"$bind": "orderBys"
									}, {
										"$layoutType": "columns",
										"$layoutSubType": "30,70",
										"$items": [{
											"$items": [{
												"$bind": "fetchAll",
												"$isEditMode": true
											}]
										}, {
											"$items": [{
												"$bind": "fetchLimit",
												"$isEditMode": true,
												"$isTopLabelAlignment": false
											}]
										}]
									}]
								}]
							}
						}
				  }]
			   }
		}
	}
	if(facetName == "$details") {
		result.$prototype = itemProto;
		result.$prototype.$article = {
			$layout: {
				$category: "section",
				$items: [{
					$layout: {
						$items: [{
							$bind: "title"
						}, {
							$bind: "entity"
						},{
							"$bind": "fetchAll",
							"$isEditMode": true
						}, {
							"$bind": "fetchLimit",
							"$isEditMode": true,
							"$isTopLabelAlignment": false
						}]
					}
				}]
			}
		}
	}
	onSuccess(result);
}

var _actions = {
	refreshAll: function(resource) {
		document.site.excelDocument.refreshAllDatasources();
	},
	refresh: function(resource) {
		resource.$uuid && document.site.excelDocument.refreshDatasource(resource.$uuid);
	},
	$delete: function(resource) {
		resource.$uuid && document.site.excelDocument.deleteDatasource(resource.$uuid);
	}
}

function _applyDelta(resource) {
	var result = {};
	if(resource.$actions)
		forEachKey(resource.$actions, function(key, action) {
			if(!action.$isRequested)
				return;
			result = _actions[key] && _actions[key](resource);
			action.$isRequested = false;
		});
	else {
		var datasource = document.site.excelDocument.getDatasource(resource.$uuid);
		// TODO: realy genericaly apply delta here
		if(resource.hasOwnProperty("fetchAll")) {
			datasource.fetchAll = resource.fetchAll;
		}
		if(resource.hasOwnProperty("fetchLimit")) {
			datasource.fetchLimit = resource.fetchLimit;
		}
		document.site.excelDocument._saveDatasources();
	}
	return result;
}

exports.dispatcher = {
	GET: function(excelQuery, id, data, onSuccess, onError) {
		if(id) {
//			alert("get datasource:" + id);
			onSuccess(document.site.excelDocument.getDatasourcesResource(document.site.$currentDatasource));
		} else
			onSuccess(document.site.excelDocument.getDatasourcesResource());
	},
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		data = id ? data : data.$resources;
		if(data) {
			var resources = data;
			if(Array.isArray(resources))
				resources.forEach(function(res) {
					_applyDelta(res);
				});
			else
				result = _applyDelta(resources);
		}
		onSuccess(document.site.excelDocument.getDatasourcesResource(id ? data.$uuid : null));
	}
}
