"use strict";

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;
var entity = require("msoffice/lib/excel/contract/entities/excelDatasource").entity;
var locale = require("syracuse-core/lib/locale");
var dataModel = document.site.excelDocument.getDataModel();

function _computeServiceUrl(resource) {
	if (resource.dataBaseUrl && resource.representation && resource.entity) {
		var facetName = "$bulk";
		// crnit: supervisor SHOULD implement $bulk for QUERY and STATS
		//if (resource.entity.indexOf("QUERY('") === 0) facetName = "$query";
		//if (resource.entity.indexOf("STATS('") === 0) facetName === "$cube";
		var limit = resource.fetchLimit;
		var params = ["representation=" + resource.representation + "." + facetName];
		if (!resource.fetchAll) params.push("count=" + limit);
		return ([resource.dataBaseUrl,
		resource.entity].join("/") + "?" + params.join("&"));
	} else if (resource.serviceUrl) return resource.serviceUrl;
	else return "";
}

var _actions = {
	refreshAll: function(action, resource) {
		document.site.excelDocument.refreshAllDatasources();
	},
	refresh: function(action, resource) {
		resource.$uuid && document.site.excelDocument.refreshDatasource(resource.$uuid);
	},
	$delete: function(action, resource) {
		resource.$uuid && document.site.excelDocument.deleteDatasource(resource.$uuid);
	},
	$save: function(action, resource, onSuccess, onError) {
		resource.serviceUrl = _computeServiceUrl(resource);
		// !!! TODO: for now, onSuccess it will not be passes to the function !!!
		var d = document.site.excelDocument;
		d.updateDatasourceToDocument(d.workingCopyToDatasource(resource));
		d.addDatasource(resource);
		//
		if (action) {
			(action.$diagnoses = action.$diagnoses || []).push({
				severity: "success",
				message: locale.format(module, "modificationsApplied")
			});
		}
	}
};

var _operationMap = {
	refreshAll: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshAllDatasources();
		}
	},
	refresh: {
		POST: function(id, data, onSuccess, onError) {
			document.site.excelDocument.refreshDatasource(id);
		}
	}
};

function _applyDelta(resource, target) {
	var result = {};

	var datasource = target = target || document.site.excelDocument.getDatasource(resource.$uuid) || {};
	if (resource.$isDeleted) {
		document.site.excelDocument.deleteDatasource(resource.$uuid);
	} else {
		// TODO: realy genericaly apply delta here
		if (resource.hasOwnProperty("endpointRef")) {
			var oldEndpointRef = target.endpointRef;
			target.endpointRef = resource.endpointRef;
			entity.$relations["endpointRef"].$propagate(target, resource.endpointRef, oldEndpointRef);
		}
		if (resource.hasOwnProperty("menuItem")) {
			target.menuItem = resource.menuItem;
			entity.$relations["menuItem"].$propagate(target, resource.menuItem);
		}
		if (resource.hasOwnProperty("representationRef")) {
			target.representationRef = resource.representationRef;
			entity.$relations["representationRef"].$propagate(target, resource.representationRef);
		}
		if (resource.hasOwnProperty("fetchAll")) {
			target.fetchAll = resource.fetchAll;
		}
		if (resource.hasOwnProperty("fetchLimit")) {
			target.fetchLimit = resource.fetchLimit;
		}
		if (resource.hasOwnProperty("filter")) {
			target.filter = resource.filter;
		}
		if (resource.hasOwnProperty("title")) {
			target.title = resource.title;
		}
		if (resource.hasOwnProperty("orderBys")) {
			target.orderBys = resource.orderBys.map(function(order) {
				return {
					$uuid: order.$uuid,
					name: order.name,
					title: order.title
				};
			});
		}
	}
	document.site.excelDocument._saveDatasources();
	if (resource.$actions) forEachKey(resource.$actions, function(key, action) {
		if (!action.$isRequested) {
			if (entity && entity.$actions && entity.$actions[key] && typeof entity.$actions[key].$isDisabled === "function") {
				action.$isDisabled = entity.$actions[key].$isDisabled(target);
			} else {
				action.$isDisabled = false;
			}
			return;
		}
		result = _actions[key] && _actions[key](action, target);
		action.$isRequested = false;
		action.$isDisabled = true;
	});
	//
	return result;
}

exports.dispatcher = {
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		// data = id ? data : data.$resources;
		var resData = document.site.excelDocument.getDatasourcesResource(id ? data.$uuid : null);
		if (data) {
			_applyDelta(data, resData);
			var resources = data.$resources;
			if (resources && Array.isArray(resources)) resources.forEach(function(res) {
				_applyDelta(res);
			});
		}
		if (resData.$resources && data.$resources) {
			var dataMap = data.$resources.reduce(function(prev, val) {
				prev[val.$uuid] = val;
				return prev;
			}, {});
			resData.$resources.forEach(function(r) {
				dataMap[r.$uuid] && helpers.object.extend(r, dataMap[r.$uuid], false, true);
			});
			if (data.$actions) helpers.object.extend(resData.$actions = (resData.$actions || {}), data.$actions, false, true);
		} else if (id) helpers.object.extend(resData, data, false, true);
		onSuccess(resData);
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if (id) {
			document.site.excelDocument.deleteDatasource(id);
			document.site.excelDocument._saveDatasources();
		}
		var h = document.site.$prototype && document.site.$prototype.$links && document.site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			},
			data: {
				$diagnoses: [{
					$severity: "success",
					$message: locale.format(module, "resourceDeleted")
				}]
			}
		});
	}
};

exports.executeOperation = function(name, resourceId, method, data, onSuccess, onError) {
	var op = _operationMap[name] && _operationMap[name][method];
	if (!op) throw new Error(locale.format(module, "opUnknown", name));
	op(resourceId, data, onSuccess, onError);
};

exports.workingCopies = {
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		data = helpers.object.clone(data, true);
		var m = document.site.excelDocument.getDataModel();
		var e = m.pluralToEntity("excelDatasources");
		//
		var a = data.$actions = data.$actions || {};
		var s = a.$save = a.$save || {};
		s.$diagnoses = [];
		//
		var resData = m.getWorkingCopy(id);
		if (data) {
			_applyDelta(data, resData);
		}
		resData.$etag++;
		data.$etag = resData.$etag;
		//		data.$diagnoses = [];
		//
		s.$isRequested = false;
		//		s.$isDisabled = false;
		//
		helpers.object.extend(data, resData, true, true);
		m.applyMeta(e, data);
		//
		onSuccess(data, {
			status: 200,
			headers: {
				"content-type": "application/json;vnd.sage=syracuse;charset=UTF-8"
			},
			data: data
		});
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		document.site.excelDocument.getDataModel().deleteWorkingCopy(id);
	}
};