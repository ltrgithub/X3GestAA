"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var article = require('syracuse-ui/lib/article/article');
var PageBuilder = require("syracuse-ui/lib/page/pageBuilder");
var base64 = require("msoffice/lib/Base64").Base64;

function _createBasicLayout(page) {
	page.excelLayoutBoxes = new Array();
	// Ensure a basic layout for entities w/o representation
	page.$item.$layout = page.$item.$layout || {
		$items: [{
			$category: "section",
			$layout: {
				$items: Object.keys(page.$prototype.$properties).map(function($bind) {
					var $item = {
						$bind: $bind
					};
					if ($item.$bind === "$resources") {
						$item.$layout = {};
						$item.$layout.$items = [];
						var proto = page.$prototype.$properties;
						if (proto && proto.$resources && proto.$resources.$item && proto.$resources.$item.$properties) {
							Object.keys(proto.$resources.$item.$properties).map(function(column) {
								$item.$layout.$items.push({
									$bind: column
								});
							});
						}
					}
					return $item;
				})
			}
		}]
	};
}

function ExcelReportPage(){
}

exports.ExcelReportPage = helpers.defineClass(ExcelReportPage, DesktopPage, {
	loadBox: function() {
		this.isAutoInsertFieldDisabled = true;
		return DesktopPage.prototype.loadBox.call(this);
	},
	drawBox: function() {
		this.pageData = null;
	},
    createExcelTemplate: function(excelInterface, refreshOnly){
        _createBasicLayout(this);
        this.createLayout(this.$item, this.$prototype.$properties, null, this.excelLayoutBoxes, null, this.$prototype);
        if (this.embedded) {
            this.createEmbeddedLayout(excelInterface.createExcelTemplate, refreshOnly);
        } else {
            excelInterface.createExcelTemplate(this.excelLayoutBoxes, this.createSimpleData(refreshOnly), refreshOnly);
        }
    },
    populateExcelTemplate: function(excelInterface){
        _createBasicLayout(this);
        this.createLayout(this.$item, this.$prototype.$properties, null, this.excelLayoutBoxes, null, this.$prototype);
        if (this.embedded) {
            this.createEmbeddedLayout(excelInterface.populateExcelTemplate);
        } else {
            excelInterface.populateExcelTemplate(this.excelLayoutBoxes, this.createSimpleData());
        }
    },
    refreshExcelDocument: function(excelInterface){
        _createBasicLayout(this);
        this.createLayout(this.$item, this.$prototype.$properties, null, this.excelLayoutBoxes, null, this.$prototype);
        if (this.embedded) {
            this.createEmbeddedLayout(excelInterface.refreshExcelDocument);
        } else {
            excelInterface.refreshExcelDocument(this.excelLayoutBoxes, this.createSimpleData());
        }
    },
    applyChange: function(){
    },
    applyChangeOffice: function(newData, response, requestUrl){
        var self = this;
        if (!self.pageData) {
            self.pageData = newData;
        } else {
            if (self.pageData.$resources && newData.$resources) {
                self.pageData.$resources.push.apply(self.pageData.$resources, newData.$resources);
            } else {
                if (newData.$resources && self.embedded) {
                    self.pageData.$resources = [];
                    self.pageData.$resources.push.apply(self.pageData.$resources, newData.$resources);
                }
            }
        }
    },
    createLayout: function(article, prototype, parent, boxes, level, baseProto){
        // walk layout and build flat list of boxes which contain properties with type information
        var self = this;
        
        var layoutType;
        var bind;
        var layoutSubType;
        var data;
        var box;
        var hidden;
        var i;

        function getLocalizedText(val){
            return val &&
            val.replace(/\{(@[\w-]+)\}/g, function(match, p1){
                return (baseProto.$localization && baseProto.$localization[p1]) || match;
            });
        }
        
        function getChildItems(layout){
            var itemsArray = [];
            
            function recurse(items){
                items &&
                items.map(function(item){
                    if (item.$bind) {
                        itemsArray.push(item);
                    }
                    if (item.$items) {
                        recurse(item.$items);
                    }
                });
            }
            
            recurse(layout.$items);
            if (itemsArray.length === 0) {
                itemsArray = null;
            }
            return itemsArray;
        }
        
        if (!level) {
            level = 1;
        }
        
        var items = article.$items || (article.$layout && article.$layout.$items);
        
        // If we encounter a cardview, traverse the whole layout tree to extract all $binds
        if (!items) {
            bind = article.$bind;
            if (article.$cardItem) {
                items = getChildItems(article.$cardItem.$layout);
            }
            else 
                if (prototype && bind && prototype[bind] && prototype[bind].$type.indexOf("application/x-array") > -1) {
                    items = [];
                    var props = prototype[bind].$item && prototype[bind].$item.$properties;
                    if (!props) {
                        props = prototype[bind].$item && prototype[bind].$item.$item && prototype[bind].$item.$item.$properties;
                    }
                    if (props) {
                        items = Object.keys(props).map(function(i){
                            return {
                                $bind: i
                            };
                        });
                    }
                }
        }
        
        if (article.$bind && items) {
            // collection
            bind = article.$bind; // collection property
            data = (prototype && bind) ? prototype[bind] : prototype;
            if (!data || data.$type.indexOf("application/x-array") < 0) {
                if (data && data.$type === "application/x-vignette" && data.$location && data.$location.$url && data.$location.$target === "embedded") {
                    self.embedded = self.embedded || [];
                    self.embedded.push(data);
                } else {
                    console.log("unknown type: " + (data && data.$type) + "(" + bind + ")");
                }
            }
            else {
                box = {
                    $title: getLocalizedText(data.$title),
                    $container: "table",
                    $bind: bind
                };
                data = data.$item.$properties || (data.$item.$item && data.$item.$item.$properties);

				if (data && article.$category === "field" && article.$format === "grid") {
                    items = [];
                    var $binds = Object.keys(data);
                    for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                        var $bind = $binds[ii];
                        items.push( {"$bind": $bind});
                    }
                }
            }
        }
        else 
            if (article.$bind && !items) {
                // property
                bind = article.$bind; // property
                hidden = (article.$isHidden !== undefined) ? article.$isHidden : false;
                data = (prototype && bind) ? prototype[bind] : prototype;
                if (data && data.$isExcluded != true && data.$isDisabled != true) {
                    parent.$items = parent.$items || {};
                    parent.$items[bind] = {
                        $type: data.$type,
                        $title: getLocalizedText(data.$title) || bind,
                        $bind: bind,
                        $hidden: hidden,
                        $scale: (data.$scale !== undefined) ? data.$scale : null
                    };
                }
            }
            else {
                // container
                data = prototype;
                box = {
                    $title: getLocalizedText(article.$title),
                    $container: "box"
                };
            }
        
        if (box && box.$title) { // a box with a title is considered as one level of indentation of headers
            box.$level = level;
            level++;
        }
        
        var childBoxes = [];
        items &&
        items.map(function(item){
            self.createLayout(item, data, box, childBoxes, level, baseProto);
        });
        if (box) {
            if (box.$title || box.$items) {
                boxes.push(box);
            }
        }
        for (i = 0; i < childBoxes.length; i++) {
            boxes.push(childBoxes[i]);
        }
    },
    createEmbeddedLayout: function(callback, refreshOnly) {
        var self = this;
        for (var ii = 0, jj = self.embedded.length; ii < jj; ii++) {
            var embeddedData = self.embedded[ii];

            self._parseMenu({$prototype: self.$prototype}, embeddedData.$location);
            
            var resourceUrl = syra_expression.parseUrl(self, embeddedData.$location.$url, self.pageData, embeddedData.$location.$masterBinds);

            syra_controller.loadRepresentation({
                article: null,
                segments: resourceUrl,
                success: function (response) {
                    var $protoArticle = response.$representation && response.$representation.$prototype && response.$representation.$prototype.$article;
                    var $article = response.$representation.$article || $protoArticle;
                    $article = PageBuilder.ensureDefaultArticle({$facet: response.urlSeg.$facet}, $article, response.$representation.$prototype);
                   
                    if ($protoArticle && $protoArticle.$menus) {
                        $article.$menus = $protoArticle.$menus;
                    }

                    embeddedData.$prototype = response.$representation.$prototype;

                    self.createLayout($article, response.$representation.$prototype.$properties, null, self.wordLayoutBoxes, null, response.$representation.$prototype);

                    var options = {};
                    options.url = response.urlSeg.$url;
                    options.page = self;
                    var onSuccess = function (data, response, requestUrl) {
                        self.applyChangeOffice(data, response, requestUrl);
                        callback && callback(self.excelLayoutBoxes, self.createSimpleData(refreshOnly), refreshOnly);
                    };

                    options.error = function () {
                        console.log ("An error was encountered fetch the embedded link");
                    };

                    syra_controller.callServer(null, options, onSuccess);
                }
            });
        }
    },
    _parseMenu: function(article, $menu) {
        var matches = $menu.$url.match(/(\{.*?\})/g);
        if (matches && matches.length) {
            for (var ii = 0, jj = matches.length; ii < jj; ii++) {
                var match = matches[ii];
                var $bind = match.substr(1, match.length - 2);
                if (article.$prototype.$properties[$bind]) {
                        ($menu.$masterBinds = $menu.$masterBinds || {})[$bind] = undefined;
                        $menu.$url = $menu.$url.replace(match, "syraMasterKey" + match.substr(1));
                    }
            }
        }
        $menu.$url = syra_expression.parseUrl(article, $menu.$url);
        var seg = syra_url.parse($menu.$url, true);
        if (!seg.isSyracuse) {
                //Wait futur updates of vignetteField that will manage it internaly
                $menu.$type = "html";
            }
        if ($menu.$masterBinds) {
                //restore url
                $menu.$url = $menu.$url.replace(/syraMasterKey/g, "{");
            }
    },
    createSimpleData: function(refreshOnly){
        var self = this;
        
        function format(expression, res, keepPlaceholder, embeddedProto){
            res = res || {};
            var value = expression &&
            expression.replace(/\{(.*?)\}/g, function(match, p1){
                var val;
                if (embeddedProto) {
                    val = embeddedProto[p1] || (embeddedProto.$localization && embeddedProto.$localization[p1]);
                }
                return val || ((res[p1] || self.pageData[p1] || self.$prototype[p1]) || (self.$prototype.$localization && self.$prototype.$localization[p1]) || (keepPlaceholder && match)) || "";
            });
            return value;
        }
        
        function addProperties(proto, dataOut, dataIn, embeddedProto){
        
            var property;
            for (property in proto) {
                var p = proto[property];
                var prop = {};
                dataOut[property] = prop;
                
                prop.$type = p.$type;
                if (prop.$type === "application/x-array") {
                    var dataArray = dataIn[property];
                    if (dataArray) {
                        prop.$items = [];
                        var i;
                        for (i = 0; i < dataArray.length; i++) {
                            var item = {};
                            prop.$items.push(item);
                            addProperties(p.$item.$properties || (p.$item.$item && p.$item.$item.$properties), item, dataArray[i], embeddedProto);
                        }
                    }
                }
                else 
                    if (prop.$type === "application/x-reference") {
                        if (p.$item && p.$item.$value) {
                            var value = p.$item.$value;
                            if (value && typeof value === "string") {
                                value = format(value, p.$item, true, embeddedProto);
                                value = format(value, dataIn, null, embeddedProto);
                            }
                            var result = {};
                            result.$value = value;
                            result.$title = (dataIn[property] && dataIn[property].$title) || "";
                            result.$description = (dataIn[property] && dataIn[property].$description) || "";
                            result.$symbol = (dataIn[property] && dataIn[property].$symbol) || "";
                            if ((result.$description !== "") && (result.$value === "")) {
                                value = p.$item.$value;
                                if (value && typeof value === "string") {
                                    value = format(value, dataIn, null, embeddedProto);
                                    result.$value = value;
                                }
                            }
                            prop.$value = result;
                        }
                    }
                    else 
                        if (prop.$type === "application/x-document" || prop.$type === "text/rtf" || prop.$type === "text/html" || prop.$type === "text/plain") {
                            var lazyUrl = proto[property] && proto[property].$url;
                            var contentType = dataIn[property] && dataIn[property].$contentType;
                            if (lazyUrl && contentType) {
                                lazyUrl = format(lazyUrl, dataIn, null, embeddedProto);
                                // Workaround for IE7
                                lazyUrl = lazyUrl.replace(/¨/g, "%C2%A8");
                                syra_controller.callServer(null, {
                                    $location: {
                                        $url: lazyUrl
                                    },
                                    syncRqst: true,
                                    $acceptType: "html" // Set html since it may be HTML, plain text or rtf ("html" forces jQuery not to parse the response)
                                }, function(data, response){
                                    var result = {};
                                    result.$value = data;
                                    prop.$value = result;
                                }, function(error){ /* alert(JSON.stringify(error)); */
                                });
                            }
                        }
                        else {
                            var result = {};
                            var value = dataIn[property];
                            if (value && value.$url) {
                                result.$url = format(value.$url, dataIn, null, embeddedProto);
                                prop.$link = result.$url; // E.g. for images - add url als link
                            }
                            else 
                                if (p && p.$url) {
                                    result.$url = format(p.$url, dataIn, null, embeddedProto);
                                    prop.$link = result.$url; // E.g. for images - add url als link
                                }
                            if (p.$type === "application/x-choice") {
                                p.$value.$enum.some(function(element){
                                    if (element.$value === value) {
                                        value = element.$title;
                                        return true;
                                    }
                                    return false;
                                });
                            }
                            else 
                                if (p.$type === "application/x-quantity") {
                                    if (p.$unit && dataIn[p.$unit]) {
                                        var unitProp = dataIn[p.$unit];
                                        result.$title = unitProp.$title || "";
                                        result.$description = unitProp.$description || "";
                                        result.$symbol = unitProp.$symbol || "";
                                    }
                                }
                            if (value && typeof value === "string") {
                                value = format(value, dataIn, null, embeddedProto);
                            }
                            result.$value = value;
                            prop.$value = result;
                            prop.$format = p.$format;
                            
                            if (p.$links && p.$links.$details && p.$links.$details.$url) {
                                prop.$link = format(p.$links.$details.$url, dataIn);
                                var parts = prop.$link.split("/");
                                prop.$link = parts.slice(0, 3).join("/") + "/syracuse-main/html/main.html?url=" + escape(prop.$link);
                            }
                            // Handle special formatted properties here to eventually overide detail link
                            switch (prop.$format) {
                                case "$email":
                                    if (value) {
                                        prop.$link = "mailto:" + value;
                                    }
                                    break;
                                    
                                case "$phone":
                                    if (value) {
                                        prop.$link = "phoneto:" + value;
                                    }
                                    break;
                            }
                        }
            }
        }
        
        var dataOut = {};
        if (refreshOnly != false) {
            addProperties(self.$prototype.$properties, dataOut, self.pageData);
            if (this.embedded) {
                for (var ii = 0, jj = self.embedded.length; ii < jj; ii++) {
                    var embeddedData = self.embedded[ii];
                    addProperties(embeddedData.$prototype.$properties, dataOut, self.pageData, embeddedData.$prototype);
                }
            }
        }
        return dataOut;
    },
    setLineCount: function(lineCount){
    }
});