"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function _computeServiceUrl(resource){
    if (resource.dataBaseUrl && resource.representation && resource.entity) {
        var facetName = "$bulk";
        if (resource.entity.indexOf("STATS('") === 0) 
            facetName = "$cube";
        var limit = resource.fetchLimit;
        var params = ["representation=" + resource.representation + "." + facetName];
        if (!resource.fetchAll && (facetName === "$query" || facetName === "$cube")) 
            params.push("count=" + limit);
        return ([resource.dataBaseUrl, resource.entity].join("/") +
        "?" +
        params.join("&"));
    }
    else 
        if (resource.serviceUrl) 
            return resource.serviceUrl;
        else 
            return "";
}

function _loadPage(articleParent, $excelView, dataset){
    syra_pageBuilder.load({
        layoutSlot: syra_site.body,
        $category: "excelDatasource",
        $facet: "$edit",
        $representation: {
            $prototype: {
                $excelView: $excelView
            },
            $article: {
                $layout: {
                    $items: []
                }
            }
        }
    }, function(page){
        page.unloadRelated = function(save){
            var related = this;
            setTimeout(function(){
                var openerPage = related.openerArticle.page;
                openerPage.fetch();
                syra_site.body.removeChild(related.domItem);
                related.dispose && related.dispose();
                syra_dom.hide(openerPage.domItem, false);
                syra_site.resizeItem();
            }, 10);
        };
        page.applyChange({
            $actions: {}
        });
        page.openerArticle = articleParent;
        syra_dom.hide(articleParent.page.domItem, true);
        dataset && page.applyChange(dataset);
    });
    
}


function _onButtonClick(){
    var article = this.parent;
    switch (this.$bind) {
        case "refreshAll":
            syra_site.excelDocument.refreshAllDatasources();
            break;
        case "refresh":
            syra_site.excelDocument.refreshDatasource(article.$uuid);
            break;
        case "delete":
            syra_site.excelDocument.deleteDatasource(article.$uuid);
            syra_site.excelDocument._saveDatasources();
            article.page.fetch();
            break;
        case "edit":
            _loadPage(article, "edit", article.dataset);
            break;
        case "browseMenu":
        case "browseEntity":
            _loadPage(article, this.$bind);
            break;
    }
}

function _addMenuBar(article, $menus){
    var nav = document.createElement("div");
    for (var ii = 0, jj = $menus.length; ii < jj; ii++) {
        var btn = syra_button.add({
            parent: article,
            slot: nav,
            text: $menus[ii].$title,
            css: "s-mn-link",
            fontIcon: $menus[ii].$bind,
            click: _onButtonClick,
            $bind: $menus[ii].$bind
        });
        btn.link.className = "s-mn-list-btn s-mn-link";
    }
    return nav;
}


function ExcelDatasourcePage(){
}

exports.ExcelDatasourcePage = helpers.defineClass(ExcelDatasourcePage, DesktopPage, {
    initializePage: function($itemPage){
        var $excelView = $itemPage.$excelView || $itemPage.$representation.$prototype.$excelView;
        var $items = [];
        this.$prototype = {
            $properties: {
                description: {
                    $title: syra_office_local.datasource_description,
                    $type: "application/x-string"
                },
                dsName: {
                    $title: syra_office_local.datasource_name,
                    $type: "application/x-string"
                },
                title: {
                    $title: syra_office_local.datasource_title,
                    $type: "application/x-string"
                },
                endpoint: {
                    $title: syra_office_local.datasource_endpoint,
                    $type: "application/x-string"
                },
                endpointRef: {
                    $isMandatory: true,
                    $title: syra_office_local.datasource_endpoint,
                    $value: "{description}",
                    $baseUrl: "/sdata/syracuse/collaboration/syracuse",
                    $type: "application/x-reference",
                    $item: {
                        $key: "{dataset}",
                        $links: {
                            $lookup: {
                                $url: "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$lookup"
                            }
                        },
                        $properties: {
                            applicationRef: {},
                            dataset: {},
                            application: {},
                            contract: {}
                        }
                    }
                },
                menuItem: {
                    $title: syra_office_local.datasource_menuItem,
                    $type: "application/x-reference",
                    $item: {
                        $value: "{description}",
                        $key: "{description}",
                        $properties: {
                            representationRef: {},
                            title: {},
                            linkType: {},
                            requestName: {},
                            requestLevel: {},
                            statName: {},
                            $links: {}
                        },
                        $links: {
                            $lookup: {
                                $url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$lookup&where=(application eq \"{applicationId}\") and (((linkType eq \"$representation\") and (facet eq \"$query\")) or (linkType eq \"$request\") or (linkType eq \"$stats\"))"
                            }
                        }
                    }
                },
                orderBys: {
                    $title: syra_office_local.datasource_orderBys,
                    $capabilities: "delete,reorder",
                    $type: "application/x-array",
                    $item: {
                        $type: "application/x-reference",
                        $item: {
                            $value: "{name}",
                            $title: "{title}",
                            $key: "{$uuid}",
                            $properties: {
                                title: {
                                    "$type": "application/x-string"
                                },
                                name: {
                                    "$type": "application/x-string"
                                }
                            }
                        }
                    
                    },
                    $links: (this.$facet == "$edit") ? {
                        $select: {
                            $title: syra_office_local.datasource_add,
                            $url: "/sdata/syracuse/collaboration/syracuse/lookupEntityAttrs?representation=lookupEntityAttr.$select&dataset={endpoint}&entity={entity}"
                        }
                    } : null
                },
                entity: {
                    $title: syra_office_local.datasource_entity,
                    $type: "application/x-string"
                },
                representation: {
                    $title: syra_office_local.datasource_representation,
                    $type: "application/x-string"
                },
                representationRef: {
                    $title: syra_office_local.datasource_representation,
                    $capabilities: "",
                    $type: "application/x-object",
                    $item: {
                        $value: "{description}",
                        $key: "{respresentation}",
                        $properties: {
                            entity: {
                                $title: syra_office_local.datasource_entity,
                                $type: "application/x-string"
                            },
                            representation: {
                                $title: syra_office_local.datasource_representation,
                                $type: "application/x-string"
                            }
                        },
                        $links: {
                            $lookup: {
                                $url: "/sdata/syracuse/collaboration/syracuse/representationProxies?representation=representationProxy.$lookup&dataset={endpoint}"
                            }
                        }
                    }
                },
                fetchAll: {
                    $title: syra_office_local.datasource_fetchAll,
                    $type: "application/x-boolean"
                },
                fetchLimit: {
                    $title: syra_office_local.datasource_fetchLimit,
                    $type: "application/x-integer"
                },
                filter: {
                    $title: syra_office_local.datasource_filter,
                    $type: "application/x-filter"
                }
            }
        };
        if (this.$facet == "$query") {
            this.$prototype = {
                $title: syra_office_local.datasource_workbook,
                $properties: {
                    $resources: {
                        $type: "application/x-array",
                        $item: this.$prototype
                    }
                }
            };
            $items = [{
                $bind: "$resources",
                $format: "cards",
                renderRecordContent: function(record){
                    syra_dom.remove(record.toolbar);
                    record.body.appendChild(_addMenuBar(record, [{
                        $bind: "refresh",
                        $title: syra_local.box_refresh
                    }, {
                        $bind: "delete",
                        $title: syra_local.fieldDelete
                    }, {
                        $bind: "edit",
                        $title: syra_local.fieldEdit,
                    }]));
                    var $binds = ["dsName", "description", "filter", "orderBys", "fetchAll", "fetchLimit"];
                    for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                        record.page.addItem(record.body, {
                            $bind: $binds[ii]
                        }, record);
                    }
                },
                $layout: {
                    $items: []
                }
            }];
            
        }
        else {
            var $binds;
            switch ($excelView) {
                case "browseMenu":
                    this.$prototype.$title = syra_office_local.datasource_predefined;
                    $binds = ["endpointRef", "menuItem", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
                    $itemPage.initData = {
                        $uuid: helpers.uuid.generate(),
                        fetchLimit: 1000
                    };
                    syra_site.excelDocument.applyMeta($itemPage.initData);
                    break;
                case "browseEntity":
                    this.$prototype.$title = syra_office_local.datasource_browse;
                    $binds = ["endpointRef", "representationRef", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
                    $itemPage.initData = {
                        $uuid: helpers.uuid.generate(),
                        fetchLimit: 1000
                    };
                    syra_site.excelDocument.applyMeta($itemPage.initData);
                    break;
            }
            if (this.$facet == "$details") {
                $binds = ["entity", "description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
            }
            if (!$binds) {
                $binds = ["description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
            }
            for (var ii = 0, jj = $binds.length; ii < jj; ii) {
                var $item = {
                    $bind: $binds[ii]
                };
                if (this.$facet == "$edit" && $item.$bind == "description") {
                    $item.$isEditMode = false;
                    $item.$isTopAlignement = true;
                }
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var $item = {
                        $bind: $binds[ii]
                    };
                    
                    $items.push($item);
                }
            }
            if (this.$facet == "$edit") {
                this.$prototype.$actions = {
                    $save: {
                        $title: syra_office_local.datasource_apply
                    },
                    $abort: {
                        $title: syra_office_local.datasource_cancel
                    }
                };
            }
            $items = [{
                $category: "section",
                $layout: {
                    $items: [{
                        $category: "section",
                        $layout: {
                            $items: $items
                        }
                    }]
                }
            }];
        }
        return {
            $layout: {
                $items: $items
            }
        };
    },
    
    loadBox: function(initData){
        DesktopPage.prototype.loadBox.call(this, initData);
        switch (this.$facet) {
            case "$query":
                this.layoutContent.domItem.insertBefore(_addMenuBar(this, [{
                    $bind: "browseMenu",
                    $title: syra_office_local.datasource_predefined
                }, {
                    $bind: "browseEntity",
                    $title: syra_office_local.datasource_browse
                }, {
                    $bind: "refreshAll",
                    $title: syra_office_local.datasource_refresh_all,
                }]), this.layoutContent.domItem.firstChild);
                this.menuBar.isInitialized = true;
                this.menuBar.toggleBar(false);
                this.fetch();
                break;
            case "$details":
                this.layoutContent.domItem.insertBefore(_addMenuBar(this, [{
                    $bind: "refreshAll",
                    $title: syra_office_local.datasource_refresh_all,
                }]), this.layoutContent.domItem.firstChild);
                //this.menuBar.isInitialized = true;
                this.menuBar.toggleBar(this.menuBar.isInitialized = true);
                break;
        }
    },
    fetch: function(){
        this.applyChange(syra_site.excelDocument.getDatasourcesResource(this.$facet == "$query" ? null : syra_site.excelDocument.getCurrentDatasourceId(), true));
    },
    onMenuClick: function(options){
        switch (options.menu.$bind) {
            case "$save":
                syra_form.postAction(options.menu.page, options.menu, options.menu.articleParent, {
                    $save: {
                        $isRequested: true
                    }
                });
                this.unloadRelated(options.menu.$bind == "$save");
                return false;
            case "$abort":
                this.unloadRelated(false);
                return false;
        }
        return true;
    },
    ensureDefaultArticle: function($article){
        return $article;
    },
    updateWorkingCopy: function(sendBag){
        var resData = syra_site.excelDocument.getDatasourcesResource(sendBag.$uuid);
        sendBag.$etag = this.dataset.$etag;
        var result = {};
        
        var datasource = resData = resData || syra_site.excelDocument.getDatasource(sendBag.$uuid) || {};
        if (sendBag.$isDeleted) {
            syra_site.excelDocument.deleteDatasource(sendBag.$uuid);
        }
        else {
            if (sendBag.endpointRef !== undefined) {
                var oldDataset = resData.endpointRef && resData.endpointRef.dataset;
                resData.endpointRef = sendBag.endpointRef;
                if (resData.endpointRef) {
                    resData.applicationId = (sendBag.endpointRef.applicationRef && sendBag.endpointRef.applicationRef.$uuid) || "";
                    resData.dataset = resData.endpoint = sendBag.endpointRef.dataset;
                    resData.dataBaseUrl = ["/sdata", sendBag.endpointRef.application, sendBag.endpointRef.contract, resData.dataset].join("/");
                    if (resData.dataset && oldDataset && resData.dataset !== oldDataset) {
                        resData.entity = resData.representation = resData.menuItem = resData.filter = resData.title = "";
                    }
                }
                else {
                    resData.applicationId = resData.endpoint = resData.dataset = resData.databaseUrl = "";
                    resData.entity = resData.representation = resData.menuItem = resData.filter = "";
                }
            }
            if (sendBag.menuItem !== undefined) {
                var val = resData.menuItem = sendBag.menuItem;
                if (val) {
                    switch (val.linkType || "$query") {
                        case "$representation":
                            resData.entity = (val.representationRef && val.representationRef.entity) || "";
                            resData.representation = (val.representationRef && val.representationRef.representation) || "";
                            break;
                        case "$request":
                            resData.entity = "QUERY('" + val.requestName + "')";
                            resData.representation = "QUERY~" + val.requestName + (val.requestLevel ? "~" + val.requestLevel : "");
                            break;
                        case "$stats":
                            resData.entity = "STATS('" + val.requestName + "')";
                            resData.representation = "STATS~" + val.statName;
                            break;
                    }
                    resData.title = val.title;
                }
                else {
                    resData.entity = resData.representation = resData.filter = resData.title = "";
                }
            }
            if (sendBag.representationRef !== undefined) {
                resData.representationRef = sendBag.representationRef;
                if (sendBag.representationRef) {
                    resData.representation = sendBag.representationRef.representation;
                    resData.entity = sendBag.representationRef.entity;
                    resData.title = sendBag.representationRef.title;
                    /*["representation", "entity", "title"].forEach(function($bind){
                     if (sendBag.representationRef[$bind] !== undefined) {
                     resData[$bind] = sendBag.representationRef[$bind];
                     }
                     });*/
                }
                else {
                    resData.representation = resData.entity = resData.filter = resData.title = "";
                }
            }
            if (sendBag.fetchAll !== undefined) {
                resData.fetchAll = sendBag.fetchAll;
            }
            if (sendBag.fetchLimit !== undefined) {
                resData.fetchLimit = sendBag.fetchLimit;
            }
            if (sendBag.filter !== undefined) {
                resData.filter = sendBag.filter;
            }
            if (sendBag.title !== undefined) {
                resData.title = sendBag.title;
            }
            if (sendBag.orderBys) {
                resData.orderBys = sendBag.orderBys.map(function(order){
                    return {
                        $uuid: order.$uuid,
                        name: order.name,
                        title: order.title
                    };
                });
            }
        }
        syra_site.excelDocument._saveDatasources();
        var $action = sendBag.$actions && sendBag.$actions.$save;
        if ($action && $action.$isRequested) {
            var resource = this.dataset;
            resource.serviceUrl = _computeServiceUrl(resource);
            syra_site.excelDocument.updateDatasourceToDocument(syra_site.excelDocument.workingCopyToDatasource(resource));
            syra_site.excelDocument.addDatasource(resource);
            ($action.$diagnoses = $action.$diagnoses || []).push({
                severity: "success",
                message: syra_office_local.datasource_modificationsApplied
            });
            $action.$isRequested = false;
            $action.$isDisabled = true;
        }
        helpers.object.extend(sendBag, resData, true, true);
        syra_site.excelDocument.applyMeta(sendBag);
        this.applyChange(sendBag);
    }
});

exports.executeOperation = function(name, id, method, data, onSuccess, onError){
    // saveDocument - POST   
    if (syra_site.excelDocument.documentUrl) 
        syra_site.excelDocument.publishDocument("", null, null, function(data, response){
            // show diagnoses as server doesn't send diagnoses in this case            
            syra_alert.info(syra_office_local.office_document_saved);
        });
    else {
        external.ShowSettingsForm();
    }
};
