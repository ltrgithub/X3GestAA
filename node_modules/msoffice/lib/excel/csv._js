"use strict";

var ez = require('ez-streams');
var httpHelpers = require('@sage/syracuse-core').http;
var csvHelper = require('./csvHelper');

var tracer; // = console.log;

exports.render = function(_, ctx, result, prototype, headers, statusCode) {
	_csvSetHeaders(_, ctx, result, prototype, headers, statusCode);

	let options = {
		"url": ctx.url + "?" + ctx.request.url.split("?")[1]
	};

	let data = csvHelper.generateCsv(_, ctx, options);

	return _csvDirectExport(_, data, ctx.response);
};

function _csvDirectExport(_, data, stream) {
	let os = (stream.pre || stream.emitter) ? stream : ez.devices.node.writer(stream);

	let streamOptions = {
		sync: true
	};
	let reader = ez.devices.array.reader(data, streamOptions);
	let fileBuffer = null;
	let bufferLength = 0;
	reader.transform(ez.transforms.csv.formatter()).forEach(_, function(_, line, index) {
		if (index > 0) {
			bufferLength += line.length + 1;
			if (fileBuffer) {
				fileBuffer = Buffer.concat([fileBuffer, Buffer.from(line)], bufferLength);
			} else {
				fileBuffer = Buffer.from(line);
			}
		}
	});

	os.write(_, fileBuffer);

	os !== stream && os.close && os.close(_);
}

function _csvSetHeaders(_, ctx, result, proto, headers, statusCode) {
	let filename;

	function format(expression, proto, res) {
		res = res || {};
		let value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
			return res[p1] || proto[p1] || p1;
		});
		return value;
	}

	filename = format(proto.$title + (proto.$description ? (" - " + proto.$description) : ""), proto, result);

	headers["content-disposition"] = "attachment; filename=\"" + filename + ".csv\"";
	headers["content-type"] = httpHelpers.mediaTypes.xlsx;
	headers["cache-control"] = "no-cache,must-revalidate";
	ctx.response.writeHead(statusCode, headers);
}