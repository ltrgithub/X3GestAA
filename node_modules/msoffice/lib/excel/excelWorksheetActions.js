"use strict";

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;

exports.getPrototype = function(reprName, facetName, onSuccess, onError) {
	var result = {};
	if (facetName == "$query") {
		result.$prototype = {
			$properties: {},
			$links: {
				refreshAll: {
					$title: "Refresh all",
					$url: "excel://excelDatasources/$service/refreshAll?representation=excelDatasource.$query",
					$method: "POST"
				},
				saveDocument: {
					$title: "Save document to X3",
					$url: "excel://worksheetActions/$service/saveDocument?representation=worksheetAction.$query",
					$method: "POST"
				}
			}
		};
		onSuccess(result);
	}
};

var _actions = {
	saveDocument: function(resource) {
		if (syra_site.excelDocument.documentUrl) syra_site.excelDocument.publishDocument("",
		null, null, function(data, response) {
			// show diagnoses as server doesn't send diagnoses in this case
			syra_diagnose.showDiagnoses({
				$diagnoses: [{
					severity: "info",
					message: "The document has been saved"
				}]
			});
		});
		else external.ShowSettingsForm();
	},
	refreshAll: function(resource) {
		syra_site.excelDocument.refreshAllDatasources();
	}
};

var _operationMap = {
	saveDocument: {
		POST: function(id, data, onSuccess, onError) {
			if (syra_site.excelDocument.documentUrl) syra_site.excelDocument.publishDocument("",
			null, null, function(data, response) {
				// show diagnoses as server doesn't send diagnoses in this case
				syra_diagnose.showDiagnoses({
					$diagnoses: [{
						severity: "info",
						message: "The document has been saved"
					}]
				});
			});
			else external.ShowSettingsForm();
		}
	}
};

function _applyActions(resource) {
	var result = {};
	if (resource.$actions) forEachKey(resource.$actions, function(key, action) {
		if (!action.$isRequested) return;
		result = _actions[key] && _actions[key](resource);
		action.$isRequested = false;
	});
	return result;
}

exports.dispatcher = {
	GET: function(excelQuery, id, data, onSuccess, onError) {},
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		if (data) {
			_applyActions(data);
		}
		onSuccess(result);
	}
};

exports.executeOperation = function(name, resourceId, method, data, onSuccess, onError) {
	var op = _operationMap[name] && _operationMap[name][method];
	if (!op) throw new Error("Operation unknown " + name + " for entity excelDatasources");
	op(resourceId, data, onSuccess, onError);
};