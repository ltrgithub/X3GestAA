"use strict";

var url = require('url');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var tracer; // = console.log;

exports.generateCsv = function(_, ctx, options) {
	return _generateCsv(_, ctx, options);
};

function _generateCsv(_, ctx, options) {
	var parsedUrl = _parseRequestUrl(_, options.url);
	if (parsedUrl.errMsg) {
		tracer && tracer(parsedUrl.errMsg);
		return;
	}

	var $prototype = _getPrototype(_, parsedUrl);
	var $protoItem = ($prototype.$properties.$resources && $prototype.$properties.$resources.$item) || $prototype;

	var $article = _buildQueryArticle($protoItem);
	var items = _makeTablePrototype(_, $protoItem.$properties, $article);

	var $resources = _fetchResource(_, parsedUrl);
	var newData = {
		$resources: $resources
	};

	var header = _makeTableHeader(items, $prototype.$localization);
	var data = ($resources && _makeTableData(newData, $protoItem.$properties, items, $prototype.$localization)) || [];
	data.splice(0, 0, header);

	tracer && tracer("tableData: " + JSON.stringify(data, null, 2));

	return data;
}

function _getPrototype(_, parsedUrl) {
	var db, entity, data;
	if (parsedUrl.contract === "collaboration") {
		db = adminHelper.getCollaborationOrm(_);
		entity = db.getEntity(_, parsedUrl.representationName);
		data = entity && entity.getPrototype(_, parsedUrl.representation);
	} else {
		var endpoint = adminHelper.getEndpoint(_, {
			application: parsedUrl.application,
			contract: parsedUrl.contract,
			dataset: parsedUrl.dataset
		});

		db = endpoint.getModel(_);
		entity = db.getEntity(_, parsedUrl.representationName, "$bulk");
		data = entity && entity.getPrototype(_, parsedUrl.representationName, "$bulk");
	}
	return data || {};
}

function _fetchResource(_, parsedUrl) {
	var resources;
	if (parsedUrl.contract === "collaboration") {
		resources = _fetchCollaborationResource(_, parsedUrl);
	} else {
		resources = _fetchQueryResources(_, parsedUrl);
	}
	return resources;
}

function _fetchCollaborationResource(_, parsedUrl) {
	var resources = [];

	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.getEntity(_, parsedUrl.representationName, "$bulk");
	var cursor = db.createCursor(_, entity);

	var data;
	while (data = cursor.next(_)) {
		resources.push(data.serializeInstance(_));
	}
	return resources;
}

function _fetchQueryResources(_, parsedUrl) {
	var endpoint = adminHelper.getEndpoint(_, {
		application: parsedUrl.application,
		contract: parsedUrl.contract,
		dataset: parsedUrl.dataset
	});
	var handle = endpoint.getOrm(_);

	var client = handle.getClient(_);
	var url = handle._baseUrl + "/" + parsedUrl.syraClass + "?representation=" + parsedUrl.representationName + ".$bulk";
	var r = client.jsonSend(_, {
		head: {
			"accept": "application/json;vnd.sage=syracuse",
			"accept-language": locale.current || "en-US",
			method: "GET",
			url: url
		},
		body: {}
	});
	if (r.head.statusCode === 500) {
		return [];
	}
	return r.body.$resources;
}

function _makeTablePrototype(_, $prototype, $item) {
	var proto = $prototype;
	var _item = $item;
	var items;

	while (_item && _item.$layout && (_item.$bind !== "$resources"))
		_item = _item.$layout.$items && _item.$layout.$items[0];

	if (!_item)
		return;

	items = (_item.$layout && _item.$layout.$items) || _item.$items ||
		Object.keys(proto).filter(function(prop) {
			return proto[prop].$isHidden !== true;
		}).map(function(prop) {
			return {
				$bind: prop
			};
		});

	return items.map(function(item) {
		var protoItem = proto[item.$bind];

		var sp = {
			_name: item.$bind.replace("$", "_"),
			_orgName: item.$bind,
			_title: protoItem.$title,
			_isExcluded: protoItem.$isExcluded
		};

		if (protoItem.$type == "application/x-reference" && protoItem.$item) {
			sp._type = protoItem.$type;
			sp._scale = (protoItem.$scale !== undefined) ? protoItem.$scale : null;

			if (protoItem.$item.$key !== "{$uuid}" && item.$reference && item.$reference.$value) {
				sp._bind = item.$reference.$value.$prop;
			}
		} else if (protoItem.$type == "application/x-quantity" && protoItem.$value) {
			var valueProp = protoItem.$value;
			sp._type = valueProp.$type;
			sp._scale = (valueProp.$scale !== undefined) ? valueProp.$scale : null;
		} else {
			sp._type = protoItem.$type;
			sp._scale = (protoItem.$scale !== undefined) ? protoItem.$scale : null;
		}
		return sp;
	}).filter(function(simpleProto) {
		return !simpleProto._isExcluded && simpleProto._type != "image" && simpleProto._type != "application/x-graph" && simpleProto._type != "application/x-array";
	});
}

function _makeTableHeader($tablePrototype, $localization) {
	var header = [];
	for (var ii = 0, jj = $tablePrototype.length; ii < jj; ii++) {
		var headerColumn = $tablePrototype[ii];
		var title = headerColumn._title;
		if ($localization && _isReference(title)) {
			title = $localization[_parseValue(title)] || title;
		}
		headerColumn._title && header.push(title);
	}
	return header;
}

function _makeTableData(data, $prototype, $tablePrototype, $localization) {
	var proto = $prototype;
	var items = $tablePrototype;

	return data.$resources.map(function(res) {
		return items.map(function(item) {
			var prop = res[item._orgName];
			var propProto = proto[item._orgName];
			var result = "";
			var record = res;

			if (res.$properties && res.$properties[item._orgName] && res.$properties[item._orgName].$isHidden) {
				return result;
			}

			switch (item._type) {
				case "application/x-string":
				case "application/x-integer":
				case "application/x-decimal":
				case "application/x-datetime":
				case "application/x-date":
				case "application/x-time":
				case "application/x-boolean":
					result = _escapeCsv(prop);
					break;
				case "application/x-choice":
					result = _parseChoiceProperty(propProto, res, prop, $localization, item._orgName);
					break;
				case "application/x-reference":
					result = _parseReferenceProperty(propProto, res, prop, item);
					break;
				default:
					result = "";
			}
			if (record && propProto.$links && propProto.$links.$details)
				return result;
			else
				return result;
		});
	});
}

function _buildQueryArticle($prototype) {
	var $article = {
		$category: "worksheet",
		$layout: {}
	};

	var $defined = {};
	var $binds = Object.keys($prototype.$properties);
	var $array = [];
	var $more = [];

	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var $field = $prototype.$properties[$bind];
		if ($field && !$field.$isExcluded) {
			var $item = $defined[$bind] ? syra_site.clone($defined[$bind]) : {
				$bind: $bind
			};
			if ($field.$type == "application/x-array") {
				$array.push($item);
			} else {
				$more.push($item);
			}
		}
	}

	if ($more.length) {
		$article.$layout = {
			$items: $more.concat($array)
		};
	} else {
		$article.$layout.$items = $array;
	}
	return $article;
}

function _parseReferenceProperty(propProto, res, prop, item) {
	var result;
	var record = prop;
	propProto = propProto.$item || {};
	var valueTemplate = item._bind || propProto.$value || propProto.$key;
	if (record && valueTemplate && _isReference(valueTemplate)) {
		valueTemplate = _parseValue(valueTemplate);
		if (record[valueTemplate]) {
			result = _escapeCsv(record[valueTemplate]);
		} else {
			var key = propProto[valueTemplate];
			result = key && res[_parseValue(key)];
		}
	} else {
		result = "";
	}
	return result;
}

function _parseChoiceProperty(propProto, res, prop, localization, name) {
	var result;
	var nameProp = prop;
	var ref = propProto.$value || propProto.$key;
	var $enum = ref && ref.$enum;
	if ($enum && $enum.length === 0) {
		nameProp = res[name];
		var enumProp = res.$properties && res.$properties[name];
		$enum = enumProp.$value && enumProp.$value.$enum;
	}
	if ($enum) {
		for (var ii = 0, jj = $enum.length; ii < jj; ii++) {
			if ($enum[ii] && $enum[ii].$value !== undefined && $enum[ii].$value === nameProp) {
				var titleRef = $enum[ii].$title;
				if (localization && titleRef && _isReference(titleRef)) {
					titleRef = _parseValue(titleRef);
					result = _escapeCsv(localization[titleRef]);
				} else {
					result = titleRef;
				}
				break;
			}
		}
	} else {
		result = nameProp;
	}
	return result;
}

function _parseRequestUrl(_, requestUrl) {
	var parsed = url.parse(requestUrl, true);
	var segs = parsed.pathname.split('/');
	var result = {};

	if (segs.length < 6) {
		result.errMsg = "url incomplete";
		return result;
	}

	result.application = segs[2];
	result.contract = segs[3];
	result.dataset = segs[4];
	result.syraClass = segs[5];
	result.representation = parsed.query.representation;
	result.representationName = result.representation.split('.')[0];

	return result;
}

function _parseValue(value) {
	return value && value.slice(1, -1);
}

function _isReference(value) {
	return value && value.indexOf('{') === 0;
}

function _escapeCsv(data) {
	return '"' + (data || "") + '"';
}