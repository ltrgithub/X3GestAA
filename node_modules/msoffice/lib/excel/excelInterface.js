"use strict";

var helpers = require('syracuse-core/lib/helpers');
var msofficeHelpers = require('msoffice/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var helpers = require("syracuse-core/lib/helpers");
var base64 = require("msoffice/lib/Base64").Base64;
var ExcelInterfaceImpl = require("msoffice/lib/excel/excelInterfaceImpl").ExcelInterfaceImpl;
var ExcelInterfaceDummy = require("msoffice/lib/excel/excelInterfaceDummy").ExcelInterfaceDummy;
function ExcelInterface(){
    var self = this;
    var excelInterfaceCtor;
    
    if (external == "ExcelAddIn.ExcelAddInJSExternal") // Did excel open this page using IE 
    {
        excelInterfaceCtor = ExcelInterfaceImpl;
    }
    else // no excel - so use a dummy stub
    {
        excelInterfaceCtor = ExcelInterfaceDummy;
    }
    
    this.excelInterfaceImpl = new excelInterfaceCtor();
    
    Object.defineProperty(this, "documentUrl", {
        get: function(){
            return self.excelInterfaceImpl.getDocumentUrl();
        },
        set: function(value){
            return self.excelInterfaceImpl.setDocumentUrl(value);
        }
    });
    Object.defineProperty(this, "documentTitle", {
        get: function(){
            return self.excelInterfaceImpl.getDocumentTitle();
        },
        set: function(value){
            return self.excelInterfaceImpl.setDocumentTitle(value);
        }
    });
}

exports.ExcelInterface = helpers.defineClass(ExcelInterface, null, {
    attachResourceUrl: function(url){
        var self = this;
        var documentType = self.excelInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.excelInterfaceImpl.getResourceUrl();
        if (resourceUrl != "") {
            self.loadPage(resourceUrl, null, null, documentType);
        }
    },
    
    onLogin: function(){
        var self = this;

        var role = self.excelInterfaceImpl.getSyracuseRole() || syra_site.userProfile._selectedRoleUiid;
        var loc = self.excelInterfaceImpl.getSyracuseLocale();
        var endpoint = self.excelInterfaceImpl.getSyracuseEndpoint() || syra_site.userProfile._selectedEndpointUiid;

        syra_controller.sendRequest(null, {
            $location: {
                $url: "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit"
            },
            method: "POST",
            data: {
                "$etag": 1,
                "selectedRole": {
                    "$uuid": role 
                },
                "selectedLocale": {
                    "$uuid": loc
                },
                "selectedEndpoint": {
                    "$uuid": endpoint 
                },
                "$actions": {
                    "$save": {
                        "$isRequested": true
                    }
                }
            }
        },function(data, response){
            syra_site.deltaManager.applyObjectDelta(syra_site.userProfile, syra_site.userProfile.dataset, data);

            if (data && data.selectedEndpoint) {
                syra_site.userProfile._selectedEndpointUiid =  data.selectedEndpoint.$uuid;
            }

            if (data && data.selectedRole) {
                syra_site.userProfile._selectedRoleUiid = data.selectedRole.$uuid;
            }

            syra_site.userProfile.currentLangCode = (data && data.selectedLocale && data.selectedLocale.code) || syra_site.localizer.getLanguage();

            self._onLogin();
        });
    },

   _onLogin: function(){
        var self = this;
        var documentType = self.excelInterfaceImpl.getSyracuseDocumentType();
        var resourceUrl = self.excelInterfaceImpl.getResourceUrl();

        syra_controller.sendRequest(null, {
            $location: {
                $url: "/sdata/syracuse/collaboration/syracuse/moduleVersions('officeAddin')?representation=moduleVersion.$details"
            }
        }, function(data, response){
            if (data && data.version) {
                self.excelInterfaceImpl.expectedVersion(data.version);
            }
        });
        
        if (resourceUrl != "") {
            self.loadPage(resourceUrl, null, null, documentType);
        }
    },
    
    loadPage: function(resourceUrl, name, onLoaded, documentType){
        var self = this;
        if (documentType === "excel-report-tpl" || documentType === "excel-report-tpl-refresh" || documentType === "excel-report") {
            syra_controller.loadRepresentation({
                article: null,
                segments: resourceUrl,
                success: function(response){
                    var repr = response.$representation;
                    repr.$article = repr.$article || ((repr.$prototype || {}).$article || {});
                    repr.$article.$category = "excelreport";
                    repr.$prototype = repr.$prototype || {};
                    var page = syra_site.pageLoader.load({
                        $representation: repr,
                        openerUrlSegments: response.openerUrlSegments,
                        $category: "excelreport"
                    });

                    self.fetchData(page, -1, null, function(){
                        if (documentType === "excel-report-tpl") {
                            page.createExcelTemplate(self.excelInterfaceImpl, false);
                        }
                        else 
                            if (documentType === "excel-report-tpl-refresh") {
                                page.createExcelTemplate(self.excelInterfaceImpl, true);
                            }
                            else 
                                if (documentType === "excel-report") {
                                    page.populateExcelTemplate(self.excelInterfaceImpl);
                                }
                        onLoaded && onLoaded();
                    });
                }                
            });
        }
    },
    
    fetchData: function(page, maxLines, data, onLoaded){
        var self = this;
        var options = null;
        
        if (data) {
            if (data.$links && data.$links.$next) {
                var url = syra_site.urlMaker.formatMenuUrl(page, data.$links.$next, data);
                // TODO: proper count detection and insertion
                if (url.indexOf("&count=") < 0) {
                    if (url.indexOf("?") < 0) 
                        url = url + "?count=" + msofficeHelpers.defines.defaultFetchCount;
                    else 
                        url = url + "&count=" + msofficeHelpers.defines.defaultFetchCount;
                }
                options = {
                    $location: {
                        $url: url,
                        $type: data.$links.$next.$type
                    }
                };
            }
            else {
                return;
            }
        }
        
        var locale = self.getDocumentLocale();
        if (locale) {
            options = options || {};
            options.headers = {
                "accept-language": locale
            };
        }
        
        page.fetch(options, function(fetchData, response, requestUrl){
        
            // fetching a single resource, not a query - done here!
            if (fetchData && !fetchData.$resources) {
                page.applyChange(fetchData, response, requestUrl, self.excelInterfaceImpl);
                onLoaded && onLoaded();
                return;
            }
            // first fetch, resize table
            if (!data) {
                var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
                if (maxLines < 0) 
                    page.setLineCount(fetchCount);
                else 
                    page.setLineCount(Math.min(fetchCount, maxLines));
            }
            
            //
            if (!fetchData.$startIndex) 
                fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
            if (!fetchData.$itemsPerPage) 
                fetchData.$itemsPerPage = fetchData.$resources.length;
            //
            if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
                fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
            }
            // apply data
            page.applyChange(fetchData, response, requestUrl, self.excelInterfaceImpl);
            
            if ((((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) && (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
                self.fetchData(page, maxLines, fetchData, onLoaded);
            }
            else {
                onLoaded && onLoaded();
            }
        });
    },
    
    publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess){
        var self = this;
        var docUrl = this.documentUrl;
        
        if (!docUrl) 
            docUrl = this.documentUrl = documentUrl;
        
        if (documentUrl && (docUrl !== documentUrl)) {
            throw new Error("This document is already published");
        }
        
        var docTitle = this.documentTitle;
        if (documentTitle) 
            docTitle = this.documentTitle = documentTitle;
        
        // Retrieving content of doc has to be done bevor setting title and url as done above
        // This is neccessary, because title and url will be also stored in the the doc
        var content = self.excelInterfaceImpl.getDocumentContent();
        
        // dont send any contentType as the output format gets UTF-8 instead of binary
        httpController.upload({
            buffer: content,
            url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.xlsx
            },
            fileName: docTitle + ".xlsx"
        }, function(data, response){
            self.excelInterfaceImpl.notifySaveDocumentDone();
            onSuccess && onSuccess(data, response);
        });
    },
    
    
    publishDocumentX3: function(docUrl){
        var self = this;
        docUrl = docUrl.replace(/%27/g, "'");
        docUrl = docUrl.replace(/%C2%A8/g, "¨");
        var blobKey = docUrl.match(/\/(\S*?)\('(.*?)'\)/);
        if (!blobKey || blobKey.length < 3 || !blobKey[2]) {
            return;
        }
        var blobSplit = "~¨~";
        var entSplit = "~";
        
        var blobKeys = blobKey[2].split(blobSplit);
        var imgKey = blobKeys.slice(2).join(blobSplit);
        var x3Class = blobKeys[0];
        var x3Prop = blobKeys[1];
        var x3Key = blobKeys.slice(2).join(entSplit);
        var x3ClassUrl = x3Class.slice(0, 2) === "C_" ? x3Class.slice(2) : x3Class; // TODO: Review this
        var putBaseUrl = docUrl.match(/([^\s]*?)\(/)[1];
        var baseUrl = putBaseUrl.split("/");
        baseUrl = baseUrl.slice(0, baseUrl.length - 1).join("/");
        var sdataUrl = "/" + baseUrl.split("/").slice(3).join("/");
        
        var wcUuid = helpers.uuid.generate();
        var xhr = new XMLHttpRequest();
        
        var content = self.excelInterfaceImpl.getBase64DocumentContent();
        var filename = self.excelInterfaceImpl.getDocumentFilename();
        
        x3Key = x3Key.replace(/¨/g, "%C2%A8"); // IE doesn't like this character: ¨
        var wcCreateURL = baseUrl + "/" + x3ClassUrl + "('" + x3Key + "')" + "/$workingCopies?representation=" + x3ClassUrl + ".$edit&trackingId=" + wcUuid;
        
        function displayDiagnoses(error){
            function traverseNode(node){
                if (node.$diagnoses) {
                    node.$diagnoses.forEach(function(diag){
                        msg += "\n" + diag.$message;
                        if (diag.$stackTrace) {
                            msg += "\n-----------------------------\n" + diag.$stackTrace;
                        }
                    });
                }
                var prop;
                for (prop in node) {
                    if (prop !== "$diagnoses" && node.hasOwnProperty(prop) && typeof node[prop] === "object") {
                        traverseNode(node[prop]);
                    }
                }
            }
            
            var msg = "";
            try {
                if (error && error.data) {
                    var data = JSON.parse(error.data);
                    traverseNode(data);
                }
            } 
            catch (e) {
            }
            if (msg === "") 
                msg = error && error.data;
            self.excelInterfaceImpl.signalError(true, msg);
        }
        
        function testSuccessfull(diag){
            var success = false;
            var data = JSON.parse(diag);
            if (data.$actions && data.$actions.$save && data.$actions.$save.$diagnoses) {
                var diags = data.$actions.$save.$diagnoses;
                diags.forEach(function(d){
                    if (d.$severity && d.$severity === "success") {
                        success = true;
                    }
                });
            }
            return success;
        }
        
        var protoUrl = baseUrl + "/$prototypes('" + x3ClassUrl + ".$edit')";
        try {
            var data = {};
            xhr.open('GET', protoUrl, false);
            xhr.setRequestHeader("X-Content-Type-Override", "text/plain; charset=x-user-defined");
            xhr.send();
            if (!(xhr.status === 200 || xhr.status === 201)) {
                displayDiagnoses({
                    data: xhr.responseText
                });
                return;
            }
            var response = JSON.parse(xhr.responseText);
            var x3Object = response && response['$instanceUrl'] && response['$instanceUrl'].match(/{\$repUrl}\/(.*?)$/)[1];
        } 
        catch (e) {
            displayDiagnoses({
                data: e
            });
            return;
        }
        
        xhr.open('POST', wcCreateURL, false);
        xhr.setRequestHeader("x3-referer", wcCreateURL); // set referer since the embedded IE7 of .NET may send same garbage here
        xhr.send();
        if (!(xhr.status === 200 || xhr.status === 201)) {
            displayDiagnoses({
                data: xhr.responseText
            });
            return;
        }
        try {
            var wc = JSON.parse(xhr.responseText);
            var imagePUTUrl = baseUrl + "/$workingCopies('" + wcUuid + "')/" + x3Object + "/" + x3Prop;
            var refererUrl = baseUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
        } 
        catch (e) {
            displayDiagnoses({
                data: e
            });
            return;
        }
        
        httpController.upload({
            buffer: content,
            url: imagePUTUrl,
            headers: {
                "X-Content-Type-Override": httpHelper.mediaTypes.xlsx,
                // send correct content length since IE will send wrong size for binary data. 
                // Later content-length header send by IE is replaced by syracuse server bevor sending headers to X3 (client._js)
                "x3-content-length": content.length,
                "x3-referer": refererUrl
            },
            fileName: filename
        }, function(data, response){
            var wcSaveURL = baseUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
            refererUrl = sdataUrl + "/$workingCopies('" + wcUuid + "')?representation=" + x3ClassUrl + ".$edit";
            var saveWc = {
                "$etag": wc["$etag"],
                "$url": refererUrl,
                "$uuid": wc["$uuid"],
                "$actions": {
                    "$save": {
                        "$isRequested": true
                    }
                }
            };
            
            var saveWcJSon = JSON.stringify(saveWc);
            var xhr = new XMLHttpRequest();
            xhr.open('POST', wcSaveURL, false);
            xhr.setRequestHeader("content-type", "application/json");
            xhr.setRequestHeader("accept", "application/json;vnd.sage=syracuse");
            xhr.setRequestHeader("x3-referer", refererUrl);
            xhr.setRequestHeader("X-HTTP-Method-Override", "PUT");
            xhr.send(saveWcJSon);
            if (!(xhr.status == 200 || xhr.status == 201) || xhr.responseText.indexOf("$diagnoses") > -1) {
                if (testSuccessfull(xhr.responseText) != true) {
                    displayDiagnoses({
                        data: xhr.responseText
                    });
                    return;
                }
            }
            self.excelInterfaceImpl.notifySaveDocumentDone();
        });
    },
    
    getDocumentUrl: function(){
        var self = this;
        return self.excelInterfaceImpl.getDocumentUrl();
    },
    
    getDocumentRepresentation: function(){
        var self = this;
        return self.excelInterfaceImpl.getDocumentRepresentation();
    },
    
    getDocumentLocale: function(){
        var self = this;
        return self.excelInterfaceImpl.getDocumentLocale();
    },
    
    getResourceUrl: function(){
        var self = this;
        return self.excelInterfaceImpl.getResourceUrl();
    }
});

// For debugging
function _getDocumentContent(){
    // This is a xlsx file
    var base64content = "";
    return base64.raw_decode(base64content);
}
