"use strict";

var fs = require('fs');
var zip = require('streamline-zip');
var excelDefines = require("../helpers").defines;
var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");

// TODO: pass just one url
exports.render = function(_, response, url, fullUrl) {
	var parts = (url.split("?")[0] || "").split("/");
	var queryParts = helpers.url.parseQueryString(fullUrl.split("?")[1] || "");
	var repr = url.match(/\?.*representation=(.*)\./);
	var connectUrl = parts.slice(0, 3).join('/');
	var resourceUrl = url.substring(connectUrl.length) + "&amp;count=" + excelDefines.defaultFetchCount;
	// TODO: filters management; for now just pass where clause into the url
	if(queryParts.where) resourceUrl += "&amp;where=" + encodeURIComponent(queryParts.where); 
	//
	var dsName = excelDefines.x3CustomPropDsPrefix+"."+url.split("?")[0].split('/').slice(-2).join('_');
	var datasources = {};
	var dsUuid = helpers.uuid.generate();
	datasources[dsUuid] = {
		$uuid: dsUuid,
		dsName: dsName,
		title: dsName,
		application: parts[4],
		contract: parts[5],
		endpoint: parts[6],
		entity: parts[7],
		representation: (repr && repr[1]) || "",
		$url: resourceUrl,
		$mustRefresh: true,
		fetchAll: true
	}
	if(queryParts.orderBy) {
		var idx = 0;
		datasources[dsUuid].orderBys = queryParts.orderBy.split(",").map(function(orderBy) {
			var orderParts = orderBy.split(" ");
			return {
				$index: idx++,
				name: orderParts[0],
				title: orderParts[0],
				order: orderParts[1] || "asc"
			}
		});
	}
	if(queryParts.where)
		datasources[dsUuid].rawWhere = queryParts.where;
	//
	new zip.Zip(response, {
		filter: function(_, name, entry) {
			return name !== '.svn'; 
		},
		transform: function(_, contents, entry) {
			switch(entry.name) {
				case "xl/sharedStrings.xml":
					//
					return new Buffer(contents.toString('utf8').
						replace("___dictionnary___", JSON.stringify({
							serverUrlAddress: excelDefines.serverUrlAddress,
							documentUrlAddress: excelDefines.documentUrlAddress,
							documentTitleAddress: excelDefines.documentTitleAddress,
							datasourcesAddress: excelDefines.datasourcesAddress
						})).
						replace("___serverUrl___", connectUrl).
						replace("___documentUrl___", "").
						replace("___documentTitle___", "").
						replace("___datasources___", JSON.stringify(datasources)).
						replace("___addInDownloadLabel___", locale.format(module, "addInDownloadLabel"))
						);
				case "xl/worksheets/sheet2.xml":
					return new Buffer(contents.toString('utf8').
						replace("___addInDownloadTip___", locale.format(module, "addInDownloadTip"))
						);
				case "xl/worksheets/_rels/sheet2.xml.rels":
					return new Buffer(contents.toString('utf8').
						replace("___addInDownloadAddress___", connectUrl + "/msoffice/lib/excel/addIn/ExcelAddinSetup.msi")
						);
				default:
					return contents;
			}
		}		
	}).add(_, {
		path: __dirname + "/template",
	}).finish(_);
};
