"use strict";

var fs = require('fs');
var zip = require('streamline-zip');
var excelHelpers = require("../helpers");
var excelDefines = excelHelpers.defines;
var excelUtils = excelHelpers.utils;
var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

var tracer = console.log;
var tracer = null;

exports.render = function(_, response, url) {
	var parts = (url.split("?")[0] || "").split("/");
	var queryParts = helpers.url.parseQueryString(url.split("?")[1] || "");
	var repr = url.match(/\?.*representation=(.*)\.\$/);
	tracer && tracer("repr. matches: " + sys.inspect(repr));
	repr = ((repr && repr[1]) || "").split("&")[0];
	tracer && tracer("representation: " + sys.inspect(repr));
	var connectUrl = parts.slice(0, 3).join('/');
	// TODO: better extraction of facet
	//var facetName = "$query";
	var facetName = "$bulk";
	var resourceUrl = "/" + parts.slice(3).join("/") + (repr ? "?representation=" + repr + "." + facetName : "") + "&count=" + excelDefines.defaultFetchCount;
//	if(queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where); 
	var p = Object.keys(queryParts).filter(function(key) {
		return (["count", "representation", "format"].indexOf(key) < 0);
	}).map(function(key) {
		return key + "=" + encodeURIComponent(queryParts[key]);
	}).join("&");
	if(p) resourceUrl += "&" + p;
	resourceUrl = resourceUrl.replace(/&/g, "&amp;");
	tracer && tracer("resourceUrl: "+resourceUrl);
	//
	var dsName = excelUtils.makeDatasourceName(url, []);
	//excelDefines.x3CustomPropDsPrefix+"."+url.split("?")[0].split('/').slice(-2).join('_');
	var datasources = {};
	var dsUuid = helpers.uuid.generate();
	datasources[dsUuid] = {
		$uuid: dsUuid,
		dsName: dsName,
		title: dsName,
		application: parts[4],
		contract: parts[5],
		endpoint: parts[6],
		entity: parts[7],
		representation: repr,
		$url: resourceUrl,
		$mustRefresh: true,
		fetchAll: true
	}
	if(queryParts.orderBy) {
		var idx = 0;
		datasources[dsUuid].orderBys = queryParts.orderBy.split(",").map(function(orderBy) {
			var orderParts = orderBy.split(" ");
			return {
				$index: idx++,
				name: orderParts[0],
				title: orderParts[0],
				order: orderParts[1] || "asc"
			}
		});
	}
	if(queryParts.where)
		datasources[dsUuid].rawWhere = queryParts.where;
	//
	new zip.Zip(response, {
		filter: function(_, name, entry) {
			return name !== '.svn'; 
		},
		transform: function(_, contents, entry) {
			switch(entry.name) {
				case "xl/sharedStrings.xml":
					//
					return new Buffer(contents.toString('utf8').
						replace("___dictionnary___", JSON.stringify({
							serverUrlAddress: excelDefines.serverUrlAddress,
							documentUrlAddress: excelDefines.documentUrlAddress,
							documentTitleAddress: excelDefines.documentTitleAddress,
							datasourcesAddress: excelDefines.datasourcesAddress,
							SIParametersAddress: excelDefines.SIParametersAddress
						})).
						replace("___serverUrl___", connectUrl).
						replace("___documentUrl___", "").
						replace("___documentTitle___", "").
						replace("___datasources___", JSON.stringify(datasources)).
						replace("___addInDownloadLabel___", locale.format(module, "addInDownloadLabel"))
						);
				case "xl/worksheets/sheet2.xml":
					return new Buffer(contents.toString('utf8').
						replace("___addInDownloadTip___", locale.format(module, "addInDownloadTip"))
						);
				case "xl/worksheets/_rels/sheet2.xml.rels":
					return new Buffer(contents.toString('utf8').
						replace("___addInDownloadAddress___", connectUrl + "/msoffice/lib/excel/addIn/ExcelAddinSetup.msi")
						);
				default:
					return contents;
			}
		}		
	}).add(_, {
		path: __dirname + "/template",
	}).finish(_);
};
