"use strict";

var fs = require('streamline-fs');
var zip = require('streamline-zip');
var excelHelpers = require("../helpers");
var excelDefines = excelHelpers.defines;
var excelUtils = excelHelpers.utils;
var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var sys = require("util");
var httpHelper = require('syracuse-sdata/lib/httpHelper');
var xlsxHelper = require("./xlsxHelper").XlsxHelper;
var jsurl = require("jsurl");

var tracer; // = console.log;

exports.render = function(_, ctx, result, prototype, headers, statusCode) {
	var reportMode = ctx && ctx.parameters && ctx.parameters.excelReportMode;

	if (reportMode === "no_tpl" || typeof reportMode == "undefined"){
		_xlsx_set_headers(_, ctx, result, prototype, headers, statusCode);
		var options = {"url": ctx.url + "?" + ctx.request.url.split("?")[1]};
		return xlsx_direct_export(_, ctx, options);
	}

	_xlsx_set_headers(_, ctx, result, prototype, headers, statusCode);

	if (reportMode === "new_tpl") return _xlsx_report_tpl(_, ctx, result, prototype);
	if (reportMode === "mod_tpl") return _xlsx_report_mod_tpl(_, ctx, result, prototype);
	return _xlsx_report(_, ctx, result, prototype);
};


function _xlsx_report_tpl(_, ctx, result, prototype) {
	
	_xlsx_serve_empty_template(_, ctx, _xlsx_build_custom_data(_, ctx, result, "rpt_build_tpl", "1"));
}

function _xlsx_report_mod_tpl(_, ctx, result, prototype) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_xlsx_serve_template(_, ctx, doc_uuid, _xlsx_build_custom_data(_, ctx, result, "rpt_is_tpl", "1"));
}

function _xlsx_report_no_tpl(_, ctx, result, prototype) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_xlsx_serve_template(_, ctx, doc_uuid, _xlsx_build_custom_data(_, ctx, result, "rpt_is_tpl", "1"));
}

function _xlsx_report(_, ctx, result, prototype) {
	var doc_uuid = (ctx.parameters && ctx.parameters.doc_uuid) || "";
	_xlsx_serve_template(_, ctx, doc_uuid, _xlsx_build_custom_data(_, ctx, result, "rpt_fill_tpl", "1"));
}

function _xlsx_serve_empty_template(_, ctx, customDataObj) {
	
	var tplPath = "/templates/new_doc";

	var customDataXml = _xlsx_build_custom_data_xml(customDataObj);
	customDataXml = customDataXml.replace(/::documentUrl::/, "");

	xlsxHelper.serve_xlsx_dir(_, ctx.response, tplPath, customDataXml);
}

function _xlsx_build_custom_data_xml(customDataObj) {
	var customData = JSON.stringify(customDataObj);
	var customDataXml =
		"<SyracuseOfficeCustomData>" + customData.replace(/&/g, "&amp;") +
		"</SyracuseOfficeCustomData>";
	return customDataXml;
}

function _xlsx_build_custom_data(_, ctx, result, mode, refresh) {
	var urlRep = ctx ? (ctx.url + "?representation=" + ctx.parameters.representation) : "";

	var parts = (urlRep.split("?")[0] || "").split("/");
	var connectUrl = parts.slice(0, 3).join('/');
	var resourceUrl = urlRep.substring(connectUrl.length);

	var queryParts = {};
	if (result && result.$url) queryParts = helpers.url.parseQueryString(result.$url.split("?")[1] || "");
	
	if (resourceUrl.indexOf(".$query") > 0) {
		resourceUrl = resourceUrl.split(".$query");
		if (resourceUrl.length == 2) resourceUrl = resourceUrl[0] + ".$bulk&count=1000";
	}
	
	if (ctx && ctx.httpSession && ctx.httpSession.userProfileCookie){
		var userRole = jsurl.parse(ctx.httpSession.userProfileCookie).role;
	}

	if (queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where);
	if (queryParts.orderBy) resourceUrl += "&orderBy=" + encodeURIComponent(queryParts.orderBy);

	if (mode === "rpt_build_tpl") {
		var xlsxUrl = ctx.url + "?" + ctx.request.url.split("?")[1];
		var options = {"url": xlsxUrl};
		var url = options.url || "";

		var repr = ctx ? ctx.parameters.representation : "";

		var filter = queryParts.where || "";
		var p = Object.keys(queryParts).filter(function(key) {
			return (["count", "representation", "format", "where"].indexOf(key) < 0);
		}).map(function(key) {
			return key + "=" + encodeURIComponent(queryParts[key]);
		}).join("&");

		var dsName = excelUtils.makeDatasourceName(ctx.url, []);
		var datasources = {};
		var dsUuid = helpers.uuid.generate();
		datasources[dsUuid] = {
			$uuid: dsUuid,
			dsName: dsName,
			title: dsName,
			application: parts[4],
			contract: parts[5],
			endpoint: parts[6],
			entity: parts[7],
			representation: repr, //urlRep,
			$url: resourceUrl,
			$mustRefresh: true,
			fetchAll: true,
			filter: ""
		};
	} 

	return {
		"serverUrl": connectUrl,
		"resourceUrl": resourceUrl,
		"createMode": mode,
		"forceRefresh": refresh,
		"documentRepresentation": ctx ? ctx.parameters.representation : "",
		"originalFileName": "",
		"supportedLocales": ctx ? xlsxHelper.get_supported_locales(_) : [],
		"documentUrl": "::documentUrl::",
		"datasourcesAddress": JSON.stringify(datasources),
		syracuseRole: userRole
	};
}

function _xlsx_serve_template(_, ctx, doc_uuid, customDataObj) {
	var documentUrl;
	var doc;

	if (ctx.parameters && ctx.parameters.test_template) {
		return _xlsx_serve_empty_template(_, ctx, customDataObj, ctx.parameters.test_template);
	}

	doc = xlsxHelper.get_template(_, doc_uuid);
	customDataObj.originalFileName = doc.originalFileName;

	return xlsxHelper.serve_xlsx_buffer(_, ctx.response, doc.content,

	function(_, xmlData) {
		// Preserve old document url (for modifying templates)
		documentUrl = xmlData.match(/"documentUrl":"(.*?)"/);
		documentUrl = documentUrl && documentUrl[1];
	},

	function(_) {
		var customDataXml = _xlsx_build_custom_data_xml(customDataObj);
		documentUrl = documentUrl || "";
		customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);
		return customDataXml;
	});
}

function _xlsx_set_headers(_, ctx, result, proto, headers, statusCode) {
	var filename;

	function format(expression, proto, res) {
		res = res || {};
		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
			return res[p1] || proto[p1] || p1;
		});
		return value;
	}

	filename = format(proto.$title + (proto.$description ? (" - " + proto.$description) : ""), proto, result);

	headers["content-disposition"] = "attachment; filename=\"" + filename + ".xlsx\"";
	headers["content-type"] = httpHelper.mediaTypes.xlsx;
	headers["cache-control"] = "no-cache,must-revalidate";
	ctx.response.writeHead(statusCode, headers);
}

var xlsx_direct_export = exports.xlsx_direct_export = function(_, ctx, options) {
	var url = options.url || "";
	var parts = (url.split("?")[0] || "").split("/");
	var queryParts = helpers.url.parseQueryString(url.split("?")[1] || "");
	var repr = url.match(/\?.*representation=(.*)\.(\$|%24)/);
	tracer && tracer("repr. matches: " + sys.inspect(repr));
	repr = ((repr && repr[1]) || "").split("&")[0];
	tracer && tracer("representation: " + sys.inspect(repr));
	var connectUrl = parts.slice(0, 3).join('/');
	// TODO: better extraction of facet
	//var facetName = "$query";
	var facetName = "$bulk";
	var resourceUrl = "/" + parts.slice(3).join("/") + (repr ? "?representation=" + repr + "." + facetName : "") + "&count=" + excelDefines.defaultFetchCount;
	//	if(queryParts.where) resourceUrl += "&where=" + encodeURIComponent(queryParts.where); 
	var p = Object.keys(queryParts).filter(function(key) {
		return (["count", "representation", "format", "where"].indexOf(key) < 0);
	}).map(function(key) {
		return key + "=" + encodeURIComponent(queryParts[key]);
	}).join("&");
	if (p) resourceUrl += "&" + p;
	resourceUrl = resourceUrl.replace(/&/g, "&amp;");

	var filter = queryParts.where || "";
	tracer && tracer("resourceUrl: " + resourceUrl);

	if (queryParts.testStubFile) {
		options = _readStubFile(_, queryParts.testStubFile);
	}
	var cvgData;
	if (options.data) {
		cvgData = "<SyracuseOfficeCustomData>" + JSON.stringify(options.data).replace(/&/g, "&amp;") + "</SyracuseOfficeCustomData>";
		connectUrl = options.serverUrl;
	}

	if (ctx && ctx.httpSession && ctx.httpSession.userProfileCookie){
		var userRole = jsurl.parse(ctx.httpSession.userProfileCookie).role;
	}

	//
	var dsName = excelUtils.makeDatasourceName(url, []);
	//excelDefines.x3CustomPropDsPrefix+"."+url.split("?")[0].split('/').slice(-2).join('_');
	var datasources = {};
	var dsUuid = helpers.uuid.generate();
	datasources[dsUuid] = {
		$uuid: dsUuid,
		dsName: dsName,
		title: dsName,
		application: parts[4],
		contract: parts[5],
		endpoint: parts[6],
		entity: parts[7],
		representation: repr,
		$url: resourceUrl,
		$mustRefresh: true,
		fetchAll: true,
		filter: filter
	};
	if (queryParts.orderBy) {
		var idx = 0;
		datasources[dsUuid].orderBys = queryParts.orderBy.split(",").map(function(orderBy) {
			var orderParts = orderBy.split(" ");
			return {
				$index: idx++,
				name: orderParts[0],
				title: orderParts[0],
				order: orderParts[1] || "asc"
			};
		});
	}
	if (queryParts.where) datasources[dsUuid].rawWhere = queryParts.where;
	//
	new zip.Zip(ctx.response, {
		filter: function(_, name, entry) {
			return name !== '.svn';
		},
		transform: function(_, contents, entry) {
			switch (entry.name) {
				case "xl/sharedStrings.xml":
					//
					var x = contents.toString('utf8');
					return new Buffer(contents.toString('utf8').
					replace("___dictionnary___", JSON.stringify({
						serverUrlAddress: excelDefines.serverUrlAddress,
						documentUrlAddress: excelDefines.documentUrlAddress,
						documentTitleAddress: excelDefines.documentTitleAddress,
						datasourcesAddress: excelDefines.datasourcesAddress,
						SIParametersAddress: excelDefines.SIParametersAddress,
						supportedLocales: excelDefines.supportedLocales,
						syracuseRole: excelDefines.syracuseRole
					})).
					replace("___serverUrl___", connectUrl).
					replace("___documentUrl___", "").
					replace("___documentTitle___", "").
					replace("___datasources___", JSON.stringify(datasources)).
					replace("___addInDownloadLabel___", locale.format(module, "addInDownloadLabel")).
					replace("___addSupportedLocales___", ctx ? JSON.stringify(xlsxHelper.get_supported_locales(_)) : []).
					replace("___addSyracuseRole___", userRole));
				case "xl/worksheets/sheet2.xml":
					return new Buffer(contents.toString('utf8').
					replace("___addInDownloadTip___", locale.format(module, "addInDownloadTip")));
				case "xl/worksheets/_rels/sheet2.xml.rels":
					return new Buffer(contents.toString('utf8').
					replace("___addInDownloadAddress___", connectUrl + "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE"));
				case "customXml/item1.xml":
					if (cvgData) {
						return new Buffer(cvgData);
					} else {
						return contents;
					}

				default:
					return contents;
			}
		}
	}).add(_, {
		path: __dirname + "/template",
	}).finish(_);
};

function _readStubFile(_, stubFile) {
	stubFile = stubFile.replace("..", "").replace("/", "").replace("\\", "");
	stubFile = "node_modules/msoffice/test/excel/" + stubFile;
	return JSON.parse(fs.readFileSync(stubFile, 'utf8'));
};

exports.handleV6Document = function(_, document, documentUrl) {
	var customDataXml;
	var doc;
	var customDataObj;

	var isZipFile = xlsxHelper.is_xlsx_format(_, document);
	var newDoc = new xlsxHelper.MemoryOutStream();
	var parts = (documentUrl.split("?")[0] || "").split("/");
	var connectUrl = parts.slice(0, 3).join('/');

	if (isZipFile == false) {
		customDataObj = _xlsx_build_custom_data(_, null, null, "v6_doc_embedded", "1");

		// Check for documents already in base64
		if (document.toString().match(/[^A-Za-z0-9+/=\s]/) === null) {
			customDataObj.docContent = document.toString(); 
		} else {
			customDataObj.docContent = document.toString('base64');
		}
		
		customDataObj.serverUrl = connectUrl;
		customDataXml = _xlsx_build_custom_data_xml(customDataObj);
		customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);

		xlsxHelper.serve_xlsx_dir(_, newDoc, "/templates/new_doc", customDataXml);
	} else {
		xlsxHelper.serve_xlsx_buffer(_, newDoc, document,

		function(_, xmlData) {
			// Preserve old document url
			customDataXml = xmlData;
			documentUrl = xmlData.match(/"documentUrl":"(.*?)"/);
			documentUrl = documentUrl && documentUrl[1];
		},

		function(_) {
			if (!customDataXml) {
				customDataObj = _xlsx_build_custom_data(_, null, null, "v6_doc", "1");
				customDataObj.serverUrl = connectUrl;
				var customDataXml = _xlsx_build_custom_data_xml(customDataObj);
				documentUrl = documentUrl || documentUrl;

				customDataXml = customDataXml.replace(/::documentUrl::/, documentUrl);
			}
			return customDataXml;
		});
	}
	return {
		type: httpHelper.mediaTypes.xlsx,
		data: newDoc.content(_)
	};
};