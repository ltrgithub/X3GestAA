"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");

var qmodule = QUnit.module;

globals.context = globals.context || {};
globals.context.session = {
       id: helpers.uuid.generate(),
       getUserLogin: function(_) { return "guest" },
       getUserProfile: function(_) { 
             return {
                    user: function(_) {
                           var db = adminHelper.getCollaborationOrm(_);
                           return db.fetchInstance(_, db.model.getEntity("user"), {jsonWhere: {login: "guest"}});
                    }
             }
       }
}

var doStop = false; 
var volumesToBePresent = [require("syracuse-collaboration/lib/entities/msoffice/msoReportMode").template_storage_volume,
                          require("syracuse-collaboration/lib/entities/msoffice/msoMailMergeDocSel").template_storage_volume];

qmodule("msoffice", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() { process.kill(process.pid); }, 100)
		}
	}
});

asyncTest("Test template storage volumes", volumesToBePresent.length, function(_) {
	
	var db = adminHelper.getCollaborationOrm(_);
	flows.each(_, volumesToBePresent, function(_, code) {
		var entity = db.model.getEntity("storageVolume");
		var instance = db.fetchInstance(_, entity, { "jsonWhere": { "code": code }});
		var present = false;
	    if (instance && instance.$uuid)
	    	present = true;

	    strictEqual(true, present, "Storage volume present: " + code + "(" + instance.$uuid + ")");
	});
	
	start();
});


asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});