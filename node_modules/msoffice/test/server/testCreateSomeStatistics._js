"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");
var bigint = require("syracuse-core/lib/types/bigint");
var decimal = require("syracuse-core/lib/types/decimal");
var datetime = require("syracuse-core/lib/types/datetime");
var date = require("syracuse-core/lib/types/date");


var qmodule = QUnit.module;

globals.context = globals.context || {};
globals.context.session = {
       id: helpers.uuid.generate(),
       getUserLogin: function(_) { return "guest" },
       getUserProfile: function(_) { 
             return {
                    user: function(_) {
                           var db = adminHelper.getCollaborationOrm(_);
                           return db.fetchInstance(_, db.model.getEntity("user"), {jsonWhere: {login: "guest"}});
                    }
             }
       }
}

var doStop = false; 

qmodule("msoffice", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() { process.kill(process.pid); }, 100)
		}
	}
});

asyncTest("No testcase, used to create some test data!", 0, function(_) {
/* uncomment to create testdata 
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity("msoTestEntity");
	for (var i = 1; i <= 12; i++) {
		var periode = entity.createInstance(_, db, null);
		periode.p_string(_, i + "/2012");
		periode.p_decimal(_, decimal.make(i * 1000 + 100000.0));
		periode.p_integer(_, 0);
		periode.p_boolean(_, true);
		periode.p_enum(_, "a");
		periode.p_datetime(_, datetime.make(2012, 11, 10));
		periode.p_date(_, date.make(2012, 11, 10));
		periode.save(_);
	}
*/	
	start();
});


asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});