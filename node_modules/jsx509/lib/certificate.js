"use strict";

/// !doc
/// 
/// # X509 certificate class
/// 
var asn1 = require("./asn1"),
	types = asn1.types,
	OIDS = require("./oids").OIDS,
	helpers = require("syracuse-core/lib/helpers");

function oidStrings(set, oid) {
	var oidNode = asn1.createNode(types.OID, oid);
	return set.children.filter(function(n) {
		return n.children[0].children[0].equals(oidNode);
	}).map(function(n) {
		var vnode = n.children[0].children[1];
		return vnode.buf.slice(vnode.pos, vnode.pos + vnode.len).toString("utf8");
	});
}

/// * `cert = new Certificate(buf)`  
///   Creates a new certificate object from an X509 buffer
exports.Certificate = helpers.defineClass(function(buffer) {
	this.parsed = asn1.fromBuffer(buffer);
}, null, {
	/// * `str = cert.toString()`  
	///   Returns the contents of the certificate in tree form
	toString: function() {
		return this.parsed.toString()
	},
	/// * `subject = cert.subject`  
	///   Returns the subject information (see source for list of fields returned);
	subject: {
		get: function() {
			var node = this.parsed.children[0].children[5];
			return {
				countryName: oidStrings(node, OIDS.at.countryName)[0],
				stateOrProvinceName: oidStrings(node, OIDS.at.stateOrProvinceName)[0],
				localityName: oidStrings(node, OIDS.at.localityName)[0],
				organizationName: oidStrings(node, OIDS.at.organizationName)[0],
				organizationalUnitNames: oidStrings(node, OIDS.at.organizationalUnitName),
				commonName: oidStrings(node, OIDS.at.commonName)[0],
			}
		}
	},
});