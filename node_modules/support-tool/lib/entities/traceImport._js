'use strict';

var ez = require('ez-streams');
var helpers = require('support-tool/lib/helpers');
var zlib = require('zlib');
var util = require('util');
var jsurl = require("jsurl");

exports.entity = {
	$titleTemplate: 'Trace import tool',
	$createActionTitle: 'Import compressed traces',
	$listTitle: 'List of imports',
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true,
		},
		description: {
			$title: "Description",
			$linkToDetails: true,
		},
		sam: {
			$title: 'SAM',
			//$isMandatory: true,
		},
		lisa: {
			$title: 'LISA',
			//$isMandatory: true,
		},
	},
	$services: {
		importTemplate: {
			$title: "Import traces",
			$description: "Import traces",
			$method: "POST",
			$isMethod: true,
			$overridesReply: true,
			$parameters: {
				$url: "{$baseUrl}/traceImportSelects/$template/$workingCopies?representation=traceImportSelect.$edit",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$invocationMode: "async",
			$execute: function(_, context, instance) {
				//
				var opt = context.parameters.parameters && jsurl.parse(context.parameters.parameters);
				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];
				opt.$diagnoses = t.$diagnoses;
				opt.tracker = t;

				if (opt.fs) {
					var fstore;
					try {
						var dbHandle = helpers.getOrm(_);
						fstore = dbHandle.getFileStore(opt.fs);
						if (fstore.fileExists(_)) {
							//throw new Error("test");
							// get reader
							var reader = fstore.createReadableStream(_);
							// get writer
							var collection = dbHandle.db.collection("Trace", _);
							var writer = ez.devices.mongodb.writer(collection, {upsert: true});
							
							if (opt.ext === "gz") {
								reader = reader.nodeTransform(zlib.createGunzip());
							} 
							// Stringify content
							reader = reader.map(ez.mappers.convert.stringify("utf8"));

							// Parse content
							reader = reader.transform(ez.transforms.json.parser({unbounded: false}));

							writer = writer.pre.map(function(_, t) {
								t.viewer = instance.$uuid;
								return t;
							});
							// Pipe reader to writer
							reader.pipe(_, writer);	
						} else {
							throw new Error("File store not found: "+opt.fs);
						}
					}catch(e) {
						console.error(e.stack);
					} finally {
						// always delete the file store that is not necessary anymore
						fstore && fstore.deleteFile(_);
					}
				}
			}
		}
	},
	$links: function(_, instance) {
		return {
			traces: {
				"$title": "Traces view",
				"$url": "/sdata/syracuse/support/support/traces?representation=trace.$query&where="+encodeURIComponent("(viewer eq '" + instance.$uuid + "')"),
				"$method": "GET"
			}
		};

	},
	$uniqueConstraints: []
};


