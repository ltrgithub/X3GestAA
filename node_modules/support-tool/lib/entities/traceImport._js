'use strict';

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var supportHelpers = require('support-tool/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var ez = require('ez-streams');
var ezmongo = require('ez-mongodb');
var zlib = require('zlib');
var unzip = require('streamline-zip/lib/unzip/unzip');

exports.entity = {
	$titleTemplate: 'Trace import tool',
	$createActionTitle: 'Import compressed traces',
	$listTitle: 'List of imports',
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true,
		},
		description: {
			$title: "Description",
			$linkToDetails: true,
		},
		sam: {
			$title: 'SAM',
			//$isMandatory: true,
		},
		ticket: {
			$title: 'Ticket Number',
			//$isMandatory: true,
		},
		entityName: {
			$title: "Entity",
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
		},
		hasData: {
			$title: "Analysed at least one time",
			$type: "boolean",
			$isHidden: true,
			$default: false,			
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$relations: {
		contents: {
			$type: "traceImportContents",
			$title: "Traces files",
			$isChild: true,
			$capabilities: "sort,append"
		}
	},
	$functions: {
		$onDelete: function(_) {
			this.unregisterEntity(_);
			var dbHandle = supportHelpers.getOrm(_);
			var collection = dbHandle.db.collection("Support_" + this.$uuid + "_trace", _);
			try {
				collection.drop();
			} catch(e) {
				// validate method is not provided by mongodb driver 4.X
			}
		},
		registerEntity: function(_) {
			
			function ensureIndex(_, ent) {
				var dbHandle = supportHelpers.getOrm(_);
				var collection = dbHandle.db.collection("Support_" + self.$uuid + "_trace", _);
				for (var idxName in ent.$indexes) {
					var indexItem = ent.$indexes[idxName];
					var fields = {};
					for (var i in indexItem) {
						if (i !== "$unique") fields[i] = ((indexItem[i] === "descending") || (indexItem[i] == -1)) ? -1 : 1;
					}
					collection.ensureIndex(fields, {
						unique: indexItem.$unique
					}, _);
				}
			}
			
			// Ensure stable state
			if (this.entityName(_) !== "trace") {
				this.entityName(_, "trace");
				this.save(_);
			}
			var self = this;
			var _entity = require('support-tool/lib/entities/'+this.entityName(_)+'._js').entity;
			_entity = helpers.object.clone(_entity);
			// Customize list title
			_entity.$listTitle = "Imported traces : ";
			_entity.$listTitleSuffix = this.name(_);
			// Add link on query representation
			_entity.$queryLinks = {
				import: {
					"$title": "Import detail",
					"$url": "{$baseUrl}/traceImports('"+this.$uuid+"')?representation=traceImport.$details",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				}
			};

			var model = supportHelpers.getModel(_);
			var name = "support_"+this.$uuid + "_trace";
			var entities = {};
			entities[name] = _entity;
			model.registerEntities(entities);
			ensureIndex(_, _entity);
		},
		unregisterEntity: function(_) {
			supportHelpers.getModel(_).unregisterEntities(_, ["support_"+this.$uuid + "_trace"]);
		},
		analyseImports: function(_, t) {
			function tracker() {
			    var mapper = function(_, elt) {
					if (elt && elt.severity) diagsCount[elt.severity]++;
					count++;
					var progress = count / fakeTotalTracesNb * 100;
					t.progress = progress < 100 ? progress : 99;
					return elt;
			    };
			    return mapper;
			}

			function log(severity, msg, stack) {
				var d = {$severity: severity, $message: msg};
				if (stack) d.$stackTrace = stack;
				t.$diagnoses.push(d);
			}
			
			function handleZipFile(_, _r, name) {
				var sReaders = ez.devices.generic.empty.reader;
				var unzipper = new unzip.Unzip(_r.read(_), function(filename, filecontent, headers, _) {
					var _subR = ez.devices.buffer.reader(filecontent);
					_subR = handleGzFile(_, _subR, name + "_" + filename.split('.')[0]);
					if (_subR) {
						sReaders = sReaders.concat(_subR);
					}
				});			
				unzipper.unzip(_);
				return sReaders;
			}
			function handleGzFile(_, _r, name) {
				_r = _r.nodeTransform(zlib.createGunzip()) //
				.map(ez.mappers.convert.stringify("utf8")) //
				.transform(ez.transforms.json.parser({
					unbounded: false
				}));
				t.phaseDetail = name;
				log("info", locale.format(module, "analyseFile", name));
				var validGz = true;
				var ent = _r.read(_);
				if (!ent.entity) {
					log("warning", locale.format(module, "noEntity", name));
					validGz = false;
				} else if (self.entityName(_) && ent.entity !== self.entityName(_)) {
					log("warning", locale.format(module, "entityDoNotMatch", name));
					validGz = false;
				} else {
					self.entityName(_, ent.entity);
				}
				
				var tic = _r.read(_);
				if (self.ticket(_) && tic.ticket !== self.ticket(_) && tic.ticket !== "") {
					log("warning", locale.format(module, "ticketDoNotMatch", tic.ticket, name, self.ticket(_)));
					validGz = false;
				} else if (!self.ticket(_) && tic.ticket !== ""){
					log("info", locale.format(module, "ticketFound", tic.ticket));
					self.ticket(_, tic.ticket);
				}
				return validGz ? _r : null;
			}
			//
			//
			t.phase = locale.format(module, "analyseFiles");
			var self = this;
			var count = 0, diagsCount = {info: 0, warn: 0,	debug: 0, error: 0};
			var reader = ez.devices.generic.empty.reader;

			var i = 0;
			// do not take care about already analysed files
			var files = self.contents(_).toArray(_).filter_(_, function(_, content) {
				return !content.analysed(_) && content.import(_).fileExists(_);
			});
			
			// average of each trace equals to 40 byte
			var avg = 40, totalSize = 0;
			files.forEach_(_, function(_, content) {
				totalSize = totalSize + content.size(_);
			});
			var fakeTotalTracesNb = totalSize / avg;
			files.forEach_(_, function(_, content) {
				var _reader = content.import(_).createReadableStream(_);
				try {
					_reader = _reader.peekable();
					var buf = new Buffer(_reader.peek(_), "binary");
					// 0x50, 0x4b -> zip
					if (buf[0] === 0x50 && buf[1] === 0x4b) {
						_reader = handleZipFile(_, _reader, content.name(_));
					} 
					// 0x1f, 0x8b -> gz
					else if (buf[0] === 0x1f && buf[1] === 0x8b){
						_reader = handleGzFile(_, _reader, content.name(_));
					}
					else {
						throw new Error(locale.format(module, "unsupportedFile", content.name(_)));
					}

				} catch(e) {
					// recompute fake traces count to actualize progress bar
					fakeTotalTracesNb = ((fakeTotalTracesNb * avg) - content.size(_)) / avg;
					// Important !!! do not throw !
					log("error", locale.format(module, "errOnFile", content.name(_)), e.stack);
					_reader = null;
				}
				if (_reader) {
					i++;
					reader = reader.concat(_reader);
					content.analysed(_, true);
					self.transcript(_, self.transcript(_) + '\n' + datetime.now() + ' ' + locale.format(module, "tracesStored", content.name(_)));
				} else {
					// Remove bad file
					self.contents(_).deleteInstance(_, content.$uuid);
				}
				self.save(_);
			});

			if (i === 0) {
				log("warning", locale.format(module, "noNewContent"));
				return 0;
			}
			
			var dbHandle = supportHelpers.getOrm(_);
			var collection = dbHandle.db.collection("Support_" + self.$uuid + "_trace", _);
			var writer = ezmongo.writer(collection, {upsert: true}); //
			writer = writer.pre.map(tracker());
			reader.pipe(_, writer);
			console.log("END TOTTAL: "+fakeTotalTracesNb);
			
			t.phaseDetail = locale.format(module, "tracesProcessed", i);
			Object.keys(diagsCount).forEach(function(k) {
				log("success", locale.format(module, "nbTracesSeverity", diagsCount[k], k));
			});
			log("success", locale.format(module, "nbTracesInRec", count, self.name(_)));
			
			return i;
		}
	},
	$services: {
		analyse: {
			$title: "Analyse",
			$description: "Perform analysis",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$overridesReply: true,
			$execute: function(_, context, instance) {
				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];

				if (!instance.$uuid && context.representation && context.representation.type === "$edit") {
					throw new Error(locale.format(module, "analyseOnEdit"));
				}
				
				// Add entity to contract
				if (instance.analyseImports(_, t) > 0 && !instance.hasData(_)) {
					instance.registerEntity(_);
					instance.hasData(_, true);
					instance.save(_);
				}
				t.$links = t.$links || {};
				t.$links.$details = {
					"$title": locale.format(module, "traceView"),
					"$url": "/syracuse-main/html/main.html?url=" + context.baseUrl + "/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				};
			}
		},
	},
	$links: function(_, instance) {
		
		var links = {};
		if (instance.hasData(_)) {
			links.traces = {
				"$title": "Traces view",
				"$url": "{$baseUrl}/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
				"$method": "GET"
			};
		}
		return links;
	},
	$uniqueConstraints: []
};