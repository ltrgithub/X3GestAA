'use strict';

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var supportHelpers = require('support-tool/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var ez = require('ez-streams');
var zlib = require('zlib');

exports.entity = {
	$titleTemplate: 'Trace import tool',
	$createActionTitle: 'Import compressed traces',
	$listTitle: 'List of imports',
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true,
		},
		description: {
			$title: "Description",
			$linkToDetails: true,
		},
		sam: {
			$title: 'SAM',
			//$isMandatory: true,
		},
		lisa: {
			$title: 'LISA',
			//$isMandatory: true,
		},
		import: {
			$title: "Import",
			$type: "binary",
			$isDisabled: false,
			$isReadOnly: function(_, instance) {
				return instance.analysed(_);
			},
			$storage: "db_file",
			$contentType: "application/octet-stream",
		},
		entityName: {
			$title: "Entity",
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
		},
		analysed: {
			$title: "Analysed",
			$type: "boolean",
			$isReadOnly: true,
			$default: false,			
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$functions: {
		$onDelete: function(_) {
			this.unregisterEntity(_);
			var dbHandle = supportHelpers.getOrm(_);
			var collection = dbHandle.db.collection("Support_" + this.$uuid + "_trace", _);
			try {
				collection.drop();
			} catch(e) {
				// validate method is not provided by mongodb driver 4.X
			}
		},
		registerEntity: function(_) {
			// Ensure stable state
			if (this.entityName(_) !== "trace") {
				this.entityName(_, "trace");
				this.save(_);
			}
			var _entity = require('support-tool/lib/entities/'+this.entityName(_)+'._js').entity;
			_entity = helpers.object.clone(_entity);
			// Customize list title
			_entity.$listTitle = "Imported traces : " + this.name(_);
			// Add link on query representation
			_entity.$queryLinks = {
				import: {
					"$title": "Import detail",
					"$url": "{$baseUrl}/traceImports('"+this.$uuid+"')?representation=traceImport.$details",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				}
			};

			var model = supportHelpers.getModel(_);
			var name = "support_"+this.$uuid + "_trace";
			var entities = {};
			entities[name] = _entity;
			model.registerEntities(entities);
		},
		unregisterEntity: function(_) {
			supportHelpers.getModel(_).unregisterEntities(_, ["support_"+this.$uuid + "_trace"]);
		},
	},
	$services: {
		analyse: {
			$title: "Analyse",
			$description: "Perform analysis",
			$method: "GET",
			$isMethod: true,
			$isDefined: function(_, instance) {
				return !instance.analysed(_);
			},
			$invocationMode: "async",
			$execute: function(_, context, instance) {
				
				function logInfo(_, msg) {
					t.$diagnoses.push({
						$severity: "info",
						$message: msg
					});
					instance.transcript(_, instance.transcript(_) + '\n' + datetime.now() + ' ' + msg);
					instance.save(_);
				}
				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];
				var reader = instance.import(_).createReadableStream(_);
				var dbHandle = supportHelpers.getOrm(_);
				var collection = dbHandle.db.collection("Support_" + instance.$uuid + "_trace", _);
				var writer = ez.devices.mongodb.writer(collection, {upsert: true});
				reader = reader.nodeTransform(zlib.createGunzip());
				// Stringify content
				reader = reader.map(ez.mappers.convert.stringify("utf8"));
				// Parse content
				reader = reader.transform(ez.transforms.json.parser({unbounded: false}));


				var peekableReader = reader.peekable();
				// reads a value without consuming it.
				var first = peekableReader.peek(_); 
				if (first && first.entity) {
					// Read and consume the first record
					instance.entityName(_, peekableReader.read(_).entity);
					instance.save(_);

				} else {
					throw new Error(locale.format(module, "noEntity"));
				}
				
				// Add entity to contract
				instance.registerEntity(_);
				
				instance.analysed(_, true);
				// Pipe reader to writer
				peekableReader.pipe(_, writer);
				t.$links = t.$links || {};
				// TODO: $url is bad here !!!
				console.log("HOST: "+context.host);
				t.$links.$details = {
					"$title": "Traces view",
					"$url": "/syracuse-main/html/main.html?url=" + context.baseUrl + "/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				};
				logInfo(_, locale.format(module, "tracesStored"));
			}
		},
	},
	$links: function(_, instance) {
		
		var links = {};
		if (instance.analysed(_)) {
			links.traces = {
				"$title": "Traces view",
				"$url": "{$baseUrl}/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
				"$method": "GET"
			};
		}
		return links;
	},
	$uniqueConstraints: []
};