'use strict';

var ez = require('ez-streams');
var supportHelpers = require('support-tool/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var zlib = require('zlib');

exports.entity = {
	$titleTemplate: 'Trace import tool',
	$createActionTitle: 'Import compressed traces',
	$listTitle: 'List of imports',
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true,
		},
		description: {
			$title: "Description",
			$linkToDetails: true,
		},
		sam: {
			$title: 'SAM',
			//$isMandatory: true,
		},
		lisa: {
			$title: 'LISA',
			//$isMandatory: true,
		},
		import: {
			$title: "Import",
			$type: "binary",
			$isDisabled: false,
			$isReadOnly: function(_, instance) {
				return instance.analysed(_);
			},
			$storage: "db_file",
		},
		entit: {
			$title: "Entity",
			$type: "binary",
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
			$storage: "db_file",
		},
		analysed: {
			$title: "Analysed",
			$type: "boolean",
			$isReadOnly: true,
			$default: false,			
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$functions: {
		
		registerEntity: function(_, _entity) {
			if (!_entity) {
				var reader = this.entit(_).createReadableStream(_).nodeTransform(zlib.createGunzip());
				var writer = ez.devices.string.writer({sync: true});
				reader.pipe(_, writer);
				_entity = JSON.parse(writer.toString());
			}
			supportHelpers.registerEntity(_, "support_"+this.$uuid + "_trace", _entity);
		}
	},
	$services: {
		analyse: {
			$title: "Analyse",
			$description: "Perform analysis",
			$method: "GET",
			$isMethod: true,
			$isDefined: function(_, instance) {
				return !instance.analysed(_);
			},
			$invocationMode: "async",
			$execute: function(_, context, instance) {
				
				function logInfo(_, msg) {
					t.$diagnoses.push({
						$severity: "info",
						$message: msg
					});
					instance.transcript(_, instance.transcript(_) + '\n' + datetime.now() + ' ' + msg);
					instance.save(_);
				}
				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];
				var reader = instance.import(_).createReadableStream(_);
				var dbHandle = supportHelpers.getOrm(_);
				var collection = dbHandle.db.collection("Support_" + instance.$uuid + "_trace", _);
				var writer = ez.devices.mongodb.writer(collection, {upsert: true});
				reader = reader.nodeTransform(zlib.createGunzip());
				// Stringify content
				reader = reader.map(ez.mappers.convert.stringify("utf8"));
				// Parse content
				reader = reader.transform(ez.transforms.json.parser({unbounded: false}));

				var entityWriter = instance.entit(_).createWritableStream(_, {
					contentType: "application/x-entity",
					contentEncoding: "gzip",
					fileName: instance.name(_) + "_entity.gz",
				});
				entityWriter = ez.helpers.binary.writer(entityWriter, {
					bufSize: 64000,
				});

				var ent;
				var peekableReader = reader.peekable();
				// reads a value without consuming it.
				var first = peekableReader.peek(_); 
				if (first && first.entity) {
					entityWriter = entityWriter.pre.nodeTransform(zlib.createGzip());
					entityWriter = entityWriter.pre.map(ez.mappers.convert.bufferify());
					entityWriter = entityWriter.pre.map(ez.mappers.json.stringify({sep: ""}));
					// Read and consume the first record
					ent = peekableReader.read(_).entity;
					entityWriter.write(_, ent);
					entityWriter.write(_);
					logInfo(_, "Entity has been retrieved and stored");
				}
				
				if (!ent) throw new Error("No entity definition available in imported file !");
				// Add entity to contract
				instance.registerEntity(_, ent);
				
				instance.analysed(_, true);
				// Pipe reader to writer
				peekableReader.pipe(_, writer);
				logInfo(_, "Traces have been retrieved and stored");
			}
		},
	},
	$links: function(_, instance) {
		
		var links = {};
		if (instance.analysed(_)) {
			links.traces = {
				"$title": "Traces view",
				"$url": "/sdata/syracuse/support/support/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
				"$method": "GET"
			};
		}
		return links;
	},
	$uniqueConstraints: []
};