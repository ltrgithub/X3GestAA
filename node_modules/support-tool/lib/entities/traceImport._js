'use strict';

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var supportHelpers = require('support-tool/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var ez = require('ez-streams');
var ezmongo = require('ez-mongodb');
var zlib = require('zlib');

exports.entity = {
	$titleTemplate: 'Trace import tool',
	$createActionTitle: 'Import compressed traces',
	$listTitle: 'List of imports',
	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true,
		},
		description: {
			$title: "Description",
			$linkToDetails: true,
		},
		sam: {
			$title: 'SAM',
			//$isMandatory: true,
		},
		ticket: {
			$title: 'Ticket Number',
			//$isMandatory: true,
		},
		entityName: {
			$title: "Entity",
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
		},
		hasData: {
			$title: "Analysed at least one time",
			$type: "boolean",
			$isHidden: true,
			$default: false,			
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$relations: {
		contents: {
			$type: "traceContents",
			$title: "Traces files",
			$isChild: true,
			$capabilities: "sort,append"
		}
	},
	$functions: {
		$onDelete: function(_) {
			this.unregisterEntity(_);
			var dbHandle = supportHelpers.getOrm(_);
			var collection = dbHandle.db.collection("Support_" + this.$uuid + "_trace", _);
			try {
				collection.drop();
			} catch(e) {
				// validate method is not provided by mongodb driver 4.X
			}
		},
		registerEntity: function(_) {
			
			function ensureIndex(_, ent) {
				var dbHandle = supportHelpers.getOrm(_);
				var collection = dbHandle.db.collection("Support_" + self.$uuid + "_trace", _);
				for (var idxName in ent.$indexes) {
					var indexItem = ent.$indexes[idxName];
					var fields = {};
					for (var i in indexItem) {
						if (i !== "$unique") fields[i] = ((indexItem[i] === "descending") || (indexItem[i] == -1)) ? -1 : 1;
					}
					collection.ensureIndex(fields, {
						unique: indexItem.$unique
					}, _);
				}
			}
			
			// Ensure stable state
			if (this.entityName(_) !== "trace") {
				this.entityName(_, "trace");
				this.save(_);
			}
			var self = this;
			var _entity = require('support-tool/lib/entities/'+this.entityName(_)+'._js').entity;
			_entity = helpers.object.clone(_entity);
			// Customize list title
			_entity.$listTitle = "Imported traces : " + this.name(_);
			// Add link on query representation
			_entity.$queryLinks = {
				import: {
					"$title": "Import detail",
					"$url": "{$baseUrl}/traceImports('"+this.$uuid+"')?representation=traceImport.$details",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				}
			};

			var model = supportHelpers.getModel(_);
			var name = "support_"+this.$uuid + "_trace";
			var entities = {};
			entities[name] = _entity;
			model.registerEntities(entities);
			ensureIndex(_, _entity);
		},
		unregisterEntity: function(_) {
			supportHelpers.getModel(_).unregisterEntities(_, ["support_"+this.$uuid + "_trace"]);
		},
		analyseImports: function(_, diags) {
			
			
			function logWarning(msg) {
				diags.push({$severity: "warning",$message: msg});
			}
			var self = this;
			var reader = ez.devices.generic.empty.reader;

			var i = 0;
			self.contents(_).toArray(_).forEach_(_, function(_, content) {
				if (!content.analysed(_) && content.import(_).fileExists(_)) {
					var _r = content.import(_).createReadableStream(_) //
						.nodeTransform(zlib.createGunzip()) //
						.map(ez.mappers.convert.stringify("utf8")) //
						.transform(ez.transforms.json.parser({
							unbounded: false
						}));
					

					var validGz = true;
					var ent = _r.read(_);
					if (!ent.entity) {
						logWarning(locale.format(module, "noEntity", content.name(_)));
						validGz = false;
					} else if (self.entityName(_) && ent.entity !== self.entityName(_)) {
						logWarning(locale.format(module, "entityDoNotMatch", content.name(_)));
						validGz = false;
					} else {
						self.entityName(_, ent.entity);
					}
					
					var tic = _r.read(_);
					if (self.ticket(_) && tic.ticket !== self.ticket(_) && tic.ticket !== "") {
						logWarning(locale.format(module, "ticketDoNotMatch", tic.ticket, content.name(_), self.ticket(_)));
						validGz = false;
					} else {
						self.ticket(_, tic.ticket);
					}
					
					
					
					if (validGz) {
						i++;
						reader = reader.concat(_r);
						content.analysed(_, true);
						self.transcript(_, self.transcript(_) + '\n' + datetime.now() + ' ' + locale.format(module, "tracesStored", content.name(_)));
					} else {
						self.contents(_).deleteInstance(_, content.$uuid);
					}
					
					self.save(_);
				}
				
			});
			
			
			if (i === 0) {
				logWarning(locale.format(module, "noNewContent"));
				return 0;
			}
			
			var dbHandle = supportHelpers.getOrm(_);
			var collection = dbHandle.db.collection("Support_" + self.$uuid + "_trace", _);
			var writer = ezmongo.writer(collection, {upsert: true});
			reader.pipe(_, writer);
			return i;
		}
	},
	$services: {
		analyse: {
			$title: "Analyse",
			$description: "Perform analysis",
			$method: "POST",
			$isMethod: true,
			$invocationMode: "async",
			$overridesReply: true,
			$execute: function(_, context, instance) {
				
				function logInfo(_, msg) {
					t.$diagnoses.push({
						$severity: "info",
						$message: msg
					});
					
					instance.save(_);
				}

				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];

				// Add entity to contract
				if (instance.analyseImports(_, t.$diagnoses) > 0 && !instance.hasData(_)) {
					instance.registerEntity(_);
					instance.hasData(_, true);
					instance.save(_);
				}
				t.$links = t.$links || {};
				t.$links.$details = {
					"$title": "Traces view",
					"$url": "/syracuse-main/html/main.html?url=" + context.baseUrl + "/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
					"$method": "GET",
					"$type": "application/json; vnd-sage=syracuse"
				};
			}
		},
	},
	$links: function(_, instance) {
		
		var links = {};
		if (instance.hasData(_)) {
			links.traces = {
				"$title": "Traces view",
				"$url": "{$baseUrl}/support_"+instance.$uuid+"_traces?representation=support_"+instance.$uuid+"_trace.$query",
				"$method": "GET"
			};
		}
		return links;
	},
	$uniqueConstraints: []
};


exports.contentEntity = {
		$titleTemplate: 'Traces content',
		$createActionTitle: 'Import compressed traces',
		$listTitle: 'List of imports',
		$properties: {
			start: {
				$title: "Import's date",
				$isReadOnly: true,
				$isNullable: true,
			},
			name: {
				$title: "Name",
				$isReadOnly: true,
				$compute: function(_, instance) {
					var imp = instance.import(_);
					return imp.fileExists(_) ? imp.getProperties(_).fileName : null;
				},
			},
			size: {
				$title: "Size",
				$type: "integer",
				$isReadOnly: true,
				$compute: function(_, instance) {
					var imp = instance.import(_);
					return imp.fileExists(_) ? imp.getProperties(_).length : null;
				},
			},
			analysed: {
				$title: "Analysed",
				$type: "boolean",
				$isReadOnly: true,
				$default: false,			
			},
			import: {
				$title: "Import",
				$type: "binary",
				$storage: "db_file",
				$contentType: "application/octet-stream",
				$isReadOnly: function(_, instance) {
					return instance.analysed(_);
				},
				$url: function(_, instance) {
					var parent = instance._parent;
					if (parent) return "{$baseUrl}/" + parent._meta.plural + "('" + parent.$uuid + "')/contents('{$key}')/import";
					return;
				}
			},
		},
		$init: function(_, instance) {
			instance.start(_, datetime.now().toString());
		},
		$defaultOrder: [
			["start", true]
		]

};